
F411_AHRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014954  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  08014af8  08014af8  00015af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015438  08015438  000172cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015438  08015438  00016438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015440  08015440  000172cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015440  08015440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015444  08015444  00016444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  08015448  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000232c  200002d0  08015714  000172d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200025fc  08015714  000175fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000172cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f753  00000000  00000000  000172fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000495b  00000000  00000000  00036a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b88  00000000  00000000  0003b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000155f  00000000  00000000  0003cf38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b96d  00000000  00000000  0003e497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024313  00000000  00000000  00059e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a625d  00000000  00000000  0007e117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124374  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009050  00000000  00000000  001243b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012d408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d0 	.word	0x200002d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014adc 	.word	0x08014adc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	08014adc 	.word	0x08014adc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	@ 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_uldivmod>:
 8000eb4:	b953      	cbnz	r3, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb6:	b94a      	cbnz	r2, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bf08      	it	eq
 8000ebc:	2800      	cmpeq	r0, #0
 8000ebe:	bf1c      	itt	ne
 8000ec0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ec4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec8:	f000 b9be 	b.w	8001248 <__aeabi_idiv0>
 8000ecc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed4:	f000 f83c 	bl	8000f50 <__udivmoddi4>
 8000ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_d2lz>:
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2300      	movs	r3, #0
 8000eea:	4604      	mov	r4, r0
 8000eec:	460d      	mov	r5, r1
 8000eee:	f7ff fdfd 	bl	8000aec <__aeabi_dcmplt>
 8000ef2:	b928      	cbnz	r0, 8000f00 <__aeabi_d2lz+0x1c>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000efc:	f000 b80a 	b.w	8000f14 <__aeabi_d2ulz>
 8000f00:	4620      	mov	r0, r4
 8000f02:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f06:	f000 f805 	bl	8000f14 <__aeabi_d2ulz>
 8000f0a:	4240      	negs	r0, r0
 8000f0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f10:	bd38      	pop	{r3, r4, r5, pc}
 8000f12:	bf00      	nop

08000f14 <__aeabi_d2ulz>:
 8000f14:	b5d0      	push	{r4, r6, r7, lr}
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <__aeabi_d2ulz+0x34>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4606      	mov	r6, r0
 8000f1c:	460f      	mov	r7, r1
 8000f1e:	f7ff fb73 	bl	8000608 <__aeabi_dmul>
 8000f22:	f7ff fe49 	bl	8000bb8 <__aeabi_d2uiz>
 8000f26:	4604      	mov	r4, r0
 8000f28:	f7ff faf4 	bl	8000514 <__aeabi_ui2d>
 8000f2c:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <__aeabi_d2ulz+0x38>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f7ff fb6a 	bl	8000608 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4630      	mov	r0, r6
 8000f3a:	4639      	mov	r1, r7
 8000f3c:	f7ff f9ac 	bl	8000298 <__aeabi_dsub>
 8000f40:	f7ff fe3a 	bl	8000bb8 <__aeabi_d2uiz>
 8000f44:	4621      	mov	r1, r4
 8000f46:	bdd0      	pop	{r4, r6, r7, pc}
 8000f48:	3df00000 	.word	0x3df00000
 8000f4c:	41f00000 	.word	0x41f00000

08000f50 <__udivmoddi4>:
 8000f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f54:	9d08      	ldr	r5, [sp, #32]
 8000f56:	468e      	mov	lr, r1
 8000f58:	4604      	mov	r4, r0
 8000f5a:	4688      	mov	r8, r1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d14a      	bne.n	8000ff6 <__udivmoddi4+0xa6>
 8000f60:	428a      	cmp	r2, r1
 8000f62:	4617      	mov	r7, r2
 8000f64:	d962      	bls.n	800102c <__udivmoddi4+0xdc>
 8000f66:	fab2 f682 	clz	r6, r2
 8000f6a:	b14e      	cbz	r6, 8000f80 <__udivmoddi4+0x30>
 8000f6c:	f1c6 0320 	rsb	r3, r6, #32
 8000f70:	fa01 f806 	lsl.w	r8, r1, r6
 8000f74:	fa20 f303 	lsr.w	r3, r0, r3
 8000f78:	40b7      	lsls	r7, r6
 8000f7a:	ea43 0808 	orr.w	r8, r3, r8
 8000f7e:	40b4      	lsls	r4, r6
 8000f80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f84:	fa1f fc87 	uxth.w	ip, r7
 8000f88:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f8c:	0c23      	lsrs	r3, r4, #16
 8000f8e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000f92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f96:	fb01 f20c 	mul.w	r2, r1, ip
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d909      	bls.n	8000fb2 <__udivmoddi4+0x62>
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000fa4:	f080 80ea 	bcs.w	800117c <__udivmoddi4+0x22c>
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	f240 80e7 	bls.w	800117c <__udivmoddi4+0x22c>
 8000fae:	3902      	subs	r1, #2
 8000fb0:	443b      	add	r3, r7
 8000fb2:	1a9a      	subs	r2, r3, r2
 8000fb4:	b2a3      	uxth	r3, r4
 8000fb6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000fba:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fc2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fc6:	459c      	cmp	ip, r3
 8000fc8:	d909      	bls.n	8000fde <__udivmoddi4+0x8e>
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fd0:	f080 80d6 	bcs.w	8001180 <__udivmoddi4+0x230>
 8000fd4:	459c      	cmp	ip, r3
 8000fd6:	f240 80d3 	bls.w	8001180 <__udivmoddi4+0x230>
 8000fda:	443b      	add	r3, r7
 8000fdc:	3802      	subs	r0, #2
 8000fde:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fe2:	eba3 030c 	sub.w	r3, r3, ip
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	b11d      	cbz	r5, 8000ff2 <__udivmoddi4+0xa2>
 8000fea:	40f3      	lsrs	r3, r6
 8000fec:	2200      	movs	r2, #0
 8000fee:	e9c5 3200 	strd	r3, r2, [r5]
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d905      	bls.n	8001006 <__udivmoddi4+0xb6>
 8000ffa:	b10d      	cbz	r5, 8001000 <__udivmoddi4+0xb0>
 8000ffc:	e9c5 0100 	strd	r0, r1, [r5]
 8001000:	2100      	movs	r1, #0
 8001002:	4608      	mov	r0, r1
 8001004:	e7f5      	b.n	8000ff2 <__udivmoddi4+0xa2>
 8001006:	fab3 f183 	clz	r1, r3
 800100a:	2900      	cmp	r1, #0
 800100c:	d146      	bne.n	800109c <__udivmoddi4+0x14c>
 800100e:	4573      	cmp	r3, lr
 8001010:	d302      	bcc.n	8001018 <__udivmoddi4+0xc8>
 8001012:	4282      	cmp	r2, r0
 8001014:	f200 8105 	bhi.w	8001222 <__udivmoddi4+0x2d2>
 8001018:	1a84      	subs	r4, r0, r2
 800101a:	eb6e 0203 	sbc.w	r2, lr, r3
 800101e:	2001      	movs	r0, #1
 8001020:	4690      	mov	r8, r2
 8001022:	2d00      	cmp	r5, #0
 8001024:	d0e5      	beq.n	8000ff2 <__udivmoddi4+0xa2>
 8001026:	e9c5 4800 	strd	r4, r8, [r5]
 800102a:	e7e2      	b.n	8000ff2 <__udivmoddi4+0xa2>
 800102c:	2a00      	cmp	r2, #0
 800102e:	f000 8090 	beq.w	8001152 <__udivmoddi4+0x202>
 8001032:	fab2 f682 	clz	r6, r2
 8001036:	2e00      	cmp	r6, #0
 8001038:	f040 80a4 	bne.w	8001184 <__udivmoddi4+0x234>
 800103c:	1a8a      	subs	r2, r1, r2
 800103e:	0c03      	lsrs	r3, r0, #16
 8001040:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001044:	b280      	uxth	r0, r0
 8001046:	b2bc      	uxth	r4, r7
 8001048:	2101      	movs	r1, #1
 800104a:	fbb2 fcfe 	udiv	ip, r2, lr
 800104e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001056:	fb04 f20c 	mul.w	r2, r4, ip
 800105a:	429a      	cmp	r2, r3
 800105c:	d907      	bls.n	800106e <__udivmoddi4+0x11e>
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001064:	d202      	bcs.n	800106c <__udivmoddi4+0x11c>
 8001066:	429a      	cmp	r2, r3
 8001068:	f200 80e0 	bhi.w	800122c <__udivmoddi4+0x2dc>
 800106c:	46c4      	mov	ip, r8
 800106e:	1a9b      	subs	r3, r3, r2
 8001070:	fbb3 f2fe 	udiv	r2, r3, lr
 8001074:	fb0e 3312 	mls	r3, lr, r2, r3
 8001078:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800107c:	fb02 f404 	mul.w	r4, r2, r4
 8001080:	429c      	cmp	r4, r3
 8001082:	d907      	bls.n	8001094 <__udivmoddi4+0x144>
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	f102 30ff 	add.w	r0, r2, #4294967295
 800108a:	d202      	bcs.n	8001092 <__udivmoddi4+0x142>
 800108c:	429c      	cmp	r4, r3
 800108e:	f200 80ca 	bhi.w	8001226 <__udivmoddi4+0x2d6>
 8001092:	4602      	mov	r2, r0
 8001094:	1b1b      	subs	r3, r3, r4
 8001096:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800109a:	e7a5      	b.n	8000fe8 <__udivmoddi4+0x98>
 800109c:	f1c1 0620 	rsb	r6, r1, #32
 80010a0:	408b      	lsls	r3, r1
 80010a2:	fa22 f706 	lsr.w	r7, r2, r6
 80010a6:	431f      	orrs	r7, r3
 80010a8:	fa0e f401 	lsl.w	r4, lr, r1
 80010ac:	fa20 f306 	lsr.w	r3, r0, r6
 80010b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80010b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80010b8:	4323      	orrs	r3, r4
 80010ba:	fa00 f801 	lsl.w	r8, r0, r1
 80010be:	fa1f fc87 	uxth.w	ip, r7
 80010c2:	fbbe f0f9 	udiv	r0, lr, r9
 80010c6:	0c1c      	lsrs	r4, r3, #16
 80010c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80010cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80010d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80010d4:	45a6      	cmp	lr, r4
 80010d6:	fa02 f201 	lsl.w	r2, r2, r1
 80010da:	d909      	bls.n	80010f0 <__udivmoddi4+0x1a0>
 80010dc:	193c      	adds	r4, r7, r4
 80010de:	f100 3aff 	add.w	sl, r0, #4294967295
 80010e2:	f080 809c 	bcs.w	800121e <__udivmoddi4+0x2ce>
 80010e6:	45a6      	cmp	lr, r4
 80010e8:	f240 8099 	bls.w	800121e <__udivmoddi4+0x2ce>
 80010ec:	3802      	subs	r0, #2
 80010ee:	443c      	add	r4, r7
 80010f0:	eba4 040e 	sub.w	r4, r4, lr
 80010f4:	fa1f fe83 	uxth.w	lr, r3
 80010f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80010fc:	fb09 4413 	mls	r4, r9, r3, r4
 8001100:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001104:	fb03 fc0c 	mul.w	ip, r3, ip
 8001108:	45a4      	cmp	ip, r4
 800110a:	d908      	bls.n	800111e <__udivmoddi4+0x1ce>
 800110c:	193c      	adds	r4, r7, r4
 800110e:	f103 3eff 	add.w	lr, r3, #4294967295
 8001112:	f080 8082 	bcs.w	800121a <__udivmoddi4+0x2ca>
 8001116:	45a4      	cmp	ip, r4
 8001118:	d97f      	bls.n	800121a <__udivmoddi4+0x2ca>
 800111a:	3b02      	subs	r3, #2
 800111c:	443c      	add	r4, r7
 800111e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001122:	eba4 040c 	sub.w	r4, r4, ip
 8001126:	fba0 ec02 	umull	lr, ip, r0, r2
 800112a:	4564      	cmp	r4, ip
 800112c:	4673      	mov	r3, lr
 800112e:	46e1      	mov	r9, ip
 8001130:	d362      	bcc.n	80011f8 <__udivmoddi4+0x2a8>
 8001132:	d05f      	beq.n	80011f4 <__udivmoddi4+0x2a4>
 8001134:	b15d      	cbz	r5, 800114e <__udivmoddi4+0x1fe>
 8001136:	ebb8 0203 	subs.w	r2, r8, r3
 800113a:	eb64 0409 	sbc.w	r4, r4, r9
 800113e:	fa04 f606 	lsl.w	r6, r4, r6
 8001142:	fa22 f301 	lsr.w	r3, r2, r1
 8001146:	431e      	orrs	r6, r3
 8001148:	40cc      	lsrs	r4, r1
 800114a:	e9c5 6400 	strd	r6, r4, [r5]
 800114e:	2100      	movs	r1, #0
 8001150:	e74f      	b.n	8000ff2 <__udivmoddi4+0xa2>
 8001152:	fbb1 fcf2 	udiv	ip, r1, r2
 8001156:	0c01      	lsrs	r1, r0, #16
 8001158:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800115c:	b280      	uxth	r0, r0
 800115e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001162:	463b      	mov	r3, r7
 8001164:	4638      	mov	r0, r7
 8001166:	463c      	mov	r4, r7
 8001168:	46b8      	mov	r8, r7
 800116a:	46be      	mov	lr, r7
 800116c:	2620      	movs	r6, #32
 800116e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001172:	eba2 0208 	sub.w	r2, r2, r8
 8001176:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800117a:	e766      	b.n	800104a <__udivmoddi4+0xfa>
 800117c:	4601      	mov	r1, r0
 800117e:	e718      	b.n	8000fb2 <__udivmoddi4+0x62>
 8001180:	4610      	mov	r0, r2
 8001182:	e72c      	b.n	8000fde <__udivmoddi4+0x8e>
 8001184:	f1c6 0220 	rsb	r2, r6, #32
 8001188:	fa2e f302 	lsr.w	r3, lr, r2
 800118c:	40b7      	lsls	r7, r6
 800118e:	40b1      	lsls	r1, r6
 8001190:	fa20 f202 	lsr.w	r2, r0, r2
 8001194:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001198:	430a      	orrs	r2, r1
 800119a:	fbb3 f8fe 	udiv	r8, r3, lr
 800119e:	b2bc      	uxth	r4, r7
 80011a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80011a4:	0c11      	lsrs	r1, r2, #16
 80011a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011aa:	fb08 f904 	mul.w	r9, r8, r4
 80011ae:	40b0      	lsls	r0, r6
 80011b0:	4589      	cmp	r9, r1
 80011b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80011b6:	b280      	uxth	r0, r0
 80011b8:	d93e      	bls.n	8001238 <__udivmoddi4+0x2e8>
 80011ba:	1879      	adds	r1, r7, r1
 80011bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80011c0:	d201      	bcs.n	80011c6 <__udivmoddi4+0x276>
 80011c2:	4589      	cmp	r9, r1
 80011c4:	d81f      	bhi.n	8001206 <__udivmoddi4+0x2b6>
 80011c6:	eba1 0109 	sub.w	r1, r1, r9
 80011ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80011ce:	fb09 f804 	mul.w	r8, r9, r4
 80011d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80011d6:	b292      	uxth	r2, r2
 80011d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011dc:	4542      	cmp	r2, r8
 80011de:	d229      	bcs.n	8001234 <__udivmoddi4+0x2e4>
 80011e0:	18ba      	adds	r2, r7, r2
 80011e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80011e6:	d2c4      	bcs.n	8001172 <__udivmoddi4+0x222>
 80011e8:	4542      	cmp	r2, r8
 80011ea:	d2c2      	bcs.n	8001172 <__udivmoddi4+0x222>
 80011ec:	f1a9 0102 	sub.w	r1, r9, #2
 80011f0:	443a      	add	r2, r7
 80011f2:	e7be      	b.n	8001172 <__udivmoddi4+0x222>
 80011f4:	45f0      	cmp	r8, lr
 80011f6:	d29d      	bcs.n	8001134 <__udivmoddi4+0x1e4>
 80011f8:	ebbe 0302 	subs.w	r3, lr, r2
 80011fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001200:	3801      	subs	r0, #1
 8001202:	46e1      	mov	r9, ip
 8001204:	e796      	b.n	8001134 <__udivmoddi4+0x1e4>
 8001206:	eba7 0909 	sub.w	r9, r7, r9
 800120a:	4449      	add	r1, r9
 800120c:	f1a8 0c02 	sub.w	ip, r8, #2
 8001210:	fbb1 f9fe 	udiv	r9, r1, lr
 8001214:	fb09 f804 	mul.w	r8, r9, r4
 8001218:	e7db      	b.n	80011d2 <__udivmoddi4+0x282>
 800121a:	4673      	mov	r3, lr
 800121c:	e77f      	b.n	800111e <__udivmoddi4+0x1ce>
 800121e:	4650      	mov	r0, sl
 8001220:	e766      	b.n	80010f0 <__udivmoddi4+0x1a0>
 8001222:	4608      	mov	r0, r1
 8001224:	e6fd      	b.n	8001022 <__udivmoddi4+0xd2>
 8001226:	443b      	add	r3, r7
 8001228:	3a02      	subs	r2, #2
 800122a:	e733      	b.n	8001094 <__udivmoddi4+0x144>
 800122c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001230:	443b      	add	r3, r7
 8001232:	e71c      	b.n	800106e <__udivmoddi4+0x11e>
 8001234:	4649      	mov	r1, r9
 8001236:	e79c      	b.n	8001172 <__udivmoddi4+0x222>
 8001238:	eba1 0109 	sub.w	r1, r1, r9
 800123c:	46c4      	mov	ip, r8
 800123e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001242:	fb09 f804 	mul.w	r8, r9, r4
 8001246:	e7c4      	b.n	80011d2 <__udivmoddi4+0x282>

08001248 <__aeabi_idiv0>:
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop

0800124c <LPFTwoPole_Init>:
#include "LowPassFilter.h"

void LPFTwoPole_Init(LPFTwoPole_t *lpf, uint8_t type, float cutoffFrequency, float sampleTime) {
 800124c:	b480      	push	{r7}
 800124e:	b087      	sub	sp, #28
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	460b      	mov	r3, r1
 8001256:	ed87 0a01 	vstr	s0, [r7, #4]
 800125a:	edc7 0a00 	vstr	s1, [r7]
 800125e:	72fb      	strb	r3, [r7, #11]
	float wc = 6.28318530718f * cutoffFrequency;
 8001260:	edd7 7a01 	vldr	s15, [r7, #4]
 8001264:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001320 <LPFTwoPole_Init+0xd4>
 8001268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126c:	edc7 7a05 	vstr	s15, [r7, #20]

	if (type == LPF_TYPE_BESSEL) {
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d141      	bne.n	80012fa <LPFTwoPole_Init+0xae>
		lpf->coeffNum = 1.6221f * wc * wc * sampleTime * sampleTime;
 8001276:	edd7 7a05 	vldr	s15, [r7, #20]
 800127a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001324 <LPFTwoPole_Init+0xd8>
 800127e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001282:	edd7 7a05 	vldr	s15, [r7, #20]
 8001286:	ee27 7a27 	vmul.f32	s14, s14, s15
 800128a:	edd7 7a00 	vldr	s15, [r7]
 800128e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	edc3 7a03 	vstr	s15, [r3, #12]
		lpf->coeffDen[0] = 1.0f / (1.0f + 2.206f * wc * sampleTime + lpf->coeffNum);
 80012a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001328 <LPFTwoPole_Init+0xdc>
 80012a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ac:	edd7 7a00 	vldr	s15, [r7]
 80012b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	edd3 7a03 	vldr	s15, [r3, #12]
 80012c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80012ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	edc3 7a04 	vstr	s15, [r3, #16]
		lpf->coeffDen[1] = -(2.0f + 2.206f * wc * sampleTime);
 80012d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012d8:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001328 <LPFTwoPole_Init+0xdc>
 80012dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012e0:	edd7 7a00 	vldr	s15, [r7]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80012ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012f0:	eef1 7a67 	vneg.f32	s15, s15
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	lpf->buf[0] = 0.0f;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
	lpf->buf[1] = 0.0f;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	609a      	str	r2, [r3, #8]

	lpf->out = 0.0f;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
}
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40c90fdb 	.word	0x40c90fdb
 8001324:	3fcfa0f9 	.word	0x3fcfa0f9
 8001328:	400d2f1b 	.word	0x400d2f1b

0800132c <LPFTwoPole_Update>:

float LPFTwoPole_Update(LPFTwoPole_t *lpf, float val) {
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	ed87 0a00 	vstr	s0, [r7]
	lpf->buf[1] = lpf->buf[0];
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]
	lpf->buf[0] = lpf->out;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	605a      	str	r2, [r3, #4]

	lpf->out = lpf->coeffDen[0] * (lpf->coeffNum * val - (lpf->coeffDen[1] * lpf->buf[0] + lpf->buf[1]));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	ed93 7a04 	vldr	s14, [r3, #16]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edd3 6a03 	vldr	s13, [r3, #12]
 8001354:	edd7 7a00 	vldr	s15, [r7]
 8001358:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	ed93 6a05 	vldr	s12, [r3, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edd3 7a01 	vldr	s15, [r3, #4]
 8001368:	ee26 6a27 	vmul.f32	s12, s12, s15
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001372:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001376:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800137a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	edc3 7a00 	vstr	s15, [r3]

	return lpf->out;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	ee07 3a90 	vmov	s15, r3
}
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	0000      	movs	r0, r0
 800139c:	0000      	movs	r0, r0
	...

080013a0 <NotchFilterInit>:
#include "NotchFilter.h"

void NotchFilterInit(NotchFilter_t *filt, float centerFreHz, float notchWidth_Hz, float sampleTime_s)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	ed2d 8b02 	vpush	{d8}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80013b0:	edc7 0a01 	vstr	s1, [r7, #4]
 80013b4:	ed87 1a00 	vstr	s2, [r7]
	float w0_rps = 2.0f * M_PI * centerFreHz;
 80013b8:	68b8      	ldr	r0, [r7, #8]
 80013ba:	f7ff f8cd 	bl	8000558 <__aeabi_f2d>
 80013be:	a33c      	add	r3, pc, #240	@ (adr r3, 80014b0 <NotchFilterInit+0x110>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff f920 	bl	8000608 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fc12 	bl	8000bf8 <__aeabi_d2f>
 80013d4:	4603      	mov	r3, r0
 80013d6:	61bb      	str	r3, [r7, #24]
	float ww_rps = 2.0f * M_PI * notchWidth_Hz;
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff f8bd 	bl	8000558 <__aeabi_f2d>
 80013de:	a334      	add	r3, pc, #208	@ (adr r3, 80014b0 <NotchFilterInit+0x110>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff f910 	bl	8000608 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fc02 	bl	8000bf8 <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	617b      	str	r3, [r7, #20]
	
	float w0_pw_rps = (2.0f / sampleTime_s) * tanf(0.5f * w0_rps * sampleTime_s);
 80013f8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80013fc:	edd7 7a00 	vldr	s15, [r7]
 8001400:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8001404:	edd7 7a06 	vldr	s15, [r7, #24]
 8001408:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800140c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001410:	edd7 7a00 	vldr	s15, [r7]
 8001414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001418:	eeb0 0a67 	vmov.f32	s0, s15
 800141c:	f011 fac4 	bl	80129a8 <tanf>
 8001420:	eef0 7a40 	vmov.f32	s15, s0
 8001424:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001428:	edc7 7a04 	vstr	s15, [r7, #16]
	
	filt->alpha = 4.0f + ((w0_pw_rps * w0_pw_rps) * (sampleTime_s * sampleTime_s));
 800142c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001430:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001434:	edd7 7a00 	vldr	s15, [r7]
 8001438:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800143c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001440:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001444:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	edc3 7a00 	vstr	s15, [r3]
	filt->beta = 2.0f + (ww_rps  * sampleTime_s);
 800144e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001452:	edd7 7a00 	vldr	s15, [r7]
 8001456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800145e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	edc3 7a01 	vstr	s15, [r3, #4]
	
	for (int n = 0; n<3; n++)
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
 800146c:	e013      	b.n	8001496 <NotchFilterInit+0xf6>
	{
		filt->x[n] = 0.0f;
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	3302      	adds	r3, #2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
		filt->y[n] = 0.0f;
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	3304      	adds	r3, #4
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	3304      	adds	r3, #4
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
	for (int n = 0; n<3; n++)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	3301      	adds	r3, #1
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	2b02      	cmp	r3, #2
 800149a:	dde8      	ble.n	800146e <NotchFilterInit+0xce>
	}
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	ecbd 8b02 	vpop	{d8}
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	f3af 8000 	nop.w
 80014b0:	54442d18 	.word	0x54442d18
 80014b4:	401921fb 	.word	0x401921fb

080014b8 <NotchFilter_Update>:

float NotchFilter_Update(NotchFilter_t *filt, float data)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	ed87 0a00 	vstr	s0, [r7]
	filt->x[2] = filt->x[1];
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	611a      	str	r2, [r3, #16]
	filt->x[1] = filt->x[0];
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	60da      	str	r2, [r3, #12]
	
	filt->y[2] = filt->y[1];
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699a      	ldr	r2, [r3, #24]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	61da      	str	r2, [r3, #28]
	filt->y[1] = filt->y[0];
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
	
	filt->x[0] = data;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	609a      	str	r2, [r3, #8]
	
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	ed93 7a00 	vldr	s14, [r3]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80014f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001504:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001508:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001516:	ee37 7a27 	vadd.f32	s14, s14, s15
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edd3 6a00 	vldr	s13, [r3]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	edd3 7a04 	vldr	s15, [r3, #16]
 8001526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152a:	ee37 7a27 	vadd.f32	s14, s14, s15
			   - (2.0f * ((filt->alpha - 8.0f)) * filt->y[1] + (filt->alpha - filt->beta) *filt->y[2]))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001538:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800153c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	edd3 7a06 	vldr	s15, [r3, #24]
 8001546:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	ed93 6a00 	vldr	s12, [r3]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	edd3 7a01 	vldr	s15, [r3, #4]
 8001556:	ee36 6a67 	vsub.f32	s12, s12, s15
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001560:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001568:	ee77 6a67 	vsub.f32	s13, s14, s15
			   / (filt->alpha + filt->beta);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	ed93 7a00 	vldr	s14, [r3]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a01 	vldr	s15, [r3, #4]
 8001578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157c:	eec6 7a87 	vdiv.f32	s15, s13, s14
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	edc3 7a05 	vstr	s15, [r3, #20]
			   
	return filt->y[0];
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	ee07 3a90 	vmov	s15, r3
}
 800158e:	eeb0 0a67 	vmov.f32	s0, s15
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80015a0:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <DWT_Init+0x28>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4a07      	ldr	r2, [pc, #28]	@ (80015c4 <DWT_Init+0x28>)
 80015a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015aa:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <DWT_Init+0x2c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a05      	ldr	r2, [pc, #20]	@ (80015c8 <DWT_Init+0x2c>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000edf0 	.word	0xe000edf0
 80015c8:	e0001000 	.word	0xe0001000

080015cc <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint64_t micros(void){
 80015cc:	b4b0      	push	{r4, r5, r7}
 80015ce:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <micros+0x2c>)
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <micros+0x30>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4909      	ldr	r1, [pc, #36]	@ (8001600 <micros+0x34>)
 80015da:	fba1 1303 	umull	r1, r3, r1, r3
 80015de:	0c9b      	lsrs	r3, r3, #18
 80015e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	461c      	mov	r4, r3
 80015e8:	4615      	mov	r5, r2
 80015ea:	4622      	mov	r2, r4
 80015ec:	462b      	mov	r3, r5
}
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bcb0      	pop	{r4, r5, r7}
 80015f6:	4770      	bx	lr
 80015f8:	e0001000 	.word	0xe0001000
 80015fc:	20000008 	.word	0x20000008
 8001600:	431bde83 	.word	0x431bde83
 8001604:	00000000 	.word	0x00000000

08001608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800160c:	ed2d 8b04 	vpush	{d8-d9}
 8001610:	b087      	sub	sp, #28
 8001612:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001614:	f003 fb40 	bl	8004c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001618:	f000 fa2e 	bl	8001a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161c:	f000 fdb4 	bl	8002188 <MX_GPIO_Init>
  MX_DMA_Init();
 8001620:	f000 fd8a 	bl	8002138 <MX_DMA_Init>
  MX_TIM2_Init();
 8001624:	f000 fb74 	bl	8001d10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001628:	f000 fc08 	bl	8001e3c <MX_TIM3_Init>
  MX_I2C2_Init();
 800162c:	f000 fade 	bl	8001bec <MX_I2C2_Init>
  MX_I2C3_Init();
 8001630:	f000 fb0a 	bl	8001c48 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001634:	f000 fd56 	bl	80020e4 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8001638:	f000 fd30 	bl	800209c <MX_TIM11_Init>
  MX_TIM4_Init();
 800163c:	f000 fc96 	bl	8001f6c <MX_TIM4_Init>
  MX_SPI2_Init();
 8001640:	f000 fb30 	bl	8001ca4 <MX_SPI2_Init>
  MX_ADC1_Init();
 8001644:	f000 fa80 	bl	8001b48 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001648:	f00c f80a 	bl	800d660 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001652:	48c9      	ldr	r0, [pc, #804]	@ (8001978 <main+0x370>)
 8001654:	f004 fb48 	bl	8005ce8 <HAL_GPIO_WritePin>
  //Init DWT Clock for proper us time tick
  DWT_Init();
 8001658:	f7ff ffa0 	bl	800159c <DWT_Init>

  //Init filter with predefined settings
  LPFTwoPole_Init(&LPF_accel_x, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 800165c:	4bc7      	ldr	r3, [pc, #796]	@ (800197c <main+0x374>)
 800165e:	edd3 7a00 	vldr	s15, [r3]
 8001662:	eef0 0a67 	vmov.f32	s1, s15
 8001666:	ed9f 0ac6 	vldr	s0, [pc, #792]	@ 8001980 <main+0x378>
 800166a:	2101      	movs	r1, #1
 800166c:	48c5      	ldr	r0, [pc, #788]	@ (8001984 <main+0x37c>)
 800166e:	f7ff fded 	bl	800124c <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_y, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8001672:	4bc2      	ldr	r3, [pc, #776]	@ (800197c <main+0x374>)
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	eef0 0a67 	vmov.f32	s1, s15
 800167c:	ed9f 0ac0 	vldr	s0, [pc, #768]	@ 8001980 <main+0x378>
 8001680:	2101      	movs	r1, #1
 8001682:	48c1      	ldr	r0, [pc, #772]	@ (8001988 <main+0x380>)
 8001684:	f7ff fde2 	bl	800124c <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_z, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8001688:	4bbc      	ldr	r3, [pc, #752]	@ (800197c <main+0x374>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	eef0 0a67 	vmov.f32	s1, s15
 8001692:	ed9f 0abb 	vldr	s0, [pc, #748]	@ 8001980 <main+0x378>
 8001696:	2101      	movs	r1, #1
 8001698:	48bc      	ldr	r0, [pc, #752]	@ (800198c <main+0x384>)
 800169a:	f7ff fdd7 	bl	800124c <LPFTwoPole_Init>

  LPFTwoPole_Init(&LPF_gyro_x, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 800169e:	4bb7      	ldr	r3, [pc, #732]	@ (800197c <main+0x374>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	eef0 0a67 	vmov.f32	s1, s15
 80016a8:	ed9f 0ab9 	vldr	s0, [pc, #740]	@ 8001990 <main+0x388>
 80016ac:	2101      	movs	r1, #1
 80016ae:	48b9      	ldr	r0, [pc, #740]	@ (8001994 <main+0x38c>)
 80016b0:	f7ff fdcc 	bl	800124c <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_y, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 80016b4:	4bb1      	ldr	r3, [pc, #708]	@ (800197c <main+0x374>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	eef0 0a67 	vmov.f32	s1, s15
 80016be:	ed9f 0ab4 	vldr	s0, [pc, #720]	@ 8001990 <main+0x388>
 80016c2:	2101      	movs	r1, #1
 80016c4:	48b4      	ldr	r0, [pc, #720]	@ (8001998 <main+0x390>)
 80016c6:	f7ff fdc1 	bl	800124c <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_z, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 80016ca:	4bac      	ldr	r3, [pc, #688]	@ (800197c <main+0x374>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	eef0 0a67 	vmov.f32	s1, s15
 80016d4:	ed9f 0aae 	vldr	s0, [pc, #696]	@ 8001990 <main+0x388>
 80016d8:	2101      	movs	r1, #1
 80016da:	48b0      	ldr	r0, [pc, #704]	@ (800199c <main+0x394>)
 80016dc:	f7ff fdb6 	bl	800124c <LPFTwoPole_Init>

  NotchFilterInit(&NF_gyro_x, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 80016e0:	4ba6      	ldr	r3, [pc, #664]	@ (800197c <main+0x374>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	eeb0 1a67 	vmov.f32	s2, s15
 80016ea:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 80016ee:	ed9f 0aac 	vldr	s0, [pc, #688]	@ 80019a0 <main+0x398>
 80016f2:	48ac      	ldr	r0, [pc, #688]	@ (80019a4 <main+0x39c>)
 80016f4:	f7ff fe54 	bl	80013a0 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_y, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 80016f8:	4ba0      	ldr	r3, [pc, #640]	@ (800197c <main+0x374>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	eeb0 1a67 	vmov.f32	s2, s15
 8001702:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8001706:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 80019a0 <main+0x398>
 800170a:	48a7      	ldr	r0, [pc, #668]	@ (80019a8 <main+0x3a0>)
 800170c:	f7ff fe48 	bl	80013a0 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_z, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8001710:	4b9a      	ldr	r3, [pc, #616]	@ (800197c <main+0x374>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	eeb0 1a67 	vmov.f32	s2, s15
 800171a:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 800171e:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 80019a0 <main+0x398>
 8001722:	48a2      	ldr	r0, [pc, #648]	@ (80019ac <main+0x3a4>)
 8001724:	f7ff fe3c 	bl	80013a0 <NotchFilterInit>

  //Init state estimators
  quaternionInit(&quaternion_t, sample_time_us_f32);
 8001728:	4ba1      	ldr	r3, [pc, #644]	@ (80019b0 <main+0x3a8>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	48a0      	ldr	r0, [pc, #640]	@ (80019b4 <main+0x3ac>)
 8001734:	f002 f9b0 	bl	8003a98 <quaternionInit>

  //Init sensors
	while (MPU6050_Init(&hi2c2, &imu_t));
 8001738:	bf00      	nop
 800173a:	499f      	ldr	r1, [pc, #636]	@ (80019b8 <main+0x3b0>)
 800173c:	489f      	ldr	r0, [pc, #636]	@ (80019bc <main+0x3b4>)
 800173e:	f000 fe1b 	bl	8002378 <MPU6050_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f8      	bne.n	800173a <main+0x132>

	if (imu_t.CALIBRATIN_OK_u8 == TRUE)
 8001748:	4b9b      	ldr	r3, [pc, #620]	@ (80019b8 <main+0x3b0>)
 800174a:	7e1b      	ldrb	r3, [r3, #24]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <main+0x154>
	{
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001756:	4888      	ldr	r0, [pc, #544]	@ (8001978 <main+0x370>)
 8001758:	f004 fac6 	bl	8005ce8 <HAL_GPIO_WritePin>
	}
	uint8_t newData_u8;

	HAL_TIM_Base_Start(&htim11);
 800175c:	4898      	ldr	r0, [pc, #608]	@ (80019c0 <main+0x3b8>)
 800175e:	f007 fab5 	bl	8008ccc <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_SET_COUNTER(&htim11, 0);
 8001762:	4b97      	ldr	r3, [pc, #604]	@ (80019c0 <main+0x3b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24
	  baslangic = __HAL_TIM_GET_COUNTER(&htim11);
 800176a:	4b95      	ldr	r3, [pc, #596]	@ (80019c0 <main+0x3b8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001770:	4a94      	ldr	r2, [pc, #592]	@ (80019c4 <main+0x3bc>)
 8001772:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//Get system time in us
		timer_u64 = micros();
 8001774:	f7ff ff2a 	bl	80015cc <micros>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4992      	ldr	r1, [pc, #584]	@ (80019c8 <main+0x3c0>)
 800177e:	e9c1 2300 	strd	r2, r3, [r1]

		if ( ((timer_u64 - lastTime_u64) >= sample_time_us_f32) && (imu_t.CALIBRATIN_OK_u8 == TRUE) )
 8001782:	4b91      	ldr	r3, [pc, #580]	@ (80019c8 <main+0x3c0>)
 8001784:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001788:	4b90      	ldr	r3, [pc, #576]	@ (80019cc <main+0x3c4>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	1a84      	subs	r4, r0, r2
 8001790:	eb61 0503 	sbc.w	r5, r1, r3
 8001794:	4620      	mov	r0, r4
 8001796:	4629      	mov	r1, r5
 8001798:	f7ff fb46 	bl	8000e28 <__aeabi_ul2f>
 800179c:	ee07 0a10 	vmov	s14, r0
 80017a0:	4b83      	ldr	r3, [pc, #524]	@ (80019b0 <main+0x3a8>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	f2c0 80d2 	blt.w	8001956 <main+0x34e>
 80017b2:	4b81      	ldr	r3, [pc, #516]	@ (80019b8 <main+0x3b0>)
 80017b4:	7e1b      	ldrb	r3, [r3, #24]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	f040 80cd 	bne.w	8001956 <main+0x34e>
		{
			lastTime_u64 = micros();
 80017bc:	f7ff ff06 	bl	80015cc <micros>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4981      	ldr	r1, [pc, #516]	@ (80019cc <main+0x3c4>)
 80017c6:	e9c1 2300 	strd	r2, r3, [r1]

			//Read MPU6050 sensor data
			readMPU6050(&hi2c2, &imu_t);
 80017ca:	497b      	ldr	r1, [pc, #492]	@ (80019b8 <main+0x3b0>)
 80017cc:	487b      	ldr	r0, [pc, #492]	@ (80019bc <main+0x3b4>)
 80017ce:	f000 fe13 	bl	80023f8 <readMPU6050>

			//Get accelerometer data in "g" and run LPF
			accelLowPassFiltered_f32[0] = (LPFTwoPole_Update(&LPF_accel_x, imu_t.MPU6050_Accel_f32[0]));
 80017d2:	4b79      	ldr	r3, [pc, #484]	@ (80019b8 <main+0x3b0>)
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	eeb0 0a67 	vmov.f32	s0, s15
 80017dc:	4869      	ldr	r0, [pc, #420]	@ (8001984 <main+0x37c>)
 80017de:	f7ff fda5 	bl	800132c <LPFTwoPole_Update>
 80017e2:	eef0 7a40 	vmov.f32	s15, s0
 80017e6:	4b7a      	ldr	r3, [pc, #488]	@ (80019d0 <main+0x3c8>)
 80017e8:	edc3 7a00 	vstr	s15, [r3]
			accelLowPassFiltered_f32[1] = (LPFTwoPole_Update(&LPF_accel_y, imu_t.MPU6050_Accel_f32[1]));
 80017ec:	4b72      	ldr	r3, [pc, #456]	@ (80019b8 <main+0x3b0>)
 80017ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80017f2:	eeb0 0a67 	vmov.f32	s0, s15
 80017f6:	4864      	ldr	r0, [pc, #400]	@ (8001988 <main+0x380>)
 80017f8:	f7ff fd98 	bl	800132c <LPFTwoPole_Update>
 80017fc:	eef0 7a40 	vmov.f32	s15, s0
 8001800:	4b73      	ldr	r3, [pc, #460]	@ (80019d0 <main+0x3c8>)
 8001802:	edc3 7a01 	vstr	s15, [r3, #4]
			accelLowPassFiltered_f32[2] = (LPFTwoPole_Update(&LPF_accel_z, imu_t.MPU6050_Accel_f32[2]));
 8001806:	4b6c      	ldr	r3, [pc, #432]	@ (80019b8 <main+0x3b0>)
 8001808:	edd3 7a02 	vldr	s15, [r3, #8]
 800180c:	eeb0 0a67 	vmov.f32	s0, s15
 8001810:	485e      	ldr	r0, [pc, #376]	@ (800198c <main+0x384>)
 8001812:	f7ff fd8b 	bl	800132c <LPFTwoPole_Update>
 8001816:	eef0 7a40 	vmov.f32	s15, s0
 800181a:	4b6d      	ldr	r3, [pc, #436]	@ (80019d0 <main+0x3c8>)
 800181c:	edc3 7a02 	vstr	s15, [r3, #8]

			//Get gyro data in "deg/s" and run LPF
			gyroLowPassFiltered_f32[0] = NotchFilter_Update(&NF_gyro_x, imu_t.MPU6050_Gyro_f32[0]);
 8001820:	4b65      	ldr	r3, [pc, #404]	@ (80019b8 <main+0x3b0>)
 8001822:	edd3 7a03 	vldr	s15, [r3, #12]
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	485e      	ldr	r0, [pc, #376]	@ (80019a4 <main+0x39c>)
 800182c:	f7ff fe44 	bl	80014b8 <NotchFilter_Update>
 8001830:	eef0 7a40 	vmov.f32	s15, s0
 8001834:	4b67      	ldr	r3, [pc, #412]	@ (80019d4 <main+0x3cc>)
 8001836:	edc3 7a00 	vstr	s15, [r3]
			gyroLowPassFiltered_f32[1] = NotchFilter_Update(&NF_gyro_y, imu_t.MPU6050_Gyro_f32[1]);
 800183a:	4b5f      	ldr	r3, [pc, #380]	@ (80019b8 <main+0x3b0>)
 800183c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001840:	eeb0 0a67 	vmov.f32	s0, s15
 8001844:	4858      	ldr	r0, [pc, #352]	@ (80019a8 <main+0x3a0>)
 8001846:	f7ff fe37 	bl	80014b8 <NotchFilter_Update>
 800184a:	eef0 7a40 	vmov.f32	s15, s0
 800184e:	4b61      	ldr	r3, [pc, #388]	@ (80019d4 <main+0x3cc>)
 8001850:	edc3 7a01 	vstr	s15, [r3, #4]
			gyroLowPassFiltered_f32[2] = NotchFilter_Update(&NF_gyro_z, imu_t.MPU6050_Gyro_f32[2]);
 8001854:	4b58      	ldr	r3, [pc, #352]	@ (80019b8 <main+0x3b0>)
 8001856:	edd3 7a05 	vldr	s15, [r3, #20]
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	4853      	ldr	r0, [pc, #332]	@ (80019ac <main+0x3a4>)
 8001860:	f7ff fe2a 	bl	80014b8 <NotchFilter_Update>
 8001864:	eef0 7a40 	vmov.f32	s15, s0
 8001868:	4b5a      	ldr	r3, [pc, #360]	@ (80019d4 <main+0x3cc>)
 800186a:	edc3 7a02 	vstr	s15, [r3, #8]

			//Put gyro data into Notch Filter to flat-out any data in specific frequency band
			gyroNotchFiltered_f32[0] = (LPFTwoPole_Update(&LPF_gyro_x, gyroLowPassFiltered_f32[0]));
 800186e:	4b59      	ldr	r3, [pc, #356]	@ (80019d4 <main+0x3cc>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	eeb0 0a67 	vmov.f32	s0, s15
 8001878:	4846      	ldr	r0, [pc, #280]	@ (8001994 <main+0x38c>)
 800187a:	f7ff fd57 	bl	800132c <LPFTwoPole_Update>
 800187e:	eef0 7a40 	vmov.f32	s15, s0
 8001882:	4b55      	ldr	r3, [pc, #340]	@ (80019d8 <main+0x3d0>)
 8001884:	edc3 7a00 	vstr	s15, [r3]
			gyroNotchFiltered_f32[1] = (LPFTwoPole_Update(&LPF_gyro_y, gyroLowPassFiltered_f32[1]));
 8001888:	4b52      	ldr	r3, [pc, #328]	@ (80019d4 <main+0x3cc>)
 800188a:	edd3 7a01 	vldr	s15, [r3, #4]
 800188e:	eeb0 0a67 	vmov.f32	s0, s15
 8001892:	4841      	ldr	r0, [pc, #260]	@ (8001998 <main+0x390>)
 8001894:	f7ff fd4a 	bl	800132c <LPFTwoPole_Update>
 8001898:	eef0 7a40 	vmov.f32	s15, s0
 800189c:	4b4e      	ldr	r3, [pc, #312]	@ (80019d8 <main+0x3d0>)
 800189e:	edc3 7a01 	vstr	s15, [r3, #4]
			gyroNotchFiltered_f32[2] = (LPFTwoPole_Update(&LPF_gyro_z, gyroLowPassFiltered_f32[2]));
 80018a2:	4b4c      	ldr	r3, [pc, #304]	@ (80019d4 <main+0x3cc>)
 80018a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018a8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ac:	483b      	ldr	r0, [pc, #236]	@ (800199c <main+0x394>)
 80018ae:	f7ff fd3d 	bl	800132c <LPFTwoPole_Update>
 80018b2:	eef0 7a40 	vmov.f32	s15, s0
 80018b6:	4b48      	ldr	r3, [pc, #288]	@ (80019d8 <main+0x3d0>)
 80018b8:	edc3 7a02 	vstr	s15, [r3, #8]

			//Get state estimations, using quaternion and fusion-quaternion based estimators
			quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 80018bc:	4b44      	ldr	r3, [pc, #272]	@ (80019d0 <main+0x3c8>)
 80018be:	ed93 8a00 	vldr	s16, [r3]
 80018c2:	4b43      	ldr	r3, [pc, #268]	@ (80019d0 <main+0x3c8>)
 80018c4:	edd3 8a01 	vldr	s17, [r3, #4]
 80018c8:	4b41      	ldr	r3, [pc, #260]	@ (80019d0 <main+0x3c8>)
 80018ca:	ed93 9a02 	vldr	s18, [r3, #8]
					gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 80018ce:	4b42      	ldr	r3, [pc, #264]	@ (80019d8 <main+0x3d0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe40 	bl	8000558 <__aeabi_f2d>
 80018d8:	a325      	add	r3, pc, #148	@ (adr r3, 8001970 <main+0x368>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fe93 	bl	8000608 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
			quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	f7ff f985 	bl	8000bf8 <__aeabi_d2f>
 80018ee:	4606      	mov	r6, r0
					gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 80018f0:	4b39      	ldr	r3, [pc, #228]	@ (80019d8 <main+0x3d0>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe2f 	bl	8000558 <__aeabi_f2d>
 80018fa:	a31d      	add	r3, pc, #116	@ (adr r3, 8001970 <main+0x368>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe fe82 	bl	8000608 <__aeabi_dmul>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
			quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f974 	bl	8000bf8 <__aeabi_d2f>
 8001910:	4680      	mov	r8, r0
					gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 8001912:	4b31      	ldr	r3, [pc, #196]	@ (80019d8 <main+0x3d0>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fe1e 	bl	8000558 <__aeabi_f2d>
 800191c:	a314      	add	r3, pc, #80	@ (adr r3, 8001970 <main+0x368>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fe71 	bl	8000608 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
			quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f7ff f963 	bl	8000bf8 <__aeabi_d2f>
 8001932:	4603      	mov	r3, r0
 8001934:	ee02 3a90 	vmov	s5, r3
 8001938:	ee02 8a10 	vmov	s4, r8
 800193c:	ee01 6a90 	vmov	s3, r6
 8001940:	eeb0 1a49 	vmov.f32	s2, s18
 8001944:	eef0 0a68 	vmov.f32	s1, s17
 8001948:	eeb0 0a48 	vmov.f32	s0, s16
 800194c:	4819      	ldr	r0, [pc, #100]	@ (80019b4 <main+0x3ac>)
 800194e:	f002 f8fd 	bl	8003b4c <quaternionUpdate>


			newData_u8 = TRUE; //Set newData to high for activate UART printer
 8001952:	2301      	movs	r3, #1
 8001954:	71fb      	strb	r3, [r7, #7]

		}//end of timer if

		if(newData_u8)
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d058      	beq.n	8001a0e <main+0x406>
		{
			printf("%f, %f, %f\r\n",
					quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 800195c:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <main+0x3ac>)
 800195e:	699b      	ldr	r3, [r3, #24]
			printf("%f, %f, %f\r\n",
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fdf9 	bl	8000558 <__aeabi_f2d>
 8001966:	4682      	mov	sl, r0
 8001968:	468b      	mov	fp, r1
 800196a:	e037      	b.n	80019dc <main+0x3d4>
 800196c:	f3af 8000 	nop.w
 8001970:	a2529d39 	.word	0xa2529d39
 8001974:	3f91df46 	.word	0x3f91df46
 8001978:	40020800 	.word	0x40020800
 800197c:	20000000 	.word	0x20000000
 8001980:	43820000 	.word	0x43820000
 8001984:	20000398 	.word	0x20000398
 8001988:	200003b0 	.word	0x200003b0
 800198c:	200003c8 	.word	0x200003c8
 8001990:	43800000 	.word	0x43800000
 8001994:	200003e0 	.word	0x200003e0
 8001998:	200003f8 	.word	0x200003f8
 800199c:	20000410 	.word	0x20000410
 80019a0:	42940000 	.word	0x42940000
 80019a4:	20000338 	.word	0x20000338
 80019a8:	20000358 	.word	0x20000358
 80019ac:	20000378 	.word	0x20000378
 80019b0:	20000004 	.word	0x20000004
 80019b4:	20000308 	.word	0x20000308
 80019b8:	200002ec 	.word	0x200002ec
 80019bc:	20000470 	.word	0x20000470
 80019c0:	20000648 	.word	0x20000648
 80019c4:	20000810 	.word	0x20000810
 80019c8:	20000800 	.word	0x20000800
 80019cc:	20000808 	.word	0x20000808
 80019d0:	20000798 	.word	0x20000798
 80019d4:	200007a4 	.word	0x200007a4
 80019d8:	200007b0 	.word	0x200007b0
					quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 80019dc:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <main+0x458>)
 80019de:	695b      	ldr	r3, [r3, #20]
			printf("%f, %f, %f\r\n",
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdb9 	bl	8000558 <__aeabi_f2d>
 80019e6:	4680      	mov	r8, r0
 80019e8:	4689      	mov	r9, r1
					quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <main+0x458>)
 80019ec:	69db      	ldr	r3, [r3, #28]
			printf("%f, %f, %f\r\n",
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fdb2 	bl	8000558 <__aeabi_f2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019fc:	e9cd 8900 	strd	r8, r9, [sp]
 8001a00:	4652      	mov	r2, sl
 8001a02:	465b      	mov	r3, fp
 8001a04:	4817      	ldr	r0, [pc, #92]	@ (8001a64 <main+0x45c>)
 8001a06:	f00d fa61 	bl	800eecc <iprintf>
			newData_u8 = FALSE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	71fb      	strb	r3, [r7, #7]
		}

		if (sayac > 1000)
 8001a0e:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <main+0x460>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a16:	d913      	bls.n	8001a40 <main+0x438>
		{
			SendOrientationData((float)quaternion_t.yaw,(float)quaternion_t.pitch,(float)quaternion_t.roll);
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <main+0x458>)
 8001a1a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <main+0x458>)
 8001a20:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a24:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <main+0x458>)
 8001a26:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a2a:	eeb0 1a66 	vmov.f32	s2, s13
 8001a2e:	eef0 0a47 	vmov.f32	s1, s14
 8001a32:	eeb0 0a67 	vmov.f32	s0, s15
 8001a36:	f000 fc35 	bl	80022a4 <SendOrientationData>
			sayac = 0;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <main+0x460>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
		}
		sayac++;
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <main+0x460>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3301      	adds	r3, #1
 8001a46:	4a08      	ldr	r2, [pc, #32]	@ (8001a68 <main+0x460>)
 8001a48:	6013      	str	r3, [r2, #0]

		bitis = Timer_GetElapsed(&htim11, baslangic);
 8001a4a:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <main+0x464>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4807      	ldr	r0, [pc, #28]	@ (8001a70 <main+0x468>)
 8001a52:	f000 fc5f 	bl	8002314 <Timer_GetElapsed>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4a06      	ldr	r2, [pc, #24]	@ (8001a74 <main+0x46c>)
 8001a5a:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COUNTER(&htim11, 0);
 8001a5c:	e681      	b.n	8001762 <main+0x15a>
 8001a5e:	bf00      	nop
 8001a60:	20000308 	.word	0x20000308
 8001a64:	08014af8 	.word	0x08014af8
 8001a68:	200007bc 	.word	0x200007bc
 8001a6c:	20000810 	.word	0x20000810
 8001a70:	20000648 	.word	0x20000648
 8001a74:	20000814 	.word	0x20000814

08001a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b094      	sub	sp, #80	@ 0x50
 8001a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7e:	f107 0320 	add.w	r3, r7, #32
 8001a82:	2230      	movs	r2, #48	@ 0x30
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f00d facd 	bl	800f026 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <SystemClock_Config+0xc8>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	4a26      	ldr	r2, [pc, #152]	@ (8001b40 <SystemClock_Config+0xc8>)
 8001aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aac:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <SystemClock_Config+0xc8>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	4b21      	ldr	r3, [pc, #132]	@ (8001b44 <SystemClock_Config+0xcc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a20      	ldr	r2, [pc, #128]	@ (8001b44 <SystemClock_Config+0xcc>)
 8001ac2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <SystemClock_Config+0xcc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ad8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ae2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001ae8:	2319      	movs	r3, #25
 8001aea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001aec:	23c0      	movs	r3, #192	@ 0xc0
 8001aee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001af0:	2302      	movs	r3, #2
 8001af2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001af4:	2304      	movs	r3, #4
 8001af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af8:	f107 0320 	add.w	r3, r7, #32
 8001afc:	4618      	mov	r0, r3
 8001afe:	f006 fb83 	bl	8008208 <HAL_RCC_OscConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b08:	f000 fc30 	bl	800236c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b10:	2302      	movs	r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	2103      	movs	r1, #3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f006 fde5 	bl	80086f8 <HAL_RCC_ClockConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b34:	f000 fc1a 	bl	800236c <Error_Handler>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3750      	adds	r7, #80	@ 0x50
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40007000 	.word	0x40007000

08001b48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b4e:	463b      	mov	r3, r7
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b5a:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <MX_ADC1_Init+0x98>)
 8001b5c:	4a21      	ldr	r2, [pc, #132]	@ (8001be4 <MX_ADC1_Init+0x9c>)
 8001b5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b60:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <MX_ADC1_Init+0x98>)
 8001b62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	@ (8001be0 <MX_ADC1_Init+0x98>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <MX_ADC1_Init+0x98>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <MX_ADC1_Init+0x98>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <MX_ADC1_Init+0x98>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b82:	4b17      	ldr	r3, [pc, #92]	@ (8001be0 <MX_ADC1_Init+0x98>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b88:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <MX_ADC1_Init+0x98>)
 8001b8a:	4a17      	ldr	r2, [pc, #92]	@ (8001be8 <MX_ADC1_Init+0xa0>)
 8001b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b8e:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <MX_ADC1_Init+0x98>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <MX_ADC1_Init+0x98>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b9a:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <MX_ADC1_Init+0x98>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <MX_ADC1_Init+0x98>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ba8:	480d      	ldr	r0, [pc, #52]	@ (8001be0 <MX_ADC1_Init+0x98>)
 8001baa:	f003 f8db 	bl	8004d64 <HAL_ADC_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001bb4:	f000 fbda 	bl	800236c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001bb8:	2304      	movs	r3, #4
 8001bba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4805      	ldr	r0, [pc, #20]	@ (8001be0 <MX_ADC1_Init+0x98>)
 8001bca:	f003 f90f 	bl	8004dec <HAL_ADC_ConfigChannel>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001bd4:	f000 fbca 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000428 	.word	0x20000428
 8001be4:	40012000 	.word	0x40012000
 8001be8:	0f000001 	.word	0x0f000001

08001bec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <MX_I2C2_Init+0x50>)
 8001bf2:	4a13      	ldr	r2, [pc, #76]	@ (8001c40 <MX_I2C2_Init+0x54>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <MX_I2C2_Init+0x50>)
 8001bf8:	4a12      	ldr	r2, [pc, #72]	@ (8001c44 <MX_I2C2_Init+0x58>)
 8001bfa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <MX_I2C2_Init+0x50>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <MX_I2C2_Init+0x50>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <MX_I2C2_Init+0x50>)
 8001c0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c0e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <MX_I2C2_Init+0x50>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <MX_I2C2_Init+0x50>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <MX_I2C2_Init+0x50>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <MX_I2C2_Init+0x50>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c28:	4804      	ldr	r0, [pc, #16]	@ (8001c3c <MX_I2C2_Init+0x50>)
 8001c2a:	f004 f877 	bl	8005d1c <HAL_I2C_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c34:	f000 fb9a 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000470 	.word	0x20000470
 8001c40:	40005800 	.word	0x40005800
 8001c44:	00061a80 	.word	0x00061a80

08001c48 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <MX_I2C3_Init+0x50>)
 8001c4e:	4a13      	ldr	r2, [pc, #76]	@ (8001c9c <MX_I2C3_Init+0x54>)
 8001c50:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001c52:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <MX_I2C3_Init+0x50>)
 8001c54:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <MX_I2C3_Init+0x58>)
 8001c56:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <MX_I2C3_Init+0x50>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <MX_I2C3_Init+0x50>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <MX_I2C3_Init+0x50>)
 8001c66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c6a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <MX_I2C3_Init+0x50>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c72:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <MX_I2C3_Init+0x50>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c78:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <MX_I2C3_Init+0x50>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <MX_I2C3_Init+0x50>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c84:	4804      	ldr	r0, [pc, #16]	@ (8001c98 <MX_I2C3_Init+0x50>)
 8001c86:	f004 f849 	bl	8005d1c <HAL_I2C_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c90:	f000 fb6c 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200004c4 	.word	0x200004c4
 8001c9c:	40005c00 	.word	0x40005c00
 8001ca0:	00061a80 	.word	0x00061a80

08001ca4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ca8:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <MX_SPI2_Init+0x64>)
 8001caa:	4a18      	ldr	r2, [pc, #96]	@ (8001d0c <MX_SPI2_Init+0x68>)
 8001cac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cae:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <MX_SPI2_Init+0x64>)
 8001cb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cb6:	4b14      	ldr	r3, [pc, #80]	@ (8001d08 <MX_SPI2_Init+0x64>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cbc:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <MX_SPI2_Init+0x64>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <MX_SPI2_Init+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <MX_SPI2_Init+0x64>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <MX_SPI2_Init+0x64>)
 8001cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cd4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <MX_SPI2_Init+0x64>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <MX_SPI2_Init+0x64>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <MX_SPI2_Init+0x64>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce8:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <MX_SPI2_Init+0x64>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <MX_SPI2_Init+0x64>)
 8001cf0:	220a      	movs	r2, #10
 8001cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cf4:	4804      	ldr	r0, [pc, #16]	@ (8001d08 <MX_SPI2_Init+0x64>)
 8001cf6:	f006 ff11 	bl	8008b1c <HAL_SPI_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d00:	f000 fb34 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000518 	.word	0x20000518
 8001d0c:	40003800 	.word	0x40003800

08001d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08e      	sub	sp, #56	@ 0x38
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d24:	f107 0320 	add.w	r3, r7, #32
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
 8001d3c:	615a      	str	r2, [r3, #20]
 8001d3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d40:	4b3d      	ldr	r3, [pc, #244]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001d42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8001d48:	4b3b      	ldr	r3, [pc, #236]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001d4a:	225f      	movs	r2, #95	@ 0x5f
 8001d4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001d54:	4b38      	ldr	r3, [pc, #224]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001d56:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001d5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5c:	4b36      	ldr	r3, [pc, #216]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d62:	4b35      	ldr	r3, [pc, #212]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d68:	4833      	ldr	r0, [pc, #204]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001d6a:	f006 ff60 	bl	8008c2e <HAL_TIM_Base_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d74:	f000 fafa 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d82:	4619      	mov	r1, r3
 8001d84:	482c      	ldr	r0, [pc, #176]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001d86:	f007 fa69 	bl	800925c <HAL_TIM_ConfigClockSource>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d90:	f000 faec 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d94:	4828      	ldr	r0, [pc, #160]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001d96:	f007 f855 	bl	8008e44 <HAL_TIM_PWM_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001da0:	f000 fae4 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dac:	f107 0320 	add.w	r3, r7, #32
 8001db0:	4619      	mov	r1, r3
 8001db2:	4821      	ldr	r0, [pc, #132]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001db4:	f007 fdf4 	bl	80099a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001dbe:	f000 fad5 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc2:	2360      	movs	r3, #96	@ 0x60
 8001dc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4817      	ldr	r0, [pc, #92]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001dda:	f007 f97d 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001de4:	f000 fac2 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	2204      	movs	r2, #4
 8001dec:	4619      	mov	r1, r3
 8001dee:	4812      	ldr	r0, [pc, #72]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001df0:	f007 f972 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001dfa:	f000 fab7 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2208      	movs	r2, #8
 8001e02:	4619      	mov	r1, r3
 8001e04:	480c      	ldr	r0, [pc, #48]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001e06:	f007 f967 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001e10:	f000 faac 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	220c      	movs	r2, #12
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4807      	ldr	r0, [pc, #28]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001e1c:	f007 f95c 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001e26:	f000 faa1 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e2a:	4803      	ldr	r0, [pc, #12]	@ (8001e38 <MX_TIM2_Init+0x128>)
 8001e2c:	f002 fc14 	bl	8004658 <HAL_TIM_MspPostInit>

}
 8001e30:	bf00      	nop
 8001e32:	3738      	adds	r7, #56	@ 0x38
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000570 	.word	0x20000570

08001e3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08e      	sub	sp, #56	@ 0x38
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e50:	f107 0320 	add.w	r3, r7, #32
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
 8001e68:	615a      	str	r2, [r3, #20]
 8001e6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001e6e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f68 <MX_TIM3_Init+0x12c>)
 8001e70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8001e72:	4b3c      	ldr	r3, [pc, #240]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001e74:	225f      	movs	r2, #95	@ 0x5f
 8001e76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e78:	4b3a      	ldr	r3, [pc, #232]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001e7e:	4b39      	ldr	r3, [pc, #228]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001e80:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001e84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e86:	4b37      	ldr	r3, [pc, #220]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8c:	4b35      	ldr	r3, [pc, #212]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e92:	4834      	ldr	r0, [pc, #208]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001e94:	f006 fecb 	bl	8008c2e <HAL_TIM_Base_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001e9e:	f000 fa65 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ea8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eac:	4619      	mov	r1, r3
 8001eae:	482d      	ldr	r0, [pc, #180]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001eb0:	f007 f9d4 	bl	800925c <HAL_TIM_ConfigClockSource>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001eba:	f000 fa57 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ebe:	4829      	ldr	r0, [pc, #164]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001ec0:	f006 ffc0 	bl	8008e44 <HAL_TIM_PWM_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001eca:	f000 fa4f 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ed6:	f107 0320 	add.w	r3, r7, #32
 8001eda:	4619      	mov	r1, r3
 8001edc:	4821      	ldr	r0, [pc, #132]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001ede:	f007 fd5f 	bl	80099a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ee8:	f000 fa40 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eec:	2360      	movs	r3, #96	@ 0x60
 8001eee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	2200      	movs	r2, #0
 8001f00:	4619      	mov	r1, r3
 8001f02:	4818      	ldr	r0, [pc, #96]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001f04:	f007 f8e8 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001f0e:	f000 fa2d 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	2204      	movs	r2, #4
 8001f16:	4619      	mov	r1, r3
 8001f18:	4812      	ldr	r0, [pc, #72]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001f1a:	f007 f8dd 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001f24:	f000 fa22 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	2208      	movs	r2, #8
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480d      	ldr	r0, [pc, #52]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001f30:	f007 f8d2 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001f3a:	f000 fa17 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	220c      	movs	r2, #12
 8001f42:	4619      	mov	r1, r3
 8001f44:	4807      	ldr	r0, [pc, #28]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001f46:	f007 f8c7 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001f50:	f000 fa0c 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f54:	4803      	ldr	r0, [pc, #12]	@ (8001f64 <MX_TIM3_Init+0x128>)
 8001f56:	f002 fb7f 	bl	8004658 <HAL_TIM_MspPostInit>

}
 8001f5a:	bf00      	nop
 8001f5c:	3738      	adds	r7, #56	@ 0x38
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200005b8 	.word	0x200005b8
 8001f68:	40000400 	.word	0x40000400

08001f6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	@ 0x38
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f80:	f107 0320 	add.w	r3, r7, #32
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	615a      	str	r2, [r3, #20]
 8001f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f9c:	4b3d      	ldr	r3, [pc, #244]	@ (8002094 <MX_TIM4_Init+0x128>)
 8001f9e:	4a3e      	ldr	r2, [pc, #248]	@ (8002098 <MX_TIM4_Init+0x12c>)
 8001fa0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 960-1;
 8001fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8002094 <MX_TIM4_Init+0x128>)
 8001fa4:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001fa8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b3a      	ldr	r3, [pc, #232]	@ (8002094 <MX_TIM4_Init+0x128>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8001fb0:	4b38      	ldr	r3, [pc, #224]	@ (8002094 <MX_TIM4_Init+0x128>)
 8001fb2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001fb6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb8:	4b36      	ldr	r3, [pc, #216]	@ (8002094 <MX_TIM4_Init+0x128>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbe:	4b35      	ldr	r3, [pc, #212]	@ (8002094 <MX_TIM4_Init+0x128>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fc4:	4833      	ldr	r0, [pc, #204]	@ (8002094 <MX_TIM4_Init+0x128>)
 8001fc6:	f006 fe32 	bl	8008c2e <HAL_TIM_Base_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001fd0:	f000 f9cc 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fde:	4619      	mov	r1, r3
 8001fe0:	482c      	ldr	r0, [pc, #176]	@ (8002094 <MX_TIM4_Init+0x128>)
 8001fe2:	f007 f93b 	bl	800925c <HAL_TIM_ConfigClockSource>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001fec:	f000 f9be 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ff0:	4828      	ldr	r0, [pc, #160]	@ (8002094 <MX_TIM4_Init+0x128>)
 8001ff2:	f006 ff27 	bl	8008e44 <HAL_TIM_PWM_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001ffc:	f000 f9b6 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002008:	f107 0320 	add.w	r3, r7, #32
 800200c:	4619      	mov	r1, r3
 800200e:	4821      	ldr	r0, [pc, #132]	@ (8002094 <MX_TIM4_Init+0x128>)
 8002010:	f007 fcc6 	bl	80099a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800201a:	f000 f9a7 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201e:	2360      	movs	r3, #96	@ 0x60
 8002020:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	2200      	movs	r2, #0
 8002032:	4619      	mov	r1, r3
 8002034:	4817      	ldr	r0, [pc, #92]	@ (8002094 <MX_TIM4_Init+0x128>)
 8002036:	f007 f84f 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002040:	f000 f994 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2204      	movs	r2, #4
 8002048:	4619      	mov	r1, r3
 800204a:	4812      	ldr	r0, [pc, #72]	@ (8002094 <MX_TIM4_Init+0x128>)
 800204c:	f007 f844 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8002056:	f000 f989 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	2208      	movs	r2, #8
 800205e:	4619      	mov	r1, r3
 8002060:	480c      	ldr	r0, [pc, #48]	@ (8002094 <MX_TIM4_Init+0x128>)
 8002062:	f007 f839 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 800206c:	f000 f97e 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	220c      	movs	r2, #12
 8002074:	4619      	mov	r1, r3
 8002076:	4807      	ldr	r0, [pc, #28]	@ (8002094 <MX_TIM4_Init+0x128>)
 8002078:	f007 f82e 	bl	80090d8 <HAL_TIM_PWM_ConfigChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8002082:	f000 f973 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002086:	4803      	ldr	r0, [pc, #12]	@ (8002094 <MX_TIM4_Init+0x128>)
 8002088:	f002 fae6 	bl	8004658 <HAL_TIM_MspPostInit>

}
 800208c:	bf00      	nop
 800208e:	3738      	adds	r7, #56	@ 0x38
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000600 	.word	0x20000600
 8002098:	40000800 	.word	0x40000800

0800209c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80020a0:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <MX_TIM11_Init+0x40>)
 80020a2:	4a0f      	ldr	r2, [pc, #60]	@ (80020e0 <MX_TIM11_Init+0x44>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 96-1;
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <MX_TIM11_Init+0x40>)
 80020a8:	225f      	movs	r2, #95	@ 0x5f
 80020aa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <MX_TIM11_Init+0x40>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80020b2:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <MX_TIM11_Init+0x40>)
 80020b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020b8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ba:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <MX_TIM11_Init+0x40>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <MX_TIM11_Init+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80020c6:	4805      	ldr	r0, [pc, #20]	@ (80020dc <MX_TIM11_Init+0x40>)
 80020c8:	f006 fdb1 	bl	8008c2e <HAL_TIM_Base_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80020d2:	f000 f94b 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000648 	.word	0x20000648
 80020e0:	40014800 	.word	0x40014800

080020e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020e8:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 80020ea:	4a12      	ldr	r2, [pc, #72]	@ (8002134 <MX_USART1_UART_Init+0x50>)
 80020ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020ee:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 80020f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002102:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002108:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 800210a:	220c      	movs	r2, #12
 800210c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210e:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800211a:	4805      	ldr	r0, [pc, #20]	@ (8002130 <MX_USART1_UART_Init+0x4c>)
 800211c:	f007 fcc2 	bl	8009aa4 <HAL_UART_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002126:	f000 f921 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000690 	.word	0x20000690
 8002134:	40011000 	.word	0x40011000

08002138 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <MX_DMA_Init+0x4c>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	4a0f      	ldr	r2, [pc, #60]	@ (8002184 <MX_DMA_Init+0x4c>)
 8002148:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800214c:	6313      	str	r3, [r2, #48]	@ 0x30
 800214e:	4b0d      	ldr	r3, [pc, #52]	@ (8002184 <MX_DMA_Init+0x4c>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	203a      	movs	r0, #58	@ 0x3a
 8002160:	f003 f92a 	bl	80053b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002164:	203a      	movs	r0, #58	@ 0x3a
 8002166:	f003 f943 	bl	80053f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	2046      	movs	r0, #70	@ 0x46
 8002170:	f003 f922 	bl	80053b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002174:	2046      	movs	r0, #70	@ 0x46
 8002176:	f003 f93b 	bl	80053f0 <HAL_NVIC_EnableIRQ>

}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800

08002188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	@ 0x28
 800218c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002294 <MX_GPIO_Init+0x10c>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002294 <MX_GPIO_Init+0x10c>)
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b39      	ldr	r3, [pc, #228]	@ (8002294 <MX_GPIO_Init+0x10c>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b35      	ldr	r3, [pc, #212]	@ (8002294 <MX_GPIO_Init+0x10c>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	4a34      	ldr	r2, [pc, #208]	@ (8002294 <MX_GPIO_Init+0x10c>)
 80021c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ca:	4b32      	ldr	r3, [pc, #200]	@ (8002294 <MX_GPIO_Init+0x10c>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	4b2e      	ldr	r3, [pc, #184]	@ (8002294 <MX_GPIO_Init+0x10c>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4a2d      	ldr	r2, [pc, #180]	@ (8002294 <MX_GPIO_Init+0x10c>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002294 <MX_GPIO_Init+0x10c>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	4b27      	ldr	r3, [pc, #156]	@ (8002294 <MX_GPIO_Init+0x10c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	4a26      	ldr	r2, [pc, #152]	@ (8002294 <MX_GPIO_Init+0x10c>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	6313      	str	r3, [r2, #48]	@ 0x30
 8002202:	4b24      	ldr	r3, [pc, #144]	@ (8002294 <MX_GPIO_Init+0x10c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002214:	4820      	ldr	r0, [pc, #128]	@ (8002298 <MX_GPIO_Init+0x110>)
 8002216:	f003 fd67 	bl	8005ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 800221a:	2200      	movs	r2, #0
 800221c:	f241 0124 	movw	r1, #4132	@ 0x1024
 8002220:	481e      	ldr	r0, [pc, #120]	@ (800229c <MX_GPIO_Init+0x114>)
 8002222:	f003 fd61 	bl	8005ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800222c:	481c      	ldr	r0, [pc, #112]	@ (80022a0 <MX_GPIO_Init+0x118>)
 800222e:	f003 fd5b 	bl	8005ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002232:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002238:	2301      	movs	r3, #1
 800223a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	4813      	ldr	r0, [pc, #76]	@ (8002298 <MX_GPIO_Init+0x110>)
 800224c:	f003 fbc8 	bl	80059e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_5;
 8002250:	f241 0324 	movw	r3, #4132	@ 0x1024
 8002254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002256:	2301      	movs	r3, #1
 8002258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	4619      	mov	r1, r3
 8002268:	480c      	ldr	r0, [pc, #48]	@ (800229c <MX_GPIO_Init+0x114>)
 800226a:	f003 fbb9 	bl	80059e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800226e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002274:	2301      	movs	r3, #1
 8002276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227c:	2300      	movs	r3, #0
 800227e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	4806      	ldr	r0, [pc, #24]	@ (80022a0 <MX_GPIO_Init+0x118>)
 8002288:	f003 fbaa 	bl	80059e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800228c:	bf00      	nop
 800228e:	3728      	adds	r7, #40	@ 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	40020800 	.word	0x40020800
 800229c:	40020400 	.word	0x40020400
 80022a0:	40020000 	.word	0x40020000

080022a4 <SendOrientationData>:

/* USER CODE BEGIN 4 */

void SendOrientationData(float yaw, float pitch, float roll)
{
 80022a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022a8:	b08c      	sub	sp, #48	@ 0x30
 80022aa:	af06      	add	r7, sp, #24
 80022ac:	ed87 0a03 	vstr	s0, [r7, #12]
 80022b0:	edc7 0a02 	vstr	s1, [r7, #8]
 80022b4:	ed87 1a01 	vstr	s2, [r7, #4]

    int len = snprintf(buffer, sizeof(buffer), "%.2f %.2f %.2f\n", yaw, pitch, roll);
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7fe f94d 	bl	8000558 <__aeabi_f2d>
 80022be:	4604      	mov	r4, r0
 80022c0:	460d      	mov	r5, r1
 80022c2:	68b8      	ldr	r0, [r7, #8]
 80022c4:	f7fe f948 	bl	8000558 <__aeabi_f2d>
 80022c8:	4680      	mov	r8, r0
 80022ca:	4689      	mov	r9, r1
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7fe f943 	bl	8000558 <__aeabi_f2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80022da:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80022de:	e9cd 4500 	strd	r4, r5, [sp]
 80022e2:	4a0a      	ldr	r2, [pc, #40]	@ (800230c <SendOrientationData+0x68>)
 80022e4:	2140      	movs	r1, #64	@ 0x40
 80022e6:	480a      	ldr	r0, [pc, #40]	@ (8002310 <SendOrientationData+0x6c>)
 80022e8:	f00c fe02 	bl	800eef0 <sniprintf>
 80022ec:	6178      	str	r0, [r7, #20]

    if (len > 0 && len < sizeof(buffer)) {
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	dd06      	ble.n	8002302 <SendOrientationData+0x5e>
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80022f8:	d803      	bhi.n	8002302 <SendOrientationData+0x5e>
        CDC_Transmit_FS((uint8_t*)buffer, len);
 80022fa:	6979      	ldr	r1, [r7, #20]
 80022fc:	4804      	ldr	r0, [pc, #16]	@ (8002310 <SendOrientationData+0x6c>)
 80022fe:	f00b fa6d 	bl	800d7dc <CDC_Transmit_FS>
    }
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800230c:	08014b08 	.word	0x08014b08
 8002310:	200007c0 	.word	0x200007c0

08002314 <Timer_GetElapsed>:

uint32_t Timer_GetElapsed(TIM_HandleTypeDef *htim, uint32_t timer_start) {
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
    uint32_t timer_end = __HAL_TIM_GET_COUNTER(htim);  // Timer pointer'ı ile sayaç değeri alınır
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	60fb      	str	r3, [r7, #12]

    if (timer_end >= timer_start) {
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d303      	bcc.n	8002336 <Timer_GetElapsed+0x22>
        return timer_end - timer_start;
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	e002      	b.n	800233c <Timer_GetElapsed+0x28>
    } else {
        return (0xFFFFFFFF - timer_start) + timer_end + 1;
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	1ad3      	subs	r3, r2, r3
    }
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a04      	ldr	r2, [pc, #16]	@ (8002368 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800235a:	f002 fcbf 	bl	8004cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40014000 	.word	0x40014000

0800236c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002370:	b672      	cpsid	i
}
 8002372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <Error_Handler+0x8>

08002378 <MPU6050_Init>:
float aRes_MPU6050, gRes_MPU6050;      // scale resolutions per LSB for the sensors
float gyroBias_MPU6050[3] = {0, 0, 0}, accelBias_MPU6050[3] = {0, 0, 0};      // Bias corrections for gyro and accelerometer
float SelfTest_MPU6050[12];    // holds results of gyro and accelerometer self test

// Main Init function
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct){
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af04      	add	r7, sp, #16
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]

	// Init user variables
	DataStruct->CALIBRATIN_OK_u8 = 0;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2200      	movs	r2, #0
 8002386:	761a      	strb	r2, [r3, #24]

	uint8_t readData;

	//read MPU6050 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, WHO_AM_I_MPU6050, 1, &readData, 1, i2c_timeout);
 8002388:	2364      	movs	r3, #100	@ 0x64
 800238a:	9302      	str	r3, [sp, #8]
 800238c:	2301      	movs	r3, #1
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	f107 030f 	add.w	r3, r7, #15
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2301      	movs	r3, #1
 8002398:	2275      	movs	r2, #117	@ 0x75
 800239a:	21d0      	movs	r1, #208	@ 0xd0
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f003 fefb 	bl	8006198 <HAL_I2C_Mem_Read>

	if (readData == 104) {
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	2b68      	cmp	r3, #104	@ 0x68
 80023a6:	d11b      	bne.n	80023e0 <MPU6050_Init+0x68>

		//Start by performing self test and reporting values
		MPU6050SelfTest(I2Cx, SelfTest_MPU6050);
 80023a8:	4910      	ldr	r1, [pc, #64]	@ (80023ec <MPU6050_Init+0x74>)
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fe8c 	bl	80030c8 <MPU6050SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU6050(I2Cx, DataStruct, gyroBias_MPU6050, accelBias_MPU6050);
 80023b0:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <MPU6050_Init+0x78>)
 80023b2:	4a10      	ldr	r2, [pc, #64]	@ (80023f4 <MPU6050_Init+0x7c>)
 80023b4:	6839      	ldr	r1, [r7, #0]
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fa58 	bl	800286c <calibrateMPU6050>
		HAL_Delay(10);
 80023bc:	200a      	movs	r0, #10
 80023be:	f002 fcad 	bl	8004d1c <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU6050(I2Cx);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f902 	bl	80025cc <initMPU6050>
		HAL_Delay(10);
 80023c8:	200a      	movs	r0, #10
 80023ca:	f002 fca7 	bl	8004d1c <HAL_Delay>

		getMPU6050Ares();
 80023ce:	f000 f899 	bl	8002504 <getMPU6050Ares>
		getMPU6050Gres();
 80023d2:	f000 f8c7 	bl	8002564 <getMPU6050Gres>

		HAL_Delay(10);
 80023d6:	200a      	movs	r0, #10
 80023d8:	f002 fca0 	bl	8004d1c <HAL_Delay>

		return 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	e000      	b.n	80023e2 <MPU6050_Init+0x6a>
	}
	return 1; // Loop forever if communication doesn't happen
 80023e0:	2301      	movs	r3, #1
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2000084c 	.word	0x2000084c
 80023f0:	20000840 	.word	0x20000840
 80023f4:	20000834 	.word	0x20000834

080023f8 <readMPU6050>:

// Data read function
void readMPU6050(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af04      	add	r7, sp, #16
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]

	uint8_t Data;
	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 8002402:	2364      	movs	r3, #100	@ 0x64
 8002404:	9302      	str	r3, [sp, #8]
 8002406:	2301      	movs	r3, #1
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	f107 030f 	add.w	r3, r7, #15
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2301      	movs	r3, #1
 8002412:	223a      	movs	r2, #58	@ 0x3a
 8002414:	21d0      	movs	r1, #208	@ 0xd0
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f003 febe 	bl	8006198 <HAL_I2C_Mem_Read>

	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d061      	beq.n	80024ea <readMPU6050+0xf2>

		readMPU6050AccelData(I2Cx, accelRaw_MPU6050);  // Read the accelerometer x/y/z adc values
 8002426:	4933      	ldr	r1, [pc, #204]	@ (80024f4 <readMPU6050+0xfc>)
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f9b3 	bl	8002794 <readMPU6050AccelData>
		readMPU6050GyroData(I2Cx, gyroRaw_MPU6050);  // Read the gyro x/y/z adc values
 800242e:	4932      	ldr	r1, [pc, #200]	@ (80024f8 <readMPU6050+0x100>)
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f9e5 	bl	8002800 <readMPU6050GyroData>

		// Now we'll calculate the accleration value into actual g's
		DataStruct->MPU6050_Accel_f32[0] = (float)accelRaw_MPU6050[0]*aRes_MPU6050; //- accelBias_MPU6050[0];  // get actual g value, this depends on scale being set
 8002436:	4b2f      	ldr	r3, [pc, #188]	@ (80024f4 <readMPU6050+0xfc>)
 8002438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243c:	ee07 3a90 	vmov	s15, r3
 8002440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002444:	4b2d      	ldr	r3, [pc, #180]	@ (80024fc <readMPU6050+0x104>)
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	edc3 7a00 	vstr	s15, [r3]
		DataStruct->MPU6050_Accel_f32[1] = (float)accelRaw_MPU6050[1]*aRes_MPU6050; //- accelBias_MPU6050[1];
 8002454:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <readMPU6050+0xfc>)
 8002456:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002462:	4b26      	ldr	r3, [pc, #152]	@ (80024fc <readMPU6050+0x104>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	edc3 7a01 	vstr	s15, [r3, #4]
		DataStruct->MPU6050_Accel_f32[2] = (float)accelRaw_MPU6050[2]*aRes_MPU6050; //- accelBias_MPU6050[2];
 8002472:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <readMPU6050+0xfc>)
 8002474:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002478:	ee07 3a90 	vmov	s15, r3
 800247c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002480:	4b1e      	ldr	r3, [pc, #120]	@ (80024fc <readMPU6050+0x104>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	edc3 7a02 	vstr	s15, [r3, #8]

		// Calculate the gyro value into actual degrees per second
		DataStruct->MPU6050_Gyro_f32[0] = (float)gyroRaw_MPU6050[0]*gRes_MPU6050; //- gyroBias_MPU6050[0]; // get actual gyro value, this depends on scale being set
 8002490:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <readMPU6050+0x100>)
 8002492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800249e:	4b18      	ldr	r3, [pc, #96]	@ (8002500 <readMPU6050+0x108>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	edc3 7a03 	vstr	s15, [r3, #12]
		DataStruct->MPU6050_Gyro_f32[1] = (float)gyroRaw_MPU6050[1]*gRes_MPU6050; //- gyroBias_MPU6050[1];
 80024ae:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <readMPU6050+0x100>)
 80024b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024b4:	ee07 3a90 	vmov	s15, r3
 80024b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024bc:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <readMPU6050+0x108>)
 80024be:	edd3 7a00 	vldr	s15, [r3]
 80024c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	edc3 7a04 	vstr	s15, [r3, #16]
		DataStruct->MPU6050_Gyro_f32[2] = (float)gyroRaw_MPU6050[2]*gRes_MPU6050; //- gyroBias_MPU6050[2];
 80024cc:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <readMPU6050+0x100>)
 80024ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024da:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <readMPU6050+0x108>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	edc3 7a05 	vstr	s15, [r3, #20]
	}
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000081c 	.word	0x2000081c
 80024f8:	20000824 	.word	0x20000824
 80024fc:	2000082c 	.word	0x2000082c
 8002500:	20000830 	.word	0x20000830

08002504 <getMPU6050Ares>:

// Accelerometer resolution scale calculator function
void getMPU6050Ares() {
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  switch (Ascale_MPU6050)
 8002508:	4b14      	ldr	r3, [pc, #80]	@ (800255c <getMPU6050Ares+0x58>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d81f      	bhi.n	8002550 <getMPU6050Ares+0x4c>
 8002510:	a201      	add	r2, pc, #4	@ (adr r2, 8002518 <getMPU6050Ares+0x14>)
 8002512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002516:	bf00      	nop
 8002518:	08002529 	.word	0x08002529
 800251c:	08002533 	.word	0x08002533
 8002520:	0800253d 	.word	0x0800253d
 8002524:	08002547 	.word	0x08002547
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes_MPU6050 = 2.0/32768.0;
 8002528:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <getMPU6050Ares+0x5c>)
 800252a:	f04f 5262 	mov.w	r2, #947912704	@ 0x38800000
 800252e:	601a      	str	r2, [r3, #0]
          break;
 8002530:	e00e      	b.n	8002550 <getMPU6050Ares+0x4c>
    case AFS_4G:
          aRes_MPU6050 = 4.0/32768.0;
 8002532:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <getMPU6050Ares+0x5c>)
 8002534:	f04f 5264 	mov.w	r2, #956301312	@ 0x39000000
 8002538:	601a      	str	r2, [r3, #0]
          break;
 800253a:	e009      	b.n	8002550 <getMPU6050Ares+0x4c>
    case AFS_8G:
          aRes_MPU6050 = 8.0/32768.0;
 800253c:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <getMPU6050Ares+0x5c>)
 800253e:	f04f 5266 	mov.w	r2, #964689920	@ 0x39800000
 8002542:	601a      	str	r2, [r3, #0]
          break;
 8002544:	e004      	b.n	8002550 <getMPU6050Ares+0x4c>
    case AFS_16G:
          aRes_MPU6050 = 16.0/32768.0;
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <getMPU6050Ares+0x5c>)
 8002548:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 800254c:	601a      	str	r2, [r3, #0]
          break;
 800254e:	bf00      	nop
  }
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000819 	.word	0x20000819
 8002560:	2000082c 	.word	0x2000082c

08002564 <getMPU6050Gres>:

// Gyro resolution scale calculator function
void getMPU6050Gres() {
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  switch (Gscale_MPU6050)
 8002568:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <getMPU6050Gres+0x50>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d81b      	bhi.n	80025a8 <getMPU6050Gres+0x44>
 8002570:	a201      	add	r2, pc, #4	@ (adr r2, 8002578 <getMPU6050Gres+0x14>)
 8002572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002576:	bf00      	nop
 8002578:	08002589 	.word	0x08002589
 800257c:	08002591 	.word	0x08002591
 8002580:	08002599 	.word	0x08002599
 8002584:	080025a1 	.word	0x080025a1
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes_MPU6050 = 250.0/32768.0;
 8002588:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <getMPU6050Gres+0x54>)
 800258a:	4a0c      	ldr	r2, [pc, #48]	@ (80025bc <getMPU6050Gres+0x58>)
 800258c:	601a      	str	r2, [r3, #0]
          break;
 800258e:	e00b      	b.n	80025a8 <getMPU6050Gres+0x44>
    case GFS_500DPS:
          gRes_MPU6050 = 500.0/32768.0;
 8002590:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <getMPU6050Gres+0x54>)
 8002592:	4a0b      	ldr	r2, [pc, #44]	@ (80025c0 <getMPU6050Gres+0x5c>)
 8002594:	601a      	str	r2, [r3, #0]
          break;
 8002596:	e007      	b.n	80025a8 <getMPU6050Gres+0x44>
    case GFS_1000DPS:
          gRes_MPU6050 = 1000.0/32768.0;
 8002598:	4b07      	ldr	r3, [pc, #28]	@ (80025b8 <getMPU6050Gres+0x54>)
 800259a:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <getMPU6050Gres+0x60>)
 800259c:	601a      	str	r2, [r3, #0]
          break;
 800259e:	e003      	b.n	80025a8 <getMPU6050Gres+0x44>
    case GFS_2000DPS:
          gRes_MPU6050 = 2000.0/32768.0;
 80025a0:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <getMPU6050Gres+0x54>)
 80025a2:	4a09      	ldr	r2, [pc, #36]	@ (80025c8 <getMPU6050Gres+0x64>)
 80025a4:	601a      	str	r2, [r3, #0]
          break;
 80025a6:	bf00      	nop
  }
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000818 	.word	0x20000818
 80025b8:	20000830 	.word	0x20000830
 80025bc:	3bfa0000 	.word	0x3bfa0000
 80025c0:	3c7a0000 	.word	0x3c7a0000
 80025c4:	3cfa0000 	.word	0x3cfa0000
 80025c8:	3d7a0000 	.word	0x3d7a0000

080025cc <initMPU6050>:

void initMPU6050(I2C_HandleTypeDef *I2Cx){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af04      	add	r7, sp, #16
 80025d2:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 80025d4:	2300      	movs	r3, #0
 80025d6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80025d8:	2364      	movs	r3, #100	@ 0x64
 80025da:	9302      	str	r3, [sp, #8]
 80025dc:	2301      	movs	r3, #1
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	f107 030e 	add.w	r3, r7, #14
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2301      	movs	r3, #1
 80025e8:	226b      	movs	r2, #107	@ 0x6b
 80025ea:	21d0      	movs	r1, #208	@ 0xd0
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f003 fcd9 	bl	8005fa4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80025f2:	200a      	movs	r0, #10
 80025f4:	f002 fb92 	bl	8004d1c <HAL_Delay>

	writeData = 0x01;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80025fc:	2364      	movs	r3, #100	@ 0x64
 80025fe:	9302      	str	r3, [sp, #8]
 8002600:	2301      	movs	r3, #1
 8002602:	9301      	str	r3, [sp, #4]
 8002604:	f107 030e 	add.w	r3, r7, #14
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	2301      	movs	r3, #1
 800260c:	226b      	movs	r2, #107	@ 0x6b
 800260e:	21d0      	movs	r1, #208	@ 0xd0
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f003 fcc7 	bl	8005fa4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8002616:	200a      	movs	r0, #10
 8002618:	f002 fb80 	bl	8004d1c <HAL_Delay>

	writeData = 0x03;
 800261c:	2303      	movs	r3, #3
 800261e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 8002620:	2364      	movs	r3, #100	@ 0x64
 8002622:	9302      	str	r3, [sp, #8]
 8002624:	2301      	movs	r3, #1
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	f107 030e 	add.w	r3, r7, #14
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2301      	movs	r3, #1
 8002630:	221a      	movs	r2, #26
 8002632:	21d0      	movs	r1, #208	@ 0xd0
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f003 fcb5 	bl	8005fa4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800263a:	200a      	movs	r0, #10
 800263c:	f002 fb6e 	bl	8004d1c <HAL_Delay>

	writeData = 0; //0x07; 0x04
 8002640:	2300      	movs	r3, #0
 8002642:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8002644:	2364      	movs	r3, #100	@ 0x64
 8002646:	9302      	str	r3, [sp, #8]
 8002648:	2301      	movs	r3, #1
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	f107 030e 	add.w	r3, r7, #14
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	2301      	movs	r3, #1
 8002654:	2219      	movs	r2, #25
 8002656:	21d0      	movs	r1, #208	@ 0xd0
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f003 fca3 	bl	8005fa4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800265e:	200a      	movs	r0, #10
 8002660:	f002 fb5c 	bl	8004d1c <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8002664:	2364      	movs	r3, #100	@ 0x64
 8002666:	9302      	str	r3, [sp, #8]
 8002668:	2301      	movs	r3, #1
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	f107 030f 	add.w	r3, r7, #15
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2301      	movs	r3, #1
 8002674:	221b      	movs	r2, #27
 8002676:	21d0      	movs	r1, #208	@ 0xd0
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f003 fd8d 	bl	8006198 <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	f023 0303 	bic.w	r3, r3, #3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	f023 0318 	bic.w	r3, r3, #24
 800268e:	b2db      	uxtb	r3, r3
 8002690:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale_MPU6050 << 3; // Set full scale range for the gyro
 8002692:	4b3e      	ldr	r3, [pc, #248]	@ (800278c <initMPU6050+0x1c0>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	b25b      	sxtb	r3, r3
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	b25a      	sxtb	r2, r3
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	4313      	orrs	r3, r2
 80026a2:	b25b      	sxtb	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80026a8:	200a      	movs	r0, #10
 80026aa:	f002 fb37 	bl	8004d1c <HAL_Delay>

	writeData = readData;
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80026b2:	2364      	movs	r3, #100	@ 0x64
 80026b4:	9302      	str	r3, [sp, #8]
 80026b6:	2301      	movs	r3, #1
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	f107 030e 	add.w	r3, r7, #14
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2301      	movs	r3, #1
 80026c2:	221b      	movs	r2, #27
 80026c4:	21d0      	movs	r1, #208	@ 0xd0
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f003 fc6c 	bl	8005fa4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80026cc:	200a      	movs	r0, #10
 80026ce:	f002 fb25 	bl	8004d1c <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 80026d2:	2364      	movs	r3, #100	@ 0x64
 80026d4:	9302      	str	r3, [sp, #8]
 80026d6:	2301      	movs	r3, #1
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	f107 030f 	add.w	r3, r7, #15
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2301      	movs	r3, #1
 80026e2:	221c      	movs	r2, #28
 80026e4:	21d0      	movs	r1, #208	@ 0xd0
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f003 fd56 	bl	8006198 <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	f023 0318 	bic.w	r3, r3, #24
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale_MPU6050 << 3; // Set full scale range for the accelerometer
 80026f6:	4b26      	ldr	r3, [pc, #152]	@ (8002790 <initMPU6050+0x1c4>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	b25b      	sxtb	r3, r3
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	b25a      	sxtb	r2, r3
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	b25b      	sxtb	r3, r3
 8002704:	4313      	orrs	r3, r2
 8002706:	b25b      	sxtb	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8002710:	2364      	movs	r3, #100	@ 0x64
 8002712:	9302      	str	r3, [sp, #8]
 8002714:	2301      	movs	r3, #1
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	f107 030e 	add.w	r3, r7, #14
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	2301      	movs	r3, #1
 8002720:	221c      	movs	r2, #28
 8002722:	21d0      	movs	r1, #208	@ 0xd0
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f003 fc3d 	bl	8005fa4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800272a:	200a      	movs	r0, #10
 800272c:	f002 faf6 	bl	8004d1c <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 8002730:	2364      	movs	r3, #100	@ 0x64
 8002732:	9302      	str	r3, [sp, #8]
 8002734:	2301      	movs	r3, #1
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	f107 030f 	add.w	r3, r7, #15
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2301      	movs	r3, #1
 8002740:	221d      	movs	r2, #29
 8002742:	21d0      	movs	r1, #208	@ 0xd0
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f003 fd27 	bl	8006198 <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	f023 030f 	bic.w	r3, r3, #15
 8002750:	b2db      	uxtb	r3, r3
 8002752:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	f043 0303 	orr.w	r3, r3, #3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 8002762:	2364      	movs	r3, #100	@ 0x64
 8002764:	9302      	str	r3, [sp, #8]
 8002766:	2301      	movs	r3, #1
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	f107 030e 	add.w	r3, r7, #14
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	2301      	movs	r3, #1
 8002772:	221d      	movs	r2, #29
 8002774:	21d0      	movs	r1, #208	@ 0xd0
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f003 fc14 	bl	8005fa4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800277c:	200a      	movs	r0, #10
 800277e:	f002 facd 	bl	8004d1c <HAL_Delay>
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000818 	.word	0x20000818
 8002790:	20000819 	.word	0x20000819

08002794 <readMPU6050AccelData>:

//read raw Accelerometer values from registers
void readMPU6050AccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af04      	add	r7, sp, #16
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 800279e:	2364      	movs	r3, #100	@ 0x64
 80027a0:	9302      	str	r3, [sp, #8]
 80027a2:	2306      	movs	r3, #6
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	f107 0308 	add.w	r3, r7, #8
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2301      	movs	r3, #1
 80027ae:	223b      	movs	r2, #59	@ 0x3b
 80027b0:	21d0      	movs	r1, #208	@ 0xd0
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f003 fcf0 	bl	8006198 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 80027b8:	7a3b      	ldrb	r3, [r7, #8]
 80027ba:	b21b      	sxth	r3, r3
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	b21a      	sxth	r2, r3
 80027c0:	7a7b      	ldrb	r3, [r7, #9]
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b21a      	sxth	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 80027cc:	7abb      	ldrb	r3, [r7, #10]
 80027ce:	b21b      	sxth	r3, r3
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	b219      	sxth	r1, r3
 80027d4:	7afb      	ldrb	r3, [r7, #11]
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	3302      	adds	r3, #2
 80027dc:	430a      	orrs	r2, r1
 80027de:	b212      	sxth	r2, r2
 80027e0:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 80027e2:	7b3b      	ldrb	r3, [r7, #12]
 80027e4:	b21b      	sxth	r3, r3
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	b219      	sxth	r1, r3
 80027ea:	7b7b      	ldrb	r3, [r7, #13]
 80027ec:	b21a      	sxth	r2, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	3304      	adds	r3, #4
 80027f2:	430a      	orrs	r2, r1
 80027f4:	b212      	sxth	r2, r2
 80027f6:	801a      	strh	r2, [r3, #0]
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <readMPU6050GyroData>:

//read raw Gyro values from registers
void readMPU6050GyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af04      	add	r7, sp, #16
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 800280a:	2364      	movs	r3, #100	@ 0x64
 800280c:	9302      	str	r3, [sp, #8]
 800280e:	2306      	movs	r3, #6
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	f107 0308 	add.w	r3, r7, #8
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2301      	movs	r3, #1
 800281a:	2243      	movs	r2, #67	@ 0x43
 800281c:	21d0      	movs	r1, #208	@ 0xd0
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f003 fcba 	bl	8006198 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8002824:	7a3b      	ldrb	r3, [r7, #8]
 8002826:	b21b      	sxth	r3, r3
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	b21a      	sxth	r2, r3
 800282c:	7a7b      	ldrb	r3, [r7, #9]
 800282e:	b21b      	sxth	r3, r3
 8002830:	4313      	orrs	r3, r2
 8002832:	b21a      	sxth	r2, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 8002838:	7abb      	ldrb	r3, [r7, #10]
 800283a:	b21b      	sxth	r3, r3
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	b219      	sxth	r1, r3
 8002840:	7afb      	ldrb	r3, [r7, #11]
 8002842:	b21a      	sxth	r2, r3
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	3302      	adds	r3, #2
 8002848:	430a      	orrs	r2, r1
 800284a:	b212      	sxth	r2, r2
 800284c:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 800284e:	7b3b      	ldrb	r3, [r7, #12]
 8002850:	b21b      	sxth	r3, r3
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	b219      	sxth	r1, r3
 8002856:	7b7b      	ldrb	r3, [r7, #13]
 8002858:	b21a      	sxth	r2, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	3304      	adds	r3, #4
 800285e:	430a      	orrs	r2, r1
 8002860:	b212      	sxth	r2, r2
 8002862:	801a      	strh	r2, [r3, #0]
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <calibrateMPU6050>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU6050(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct, float * dest1, float * dest2){
 800286c:	b580      	push	{r7, lr}
 800286e:	b09e      	sub	sp, #120	@ 0x78
 8002870:	af04      	add	r7, sp, #16
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 800287a:	2300      	movs	r3, #0
 800287c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800287e:	2300      	movs	r3, #0
 8002880:	643b      	str	r3, [r7, #64]	@ 0x40
 8002882:	2300      	movs	r3, #0
 8002884:	647b      	str	r3, [r7, #68]	@ 0x44
 8002886:	2300      	movs	r3, #0
 8002888:	633b      	str	r3, [r7, #48]	@ 0x30
 800288a:	2300      	movs	r3, #0
 800288c:	637b      	str	r3, [r7, #52]	@ 0x34
 800288e:	2300      	movs	r3, #0
 8002890:	63bb      	str	r3, [r7, #56]	@ 0x38

	// reset device
	writeData = 0x80;
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 8002898:	2364      	movs	r3, #100	@ 0x64
 800289a:	9302      	str	r3, [sp, #8]
 800289c:	2301      	movs	r3, #1
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2301      	movs	r3, #1
 80028a8:	226b      	movs	r2, #107	@ 0x6b
 80028aa:	21d0      	movs	r1, #208	@ 0xd0
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f003 fb79 	bl	8005fa4 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80028b2:	2064      	movs	r0, #100	@ 0x64
 80028b4:	f002 fa32 	bl	8004d1c <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80028be:	2364      	movs	r3, #100	@ 0x64
 80028c0:	9302      	str	r3, [sp, #8]
 80028c2:	2301      	movs	r3, #1
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	2301      	movs	r3, #1
 80028ce:	226b      	movs	r2, #107	@ 0x6b
 80028d0:	21d0      	movs	r1, #208	@ 0xd0
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f003 fb66 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 80028de:	2364      	movs	r3, #100	@ 0x64
 80028e0:	9302      	str	r3, [sp, #8]
 80028e2:	2301      	movs	r3, #1
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2301      	movs	r3, #1
 80028ee:	226c      	movs	r2, #108	@ 0x6c
 80028f0:	21d0      	movs	r1, #208	@ 0xd0
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f003 fb56 	bl	8005fa4 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80028f8:	20c8      	movs	r0, #200	@ 0xc8
 80028fa:	f002 fa0f 	bl	8004d1c <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 8002904:	2364      	movs	r3, #100	@ 0x64
 8002906:	9302      	str	r3, [sp, #8]
 8002908:	2301      	movs	r3, #1
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2301      	movs	r3, #1
 8002914:	2238      	movs	r2, #56	@ 0x38
 8002916:	21d0      	movs	r1, #208	@ 0xd0
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f003 fb43 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8002924:	2364      	movs	r3, #100	@ 0x64
 8002926:	9302      	str	r3, [sp, #8]
 8002928:	2301      	movs	r3, #1
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2301      	movs	r3, #1
 8002934:	2223      	movs	r2, #35	@ 0x23
 8002936:	21d0      	movs	r1, #208	@ 0xd0
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f003 fb33 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800293e:	2300      	movs	r3, #0
 8002940:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8002944:	2364      	movs	r3, #100	@ 0x64
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	2301      	movs	r3, #1
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2301      	movs	r3, #1
 8002954:	226b      	movs	r2, #107	@ 0x6b
 8002956:	21d0      	movs	r1, #208	@ 0xd0
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f003 fb23 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800295e:	2300      	movs	r3, #0
 8002960:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 8002964:	2364      	movs	r3, #100	@ 0x64
 8002966:	9302      	str	r3, [sp, #8]
 8002968:	2301      	movs	r3, #1
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2301      	movs	r3, #1
 8002974:	2224      	movs	r2, #36	@ 0x24
 8002976:	21d0      	movs	r1, #208	@ 0xd0
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f003 fb13 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800297e:	2300      	movs	r3, #0
 8002980:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 8002984:	2364      	movs	r3, #100	@ 0x64
 8002986:	9302      	str	r3, [sp, #8]
 8002988:	2301      	movs	r3, #1
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2301      	movs	r3, #1
 8002994:	226a      	movs	r2, #106	@ 0x6a
 8002996:	21d0      	movs	r1, #208	@ 0xd0
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f003 fb03 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 800299e:	230c      	movs	r3, #12
 80029a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 80029a4:	2364      	movs	r3, #100	@ 0x64
 80029a6:	9302      	str	r3, [sp, #8]
 80029a8:	2301      	movs	r3, #1
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2301      	movs	r3, #1
 80029b4:	226a      	movs	r2, #106	@ 0x6a
 80029b6:	21d0      	movs	r1, #208	@ 0xd0
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f003 faf3 	bl	8005fa4 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 80029be:	200f      	movs	r0, #15
 80029c0:	f002 f9ac 	bl	8004d1c <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 80029ca:	2364      	movs	r3, #100	@ 0x64
 80029cc:	9302      	str	r3, [sp, #8]
 80029ce:	2301      	movs	r3, #1
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2301      	movs	r3, #1
 80029da:	221a      	movs	r2, #26
 80029dc:	21d0      	movs	r1, #208	@ 0xd0
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f003 fae0 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 80029ea:	2364      	movs	r3, #100	@ 0x64
 80029ec:	9302      	str	r3, [sp, #8]
 80029ee:	2301      	movs	r3, #1
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2301      	movs	r3, #1
 80029fa:	2219      	movs	r2, #25
 80029fc:	21d0      	movs	r1, #208	@ 0xd0
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f003 fad0 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8002a0a:	2364      	movs	r3, #100	@ 0x64
 8002a0c:	9302      	str	r3, [sp, #8]
 8002a0e:	2301      	movs	r3, #1
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	2301      	movs	r3, #1
 8002a1a:	221b      	movs	r2, #27
 8002a1c:	21d0      	movs	r1, #208	@ 0xd0
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f003 fac0 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8002a2a:	2364      	movs	r3, #100	@ 0x64
 8002a2c:	9302      	str	r3, [sp, #8]
 8002a2e:	2301      	movs	r3, #1
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	2301      	movs	r3, #1
 8002a3a:	221c      	movs	r2, #28
 8002a3c:	21d0      	movs	r1, #208	@ 0xd0
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f003 fab0 	bl	8005fa4 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8002a44:	2383      	movs	r3, #131	@ 0x83
 8002a46:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8002a4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a4e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8002a52:	2340      	movs	r3, #64	@ 0x40
 8002a54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 8002a58:	2364      	movs	r3, #100	@ 0x64
 8002a5a:	9302      	str	r3, [sp, #8]
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2301      	movs	r3, #1
 8002a68:	226a      	movs	r2, #106	@ 0x6a
 8002a6a:	21d0      	movs	r1, #208	@ 0xd0
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f003 fa99 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8002a72:	2378      	movs	r3, #120	@ 0x78
 8002a74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8002a78:	2364      	movs	r3, #100	@ 0x64
 8002a7a:	9302      	str	r3, [sp, #8]
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	2301      	movs	r3, #1
 8002a88:	2223      	movs	r2, #35	@ 0x23
 8002a8a:	21d0      	movs	r1, #208	@ 0xd0
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f003 fa89 	bl	8005fa4 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8002a92:	2028      	movs	r0, #40	@ 0x28
 8002a94:	f002 f942 	bl	8004d1c <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8002a9e:	2364      	movs	r3, #100	@ 0x64
 8002aa0:	9302      	str	r3, [sp, #8]
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	9301      	str	r3, [sp, #4]
 8002aa6:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	2301      	movs	r3, #1
 8002aae:	2223      	movs	r2, #35	@ 0x23
 8002ab0:	21d0      	movs	r1, #208	@ 0xd0
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f003 fa76 	bl	8005fa4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8002ab8:	2364      	movs	r3, #100	@ 0x64
 8002aba:	9302      	str	r3, [sp, #8]
 8002abc:	2302      	movs	r3, #2
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	2272      	movs	r2, #114	@ 0x72
 8002aca:	21d0      	movs	r1, #208	@ 0xd0
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f003 fb63 	bl	8006198 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8002ad2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002ad6:	b21b      	sxth	r3, r3
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	b21a      	sxth	r2, r3
 8002adc:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8002ae0:	b21b      	sxth	r3, r3
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	b21b      	sxth	r3, r3
 8002ae6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8002aea:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8002aee:	4a5e      	ldr	r2, [pc, #376]	@ (8002c68 <calibrateMPU6050+0x3fc>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	08db      	lsrs	r3, r3, #3
 8002af6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 8002afa:	2300      	movs	r3, #0
 8002afc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8002b00:	e07d      	b.n	8002bfe <calibrateMPU6050+0x392>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8002b02:	2300      	movs	r3, #0
 8002b04:	833b      	strh	r3, [r7, #24]
 8002b06:	2300      	movs	r3, #0
 8002b08:	837b      	strh	r3, [r7, #26]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	83bb      	strh	r3, [r7, #28]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	823b      	strh	r3, [r7, #16]
 8002b12:	2300      	movs	r3, #0
 8002b14:	827b      	strh	r3, [r7, #18]
 8002b16:	2300      	movs	r3, #0
 8002b18:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8002b1a:	2364      	movs	r3, #100	@ 0x64
 8002b1c:	9302      	str	r3, [sp, #8]
 8002b1e:	230c      	movs	r3, #12
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2301      	movs	r3, #1
 8002b2a:	2274      	movs	r2, #116	@ 0x74
 8002b2c:	21d0      	movs	r1, #208	@ 0xd0
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f003 fb32 	bl	8006198 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8002b34:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002b38:	b21b      	sxth	r3, r3
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	b21a      	sxth	r2, r3
 8002b3e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8002b42:	b21b      	sxth	r3, r3
 8002b44:	4313      	orrs	r3, r2
 8002b46:	b21b      	sxth	r3, r3
 8002b48:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8002b4a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8002b4e:	b21b      	sxth	r3, r3
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	b21a      	sxth	r2, r3
 8002b54:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002b58:	b21b      	sxth	r3, r3
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	b21b      	sxth	r3, r3
 8002b5e:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8002b60:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002b64:	b21b      	sxth	r3, r3
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	b21a      	sxth	r2, r3
 8002b6a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b6e:	b21b      	sxth	r3, r3
 8002b70:	4313      	orrs	r3, r2
 8002b72:	b21b      	sxth	r3, r3
 8002b74:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8002b76:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	b21a      	sxth	r2, r3
 8002b80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	4313      	orrs	r3, r2
 8002b88:	b21b      	sxth	r3, r3
 8002b8a:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8002b8c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	b21a      	sxth	r2, r3
 8002b96:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8002b9a:	b21b      	sxth	r3, r3
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 8002ba2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	b21a      	sxth	r2, r3
 8002bac:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	b21b      	sxth	r3, r3
 8002bb6:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bba:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	633b      	str	r3, [r7, #48]	@ 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002bc8:	4413      	add	r3, r2
 8002bca:	637b      	str	r3, [r7, #52]	@ 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bce:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8002bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bd8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8002be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002be2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002be6:	4413      	add	r3, r2
 8002be8:	643b      	str	r3, [r7, #64]	@ 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8002bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bec:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	647b      	str	r3, [r7, #68]	@ 0x44
	for (ii = 0; ii < packet_count; ii++) {
 8002bf4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8002bfe:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8002c02:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002c06:	429a      	cmp	r2, r3
 8002c08:	f4ff af7b 	bcc.w	8002b02 <calibrateMPU6050+0x296>

	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8002c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c0e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002c12:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c16:	633b      	str	r3, [r7, #48]	@ 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8002c18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c1a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002c1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c22:	637b      	str	r3, [r7, #52]	@ 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8002c24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c26:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002c2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 8002c30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c32:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002c36:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 8002c3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c3e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002c42:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c46:	643b      	str	r3, [r7, #64]	@ 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8002c48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c4a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002c4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c52:	647b      	str	r3, [r7, #68]	@ 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 8002c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	dd08      	ble.n	8002c6c <calibrateMPU6050+0x400>
 8002c5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c5c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c64:	e007      	b.n	8002c76 <calibrateMPU6050+0x40a>
 8002c66:	bf00      	nop
 8002c68:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8002c6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8002c72:	4413      	add	r3, r2
 8002c74:	63bb      	str	r3, [r7, #56]	@ 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8002c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c78:	425b      	negs	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	da00      	bge.n	8002c80 <calibrateMPU6050+0x414>
 8002c7e:	3303      	adds	r3, #3
 8002c80:	109b      	asrs	r3, r3, #2
 8002c82:	121b      	asrs	r3, r3, #8
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8002c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c8c:	425b      	negs	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	da00      	bge.n	8002c94 <calibrateMPU6050+0x428>
 8002c92:	3303      	adds	r3, #3
 8002c94:	109b      	asrs	r3, r3, #2
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8002c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c9e:	425b      	negs	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	da00      	bge.n	8002ca6 <calibrateMPU6050+0x43a>
 8002ca4:	3303      	adds	r3, #3
 8002ca6:	109b      	asrs	r3, r3, #2
 8002ca8:	121b      	asrs	r3, r3, #8
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 8002cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cb2:	425b      	negs	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	da00      	bge.n	8002cba <calibrateMPU6050+0x44e>
 8002cb8:	3303      	adds	r3, #3
 8002cba:	109b      	asrs	r3, r3, #2
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8002cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cc4:	425b      	negs	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	da00      	bge.n	8002ccc <calibrateMPU6050+0x460>
 8002cca:	3303      	adds	r3, #3
 8002ccc:	109b      	asrs	r3, r3, #2
 8002cce:	121b      	asrs	r3, r3, #8
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 8002cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cd8:	425b      	negs	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	da00      	bge.n	8002ce0 <calibrateMPU6050+0x474>
 8002cde:	3303      	adds	r3, #3
 8002ce0:	109b      	asrs	r3, r3, #2
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 8002ce8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002cec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002cf0:	2364      	movs	r3, #100	@ 0x64
 8002cf2:	9302      	str	r3, [sp, #8]
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2301      	movs	r3, #1
 8002d00:	2213      	movs	r2, #19
 8002d02:	21d0      	movs	r1, #208	@ 0xd0
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f003 f94d 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8002d0a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8002d0e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002d12:	2364      	movs	r3, #100	@ 0x64
 8002d14:	9302      	str	r3, [sp, #8]
 8002d16:	2301      	movs	r3, #1
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2301      	movs	r3, #1
 8002d22:	2214      	movs	r2, #20
 8002d24:	21d0      	movs	r1, #208	@ 0xd0
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f003 f93c 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8002d2c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8002d30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002d34:	2364      	movs	r3, #100	@ 0x64
 8002d36:	9302      	str	r3, [sp, #8]
 8002d38:	2301      	movs	r3, #1
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2301      	movs	r3, #1
 8002d44:	2215      	movs	r2, #21
 8002d46:	21d0      	movs	r1, #208	@ 0xd0
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f003 f92b 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8002d4e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002d52:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002d56:	2364      	movs	r3, #100	@ 0x64
 8002d58:	9302      	str	r3, [sp, #8]
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	9301      	str	r3, [sp, #4]
 8002d5e:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2301      	movs	r3, #1
 8002d66:	2216      	movs	r2, #22
 8002d68:	21d0      	movs	r1, #208	@ 0xd0
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f003 f91a 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8002d70:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002d74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002d78:	2364      	movs	r3, #100	@ 0x64
 8002d7a:	9302      	str	r3, [sp, #8]
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2301      	movs	r3, #1
 8002d88:	2217      	movs	r2, #23
 8002d8a:	21d0      	movs	r1, #208	@ 0xd0
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f003 f909 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8002d92:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d96:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002d9a:	2364      	movs	r3, #100	@ 0x64
 8002d9c:	9302      	str	r3, [sp, #8]
 8002d9e:	2301      	movs	r3, #1
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2301      	movs	r3, #1
 8002daa:	2218      	movs	r2, #24
 8002dac:	21d0      	movs	r1, #208	@ 0xd0
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f003 f8f8 	bl	8005fa4 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8002db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002dbe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8002dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd6:	ee07 3a90 	vmov	s15, r3
 8002dda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002dde:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3304      	adds	r3, #4
 8002dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002df2:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8002df6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e00:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002e04:	ee07 3a90 	vmov	s15, r3
 8002e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3308      	adds	r3, #8
 8002e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e14:	edc3 7a00 	vstr	s15, [r3]

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e20:	2300      	movs	r3, #0
 8002e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 8002e24:	2364      	movs	r3, #100	@ 0x64
 8002e26:	9302      	str	r3, [sp, #8]
 8002e28:	2302      	movs	r3, #2
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	2301      	movs	r3, #1
 8002e34:	2277      	movs	r2, #119	@ 0x77
 8002e36:	21d0      	movs	r1, #208	@ 0xd0
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f003 f9ad 	bl	8006198 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8002e3e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8002e4c:	2364      	movs	r3, #100	@ 0x64
 8002e4e:	9302      	str	r3, [sp, #8]
 8002e50:	2302      	movs	r3, #2
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	227a      	movs	r2, #122	@ 0x7a
 8002e5e:	21d0      	movs	r1, #208	@ 0xd0
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f003 f999 	bl	8006198 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8002e66:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8002e70:	4313      	orrs	r3, r2
 8002e72:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8002e74:	2364      	movs	r3, #100	@ 0x64
 8002e76:	9302      	str	r3, [sp, #8]
 8002e78:	2302      	movs	r3, #2
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2301      	movs	r3, #1
 8002e84:	227d      	movs	r2, #125	@ 0x7d
 8002e86:	21d0      	movs	r1, #208	@ 0xd0
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f003 f985 	bl	8006198 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8002e8e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	65bb      	str	r3, [r7, #88]	@ 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 8002ea0:	f107 0320 	add.w	r3, r7, #32
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	460a      	mov	r2, r1
 8002ea8:	801a      	strh	r2, [r3, #0]
 8002eaa:	460a      	mov	r2, r1
 8002eac:	709a      	strb	r2, [r3, #2]

	for(ii = 0; ii < 3; ii++) {
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8002eb4:	e017      	b.n	8002ee6 <calibrateMPU6050+0x67a>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 8002eb6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	3368      	adds	r3, #104	@ 0x68
 8002ebe:	443b      	add	r3, r7
 8002ec0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <calibrateMPU6050+0x670>
 8002ece:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002ed2:	3368      	adds	r3, #104	@ 0x68
 8002ed4:	443b      	add	r3, r7
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 8002edc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8002ee6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d9e3      	bls.n	8002eb6 <calibrateMPU6050+0x64a>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8002eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	da00      	bge.n	8002ef8 <calibrateMPU6050+0x68c>
 8002ef6:	3307      	adds	r3, #7
 8002ef8:	10db      	asrs	r3, r3, #3
 8002efa:	425b      	negs	r3, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8002f00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	da00      	bge.n	8002f0a <calibrateMPU6050+0x69e>
 8002f08:	3307      	adds	r3, #7
 8002f0a:	10db      	asrs	r3, r3, #3
 8002f0c:	425b      	negs	r3, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	62bb      	str	r3, [r7, #40]	@ 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8002f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	da00      	bge.n	8002f1c <calibrateMPU6050+0x6b0>
 8002f1a:	3307      	adds	r3, #7
 8002f1c:	10db      	asrs	r3, r3, #3
 8002f1e:	425b      	negs	r3, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8002f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f26:	121b      	asrs	r3, r3, #8
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002f36:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8002f3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8002f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f48:	121b      	asrs	r3, r3, #8
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 8002f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002f58:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8002f5c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002f60:	4313      	orrs	r3, r2
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8002f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6a:	121b      	asrs	r3, r3, #8
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 8002f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002f7a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002f7e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002f82:	4313      	orrs	r3, r2
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 8002f8a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002f8e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002f92:	2364      	movs	r3, #100	@ 0x64
 8002f94:	9302      	str	r3, [sp, #8]
 8002f96:	2301      	movs	r3, #1
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	2277      	movs	r2, #119	@ 0x77
 8002fa4:	21d0      	movs	r1, #208	@ 0xd0
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f002 fffc 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8002fac:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8002fb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002fb4:	2364      	movs	r3, #100	@ 0x64
 8002fb6:	9302      	str	r3, [sp, #8]
 8002fb8:	2301      	movs	r3, #1
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	2278      	movs	r2, #120	@ 0x78
 8002fc6:	21d0      	movs	r1, #208	@ 0xd0
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f002 ffeb 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8002fce:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8002fd2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8002fd6:	2364      	movs	r3, #100	@ 0x64
 8002fd8:	9302      	str	r3, [sp, #8]
 8002fda:	2301      	movs	r3, #1
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	227a      	movs	r2, #122	@ 0x7a
 8002fe8:	21d0      	movs	r1, #208	@ 0xd0
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f002 ffda 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8002ff0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002ff4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8002ff8:	2364      	movs	r3, #100	@ 0x64
 8002ffa:	9302      	str	r3, [sp, #8]
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	2301      	movs	r3, #1
 8003008:	227b      	movs	r2, #123	@ 0x7b
 800300a:	21d0      	movs	r1, #208	@ 0xd0
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f002 ffc9 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8003012:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003016:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800301a:	2364      	movs	r3, #100	@ 0x64
 800301c:	9302      	str	r3, [sp, #8]
 800301e:	2301      	movs	r3, #1
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2301      	movs	r3, #1
 800302a:	227d      	movs	r2, #125	@ 0x7d
 800302c:	21d0      	movs	r1, #208	@ 0xd0
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f002 ffb8 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8003034:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003038:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800303c:	2364      	movs	r3, #100	@ 0x64
 800303e:	9302      	str	r3, [sp, #8]
 8003040:	2301      	movs	r3, #1
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	2301      	movs	r3, #1
 800304c:	227e      	movs	r2, #126	@ 0x7e
 800304e:	21d0      	movs	r1, #208	@ 0xd0
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f002 ffa7 	bl	8005fa4 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 8003056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003060:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800306c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 8003076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003080:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003084:	ee07 3a90 	vmov	s15, r3
 8003088:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	3304      	adds	r3, #4
 8003090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003094:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 8003098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	3308      	adds	r3, #8
 80030b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b6:	edc3 7a00 	vstr	s15, [r3]
	
	DataStruct->CALIBRATIN_OK_u8 = TRUE;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2201      	movs	r2, #1
 80030be:	761a      	strb	r2, [r3, #24]
}
 80030c0:	bf00      	nop
 80030c2:	3768      	adds	r7, #104	@ 0x68
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <MPU6050SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU6050SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 80030c8:	b5b0      	push	{r4, r5, r7, lr}
 80030ca:	b0a2      	sub	sp, #136	@ 0x88
 80030cc:	af04      	add	r7, sp, #16
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 80030d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	809a      	strh	r2, [r3, #4]
	uint8_t SelfTest_MPU6050[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80030dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	f107 0320 	add.w	r3, r7, #32
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	writeData = 0x00;
 8003112:	2300      	movs	r3, #0
 8003114:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 8003118:	2364      	movs	r3, #100	@ 0x64
 800311a:	9302      	str	r3, [sp, #8]
 800311c:	2301      	movs	r3, #1
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	2301      	movs	r3, #1
 8003128:	2219      	movs	r2, #25
 800312a:	21d0      	movs	r1, #208	@ 0xd0
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f002 ff39 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8003132:	2302      	movs	r3, #2
 8003134:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8003138:	2364      	movs	r3, #100	@ 0x64
 800313a:	9302      	str	r3, [sp, #8]
 800313c:	2301      	movs	r3, #1
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	2301      	movs	r3, #1
 8003148:	221a      	movs	r2, #26
 800314a:	21d0      	movs	r1, #208	@ 0xd0
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f002 ff29 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8003152:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 800315e:	2364      	movs	r3, #100	@ 0x64
 8003160:	9302      	str	r3, [sp, #8]
 8003162:	2301      	movs	r3, #1
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	2301      	movs	r3, #1
 800316e:	221b      	movs	r2, #27
 8003170:	21d0      	movs	r1, #208	@ 0xd0
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f002 ff16 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8003178:	2302      	movs	r3, #2
 800317a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800317e:	2364      	movs	r3, #100	@ 0x64
 8003180:	9302      	str	r3, [sp, #8]
 8003182:	2301      	movs	r3, #1
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2301      	movs	r3, #1
 800318e:	221d      	movs	r2, #29
 8003190:	21d0      	movs	r1, #208	@ 0xd0
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f002 ff06 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8003198:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 80031a4:	2364      	movs	r3, #100	@ 0x64
 80031a6:	9302      	str	r3, [sp, #8]
 80031a8:	2301      	movs	r3, #1
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	2301      	movs	r3, #1
 80031b4:	221c      	movs	r2, #28
 80031b6:	21d0      	movs	r1, #208	@ 0xd0
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f002 fef3 	bl	8005fa4 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 80031be:	2300      	movs	r3, #0
 80031c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80031c2:	e06d      	b.n	80032a0 <MPU6050SelfTest+0x1d8>

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 80031c4:	2364      	movs	r3, #100	@ 0x64
 80031c6:	9302      	str	r3, [sp, #8]
 80031c8:	2306      	movs	r3, #6
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2301      	movs	r3, #1
 80031d4:	223b      	movs	r2, #59	@ 0x3b
 80031d6:	21d0      	movs	r1, #208	@ 0xd0
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f002 ffdd 	bl	8006198 <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80031de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e0:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 80031e4:	b212      	sxth	r2, r2
 80031e6:	0212      	lsls	r2, r2, #8
 80031e8:	b211      	sxth	r1, r2
 80031ea:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 80031ee:	b212      	sxth	r2, r2
 80031f0:	430a      	orrs	r2, r1
 80031f2:	b212      	sxth	r2, r2
 80031f4:	4413      	add	r3, r2
 80031f6:	63bb      	str	r3, [r7, #56]	@ 0x38
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80031f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031fa:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 80031fe:	b212      	sxth	r2, r2
 8003200:	0212      	lsls	r2, r2, #8
 8003202:	b211      	sxth	r1, r2
 8003204:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003208:	b212      	sxth	r2, r2
 800320a:	430a      	orrs	r2, r1
 800320c:	b212      	sxth	r2, r2
 800320e:	4413      	add	r3, r2
 8003210:	63fb      	str	r3, [r7, #60]	@ 0x3c
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003214:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8003218:	b212      	sxth	r2, r2
 800321a:	0212      	lsls	r2, r2, #8
 800321c:	b211      	sxth	r1, r2
 800321e:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8003222:	b212      	sxth	r2, r2
 8003224:	430a      	orrs	r2, r1
 8003226:	b212      	sxth	r2, r2
 8003228:	4413      	add	r3, r2
 800322a:	643b      	str	r3, [r7, #64]	@ 0x40

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 800322c:	2364      	movs	r3, #100	@ 0x64
 800322e:	9302      	str	r3, [sp, #8]
 8003230:	2306      	movs	r3, #6
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	2301      	movs	r3, #1
 800323c:	2243      	movs	r2, #67	@ 0x43
 800323e:	21d0      	movs	r1, #208	@ 0xd0
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f002 ffa9 	bl	8006198 <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003248:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800324c:	b212      	sxth	r2, r2
 800324e:	0212      	lsls	r2, r2, #8
 8003250:	b211      	sxth	r1, r2
 8003252:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8003256:	b212      	sxth	r2, r2
 8003258:	430a      	orrs	r2, r1
 800325a:	b212      	sxth	r2, r2
 800325c:	4413      	add	r3, r2
 800325e:	647b      	str	r3, [r7, #68]	@ 0x44
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003262:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8003266:	b212      	sxth	r2, r2
 8003268:	0212      	lsls	r2, r2, #8
 800326a:	b211      	sxth	r1, r2
 800326c:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003270:	b212      	sxth	r2, r2
 8003272:	430a      	orrs	r2, r1
 8003274:	b212      	sxth	r2, r2
 8003276:	4413      	add	r3, r2
 8003278:	64bb      	str	r3, [r7, #72]	@ 0x48
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 800327a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800327c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8003280:	b212      	sxth	r2, r2
 8003282:	0212      	lsls	r2, r2, #8
 8003284:	b211      	sxth	r1, r2
 8003286:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800328a:	b212      	sxth	r2, r2
 800328c:	430a      	orrs	r2, r1
 800328e:	b212      	sxth	r2, r2
 8003290:	4413      	add	r3, r2
 8003292:	64fb      	str	r3, [r7, #76]	@ 0x4c
		HAL_Delay(0);
 8003294:	2000      	movs	r0, #0
 8003296:	f001 fd41 	bl	8004d1c <HAL_Delay>
	for( int ii = 0; ii < 200; ii++) {
 800329a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800329c:	3301      	adds	r3, #1
 800329e:	677b      	str	r3, [r7, #116]	@ 0x74
 80032a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80032a4:	dd8e      	ble.n	80031c4 <MPU6050SelfTest+0xfc>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 80032a6:	2300      	movs	r3, #0
 80032a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80032aa:	e026      	b.n	80032fa <MPU6050SelfTest+0x232>
		aAvg[ii] /= 200;
 80032ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	3378      	adds	r3, #120	@ 0x78
 80032b2:	443b      	add	r3, r7
 80032b4:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80032b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003430 <MPU6050SelfTest+0x368>)
 80032ba:	fb82 1203 	smull	r1, r2, r2, r3
 80032be:	1192      	asrs	r2, r2, #6
 80032c0:	17db      	asrs	r3, r3, #31
 80032c2:	1ad2      	subs	r2, r2, r3
 80032c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	3378      	adds	r3, #120	@ 0x78
 80032ca:	443b      	add	r3, r7
 80032cc:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 80032d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	3378      	adds	r3, #120	@ 0x78
 80032d6:	443b      	add	r3, r7
 80032d8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80032dc:	4a54      	ldr	r2, [pc, #336]	@ (8003430 <MPU6050SelfTest+0x368>)
 80032de:	fb82 1203 	smull	r1, r2, r2, r3
 80032e2:	1192      	asrs	r2, r2, #6
 80032e4:	17db      	asrs	r3, r3, #31
 80032e6:	1ad2      	subs	r2, r2, r3
 80032e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	3378      	adds	r3, #120	@ 0x78
 80032ee:	443b      	add	r3, r7
 80032f0:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 80032f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032f6:	3301      	adds	r3, #1
 80032f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80032fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	ddd5      	ble.n	80032ac <MPU6050SelfTest+0x1e4>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 8003300:	23e0      	movs	r3, #224	@ 0xe0
 8003302:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8003306:	2364      	movs	r3, #100	@ 0x64
 8003308:	9302      	str	r3, [sp, #8]
 800330a:	2301      	movs	r3, #1
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	2301      	movs	r3, #1
 8003316:	221c      	movs	r2, #28
 8003318:	21d0      	movs	r1, #208	@ 0xd0
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f002 fe42 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 8003320:	23e0      	movs	r3, #224	@ 0xe0
 8003322:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8003326:	2364      	movs	r3, #100	@ 0x64
 8003328:	9302      	str	r3, [sp, #8]
 800332a:	2301      	movs	r3, #1
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2301      	movs	r3, #1
 8003336:	221b      	movs	r2, #27
 8003338:	21d0      	movs	r1, #208	@ 0xd0
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f002 fe32 	bl	8005fa4 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8003340:	2019      	movs	r0, #25
 8003342:	f001 fceb 	bl	8004d1c <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8003346:	2300      	movs	r3, #0
 8003348:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800334a:	e06a      	b.n	8003422 <MPU6050SelfTest+0x35a>

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 800334c:	2364      	movs	r3, #100	@ 0x64
 800334e:	9302      	str	r3, [sp, #8]
 8003350:	2306      	movs	r3, #6
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2301      	movs	r3, #1
 800335c:	223b      	movs	r2, #59	@ 0x3b
 800335e:	21d0      	movs	r1, #208	@ 0xd0
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f002 ff19 	bl	8006198 <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003368:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800336c:	b212      	sxth	r2, r2
 800336e:	0212      	lsls	r2, r2, #8
 8003370:	b211      	sxth	r1, r2
 8003372:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8003376:	b212      	sxth	r2, r2
 8003378:	430a      	orrs	r2, r1
 800337a:	b212      	sxth	r2, r2
 800337c:	4413      	add	r3, r2
 800337e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003382:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8003386:	b212      	sxth	r2, r2
 8003388:	0212      	lsls	r2, r2, #8
 800338a:	b211      	sxth	r1, r2
 800338c:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003390:	b212      	sxth	r2, r2
 8003392:	430a      	orrs	r2, r1
 8003394:	b212      	sxth	r2, r2
 8003396:	4413      	add	r3, r2
 8003398:	633b      	str	r3, [r7, #48]	@ 0x30
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 800339a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80033a0:	b212      	sxth	r2, r2
 80033a2:	0212      	lsls	r2, r2, #8
 80033a4:	b211      	sxth	r1, r2
 80033a6:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 80033aa:	b212      	sxth	r2, r2
 80033ac:	430a      	orrs	r2, r1
 80033ae:	b212      	sxth	r2, r2
 80033b0:	4413      	add	r3, r2
 80033b2:	637b      	str	r3, [r7, #52]	@ 0x34

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 80033b4:	2364      	movs	r3, #100	@ 0x64
 80033b6:	9302      	str	r3, [sp, #8]
 80033b8:	2306      	movs	r3, #6
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	2301      	movs	r3, #1
 80033c4:	2243      	movs	r2, #67	@ 0x43
 80033c6:	21d0      	movs	r1, #208	@ 0xd0
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f002 fee5 	bl	8006198 <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 80033d4:	b212      	sxth	r2, r2
 80033d6:	0212      	lsls	r2, r2, #8
 80033d8:	b211      	sxth	r1, r2
 80033da:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 80033de:	b212      	sxth	r2, r2
 80033e0:	430a      	orrs	r2, r1
 80033e2:	b212      	sxth	r2, r2
 80033e4:	4413      	add	r3, r2
 80033e6:	623b      	str	r3, [r7, #32]
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 80033ee:	b212      	sxth	r2, r2
 80033f0:	0212      	lsls	r2, r2, #8
 80033f2:	b211      	sxth	r1, r2
 80033f4:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80033f8:	b212      	sxth	r2, r2
 80033fa:	430a      	orrs	r2, r1
 80033fc:	b212      	sxth	r2, r2
 80033fe:	4413      	add	r3, r2
 8003400:	627b      	str	r3, [r7, #36]	@ 0x24
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003404:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8003408:	b212      	sxth	r2, r2
 800340a:	0212      	lsls	r2, r2, #8
 800340c:	b211      	sxth	r1, r2
 800340e:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8003412:	b212      	sxth	r2, r2
 8003414:	430a      	orrs	r2, r1
 8003416:	b212      	sxth	r2, r2
 8003418:	4413      	add	r3, r2
 800341a:	62bb      	str	r3, [r7, #40]	@ 0x28
	for( int ii = 0; ii < 200; ii++) {
 800341c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800341e:	3301      	adds	r3, #1
 8003420:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003424:	2bc7      	cmp	r3, #199	@ 0xc7
 8003426:	dd91      	ble.n	800334c <MPU6050SelfTest+0x284>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 8003428:	2300      	movs	r3, #0
 800342a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800342c:	e029      	b.n	8003482 <MPU6050SelfTest+0x3ba>
 800342e:	bf00      	nop
 8003430:	51eb851f 	.word	0x51eb851f
		aSTAvg[ii] /= 200;
 8003434:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	3378      	adds	r3, #120	@ 0x78
 800343a:	443b      	add	r3, r7
 800343c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8003440:	4ae1      	ldr	r2, [pc, #900]	@ (80037c8 <MPU6050SelfTest+0x700>)
 8003442:	fb82 1203 	smull	r1, r2, r2, r3
 8003446:	1192      	asrs	r2, r2, #6
 8003448:	17db      	asrs	r3, r3, #31
 800344a:	1ad2      	subs	r2, r2, r3
 800344c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	3378      	adds	r3, #120	@ 0x78
 8003452:	443b      	add	r3, r7
 8003454:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 8003458:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	3378      	adds	r3, #120	@ 0x78
 800345e:	443b      	add	r3, r7
 8003460:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8003464:	4ad8      	ldr	r2, [pc, #864]	@ (80037c8 <MPU6050SelfTest+0x700>)
 8003466:	fb82 1203 	smull	r1, r2, r2, r3
 800346a:	1192      	asrs	r2, r2, #6
 800346c:	17db      	asrs	r3, r3, #31
 800346e:	1ad2      	subs	r2, r2, r3
 8003470:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	3378      	adds	r3, #120	@ 0x78
 8003476:	443b      	add	r3, r7
 8003478:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 800347c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800347e:	3301      	adds	r3, #1
 8003480:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003482:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003484:	2b02      	cmp	r3, #2
 8003486:	ddd5      	ble.n	8003434 <MPU6050SelfTest+0x36c>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 8003488:	2300      	movs	r3, #0
 800348a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 800348e:	2364      	movs	r3, #100	@ 0x64
 8003490:	9302      	str	r3, [sp, #8]
 8003492:	2301      	movs	r3, #1
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2301      	movs	r3, #1
 800349e:	221c      	movs	r2, #28
 80034a0:	21d0      	movs	r1, #208	@ 0xd0
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f002 fd7e 	bl	8005fa4 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80034ae:	2364      	movs	r3, #100	@ 0x64
 80034b0:	9302      	str	r3, [sp, #8]
 80034b2:	2301      	movs	r3, #1
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	2301      	movs	r3, #1
 80034be:	221b      	movs	r2, #27
 80034c0:	21d0      	movs	r1, #208	@ 0xd0
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f002 fd6e 	bl	8005fa4 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 80034c8:	2019      	movs	r0, #25
 80034ca:	f001 fc27 	bl	8004d1c <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_X_ACCEL, 1, &SelfTest_MPU6050[0], 1, i2c_timeout);// X-axis accel self-test results
 80034ce:	2364      	movs	r3, #100	@ 0x64
 80034d0:	9302      	str	r3, [sp, #8]
 80034d2:	2301      	movs	r3, #1
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2301      	movs	r3, #1
 80034de:	220d      	movs	r2, #13
 80034e0:	21d0      	movs	r1, #208	@ 0xd0
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f002 fe58 	bl	8006198 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Y_ACCEL, 1, &SelfTest_MPU6050[1], 1, i2c_timeout);// Y-axis accel self-test results
 80034e8:	2364      	movs	r3, #100	@ 0x64
 80034ea:	9302      	str	r3, [sp, #8]
 80034ec:	2301      	movs	r3, #1
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80034f4:	3301      	adds	r3, #1
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	2301      	movs	r3, #1
 80034fa:	220e      	movs	r2, #14
 80034fc:	21d0      	movs	r1, #208	@ 0xd0
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f002 fe4a 	bl	8006198 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Z_ACCEL, 1, &SelfTest_MPU6050[2], 1, i2c_timeout);// Z-axis accel self-test results
 8003504:	2364      	movs	r3, #100	@ 0x64
 8003506:	9302      	str	r3, [sp, #8]
 8003508:	2301      	movs	r3, #1
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003510:	3302      	adds	r3, #2
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	2301      	movs	r3, #1
 8003516:	220f      	movs	r2, #15
 8003518:	21d0      	movs	r1, #208	@ 0xd0
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f002 fe3c 	bl	8006198 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_X_GYRO, 1, &SelfTest_MPU6050[3], 1, i2c_timeout);// X-axis gyro self-test results
 8003520:	2364      	movs	r3, #100	@ 0x64
 8003522:	9302      	str	r3, [sp, #8]
 8003524:	2301      	movs	r3, #1
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800352c:	3303      	adds	r3, #3
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2301      	movs	r3, #1
 8003532:	2200      	movs	r2, #0
 8003534:	21d0      	movs	r1, #208	@ 0xd0
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f002 fe2e 	bl	8006198 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Y_GYRO, 1, &SelfTest_MPU6050[4], 1, i2c_timeout);// Y-axis gyro self-test results
 800353c:	2364      	movs	r3, #100	@ 0x64
 800353e:	9302      	str	r3, [sp, #8]
 8003540:	2301      	movs	r3, #1
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003548:	3304      	adds	r3, #4
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2301      	movs	r3, #1
 800354e:	2201      	movs	r2, #1
 8003550:	21d0      	movs	r1, #208	@ 0xd0
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f002 fe20 	bl	8006198 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Z_GYRO, 1, &SelfTest_MPU6050[5], 1, i2c_timeout);// Z-axis gyro self-test results
 8003558:	2364      	movs	r3, #100	@ 0x64
 800355a:	9302      	str	r3, [sp, #8]
 800355c:	2301      	movs	r3, #1
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003564:	3305      	adds	r3, #5
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	2301      	movs	r3, #1
 800356a:	2202      	movs	r2, #2
 800356c:	21d0      	movs	r1, #208	@ 0xd0
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f002 fe12 	bl	8006198 <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[0] - 1.0) )); // FT[Xa] factory trim calculation
 8003574:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003578:	f640 223c 	movw	r2, #2620	@ 0xa3c
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003588:	ee17 0a90 	vmov	r0, s15
 800358c:	f7fc ffe4 	bl	8000558 <__aeabi_f2d>
 8003590:	4604      	mov	r4, r0
 8003592:	460d      	mov	r5, r1
 8003594:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8003598:	ee07 3a90 	vmov	s15, r3
 800359c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a0:	ee17 0a90 	vmov	r0, s15
 80035a4:	f7fc ffd8 	bl	8000558 <__aeabi_f2d>
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	4b87      	ldr	r3, [pc, #540]	@ (80037cc <MPU6050SelfTest+0x704>)
 80035ae:	f7fc fe73 	bl	8000298 <__aeabi_dsub>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	ec43 2b17 	vmov	d7, r2, r3
 80035ba:	eeb0 1a47 	vmov.f32	s2, s14
 80035be:	eef0 1a67 	vmov.f32	s3, s15
 80035c2:	ed9f 0b7f 	vldr	d0, [pc, #508]	@ 80037c0 <MPU6050SelfTest+0x6f8>
 80035c6:	f00f f943 	bl	8012850 <pow>
 80035ca:	ec53 2b10 	vmov	r2, r3, d0
 80035ce:	4620      	mov	r0, r4
 80035d0:	4629      	mov	r1, r5
 80035d2:	f7fd f819 	bl	8000608 <__aeabi_dmul>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
 80035de:	f7fd fb0b 	bl	8000bf8 <__aeabi_d2f>
 80035e2:	4603      	mov	r3, r0
 80035e4:	60bb      	str	r3, [r7, #8]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[1] - 1.0) )); // FT[Ya] factory trim calculation
 80035e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80035ea:	f640 223c 	movw	r2, #2620	@ 0xa3c
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035fa:	ee17 0a90 	vmov	r0, s15
 80035fe:	f7fc ffab 	bl	8000558 <__aeabi_f2d>
 8003602:	4604      	mov	r4, r0
 8003604:	460d      	mov	r5, r1
 8003606:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003612:	ee17 0a90 	vmov	r0, s15
 8003616:	f7fc ff9f 	bl	8000558 <__aeabi_f2d>
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	4b6b      	ldr	r3, [pc, #428]	@ (80037cc <MPU6050SelfTest+0x704>)
 8003620:	f7fc fe3a 	bl	8000298 <__aeabi_dsub>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	ec43 2b17 	vmov	d7, r2, r3
 800362c:	eeb0 1a47 	vmov.f32	s2, s14
 8003630:	eef0 1a67 	vmov.f32	s3, s15
 8003634:	ed9f 0b62 	vldr	d0, [pc, #392]	@ 80037c0 <MPU6050SelfTest+0x6f8>
 8003638:	f00f f90a 	bl	8012850 <pow>
 800363c:	ec53 2b10 	vmov	r2, r3, d0
 8003640:	4620      	mov	r0, r4
 8003642:	4629      	mov	r1, r5
 8003644:	f7fc ffe0 	bl	8000608 <__aeabi_dmul>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	f7fd fad2 	bl	8000bf8 <__aeabi_d2f>
 8003654:	4603      	mov	r3, r0
 8003656:	60fb      	str	r3, [r7, #12]
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[2] - 1.0) )); // FT[Za] factory trim calculation
 8003658:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800365c:	f640 223c 	movw	r2, #2620	@ 0xa3c
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	ee07 3a90 	vmov	s15, r3
 8003668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800366c:	ee17 0a90 	vmov	r0, s15
 8003670:	f7fc ff72 	bl	8000558 <__aeabi_f2d>
 8003674:	4604      	mov	r4, r0
 8003676:	460d      	mov	r5, r1
 8003678:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800367c:	ee07 3a90 	vmov	s15, r3
 8003680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003684:	ee17 0a90 	vmov	r0, s15
 8003688:	f7fc ff66 	bl	8000558 <__aeabi_f2d>
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	4b4e      	ldr	r3, [pc, #312]	@ (80037cc <MPU6050SelfTest+0x704>)
 8003692:	f7fc fe01 	bl	8000298 <__aeabi_dsub>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	ec43 2b17 	vmov	d7, r2, r3
 800369e:	eeb0 1a47 	vmov.f32	s2, s14
 80036a2:	eef0 1a67 	vmov.f32	s3, s15
 80036a6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80037c0 <MPU6050SelfTest+0x6f8>
 80036aa:	f00f f8d1 	bl	8012850 <pow>
 80036ae:	ec53 2b10 	vmov	r2, r3, d0
 80036b2:	4620      	mov	r0, r4
 80036b4:	4629      	mov	r1, r5
 80036b6:	f7fc ffa7 	bl	8000608 <__aeabi_dmul>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4610      	mov	r0, r2
 80036c0:	4619      	mov	r1, r3
 80036c2:	f7fd fa99 	bl	8000bf8 <__aeabi_d2f>
 80036c6:	4603      	mov	r3, r0
 80036c8:	613b      	str	r3, [r7, #16]
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[3] - 1.0) )); // FT[Xg] factory trim calculation
 80036ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80036ce:	f640 223c 	movw	r2, #2620	@ 0xa3c
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036de:	ee17 0a90 	vmov	r0, s15
 80036e2:	f7fc ff39 	bl	8000558 <__aeabi_f2d>
 80036e6:	4604      	mov	r4, r0
 80036e8:	460d      	mov	r5, r1
 80036ea:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f6:	ee17 0a90 	vmov	r0, s15
 80036fa:	f7fc ff2d 	bl	8000558 <__aeabi_f2d>
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	4b32      	ldr	r3, [pc, #200]	@ (80037cc <MPU6050SelfTest+0x704>)
 8003704:	f7fc fdc8 	bl	8000298 <__aeabi_dsub>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	ec43 2b17 	vmov	d7, r2, r3
 8003710:	eeb0 1a47 	vmov.f32	s2, s14
 8003714:	eef0 1a67 	vmov.f32	s3, s15
 8003718:	ed9f 0b29 	vldr	d0, [pc, #164]	@ 80037c0 <MPU6050SelfTest+0x6f8>
 800371c:	f00f f898 	bl	8012850 <pow>
 8003720:	ec53 2b10 	vmov	r2, r3, d0
 8003724:	4620      	mov	r0, r4
 8003726:	4629      	mov	r1, r5
 8003728:	f7fc ff6e 	bl	8000608 <__aeabi_dmul>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4610      	mov	r0, r2
 8003732:	4619      	mov	r1, r3
 8003734:	f7fd fa60 	bl	8000bf8 <__aeabi_d2f>
 8003738:	4603      	mov	r3, r0
 800373a:	617b      	str	r3, [r7, #20]
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[4] - 1.0) )); // FT[Yg] factory trim calculation
 800373c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003740:	f640 223c 	movw	r2, #2620	@ 0xa3c
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	ee07 3a90 	vmov	s15, r3
 800374c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003750:	ee17 0a90 	vmov	r0, s15
 8003754:	f7fc ff00 	bl	8000558 <__aeabi_f2d>
 8003758:	4604      	mov	r4, r0
 800375a:	460d      	mov	r5, r1
 800375c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8003760:	ee07 3a90 	vmov	s15, r3
 8003764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003768:	ee17 0a90 	vmov	r0, s15
 800376c:	f7fc fef4 	bl	8000558 <__aeabi_f2d>
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	4b15      	ldr	r3, [pc, #84]	@ (80037cc <MPU6050SelfTest+0x704>)
 8003776:	f7fc fd8f 	bl	8000298 <__aeabi_dsub>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	ec43 2b17 	vmov	d7, r2, r3
 8003782:	eeb0 1a47 	vmov.f32	s2, s14
 8003786:	eef0 1a67 	vmov.f32	s3, s15
 800378a:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 80037c0 <MPU6050SelfTest+0x6f8>
 800378e:	f00f f85f 	bl	8012850 <pow>
 8003792:	ec53 2b10 	vmov	r2, r3, d0
 8003796:	4620      	mov	r0, r4
 8003798:	4629      	mov	r1, r5
 800379a:	f7fc ff35 	bl	8000608 <__aeabi_dmul>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4610      	mov	r0, r2
 80037a4:	4619      	mov	r1, r3
 80037a6:	f7fd fa27 	bl	8000bf8 <__aeabi_d2f>
 80037aa:	4603      	mov	r3, r0
 80037ac:	61bb      	str	r3, [r7, #24]
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[5] - 1.0) )); // FT[Zg] factory trim calculation
 80037ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80037b2:	f640 223c 	movw	r2, #2620	@ 0xa3c
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	e009      	b.n	80037d0 <MPU6050SelfTest+0x708>
 80037bc:	f3af 8000 	nop.w
 80037c0:	c28f5c29 	.word	0xc28f5c29
 80037c4:	3ff028f5 	.word	0x3ff028f5
 80037c8:	51eb851f 	.word	0x51eb851f
 80037cc:	3ff00000 	.word	0x3ff00000
 80037d0:	ee07 3a90 	vmov	s15, r3
 80037d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d8:	ee17 0a90 	vmov	r0, s15
 80037dc:	f7fc febc 	bl	8000558 <__aeabi_f2d>
 80037e0:	4604      	mov	r4, r0
 80037e2:	460d      	mov	r5, r1
 80037e4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f0:	ee17 0a90 	vmov	r0, s15
 80037f4:	f7fc feb0 	bl	8000558 <__aeabi_f2d>
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	4ba4      	ldr	r3, [pc, #656]	@ (8003a90 <MPU6050SelfTest+0x9c8>)
 80037fe:	f7fc fd4b 	bl	8000298 <__aeabi_dsub>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	ec43 2b17 	vmov	d7, r2, r3
 800380a:	eeb0 1a47 	vmov.f32	s2, s14
 800380e:	eef0 1a67 	vmov.f32	s3, s15
 8003812:	ed9f 0b9d 	vldr	d0, [pc, #628]	@ 8003a88 <MPU6050SelfTest+0x9c0>
 8003816:	f00f f81b 	bl	8012850 <pow>
 800381a:	ec53 2b10 	vmov	r2, r3, d0
 800381e:	4620      	mov	r0, r4
 8003820:	4629      	mov	r1, r5
 8003822:	f7fc fef1 	bl	8000608 <__aeabi_dmul>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4610      	mov	r0, r2
 800382c:	4619      	mov	r1, r3
 800382e:	f7fd f9e3 	bl	8000bf8 <__aeabi_d2f>
 8003832:	4603      	mov	r3, r0
 8003834:	61fb      	str	r3, [r7, #28]

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8003836:	2300      	movs	r3, #0
 8003838:	667b      	str	r3, [r7, #100]	@ 0x64
 800383a:	e088      	b.n	800394e <MPU6050SelfTest+0x886>
		destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 800383c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	3378      	adds	r3, #120	@ 0x78
 8003842:	443b      	add	r3, r7
 8003844:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8003848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	3378      	adds	r3, #120	@ 0x78
 800384e:	443b      	add	r3, r7
 8003850:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800385e:	ee17 0a90 	vmov	r0, s15
 8003862:	f7fc fe79 	bl	8000558 <__aeabi_f2d>
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	4b8a      	ldr	r3, [pc, #552]	@ (8003a94 <MPU6050SelfTest+0x9cc>)
 800386c:	f7fc fecc 	bl	8000608 <__aeabi_dmul>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4614      	mov	r4, r2
 8003876:	461d      	mov	r5, r3
 8003878:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	3378      	adds	r3, #120	@ 0x78
 800387e:	443b      	add	r3, r7
 8003880:	3b70      	subs	r3, #112	@ 0x70
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7fc fe67 	bl	8000558 <__aeabi_f2d>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4620      	mov	r0, r4
 8003890:	4629      	mov	r1, r5
 8003892:	f7fc ffe3 	bl	800085c <__aeabi_ddiv>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003a94 <MPU6050SelfTest+0x9cc>)
 80038a4:	f7fc fcf8 	bl	8000298 <__aeabi_dsub>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4610      	mov	r0, r2
 80038ae:	4619      	mov	r1, r3
 80038b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	18d4      	adds	r4, r2, r3
 80038b8:	f7fd f99e 	bl	8000bf8 <__aeabi_d2f>
 80038bc:	4603      	mov	r3, r0
 80038be:	6023      	str	r3, [r4, #0]
		destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 80038c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	3378      	adds	r3, #120	@ 0x78
 80038c6:	443b      	add	r3, r7
 80038c8:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80038cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	3378      	adds	r3, #120	@ 0x78
 80038d2:	443b      	add	r3, r7
 80038d4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038e2:	ee17 0a90 	vmov	r0, s15
 80038e6:	f7fc fe37 	bl	8000558 <__aeabi_f2d>
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	4b69      	ldr	r3, [pc, #420]	@ (8003a94 <MPU6050SelfTest+0x9cc>)
 80038f0:	f7fc fe8a 	bl	8000608 <__aeabi_dmul>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4614      	mov	r4, r2
 80038fa:	461d      	mov	r5, r3
 80038fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038fe:	3303      	adds	r3, #3
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	3378      	adds	r3, #120	@ 0x78
 8003904:	443b      	add	r3, r7
 8003906:	3b70      	subs	r3, #112	@ 0x70
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fc fe24 	bl	8000558 <__aeabi_f2d>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4620      	mov	r0, r4
 8003916:	4629      	mov	r1, r5
 8003918:	f7fc ffa0 	bl	800085c <__aeabi_ddiv>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	4b5a      	ldr	r3, [pc, #360]	@ (8003a94 <MPU6050SelfTest+0x9cc>)
 800392a:	f7fc fcb5 	bl	8000298 <__aeabi_dsub>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003938:	3303      	adds	r3, #3
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	18d4      	adds	r4, r2, r3
 8003940:	f7fd f95a 	bl	8000bf8 <__aeabi_d2f>
 8003944:	4603      	mov	r3, r0
 8003946:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++) {
 8003948:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800394a:	3301      	adds	r3, #1
 800394c:	667b      	str	r3, [r7, #100]	@ 0x64
 800394e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003950:	2b02      	cmp	r3, #2
 8003952:	f77f af73 	ble.w	800383c <MPU6050SelfTest+0x774>
	}

   for (int i = 0; i < 3; i++) {
 8003956:	2300      	movs	r3, #0
 8003958:	663b      	str	r3, [r7, #96]	@ 0x60
 800395a:	e089      	b.n	8003a70 <MPU6050SelfTest+0x9a8>
     destination[i+3]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 800395c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	3378      	adds	r3, #120	@ 0x78
 8003962:	443b      	add	r3, r7
 8003964:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8003968:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	3378      	adds	r3, #120	@ 0x78
 800396e:	443b      	add	r3, r7
 8003970:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800397e:	ee17 0a90 	vmov	r0, s15
 8003982:	f7fc fde9 	bl	8000558 <__aeabi_f2d>
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	4b42      	ldr	r3, [pc, #264]	@ (8003a94 <MPU6050SelfTest+0x9cc>)
 800398c:	f7fc fe3c 	bl	8000608 <__aeabi_dmul>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4614      	mov	r4, r2
 8003996:	461d      	mov	r5, r3
 8003998:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	3378      	adds	r3, #120	@ 0x78
 800399e:	443b      	add	r3, r7
 80039a0:	3b70      	subs	r3, #112	@ 0x70
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fc fdd7 	bl	8000558 <__aeabi_f2d>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4620      	mov	r0, r4
 80039b0:	4629      	mov	r1, r5
 80039b2:	f7fc ff53 	bl	800085c <__aeabi_ddiv>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4610      	mov	r0, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	4b34      	ldr	r3, [pc, #208]	@ (8003a94 <MPU6050SelfTest+0x9cc>)
 80039c4:	f7fc fc68 	bl	8000298 <__aeabi_dsub>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039d2:	3303      	adds	r3, #3
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	18d4      	adds	r4, r2, r3
 80039da:	f7fd f90d 	bl	8000bf8 <__aeabi_d2f>
 80039de:	4603      	mov	r3, r0
 80039e0:	6023      	str	r3, [r4, #0]
     destination[i+6] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 80039e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	3378      	adds	r3, #120	@ 0x78
 80039e8:	443b      	add	r3, r7
 80039ea:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80039ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	3378      	adds	r3, #120	@ 0x78
 80039f4:	443b      	add	r3, r7
 80039f6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a04:	ee17 0a90 	vmov	r0, s15
 8003a08:	f7fc fda6 	bl	8000558 <__aeabi_f2d>
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	4b20      	ldr	r3, [pc, #128]	@ (8003a94 <MPU6050SelfTest+0x9cc>)
 8003a12:	f7fc fdf9 	bl	8000608 <__aeabi_dmul>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4614      	mov	r4, r2
 8003a1c:	461d      	mov	r5, r3
 8003a1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a20:	3303      	adds	r3, #3
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	3378      	adds	r3, #120	@ 0x78
 8003a26:	443b      	add	r3, r7
 8003a28:	3b70      	subs	r3, #112	@ 0x70
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fc fd93 	bl	8000558 <__aeabi_f2d>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4620      	mov	r0, r4
 8003a38:	4629      	mov	r1, r5
 8003a3a:	f7fc ff0f 	bl	800085c <__aeabi_ddiv>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4610      	mov	r0, r2
 8003a44:	4619      	mov	r1, r3
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	4b12      	ldr	r3, [pc, #72]	@ (8003a94 <MPU6050SelfTest+0x9cc>)
 8003a4c:	f7fc fc24 	bl	8000298 <__aeabi_dsub>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4610      	mov	r0, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a5a:	3306      	adds	r3, #6
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	18d4      	adds	r4, r2, r3
 8003a62:	f7fd f8c9 	bl	8000bf8 <__aeabi_d2f>
 8003a66:	4603      	mov	r3, r0
 8003a68:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8003a6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	f77f af72 	ble.w	800395c <MPU6050SelfTest+0x894>
   }
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	3778      	adds	r7, #120	@ 0x78
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bdb0      	pop	{r4, r5, r7, pc}
 8003a82:	bf00      	nop
 8003a84:	f3af 8000 	nop.w
 8003a88:	c28f5c29 	.word	0xc28f5c29
 8003a8c:	3ff028f5 	.word	0x3ff028f5
 8003a90:	3ff00000 	.word	0x3ff00000
 8003a94:	40590000 	.word	0x40590000

08003a98 <quaternionInit>:
#include "quaternion.h"

float a12, a22, a31, a32, a33;

void quaternionInit(Quaternion_t *DataStruct, float sampleTimeMicros)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	ed87 0a00 	vstr	s0, [r7]
	DataStruct->GyroMeasError = M_PI * (40.0f / 180.0f);		// gyroscope measurement error in rads/s (start at 60 deg/s), then reduce after ~10 s to 3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a26      	ldr	r2, [pc, #152]	@ (8003b40 <quaternionInit+0xa8>)
 8003aa8:	601a      	str	r2, [r3, #0]
	DataStruct->beta = sqrt(3.0f / 4.0f) * DataStruct->GyroMeasError;		// compute beta
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fc fd52 	bl	8000558 <__aeabi_f2d>
 8003ab4:	a320      	add	r3, pc, #128	@ (adr r3, 8003b38 <quaternionInit+0xa0>)
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	f7fc fda5 	bl	8000608 <__aeabi_dmul>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f7fd f897 	bl	8000bf8 <__aeabi_d2f>
 8003aca:	4602      	mov	r2, r0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	605a      	str	r2, [r3, #4]
	DataStruct->GyroMeasDrift = M_PI * (2.0f / 180.0f);		// gyroscope measurement drift in rad/s/s (start at 0.0 deg/s/s)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b44 <quaternionInit+0xac>)
 8003ad4:	609a      	str	r2, [r3, #8]
	DataStruct->zeta = sqrt(3.0f / 4.0f) * DataStruct->GyroMeasDrift;		// compute zeta, the other free parameter in the Madgwick scheme usually set to a small or zero value
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fc fd3c 	bl	8000558 <__aeabi_f2d>
 8003ae0:	a315      	add	r3, pc, #84	@ (adr r3, 8003b38 <quaternionInit+0xa0>)
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	f7fc fd8f 	bl	8000608 <__aeabi_dmul>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	f7fd f881 	bl	8000bf8 <__aeabi_d2f>
 8003af6:	4602      	mov	r2, r0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	60da      	str	r2, [r3, #12]

	DataStruct->deltat = sampleTimeMicros / 1000000.0f;
 8003afc:	ed97 7a00 	vldr	s14, [r7]
 8003b00:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8003b48 <quaternionInit+0xb0>
 8003b04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	edc3 7a04 	vstr	s15, [r3, #16]

	DataStruct->q[0] = 1.0f;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003b14:	621a      	str	r2, [r3, #32]
	DataStruct->q[1] = 0.0f;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	625a      	str	r2, [r3, #36]	@ 0x24
	DataStruct->q[2] = 0.0f;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	629a      	str	r2, [r3, #40]	@ 0x28
	DataStruct->q[3] = 0.0f;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	e8584caa 	.word	0xe8584caa
 8003b3c:	3febb67a 	.word	0x3febb67a
 8003b40:	3f32b8c2 	.word	0x3f32b8c2
 8003b44:	3d0efa35 	.word	0x3d0efa35
 8003b48:	49742400 	.word	0x49742400

08003b4c <quaternionUpdate>:

void quaternionUpdate(Quaternion_t *DataStruct, float ax, float ay, float az, float gyrox, float gyroy, float gyroz)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b0a6      	sub	sp, #152	@ 0x98
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	61f8      	str	r0, [r7, #28]
 8003b54:	ed87 0a06 	vstr	s0, [r7, #24]
 8003b58:	edc7 0a05 	vstr	s1, [r7, #20]
 8003b5c:	ed87 1a04 	vstr	s2, [r7, #16]
 8003b60:	edc7 1a03 	vstr	s3, [r7, #12]
 8003b64:	ed87 2a02 	vstr	s4, [r7, #8]
 8003b68:	edc7 2a01 	vstr	s5, [r7, #4]
    float q1 = DataStruct->q[0], q2 = DataStruct->q[1], q3 = DataStruct->q[2], q4 = DataStruct->q[3];         // short name local variable for readability
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; // objective function Jacobian elements
    float qDot1, qDot2, qDot3, qDot4;
    float hatDot1, hatDot2, hatDot3, hatDot4;

    // Auxiliary variables to avoid repeated arithmetic
    float _halfq1 = 0.5f * q1;
 8003b8c:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003b90:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b98:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
    float _halfq2 = 0.5f * q2;
 8003b9c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003ba0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ba8:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
    float _halfq3 = 0.5f * q3;
 8003bac:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003bb0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bb8:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    float _halfq4 = 0.5f * q4;
 8003bbc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003bc0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bc8:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    float _2q1 = 2.0f * q1;
 8003bcc:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003bd0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bd4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float _2q2 = 2.0f * q2;
 8003bd8:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003bdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003be0:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    float _2q3 = 2.0f * q3;
 8003be4:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003be8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bec:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    float _2q4 = 2.0f * q4;
 8003bf0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003bf4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bf8:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

    // Normalise accelerometer measurement
    norm = sqrt(ax * ax + ay * ay + az * az);
 8003bfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c00:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003c04:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c10:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c1c:	ee17 0a90 	vmov	r0, s15
 8003c20:	f7fc fc9a 	bl	8000558 <__aeabi_f2d>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	ec43 2b10 	vmov	d0, r2, r3
 8003c2c:	f00e fe80 	bl	8012930 <sqrt>
 8003c30:	ec53 2b10 	vmov	r2, r3, d0
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	f7fc ffde 	bl	8000bf8 <__aeabi_d2f>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (norm == 0.0f) return; // handle NaN
 8003c40:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003c44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4c:	f000 821e 	beq.w	800408c <quaternionUpdate+0x540>
    norm = 1.0f/norm;
 8003c50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c54:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8003c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c5c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    ax *= norm;
 8003c60:	ed97 7a06 	vldr	s14, [r7, #24]
 8003c64:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6c:	edc7 7a06 	vstr	s15, [r7, #24]
    ay *= norm;
 8003c70:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c74:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7c:	edc7 7a05 	vstr	s15, [r7, #20]
    az *= norm;
 8003c80:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c84:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8c:	edc7 7a04 	vstr	s15, [r7, #16]

    // Compute the objective function and Jacobian
    f1 = _2q2 * q4 - _2q1 * q3 - ax;
 8003c90:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8003c94:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c9c:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8003ca0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ca8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cb4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    f2 = _2q1 * q2 + _2q3 * q4 - ay;
 8003cb8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8003cbc:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003cc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cc4:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8003cc8:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cdc:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    f3 = 1.0f - _2q2 * q2 - _2q3 * q3 - az;
 8003ce0:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8003ce4:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cf0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cf4:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8003cf8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d04:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d0c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    J_11or24 = _2q3;
 8003d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d12:	657b      	str	r3, [r7, #84]	@ 0x54
    J_12or23 = _2q4;
 8003d14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d16:	653b      	str	r3, [r7, #80]	@ 0x50
    J_13or22 = _2q1;
 8003d18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    J_14or21 = _2q2;
 8003d1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
    J_32 = 2.0f * J_14or21;
 8003d20:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003d24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003d28:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    J_33 = 2.0f * J_11or24;
 8003d2c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003d30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003d34:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // Compute the gradient (matrix multiplication)
    hatDot1 = J_14or21 * f2 - J_11or24 * f1;
 8003d38:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003d3c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d44:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8003d48:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d54:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    hatDot2 = J_12or23 * f1 + J_13or22 * f2 - J_32 * f3;
 8003d58:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003d5c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d64:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8003d68:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d74:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8003d78:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d84:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    hatDot3 = J_12or23 * f2 - J_33 *f3 - J_13or22 * f1;
 8003d88:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003d8c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d94:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8003d98:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003da0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003da4:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8003da8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003db4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    hatDot4 = J_14or21 * f1 + J_11or24 * f2;
 8003db8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003dbc:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dc4:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8003dc8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dd4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Normalize the gradient
    norm = sqrt(hatDot1 * hatDot1 + hatDot2 * hatDot2 + hatDot3 * hatDot3 + hatDot4 * hatDot4);
 8003dd8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003ddc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003de0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003de4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dec:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003df0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003df4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003df8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003dfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e04:	ee17 0a90 	vmov	r0, s15
 8003e08:	f7fc fba6 	bl	8000558 <__aeabi_f2d>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	ec43 2b10 	vmov	d0, r2, r3
 8003e14:	f00e fd8c 	bl	8012930 <sqrt>
 8003e18:	ec53 2b10 	vmov	r2, r3, d0
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4619      	mov	r1, r3
 8003e20:	f7fc feea 	bl	8000bf8 <__aeabi_d2f>
 8003e24:	4603      	mov	r3, r0
 8003e26:	667b      	str	r3, [r7, #100]	@ 0x64
    hatDot1 /= norm;
 8003e28:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8003e2c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8003e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e34:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    hatDot2 /= norm;
 8003e38:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8003e3c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8003e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e44:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    hatDot3 /= norm;
 8003e48:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8003e4c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8003e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e54:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    hatDot4 /= norm;
 8003e58:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8003e5c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8003e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e64:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Compute the quaternion derivative
    qDot1 = -_halfq2 * gyrox - _halfq3 * gyroy - _halfq4 * gyroz;
 8003e68:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003e6c:	eeb1 7a67 	vneg.f32	s14, s15
 8003e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e78:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8003e7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e88:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8003e8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e98:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    qDot2 =  _halfq1 * gyrox + _halfq3 * gyroz - _halfq4 * gyroy;
 8003e9c:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8003ea0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ea8:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8003eac:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003eb8:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8003ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ec8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    qDot3 =  _halfq1 * gyroy - _halfq2 * gyroz + _halfq4 * gyrox;
 8003ecc:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8003ed0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ed8:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8003edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ee4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ee8:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8003eec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    qDot4 =  _halfq1 * gyroz + _halfq2 * gyroy - _halfq3 * gyrox;
 8003efc:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8003f00:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f08:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8003f0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f18:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8003f1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f28:	edc7 7a08 	vstr	s15, [r7, #32]

    // Compute then integrate estimated quaternion derivative
    q1 += (qDot1 -(DataStruct->beta * hatDot1)) * DataStruct->deltat;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f32:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003f3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4c:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f54:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    q2 += (qDot2 -(DataStruct->beta * hatDot2)) * DataStruct->deltat;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f5e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f66:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003f6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f78:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f80:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    q3 += (qDot3 -(DataStruct->beta * hatDot3)) * DataStruct->deltat;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f8a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f92:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003f96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa4:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fac:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    q4 += (qDot4 -(DataStruct->beta * hatDot4)) * DataStruct->deltat;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fb6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fbe:	ed97 7a08 	vldr	s14, [r7, #32]
 8003fc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd0:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fd8:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    // Normalize the quaternion
    norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8003fdc:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003fe0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003fe4:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003fe8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003fec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ff0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003ff4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003ff8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ffc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8004000:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004008:	ee17 0a90 	vmov	r0, s15
 800400c:	f7fc faa4 	bl	8000558 <__aeabi_f2d>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	ec43 2b10 	vmov	d0, r2, r3
 8004018:	f00e fc8a 	bl	8012930 <sqrt>
 800401c:	ec53 2b10 	vmov	r2, r3, d0
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	f7fc fde8 	bl	8000bf8 <__aeabi_d2f>
 8004028:	4603      	mov	r3, r0
 800402a:	667b      	str	r3, [r7, #100]	@ 0x64
    norm = 1.0f/norm;
 800402c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004030:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8004034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004038:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    DataStruct->q[0] = q1 * norm;
 800403c:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004040:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	edc3 7a08 	vstr	s15, [r3, #32]
    DataStruct->q[1] = q2 * norm;
 800404e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8004052:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    DataStruct->q[2] = q3 * norm;
 8004060:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8004064:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    DataStruct->q[3] = q4 * norm;
 8004072:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8004076:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800407a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    quaternionEulerUpdate(DataStruct);
 8004084:	69f8      	ldr	r0, [r7, #28]
 8004086:	f000 f807 	bl	8004098 <quaternionEulerUpdate>
 800408a:	e000      	b.n	800408e <quaternionUpdate+0x542>
    if (norm == 0.0f) return; // handle NaN
 800408c:	bf00      	nop
}
 800408e:	3798      	adds	r7, #152	@ 0x98
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	0000      	movs	r0, r0
	...

08004098 <quaternionEulerUpdate>:

void quaternionEulerUpdate(Quaternion_t *DataStruct)
{
 8004098:	b5b0      	push	{r4, r5, r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
	DataStruct->yaw   = atan2(2.0f * (DataStruct->q[1] * DataStruct->q[2] + DataStruct->q[0] * DataStruct->q[3]),
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80040ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	edd3 6a08 	vldr	s13, [r3, #32]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80040bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040c8:	ee17 0a90 	vmov	r0, s15
 80040cc:	f7fc fa44 	bl	8000558 <__aeabi_f2d>
 80040d0:	4604      	mov	r4, r0
 80040d2:	460d      	mov	r5, r1
			DataStruct->q[0] * DataStruct->q[0] + DataStruct->q[1] * DataStruct->q[1] - DataStruct->q[2] * DataStruct->q[2] - DataStruct->q[3] * DataStruct->q[3]);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	ed93 7a08 	vldr	s14, [r3, #32]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80040e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80040f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004108:	ee37 7a67 	vsub.f32	s14, s14, s15
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800411c:	ee77 7a67 	vsub.f32	s15, s14, s15
	DataStruct->yaw   = atan2(2.0f * (DataStruct->q[1] * DataStruct->q[2] + DataStruct->q[0] * DataStruct->q[3]),
 8004120:	ee17 0a90 	vmov	r0, s15
 8004124:	f7fc fa18 	bl	8000558 <__aeabi_f2d>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	ec43 2b11 	vmov	d1, r2, r3
 8004130:	ec45 4b10 	vmov	d0, r4, r5
 8004134:	f00e fb8a 	bl	801284c <atan2>
 8004138:	ec53 2b10 	vmov	r2, r3, d0
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	f7fc fd5a 	bl	8000bf8 <__aeabi_d2f>
 8004144:	4602      	mov	r2, r0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	619a      	str	r2, [r3, #24]
	DataStruct->pitch = -asin(2.0f * (DataStruct->q[1] * DataStruct->q[3] - DataStruct->q[0] * DataStruct->q[2]));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004156:	ee27 7a27 	vmul.f32	s14, s14, s15
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	edd3 6a08 	vldr	s13, [r3, #32]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800416a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800416e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004172:	ee17 0a90 	vmov	r0, s15
 8004176:	f7fc f9ef 	bl	8000558 <__aeabi_f2d>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	ec43 2b10 	vmov	d0, r2, r3
 8004182:	f00e fb2f 	bl	80127e4 <asin>
 8004186:	ec53 2b10 	vmov	r2, r3, d0
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	f7fc fd33 	bl	8000bf8 <__aeabi_d2f>
 8004192:	4603      	mov	r3, r0
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eef1 7a67 	vneg.f32	s15, s15
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	edc3 7a05 	vstr	s15, [r3, #20]
	DataStruct->roll  = atan2(2.0f * (DataStruct->q[0] * DataStruct->q[1] + DataStruct->q[2] * DataStruct->q[3]),
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80041ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80041be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041ca:	ee17 0a90 	vmov	r0, s15
 80041ce:	f7fc f9c3 	bl	8000558 <__aeabi_f2d>
 80041d2:	4604      	mov	r4, r0
 80041d4:	460d      	mov	r5, r1
			DataStruct->q[0] * DataStruct->q[0] - DataStruct->q[1] * DataStruct->q[1] - DataStruct->q[2] * DataStruct->q[2] + DataStruct->q[3] * DataStruct->q[3]);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	ed93 7a08 	vldr	s14, [r3, #32]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	edd3 7a08 	vldr	s15, [r3, #32]
 80041e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80041f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800420a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800421a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800421e:	ee77 7a27 	vadd.f32	s15, s14, s15
	DataStruct->roll  = atan2(2.0f * (DataStruct->q[0] * DataStruct->q[1] + DataStruct->q[2] * DataStruct->q[3]),
 8004222:	ee17 0a90 	vmov	r0, s15
 8004226:	f7fc f997 	bl	8000558 <__aeabi_f2d>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	ec43 2b11 	vmov	d1, r2, r3
 8004232:	ec45 4b10 	vmov	d0, r4, r5
 8004236:	f00e fb09 	bl	801284c <atan2>
 800423a:	ec53 2b10 	vmov	r2, r3, d0
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	f7fc fcd9 	bl	8000bf8 <__aeabi_d2f>
 8004246:	4602      	mov	r2, r0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	61da      	str	r2, [r3, #28]
	DataStruct->pitch *= 180.0f / M_PI;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	4618      	mov	r0, r3
 8004252:	f7fc f981 	bl	8000558 <__aeabi_f2d>
 8004256:	a31c      	add	r3, pc, #112	@ (adr r3, 80042c8 <quaternionEulerUpdate+0x230>)
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f7fc f9d4 	bl	8000608 <__aeabi_dmul>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4610      	mov	r0, r2
 8004266:	4619      	mov	r1, r3
 8004268:	f7fc fcc6 	bl	8000bf8 <__aeabi_d2f>
 800426c:	4602      	mov	r2, r0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	615a      	str	r2, [r3, #20]
	DataStruct->yaw   *= 180.0f / M_PI;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc f96e 	bl	8000558 <__aeabi_f2d>
 800427c:	a312      	add	r3, pc, #72	@ (adr r3, 80042c8 <quaternionEulerUpdate+0x230>)
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	f7fc f9c1 	bl	8000608 <__aeabi_dmul>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	f7fc fcb3 	bl	8000bf8 <__aeabi_d2f>
 8004292:	4602      	mov	r2, r0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	619a      	str	r2, [r3, #24]
	DataStruct->roll  *= 180.0f / M_PI;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	4618      	mov	r0, r3
 800429e:	f7fc f95b 	bl	8000558 <__aeabi_f2d>
 80042a2:	a309      	add	r3, pc, #36	@ (adr r3, 80042c8 <quaternionEulerUpdate+0x230>)
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	f7fc f9ae 	bl	8000608 <__aeabi_dmul>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4610      	mov	r0, r2
 80042b2:	4619      	mov	r1, r3
 80042b4:	f7fc fca0 	bl	8000bf8 <__aeabi_d2f>
 80042b8:	4602      	mov	r2, r0
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	61da      	str	r2, [r3, #28]
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bdb0      	pop	{r4, r5, r7, pc}
 80042c6:	bf00      	nop
 80042c8:	1a63c1f8 	.word	0x1a63c1f8
 80042cc:	404ca5dc 	.word	0x404ca5dc

080042d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]
 80042da:	4b10      	ldr	r3, [pc, #64]	@ (800431c <HAL_MspInit+0x4c>)
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	4a0f      	ldr	r2, [pc, #60]	@ (800431c <HAL_MspInit+0x4c>)
 80042e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <HAL_MspInit+0x4c>)
 80042e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ee:	607b      	str	r3, [r7, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	4b09      	ldr	r3, [pc, #36]	@ (800431c <HAL_MspInit+0x4c>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	4a08      	ldr	r2, [pc, #32]	@ (800431c <HAL_MspInit+0x4c>)
 80042fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004300:	6413      	str	r3, [r2, #64]	@ 0x40
 8004302:	4b06      	ldr	r3, [pc, #24]	@ (800431c <HAL_MspInit+0x4c>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800

08004320 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	@ 0x28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004328:	f107 0314 	add.w	r3, r7, #20
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a17      	ldr	r2, [pc, #92]	@ (800439c <HAL_ADC_MspInit+0x7c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d127      	bne.n	8004392 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	4b16      	ldr	r3, [pc, #88]	@ (80043a0 <HAL_ADC_MspInit+0x80>)
 8004348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434a:	4a15      	ldr	r2, [pc, #84]	@ (80043a0 <HAL_ADC_MspInit+0x80>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004350:	6453      	str	r3, [r2, #68]	@ 0x44
 8004352:	4b13      	ldr	r3, [pc, #76]	@ (80043a0 <HAL_ADC_MspInit+0x80>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	4b0f      	ldr	r3, [pc, #60]	@ (80043a0 <HAL_ADC_MspInit+0x80>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	4a0e      	ldr	r2, [pc, #56]	@ (80043a0 <HAL_ADC_MspInit+0x80>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6313      	str	r3, [r2, #48]	@ 0x30
 800436e:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <HAL_ADC_MspInit+0x80>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800437a:	2330      	movs	r3, #48	@ 0x30
 800437c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800437e:	2303      	movs	r3, #3
 8004380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004386:	f107 0314 	add.w	r3, r7, #20
 800438a:	4619      	mov	r1, r3
 800438c:	4805      	ldr	r0, [pc, #20]	@ (80043a4 <HAL_ADC_MspInit+0x84>)
 800438e:	f001 fb27 	bl	80059e0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004392:	bf00      	nop
 8004394:	3728      	adds	r7, #40	@ 0x28
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40012000 	.word	0x40012000
 80043a0:	40023800 	.word	0x40023800
 80043a4:	40020000 	.word	0x40020000

080043a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08c      	sub	sp, #48	@ 0x30
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b0:	f107 031c 	add.w	r3, r7, #28
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a4a      	ldr	r2, [pc, #296]	@ (80044f0 <HAL_I2C_MspInit+0x148>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d13d      	bne.n	8004446 <HAL_I2C_MspInit+0x9e>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	4b49      	ldr	r3, [pc, #292]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	4a48      	ldr	r2, [pc, #288]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 80043d4:	f043 0302 	orr.w	r3, r3, #2
 80043d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043da:	4b46      	ldr	r3, [pc, #280]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	61bb      	str	r3, [r7, #24]
 80043e4:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80043e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043ec:	2312      	movs	r3, #18
 80043ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f4:	2303      	movs	r3, #3
 80043f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80043f8:	2304      	movs	r3, #4
 80043fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043fc:	f107 031c 	add.w	r3, r7, #28
 8004400:	4619      	mov	r1, r3
 8004402:	483d      	ldr	r0, [pc, #244]	@ (80044f8 <HAL_I2C_MspInit+0x150>)
 8004404:	f001 faec 	bl	80059e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004408:	2308      	movs	r3, #8
 800440a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800440c:	2312      	movs	r3, #18
 800440e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004410:	2300      	movs	r3, #0
 8004412:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004414:	2303      	movs	r3, #3
 8004416:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004418:	2309      	movs	r3, #9
 800441a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800441c:	f107 031c 	add.w	r3, r7, #28
 8004420:	4619      	mov	r1, r3
 8004422:	4835      	ldr	r0, [pc, #212]	@ (80044f8 <HAL_I2C_MspInit+0x150>)
 8004424:	f001 fadc 	bl	80059e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	4b31      	ldr	r3, [pc, #196]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 800442e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004430:	4a30      	ldr	r2, [pc, #192]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 8004432:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004436:	6413      	str	r3, [r2, #64]	@ 0x40
 8004438:	4b2e      	ldr	r3, [pc, #184]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004444:	e04f      	b.n	80044e6 <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C3)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a2c      	ldr	r2, [pc, #176]	@ (80044fc <HAL_I2C_MspInit+0x154>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d14a      	bne.n	80044e6 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	4b27      	ldr	r3, [pc, #156]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 8004456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004458:	4a26      	ldr	r2, [pc, #152]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004460:	4b24      	ldr	r3, [pc, #144]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	4b20      	ldr	r3, [pc, #128]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004474:	4a1f      	ldr	r2, [pc, #124]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 8004476:	f043 0302 	orr.w	r3, r3, #2
 800447a:	6313      	str	r3, [r2, #48]	@ 0x30
 800447c:	4b1d      	ldr	r3, [pc, #116]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 800447e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004488:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800448c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800448e:	2312      	movs	r3, #18
 8004490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004492:	2300      	movs	r3, #0
 8004494:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004496:	2303      	movs	r3, #3
 8004498:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800449a:	2304      	movs	r3, #4
 800449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800449e:	f107 031c 	add.w	r3, r7, #28
 80044a2:	4619      	mov	r1, r3
 80044a4:	4816      	ldr	r0, [pc, #88]	@ (8004500 <HAL_I2C_MspInit+0x158>)
 80044a6:	f001 fa9b 	bl	80059e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80044aa:	2310      	movs	r3, #16
 80044ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044ae:	2312      	movs	r3, #18
 80044b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b6:	2303      	movs	r3, #3
 80044b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80044ba:	2309      	movs	r3, #9
 80044bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044be:	f107 031c 	add.w	r3, r7, #28
 80044c2:	4619      	mov	r1, r3
 80044c4:	480c      	ldr	r0, [pc, #48]	@ (80044f8 <HAL_I2C_MspInit+0x150>)
 80044c6:	f001 fa8b 	bl	80059e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	4b09      	ldr	r3, [pc, #36]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	4a08      	ldr	r2, [pc, #32]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 80044d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044da:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <HAL_I2C_MspInit+0x14c>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
}
 80044e6:	bf00      	nop
 80044e8:	3730      	adds	r7, #48	@ 0x30
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40005800 	.word	0x40005800
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40020400 	.word	0x40020400
 80044fc:	40005c00 	.word	0x40005c00
 8004500:	40020000 	.word	0x40020000

08004504 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08a      	sub	sp, #40	@ 0x28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800450c:	f107 0314 	add.w	r3, r7, #20
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a19      	ldr	r2, [pc, #100]	@ (8004588 <HAL_SPI_MspInit+0x84>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d12c      	bne.n	8004580 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	4b18      	ldr	r3, [pc, #96]	@ (800458c <HAL_SPI_MspInit+0x88>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	4a17      	ldr	r2, [pc, #92]	@ (800458c <HAL_SPI_MspInit+0x88>)
 8004530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004534:	6413      	str	r3, [r2, #64]	@ 0x40
 8004536:	4b15      	ldr	r3, [pc, #84]	@ (800458c <HAL_SPI_MspInit+0x88>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	4b11      	ldr	r3, [pc, #68]	@ (800458c <HAL_SPI_MspInit+0x88>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	4a10      	ldr	r2, [pc, #64]	@ (800458c <HAL_SPI_MspInit+0x88>)
 800454c:	f043 0302 	orr.w	r3, r3, #2
 8004550:	6313      	str	r3, [r2, #48]	@ 0x30
 8004552:	4b0e      	ldr	r3, [pc, #56]	@ (800458c <HAL_SPI_MspInit+0x88>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800455e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004564:	2302      	movs	r3, #2
 8004566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004568:	2300      	movs	r3, #0
 800456a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800456c:	2303      	movs	r3, #3
 800456e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004570:	2305      	movs	r3, #5
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004574:	f107 0314 	add.w	r3, r7, #20
 8004578:	4619      	mov	r1, r3
 800457a:	4805      	ldr	r0, [pc, #20]	@ (8004590 <HAL_SPI_MspInit+0x8c>)
 800457c:	f001 fa30 	bl	80059e0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004580:	bf00      	nop
 8004582:	3728      	adds	r7, #40	@ 0x28
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40003800 	.word	0x40003800
 800458c:	40023800 	.word	0x40023800
 8004590:	40020400 	.word	0x40020400

08004594 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a4:	d10e      	bne.n	80045c4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	4b27      	ldr	r3, [pc, #156]	@ (8004648 <HAL_TIM_Base_MspInit+0xb4>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	4a26      	ldr	r2, [pc, #152]	@ (8004648 <HAL_TIM_Base_MspInit+0xb4>)
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045b6:	4b24      	ldr	r3, [pc, #144]	@ (8004648 <HAL_TIM_Base_MspInit+0xb4>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 80045c2:	e03a      	b.n	800463a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a20      	ldr	r2, [pc, #128]	@ (800464c <HAL_TIM_Base_MspInit+0xb8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d10e      	bne.n	80045ec <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004648 <HAL_TIM_Base_MspInit+0xb4>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004648 <HAL_TIM_Base_MspInit+0xb4>)
 80045d8:	f043 0302 	orr.w	r3, r3, #2
 80045dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80045de:	4b1a      	ldr	r3, [pc, #104]	@ (8004648 <HAL_TIM_Base_MspInit+0xb4>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]
}
 80045ea:	e026      	b.n	800463a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a17      	ldr	r2, [pc, #92]	@ (8004650 <HAL_TIM_Base_MspInit+0xbc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10e      	bne.n	8004614 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	4b13      	ldr	r3, [pc, #76]	@ (8004648 <HAL_TIM_Base_MspInit+0xb4>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	4a12      	ldr	r2, [pc, #72]	@ (8004648 <HAL_TIM_Base_MspInit+0xb4>)
 8004600:	f043 0304 	orr.w	r3, r3, #4
 8004604:	6413      	str	r3, [r2, #64]	@ 0x40
 8004606:	4b10      	ldr	r3, [pc, #64]	@ (8004648 <HAL_TIM_Base_MspInit+0xb4>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
}
 8004612:	e012      	b.n	800463a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a0e      	ldr	r2, [pc, #56]	@ (8004654 <HAL_TIM_Base_MspInit+0xc0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d10d      	bne.n	800463a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <HAL_TIM_Base_MspInit+0xb4>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004626:	4a08      	ldr	r2, [pc, #32]	@ (8004648 <HAL_TIM_Base_MspInit+0xb4>)
 8004628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800462c:	6453      	str	r3, [r2, #68]	@ 0x44
 800462e:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <HAL_TIM_Base_MspInit+0xb4>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40023800 	.word	0x40023800
 800464c:	40000400 	.word	0x40000400
 8004650:	40000800 	.word	0x40000800
 8004654:	40014800 	.word	0x40014800

08004658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08c      	sub	sp, #48	@ 0x30
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004660:	f107 031c 	add.w	r3, r7, #28
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	60da      	str	r2, [r3, #12]
 800466e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004678:	d11e      	bne.n	80046b8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	4b43      	ldr	r3, [pc, #268]	@ (800478c <HAL_TIM_MspPostInit+0x134>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004682:	4a42      	ldr	r2, [pc, #264]	@ (800478c <HAL_TIM_MspPostInit+0x134>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	6313      	str	r3, [r2, #48]	@ 0x30
 800468a:	4b40      	ldr	r3, [pc, #256]	@ (800478c <HAL_TIM_MspPostInit+0x134>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004696:	230f      	movs	r3, #15
 8004698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469a:	2302      	movs	r3, #2
 800469c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a2:	2300      	movs	r3, #0
 80046a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046a6:	2301      	movs	r3, #1
 80046a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046aa:	f107 031c 	add.w	r3, r7, #28
 80046ae:	4619      	mov	r1, r3
 80046b0:	4837      	ldr	r0, [pc, #220]	@ (8004790 <HAL_TIM_MspPostInit+0x138>)
 80046b2:	f001 f995 	bl	80059e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80046b6:	e065      	b.n	8004784 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a35      	ldr	r2, [pc, #212]	@ (8004794 <HAL_TIM_MspPostInit+0x13c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d13c      	bne.n	800473c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	4b31      	ldr	r3, [pc, #196]	@ (800478c <HAL_TIM_MspPostInit+0x134>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	4a30      	ldr	r2, [pc, #192]	@ (800478c <HAL_TIM_MspPostInit+0x134>)
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046d2:	4b2e      	ldr	r3, [pc, #184]	@ (800478c <HAL_TIM_MspPostInit+0x134>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	4b2a      	ldr	r3, [pc, #168]	@ (800478c <HAL_TIM_MspPostInit+0x134>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e6:	4a29      	ldr	r2, [pc, #164]	@ (800478c <HAL_TIM_MspPostInit+0x134>)
 80046e8:	f043 0302 	orr.w	r3, r3, #2
 80046ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80046ee:	4b27      	ldr	r3, [pc, #156]	@ (800478c <HAL_TIM_MspPostInit+0x134>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046fa:	23c0      	movs	r3, #192	@ 0xc0
 80046fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fe:	2302      	movs	r3, #2
 8004700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004706:	2300      	movs	r3, #0
 8004708:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800470a:	2302      	movs	r3, #2
 800470c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470e:	f107 031c 	add.w	r3, r7, #28
 8004712:	4619      	mov	r1, r3
 8004714:	481e      	ldr	r0, [pc, #120]	@ (8004790 <HAL_TIM_MspPostInit+0x138>)
 8004716:	f001 f963 	bl	80059e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800471a:	2303      	movs	r3, #3
 800471c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471e:	2302      	movs	r3, #2
 8004720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004722:	2300      	movs	r3, #0
 8004724:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004726:	2300      	movs	r3, #0
 8004728:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800472a:	2302      	movs	r3, #2
 800472c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800472e:	f107 031c 	add.w	r3, r7, #28
 8004732:	4619      	mov	r1, r3
 8004734:	4818      	ldr	r0, [pc, #96]	@ (8004798 <HAL_TIM_MspPostInit+0x140>)
 8004736:	f001 f953 	bl	80059e0 <HAL_GPIO_Init>
}
 800473a:	e023      	b.n	8004784 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a16      	ldr	r2, [pc, #88]	@ (800479c <HAL_TIM_MspPostInit+0x144>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d11e      	bne.n	8004784 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	4b10      	ldr	r3, [pc, #64]	@ (800478c <HAL_TIM_MspPostInit+0x134>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	4a0f      	ldr	r2, [pc, #60]	@ (800478c <HAL_TIM_MspPostInit+0x134>)
 8004750:	f043 0302 	orr.w	r3, r3, #2
 8004754:	6313      	str	r3, [r2, #48]	@ 0x30
 8004756:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <HAL_TIM_MspPostInit+0x134>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004762:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004768:	2302      	movs	r3, #2
 800476a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476c:	2300      	movs	r3, #0
 800476e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004770:	2300      	movs	r3, #0
 8004772:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004774:	2302      	movs	r3, #2
 8004776:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004778:	f107 031c 	add.w	r3, r7, #28
 800477c:	4619      	mov	r1, r3
 800477e:	4806      	ldr	r0, [pc, #24]	@ (8004798 <HAL_TIM_MspPostInit+0x140>)
 8004780:	f001 f92e 	bl	80059e0 <HAL_GPIO_Init>
}
 8004784:	bf00      	nop
 8004786:	3730      	adds	r7, #48	@ 0x30
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40023800 	.word	0x40023800
 8004790:	40020000 	.word	0x40020000
 8004794:	40000400 	.word	0x40000400
 8004798:	40020400 	.word	0x40020400
 800479c:	40000800 	.word	0x40000800

080047a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	@ 0x28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a8:	f107 0314 	add.w	r3, r7, #20
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	60da      	str	r2, [r3, #12]
 80047b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a49      	ldr	r2, [pc, #292]	@ (80048e4 <HAL_UART_MspInit+0x144>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	f040 808b 	bne.w	80048da <HAL_UART_MspInit+0x13a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047c4:	2300      	movs	r3, #0
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	4b47      	ldr	r3, [pc, #284]	@ (80048e8 <HAL_UART_MspInit+0x148>)
 80047ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047cc:	4a46      	ldr	r2, [pc, #280]	@ (80048e8 <HAL_UART_MspInit+0x148>)
 80047ce:	f043 0310 	orr.w	r3, r3, #16
 80047d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80047d4:	4b44      	ldr	r3, [pc, #272]	@ (80048e8 <HAL_UART_MspInit+0x148>)
 80047d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	4b40      	ldr	r3, [pc, #256]	@ (80048e8 <HAL_UART_MspInit+0x148>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	4a3f      	ldr	r2, [pc, #252]	@ (80048e8 <HAL_UART_MspInit+0x148>)
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80047f0:	4b3d      	ldr	r3, [pc, #244]	@ (80048e8 <HAL_UART_MspInit+0x148>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80047fc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004802:	2302      	movs	r3, #2
 8004804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800480a:	2303      	movs	r3, #3
 800480c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800480e:	2307      	movs	r3, #7
 8004810:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004812:	f107 0314 	add.w	r3, r7, #20
 8004816:	4619      	mov	r1, r3
 8004818:	4834      	ldr	r0, [pc, #208]	@ (80048ec <HAL_UART_MspInit+0x14c>)
 800481a:	f001 f8e1 	bl	80059e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800481e:	4b34      	ldr	r3, [pc, #208]	@ (80048f0 <HAL_UART_MspInit+0x150>)
 8004820:	4a34      	ldr	r2, [pc, #208]	@ (80048f4 <HAL_UART_MspInit+0x154>)
 8004822:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004824:	4b32      	ldr	r3, [pc, #200]	@ (80048f0 <HAL_UART_MspInit+0x150>)
 8004826:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800482a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800482c:	4b30      	ldr	r3, [pc, #192]	@ (80048f0 <HAL_UART_MspInit+0x150>)
 800482e:	2200      	movs	r2, #0
 8004830:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004832:	4b2f      	ldr	r3, [pc, #188]	@ (80048f0 <HAL_UART_MspInit+0x150>)
 8004834:	2200      	movs	r2, #0
 8004836:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004838:	4b2d      	ldr	r3, [pc, #180]	@ (80048f0 <HAL_UART_MspInit+0x150>)
 800483a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800483e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004840:	4b2b      	ldr	r3, [pc, #172]	@ (80048f0 <HAL_UART_MspInit+0x150>)
 8004842:	2200      	movs	r2, #0
 8004844:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004846:	4b2a      	ldr	r3, [pc, #168]	@ (80048f0 <HAL_UART_MspInit+0x150>)
 8004848:	2200      	movs	r2, #0
 800484a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800484c:	4b28      	ldr	r3, [pc, #160]	@ (80048f0 <HAL_UART_MspInit+0x150>)
 800484e:	2200      	movs	r2, #0
 8004850:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004852:	4b27      	ldr	r3, [pc, #156]	@ (80048f0 <HAL_UART_MspInit+0x150>)
 8004854:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004858:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800485a:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <HAL_UART_MspInit+0x150>)
 800485c:	2200      	movs	r2, #0
 800485e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004860:	4823      	ldr	r0, [pc, #140]	@ (80048f0 <HAL_UART_MspInit+0x150>)
 8004862:	f000 fdd3 	bl	800540c <HAL_DMA_Init>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800486c:	f7fd fd7e 	bl	800236c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a1f      	ldr	r2, [pc, #124]	@ (80048f0 <HAL_UART_MspInit+0x150>)
 8004874:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004876:	4a1e      	ldr	r2, [pc, #120]	@ (80048f0 <HAL_UART_MspInit+0x150>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800487c:	4b1e      	ldr	r3, [pc, #120]	@ (80048f8 <HAL_UART_MspInit+0x158>)
 800487e:	4a1f      	ldr	r2, [pc, #124]	@ (80048fc <HAL_UART_MspInit+0x15c>)
 8004880:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004882:	4b1d      	ldr	r3, [pc, #116]	@ (80048f8 <HAL_UART_MspInit+0x158>)
 8004884:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004888:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800488a:	4b1b      	ldr	r3, [pc, #108]	@ (80048f8 <HAL_UART_MspInit+0x158>)
 800488c:	2240      	movs	r2, #64	@ 0x40
 800488e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004890:	4b19      	ldr	r3, [pc, #100]	@ (80048f8 <HAL_UART_MspInit+0x158>)
 8004892:	2200      	movs	r2, #0
 8004894:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004896:	4b18      	ldr	r3, [pc, #96]	@ (80048f8 <HAL_UART_MspInit+0x158>)
 8004898:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800489c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800489e:	4b16      	ldr	r3, [pc, #88]	@ (80048f8 <HAL_UART_MspInit+0x158>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048a4:	4b14      	ldr	r3, [pc, #80]	@ (80048f8 <HAL_UART_MspInit+0x158>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80048aa:	4b13      	ldr	r3, [pc, #76]	@ (80048f8 <HAL_UART_MspInit+0x158>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80048b0:	4b11      	ldr	r3, [pc, #68]	@ (80048f8 <HAL_UART_MspInit+0x158>)
 80048b2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80048b6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048b8:	4b0f      	ldr	r3, [pc, #60]	@ (80048f8 <HAL_UART_MspInit+0x158>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80048be:	480e      	ldr	r0, [pc, #56]	@ (80048f8 <HAL_UART_MspInit+0x158>)
 80048c0:	f000 fda4 	bl	800540c <HAL_DMA_Init>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80048ca:	f7fd fd4f 	bl	800236c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a09      	ldr	r2, [pc, #36]	@ (80048f8 <HAL_UART_MspInit+0x158>)
 80048d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80048d4:	4a08      	ldr	r2, [pc, #32]	@ (80048f8 <HAL_UART_MspInit+0x158>)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80048da:	bf00      	nop
 80048dc:	3728      	adds	r7, #40	@ 0x28
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40011000 	.word	0x40011000
 80048e8:	40023800 	.word	0x40023800
 80048ec:	40020000 	.word	0x40020000
 80048f0:	200006d8 	.word	0x200006d8
 80048f4:	40026440 	.word	0x40026440
 80048f8:	20000738 	.word	0x20000738
 80048fc:	400264b8 	.word	0x400264b8

08004900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08c      	sub	sp, #48	@ 0x30
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8004910:	2300      	movs	r3, #0
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	4b2e      	ldr	r3, [pc, #184]	@ (80049d0 <HAL_InitTick+0xd0>)
 8004916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004918:	4a2d      	ldr	r2, [pc, #180]	@ (80049d0 <HAL_InitTick+0xd0>)
 800491a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800491e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004920:	4b2b      	ldr	r3, [pc, #172]	@ (80049d0 <HAL_InitTick+0xd0>)
 8004922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800492c:	f107 020c 	add.w	r2, r7, #12
 8004930:	f107 0310 	add.w	r3, r7, #16
 8004934:	4611      	mov	r1, r2
 8004936:	4618      	mov	r0, r3
 8004938:	f004 f8be 	bl	8008ab8 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800493c:	f004 f8a8 	bl	8008a90 <HAL_RCC_GetPCLK2Freq>
 8004940:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004944:	4a23      	ldr	r2, [pc, #140]	@ (80049d4 <HAL_InitTick+0xd4>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	0c9b      	lsrs	r3, r3, #18
 800494c:	3b01      	subs	r3, #1
 800494e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8004950:	4b21      	ldr	r3, [pc, #132]	@ (80049d8 <HAL_InitTick+0xd8>)
 8004952:	4a22      	ldr	r2, [pc, #136]	@ (80049dc <HAL_InitTick+0xdc>)
 8004954:	601a      	str	r2, [r3, #0]
   * Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8004956:	4b20      	ldr	r3, [pc, #128]	@ (80049d8 <HAL_InitTick+0xd8>)
 8004958:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800495c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800495e:	4a1e      	ldr	r2, [pc, #120]	@ (80049d8 <HAL_InitTick+0xd8>)
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8004964:	4b1c      	ldr	r3, [pc, #112]	@ (80049d8 <HAL_InitTick+0xd8>)
 8004966:	2200      	movs	r2, #0
 8004968:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800496a:	4b1b      	ldr	r3, [pc, #108]	@ (80049d8 <HAL_InitTick+0xd8>)
 800496c:	2200      	movs	r2, #0
 800496e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004970:	4b19      	ldr	r3, [pc, #100]	@ (80049d8 <HAL_InitTick+0xd8>)
 8004972:	2200      	movs	r2, #0
 8004974:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8004976:	4818      	ldr	r0, [pc, #96]	@ (80049d8 <HAL_InitTick+0xd8>)
 8004978:	f004 f959 	bl	8008c2e <HAL_TIM_Base_Init>
 800497c:	4603      	mov	r3, r0
 800497e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8004982:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004986:	2b00      	cmp	r3, #0
 8004988:	d11b      	bne.n	80049c2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800498a:	4813      	ldr	r0, [pc, #76]	@ (80049d8 <HAL_InitTick+0xd8>)
 800498c:	f004 f9f8 	bl	8008d80 <HAL_TIM_Base_Start_IT>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8004996:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800499a:	2b00      	cmp	r3, #0
 800499c:	d111      	bne.n	80049c2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800499e:	2018      	movs	r0, #24
 80049a0:	f000 fd26 	bl	80053f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b0f      	cmp	r3, #15
 80049a8:	d808      	bhi.n	80049bc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80049aa:	2200      	movs	r2, #0
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	2018      	movs	r0, #24
 80049b0:	f000 fd02 	bl	80053b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049b4:	4a0a      	ldr	r2, [pc, #40]	@ (80049e0 <HAL_InitTick+0xe0>)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	e002      	b.n	80049c2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80049c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3730      	adds	r7, #48	@ 0x30
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800
 80049d4:	431bde83 	.word	0x431bde83
 80049d8:	2000087c 	.word	0x2000087c
 80049dc:	40014000 	.word	0x40014000
 80049e0:	2000000c 	.word	0x2000000c

080049e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049e8:	bf00      	nop
 80049ea:	e7fd      	b.n	80049e8 <NMI_Handler+0x4>

080049ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049f0:	bf00      	nop
 80049f2:	e7fd      	b.n	80049f0 <HardFault_Handler+0x4>

080049f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049f8:	bf00      	nop
 80049fa:	e7fd      	b.n	80049f8 <MemManage_Handler+0x4>

080049fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a00:	bf00      	nop
 8004a02:	e7fd      	b.n	8004a00 <BusFault_Handler+0x4>

08004a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <UsageFault_Handler+0x4>

08004a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a2c:	bf00      	nop
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a36:	b480      	push	{r7}
 8004a38:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a3a:	bf00      	nop
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004a48:	4802      	ldr	r0, [pc, #8]	@ (8004a54 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004a4a:	f004 fa54 	bl	8008ef6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000087c 	.word	0x2000087c

08004a58 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004a5c:	4802      	ldr	r0, [pc, #8]	@ (8004a68 <DMA2_Stream2_IRQHandler+0x10>)
 8004a5e:	f000 fd83 	bl	8005568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	200006d8 	.word	0x200006d8

08004a6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004a70:	4802      	ldr	r0, [pc, #8]	@ (8004a7c <OTG_FS_IRQHandler+0x10>)
 8004a72:	f002 fabb 	bl	8006fec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004a76:	bf00      	nop
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20001dac 	.word	0x20001dac

08004a80 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004a84:	4802      	ldr	r0, [pc, #8]	@ (8004a90 <DMA2_Stream7_IRQHandler+0x10>)
 8004a86:	f000 fd6f 	bl	8005568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000738 	.word	0x20000738

08004a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  return 1;
 8004a98:	2301      	movs	r3, #1
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <_kill>:

int _kill(int pid, int sig)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004aae:	f00a fb0d 	bl	800f0cc <__errno>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2216      	movs	r2, #22
 8004ab6:	601a      	str	r2, [r3, #0]
  return -1;
 8004ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <_exit>:

void _exit (int status)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004acc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff ffe7 	bl	8004aa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ad6:	bf00      	nop
 8004ad8:	e7fd      	b.n	8004ad6 <_exit+0x12>

08004ada <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	e00a      	b.n	8004b02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004aec:	f3af 8000 	nop.w
 8004af0:	4601      	mov	r1, r0
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	60ba      	str	r2, [r7, #8]
 8004af8:	b2ca      	uxtb	r2, r1
 8004afa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	3301      	adds	r3, #1
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	dbf0      	blt.n	8004aec <_read+0x12>
  }

  return len;
 8004b0a:	687b      	ldr	r3, [r7, #4]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b20:	2300      	movs	r3, #0
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	e009      	b.n	8004b3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	60ba      	str	r2, [r7, #8]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	3301      	adds	r3, #1
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	dbf1      	blt.n	8004b26 <_write+0x12>
  }
  return len;
 8004b42:	687b      	ldr	r3, [r7, #4]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <_close>:

int _close(int file)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b74:	605a      	str	r2, [r3, #4]
  return 0;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <_isatty>:

int _isatty(int file)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b8c:	2301      	movs	r3, #1
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bbc:	4a14      	ldr	r2, [pc, #80]	@ (8004c10 <_sbrk+0x5c>)
 8004bbe:	4b15      	ldr	r3, [pc, #84]	@ (8004c14 <_sbrk+0x60>)
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bc8:	4b13      	ldr	r3, [pc, #76]	@ (8004c18 <_sbrk+0x64>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bd0:	4b11      	ldr	r3, [pc, #68]	@ (8004c18 <_sbrk+0x64>)
 8004bd2:	4a12      	ldr	r2, [pc, #72]	@ (8004c1c <_sbrk+0x68>)
 8004bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bd6:	4b10      	ldr	r3, [pc, #64]	@ (8004c18 <_sbrk+0x64>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d207      	bcs.n	8004bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004be4:	f00a fa72 	bl	800f0cc <__errno>
 8004be8:	4603      	mov	r3, r0
 8004bea:	220c      	movs	r2, #12
 8004bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bee:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf2:	e009      	b.n	8004c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bf4:	4b08      	ldr	r3, [pc, #32]	@ (8004c18 <_sbrk+0x64>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bfa:	4b07      	ldr	r3, [pc, #28]	@ (8004c18 <_sbrk+0x64>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4413      	add	r3, r2
 8004c02:	4a05      	ldr	r2, [pc, #20]	@ (8004c18 <_sbrk+0x64>)
 8004c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c06:	68fb      	ldr	r3, [r7, #12]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20020000 	.word	0x20020000
 8004c14:	00000400 	.word	0x00000400
 8004c18:	200008c4 	.word	0x200008c4
 8004c1c:	20002600 	.word	0x20002600

08004c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c24:	4b06      	ldr	r3, [pc, #24]	@ (8004c40 <SystemInit+0x20>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2a:	4a05      	ldr	r2, [pc, #20]	@ (8004c40 <SystemInit+0x20>)
 8004c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c34:	bf00      	nop
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	e000ed00 	.word	0xe000ed00

08004c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004c7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c48:	f7ff ffea 	bl	8004c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c4c:	480c      	ldr	r0, [pc, #48]	@ (8004c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c4e:	490d      	ldr	r1, [pc, #52]	@ (8004c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c50:	4a0d      	ldr	r2, [pc, #52]	@ (8004c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c54:	e002      	b.n	8004c5c <LoopCopyDataInit>

08004c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c5a:	3304      	adds	r3, #4

08004c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c60:	d3f9      	bcc.n	8004c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c62:	4a0a      	ldr	r2, [pc, #40]	@ (8004c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c64:	4c0a      	ldr	r4, [pc, #40]	@ (8004c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c68:	e001      	b.n	8004c6e <LoopFillZerobss>

08004c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c6c:	3204      	adds	r2, #4

08004c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c70:	d3fb      	bcc.n	8004c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c72:	f00a fa31 	bl	800f0d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c76:	f7fc fcc7 	bl	8001608 <main>
  bx  lr    
 8004c7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c84:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8004c88:	08015448 	.word	0x08015448
  ldr r2, =_sbss
 8004c8c:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8004c90:	200025fc 	.word	0x200025fc

08004c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c94:	e7fe      	b.n	8004c94 <ADC_IRQHandler>
	...

08004c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004cd8 <HAL_Init+0x40>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8004cd8 <HAL_Init+0x40>)
 8004ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <HAL_Init+0x40>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd8 <HAL_Init+0x40>)
 8004cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cb4:	4b08      	ldr	r3, [pc, #32]	@ (8004cd8 <HAL_Init+0x40>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a07      	ldr	r2, [pc, #28]	@ (8004cd8 <HAL_Init+0x40>)
 8004cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cc0:	2003      	movs	r0, #3
 8004cc2:	f000 fb6e 	bl	80053a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cc6:	200f      	movs	r0, #15
 8004cc8:	f7ff fe1a 	bl	8004900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ccc:	f7ff fb00 	bl	80042d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023c00 	.word	0x40023c00

08004cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ce0:	4b06      	ldr	r3, [pc, #24]	@ (8004cfc <HAL_IncTick+0x20>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4b06      	ldr	r3, [pc, #24]	@ (8004d00 <HAL_IncTick+0x24>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4413      	add	r3, r2
 8004cec:	4a04      	ldr	r2, [pc, #16]	@ (8004d00 <HAL_IncTick+0x24>)
 8004cee:	6013      	str	r3, [r2, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000010 	.word	0x20000010
 8004d00:	200008c8 	.word	0x200008c8

08004d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  return uwTick;
 8004d08:	4b03      	ldr	r3, [pc, #12]	@ (8004d18 <HAL_GetTick+0x14>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	200008c8 	.word	0x200008c8

08004d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d24:	f7ff ffee 	bl	8004d04 <HAL_GetTick>
 8004d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d34:	d005      	beq.n	8004d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d36:	4b0a      	ldr	r3, [pc, #40]	@ (8004d60 <HAL_Delay+0x44>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d42:	bf00      	nop
 8004d44:	f7ff ffde 	bl	8004d04 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d8f7      	bhi.n	8004d44 <HAL_Delay+0x28>
  {
  }
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20000010 	.word	0x20000010

08004d64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e033      	b.n	8004de2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff facc 	bl	8004320 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	f003 0310 	and.w	r3, r3, #16
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d118      	bne.n	8004dd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004daa:	f023 0302 	bic.w	r3, r3, #2
 8004dae:	f043 0202 	orr.w	r2, r3, #2
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f94a 	bl	8005050 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	f043 0201 	orr.w	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004dd2:	e001      	b.n	8004dd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_ADC_ConfigChannel+0x1c>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e113      	b.n	8005030 <HAL_ADC_ConfigChannel+0x244>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b09      	cmp	r3, #9
 8004e16:	d925      	bls.n	8004e64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68d9      	ldr	r1, [r3, #12]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3b1e      	subs	r3, #30
 8004e2e:	2207      	movs	r2, #7
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43da      	mvns	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	400a      	ands	r2, r1
 8004e3c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68d9      	ldr	r1, [r3, #12]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	4618      	mov	r0, r3
 8004e50:	4603      	mov	r3, r0
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4403      	add	r3, r0
 8004e56:	3b1e      	subs	r3, #30
 8004e58:	409a      	lsls	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	e022      	b.n	8004eaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6919      	ldr	r1, [r3, #16]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	4613      	mov	r3, r2
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	4413      	add	r3, r2
 8004e78:	2207      	movs	r2, #7
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43da      	mvns	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	400a      	ands	r2, r1
 8004e86:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6919      	ldr	r1, [r3, #16]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	4618      	mov	r0, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	4403      	add	r3, r0
 8004ea0:	409a      	lsls	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b06      	cmp	r3, #6
 8004eb0:	d824      	bhi.n	8004efc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3b05      	subs	r3, #5
 8004ec4:	221f      	movs	r2, #31
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43da      	mvns	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	3b05      	subs	r3, #5
 8004eee:	fa00 f203 	lsl.w	r2, r0, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004efa:	e04c      	b.n	8004f96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b0c      	cmp	r3, #12
 8004f02:	d824      	bhi.n	8004f4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	3b23      	subs	r3, #35	@ 0x23
 8004f16:	221f      	movs	r2, #31
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	43da      	mvns	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	400a      	ands	r2, r1
 8004f24:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	4618      	mov	r0, r3
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	3b23      	subs	r3, #35	@ 0x23
 8004f40:	fa00 f203 	lsl.w	r2, r0, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f4c:	e023      	b.n	8004f96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3b41      	subs	r3, #65	@ 0x41
 8004f60:	221f      	movs	r2, #31
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	43da      	mvns	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	400a      	ands	r2, r1
 8004f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	3b41      	subs	r3, #65	@ 0x41
 8004f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f96:	4b29      	ldr	r3, [pc, #164]	@ (800503c <HAL_ADC_ConfigChannel+0x250>)
 8004f98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a28      	ldr	r2, [pc, #160]	@ (8005040 <HAL_ADC_ConfigChannel+0x254>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d10f      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x1d8>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b12      	cmp	r3, #18
 8004faa:	d10b      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005040 <HAL_ADC_ConfigChannel+0x254>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d12b      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x23a>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8005044 <HAL_ADC_ConfigChannel+0x258>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <HAL_ADC_ConfigChannel+0x1f4>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b11      	cmp	r3, #17
 8004fde:	d122      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a11      	ldr	r2, [pc, #68]	@ (8005044 <HAL_ADC_ConfigChannel+0x258>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d111      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005002:	4b11      	ldr	r3, [pc, #68]	@ (8005048 <HAL_ADC_ConfigChannel+0x25c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a11      	ldr	r2, [pc, #68]	@ (800504c <HAL_ADC_ConfigChannel+0x260>)
 8005008:	fba2 2303 	umull	r2, r3, r2, r3
 800500c:	0c9a      	lsrs	r2, r3, #18
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005018:	e002      	b.n	8005020 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	3b01      	subs	r3, #1
 800501e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f9      	bne.n	800501a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	40012300 	.word	0x40012300
 8005040:	40012000 	.word	0x40012000
 8005044:	10000012 	.word	0x10000012
 8005048:	20000008 	.word	0x20000008
 800504c:	431bde83 	.word	0x431bde83

08005050 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005058:	4b79      	ldr	r3, [pc, #484]	@ (8005240 <ADC_Init+0x1f0>)
 800505a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	431a      	orrs	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005084:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6859      	ldr	r1, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	021a      	lsls	r2, r3, #8
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80050a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6859      	ldr	r1, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6899      	ldr	r1, [r3, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e2:	4a58      	ldr	r2, [pc, #352]	@ (8005244 <ADC_Init+0x1f4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d022      	beq.n	800512e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80050f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6899      	ldr	r1, [r3, #8]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005118:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6899      	ldr	r1, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	609a      	str	r2, [r3, #8]
 800512c:	e00f      	b.n	800514e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800513c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800514c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0202 	bic.w	r2, r2, #2
 800515c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6899      	ldr	r1, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	7e1b      	ldrb	r3, [r3, #24]
 8005168:	005a      	lsls	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01b      	beq.n	80051b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800518a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800519a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6859      	ldr	r1, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a6:	3b01      	subs	r3, #1
 80051a8:	035a      	lsls	r2, r3, #13
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	e007      	b.n	80051c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80051d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	3b01      	subs	r3, #1
 80051e0:	051a      	lsls	r2, r3, #20
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80051f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6899      	ldr	r1, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005206:	025a      	lsls	r2, r3, #9
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800521e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6899      	ldr	r1, [r3, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	029a      	lsls	r2, r3, #10
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	609a      	str	r2, [r3, #8]
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	40012300 	.word	0x40012300
 8005244:	0f000001 	.word	0x0f000001

08005248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005258:	4b0c      	ldr	r3, [pc, #48]	@ (800528c <__NVIC_SetPriorityGrouping+0x44>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005264:	4013      	ands	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005270:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800527a:	4a04      	ldr	r2, [pc, #16]	@ (800528c <__NVIC_SetPriorityGrouping+0x44>)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	60d3      	str	r3, [r2, #12]
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	e000ed00 	.word	0xe000ed00

08005290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005294:	4b04      	ldr	r3, [pc, #16]	@ (80052a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	0a1b      	lsrs	r3, r3, #8
 800529a:	f003 0307 	and.w	r3, r3, #7
}
 800529e:	4618      	mov	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	e000ed00 	.word	0xe000ed00

080052ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	db0b      	blt.n	80052d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	f003 021f 	and.w	r2, r3, #31
 80052c4:	4907      	ldr	r1, [pc, #28]	@ (80052e4 <__NVIC_EnableIRQ+0x38>)
 80052c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	2001      	movs	r0, #1
 80052ce:	fa00 f202 	lsl.w	r2, r0, r2
 80052d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	e000e100 	.word	0xe000e100

080052e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	6039      	str	r1, [r7, #0]
 80052f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	db0a      	blt.n	8005312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	490c      	ldr	r1, [pc, #48]	@ (8005334 <__NVIC_SetPriority+0x4c>)
 8005302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005306:	0112      	lsls	r2, r2, #4
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	440b      	add	r3, r1
 800530c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005310:	e00a      	b.n	8005328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	b2da      	uxtb	r2, r3
 8005316:	4908      	ldr	r1, [pc, #32]	@ (8005338 <__NVIC_SetPriority+0x50>)
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	3b04      	subs	r3, #4
 8005320:	0112      	lsls	r2, r2, #4
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	440b      	add	r3, r1
 8005326:	761a      	strb	r2, [r3, #24]
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	e000e100 	.word	0xe000e100
 8005338:	e000ed00 	.word	0xe000ed00

0800533c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800533c:	b480      	push	{r7}
 800533e:	b089      	sub	sp, #36	@ 0x24
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f1c3 0307 	rsb	r3, r3, #7
 8005356:	2b04      	cmp	r3, #4
 8005358:	bf28      	it	cs
 800535a:	2304      	movcs	r3, #4
 800535c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	3304      	adds	r3, #4
 8005362:	2b06      	cmp	r3, #6
 8005364:	d902      	bls.n	800536c <NVIC_EncodePriority+0x30>
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	3b03      	subs	r3, #3
 800536a:	e000      	b.n	800536e <NVIC_EncodePriority+0x32>
 800536c:	2300      	movs	r3, #0
 800536e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005370:	f04f 32ff 	mov.w	r2, #4294967295
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	fa02 f303 	lsl.w	r3, r2, r3
 800537a:	43da      	mvns	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	401a      	ands	r2, r3
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005384:	f04f 31ff 	mov.w	r1, #4294967295
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	fa01 f303 	lsl.w	r3, r1, r3
 800538e:	43d9      	mvns	r1, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005394:	4313      	orrs	r3, r2
         );
}
 8005396:	4618      	mov	r0, r3
 8005398:	3724      	adds	r7, #36	@ 0x24
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff ff4c 	bl	8005248 <__NVIC_SetPriorityGrouping>
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	4603      	mov	r3, r0
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053ca:	f7ff ff61 	bl	8005290 <__NVIC_GetPriorityGrouping>
 80053ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	68b9      	ldr	r1, [r7, #8]
 80053d4:	6978      	ldr	r0, [r7, #20]
 80053d6:	f7ff ffb1 	bl	800533c <NVIC_EncodePriority>
 80053da:	4602      	mov	r2, r0
 80053dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053e0:	4611      	mov	r1, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff ff80 	bl	80052e8 <__NVIC_SetPriority>
}
 80053e8:	bf00      	nop
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff ff54 	bl	80052ac <__NVIC_EnableIRQ>
}
 8005404:	bf00      	nop
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005418:	f7ff fc74 	bl	8004d04 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e099      	b.n	800555c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005448:	e00f      	b.n	800546a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800544a:	f7ff fc5b 	bl	8004d04 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b05      	cmp	r3, #5
 8005456:	d908      	bls.n	800546a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2203      	movs	r2, #3
 8005462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e078      	b.n	800555c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e8      	bne.n	800544a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4b38      	ldr	r3, [pc, #224]	@ (8005564 <HAL_DMA_Init+0x158>)
 8005484:	4013      	ands	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d107      	bne.n	80054d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054cc:	4313      	orrs	r3, r2
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0307 	bic.w	r3, r3, #7
 80054ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d117      	bne.n	800552e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00e      	beq.n	800552e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f9e9 	bl	80058e8 <DMA_CheckFifoParam>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d008      	beq.n	800552e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2240      	movs	r2, #64	@ 0x40
 8005520:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800552a:	2301      	movs	r3, #1
 800552c:	e016      	b.n	800555c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f9a0 	bl	800587c <DMA_CalcBaseAndBitshift>
 800553c:	4603      	mov	r3, r0
 800553e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005544:	223f      	movs	r2, #63	@ 0x3f
 8005546:	409a      	lsls	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	f010803f 	.word	0xf010803f

08005568 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005574:	4b8e      	ldr	r3, [pc, #568]	@ (80057b0 <HAL_DMA_IRQHandler+0x248>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a8e      	ldr	r2, [pc, #568]	@ (80057b4 <HAL_DMA_IRQHandler+0x24c>)
 800557a:	fba2 2303 	umull	r2, r3, r2, r3
 800557e:	0a9b      	lsrs	r3, r3, #10
 8005580:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005586:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005592:	2208      	movs	r2, #8
 8005594:	409a      	lsls	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4013      	ands	r3, r2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d01a      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d013      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0204 	bic.w	r2, r2, #4
 80055ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c0:	2208      	movs	r2, #8
 80055c2:	409a      	lsls	r2, r3
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055cc:	f043 0201 	orr.w	r2, r3, #1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055d8:	2201      	movs	r2, #1
 80055da:	409a      	lsls	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4013      	ands	r3, r2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d012      	beq.n	800560a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00b      	beq.n	800560a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f6:	2201      	movs	r2, #1
 80055f8:	409a      	lsls	r2, r3
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005602:	f043 0202 	orr.w	r2, r3, #2
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800560e:	2204      	movs	r2, #4
 8005610:	409a      	lsls	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4013      	ands	r3, r2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d012      	beq.n	8005640 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800562c:	2204      	movs	r2, #4
 800562e:	409a      	lsls	r2, r3
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005638:	f043 0204 	orr.w	r2, r3, #4
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005644:	2210      	movs	r2, #16
 8005646:	409a      	lsls	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4013      	ands	r3, r2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d043      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d03c      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005662:	2210      	movs	r2, #16
 8005664:	409a      	lsls	r2, r3
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d018      	beq.n	80056aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d108      	bne.n	8005698 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d024      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
 8005696:	e01f      	b.n	80056d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01b      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	4798      	blx	r3
 80056a8:	e016      	b.n	80056d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d107      	bne.n	80056c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0208 	bic.w	r2, r2, #8
 80056c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056dc:	2220      	movs	r2, #32
 80056de:	409a      	lsls	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 808f 	beq.w	8005808 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 8087 	beq.w	8005808 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056fe:	2220      	movs	r2, #32
 8005700:	409a      	lsls	r2, r3
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b05      	cmp	r3, #5
 8005710:	d136      	bne.n	8005780 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0216 	bic.w	r2, r2, #22
 8005720:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695a      	ldr	r2, [r3, #20]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005730:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	d103      	bne.n	8005742 <HAL_DMA_IRQHandler+0x1da>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0208 	bic.w	r2, r2, #8
 8005750:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005756:	223f      	movs	r2, #63	@ 0x3f
 8005758:	409a      	lsls	r2, r3
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005772:	2b00      	cmp	r3, #0
 8005774:	d07e      	beq.n	8005874 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	4798      	blx	r3
        }
        return;
 800577e:	e079      	b.n	8005874 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d01d      	beq.n	80057ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10d      	bne.n	80057b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d031      	beq.n	8005808 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	4798      	blx	r3
 80057ac:	e02c      	b.n	8005808 <HAL_DMA_IRQHandler+0x2a0>
 80057ae:	bf00      	nop
 80057b0:	20000008 	.word	0x20000008
 80057b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d023      	beq.n	8005808 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	4798      	blx	r3
 80057c8:	e01e      	b.n	8005808 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10f      	bne.n	80057f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0210 	bic.w	r2, r2, #16
 80057e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580c:	2b00      	cmp	r3, #0
 800580e:	d032      	beq.n	8005876 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d022      	beq.n	8005862 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2205      	movs	r2, #5
 8005820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0201 	bic.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	3301      	adds	r3, #1
 8005838:	60bb      	str	r3, [r7, #8]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	429a      	cmp	r2, r3
 800583e:	d307      	bcc.n	8005850 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1f2      	bne.n	8005834 <HAL_DMA_IRQHandler+0x2cc>
 800584e:	e000      	b.n	8005852 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005850:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	4798      	blx	r3
 8005872:	e000      	b.n	8005876 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005874:	bf00      	nop
    }
  }
}
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	3b10      	subs	r3, #16
 800588c:	4a14      	ldr	r2, [pc, #80]	@ (80058e0 <DMA_CalcBaseAndBitshift+0x64>)
 800588e:	fba2 2303 	umull	r2, r3, r2, r3
 8005892:	091b      	lsrs	r3, r3, #4
 8005894:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005896:	4a13      	ldr	r2, [pc, #76]	@ (80058e4 <DMA_CalcBaseAndBitshift+0x68>)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d909      	bls.n	80058be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80058b2:	f023 0303 	bic.w	r3, r3, #3
 80058b6:	1d1a      	adds	r2, r3, #4
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80058bc:	e007      	b.n	80058ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	aaaaaaab 	.word	0xaaaaaaab
 80058e4:	08014b80 	.word	0x08014b80

080058e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d11f      	bne.n	8005942 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b03      	cmp	r3, #3
 8005906:	d856      	bhi.n	80059b6 <DMA_CheckFifoParam+0xce>
 8005908:	a201      	add	r2, pc, #4	@ (adr r2, 8005910 <DMA_CheckFifoParam+0x28>)
 800590a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590e:	bf00      	nop
 8005910:	08005921 	.word	0x08005921
 8005914:	08005933 	.word	0x08005933
 8005918:	08005921 	.word	0x08005921
 800591c:	080059b7 	.word	0x080059b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d046      	beq.n	80059ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005930:	e043      	b.n	80059ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005936:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800593a:	d140      	bne.n	80059be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005940:	e03d      	b.n	80059be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800594a:	d121      	bne.n	8005990 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b03      	cmp	r3, #3
 8005950:	d837      	bhi.n	80059c2 <DMA_CheckFifoParam+0xda>
 8005952:	a201      	add	r2, pc, #4	@ (adr r2, 8005958 <DMA_CheckFifoParam+0x70>)
 8005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005958:	08005969 	.word	0x08005969
 800595c:	0800596f 	.word	0x0800596f
 8005960:	08005969 	.word	0x08005969
 8005964:	08005981 	.word	0x08005981
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	73fb      	strb	r3, [r7, #15]
      break;
 800596c:	e030      	b.n	80059d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005972:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d025      	beq.n	80059c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800597e:	e022      	b.n	80059c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005984:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005988:	d11f      	bne.n	80059ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800598e:	e01c      	b.n	80059ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d903      	bls.n	800599e <DMA_CheckFifoParam+0xb6>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d003      	beq.n	80059a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800599c:	e018      	b.n	80059d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	73fb      	strb	r3, [r7, #15]
      break;
 80059a2:	e015      	b.n	80059d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00e      	beq.n	80059ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
      break;
 80059b4:	e00b      	b.n	80059ce <DMA_CheckFifoParam+0xe6>
      break;
 80059b6:	bf00      	nop
 80059b8:	e00a      	b.n	80059d0 <DMA_CheckFifoParam+0xe8>
      break;
 80059ba:	bf00      	nop
 80059bc:	e008      	b.n	80059d0 <DMA_CheckFifoParam+0xe8>
      break;
 80059be:	bf00      	nop
 80059c0:	e006      	b.n	80059d0 <DMA_CheckFifoParam+0xe8>
      break;
 80059c2:	bf00      	nop
 80059c4:	e004      	b.n	80059d0 <DMA_CheckFifoParam+0xe8>
      break;
 80059c6:	bf00      	nop
 80059c8:	e002      	b.n	80059d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80059ca:	bf00      	nop
 80059cc:	e000      	b.n	80059d0 <DMA_CheckFifoParam+0xe8>
      break;
 80059ce:	bf00      	nop
    }
  } 
  
  return status; 
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop

080059e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b089      	sub	sp, #36	@ 0x24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059f6:	2300      	movs	r3, #0
 80059f8:	61fb      	str	r3, [r7, #28]
 80059fa:	e159      	b.n	8005cb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059fc:	2201      	movs	r2, #1
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	f040 8148 	bne.w	8005caa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d005      	beq.n	8005a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d130      	bne.n	8005a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	2203      	movs	r2, #3
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	43db      	mvns	r3, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4013      	ands	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a68:	2201      	movs	r2, #1
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	43db      	mvns	r3, r3
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	4013      	ands	r3, r2
 8005a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	091b      	lsrs	r3, r3, #4
 8005a7e:	f003 0201 	and.w	r2, r3, #1
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d017      	beq.n	8005ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	2203      	movs	r2, #3
 8005aac:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f003 0303 	and.w	r3, r3, #3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d123      	bne.n	8005b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	08da      	lsrs	r2, r3, #3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3208      	adds	r2, #8
 8005ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	220f      	movs	r2, #15
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	43db      	mvns	r3, r3
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	4013      	ands	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	08da      	lsrs	r2, r3, #3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3208      	adds	r2, #8
 8005b1e:	69b9      	ldr	r1, [r7, #24]
 8005b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	2203      	movs	r2, #3
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	43db      	mvns	r3, r3
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f003 0203 	and.w	r2, r3, #3
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 80a2 	beq.w	8005caa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	4b57      	ldr	r3, [pc, #348]	@ (8005cc8 <HAL_GPIO_Init+0x2e8>)
 8005b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6e:	4a56      	ldr	r2, [pc, #344]	@ (8005cc8 <HAL_GPIO_Init+0x2e8>)
 8005b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b76:	4b54      	ldr	r3, [pc, #336]	@ (8005cc8 <HAL_GPIO_Init+0x2e8>)
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b82:	4a52      	ldr	r2, [pc, #328]	@ (8005ccc <HAL_GPIO_Init+0x2ec>)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	089b      	lsrs	r3, r3, #2
 8005b88:	3302      	adds	r3, #2
 8005b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	220f      	movs	r2, #15
 8005b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9e:	43db      	mvns	r3, r3
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a49      	ldr	r2, [pc, #292]	@ (8005cd0 <HAL_GPIO_Init+0x2f0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d019      	beq.n	8005be2 <HAL_GPIO_Init+0x202>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a48      	ldr	r2, [pc, #288]	@ (8005cd4 <HAL_GPIO_Init+0x2f4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_GPIO_Init+0x1fe>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a47      	ldr	r2, [pc, #284]	@ (8005cd8 <HAL_GPIO_Init+0x2f8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00d      	beq.n	8005bda <HAL_GPIO_Init+0x1fa>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a46      	ldr	r2, [pc, #280]	@ (8005cdc <HAL_GPIO_Init+0x2fc>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d007      	beq.n	8005bd6 <HAL_GPIO_Init+0x1f6>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a45      	ldr	r2, [pc, #276]	@ (8005ce0 <HAL_GPIO_Init+0x300>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <HAL_GPIO_Init+0x1f2>
 8005bce:	2304      	movs	r3, #4
 8005bd0:	e008      	b.n	8005be4 <HAL_GPIO_Init+0x204>
 8005bd2:	2307      	movs	r3, #7
 8005bd4:	e006      	b.n	8005be4 <HAL_GPIO_Init+0x204>
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e004      	b.n	8005be4 <HAL_GPIO_Init+0x204>
 8005bda:	2302      	movs	r3, #2
 8005bdc:	e002      	b.n	8005be4 <HAL_GPIO_Init+0x204>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <HAL_GPIO_Init+0x204>
 8005be2:	2300      	movs	r3, #0
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	f002 0203 	and.w	r2, r2, #3
 8005bea:	0092      	lsls	r2, r2, #2
 8005bec:	4093      	lsls	r3, r2
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bf4:	4935      	ldr	r1, [pc, #212]	@ (8005ccc <HAL_GPIO_Init+0x2ec>)
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	089b      	lsrs	r3, r3, #2
 8005bfa:	3302      	adds	r3, #2
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c02:	4b38      	ldr	r3, [pc, #224]	@ (8005ce4 <HAL_GPIO_Init+0x304>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c26:	4a2f      	ldr	r2, [pc, #188]	@ (8005ce4 <HAL_GPIO_Init+0x304>)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ce4 <HAL_GPIO_Init+0x304>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	43db      	mvns	r3, r3
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c50:	4a24      	ldr	r2, [pc, #144]	@ (8005ce4 <HAL_GPIO_Init+0x304>)
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c56:	4b23      	ldr	r3, [pc, #140]	@ (8005ce4 <HAL_GPIO_Init+0x304>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	43db      	mvns	r3, r3
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	4013      	ands	r3, r2
 8005c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ce4 <HAL_GPIO_Init+0x304>)
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c80:	4b18      	ldr	r3, [pc, #96]	@ (8005ce4 <HAL_GPIO_Init+0x304>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ca4:	4a0f      	ldr	r2, [pc, #60]	@ (8005ce4 <HAL_GPIO_Init+0x304>)
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	3301      	adds	r3, #1
 8005cae:	61fb      	str	r3, [r7, #28]
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	2b0f      	cmp	r3, #15
 8005cb4:	f67f aea2 	bls.w	80059fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005cb8:	bf00      	nop
 8005cba:	bf00      	nop
 8005cbc:	3724      	adds	r7, #36	@ 0x24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	40013800 	.word	0x40013800
 8005cd0:	40020000 	.word	0x40020000
 8005cd4:	40020400 	.word	0x40020400
 8005cd8:	40020800 	.word	0x40020800
 8005cdc:	40020c00 	.word	0x40020c00
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	40013c00 	.word	0x40013c00

08005ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	807b      	strh	r3, [r7, #2]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cf8:	787b      	ldrb	r3, [r7, #1]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cfe:	887a      	ldrh	r2, [r7, #2]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d04:	e003      	b.n	8005d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d06:	887b      	ldrh	r3, [r7, #2]
 8005d08:	041a      	lsls	r2, r3, #16
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	619a      	str	r2, [r3, #24]
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
	...

08005d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e12b      	b.n	8005f86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fe fb30 	bl	80043a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2224      	movs	r2, #36	@ 0x24
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0201 	bic.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d80:	f002 fe72 	bl	8008a68 <HAL_RCC_GetPCLK1Freq>
 8005d84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4a81      	ldr	r2, [pc, #516]	@ (8005f90 <HAL_I2C_Init+0x274>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d807      	bhi.n	8005da0 <HAL_I2C_Init+0x84>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4a80      	ldr	r2, [pc, #512]	@ (8005f94 <HAL_I2C_Init+0x278>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	bf94      	ite	ls
 8005d98:	2301      	movls	r3, #1
 8005d9a:	2300      	movhi	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	e006      	b.n	8005dae <HAL_I2C_Init+0x92>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4a7d      	ldr	r2, [pc, #500]	@ (8005f98 <HAL_I2C_Init+0x27c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	bf94      	ite	ls
 8005da8:	2301      	movls	r3, #1
 8005daa:	2300      	movhi	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e0e7      	b.n	8005f86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4a78      	ldr	r2, [pc, #480]	@ (8005f9c <HAL_I2C_Init+0x280>)
 8005dba:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbe:	0c9b      	lsrs	r3, r3, #18
 8005dc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	4a6a      	ldr	r2, [pc, #424]	@ (8005f90 <HAL_I2C_Init+0x274>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d802      	bhi.n	8005df0 <HAL_I2C_Init+0xd4>
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	3301      	adds	r3, #1
 8005dee:	e009      	b.n	8005e04 <HAL_I2C_Init+0xe8>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005df6:	fb02 f303 	mul.w	r3, r2, r3
 8005dfa:	4a69      	ldr	r2, [pc, #420]	@ (8005fa0 <HAL_I2C_Init+0x284>)
 8005dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005e00:	099b      	lsrs	r3, r3, #6
 8005e02:	3301      	adds	r3, #1
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005e16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	495c      	ldr	r1, [pc, #368]	@ (8005f90 <HAL_I2C_Init+0x274>)
 8005e20:	428b      	cmp	r3, r1
 8005e22:	d819      	bhi.n	8005e58 <HAL_I2C_Init+0x13c>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	1e59      	subs	r1, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e32:	1c59      	adds	r1, r3, #1
 8005e34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005e38:	400b      	ands	r3, r1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <HAL_I2C_Init+0x138>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1e59      	subs	r1, r3, #1
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e52:	e051      	b.n	8005ef8 <HAL_I2C_Init+0x1dc>
 8005e54:	2304      	movs	r3, #4
 8005e56:	e04f      	b.n	8005ef8 <HAL_I2C_Init+0x1dc>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d111      	bne.n	8005e84 <HAL_I2C_Init+0x168>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	1e58      	subs	r0, r3, #1
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6859      	ldr	r1, [r3, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	440b      	add	r3, r1
 8005e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e72:	3301      	adds	r3, #1
 8005e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bf0c      	ite	eq
 8005e7c:	2301      	moveq	r3, #1
 8005e7e:	2300      	movne	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	e012      	b.n	8005eaa <HAL_I2C_Init+0x18e>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	1e58      	subs	r0, r3, #1
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6859      	ldr	r1, [r3, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	0099      	lsls	r1, r3, #2
 8005e94:	440b      	add	r3, r1
 8005e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bf0c      	ite	eq
 8005ea4:	2301      	moveq	r3, #1
 8005ea6:	2300      	movne	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <HAL_I2C_Init+0x196>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e022      	b.n	8005ef8 <HAL_I2C_Init+0x1dc>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10e      	bne.n	8005ed8 <HAL_I2C_Init+0x1bc>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	1e58      	subs	r0, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6859      	ldr	r1, [r3, #4]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	440b      	add	r3, r1
 8005ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ecc:	3301      	adds	r3, #1
 8005ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ed6:	e00f      	b.n	8005ef8 <HAL_I2C_Init+0x1dc>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	1e58      	subs	r0, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6859      	ldr	r1, [r3, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	0099      	lsls	r1, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	6809      	ldr	r1, [r1, #0]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69da      	ldr	r2, [r3, #28]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005f26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6911      	ldr	r1, [r2, #16]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	68d2      	ldr	r2, [r2, #12]
 8005f32:	4311      	orrs	r1, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695a      	ldr	r2, [r3, #20]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	000186a0 	.word	0x000186a0
 8005f94:	001e847f 	.word	0x001e847f
 8005f98:	003d08ff 	.word	0x003d08ff
 8005f9c:	431bde83 	.word	0x431bde83
 8005fa0:	10624dd3 	.word	0x10624dd3

08005fa4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	4608      	mov	r0, r1
 8005fae:	4611      	mov	r1, r2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	817b      	strh	r3, [r7, #10]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	813b      	strh	r3, [r7, #8]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fbe:	f7fe fea1 	bl	8004d04 <HAL_GetTick>
 8005fc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	f040 80d9 	bne.w	8006184 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	2319      	movs	r3, #25
 8005fd8:	2201      	movs	r2, #1
 8005fda:	496d      	ldr	r1, [pc, #436]	@ (8006190 <HAL_I2C_Mem_Write+0x1ec>)
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 fc8b 	bl	80068f8 <I2C_WaitOnFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e0cc      	b.n	8006186 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_I2C_Mem_Write+0x56>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e0c5      	b.n	8006186 <HAL_I2C_Mem_Write+0x1e2>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b01      	cmp	r3, #1
 800600e:	d007      	beq.n	8006020 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800602e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2221      	movs	r2, #33	@ 0x21
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2240      	movs	r2, #64	@ 0x40
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a3a      	ldr	r2, [r7, #32]
 800604a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006050:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4a4d      	ldr	r2, [pc, #308]	@ (8006194 <HAL_I2C_Mem_Write+0x1f0>)
 8006060:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006062:	88f8      	ldrh	r0, [r7, #6]
 8006064:	893a      	ldrh	r2, [r7, #8]
 8006066:	8979      	ldrh	r1, [r7, #10]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	4603      	mov	r3, r0
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 fac2 	bl	80065fc <I2C_RequestMemoryWrite>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d052      	beq.n	8006124 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e081      	b.n	8006186 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fd50 	bl	8006b2c <I2C_WaitOnTXEFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00d      	beq.n	80060ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006096:	2b04      	cmp	r3, #4
 8006098:	d107      	bne.n	80060aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e06b      	b.n	8006186 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b2:	781a      	ldrb	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d11b      	bne.n	8006124 <HAL_I2C_Mem_Write+0x180>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d017      	beq.n	8006124 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f8:	781a      	ldrb	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800610e:	3b01      	subs	r3, #1
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1aa      	bne.n	8006082 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fd43 	bl	8006bbc <I2C_WaitOnBTFFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00d      	beq.n	8006158 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006140:	2b04      	cmp	r3, #4
 8006142:	d107      	bne.n	8006154 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006152:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e016      	b.n	8006186 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	e000      	b.n	8006186 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006184:	2302      	movs	r3, #2
  }
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	00100002 	.word	0x00100002
 8006194:	ffff0000 	.word	0xffff0000

08006198 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08c      	sub	sp, #48	@ 0x30
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	4608      	mov	r0, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	4603      	mov	r3, r0
 80061a8:	817b      	strh	r3, [r7, #10]
 80061aa:	460b      	mov	r3, r1
 80061ac:	813b      	strh	r3, [r7, #8]
 80061ae:	4613      	mov	r3, r2
 80061b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061b2:	f7fe fda7 	bl	8004d04 <HAL_GetTick>
 80061b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	f040 8214 	bne.w	80065ee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	2319      	movs	r3, #25
 80061cc:	2201      	movs	r2, #1
 80061ce:	497b      	ldr	r1, [pc, #492]	@ (80063bc <HAL_I2C_Mem_Read+0x224>)
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fb91 	bl	80068f8 <I2C_WaitOnFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80061dc:	2302      	movs	r3, #2
 80061de:	e207      	b.n	80065f0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <HAL_I2C_Mem_Read+0x56>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e200      	b.n	80065f0 <HAL_I2C_Mem_Read+0x458>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b01      	cmp	r3, #1
 8006202:	d007      	beq.n	8006214 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006222:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2222      	movs	r2, #34	@ 0x22
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2240      	movs	r2, #64	@ 0x40
 8006230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800623e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006244:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4a5b      	ldr	r2, [pc, #364]	@ (80063c0 <HAL_I2C_Mem_Read+0x228>)
 8006254:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006256:	88f8      	ldrh	r0, [r7, #6]
 8006258:	893a      	ldrh	r2, [r7, #8]
 800625a:	8979      	ldrh	r1, [r7, #10]
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	4603      	mov	r3, r0
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 fa5e 	bl	8006728 <I2C_RequestMemoryRead>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e1bc      	b.n	80065f0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800627a:	2b00      	cmp	r3, #0
 800627c:	d113      	bne.n	80062a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800627e:	2300      	movs	r3, #0
 8006280:	623b      	str	r3, [r7, #32]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	623b      	str	r3, [r7, #32]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	623b      	str	r3, [r7, #32]
 8006292:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	e190      	b.n	80065c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d11b      	bne.n	80062e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062be:	2300      	movs	r3, #0
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	61fb      	str	r3, [r7, #28]
 80062d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	e170      	b.n	80065c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d11b      	bne.n	8006326 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800630c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800630e:	2300      	movs	r3, #0
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	e150      	b.n	80065c8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800633c:	e144      	b.n	80065c8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006342:	2b03      	cmp	r3, #3
 8006344:	f200 80f1 	bhi.w	800652a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800634c:	2b01      	cmp	r3, #1
 800634e:	d123      	bne.n	8006398 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006352:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 fc79 	bl	8006c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e145      	b.n	80065f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636e:	b2d2      	uxtb	r2, r2
 8006370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800638c:	b29b      	uxth	r3, r3
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006396:	e117      	b.n	80065c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800639c:	2b02      	cmp	r3, #2
 800639e:	d14e      	bne.n	800643e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a6:	2200      	movs	r2, #0
 80063a8:	4906      	ldr	r1, [pc, #24]	@ (80063c4 <HAL_I2C_Mem_Read+0x22c>)
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 faa4 	bl	80068f8 <I2C_WaitOnFlagUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d008      	beq.n	80063c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e11a      	b.n	80065f0 <HAL_I2C_Mem_Read+0x458>
 80063ba:	bf00      	nop
 80063bc:	00100002 	.word	0x00100002
 80063c0:	ffff0000 	.word	0xffff0000
 80063c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691a      	ldr	r2, [r3, #16]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006400:	b29b      	uxth	r3, r3
 8006402:	3b01      	subs	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006432:	b29b      	uxth	r3, r3
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800643c:	e0c4      	b.n	80065c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006444:	2200      	movs	r2, #0
 8006446:	496c      	ldr	r1, [pc, #432]	@ (80065f8 <HAL_I2C_Mem_Read+0x460>)
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fa55 	bl	80068f8 <I2C_WaitOnFlagUntilTimeout>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e0cb      	b.n	80065f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006484:	3b01      	subs	r3, #1
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a0:	2200      	movs	r2, #0
 80064a2:	4955      	ldr	r1, [pc, #340]	@ (80065f8 <HAL_I2C_Mem_Read+0x460>)
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 fa27 	bl	80068f8 <I2C_WaitOnFlagUntilTimeout>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e09d      	b.n	80065f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006528:	e04e      	b.n	80065c8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800652a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800652c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 fb8c 	bl	8006c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e058      	b.n	80065f0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006566:	b29b      	uxth	r3, r3
 8006568:	3b01      	subs	r3, #1
 800656a:	b29a      	uxth	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b04      	cmp	r3, #4
 800657c:	d124      	bne.n	80065c8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006582:	2b03      	cmp	r3, #3
 8006584:	d107      	bne.n	8006596 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006594:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f47f aeb6 	bne.w	800633e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e000      	b.n	80065f0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80065ee:	2302      	movs	r3, #2
  }
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3728      	adds	r7, #40	@ 0x28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	00010004 	.word	0x00010004

080065fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	4608      	mov	r0, r1
 8006606:	4611      	mov	r1, r2
 8006608:	461a      	mov	r2, r3
 800660a:	4603      	mov	r3, r0
 800660c:	817b      	strh	r3, [r7, #10]
 800660e:	460b      	mov	r3, r1
 8006610:	813b      	strh	r3, [r7, #8]
 8006612:	4613      	mov	r3, r2
 8006614:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006624:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	2200      	movs	r2, #0
 800662e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 f960 	bl	80068f8 <I2C_WaitOnFlagUntilTimeout>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00d      	beq.n	800665a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800664c:	d103      	bne.n	8006656 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006654:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e05f      	b.n	800671a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800665a:	897b      	ldrh	r3, [r7, #10]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	461a      	mov	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006668:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	6a3a      	ldr	r2, [r7, #32]
 800666e:	492d      	ldr	r1, [pc, #180]	@ (8006724 <I2C_RequestMemoryWrite+0x128>)
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f9bb 	bl	80069ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e04c      	b.n	800671a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006698:	6a39      	ldr	r1, [r7, #32]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fa46 	bl	8006b2c <I2C_WaitOnTXEFlagUntilTimeout>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00d      	beq.n	80066c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d107      	bne.n	80066be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e02b      	b.n	800671a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d105      	bne.n	80066d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066c8:	893b      	ldrh	r3, [r7, #8]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	611a      	str	r2, [r3, #16]
 80066d2:	e021      	b.n	8006718 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066d4:	893b      	ldrh	r3, [r7, #8]
 80066d6:	0a1b      	lsrs	r3, r3, #8
 80066d8:	b29b      	uxth	r3, r3
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e4:	6a39      	ldr	r1, [r7, #32]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 fa20 	bl	8006b2c <I2C_WaitOnTXEFlagUntilTimeout>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00d      	beq.n	800670e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d107      	bne.n	800670a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006708:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e005      	b.n	800671a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800670e:	893b      	ldrh	r3, [r7, #8]
 8006710:	b2da      	uxtb	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	00010002 	.word	0x00010002

08006728 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b088      	sub	sp, #32
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	4608      	mov	r0, r1
 8006732:	4611      	mov	r1, r2
 8006734:	461a      	mov	r2, r3
 8006736:	4603      	mov	r3, r0
 8006738:	817b      	strh	r3, [r7, #10]
 800673a:	460b      	mov	r3, r1
 800673c:	813b      	strh	r3, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006750:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006760:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	2200      	movs	r2, #0
 800676a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 f8c2 	bl	80068f8 <I2C_WaitOnFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00d      	beq.n	8006796 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006788:	d103      	bne.n	8006792 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006790:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e0aa      	b.n	80068ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006796:	897b      	ldrh	r3, [r7, #10]
 8006798:	b2db      	uxtb	r3, r3
 800679a:	461a      	mov	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80067a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	6a3a      	ldr	r2, [r7, #32]
 80067aa:	4952      	ldr	r1, [pc, #328]	@ (80068f4 <I2C_RequestMemoryRead+0x1cc>)
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 f91d 	bl	80069ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e097      	b.n	80068ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067bc:	2300      	movs	r3, #0
 80067be:	617b      	str	r3, [r7, #20]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d4:	6a39      	ldr	r1, [r7, #32]
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 f9a8 	bl	8006b2c <I2C_WaitOnTXEFlagUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00d      	beq.n	80067fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d107      	bne.n	80067fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e076      	b.n	80068ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067fe:	88fb      	ldrh	r3, [r7, #6]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d105      	bne.n	8006810 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006804:	893b      	ldrh	r3, [r7, #8]
 8006806:	b2da      	uxtb	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	611a      	str	r2, [r3, #16]
 800680e:	e021      	b.n	8006854 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006810:	893b      	ldrh	r3, [r7, #8]
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	b29b      	uxth	r3, r3
 8006816:	b2da      	uxtb	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800681e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006820:	6a39      	ldr	r1, [r7, #32]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 f982 	bl	8006b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00d      	beq.n	800684a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006832:	2b04      	cmp	r3, #4
 8006834:	d107      	bne.n	8006846 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006844:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e050      	b.n	80068ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800684a:	893b      	ldrh	r3, [r7, #8]
 800684c:	b2da      	uxtb	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006856:	6a39      	ldr	r1, [r7, #32]
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 f967 	bl	8006b2c <I2C_WaitOnTXEFlagUntilTimeout>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00d      	beq.n	8006880 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006868:	2b04      	cmp	r3, #4
 800686a:	d107      	bne.n	800687c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800687a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e035      	b.n	80068ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800688e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	2200      	movs	r2, #0
 8006898:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f82b 	bl	80068f8 <I2C_WaitOnFlagUntilTimeout>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00d      	beq.n	80068c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068b6:	d103      	bne.n	80068c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e013      	b.n	80068ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068c4:	897b      	ldrh	r3, [r7, #10]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	f043 0301 	orr.w	r3, r3, #1
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d6:	6a3a      	ldr	r2, [r7, #32]
 80068d8:	4906      	ldr	r1, [pc, #24]	@ (80068f4 <I2C_RequestMemoryRead+0x1cc>)
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f886 	bl	80069ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	00010002 	.word	0x00010002

080068f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	4613      	mov	r3, r2
 8006906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006908:	e048      	b.n	800699c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	d044      	beq.n	800699c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006912:	f7fe f9f7 	bl	8004d04 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d302      	bcc.n	8006928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d139      	bne.n	800699c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	0c1b      	lsrs	r3, r3, #16
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b01      	cmp	r3, #1
 8006930:	d10d      	bne.n	800694e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	43da      	mvns	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4013      	ands	r3, r2
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	bf0c      	ite	eq
 8006944:	2301      	moveq	r3, #1
 8006946:	2300      	movne	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	e00c      	b.n	8006968 <I2C_WaitOnFlagUntilTimeout+0x70>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	43da      	mvns	r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4013      	ands	r3, r2
 800695a:	b29b      	uxth	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	bf0c      	ite	eq
 8006960:	2301      	moveq	r3, #1
 8006962:	2300      	movne	r3, #0
 8006964:	b2db      	uxtb	r3, r3
 8006966:	461a      	mov	r2, r3
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	429a      	cmp	r2, r3
 800696c:	d116      	bne.n	800699c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006988:	f043 0220 	orr.w	r2, r3, #32
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e023      	b.n	80069e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	0c1b      	lsrs	r3, r3, #16
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d10d      	bne.n	80069c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	43da      	mvns	r2, r3
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4013      	ands	r3, r2
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bf0c      	ite	eq
 80069b8:	2301      	moveq	r3, #1
 80069ba:	2300      	movne	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	e00c      	b.n	80069dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	43da      	mvns	r2, r3
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	4013      	ands	r3, r2
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	bf0c      	ite	eq
 80069d4:	2301      	moveq	r3, #1
 80069d6:	2300      	movne	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	461a      	mov	r2, r3
 80069dc:	79fb      	ldrb	r3, [r7, #7]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d093      	beq.n	800690a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069fa:	e071      	b.n	8006ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a0a:	d123      	bne.n	8006a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a40:	f043 0204 	orr.w	r2, r3, #4
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e067      	b.n	8006b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d041      	beq.n	8006ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a5c:	f7fe f952 	bl	8004d04 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d302      	bcc.n	8006a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d136      	bne.n	8006ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	0c1b      	lsrs	r3, r3, #16
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d10c      	bne.n	8006a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	43da      	mvns	r2, r3
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4013      	ands	r3, r2
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	bf14      	ite	ne
 8006a8e:	2301      	movne	r3, #1
 8006a90:	2300      	moveq	r3, #0
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	e00b      	b.n	8006aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	43da      	mvns	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bf14      	ite	ne
 8006aa8:	2301      	movne	r3, #1
 8006aaa:	2300      	moveq	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d016      	beq.n	8006ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006acc:	f043 0220 	orr.w	r2, r3, #32
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e021      	b.n	8006b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	0c1b      	lsrs	r3, r3, #16
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d10c      	bne.n	8006b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	43da      	mvns	r2, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	4013      	ands	r3, r2
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bf14      	ite	ne
 8006afc:	2301      	movne	r3, #1
 8006afe:	2300      	moveq	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	e00b      	b.n	8006b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	43da      	mvns	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	bf14      	ite	ne
 8006b16:	2301      	movne	r3, #1
 8006b18:	2300      	moveq	r3, #0
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f47f af6d 	bne.w	80069fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b38:	e034      	b.n	8006ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f8e3 	bl	8006d06 <I2C_IsAcknowledgeFailed>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e034      	b.n	8006bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b50:	d028      	beq.n	8006ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b52:	f7fe f8d7 	bl	8004d04 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d302      	bcc.n	8006b68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d11d      	bne.n	8006ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b72:	2b80      	cmp	r3, #128	@ 0x80
 8006b74:	d016      	beq.n	8006ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b90:	f043 0220 	orr.w	r2, r3, #32
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e007      	b.n	8006bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bae:	2b80      	cmp	r3, #128	@ 0x80
 8006bb0:	d1c3      	bne.n	8006b3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bc8:	e034      	b.n	8006c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 f89b 	bl	8006d06 <I2C_IsAcknowledgeFailed>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e034      	b.n	8006c44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be0:	d028      	beq.n	8006c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be2:	f7fe f88f 	bl	8004d04 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d302      	bcc.n	8006bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d11d      	bne.n	8006c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	f003 0304 	and.w	r3, r3, #4
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d016      	beq.n	8006c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c20:	f043 0220 	orr.w	r2, r3, #32
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e007      	b.n	8006c44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	f003 0304 	and.w	r3, r3, #4
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d1c3      	bne.n	8006bca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c58:	e049      	b.n	8006cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	f003 0310 	and.w	r3, r3, #16
 8006c64:	2b10      	cmp	r3, #16
 8006c66:	d119      	bne.n	8006c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0210 	mvn.w	r2, #16
 8006c70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e030      	b.n	8006cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9c:	f7fe f832 	bl	8004d04 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d302      	bcc.n	8006cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d11d      	bne.n	8006cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cbc:	2b40      	cmp	r3, #64	@ 0x40
 8006cbe:	d016      	beq.n	8006cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cda:	f043 0220 	orr.w	r2, r3, #32
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e007      	b.n	8006cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cf8:	2b40      	cmp	r3, #64	@ 0x40
 8006cfa:	d1ae      	bne.n	8006c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d1c:	d11b      	bne.n	8006d56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d42:	f043 0204 	orr.w	r2, r3, #4
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e000      	b.n	8006d58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e101      	b.n	8006f7a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d106      	bne.n	8006d96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f006 fe6b 	bl	800da6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2203      	movs	r2, #3
 8006d9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006da4:	d102      	bne.n	8006dac <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f003 fa52 	bl	800a25a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	7c1a      	ldrb	r2, [r3, #16]
 8006dbe:	f88d 2000 	strb.w	r2, [sp]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006dc6:	f003 f931 	bl	800a02c <USB_CoreInit>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d005      	beq.n	8006ddc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e0ce      	b.n	8006f7a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2100      	movs	r1, #0
 8006de2:	4618      	mov	r0, r3
 8006de4:	f003 fa4a 	bl	800a27c <USB_SetCurrentMode>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e0bf      	b.n	8006f7a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	73fb      	strb	r3, [r7, #15]
 8006dfe:	e04a      	b.n	8006e96 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e00:	7bfa      	ldrb	r2, [r7, #15]
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	4613      	mov	r3, r2
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	3315      	adds	r3, #21
 8006e10:	2201      	movs	r2, #1
 8006e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006e14:	7bfa      	ldrb	r2, [r7, #15]
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	3314      	adds	r3, #20
 8006e24:	7bfa      	ldrb	r2, [r7, #15]
 8006e26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006e28:	7bfa      	ldrb	r2, [r7, #15]
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	b298      	uxth	r0, r3
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	4613      	mov	r3, r2
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	4413      	add	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	332e      	adds	r3, #46	@ 0x2e
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006e40:	7bfa      	ldrb	r2, [r7, #15]
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	4613      	mov	r3, r2
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	3318      	adds	r3, #24
 8006e50:	2200      	movs	r2, #0
 8006e52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006e54:	7bfa      	ldrb	r2, [r7, #15]
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	440b      	add	r3, r1
 8006e62:	331c      	adds	r3, #28
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006e68:	7bfa      	ldrb	r2, [r7, #15]
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	00db      	lsls	r3, r3, #3
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	440b      	add	r3, r1
 8006e76:	3320      	adds	r3, #32
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006e7c:	7bfa      	ldrb	r2, [r7, #15]
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	4613      	mov	r3, r2
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	440b      	add	r3, r1
 8006e8a:	3324      	adds	r3, #36	@ 0x24
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	3301      	adds	r3, #1
 8006e94:	73fb      	strb	r3, [r7, #15]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	791b      	ldrb	r3, [r3, #4]
 8006e9a:	7bfa      	ldrb	r2, [r7, #15]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d3af      	bcc.n	8006e00 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	73fb      	strb	r3, [r7, #15]
 8006ea4:	e044      	b.n	8006f30 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006ea6:	7bfa      	ldrb	r2, [r7, #15]
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	4413      	add	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	440b      	add	r3, r1
 8006eb4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006ebc:	7bfa      	ldrb	r2, [r7, #15]
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006ece:	7bfa      	ldrb	r2, [r7, #15]
 8006ed0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006ed2:	7bfa      	ldrb	r2, [r7, #15]
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006ee8:	7bfa      	ldrb	r2, [r7, #15]
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	4613      	mov	r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006efe:	7bfa      	ldrb	r2, [r7, #15]
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f14:	7bfa      	ldrb	r2, [r7, #15]
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	73fb      	strb	r3, [r7, #15]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	791b      	ldrb	r3, [r3, #4]
 8006f34:	7bfa      	ldrb	r2, [r7, #15]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d3b5      	bcc.n	8006ea6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	7c1a      	ldrb	r2, [r3, #16]
 8006f42:	f88d 2000 	strb.w	r2, [sp]
 8006f46:	3304      	adds	r3, #4
 8006f48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f4a:	f003 f9e3 	bl	800a314 <USB_DevInit>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e00c      	b.n	8006f7a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f004 fa2d 	bl	800b3d2 <USB_DevDisconnect>

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d101      	bne.n	8006f9e <HAL_PCD_Start+0x1c>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e022      	b.n	8006fe4 <HAL_PCD_Start+0x62>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d009      	beq.n	8006fc6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d105      	bne.n	8006fc6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fbe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f003 f934 	bl	800a238 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f004 f9db 	bl	800b390 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006fec:	b590      	push	{r4, r7, lr}
 8006fee:	b08d      	sub	sp, #52	@ 0x34
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f004 fa99 	bl	800b53a <USB_GetMode>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	f040 848c 	bne.w	8007928 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4618      	mov	r0, r3
 8007016:	f004 f9fd 	bl	800b414 <USB_ReadInterrupts>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8482 	beq.w	8007926 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	0a1b      	lsrs	r3, r3, #8
 800702c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f004 f9ea 	bl	800b414 <USB_ReadInterrupts>
 8007040:	4603      	mov	r3, r0
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b02      	cmp	r3, #2
 8007048:	d107      	bne.n	800705a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	695a      	ldr	r2, [r3, #20]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f002 0202 	and.w	r2, r2, #2
 8007058:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f004 f9d8 	bl	800b414 <USB_ReadInterrupts>
 8007064:	4603      	mov	r3, r0
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b10      	cmp	r3, #16
 800706c:	d161      	bne.n	8007132 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	699a      	ldr	r2, [r3, #24]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0210 	bic.w	r2, r2, #16
 800707c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	f003 020f 	and.w	r2, r3, #15
 800708a:	4613      	mov	r3, r2
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	4413      	add	r3, r2
 800709a:	3304      	adds	r3, #4
 800709c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80070a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070a8:	d124      	bne.n	80070f4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80070b0:	4013      	ands	r3, r2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d035      	beq.n	8007122 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	091b      	lsrs	r3, r3, #4
 80070be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80070c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	461a      	mov	r2, r3
 80070c8:	6a38      	ldr	r0, [r7, #32]
 80070ca:	f004 f80f 	bl	800b0ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	091b      	lsrs	r3, r3, #4
 80070d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070da:	441a      	add	r2, r3
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	695a      	ldr	r2, [r3, #20]
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	091b      	lsrs	r3, r3, #4
 80070e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070ec:	441a      	add	r2, r3
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	615a      	str	r2, [r3, #20]
 80070f2:	e016      	b.n	8007122 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80070fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80070fe:	d110      	bne.n	8007122 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007106:	2208      	movs	r2, #8
 8007108:	4619      	mov	r1, r3
 800710a:	6a38      	ldr	r0, [r7, #32]
 800710c:	f003 ffee 	bl	800b0ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	695a      	ldr	r2, [r3, #20]
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	091b      	lsrs	r3, r3, #4
 8007118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800711c:	441a      	add	r2, r3
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	699a      	ldr	r2, [r3, #24]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f042 0210 	orr.w	r2, r2, #16
 8007130:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f004 f96c 	bl	800b414 <USB_ReadInterrupts>
 800713c:	4603      	mov	r3, r0
 800713e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007142:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007146:	f040 80a7 	bne.w	8007298 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4618      	mov	r0, r3
 8007154:	f004 f971 	bl	800b43a <USB_ReadDevAllOutEpInterrupt>
 8007158:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800715a:	e099      	b.n	8007290 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800715c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 808e 	beq.w	8007284 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	4611      	mov	r1, r2
 8007172:	4618      	mov	r0, r3
 8007174:	f004 f995 	bl	800b4a2 <USB_ReadDevOutEPInterrupt>
 8007178:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00c      	beq.n	800719e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007190:	461a      	mov	r2, r3
 8007192:	2301      	movs	r3, #1
 8007194:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007196:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fea3 	bl	8007ee4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f003 0308 	and.w	r3, r3, #8
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00c      	beq.n	80071c2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80071a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b4:	461a      	mov	r2, r3
 80071b6:	2308      	movs	r3, #8
 80071b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80071ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 ff79 	bl	80080b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f003 0310 	and.w	r3, r3, #16
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d008      	beq.n	80071de <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80071cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d8:	461a      	mov	r2, r3
 80071da:	2310      	movs	r3, #16
 80071dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d030      	beq.n	800724a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071f0:	2b80      	cmp	r3, #128	@ 0x80
 80071f2:	d109      	bne.n	8007208 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007202:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007206:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800720a:	4613      	mov	r3, r2
 800720c:	00db      	lsls	r3, r3, #3
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	4413      	add	r3, r2
 800721a:	3304      	adds	r3, #4
 800721c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	78db      	ldrb	r3, [r3, #3]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d108      	bne.n	8007238 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2200      	movs	r2, #0
 800722a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800722c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722e:	b2db      	uxtb	r3, r3
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f006 fd16 	bl	800dc64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007244:	461a      	mov	r2, r3
 8007246:	2302      	movs	r3, #2
 8007248:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	4413      	add	r3, r2
 800725c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007260:	461a      	mov	r2, r3
 8007262:	2320      	movs	r3, #32
 8007264:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d009      	beq.n	8007284 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727c:	461a      	mov	r2, r3
 800727e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007282:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	3301      	adds	r3, #1
 8007288:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800728a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007292:	2b00      	cmp	r3, #0
 8007294:	f47f af62 	bne.w	800715c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4618      	mov	r0, r3
 800729e:	f004 f8b9 	bl	800b414 <USB_ReadInterrupts>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072ac:	f040 80db 	bne.w	8007466 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f004 f8da 	bl	800b46e <USB_ReadDevAllInEpInterrupt>
 80072ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80072c0:	e0cd      	b.n	800745e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80072c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80c2 	beq.w	8007452 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	4611      	mov	r1, r2
 80072d8:	4618      	mov	r0, r3
 80072da:	f004 f900 	bl	800b4de <USB_ReadDevInEPInterrupt>
 80072de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d057      	beq.n	800739a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80072ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	2201      	movs	r2, #1
 80072f2:	fa02 f303 	lsl.w	r3, r2, r3
 80072f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	43db      	mvns	r3, r3
 8007304:	69f9      	ldr	r1, [r7, #28]
 8007306:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800730a:	4013      	ands	r3, r2
 800730c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800731a:	461a      	mov	r2, r3
 800731c:	2301      	movs	r3, #1
 800731e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	799b      	ldrb	r3, [r3, #6]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d132      	bne.n	800738e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007328:	6879      	ldr	r1, [r7, #4]
 800732a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800732c:	4613      	mov	r3, r2
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	4413      	add	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	3320      	adds	r3, #32
 8007338:	6819      	ldr	r1, [r3, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800733e:	4613      	mov	r3, r2
 8007340:	00db      	lsls	r3, r3, #3
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4403      	add	r3, r0
 8007348:	331c      	adds	r3, #28
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4419      	add	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007352:	4613      	mov	r3, r2
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4403      	add	r3, r0
 800735c:	3320      	adds	r3, #32
 800735e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	2b00      	cmp	r3, #0
 8007364:	d113      	bne.n	800738e <HAL_PCD_IRQHandler+0x3a2>
 8007366:	6879      	ldr	r1, [r7, #4]
 8007368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800736a:	4613      	mov	r3, r2
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	3324      	adds	r3, #36	@ 0x24
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d108      	bne.n	800738e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6818      	ldr	r0, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007386:	461a      	mov	r2, r3
 8007388:	2101      	movs	r1, #1
 800738a:	f004 f907 	bl	800b59c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800738e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007390:	b2db      	uxtb	r3, r3
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f006 fbea 	bl	800db6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d008      	beq.n	80073b6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073b0:	461a      	mov	r2, r3
 80073b2:	2308      	movs	r3, #8
 80073b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d008      	beq.n	80073d2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80073c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073cc:	461a      	mov	r2, r3
 80073ce:	2310      	movs	r3, #16
 80073d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d008      	beq.n	80073ee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80073dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e8:	461a      	mov	r2, r3
 80073ea:	2340      	movs	r3, #64	@ 0x40
 80073ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d023      	beq.n	8007440 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80073f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073fa:	6a38      	ldr	r0, [r7, #32]
 80073fc:	f003 f8ee 	bl	800a5dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007402:	4613      	mov	r3, r2
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	3310      	adds	r3, #16
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	4413      	add	r3, r2
 8007410:	3304      	adds	r3, #4
 8007412:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	78db      	ldrb	r3, [r3, #3]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d108      	bne.n	800742e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2200      	movs	r2, #0
 8007420:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	b2db      	uxtb	r3, r3
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f006 fc2d 	bl	800dc88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800743a:	461a      	mov	r2, r3
 800743c:	2302      	movs	r3, #2
 800743e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800744a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fcbd 	bl	8007dcc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	3301      	adds	r3, #1
 8007456:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745a:	085b      	lsrs	r3, r3, #1
 800745c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800745e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007460:	2b00      	cmp	r3, #0
 8007462:	f47f af2e 	bne.w	80072c2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f003 ffd2 	bl	800b414 <USB_ReadInterrupts>
 8007470:	4603      	mov	r3, r0
 8007472:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007476:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800747a:	d122      	bne.n	80074c2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800748a:	f023 0301 	bic.w	r3, r3, #1
 800748e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007496:	2b01      	cmp	r3, #1
 8007498:	d108      	bne.n	80074ac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80074a2:	2100      	movs	r1, #0
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fea3 	bl	80081f0 <HAL_PCDEx_LPM_Callback>
 80074aa:	e002      	b.n	80074b2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f006 fbcb 	bl	800dc48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	695a      	ldr	r2, [r3, #20]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80074c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f003 ffa4 	bl	800b414 <USB_ReadInterrupts>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074d6:	d112      	bne.n	80074fe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d102      	bne.n	80074ee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f006 fb87 	bl	800dbfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	695a      	ldr	r2, [r3, #20]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80074fc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4618      	mov	r0, r3
 8007504:	f003 ff86 	bl	800b414 <USB_ReadInterrupts>
 8007508:	4603      	mov	r3, r0
 800750a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800750e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007512:	f040 80b7 	bne.w	8007684 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	69fa      	ldr	r2, [r7, #28]
 8007520:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007524:	f023 0301 	bic.w	r3, r3, #1
 8007528:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2110      	movs	r1, #16
 8007530:	4618      	mov	r0, r3
 8007532:	f003 f853 	bl	800a5dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007536:	2300      	movs	r3, #0
 8007538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800753a:	e046      	b.n	80075ca <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800753c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007548:	461a      	mov	r2, r3
 800754a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800754e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007560:	0151      	lsls	r1, r2, #5
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	440a      	add	r2, r1
 8007566:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800756a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800756e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800757c:	461a      	mov	r2, r3
 800757e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007582:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007594:	0151      	lsls	r1, r2, #5
 8007596:	69fa      	ldr	r2, [r7, #28]
 8007598:	440a      	add	r2, r1
 800759a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800759e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80075a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075b4:	0151      	lsls	r1, r2, #5
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	440a      	add	r2, r1
 80075ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80075c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c6:	3301      	adds	r3, #1
 80075c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	791b      	ldrb	r3, [r3, #4]
 80075ce:	461a      	mov	r2, r3
 80075d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d3b2      	bcc.n	800753c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075e4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80075e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	7bdb      	ldrb	r3, [r3, #15]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d016      	beq.n	8007620 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007602:	f043 030b 	orr.w	r3, r3, #11
 8007606:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007612:	69fa      	ldr	r2, [r7, #28]
 8007614:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007618:	f043 030b 	orr.w	r3, r3, #11
 800761c:	6453      	str	r3, [r2, #68]	@ 0x44
 800761e:	e015      	b.n	800764c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	69fa      	ldr	r2, [r7, #28]
 800762a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800762e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007632:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007636:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	69fa      	ldr	r2, [r7, #28]
 8007642:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007646:	f043 030b 	orr.w	r3, r3, #11
 800764a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	69fa      	ldr	r2, [r7, #28]
 8007656:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800765a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800765e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800766e:	461a      	mov	r2, r3
 8007670:	f003 ff94 	bl	800b59c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695a      	ldr	r2, [r3, #20]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4618      	mov	r0, r3
 800768a:	f003 fec3 	bl	800b414 <USB_ReadInterrupts>
 800768e:	4603      	mov	r3, r0
 8007690:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007698:	d123      	bne.n	80076e2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	f003 ff59 	bl	800b556 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f003 f810 	bl	800a6ce <USB_GetDevSpeed>
 80076ae:	4603      	mov	r3, r0
 80076b0:	461a      	mov	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681c      	ldr	r4, [r3, #0]
 80076ba:	f001 f9c9 	bl	8008a50 <HAL_RCC_GetHCLKFreq>
 80076be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80076c4:	461a      	mov	r2, r3
 80076c6:	4620      	mov	r0, r4
 80076c8:	f002 fd14 	bl	800a0f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f006 fa76 	bl	800dbbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	695a      	ldr	r2, [r3, #20]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80076e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f003 fe94 	bl	800b414 <USB_ReadInterrupts>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	d10a      	bne.n	800770c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f006 fa53 	bl	800dba2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695a      	ldr	r2, [r3, #20]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f002 0208 	and.w	r2, r2, #8
 800770a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4618      	mov	r0, r3
 8007712:	f003 fe7f 	bl	800b414 <USB_ReadInterrupts>
 8007716:	4603      	mov	r3, r0
 8007718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800771c:	2b80      	cmp	r3, #128	@ 0x80
 800771e:	d123      	bne.n	8007768 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800772c:	2301      	movs	r3, #1
 800772e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007730:	e014      	b.n	800775c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007736:	4613      	mov	r3, r2
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	440b      	add	r3, r1
 8007740:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d105      	bne.n	8007756 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	b2db      	uxtb	r3, r3
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fb0a 	bl	8007d6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	3301      	adds	r3, #1
 800775a:	627b      	str	r3, [r7, #36]	@ 0x24
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	791b      	ldrb	r3, [r3, #4]
 8007760:	461a      	mov	r2, r3
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007764:	4293      	cmp	r3, r2
 8007766:	d3e4      	bcc.n	8007732 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4618      	mov	r0, r3
 800776e:	f003 fe51 	bl	800b414 <USB_ReadInterrupts>
 8007772:	4603      	mov	r3, r0
 8007774:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007778:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800777c:	d13c      	bne.n	80077f8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800777e:	2301      	movs	r3, #1
 8007780:	627b      	str	r3, [r7, #36]	@ 0x24
 8007782:	e02b      	b.n	80077dc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007794:	6879      	ldr	r1, [r7, #4]
 8007796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007798:	4613      	mov	r3, r2
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	4413      	add	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	440b      	add	r3, r1
 80077a2:	3318      	adds	r3, #24
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d115      	bne.n	80077d6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80077aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	da12      	bge.n	80077d6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077b4:	4613      	mov	r3, r2
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	3317      	adds	r3, #23
 80077c0:	2201      	movs	r2, #1
 80077c2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80077c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 faca 	bl	8007d6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80077d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d8:	3301      	adds	r3, #1
 80077da:	627b      	str	r3, [r7, #36]	@ 0x24
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	791b      	ldrb	r3, [r3, #4]
 80077e0:	461a      	mov	r2, r3
 80077e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d3cd      	bcc.n	8007784 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	695a      	ldr	r2, [r3, #20]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80077f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f003 fe09 	bl	800b414 <USB_ReadInterrupts>
 8007802:	4603      	mov	r3, r0
 8007804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007808:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800780c:	d156      	bne.n	80078bc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800780e:	2301      	movs	r3, #1
 8007810:	627b      	str	r3, [r7, #36]	@ 0x24
 8007812:	e045      	b.n	80078a0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007824:	6879      	ldr	r1, [r7, #4]
 8007826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007828:	4613      	mov	r3, r2
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	4413      	add	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	440b      	add	r3, r1
 8007832:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d12e      	bne.n	800789a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800783c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800783e:	2b00      	cmp	r3, #0
 8007840:	da2b      	bge.n	800789a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800784e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007852:	429a      	cmp	r2, r3
 8007854:	d121      	bne.n	800789a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800785a:	4613      	mov	r3, r2
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	440b      	add	r3, r1
 8007864:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007868:	2201      	movs	r2, #1
 800786a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	69fa      	ldr	r2, [r7, #28]
 800788e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007892:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007896:	6053      	str	r3, [r2, #4]
            break;
 8007898:	e008      	b.n	80078ac <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	3301      	adds	r3, #1
 800789e:	627b      	str	r3, [r7, #36]	@ 0x24
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	791b      	ldrb	r3, [r3, #4]
 80078a4:	461a      	mov	r2, r3
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d3b3      	bcc.n	8007814 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695a      	ldr	r2, [r3, #20]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80078ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f003 fda7 	bl	800b414 <USB_ReadInterrupts>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80078cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d0:	d10a      	bne.n	80078e8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f006 f9ea 	bl	800dcac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	695a      	ldr	r2, [r3, #20]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80078e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f003 fd91 	bl	800b414 <USB_ReadInterrupts>
 80078f2:	4603      	mov	r3, r0
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d115      	bne.n	8007928 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f006 f9da 	bl	800dcc8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6859      	ldr	r1, [r3, #4]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	430a      	orrs	r2, r1
 8007922:	605a      	str	r2, [r3, #4]
 8007924:	e000      	b.n	8007928 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007926:	bf00      	nop
    }
  }
}
 8007928:	3734      	adds	r7, #52	@ 0x34
 800792a:	46bd      	mov	sp, r7
 800792c:	bd90      	pop	{r4, r7, pc}

0800792e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	460b      	mov	r3, r1
 8007938:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007940:	2b01      	cmp	r3, #1
 8007942:	d101      	bne.n	8007948 <HAL_PCD_SetAddress+0x1a>
 8007944:	2302      	movs	r3, #2
 8007946:	e012      	b.n	800796e <HAL_PCD_SetAddress+0x40>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	78fa      	ldrb	r2, [r7, #3]
 8007954:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	78fa      	ldrb	r2, [r7, #3]
 800795c:	4611      	mov	r1, r2
 800795e:	4618      	mov	r0, r3
 8007960:	f003 fcf0 	bl	800b344 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	4608      	mov	r0, r1
 8007980:	4611      	mov	r1, r2
 8007982:	461a      	mov	r2, r3
 8007984:	4603      	mov	r3, r0
 8007986:	70fb      	strb	r3, [r7, #3]
 8007988:	460b      	mov	r3, r1
 800798a:	803b      	strh	r3, [r7, #0]
 800798c:	4613      	mov	r3, r2
 800798e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007998:	2b00      	cmp	r3, #0
 800799a:	da0f      	bge.n	80079bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800799c:	78fb      	ldrb	r3, [r7, #3]
 800799e:	f003 020f 	and.w	r2, r3, #15
 80079a2:	4613      	mov	r3, r2
 80079a4:	00db      	lsls	r3, r3, #3
 80079a6:	4413      	add	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	3310      	adds	r3, #16
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	4413      	add	r3, r2
 80079b0:	3304      	adds	r3, #4
 80079b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2201      	movs	r2, #1
 80079b8:	705a      	strb	r2, [r3, #1]
 80079ba:	e00f      	b.n	80079dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	f003 020f 	and.w	r2, r3, #15
 80079c2:	4613      	mov	r3, r2
 80079c4:	00db      	lsls	r3, r3, #3
 80079c6:	4413      	add	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	4413      	add	r3, r2
 80079d2:	3304      	adds	r3, #4
 80079d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	f003 030f 	and.w	r3, r3, #15
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80079e8:	883b      	ldrh	r3, [r7, #0]
 80079ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	78ba      	ldrb	r2, [r7, #2]
 80079f6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	785b      	ldrb	r3, [r3, #1]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d004      	beq.n	8007a0a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007a0a:	78bb      	ldrb	r3, [r7, #2]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d102      	bne.n	8007a16 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d101      	bne.n	8007a24 <HAL_PCD_EP_Open+0xae>
 8007a20:	2302      	movs	r3, #2
 8007a22:	e00e      	b.n	8007a42 <HAL_PCD_EP_Open+0xcc>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68f9      	ldr	r1, [r7, #12]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f002 fe70 	bl	800a718 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007a40:	7afb      	ldrb	r3, [r7, #11]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	da0f      	bge.n	8007a7e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a5e:	78fb      	ldrb	r3, [r7, #3]
 8007a60:	f003 020f 	and.w	r2, r3, #15
 8007a64:	4613      	mov	r3, r2
 8007a66:	00db      	lsls	r3, r3, #3
 8007a68:	4413      	add	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	3310      	adds	r3, #16
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	4413      	add	r3, r2
 8007a72:	3304      	adds	r3, #4
 8007a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	705a      	strb	r2, [r3, #1]
 8007a7c:	e00f      	b.n	8007a9e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	f003 020f 	and.w	r2, r3, #15
 8007a84:	4613      	mov	r3, r2
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	4413      	add	r3, r2
 8007a94:	3304      	adds	r3, #4
 8007a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	f003 030f 	and.w	r3, r3, #15
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_PCD_EP_Close+0x6e>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e00e      	b.n	8007ad6 <HAL_PCD_EP_Close+0x8c>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68f9      	ldr	r1, [r7, #12]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f002 feae 	bl	800a828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b086      	sub	sp, #24
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
 8007aea:	460b      	mov	r3, r1
 8007aec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007aee:	7afb      	ldrb	r3, [r7, #11]
 8007af0:	f003 020f 	and.w	r2, r3, #15
 8007af4:	4613      	mov	r3, r2
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	3304      	adds	r3, #4
 8007b06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	2200      	movs	r2, #0
 8007b18:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	f003 030f 	and.w	r3, r3, #15
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	799b      	ldrb	r3, [r3, #6]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d102      	bne.n	8007b3a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6818      	ldr	r0, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	799b      	ldrb	r3, [r3, #6]
 8007b42:	461a      	mov	r2, r3
 8007b44:	6979      	ldr	r1, [r7, #20]
 8007b46:	f002 ff4b 	bl	800a9e0 <USB_EPStartXfer>

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	f003 020f 	and.w	r2, r3, #15
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	00db      	lsls	r3, r3, #3
 8007b6c:	4413      	add	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	440b      	add	r3, r1
 8007b72:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007b76:	681b      	ldr	r3, [r3, #0]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	607a      	str	r2, [r7, #4]
 8007b8e:	603b      	str	r3, [r7, #0]
 8007b90:	460b      	mov	r3, r1
 8007b92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b94:	7afb      	ldrb	r3, [r7, #11]
 8007b96:	f003 020f 	and.w	r2, r3, #15
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	4413      	add	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	3310      	adds	r3, #16
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	3304      	adds	r3, #4
 8007baa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bc4:	7afb      	ldrb	r3, [r7, #11]
 8007bc6:	f003 030f 	and.w	r3, r3, #15
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	799b      	ldrb	r3, [r3, #6]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d102      	bne.n	8007bde <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6818      	ldr	r0, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	799b      	ldrb	r3, [r3, #6]
 8007be6:	461a      	mov	r2, r3
 8007be8:	6979      	ldr	r1, [r7, #20]
 8007bea:	f002 fef9 	bl	800a9e0 <USB_EPStartXfer>

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007c04:	78fb      	ldrb	r3, [r7, #3]
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	7912      	ldrb	r2, [r2, #4]
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d901      	bls.n	8007c16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e04f      	b.n	8007cb6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	da0f      	bge.n	8007c3e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	f003 020f 	and.w	r2, r3, #15
 8007c24:	4613      	mov	r3, r2
 8007c26:	00db      	lsls	r3, r3, #3
 8007c28:	4413      	add	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	3310      	adds	r3, #16
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	4413      	add	r3, r2
 8007c32:	3304      	adds	r3, #4
 8007c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	705a      	strb	r2, [r3, #1]
 8007c3c:	e00d      	b.n	8007c5a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007c3e:	78fa      	ldrb	r2, [r7, #3]
 8007c40:	4613      	mov	r3, r2
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	4413      	add	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	4413      	add	r3, r2
 8007c50:	3304      	adds	r3, #4
 8007c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	f003 030f 	and.w	r3, r3, #15
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <HAL_PCD_EP_SetStall+0x82>
 8007c76:	2302      	movs	r3, #2
 8007c78:	e01d      	b.n	8007cb6 <HAL_PCD_EP_SetStall+0xbe>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68f9      	ldr	r1, [r7, #12]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f003 fa87 	bl	800b19c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c8e:	78fb      	ldrb	r3, [r7, #3]
 8007c90:	f003 030f 	and.w	r3, r3, #15
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d109      	bne.n	8007cac <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	7999      	ldrb	r1, [r3, #6]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f003 fc78 	bl	800b59c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	f003 030f 	and.w	r3, r3, #15
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7912      	ldrb	r2, [r2, #4]
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d901      	bls.n	8007cdc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e042      	b.n	8007d62 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	da0f      	bge.n	8007d04 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	f003 020f 	and.w	r2, r3, #15
 8007cea:	4613      	mov	r3, r2
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	3310      	adds	r3, #16
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	705a      	strb	r2, [r3, #1]
 8007d02:	e00f      	b.n	8007d24 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	f003 020f 	and.w	r2, r3, #15
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	4413      	add	r3, r2
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	f003 030f 	and.w	r3, r3, #15
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d101      	bne.n	8007d44 <HAL_PCD_EP_ClrStall+0x86>
 8007d40:	2302      	movs	r3, #2
 8007d42:	e00e      	b.n	8007d62 <HAL_PCD_EP_ClrStall+0xa4>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68f9      	ldr	r1, [r7, #12]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f003 fa90 	bl	800b278 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007d76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	da0c      	bge.n	8007d98 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d7e:	78fb      	ldrb	r3, [r7, #3]
 8007d80:	f003 020f 	and.w	r2, r3, #15
 8007d84:	4613      	mov	r3, r2
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	3310      	adds	r3, #16
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	4413      	add	r3, r2
 8007d92:	3304      	adds	r3, #4
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	e00c      	b.n	8007db2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	f003 020f 	and.w	r2, r3, #15
 8007d9e:	4613      	mov	r3, r2
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	4413      	add	r3, r2
 8007dae:	3304      	adds	r3, #4
 8007db0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68f9      	ldr	r1, [r7, #12]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f003 f8af 	bl	800af1c <USB_EPStopXfer>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007dc2:	7afb      	ldrb	r3, [r7, #11]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b08a      	sub	sp, #40	@ 0x28
 8007dd0:	af02      	add	r7, sp, #8
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	4613      	mov	r3, r2
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	4413      	add	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	3310      	adds	r3, #16
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	4413      	add	r3, r2
 8007df0:	3304      	adds	r3, #4
 8007df2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	695a      	ldr	r2, [r3, #20]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d901      	bls.n	8007e04 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e06b      	b.n	8007edc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	691a      	ldr	r2, [r3, #16]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d902      	bls.n	8007e20 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	3303      	adds	r3, #3
 8007e24:	089b      	lsrs	r3, r3, #2
 8007e26:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e28:	e02a      	b.n	8007e80 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	691a      	ldr	r2, [r3, #16]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	69fa      	ldr	r2, [r7, #28]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d902      	bls.n	8007e46 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	3303      	adds	r3, #3
 8007e4a:	089b      	lsrs	r3, r3, #2
 8007e4c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	68d9      	ldr	r1, [r3, #12]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	4603      	mov	r3, r0
 8007e62:	6978      	ldr	r0, [r7, #20]
 8007e64:	f003 f904 	bl	800b070 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	441a      	add	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	695a      	ldr	r2, [r3, #20]
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	441a      	add	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d809      	bhi.n	8007eaa <PCD_WriteEmptyTxFifo+0xde>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	695a      	ldr	r2, [r3, #20]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d203      	bcs.n	8007eaa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1bf      	bne.n	8007e2a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	691a      	ldr	r2, [r3, #16]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d811      	bhi.n	8007eda <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	f003 030f 	and.w	r3, r3, #15
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	43db      	mvns	r3, r3
 8007ed0:	6939      	ldr	r1, [r7, #16]
 8007ed2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3720      	adds	r7, #32
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	333c      	adds	r3, #60	@ 0x3c
 8007efc:	3304      	adds	r3, #4
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	799b      	ldrb	r3, [r3, #6]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d17b      	bne.n	8008012 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f003 0308 	and.w	r3, r3, #8
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d015      	beq.n	8007f50 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	4a61      	ldr	r2, [pc, #388]	@ (80080ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	f240 80b9 	bls.w	80080a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 80b3 	beq.w	80080a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f46:	461a      	mov	r2, r3
 8007f48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f4c:	6093      	str	r3, [r2, #8]
 8007f4e:	e0a7      	b.n	80080a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d009      	beq.n	8007f6e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f66:	461a      	mov	r2, r3
 8007f68:	2320      	movs	r3, #32
 8007f6a:	6093      	str	r3, [r2, #8]
 8007f6c:	e098      	b.n	80080a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f040 8093 	bne.w	80080a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	4a4b      	ldr	r2, [pc, #300]	@ (80080ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d90f      	bls.n	8007fa2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00a      	beq.n	8007fa2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f98:	461a      	mov	r2, r3
 8007f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f9e:	6093      	str	r3, [r2, #8]
 8007fa0:	e07e      	b.n	80080a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	4413      	add	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6a1a      	ldr	r2, [r3, #32]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	0159      	lsls	r1, r3, #5
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	440b      	add	r3, r1
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fce:	1ad2      	subs	r2, r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d114      	bne.n	8008004 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6818      	ldr	r0, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007fec:	461a      	mov	r2, r3
 8007fee:	2101      	movs	r1, #1
 8007ff0:	f003 fad4 	bl	800b59c <USB_EP0_OutStart>
 8007ff4:	e006      	b.n	8008004 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	441a      	add	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f005 fd94 	bl	800db38 <HAL_PCD_DataOutStageCallback>
 8008010:	e046      	b.n	80080a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	4a26      	ldr	r2, [pc, #152]	@ (80080b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d124      	bne.n	8008064 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008030:	461a      	mov	r2, r3
 8008032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008036:	6093      	str	r3, [r2, #8]
 8008038:	e032      	b.n	80080a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f003 0320 	and.w	r3, r3, #32
 8008040:	2b00      	cmp	r3, #0
 8008042:	d008      	beq.n	8008056 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008050:	461a      	mov	r2, r3
 8008052:	2320      	movs	r3, #32
 8008054:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	b2db      	uxtb	r3, r3
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f005 fd6b 	bl	800db38 <HAL_PCD_DataOutStageCallback>
 8008062:	e01d      	b.n	80080a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d114      	bne.n	8008094 <PCD_EP_OutXfrComplete_int+0x1b0>
 800806a:	6879      	ldr	r1, [r7, #4]
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	4613      	mov	r3, r2
 8008070:	00db      	lsls	r3, r3, #3
 8008072:	4413      	add	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	440b      	add	r3, r1
 8008078:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d108      	bne.n	8008094 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800808c:	461a      	mov	r2, r3
 800808e:	2100      	movs	r1, #0
 8008090:	f003 fa84 	bl	800b59c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f005 fd4c 	bl	800db38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3720      	adds	r7, #32
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	4f54300a 	.word	0x4f54300a
 80080b0:	4f54310a 	.word	0x4f54310a

080080b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	333c      	adds	r3, #60	@ 0x3c
 80080cc:	3304      	adds	r3, #4
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4a15      	ldr	r2, [pc, #84]	@ (800813c <PCD_EP_OutSetupPacket_int+0x88>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d90e      	bls.n	8008108 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d009      	beq.n	8008108 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008100:	461a      	mov	r2, r3
 8008102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008106:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f005 fd03 	bl	800db14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4a0a      	ldr	r2, [pc, #40]	@ (800813c <PCD_EP_OutSetupPacket_int+0x88>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d90c      	bls.n	8008130 <PCD_EP_OutSetupPacket_int+0x7c>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	799b      	ldrb	r3, [r3, #6]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d108      	bne.n	8008130 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008128:	461a      	mov	r2, r3
 800812a:	2101      	movs	r1, #1
 800812c:	f003 fa36 	bl	800b59c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	4f54300a 	.word	0x4f54300a

08008140 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
 800814c:	4613      	mov	r3, r2
 800814e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008156:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008158:	78fb      	ldrb	r3, [r7, #3]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d107      	bne.n	800816e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800815e:	883b      	ldrh	r3, [r7, #0]
 8008160:	0419      	lsls	r1, r3, #16
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	430a      	orrs	r2, r1
 800816a:	629a      	str	r2, [r3, #40]	@ 0x28
 800816c:	e028      	b.n	80081c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008174:	0c1b      	lsrs	r3, r3, #16
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	4413      	add	r3, r2
 800817a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800817c:	2300      	movs	r3, #0
 800817e:	73fb      	strb	r3, [r7, #15]
 8008180:	e00d      	b.n	800819e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	7bfb      	ldrb	r3, [r7, #15]
 8008188:	3340      	adds	r3, #64	@ 0x40
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	0c1b      	lsrs	r3, r3, #16
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	4413      	add	r3, r2
 8008196:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	3301      	adds	r3, #1
 800819c:	73fb      	strb	r3, [r7, #15]
 800819e:	7bfa      	ldrb	r2, [r7, #15]
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	3b01      	subs	r3, #1
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d3ec      	bcc.n	8008182 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80081a8:	883b      	ldrh	r3, [r7, #0]
 80081aa:	0418      	lsls	r0, r3, #16
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6819      	ldr	r1, [r3, #0]
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	4302      	orrs	r2, r0
 80081b8:	3340      	adds	r3, #64	@ 0x40
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	887a      	ldrh	r2, [r7, #2]
 80081e0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e267      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d075      	beq.n	8008312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008226:	4b88      	ldr	r3, [pc, #544]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f003 030c 	and.w	r3, r3, #12
 800822e:	2b04      	cmp	r3, #4
 8008230:	d00c      	beq.n	800824c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008232:	4b85      	ldr	r3, [pc, #532]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800823a:	2b08      	cmp	r3, #8
 800823c:	d112      	bne.n	8008264 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800823e:	4b82      	ldr	r3, [pc, #520]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800824a:	d10b      	bne.n	8008264 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800824c:	4b7e      	ldr	r3, [pc, #504]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d05b      	beq.n	8008310 <HAL_RCC_OscConfig+0x108>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d157      	bne.n	8008310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e242      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800826c:	d106      	bne.n	800827c <HAL_RCC_OscConfig+0x74>
 800826e:	4b76      	ldr	r3, [pc, #472]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a75      	ldr	r2, [pc, #468]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 8008274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008278:	6013      	str	r3, [r2, #0]
 800827a:	e01d      	b.n	80082b8 <HAL_RCC_OscConfig+0xb0>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008284:	d10c      	bne.n	80082a0 <HAL_RCC_OscConfig+0x98>
 8008286:	4b70      	ldr	r3, [pc, #448]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a6f      	ldr	r2, [pc, #444]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 800828c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008290:	6013      	str	r3, [r2, #0]
 8008292:	4b6d      	ldr	r3, [pc, #436]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a6c      	ldr	r2, [pc, #432]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 8008298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800829c:	6013      	str	r3, [r2, #0]
 800829e:	e00b      	b.n	80082b8 <HAL_RCC_OscConfig+0xb0>
 80082a0:	4b69      	ldr	r3, [pc, #420]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a68      	ldr	r2, [pc, #416]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 80082a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	4b66      	ldr	r3, [pc, #408]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a65      	ldr	r2, [pc, #404]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 80082b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80082b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d013      	beq.n	80082e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082c0:	f7fc fd20 	bl	8004d04 <HAL_GetTick>
 80082c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082c6:	e008      	b.n	80082da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082c8:	f7fc fd1c 	bl	8004d04 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	2b64      	cmp	r3, #100	@ 0x64
 80082d4:	d901      	bls.n	80082da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e207      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082da:	4b5b      	ldr	r3, [pc, #364]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0f0      	beq.n	80082c8 <HAL_RCC_OscConfig+0xc0>
 80082e6:	e014      	b.n	8008312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082e8:	f7fc fd0c 	bl	8004d04 <HAL_GetTick>
 80082ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082ee:	e008      	b.n	8008302 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082f0:	f7fc fd08 	bl	8004d04 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	2b64      	cmp	r3, #100	@ 0x64
 80082fc:	d901      	bls.n	8008302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e1f3      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008302:	4b51      	ldr	r3, [pc, #324]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1f0      	bne.n	80082f0 <HAL_RCC_OscConfig+0xe8>
 800830e:	e000      	b.n	8008312 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0302 	and.w	r3, r3, #2
 800831a:	2b00      	cmp	r3, #0
 800831c:	d063      	beq.n	80083e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800831e:	4b4a      	ldr	r3, [pc, #296]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f003 030c 	and.w	r3, r3, #12
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00b      	beq.n	8008342 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800832a:	4b47      	ldr	r3, [pc, #284]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008332:	2b08      	cmp	r3, #8
 8008334:	d11c      	bne.n	8008370 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008336:	4b44      	ldr	r3, [pc, #272]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d116      	bne.n	8008370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008342:	4b41      	ldr	r3, [pc, #260]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d005      	beq.n	800835a <HAL_RCC_OscConfig+0x152>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d001      	beq.n	800835a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e1c7      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800835a:	4b3b      	ldr	r3, [pc, #236]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	4937      	ldr	r1, [pc, #220]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 800836a:	4313      	orrs	r3, r2
 800836c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800836e:	e03a      	b.n	80083e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d020      	beq.n	80083ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008378:	4b34      	ldr	r3, [pc, #208]	@ (800844c <HAL_RCC_OscConfig+0x244>)
 800837a:	2201      	movs	r2, #1
 800837c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800837e:	f7fc fcc1 	bl	8004d04 <HAL_GetTick>
 8008382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008384:	e008      	b.n	8008398 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008386:	f7fc fcbd 	bl	8004d04 <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d901      	bls.n	8008398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e1a8      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008398:	4b2b      	ldr	r3, [pc, #172]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d0f0      	beq.n	8008386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083a4:	4b28      	ldr	r3, [pc, #160]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	4925      	ldr	r1, [pc, #148]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	600b      	str	r3, [r1, #0]
 80083b8:	e015      	b.n	80083e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083ba:	4b24      	ldr	r3, [pc, #144]	@ (800844c <HAL_RCC_OscConfig+0x244>)
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c0:	f7fc fca0 	bl	8004d04 <HAL_GetTick>
 80083c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083c6:	e008      	b.n	80083da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083c8:	f7fc fc9c 	bl	8004d04 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d901      	bls.n	80083da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e187      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083da:	4b1b      	ldr	r3, [pc, #108]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1f0      	bne.n	80083c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0308 	and.w	r3, r3, #8
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d036      	beq.n	8008460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d016      	beq.n	8008428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083fa:	4b15      	ldr	r3, [pc, #84]	@ (8008450 <HAL_RCC_OscConfig+0x248>)
 80083fc:	2201      	movs	r2, #1
 80083fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008400:	f7fc fc80 	bl	8004d04 <HAL_GetTick>
 8008404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008406:	e008      	b.n	800841a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008408:	f7fc fc7c 	bl	8004d04 <HAL_GetTick>
 800840c:	4602      	mov	r2, r0
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	2b02      	cmp	r3, #2
 8008414:	d901      	bls.n	800841a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e167      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800841a:	4b0b      	ldr	r3, [pc, #44]	@ (8008448 <HAL_RCC_OscConfig+0x240>)
 800841c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800841e:	f003 0302 	and.w	r3, r3, #2
 8008422:	2b00      	cmp	r3, #0
 8008424:	d0f0      	beq.n	8008408 <HAL_RCC_OscConfig+0x200>
 8008426:	e01b      	b.n	8008460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008428:	4b09      	ldr	r3, [pc, #36]	@ (8008450 <HAL_RCC_OscConfig+0x248>)
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800842e:	f7fc fc69 	bl	8004d04 <HAL_GetTick>
 8008432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008434:	e00e      	b.n	8008454 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008436:	f7fc fc65 	bl	8004d04 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d907      	bls.n	8008454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e150      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
 8008448:	40023800 	.word	0x40023800
 800844c:	42470000 	.word	0x42470000
 8008450:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008454:	4b88      	ldr	r3, [pc, #544]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008458:	f003 0302 	and.w	r3, r3, #2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1ea      	bne.n	8008436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0304 	and.w	r3, r3, #4
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 8097 	beq.w	800859c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800846e:	2300      	movs	r3, #0
 8008470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008472:	4b81      	ldr	r3, [pc, #516]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10f      	bne.n	800849e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800847e:	2300      	movs	r3, #0
 8008480:	60bb      	str	r3, [r7, #8]
 8008482:	4b7d      	ldr	r3, [pc, #500]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008486:	4a7c      	ldr	r2, [pc, #496]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800848c:	6413      	str	r3, [r2, #64]	@ 0x40
 800848e:	4b7a      	ldr	r3, [pc, #488]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008496:	60bb      	str	r3, [r7, #8]
 8008498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800849a:	2301      	movs	r3, #1
 800849c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800849e:	4b77      	ldr	r3, [pc, #476]	@ (800867c <HAL_RCC_OscConfig+0x474>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d118      	bne.n	80084dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084aa:	4b74      	ldr	r3, [pc, #464]	@ (800867c <HAL_RCC_OscConfig+0x474>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a73      	ldr	r2, [pc, #460]	@ (800867c <HAL_RCC_OscConfig+0x474>)
 80084b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084b6:	f7fc fc25 	bl	8004d04 <HAL_GetTick>
 80084ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084bc:	e008      	b.n	80084d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084be:	f7fc fc21 	bl	8004d04 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d901      	bls.n	80084d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e10c      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084d0:	4b6a      	ldr	r3, [pc, #424]	@ (800867c <HAL_RCC_OscConfig+0x474>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d0f0      	beq.n	80084be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d106      	bne.n	80084f2 <HAL_RCC_OscConfig+0x2ea>
 80084e4:	4b64      	ldr	r3, [pc, #400]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 80084e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084e8:	4a63      	ldr	r2, [pc, #396]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 80084ea:	f043 0301 	orr.w	r3, r3, #1
 80084ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80084f0:	e01c      	b.n	800852c <HAL_RCC_OscConfig+0x324>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	2b05      	cmp	r3, #5
 80084f8:	d10c      	bne.n	8008514 <HAL_RCC_OscConfig+0x30c>
 80084fa:	4b5f      	ldr	r3, [pc, #380]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 80084fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084fe:	4a5e      	ldr	r2, [pc, #376]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008500:	f043 0304 	orr.w	r3, r3, #4
 8008504:	6713      	str	r3, [r2, #112]	@ 0x70
 8008506:	4b5c      	ldr	r3, [pc, #368]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800850a:	4a5b      	ldr	r2, [pc, #364]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 800850c:	f043 0301 	orr.w	r3, r3, #1
 8008510:	6713      	str	r3, [r2, #112]	@ 0x70
 8008512:	e00b      	b.n	800852c <HAL_RCC_OscConfig+0x324>
 8008514:	4b58      	ldr	r3, [pc, #352]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008518:	4a57      	ldr	r2, [pc, #348]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 800851a:	f023 0301 	bic.w	r3, r3, #1
 800851e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008520:	4b55      	ldr	r3, [pc, #340]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008524:	4a54      	ldr	r2, [pc, #336]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008526:	f023 0304 	bic.w	r3, r3, #4
 800852a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d015      	beq.n	8008560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008534:	f7fc fbe6 	bl	8004d04 <HAL_GetTick>
 8008538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800853a:	e00a      	b.n	8008552 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800853c:	f7fc fbe2 	bl	8004d04 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800854a:	4293      	cmp	r3, r2
 800854c:	d901      	bls.n	8008552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e0cb      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008552:	4b49      	ldr	r3, [pc, #292]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008556:	f003 0302 	and.w	r3, r3, #2
 800855a:	2b00      	cmp	r3, #0
 800855c:	d0ee      	beq.n	800853c <HAL_RCC_OscConfig+0x334>
 800855e:	e014      	b.n	800858a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008560:	f7fc fbd0 	bl	8004d04 <HAL_GetTick>
 8008564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008566:	e00a      	b.n	800857e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008568:	f7fc fbcc 	bl	8004d04 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008576:	4293      	cmp	r3, r2
 8008578:	d901      	bls.n	800857e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e0b5      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800857e:	4b3e      	ldr	r3, [pc, #248]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1ee      	bne.n	8008568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800858a:	7dfb      	ldrb	r3, [r7, #23]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d105      	bne.n	800859c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008590:	4b39      	ldr	r3, [pc, #228]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008594:	4a38      	ldr	r2, [pc, #224]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800859a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 80a1 	beq.w	80086e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80085a6:	4b34      	ldr	r3, [pc, #208]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f003 030c 	and.w	r3, r3, #12
 80085ae:	2b08      	cmp	r3, #8
 80085b0:	d05c      	beq.n	800866c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d141      	bne.n	800863e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085ba:	4b31      	ldr	r3, [pc, #196]	@ (8008680 <HAL_RCC_OscConfig+0x478>)
 80085bc:	2200      	movs	r2, #0
 80085be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085c0:	f7fc fba0 	bl	8004d04 <HAL_GetTick>
 80085c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085c6:	e008      	b.n	80085da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085c8:	f7fc fb9c 	bl	8004d04 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d901      	bls.n	80085da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e087      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085da:	4b27      	ldr	r3, [pc, #156]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1f0      	bne.n	80085c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	69da      	ldr	r2, [r3, #28]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	431a      	orrs	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f4:	019b      	lsls	r3, r3, #6
 80085f6:	431a      	orrs	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fc:	085b      	lsrs	r3, r3, #1
 80085fe:	3b01      	subs	r3, #1
 8008600:	041b      	lsls	r3, r3, #16
 8008602:	431a      	orrs	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008608:	061b      	lsls	r3, r3, #24
 800860a:	491b      	ldr	r1, [pc, #108]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 800860c:	4313      	orrs	r3, r2
 800860e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008610:	4b1b      	ldr	r3, [pc, #108]	@ (8008680 <HAL_RCC_OscConfig+0x478>)
 8008612:	2201      	movs	r2, #1
 8008614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008616:	f7fc fb75 	bl	8004d04 <HAL_GetTick>
 800861a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800861c:	e008      	b.n	8008630 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800861e:	f7fc fb71 	bl	8004d04 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e05c      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008630:	4b11      	ldr	r3, [pc, #68]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0f0      	beq.n	800861e <HAL_RCC_OscConfig+0x416>
 800863c:	e054      	b.n	80086e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800863e:	4b10      	ldr	r3, [pc, #64]	@ (8008680 <HAL_RCC_OscConfig+0x478>)
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008644:	f7fc fb5e 	bl	8004d04 <HAL_GetTick>
 8008648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800864a:	e008      	b.n	800865e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800864c:	f7fc fb5a 	bl	8004d04 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e045      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800865e:	4b06      	ldr	r3, [pc, #24]	@ (8008678 <HAL_RCC_OscConfig+0x470>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1f0      	bne.n	800864c <HAL_RCC_OscConfig+0x444>
 800866a:	e03d      	b.n	80086e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d107      	bne.n	8008684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e038      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
 8008678:	40023800 	.word	0x40023800
 800867c:	40007000 	.word	0x40007000
 8008680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008684:	4b1b      	ldr	r3, [pc, #108]	@ (80086f4 <HAL_RCC_OscConfig+0x4ec>)
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d028      	beq.n	80086e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800869c:	429a      	cmp	r2, r3
 800869e:	d121      	bne.n	80086e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d11a      	bne.n	80086e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80086b4:	4013      	ands	r3, r2
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80086ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80086bc:	4293      	cmp	r3, r2
 80086be:	d111      	bne.n	80086e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ca:	085b      	lsrs	r3, r3, #1
 80086cc:	3b01      	subs	r3, #1
 80086ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d107      	bne.n	80086e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d001      	beq.n	80086e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e000      	b.n	80086ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	40023800 	.word	0x40023800

080086f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e0cc      	b.n	80088a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800870c:	4b68      	ldr	r3, [pc, #416]	@ (80088b0 <HAL_RCC_ClockConfig+0x1b8>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0307 	and.w	r3, r3, #7
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d90c      	bls.n	8008734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800871a:	4b65      	ldr	r3, [pc, #404]	@ (80088b0 <HAL_RCC_ClockConfig+0x1b8>)
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	b2d2      	uxtb	r2, r2
 8008720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008722:	4b63      	ldr	r3, [pc, #396]	@ (80088b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	429a      	cmp	r2, r3
 800872e:	d001      	beq.n	8008734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e0b8      	b.n	80088a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0302 	and.w	r3, r3, #2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d020      	beq.n	8008782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800874c:	4b59      	ldr	r3, [pc, #356]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	4a58      	ldr	r2, [pc, #352]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008752:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008756:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0308 	and.w	r3, r3, #8
 8008760:	2b00      	cmp	r3, #0
 8008762:	d005      	beq.n	8008770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008764:	4b53      	ldr	r3, [pc, #332]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	4a52      	ldr	r2, [pc, #328]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 800876a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800876e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008770:	4b50      	ldr	r3, [pc, #320]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	494d      	ldr	r1, [pc, #308]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 800877e:	4313      	orrs	r3, r2
 8008780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d044      	beq.n	8008818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d107      	bne.n	80087a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008796:	4b47      	ldr	r3, [pc, #284]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d119      	bne.n	80087d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e07f      	b.n	80088a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d003      	beq.n	80087b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d107      	bne.n	80087c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087b6:	4b3f      	ldr	r3, [pc, #252]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d109      	bne.n	80087d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e06f      	b.n	80088a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087c6:	4b3b      	ldr	r3, [pc, #236]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d101      	bne.n	80087d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e067      	b.n	80088a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087d6:	4b37      	ldr	r3, [pc, #220]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f023 0203 	bic.w	r2, r3, #3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	4934      	ldr	r1, [pc, #208]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087e8:	f7fc fa8c 	bl	8004d04 <HAL_GetTick>
 80087ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ee:	e00a      	b.n	8008806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087f0:	f7fc fa88 	bl	8004d04 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087fe:	4293      	cmp	r3, r2
 8008800:	d901      	bls.n	8008806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e04f      	b.n	80088a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008806:	4b2b      	ldr	r3, [pc, #172]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f003 020c 	and.w	r2, r3, #12
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	429a      	cmp	r2, r3
 8008816:	d1eb      	bne.n	80087f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008818:	4b25      	ldr	r3, [pc, #148]	@ (80088b0 <HAL_RCC_ClockConfig+0x1b8>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0307 	and.w	r3, r3, #7
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	429a      	cmp	r2, r3
 8008824:	d20c      	bcs.n	8008840 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008826:	4b22      	ldr	r3, [pc, #136]	@ (80088b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800882e:	4b20      	ldr	r3, [pc, #128]	@ (80088b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	429a      	cmp	r2, r3
 800883a:	d001      	beq.n	8008840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e032      	b.n	80088a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b00      	cmp	r3, #0
 800884a:	d008      	beq.n	800885e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800884c:	4b19      	ldr	r3, [pc, #100]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	4916      	ldr	r1, [pc, #88]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 800885a:	4313      	orrs	r3, r2
 800885c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0308 	and.w	r3, r3, #8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d009      	beq.n	800887e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800886a:	4b12      	ldr	r3, [pc, #72]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	490e      	ldr	r1, [pc, #56]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 800887a:	4313      	orrs	r3, r2
 800887c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800887e:	f000 f821 	bl	80088c4 <HAL_RCC_GetSysClockFreq>
 8008882:	4602      	mov	r2, r0
 8008884:	4b0b      	ldr	r3, [pc, #44]	@ (80088b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	091b      	lsrs	r3, r3, #4
 800888a:	f003 030f 	and.w	r3, r3, #15
 800888e:	490a      	ldr	r1, [pc, #40]	@ (80088b8 <HAL_RCC_ClockConfig+0x1c0>)
 8008890:	5ccb      	ldrb	r3, [r1, r3]
 8008892:	fa22 f303 	lsr.w	r3, r2, r3
 8008896:	4a09      	ldr	r2, [pc, #36]	@ (80088bc <HAL_RCC_ClockConfig+0x1c4>)
 8008898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800889a:	4b09      	ldr	r3, [pc, #36]	@ (80088c0 <HAL_RCC_ClockConfig+0x1c8>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fc f82e 	bl	8004900 <HAL_InitTick>

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	40023c00 	.word	0x40023c00
 80088b4:	40023800 	.word	0x40023800
 80088b8:	08014b68 	.word	0x08014b68
 80088bc:	20000008 	.word	0x20000008
 80088c0:	2000000c 	.word	0x2000000c

080088c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088c8:	b090      	sub	sp, #64	@ 0x40
 80088ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088dc:	4b59      	ldr	r3, [pc, #356]	@ (8008a44 <HAL_RCC_GetSysClockFreq+0x180>)
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f003 030c 	and.w	r3, r3, #12
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	d00d      	beq.n	8008904 <HAL_RCC_GetSysClockFreq+0x40>
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	f200 80a1 	bhi.w	8008a30 <HAL_RCC_GetSysClockFreq+0x16c>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d002      	beq.n	80088f8 <HAL_RCC_GetSysClockFreq+0x34>
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	d003      	beq.n	80088fe <HAL_RCC_GetSysClockFreq+0x3a>
 80088f6:	e09b      	b.n	8008a30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80088f8:	4b53      	ldr	r3, [pc, #332]	@ (8008a48 <HAL_RCC_GetSysClockFreq+0x184>)
 80088fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80088fc:	e09b      	b.n	8008a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80088fe:	4b53      	ldr	r3, [pc, #332]	@ (8008a4c <HAL_RCC_GetSysClockFreq+0x188>)
 8008900:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008902:	e098      	b.n	8008a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008904:	4b4f      	ldr	r3, [pc, #316]	@ (8008a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800890c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800890e:	4b4d      	ldr	r3, [pc, #308]	@ (8008a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d028      	beq.n	800896c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800891a:	4b4a      	ldr	r3, [pc, #296]	@ (8008a44 <HAL_RCC_GetSysClockFreq+0x180>)
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	099b      	lsrs	r3, r3, #6
 8008920:	2200      	movs	r2, #0
 8008922:	623b      	str	r3, [r7, #32]
 8008924:	627a      	str	r2, [r7, #36]	@ 0x24
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800892c:	2100      	movs	r1, #0
 800892e:	4b47      	ldr	r3, [pc, #284]	@ (8008a4c <HAL_RCC_GetSysClockFreq+0x188>)
 8008930:	fb03 f201 	mul.w	r2, r3, r1
 8008934:	2300      	movs	r3, #0
 8008936:	fb00 f303 	mul.w	r3, r0, r3
 800893a:	4413      	add	r3, r2
 800893c:	4a43      	ldr	r2, [pc, #268]	@ (8008a4c <HAL_RCC_GetSysClockFreq+0x188>)
 800893e:	fba0 1202 	umull	r1, r2, r0, r2
 8008942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008944:	460a      	mov	r2, r1
 8008946:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800894a:	4413      	add	r3, r2
 800894c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800894e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008950:	2200      	movs	r2, #0
 8008952:	61bb      	str	r3, [r7, #24]
 8008954:	61fa      	str	r2, [r7, #28]
 8008956:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800895a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800895e:	f7f8 faa9 	bl	8000eb4 <__aeabi_uldivmod>
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	4613      	mov	r3, r2
 8008968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800896a:	e053      	b.n	8008a14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800896c:	4b35      	ldr	r3, [pc, #212]	@ (8008a44 <HAL_RCC_GetSysClockFreq+0x180>)
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	099b      	lsrs	r3, r3, #6
 8008972:	2200      	movs	r2, #0
 8008974:	613b      	str	r3, [r7, #16]
 8008976:	617a      	str	r2, [r7, #20]
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800897e:	f04f 0b00 	mov.w	fp, #0
 8008982:	4652      	mov	r2, sl
 8008984:	465b      	mov	r3, fp
 8008986:	f04f 0000 	mov.w	r0, #0
 800898a:	f04f 0100 	mov.w	r1, #0
 800898e:	0159      	lsls	r1, r3, #5
 8008990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008994:	0150      	lsls	r0, r2, #5
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	ebb2 080a 	subs.w	r8, r2, sl
 800899e:	eb63 090b 	sbc.w	r9, r3, fp
 80089a2:	f04f 0200 	mov.w	r2, #0
 80089a6:	f04f 0300 	mov.w	r3, #0
 80089aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80089ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80089b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80089b6:	ebb2 0408 	subs.w	r4, r2, r8
 80089ba:	eb63 0509 	sbc.w	r5, r3, r9
 80089be:	f04f 0200 	mov.w	r2, #0
 80089c2:	f04f 0300 	mov.w	r3, #0
 80089c6:	00eb      	lsls	r3, r5, #3
 80089c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089cc:	00e2      	lsls	r2, r4, #3
 80089ce:	4614      	mov	r4, r2
 80089d0:	461d      	mov	r5, r3
 80089d2:	eb14 030a 	adds.w	r3, r4, sl
 80089d6:	603b      	str	r3, [r7, #0]
 80089d8:	eb45 030b 	adc.w	r3, r5, fp
 80089dc:	607b      	str	r3, [r7, #4]
 80089de:	f04f 0200 	mov.w	r2, #0
 80089e2:	f04f 0300 	mov.w	r3, #0
 80089e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80089ea:	4629      	mov	r1, r5
 80089ec:	028b      	lsls	r3, r1, #10
 80089ee:	4621      	mov	r1, r4
 80089f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80089f4:	4621      	mov	r1, r4
 80089f6:	028a      	lsls	r2, r1, #10
 80089f8:	4610      	mov	r0, r2
 80089fa:	4619      	mov	r1, r3
 80089fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089fe:	2200      	movs	r2, #0
 8008a00:	60bb      	str	r3, [r7, #8]
 8008a02:	60fa      	str	r2, [r7, #12]
 8008a04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a08:	f7f8 fa54 	bl	8000eb4 <__aeabi_uldivmod>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4613      	mov	r3, r2
 8008a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008a14:	4b0b      	ldr	r3, [pc, #44]	@ (8008a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	0c1b      	lsrs	r3, r3, #16
 8008a1a:	f003 0303 	and.w	r3, r3, #3
 8008a1e:	3301      	adds	r3, #1
 8008a20:	005b      	lsls	r3, r3, #1
 8008a22:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008a24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008a2e:	e002      	b.n	8008a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a30:	4b05      	ldr	r3, [pc, #20]	@ (8008a48 <HAL_RCC_GetSysClockFreq+0x184>)
 8008a32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3740      	adds	r7, #64	@ 0x40
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a42:	bf00      	nop
 8008a44:	40023800 	.word	0x40023800
 8008a48:	00f42400 	.word	0x00f42400
 8008a4c:	017d7840 	.word	0x017d7840

08008a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a54:	4b03      	ldr	r3, [pc, #12]	@ (8008a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a56:	681b      	ldr	r3, [r3, #0]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	20000008 	.word	0x20000008

08008a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008a6c:	f7ff fff0 	bl	8008a50 <HAL_RCC_GetHCLKFreq>
 8008a70:	4602      	mov	r2, r0
 8008a72:	4b05      	ldr	r3, [pc, #20]	@ (8008a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	0a9b      	lsrs	r3, r3, #10
 8008a78:	f003 0307 	and.w	r3, r3, #7
 8008a7c:	4903      	ldr	r1, [pc, #12]	@ (8008a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a7e:	5ccb      	ldrb	r3, [r1, r3]
 8008a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	40023800 	.word	0x40023800
 8008a8c:	08014b78 	.word	0x08014b78

08008a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008a94:	f7ff ffdc 	bl	8008a50 <HAL_RCC_GetHCLKFreq>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	4b05      	ldr	r3, [pc, #20]	@ (8008ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	0b5b      	lsrs	r3, r3, #13
 8008aa0:	f003 0307 	and.w	r3, r3, #7
 8008aa4:	4903      	ldr	r1, [pc, #12]	@ (8008ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008aa6:	5ccb      	ldrb	r3, [r1, r3]
 8008aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	40023800 	.word	0x40023800
 8008ab4:	08014b78 	.word	0x08014b78

08008ab8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	220f      	movs	r2, #15
 8008ac6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008ac8:	4b12      	ldr	r3, [pc, #72]	@ (8008b14 <HAL_RCC_GetClockConfig+0x5c>)
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f003 0203 	and.w	r2, r3, #3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8008b14 <HAL_RCC_GetClockConfig+0x5c>)
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8008b14 <HAL_RCC_GetClockConfig+0x5c>)
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008aec:	4b09      	ldr	r3, [pc, #36]	@ (8008b14 <HAL_RCC_GetClockConfig+0x5c>)
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	08db      	lsrs	r3, r3, #3
 8008af2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008afa:	4b07      	ldr	r3, [pc, #28]	@ (8008b18 <HAL_RCC_GetClockConfig+0x60>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0207 	and.w	r2, r3, #7
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	601a      	str	r2, [r3, #0]
}
 8008b06:	bf00      	nop
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	40023800 	.word	0x40023800
 8008b18:	40023c00 	.word	0x40023c00

08008b1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e07b      	b.n	8008c26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d108      	bne.n	8008b48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b3e:	d009      	beq.n	8008b54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	61da      	str	r2, [r3, #28]
 8008b46:	e005      	b.n	8008b54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d106      	bne.n	8008b74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7fb fcc8 	bl	8004504 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2202      	movs	r2, #2
 8008b78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008b9c:	431a      	orrs	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bd8:	ea42 0103 	orr.w	r1, r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	0c1b      	lsrs	r3, r3, #16
 8008bf2:	f003 0104 	and.w	r1, r3, #4
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfa:	f003 0210 	and.w	r2, r3, #16
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	69da      	ldr	r2, [r3, #28]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e041      	b.n	8008cc4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d106      	bne.n	8008c5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7fb fc9d 	bl	8004594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	f000 fbe5 	bl	800943c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d001      	beq.n	8008ce4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e03c      	b.n	8008d5e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8008d6c <HAL_TIM_Base_Start+0xa0>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d018      	beq.n	8008d28 <HAL_TIM_Base_Start+0x5c>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cfe:	d013      	beq.n	8008d28 <HAL_TIM_Base_Start+0x5c>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a1a      	ldr	r2, [pc, #104]	@ (8008d70 <HAL_TIM_Base_Start+0xa4>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d00e      	beq.n	8008d28 <HAL_TIM_Base_Start+0x5c>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a19      	ldr	r2, [pc, #100]	@ (8008d74 <HAL_TIM_Base_Start+0xa8>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d009      	beq.n	8008d28 <HAL_TIM_Base_Start+0x5c>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a17      	ldr	r2, [pc, #92]	@ (8008d78 <HAL_TIM_Base_Start+0xac>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d004      	beq.n	8008d28 <HAL_TIM_Base_Start+0x5c>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a16      	ldr	r2, [pc, #88]	@ (8008d7c <HAL_TIM_Base_Start+0xb0>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d111      	bne.n	8008d4c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f003 0307 	and.w	r3, r3, #7
 8008d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b06      	cmp	r3, #6
 8008d38:	d010      	beq.n	8008d5c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f042 0201 	orr.w	r2, r2, #1
 8008d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d4a:	e007      	b.n	8008d5c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f042 0201 	orr.w	r2, r2, #1
 8008d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	40010000 	.word	0x40010000
 8008d70:	40000400 	.word	0x40000400
 8008d74:	40000800 	.word	0x40000800
 8008d78:	40000c00 	.word	0x40000c00
 8008d7c:	40014000 	.word	0x40014000

08008d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d001      	beq.n	8008d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e044      	b.n	8008e22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68da      	ldr	r2, [r3, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0201 	orr.w	r2, r2, #1
 8008dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a1e      	ldr	r2, [pc, #120]	@ (8008e30 <HAL_TIM_Base_Start_IT+0xb0>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d018      	beq.n	8008dec <HAL_TIM_Base_Start_IT+0x6c>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dc2:	d013      	beq.n	8008dec <HAL_TIM_Base_Start_IT+0x6c>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a1a      	ldr	r2, [pc, #104]	@ (8008e34 <HAL_TIM_Base_Start_IT+0xb4>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d00e      	beq.n	8008dec <HAL_TIM_Base_Start_IT+0x6c>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a19      	ldr	r2, [pc, #100]	@ (8008e38 <HAL_TIM_Base_Start_IT+0xb8>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d009      	beq.n	8008dec <HAL_TIM_Base_Start_IT+0x6c>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a17      	ldr	r2, [pc, #92]	@ (8008e3c <HAL_TIM_Base_Start_IT+0xbc>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d004      	beq.n	8008dec <HAL_TIM_Base_Start_IT+0x6c>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a16      	ldr	r2, [pc, #88]	@ (8008e40 <HAL_TIM_Base_Start_IT+0xc0>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d111      	bne.n	8008e10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f003 0307 	and.w	r3, r3, #7
 8008df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b06      	cmp	r3, #6
 8008dfc:	d010      	beq.n	8008e20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f042 0201 	orr.w	r2, r2, #1
 8008e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e0e:	e007      	b.n	8008e20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f042 0201 	orr.w	r2, r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	40010000 	.word	0x40010000
 8008e34:	40000400 	.word	0x40000400
 8008e38:	40000800 	.word	0x40000800
 8008e3c:	40000c00 	.word	0x40000c00
 8008e40:	40014000 	.word	0x40014000

08008e44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e041      	b.n	8008eda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d106      	bne.n	8008e70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f839 	bl	8008ee2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2202      	movs	r2, #2
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	4619      	mov	r1, r3
 8008e82:	4610      	mov	r0, r2
 8008e84:	f000 fada 	bl	800943c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	f003 0302 	and.w	r3, r3, #2
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d020      	beq.n	8008f5a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d01b      	beq.n	8008f5a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f06f 0202 	mvn.w	r2, #2
 8008f2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	f003 0303 	and.w	r3, r3, #3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d003      	beq.n	8008f48 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fa5c 	bl	80093fe <HAL_TIM_IC_CaptureCallback>
 8008f46:	e005      	b.n	8008f54 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fa4e 	bl	80093ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fa5f 	bl	8009412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	f003 0304 	and.w	r3, r3, #4
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d020      	beq.n	8008fa6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f003 0304 	and.w	r3, r3, #4
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d01b      	beq.n	8008fa6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f06f 0204 	mvn.w	r2, #4
 8008f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fa36 	bl	80093fe <HAL_TIM_IC_CaptureCallback>
 8008f92:	e005      	b.n	8008fa0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fa28 	bl	80093ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fa39 	bl	8009412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	f003 0308 	and.w	r3, r3, #8
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d020      	beq.n	8008ff2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f003 0308 	and.w	r3, r3, #8
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d01b      	beq.n	8008ff2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f06f 0208 	mvn.w	r2, #8
 8008fc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2204      	movs	r2, #4
 8008fc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	f003 0303 	and.w	r3, r3, #3
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fa10 	bl	80093fe <HAL_TIM_IC_CaptureCallback>
 8008fde:	e005      	b.n	8008fec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fa02 	bl	80093ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fa13 	bl	8009412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	f003 0310 	and.w	r3, r3, #16
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d020      	beq.n	800903e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f003 0310 	and.w	r3, r3, #16
 8009002:	2b00      	cmp	r3, #0
 8009004:	d01b      	beq.n	800903e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f06f 0210 	mvn.w	r2, #16
 800900e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2208      	movs	r2, #8
 8009014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f9ea 	bl	80093fe <HAL_TIM_IC_CaptureCallback>
 800902a:	e005      	b.n	8009038 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f9dc 	bl	80093ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f9ed 	bl	8009412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00c      	beq.n	8009062 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d007      	beq.n	8009062 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f06f 0201 	mvn.w	r2, #1
 800905a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7f9 f973 	bl	8002348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00c      	beq.n	8009086 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009072:	2b00      	cmp	r3, #0
 8009074:	d007      	beq.n	8009086 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800907e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fd05 	bl	8009a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00c      	beq.n	80090aa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009096:	2b00      	cmp	r3, #0
 8009098:	d007      	beq.n	80090aa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80090a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f9be 	bl	8009426 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f003 0320 	and.w	r3, r3, #32
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00c      	beq.n	80090ce <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f003 0320 	and.w	r3, r3, #32
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d007      	beq.n	80090ce <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f06f 0220 	mvn.w	r2, #32
 80090c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fcd7 	bl	8009a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090ce:	bf00      	nop
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d101      	bne.n	80090f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090f2:	2302      	movs	r3, #2
 80090f4:	e0ae      	b.n	8009254 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b0c      	cmp	r3, #12
 8009102:	f200 809f 	bhi.w	8009244 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009106:	a201      	add	r2, pc, #4	@ (adr r2, 800910c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910c:	08009141 	.word	0x08009141
 8009110:	08009245 	.word	0x08009245
 8009114:	08009245 	.word	0x08009245
 8009118:	08009245 	.word	0x08009245
 800911c:	08009181 	.word	0x08009181
 8009120:	08009245 	.word	0x08009245
 8009124:	08009245 	.word	0x08009245
 8009128:	08009245 	.word	0x08009245
 800912c:	080091c3 	.word	0x080091c3
 8009130:	08009245 	.word	0x08009245
 8009134:	08009245 	.word	0x08009245
 8009138:	08009245 	.word	0x08009245
 800913c:	08009203 	.word	0x08009203
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68b9      	ldr	r1, [r7, #8]
 8009146:	4618      	mov	r0, r3
 8009148:	f000 fa04 	bl	8009554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	699a      	ldr	r2, [r3, #24]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f042 0208 	orr.w	r2, r2, #8
 800915a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	699a      	ldr	r2, [r3, #24]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f022 0204 	bic.w	r2, r2, #4
 800916a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6999      	ldr	r1, [r3, #24]
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	691a      	ldr	r2, [r3, #16]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	430a      	orrs	r2, r1
 800917c:	619a      	str	r2, [r3, #24]
      break;
 800917e:	e064      	b.n	800924a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68b9      	ldr	r1, [r7, #8]
 8009186:	4618      	mov	r0, r3
 8009188:	f000 fa4a 	bl	8009620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	699a      	ldr	r2, [r3, #24]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800919a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	699a      	ldr	r2, [r3, #24]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6999      	ldr	r1, [r3, #24]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	021a      	lsls	r2, r3, #8
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	430a      	orrs	r2, r1
 80091be:	619a      	str	r2, [r3, #24]
      break;
 80091c0:	e043      	b.n	800924a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68b9      	ldr	r1, [r7, #8]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 fa95 	bl	80096f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69da      	ldr	r2, [r3, #28]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f042 0208 	orr.w	r2, r2, #8
 80091dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	69da      	ldr	r2, [r3, #28]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 0204 	bic.w	r2, r2, #4
 80091ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69d9      	ldr	r1, [r3, #28]
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	691a      	ldr	r2, [r3, #16]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	430a      	orrs	r2, r1
 80091fe:	61da      	str	r2, [r3, #28]
      break;
 8009200:	e023      	b.n	800924a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68b9      	ldr	r1, [r7, #8]
 8009208:	4618      	mov	r0, r3
 800920a:	f000 fadf 	bl	80097cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	69da      	ldr	r2, [r3, #28]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800921c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	69da      	ldr	r2, [r3, #28]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800922c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	69d9      	ldr	r1, [r3, #28]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	021a      	lsls	r2, r3, #8
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	61da      	str	r2, [r3, #28]
      break;
 8009242:	e002      	b.n	800924a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	75fb      	strb	r3, [r7, #23]
      break;
 8009248:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009252:	7dfb      	ldrb	r3, [r7, #23]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009270:	2b01      	cmp	r3, #1
 8009272:	d101      	bne.n	8009278 <HAL_TIM_ConfigClockSource+0x1c>
 8009274:	2302      	movs	r3, #2
 8009276:	e0b4      	b.n	80093e2 <HAL_TIM_ConfigClockSource+0x186>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2202      	movs	r2, #2
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800929e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092b0:	d03e      	beq.n	8009330 <HAL_TIM_ConfigClockSource+0xd4>
 80092b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092b6:	f200 8087 	bhi.w	80093c8 <HAL_TIM_ConfigClockSource+0x16c>
 80092ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092be:	f000 8086 	beq.w	80093ce <HAL_TIM_ConfigClockSource+0x172>
 80092c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092c6:	d87f      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x16c>
 80092c8:	2b70      	cmp	r3, #112	@ 0x70
 80092ca:	d01a      	beq.n	8009302 <HAL_TIM_ConfigClockSource+0xa6>
 80092cc:	2b70      	cmp	r3, #112	@ 0x70
 80092ce:	d87b      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x16c>
 80092d0:	2b60      	cmp	r3, #96	@ 0x60
 80092d2:	d050      	beq.n	8009376 <HAL_TIM_ConfigClockSource+0x11a>
 80092d4:	2b60      	cmp	r3, #96	@ 0x60
 80092d6:	d877      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x16c>
 80092d8:	2b50      	cmp	r3, #80	@ 0x50
 80092da:	d03c      	beq.n	8009356 <HAL_TIM_ConfigClockSource+0xfa>
 80092dc:	2b50      	cmp	r3, #80	@ 0x50
 80092de:	d873      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x16c>
 80092e0:	2b40      	cmp	r3, #64	@ 0x40
 80092e2:	d058      	beq.n	8009396 <HAL_TIM_ConfigClockSource+0x13a>
 80092e4:	2b40      	cmp	r3, #64	@ 0x40
 80092e6:	d86f      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x16c>
 80092e8:	2b30      	cmp	r3, #48	@ 0x30
 80092ea:	d064      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0x15a>
 80092ec:	2b30      	cmp	r3, #48	@ 0x30
 80092ee:	d86b      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x16c>
 80092f0:	2b20      	cmp	r3, #32
 80092f2:	d060      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0x15a>
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	d867      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x16c>
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d05c      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0x15a>
 80092fc:	2b10      	cmp	r3, #16
 80092fe:	d05a      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0x15a>
 8009300:	e062      	b.n	80093c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009312:	f000 fb25 	bl	8009960 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	609a      	str	r2, [r3, #8]
      break;
 800932e:	e04f      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009340:	f000 fb0e 	bl	8009960 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689a      	ldr	r2, [r3, #8]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009352:	609a      	str	r2, [r3, #8]
      break;
 8009354:	e03c      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009362:	461a      	mov	r2, r3
 8009364:	f000 fa82 	bl	800986c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2150      	movs	r1, #80	@ 0x50
 800936e:	4618      	mov	r0, r3
 8009370:	f000 fadb 	bl	800992a <TIM_ITRx_SetConfig>
      break;
 8009374:	e02c      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009382:	461a      	mov	r2, r3
 8009384:	f000 faa1 	bl	80098ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2160      	movs	r1, #96	@ 0x60
 800938e:	4618      	mov	r0, r3
 8009390:	f000 facb 	bl	800992a <TIM_ITRx_SetConfig>
      break;
 8009394:	e01c      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093a2:	461a      	mov	r2, r3
 80093a4:	f000 fa62 	bl	800986c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2140      	movs	r1, #64	@ 0x40
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fabb 	bl	800992a <TIM_ITRx_SetConfig>
      break;
 80093b4:	e00c      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4619      	mov	r1, r3
 80093c0:	4610      	mov	r0, r2
 80093c2:	f000 fab2 	bl	800992a <TIM_ITRx_SetConfig>
      break;
 80093c6:	e003      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	73fb      	strb	r3, [r7, #15]
      break;
 80093cc:	e000      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80093ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b083      	sub	sp, #12
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093f2:	bf00      	nop
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093fe:	b480      	push	{r7}
 8009400:	b083      	sub	sp, #12
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009406:	bf00      	nop
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800941a:	bf00      	nop
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
	...

0800943c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a3a      	ldr	r2, [pc, #232]	@ (8009538 <TIM_Base_SetConfig+0xfc>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d00f      	beq.n	8009474 <TIM_Base_SetConfig+0x38>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800945a:	d00b      	beq.n	8009474 <TIM_Base_SetConfig+0x38>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a37      	ldr	r2, [pc, #220]	@ (800953c <TIM_Base_SetConfig+0x100>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d007      	beq.n	8009474 <TIM_Base_SetConfig+0x38>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a36      	ldr	r2, [pc, #216]	@ (8009540 <TIM_Base_SetConfig+0x104>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d003      	beq.n	8009474 <TIM_Base_SetConfig+0x38>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a35      	ldr	r2, [pc, #212]	@ (8009544 <TIM_Base_SetConfig+0x108>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d108      	bne.n	8009486 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800947a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	4313      	orrs	r3, r2
 8009484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a2b      	ldr	r2, [pc, #172]	@ (8009538 <TIM_Base_SetConfig+0xfc>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d01b      	beq.n	80094c6 <TIM_Base_SetConfig+0x8a>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009494:	d017      	beq.n	80094c6 <TIM_Base_SetConfig+0x8a>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a28      	ldr	r2, [pc, #160]	@ (800953c <TIM_Base_SetConfig+0x100>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d013      	beq.n	80094c6 <TIM_Base_SetConfig+0x8a>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a27      	ldr	r2, [pc, #156]	@ (8009540 <TIM_Base_SetConfig+0x104>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d00f      	beq.n	80094c6 <TIM_Base_SetConfig+0x8a>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a26      	ldr	r2, [pc, #152]	@ (8009544 <TIM_Base_SetConfig+0x108>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d00b      	beq.n	80094c6 <TIM_Base_SetConfig+0x8a>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a25      	ldr	r2, [pc, #148]	@ (8009548 <TIM_Base_SetConfig+0x10c>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d007      	beq.n	80094c6 <TIM_Base_SetConfig+0x8a>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a24      	ldr	r2, [pc, #144]	@ (800954c <TIM_Base_SetConfig+0x110>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d003      	beq.n	80094c6 <TIM_Base_SetConfig+0x8a>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a23      	ldr	r2, [pc, #140]	@ (8009550 <TIM_Base_SetConfig+0x114>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d108      	bne.n	80094d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	689a      	ldr	r2, [r3, #8]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a0e      	ldr	r2, [pc, #56]	@ (8009538 <TIM_Base_SetConfig+0xfc>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d103      	bne.n	800950c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	691a      	ldr	r2, [r3, #16]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b01      	cmp	r3, #1
 800951c:	d105      	bne.n	800952a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	f023 0201 	bic.w	r2, r3, #1
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	611a      	str	r2, [r3, #16]
  }
}
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	40010000 	.word	0x40010000
 800953c:	40000400 	.word	0x40000400
 8009540:	40000800 	.word	0x40000800
 8009544:	40000c00 	.word	0x40000c00
 8009548:	40014000 	.word	0x40014000
 800954c:	40014400 	.word	0x40014400
 8009550:	40014800 	.word	0x40014800

08009554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	f023 0201 	bic.w	r2, r3, #1
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f023 0303 	bic.w	r3, r3, #3
 800958a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	4313      	orrs	r3, r2
 8009594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f023 0302 	bic.w	r3, r3, #2
 800959c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a1c      	ldr	r2, [pc, #112]	@ (800961c <TIM_OC1_SetConfig+0xc8>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d10c      	bne.n	80095ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	f023 0308 	bic.w	r3, r3, #8
 80095b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	4313      	orrs	r3, r2
 80095c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f023 0304 	bic.w	r3, r3, #4
 80095c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a13      	ldr	r2, [pc, #76]	@ (800961c <TIM_OC1_SetConfig+0xc8>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d111      	bne.n	80095f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	621a      	str	r2, [r3, #32]
}
 8009610:	bf00      	nop
 8009612:	371c      	adds	r7, #28
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	40010000 	.word	0x40010000

08009620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a1b      	ldr	r3, [r3, #32]
 8009634:	f023 0210 	bic.w	r2, r3, #16
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800964e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	4313      	orrs	r3, r2
 8009662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f023 0320 	bic.w	r3, r3, #32
 800966a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	011b      	lsls	r3, r3, #4
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	4313      	orrs	r3, r2
 8009676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a1e      	ldr	r2, [pc, #120]	@ (80096f4 <TIM_OC2_SetConfig+0xd4>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d10d      	bne.n	800969c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	011b      	lsls	r3, r3, #4
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	4313      	orrs	r3, r2
 8009692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800969a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a15      	ldr	r2, [pc, #84]	@ (80096f4 <TIM_OC2_SetConfig+0xd4>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d113      	bne.n	80096cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80096aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80096b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	4313      	orrs	r3, r2
 80096be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	621a      	str	r2, [r3, #32]
}
 80096e6:	bf00      	nop
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	40010000 	.word	0x40010000

080096f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b087      	sub	sp, #28
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a1b      	ldr	r3, [r3, #32]
 800970c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	69db      	ldr	r3, [r3, #28]
 800971e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f023 0303 	bic.w	r3, r3, #3
 800972e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	4313      	orrs	r3, r2
 8009738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	021b      	lsls	r3, r3, #8
 8009748:	697a      	ldr	r2, [r7, #20]
 800974a:	4313      	orrs	r3, r2
 800974c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a1d      	ldr	r2, [pc, #116]	@ (80097c8 <TIM_OC3_SetConfig+0xd0>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d10d      	bne.n	8009772 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800975c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	021b      	lsls	r3, r3, #8
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	4313      	orrs	r3, r2
 8009768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a14      	ldr	r2, [pc, #80]	@ (80097c8 <TIM_OC3_SetConfig+0xd0>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d113      	bne.n	80097a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	011b      	lsls	r3, r3, #4
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	4313      	orrs	r3, r2
 8009794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	4313      	orrs	r3, r2
 80097a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	685a      	ldr	r2, [r3, #4]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	621a      	str	r2, [r3, #32]
}
 80097bc:	bf00      	nop
 80097be:	371c      	adds	r7, #28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	40010000 	.word	0x40010000

080097cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b087      	sub	sp, #28
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	69db      	ldr	r3, [r3, #28]
 80097f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	021b      	lsls	r3, r3, #8
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	4313      	orrs	r3, r2
 800980e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	031b      	lsls	r3, r3, #12
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	4313      	orrs	r3, r2
 8009822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a10      	ldr	r2, [pc, #64]	@ (8009868 <TIM_OC4_SetConfig+0x9c>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d109      	bne.n	8009840 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	019b      	lsls	r3, r3, #6
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	4313      	orrs	r3, r2
 800983e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	621a      	str	r2, [r3, #32]
}
 800985a:	bf00      	nop
 800985c:	371c      	adds	r7, #28
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	40010000 	.word	0x40010000

0800986c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800986c:	b480      	push	{r7}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6a1b      	ldr	r3, [r3, #32]
 800987c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	f023 0201 	bic.w	r2, r3, #1
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	011b      	lsls	r3, r3, #4
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	4313      	orrs	r3, r2
 80098a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f023 030a 	bic.w	r3, r3, #10
 80098a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	621a      	str	r2, [r3, #32]
}
 80098be:	bf00      	nop
 80098c0:	371c      	adds	r7, #28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b087      	sub	sp, #28
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	f023 0210 	bic.w	r2, r3, #16
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80098f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	031b      	lsls	r3, r3, #12
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009906:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	011b      	lsls	r3, r3, #4
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	4313      	orrs	r3, r2
 8009910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	621a      	str	r2, [r3, #32]
}
 800991e:	bf00      	nop
 8009920:	371c      	adds	r7, #28
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800992a:	b480      	push	{r7}
 800992c:	b085      	sub	sp, #20
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	4313      	orrs	r3, r2
 8009948:	f043 0307 	orr.w	r3, r3, #7
 800994c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	609a      	str	r2, [r3, #8]
}
 8009954:	bf00      	nop
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009960:	b480      	push	{r7}
 8009962:	b087      	sub	sp, #28
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
 800996c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800997a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	021a      	lsls	r2, r3, #8
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	431a      	orrs	r2, r3
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	4313      	orrs	r3, r2
 8009988:	697a      	ldr	r2, [r7, #20]
 800998a:	4313      	orrs	r3, r2
 800998c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	697a      	ldr	r2, [r7, #20]
 8009992:	609a      	str	r2, [r3, #8]
}
 8009994:	bf00      	nop
 8009996:	371c      	adds	r7, #28
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d101      	bne.n	80099b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099b4:	2302      	movs	r3, #2
 80099b6:	e050      	b.n	8009a5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2202      	movs	r2, #2
 80099c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a1c      	ldr	r2, [pc, #112]	@ (8009a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d018      	beq.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a04:	d013      	beq.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a18      	ldr	r2, [pc, #96]	@ (8009a6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d00e      	beq.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a16      	ldr	r2, [pc, #88]	@ (8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d009      	beq.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a15      	ldr	r2, [pc, #84]	@ (8009a74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d004      	beq.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a13      	ldr	r2, [pc, #76]	@ (8009a78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d10c      	bne.n	8009a48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	40010000 	.word	0x40010000
 8009a6c:	40000400 	.word	0x40000400
 8009a70:	40000800 	.word	0x40000800
 8009a74:	40000c00 	.word	0x40000c00
 8009a78:	40014000 	.word	0x40014000

08009a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d101      	bne.n	8009ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e042      	b.n	8009b3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d106      	bne.n	8009ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7fa fe68 	bl	80047a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2224      	movs	r2, #36	@ 0x24
 8009ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68da      	ldr	r2, [r3, #12]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f82b 	bl	8009b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	691a      	ldr	r2, [r3, #16]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	695a      	ldr	r2, [r3, #20]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68da      	ldr	r2, [r3, #12]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2220      	movs	r2, #32
 8009b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2220      	movs	r2, #32
 8009b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b48:	b0c0      	sub	sp, #256	@ 0x100
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b60:	68d9      	ldr	r1, [r3, #12]
 8009b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	ea40 0301 	orr.w	r3, r0, r1
 8009b6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b72:	689a      	ldr	r2, [r3, #8]
 8009b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	431a      	orrs	r2, r3
 8009b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009b9c:	f021 010c 	bic.w	r1, r1, #12
 8009ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009baa:	430b      	orrs	r3, r1
 8009bac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bbe:	6999      	ldr	r1, [r3, #24]
 8009bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	ea40 0301 	orr.w	r3, r0, r1
 8009bca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	4b8f      	ldr	r3, [pc, #572]	@ (8009e10 <UART_SetConfig+0x2cc>)
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d005      	beq.n	8009be4 <UART_SetConfig+0xa0>
 8009bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	4b8d      	ldr	r3, [pc, #564]	@ (8009e14 <UART_SetConfig+0x2d0>)
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d104      	bne.n	8009bee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009be4:	f7fe ff54 	bl	8008a90 <HAL_RCC_GetPCLK2Freq>
 8009be8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009bec:	e003      	b.n	8009bf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009bee:	f7fe ff3b 	bl	8008a68 <HAL_RCC_GetPCLK1Freq>
 8009bf2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c00:	f040 810c 	bne.w	8009e1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009c12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009c16:	4622      	mov	r2, r4
 8009c18:	462b      	mov	r3, r5
 8009c1a:	1891      	adds	r1, r2, r2
 8009c1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009c1e:	415b      	adcs	r3, r3
 8009c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009c26:	4621      	mov	r1, r4
 8009c28:	eb12 0801 	adds.w	r8, r2, r1
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	eb43 0901 	adc.w	r9, r3, r1
 8009c32:	f04f 0200 	mov.w	r2, #0
 8009c36:	f04f 0300 	mov.w	r3, #0
 8009c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c46:	4690      	mov	r8, r2
 8009c48:	4699      	mov	r9, r3
 8009c4a:	4623      	mov	r3, r4
 8009c4c:	eb18 0303 	adds.w	r3, r8, r3
 8009c50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c54:	462b      	mov	r3, r5
 8009c56:	eb49 0303 	adc.w	r3, r9, r3
 8009c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009c72:	460b      	mov	r3, r1
 8009c74:	18db      	adds	r3, r3, r3
 8009c76:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c78:	4613      	mov	r3, r2
 8009c7a:	eb42 0303 	adc.w	r3, r2, r3
 8009c7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009c84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009c88:	f7f7 f914 	bl	8000eb4 <__aeabi_uldivmod>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4b61      	ldr	r3, [pc, #388]	@ (8009e18 <UART_SetConfig+0x2d4>)
 8009c92:	fba3 2302 	umull	r2, r3, r3, r2
 8009c96:	095b      	lsrs	r3, r3, #5
 8009c98:	011c      	lsls	r4, r3, #4
 8009c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ca4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009ca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009cac:	4642      	mov	r2, r8
 8009cae:	464b      	mov	r3, r9
 8009cb0:	1891      	adds	r1, r2, r2
 8009cb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009cb4:	415b      	adcs	r3, r3
 8009cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009cbc:	4641      	mov	r1, r8
 8009cbe:	eb12 0a01 	adds.w	sl, r2, r1
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	eb43 0b01 	adc.w	fp, r3, r1
 8009cc8:	f04f 0200 	mov.w	r2, #0
 8009ccc:	f04f 0300 	mov.w	r3, #0
 8009cd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009cd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cdc:	4692      	mov	sl, r2
 8009cde:	469b      	mov	fp, r3
 8009ce0:	4643      	mov	r3, r8
 8009ce2:	eb1a 0303 	adds.w	r3, sl, r3
 8009ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cea:	464b      	mov	r3, r9
 8009cec:	eb4b 0303 	adc.w	r3, fp, r3
 8009cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009d04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d08:	460b      	mov	r3, r1
 8009d0a:	18db      	adds	r3, r3, r3
 8009d0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d0e:	4613      	mov	r3, r2
 8009d10:	eb42 0303 	adc.w	r3, r2, r3
 8009d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009d1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009d1e:	f7f7 f8c9 	bl	8000eb4 <__aeabi_uldivmod>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	4611      	mov	r1, r2
 8009d28:	4b3b      	ldr	r3, [pc, #236]	@ (8009e18 <UART_SetConfig+0x2d4>)
 8009d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8009d2e:	095b      	lsrs	r3, r3, #5
 8009d30:	2264      	movs	r2, #100	@ 0x64
 8009d32:	fb02 f303 	mul.w	r3, r2, r3
 8009d36:	1acb      	subs	r3, r1, r3
 8009d38:	00db      	lsls	r3, r3, #3
 8009d3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009d3e:	4b36      	ldr	r3, [pc, #216]	@ (8009e18 <UART_SetConfig+0x2d4>)
 8009d40:	fba3 2302 	umull	r2, r3, r3, r2
 8009d44:	095b      	lsrs	r3, r3, #5
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009d4c:	441c      	add	r4, r3
 8009d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009d5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009d60:	4642      	mov	r2, r8
 8009d62:	464b      	mov	r3, r9
 8009d64:	1891      	adds	r1, r2, r2
 8009d66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009d68:	415b      	adcs	r3, r3
 8009d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009d70:	4641      	mov	r1, r8
 8009d72:	1851      	adds	r1, r2, r1
 8009d74:	6339      	str	r1, [r7, #48]	@ 0x30
 8009d76:	4649      	mov	r1, r9
 8009d78:	414b      	adcs	r3, r1
 8009d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d7c:	f04f 0200 	mov.w	r2, #0
 8009d80:	f04f 0300 	mov.w	r3, #0
 8009d84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009d88:	4659      	mov	r1, fp
 8009d8a:	00cb      	lsls	r3, r1, #3
 8009d8c:	4651      	mov	r1, sl
 8009d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d92:	4651      	mov	r1, sl
 8009d94:	00ca      	lsls	r2, r1, #3
 8009d96:	4610      	mov	r0, r2
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	4642      	mov	r2, r8
 8009d9e:	189b      	adds	r3, r3, r2
 8009da0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009da4:	464b      	mov	r3, r9
 8009da6:	460a      	mov	r2, r1
 8009da8:	eb42 0303 	adc.w	r3, r2, r3
 8009dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009dbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	18db      	adds	r3, r3, r3
 8009dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009dca:	4613      	mov	r3, r2
 8009dcc:	eb42 0303 	adc.w	r3, r2, r3
 8009dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009dda:	f7f7 f86b 	bl	8000eb4 <__aeabi_uldivmod>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	4b0d      	ldr	r3, [pc, #52]	@ (8009e18 <UART_SetConfig+0x2d4>)
 8009de4:	fba3 1302 	umull	r1, r3, r3, r2
 8009de8:	095b      	lsrs	r3, r3, #5
 8009dea:	2164      	movs	r1, #100	@ 0x64
 8009dec:	fb01 f303 	mul.w	r3, r1, r3
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	00db      	lsls	r3, r3, #3
 8009df4:	3332      	adds	r3, #50	@ 0x32
 8009df6:	4a08      	ldr	r2, [pc, #32]	@ (8009e18 <UART_SetConfig+0x2d4>)
 8009df8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dfc:	095b      	lsrs	r3, r3, #5
 8009dfe:	f003 0207 	and.w	r2, r3, #7
 8009e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4422      	add	r2, r4
 8009e0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e0c:	e106      	b.n	800a01c <UART_SetConfig+0x4d8>
 8009e0e:	bf00      	nop
 8009e10:	40011000 	.word	0x40011000
 8009e14:	40011400 	.word	0x40011400
 8009e18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e20:	2200      	movs	r2, #0
 8009e22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009e2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009e2e:	4642      	mov	r2, r8
 8009e30:	464b      	mov	r3, r9
 8009e32:	1891      	adds	r1, r2, r2
 8009e34:	6239      	str	r1, [r7, #32]
 8009e36:	415b      	adcs	r3, r3
 8009e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e3e:	4641      	mov	r1, r8
 8009e40:	1854      	adds	r4, r2, r1
 8009e42:	4649      	mov	r1, r9
 8009e44:	eb43 0501 	adc.w	r5, r3, r1
 8009e48:	f04f 0200 	mov.w	r2, #0
 8009e4c:	f04f 0300 	mov.w	r3, #0
 8009e50:	00eb      	lsls	r3, r5, #3
 8009e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e56:	00e2      	lsls	r2, r4, #3
 8009e58:	4614      	mov	r4, r2
 8009e5a:	461d      	mov	r5, r3
 8009e5c:	4643      	mov	r3, r8
 8009e5e:	18e3      	adds	r3, r4, r3
 8009e60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e64:	464b      	mov	r3, r9
 8009e66:	eb45 0303 	adc.w	r3, r5, r3
 8009e6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e7e:	f04f 0200 	mov.w	r2, #0
 8009e82:	f04f 0300 	mov.w	r3, #0
 8009e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	008b      	lsls	r3, r1, #2
 8009e8e:	4621      	mov	r1, r4
 8009e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e94:	4621      	mov	r1, r4
 8009e96:	008a      	lsls	r2, r1, #2
 8009e98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009e9c:	f7f7 f80a 	bl	8000eb4 <__aeabi_uldivmod>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4b60      	ldr	r3, [pc, #384]	@ (800a028 <UART_SetConfig+0x4e4>)
 8009ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8009eaa:	095b      	lsrs	r3, r3, #5
 8009eac:	011c      	lsls	r4, r3, #4
 8009eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009eb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009ec0:	4642      	mov	r2, r8
 8009ec2:	464b      	mov	r3, r9
 8009ec4:	1891      	adds	r1, r2, r2
 8009ec6:	61b9      	str	r1, [r7, #24]
 8009ec8:	415b      	adcs	r3, r3
 8009eca:	61fb      	str	r3, [r7, #28]
 8009ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ed0:	4641      	mov	r1, r8
 8009ed2:	1851      	adds	r1, r2, r1
 8009ed4:	6139      	str	r1, [r7, #16]
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	414b      	adcs	r3, r1
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	f04f 0200 	mov.w	r2, #0
 8009ee0:	f04f 0300 	mov.w	r3, #0
 8009ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ee8:	4659      	mov	r1, fp
 8009eea:	00cb      	lsls	r3, r1, #3
 8009eec:	4651      	mov	r1, sl
 8009eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ef2:	4651      	mov	r1, sl
 8009ef4:	00ca      	lsls	r2, r1, #3
 8009ef6:	4610      	mov	r0, r2
 8009ef8:	4619      	mov	r1, r3
 8009efa:	4603      	mov	r3, r0
 8009efc:	4642      	mov	r2, r8
 8009efe:	189b      	adds	r3, r3, r2
 8009f00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f04:	464b      	mov	r3, r9
 8009f06:	460a      	mov	r2, r1
 8009f08:	eb42 0303 	adc.w	r3, r2, r3
 8009f0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009f1c:	f04f 0200 	mov.w	r2, #0
 8009f20:	f04f 0300 	mov.w	r3, #0
 8009f24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009f28:	4649      	mov	r1, r9
 8009f2a:	008b      	lsls	r3, r1, #2
 8009f2c:	4641      	mov	r1, r8
 8009f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f32:	4641      	mov	r1, r8
 8009f34:	008a      	lsls	r2, r1, #2
 8009f36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009f3a:	f7f6 ffbb 	bl	8000eb4 <__aeabi_uldivmod>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	4611      	mov	r1, r2
 8009f44:	4b38      	ldr	r3, [pc, #224]	@ (800a028 <UART_SetConfig+0x4e4>)
 8009f46:	fba3 2301 	umull	r2, r3, r3, r1
 8009f4a:	095b      	lsrs	r3, r3, #5
 8009f4c:	2264      	movs	r2, #100	@ 0x64
 8009f4e:	fb02 f303 	mul.w	r3, r2, r3
 8009f52:	1acb      	subs	r3, r1, r3
 8009f54:	011b      	lsls	r3, r3, #4
 8009f56:	3332      	adds	r3, #50	@ 0x32
 8009f58:	4a33      	ldr	r2, [pc, #204]	@ (800a028 <UART_SetConfig+0x4e4>)
 8009f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5e:	095b      	lsrs	r3, r3, #5
 8009f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f64:	441c      	add	r4, r3
 8009f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009f70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009f74:	4642      	mov	r2, r8
 8009f76:	464b      	mov	r3, r9
 8009f78:	1891      	adds	r1, r2, r2
 8009f7a:	60b9      	str	r1, [r7, #8]
 8009f7c:	415b      	adcs	r3, r3
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f84:	4641      	mov	r1, r8
 8009f86:	1851      	adds	r1, r2, r1
 8009f88:	6039      	str	r1, [r7, #0]
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	414b      	adcs	r3, r1
 8009f8e:	607b      	str	r3, [r7, #4]
 8009f90:	f04f 0200 	mov.w	r2, #0
 8009f94:	f04f 0300 	mov.w	r3, #0
 8009f98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f9c:	4659      	mov	r1, fp
 8009f9e:	00cb      	lsls	r3, r1, #3
 8009fa0:	4651      	mov	r1, sl
 8009fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fa6:	4651      	mov	r1, sl
 8009fa8:	00ca      	lsls	r2, r1, #3
 8009faa:	4610      	mov	r0, r2
 8009fac:	4619      	mov	r1, r3
 8009fae:	4603      	mov	r3, r0
 8009fb0:	4642      	mov	r2, r8
 8009fb2:	189b      	adds	r3, r3, r2
 8009fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fb6:	464b      	mov	r3, r9
 8009fb8:	460a      	mov	r2, r1
 8009fba:	eb42 0303 	adc.w	r3, r2, r3
 8009fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fca:	667a      	str	r2, [r7, #100]	@ 0x64
 8009fcc:	f04f 0200 	mov.w	r2, #0
 8009fd0:	f04f 0300 	mov.w	r3, #0
 8009fd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009fd8:	4649      	mov	r1, r9
 8009fda:	008b      	lsls	r3, r1, #2
 8009fdc:	4641      	mov	r1, r8
 8009fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fe2:	4641      	mov	r1, r8
 8009fe4:	008a      	lsls	r2, r1, #2
 8009fe6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009fea:	f7f6 ff63 	bl	8000eb4 <__aeabi_uldivmod>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4b0d      	ldr	r3, [pc, #52]	@ (800a028 <UART_SetConfig+0x4e4>)
 8009ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ff8:	095b      	lsrs	r3, r3, #5
 8009ffa:	2164      	movs	r1, #100	@ 0x64
 8009ffc:	fb01 f303 	mul.w	r3, r1, r3
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	3332      	adds	r3, #50	@ 0x32
 800a006:	4a08      	ldr	r2, [pc, #32]	@ (800a028 <UART_SetConfig+0x4e4>)
 800a008:	fba2 2303 	umull	r2, r3, r2, r3
 800a00c:	095b      	lsrs	r3, r3, #5
 800a00e:	f003 020f 	and.w	r2, r3, #15
 800a012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4422      	add	r2, r4
 800a01a:	609a      	str	r2, [r3, #8]
}
 800a01c:	bf00      	nop
 800a01e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a022:	46bd      	mov	sp, r7
 800a024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a028:	51eb851f 	.word	0x51eb851f

0800a02c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a02c:	b084      	sub	sp, #16
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	f107 001c 	add.w	r0, r7, #28
 800a03a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a03e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a042:	2b01      	cmp	r3, #1
 800a044:	d123      	bne.n	800a08e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a04a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a05a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a06e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a072:	2b01      	cmp	r3, #1
 800a074:	d105      	bne.n	800a082 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f001 fae8 	bl	800b658 <USB_CoreReset>
 800a088:	4603      	mov	r3, r0
 800a08a:	73fb      	strb	r3, [r7, #15]
 800a08c:	e01b      	b.n	800a0c6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 fadc 	bl	800b658 <USB_CoreReset>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a0a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d106      	bne.n	800a0ba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0b8:	e005      	b.n	800a0c6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a0c6:	7fbb      	ldrb	r3, [r7, #30]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d10b      	bne.n	800a0e4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f043 0206 	orr.w	r2, r3, #6
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f043 0220 	orr.w	r2, r3, #32
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0f0:	b004      	add	sp, #16
 800a0f2:	4770      	bx	lr

0800a0f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b087      	sub	sp, #28
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	4613      	mov	r3, r2
 800a100:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a102:	79fb      	ldrb	r3, [r7, #7]
 800a104:	2b02      	cmp	r3, #2
 800a106:	d165      	bne.n	800a1d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	4a41      	ldr	r2, [pc, #260]	@ (800a210 <USB_SetTurnaroundTime+0x11c>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d906      	bls.n	800a11e <USB_SetTurnaroundTime+0x2a>
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	4a40      	ldr	r2, [pc, #256]	@ (800a214 <USB_SetTurnaroundTime+0x120>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d202      	bcs.n	800a11e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a118:	230f      	movs	r3, #15
 800a11a:	617b      	str	r3, [r7, #20]
 800a11c:	e062      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	4a3c      	ldr	r2, [pc, #240]	@ (800a214 <USB_SetTurnaroundTime+0x120>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d306      	bcc.n	800a134 <USB_SetTurnaroundTime+0x40>
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	4a3b      	ldr	r2, [pc, #236]	@ (800a218 <USB_SetTurnaroundTime+0x124>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d202      	bcs.n	800a134 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a12e:	230e      	movs	r3, #14
 800a130:	617b      	str	r3, [r7, #20]
 800a132:	e057      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	4a38      	ldr	r2, [pc, #224]	@ (800a218 <USB_SetTurnaroundTime+0x124>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d306      	bcc.n	800a14a <USB_SetTurnaroundTime+0x56>
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	4a37      	ldr	r2, [pc, #220]	@ (800a21c <USB_SetTurnaroundTime+0x128>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d202      	bcs.n	800a14a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a144:	230d      	movs	r3, #13
 800a146:	617b      	str	r3, [r7, #20]
 800a148:	e04c      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	4a33      	ldr	r2, [pc, #204]	@ (800a21c <USB_SetTurnaroundTime+0x128>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d306      	bcc.n	800a160 <USB_SetTurnaroundTime+0x6c>
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	4a32      	ldr	r2, [pc, #200]	@ (800a220 <USB_SetTurnaroundTime+0x12c>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d802      	bhi.n	800a160 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a15a:	230c      	movs	r3, #12
 800a15c:	617b      	str	r3, [r7, #20]
 800a15e:	e041      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	4a2f      	ldr	r2, [pc, #188]	@ (800a220 <USB_SetTurnaroundTime+0x12c>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d906      	bls.n	800a176 <USB_SetTurnaroundTime+0x82>
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	4a2e      	ldr	r2, [pc, #184]	@ (800a224 <USB_SetTurnaroundTime+0x130>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d802      	bhi.n	800a176 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a170:	230b      	movs	r3, #11
 800a172:	617b      	str	r3, [r7, #20]
 800a174:	e036      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	4a2a      	ldr	r2, [pc, #168]	@ (800a224 <USB_SetTurnaroundTime+0x130>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d906      	bls.n	800a18c <USB_SetTurnaroundTime+0x98>
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	4a29      	ldr	r2, [pc, #164]	@ (800a228 <USB_SetTurnaroundTime+0x134>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d802      	bhi.n	800a18c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a186:	230a      	movs	r3, #10
 800a188:	617b      	str	r3, [r7, #20]
 800a18a:	e02b      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	4a26      	ldr	r2, [pc, #152]	@ (800a228 <USB_SetTurnaroundTime+0x134>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d906      	bls.n	800a1a2 <USB_SetTurnaroundTime+0xae>
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	4a25      	ldr	r2, [pc, #148]	@ (800a22c <USB_SetTurnaroundTime+0x138>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d202      	bcs.n	800a1a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a19c:	2309      	movs	r3, #9
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	e020      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	4a21      	ldr	r2, [pc, #132]	@ (800a22c <USB_SetTurnaroundTime+0x138>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d306      	bcc.n	800a1b8 <USB_SetTurnaroundTime+0xc4>
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	4a20      	ldr	r2, [pc, #128]	@ (800a230 <USB_SetTurnaroundTime+0x13c>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d802      	bhi.n	800a1b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	617b      	str	r3, [r7, #20]
 800a1b6:	e015      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	4a1d      	ldr	r2, [pc, #116]	@ (800a230 <USB_SetTurnaroundTime+0x13c>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d906      	bls.n	800a1ce <USB_SetTurnaroundTime+0xda>
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	4a1c      	ldr	r2, [pc, #112]	@ (800a234 <USB_SetTurnaroundTime+0x140>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d202      	bcs.n	800a1ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a1c8:	2307      	movs	r3, #7
 800a1ca:	617b      	str	r3, [r7, #20]
 800a1cc:	e00a      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a1ce:	2306      	movs	r3, #6
 800a1d0:	617b      	str	r3, [r7, #20]
 800a1d2:	e007      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a1d4:	79fb      	ldrb	r3, [r7, #7]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d102      	bne.n	800a1e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a1da:	2309      	movs	r3, #9
 800a1dc:	617b      	str	r3, [r7, #20]
 800a1de:	e001      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a1e0:	2309      	movs	r3, #9
 800a1e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	68da      	ldr	r2, [r3, #12]
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	029b      	lsls	r3, r3, #10
 800a1f8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	371c      	adds	r7, #28
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	00d8acbf 	.word	0x00d8acbf
 800a214:	00e4e1c0 	.word	0x00e4e1c0
 800a218:	00f42400 	.word	0x00f42400
 800a21c:	01067380 	.word	0x01067380
 800a220:	011a499f 	.word	0x011a499f
 800a224:	01312cff 	.word	0x01312cff
 800a228:	014ca43f 	.word	0x014ca43f
 800a22c:	016e3600 	.word	0x016e3600
 800a230:	01a6ab1f 	.word	0x01a6ab1f
 800a234:	01e84800 	.word	0x01e84800

0800a238 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	f043 0201 	orr.w	r2, r3, #1
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f023 0201 	bic.w	r2, r3, #1
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a288:	2300      	movs	r3, #0
 800a28a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a298:	78fb      	ldrb	r3, [r7, #3]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d115      	bne.n	800a2ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a2aa:	200a      	movs	r0, #10
 800a2ac:	f7fa fd36 	bl	8004d1c <HAL_Delay>
      ms += 10U;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	330a      	adds	r3, #10
 800a2b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 f93f 	bl	800b53a <USB_GetMode>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d01e      	beq.n	800a300 <USB_SetCurrentMode+0x84>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2bc7      	cmp	r3, #199	@ 0xc7
 800a2c6:	d9f0      	bls.n	800a2aa <USB_SetCurrentMode+0x2e>
 800a2c8:	e01a      	b.n	800a300 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a2ca:	78fb      	ldrb	r3, [r7, #3]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d115      	bne.n	800a2fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a2dc:	200a      	movs	r0, #10
 800a2de:	f7fa fd1d 	bl	8004d1c <HAL_Delay>
      ms += 10U;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	330a      	adds	r3, #10
 800a2e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f001 f926 	bl	800b53a <USB_GetMode>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d005      	beq.n	800a300 <USB_SetCurrentMode+0x84>
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2bc7      	cmp	r3, #199	@ 0xc7
 800a2f8:	d9f0      	bls.n	800a2dc <USB_SetCurrentMode+0x60>
 800a2fa:	e001      	b.n	800a300 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e005      	b.n	800a30c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2bc8      	cmp	r3, #200	@ 0xc8
 800a304:	d101      	bne.n	800a30a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e000      	b.n	800a30c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a314:	b084      	sub	sp, #16
 800a316:	b580      	push	{r7, lr}
 800a318:	b086      	sub	sp, #24
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a32e:	2300      	movs	r3, #0
 800a330:	613b      	str	r3, [r7, #16]
 800a332:	e009      	b.n	800a348 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	3340      	adds	r3, #64	@ 0x40
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	2200      	movs	r2, #0
 800a340:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	3301      	adds	r3, #1
 800a346:	613b      	str	r3, [r7, #16]
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	2b0e      	cmp	r3, #14
 800a34c:	d9f2      	bls.n	800a334 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a34e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a352:	2b00      	cmp	r3, #0
 800a354:	d11c      	bne.n	800a390 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a364:	f043 0302 	orr.w	r3, r3, #2
 800a368:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a36e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a37a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a386:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	639a      	str	r2, [r3, #56]	@ 0x38
 800a38e:	e00b      	b.n	800a3a8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a394:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a3b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d10d      	bne.n	800a3d8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a3bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d104      	bne.n	800a3ce <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f968 	bl	800a69c <USB_SetDevSpeed>
 800a3cc:	e008      	b.n	800a3e0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f963 	bl	800a69c <USB_SetDevSpeed>
 800a3d6:	e003      	b.n	800a3e0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a3d8:	2103      	movs	r1, #3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f95e 	bl	800a69c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a3e0:	2110      	movs	r1, #16
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f8fa 	bl	800a5dc <USB_FlushTxFifo>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f924 	bl	800a640 <USB_FlushRxFifo>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a408:	461a      	mov	r2, r3
 800a40a:	2300      	movs	r3, #0
 800a40c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a414:	461a      	mov	r2, r3
 800a416:	2300      	movs	r3, #0
 800a418:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a420:	461a      	mov	r2, r3
 800a422:	2300      	movs	r3, #0
 800a424:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a426:	2300      	movs	r3, #0
 800a428:	613b      	str	r3, [r7, #16]
 800a42a:	e043      	b.n	800a4b4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	015a      	lsls	r2, r3, #5
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	4413      	add	r3, r2
 800a434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a43e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a442:	d118      	bne.n	800a476 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10a      	bne.n	800a460 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4413      	add	r3, r2
 800a452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a456:	461a      	mov	r2, r3
 800a458:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	e013      	b.n	800a488 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	015a      	lsls	r2, r3, #5
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	4413      	add	r3, r2
 800a468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a46c:	461a      	mov	r2, r3
 800a46e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a472:	6013      	str	r3, [r2, #0]
 800a474:	e008      	b.n	800a488 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a482:	461a      	mov	r2, r3
 800a484:	2300      	movs	r3, #0
 800a486:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a494:	461a      	mov	r2, r3
 800a496:	2300      	movs	r3, #0
 800a498:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	015a      	lsls	r2, r3, #5
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a4ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	613b      	str	r3, [r7, #16]
 800a4b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d3b5      	bcc.n	800a42c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	613b      	str	r3, [r7, #16]
 800a4c4:	e043      	b.n	800a54e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4dc:	d118      	bne.n	800a510 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	015a      	lsls	r2, r3, #5
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	e013      	b.n	800a522 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	015a      	lsls	r2, r3, #5
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4413      	add	r3, r2
 800a502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a506:	461a      	mov	r2, r3
 800a508:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a50c:	6013      	str	r3, [r2, #0]
 800a50e:	e008      	b.n	800a522 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a51c:	461a      	mov	r2, r3
 800a51e:	2300      	movs	r3, #0
 800a520:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a52e:	461a      	mov	r2, r3
 800a530:	2300      	movs	r3, #0
 800a532:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	015a      	lsls	r2, r3, #5
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a540:	461a      	mov	r2, r3
 800a542:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a546:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	3301      	adds	r3, #1
 800a54c:	613b      	str	r3, [r7, #16]
 800a54e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a552:	461a      	mov	r2, r3
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	4293      	cmp	r3, r2
 800a558:	d3b5      	bcc.n	800a4c6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a56c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a57a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a57c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a580:	2b00      	cmp	r3, #0
 800a582:	d105      	bne.n	800a590 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	f043 0210 	orr.w	r2, r3, #16
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	699a      	ldr	r2, [r3, #24]
 800a594:	4b10      	ldr	r3, [pc, #64]	@ (800a5d8 <USB_DevInit+0x2c4>)
 800a596:	4313      	orrs	r3, r2
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a59c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d005      	beq.n	800a5b0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	699b      	ldr	r3, [r3, #24]
 800a5a8:	f043 0208 	orr.w	r2, r3, #8
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a5b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d107      	bne.n	800a5c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5c0:	f043 0304 	orr.w	r3, r3, #4
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5d4:	b004      	add	sp, #16
 800a5d6:	4770      	bx	lr
 800a5d8:	803c3800 	.word	0x803c3800

0800a5dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5f6:	d901      	bls.n	800a5fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e01b      	b.n	800a634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	daf2      	bge.n	800a5ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a604:	2300      	movs	r3, #0
 800a606:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	019b      	lsls	r3, r3, #6
 800a60c:	f043 0220 	orr.w	r2, r3, #32
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3301      	adds	r3, #1
 800a618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a620:	d901      	bls.n	800a626 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e006      	b.n	800a634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	f003 0320 	and.w	r3, r3, #32
 800a62e:	2b20      	cmp	r3, #32
 800a630:	d0f0      	beq.n	800a614 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3714      	adds	r7, #20
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a648:	2300      	movs	r3, #0
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	3301      	adds	r3, #1
 800a650:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a658:	d901      	bls.n	800a65e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a65a:	2303      	movs	r3, #3
 800a65c:	e018      	b.n	800a690 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	2b00      	cmp	r3, #0
 800a664:	daf2      	bge.n	800a64c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2210      	movs	r2, #16
 800a66e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	3301      	adds	r3, #1
 800a674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a67c:	d901      	bls.n	800a682 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a67e:	2303      	movs	r3, #3
 800a680:	e006      	b.n	800a690 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	f003 0310 	and.w	r3, r3, #16
 800a68a:	2b10      	cmp	r3, #16
 800a68c:	d0f0      	beq.n	800a670 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	78fb      	ldrb	r3, [r7, #3]
 800a6b6:	68f9      	ldr	r1, [r7, #12]
 800a6b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3714      	adds	r7, #20
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr

0800a6ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a6ce:	b480      	push	{r7}
 800a6d0:	b087      	sub	sp, #28
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f003 0306 	and.w	r3, r3, #6
 800a6e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d102      	bne.n	800a6f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	75fb      	strb	r3, [r7, #23]
 800a6f2:	e00a      	b.n	800a70a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d002      	beq.n	800a700 <USB_GetDevSpeed+0x32>
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b06      	cmp	r3, #6
 800a6fe:	d102      	bne.n	800a706 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a700:	2302      	movs	r3, #2
 800a702:	75fb      	strb	r3, [r7, #23]
 800a704:	e001      	b.n	800a70a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a706:	230f      	movs	r3, #15
 800a708:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a70a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	371c      	adds	r7, #28
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	785b      	ldrb	r3, [r3, #1]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d13a      	bne.n	800a7aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a73a:	69da      	ldr	r2, [r3, #28]
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	f003 030f 	and.w	r3, r3, #15
 800a744:	2101      	movs	r1, #1
 800a746:	fa01 f303 	lsl.w	r3, r1, r3
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	68f9      	ldr	r1, [r7, #12]
 800a74e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a752:	4313      	orrs	r3, r2
 800a754:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d155      	bne.n	800a818 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	791b      	ldrb	r3, [r3, #4]
 800a786:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a788:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	059b      	lsls	r3, r3, #22
 800a78e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a790:	4313      	orrs	r3, r2
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	0151      	lsls	r1, r2, #5
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	440a      	add	r2, r1
 800a79a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a79e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	e036      	b.n	800a818 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7b0:	69da      	ldr	r2, [r3, #28]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	f003 030f 	and.w	r3, r3, #15
 800a7ba:	2101      	movs	r1, #1
 800a7bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a7c0:	041b      	lsls	r3, r3, #16
 800a7c2:	68f9      	ldr	r1, [r7, #12]
 800a7c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d11a      	bne.n	800a818 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	015a      	lsls	r2, r3, #5
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	791b      	ldrb	r3, [r3, #4]
 800a7fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7fe:	430b      	orrs	r3, r1
 800a800:	4313      	orrs	r3, r2
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	0151      	lsls	r1, r2, #5
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	440a      	add	r2, r1
 800a80a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a80e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a816:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
	...

0800a828 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	785b      	ldrb	r3, [r3, #1]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d161      	bne.n	800a908 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	015a      	lsls	r2, r3, #5
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	4413      	add	r3, r2
 800a84c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a85a:	d11f      	bne.n	800a89c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	015a      	lsls	r2, r3, #5
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	4413      	add	r3, r2
 800a864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	0151      	lsls	r1, r2, #5
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	440a      	add	r2, r1
 800a872:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a876:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a87a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	0151      	lsls	r1, r2, #5
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	440a      	add	r2, r1
 800a892:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a896:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a89a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	f003 030f 	and.w	r3, r3, #15
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	43db      	mvns	r3, r3
 800a8b6:	68f9      	ldr	r1, [r7, #12]
 800a8b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8bc:	4013      	ands	r3, r2
 800a8be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8c6:	69da      	ldr	r2, [r3, #28]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	f003 030f 	and.w	r3, r3, #15
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	43db      	mvns	r3, r3
 800a8da:	68f9      	ldr	r1, [r7, #12]
 800a8dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	015a      	lsls	r2, r3, #5
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	0159      	lsls	r1, r3, #5
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	440b      	add	r3, r1
 800a8fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8fe:	4619      	mov	r1, r3
 800a900:	4b35      	ldr	r3, [pc, #212]	@ (800a9d8 <USB_DeactivateEndpoint+0x1b0>)
 800a902:	4013      	ands	r3, r2
 800a904:	600b      	str	r3, [r1, #0]
 800a906:	e060      	b.n	800a9ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	015a      	lsls	r2, r3, #5
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	4413      	add	r3, r2
 800a910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a91a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a91e:	d11f      	bne.n	800a960 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	015a      	lsls	r2, r3, #5
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	4413      	add	r3, r2
 800a928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	0151      	lsls	r1, r2, #5
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	440a      	add	r2, r1
 800a936:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a93a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a93e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	015a      	lsls	r2, r3, #5
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	4413      	add	r3, r2
 800a948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	0151      	lsls	r1, r2, #5
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	440a      	add	r2, r1
 800a956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a95a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a95e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	f003 030f 	and.w	r3, r3, #15
 800a970:	2101      	movs	r1, #1
 800a972:	fa01 f303 	lsl.w	r3, r1, r3
 800a976:	041b      	lsls	r3, r3, #16
 800a978:	43db      	mvns	r3, r3
 800a97a:	68f9      	ldr	r1, [r7, #12]
 800a97c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a980:	4013      	ands	r3, r2
 800a982:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a98a:	69da      	ldr	r2, [r3, #28]
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	f003 030f 	and.w	r3, r3, #15
 800a994:	2101      	movs	r1, #1
 800a996:	fa01 f303 	lsl.w	r3, r1, r3
 800a99a:	041b      	lsls	r3, r3, #16
 800a99c:	43db      	mvns	r3, r3
 800a99e:	68f9      	ldr	r1, [r7, #12]
 800a9a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	015a      	lsls	r2, r3, #5
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	0159      	lsls	r1, r3, #5
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	440b      	add	r3, r1
 800a9be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	4b05      	ldr	r3, [pc, #20]	@ (800a9dc <USB_DeactivateEndpoint+0x1b4>)
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr
 800a9d8:	ec337800 	.word	0xec337800
 800a9dc:	eff37800 	.word	0xeff37800

0800a9e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08a      	sub	sp, #40	@ 0x28
 800a9e4:	af02      	add	r7, sp, #8
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	785b      	ldrb	r3, [r3, #1]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	f040 817f 	bne.w	800ad00 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d132      	bne.n	800aa70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	015a      	lsls	r2, r3, #5
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	4413      	add	r3, r2
 800aa12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	0151      	lsls	r1, r2, #5
 800aa1c:	69fa      	ldr	r2, [r7, #28]
 800aa1e:	440a      	add	r2, r1
 800aa20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa24:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aa28:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aa2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	015a      	lsls	r2, r3, #5
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	4413      	add	r3, r2
 800aa36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	69ba      	ldr	r2, [r7, #24]
 800aa3e:	0151      	lsls	r1, r2, #5
 800aa40:	69fa      	ldr	r2, [r7, #28]
 800aa42:	440a      	add	r2, r1
 800aa44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	015a      	lsls	r2, r3, #5
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	4413      	add	r3, r2
 800aa56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	69ba      	ldr	r2, [r7, #24]
 800aa5e:	0151      	lsls	r1, r2, #5
 800aa60:	69fa      	ldr	r2, [r7, #28]
 800aa62:	440a      	add	r2, r1
 800aa64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa68:	0cdb      	lsrs	r3, r3, #19
 800aa6a:	04db      	lsls	r3, r3, #19
 800aa6c:	6113      	str	r3, [r2, #16]
 800aa6e:	e097      	b.n	800aba0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	015a      	lsls	r2, r3, #5
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	4413      	add	r3, r2
 800aa78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	69ba      	ldr	r2, [r7, #24]
 800aa80:	0151      	lsls	r1, r2, #5
 800aa82:	69fa      	ldr	r2, [r7, #28]
 800aa84:	440a      	add	r2, r1
 800aa86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa8a:	0cdb      	lsrs	r3, r3, #19
 800aa8c:	04db      	lsls	r3, r3, #19
 800aa8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	69ba      	ldr	r2, [r7, #24]
 800aaa0:	0151      	lsls	r1, r2, #5
 800aaa2:	69fa      	ldr	r2, [r7, #28]
 800aaa4:	440a      	add	r2, r1
 800aaa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaaa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aaae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aab2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d11a      	bne.n	800aaf0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	691a      	ldr	r2, [r3, #16]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d903      	bls.n	800aace <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	689a      	ldr	r2, [r3, #8]
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	015a      	lsls	r2, r3, #5
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	4413      	add	r3, r2
 800aad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	69ba      	ldr	r2, [r7, #24]
 800aade:	0151      	lsls	r1, r2, #5
 800aae0:	69fa      	ldr	r2, [r7, #28]
 800aae2:	440a      	add	r2, r1
 800aae4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aae8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aaec:	6113      	str	r3, [r2, #16]
 800aaee:	e044      	b.n	800ab7a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	691a      	ldr	r2, [r3, #16]
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	4413      	add	r3, r2
 800aafa:	1e5a      	subs	r2, r3, #1
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab04:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	015a      	lsls	r2, r3, #5
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab12:	691a      	ldr	r2, [r3, #16]
 800ab14:	8afb      	ldrh	r3, [r7, #22]
 800ab16:	04d9      	lsls	r1, r3, #19
 800ab18:	4ba4      	ldr	r3, [pc, #656]	@ (800adac <USB_EPStartXfer+0x3cc>)
 800ab1a:	400b      	ands	r3, r1
 800ab1c:	69b9      	ldr	r1, [r7, #24]
 800ab1e:	0148      	lsls	r0, r1, #5
 800ab20:	69f9      	ldr	r1, [r7, #28]
 800ab22:	4401      	add	r1, r0
 800ab24:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	791b      	ldrb	r3, [r3, #4]
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d122      	bne.n	800ab7a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	69ba      	ldr	r2, [r7, #24]
 800ab44:	0151      	lsls	r1, r2, #5
 800ab46:	69fa      	ldr	r2, [r7, #28]
 800ab48:	440a      	add	r2, r1
 800ab4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab4e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ab52:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	015a      	lsls	r2, r3, #5
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab60:	691a      	ldr	r2, [r3, #16]
 800ab62:	8afb      	ldrh	r3, [r7, #22]
 800ab64:	075b      	lsls	r3, r3, #29
 800ab66:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800ab6a:	69b9      	ldr	r1, [r7, #24]
 800ab6c:	0148      	lsls	r0, r1, #5
 800ab6e:	69f9      	ldr	r1, [r7, #28]
 800ab70:	4401      	add	r1, r0
 800ab72:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab76:	4313      	orrs	r3, r2
 800ab78:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	015a      	lsls	r2, r3, #5
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	4413      	add	r3, r2
 800ab82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab86:	691a      	ldr	r2, [r3, #16]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab90:	69b9      	ldr	r1, [r7, #24]
 800ab92:	0148      	lsls	r0, r1, #5
 800ab94:	69f9      	ldr	r1, [r7, #28]
 800ab96:	4401      	add	r1, r0
 800ab98:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aba0:	79fb      	ldrb	r3, [r7, #7]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d14b      	bne.n	800ac3e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d009      	beq.n	800abc2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	015a      	lsls	r2, r3, #5
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	4413      	add	r3, r2
 800abb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abba:	461a      	mov	r2, r3
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	69db      	ldr	r3, [r3, #28]
 800abc0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	791b      	ldrb	r3, [r3, #4]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d128      	bne.n	800ac1c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d110      	bne.n	800abfc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	69ba      	ldr	r2, [r7, #24]
 800abea:	0151      	lsls	r1, r2, #5
 800abec:	69fa      	ldr	r2, [r7, #28]
 800abee:	440a      	add	r2, r1
 800abf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abf4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800abf8:	6013      	str	r3, [r2, #0]
 800abfa:	e00f      	b.n	800ac1c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	015a      	lsls	r2, r3, #5
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	4413      	add	r3, r2
 800ac04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	69ba      	ldr	r2, [r7, #24]
 800ac0c:	0151      	lsls	r1, r2, #5
 800ac0e:	69fa      	ldr	r2, [r7, #28]
 800ac10:	440a      	add	r2, r1
 800ac12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac1a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	69ba      	ldr	r2, [r7, #24]
 800ac2c:	0151      	lsls	r1, r2, #5
 800ac2e:	69fa      	ldr	r2, [r7, #28]
 800ac30:	440a      	add	r2, r1
 800ac32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac36:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ac3a:	6013      	str	r3, [r2, #0]
 800ac3c:	e166      	b.n	800af0c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	015a      	lsls	r2, r3, #5
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	4413      	add	r3, r2
 800ac46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	69ba      	ldr	r2, [r7, #24]
 800ac4e:	0151      	lsls	r1, r2, #5
 800ac50:	69fa      	ldr	r2, [r7, #28]
 800ac52:	440a      	add	r2, r1
 800ac54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac58:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ac5c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	791b      	ldrb	r3, [r3, #4]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d015      	beq.n	800ac92 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f000 814e 	beq.w	800af0c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	f003 030f 	and.w	r3, r3, #15
 800ac80:	2101      	movs	r1, #1
 800ac82:	fa01 f303 	lsl.w	r3, r1, r3
 800ac86:	69f9      	ldr	r1, [r7, #28]
 800ac88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	634b      	str	r3, [r1, #52]	@ 0x34
 800ac90:	e13c      	b.n	800af0c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d110      	bne.n	800acc4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	015a      	lsls	r2, r3, #5
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	4413      	add	r3, r2
 800acaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	69ba      	ldr	r2, [r7, #24]
 800acb2:	0151      	lsls	r1, r2, #5
 800acb4:	69fa      	ldr	r2, [r7, #28]
 800acb6:	440a      	add	r2, r1
 800acb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800acc0:	6013      	str	r3, [r2, #0]
 800acc2:	e00f      	b.n	800ace4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	4413      	add	r3, r2
 800accc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	69ba      	ldr	r2, [r7, #24]
 800acd4:	0151      	lsls	r1, r2, #5
 800acd6:	69fa      	ldr	r2, [r7, #28]
 800acd8:	440a      	add	r2, r1
 800acda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ace2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	68d9      	ldr	r1, [r3, #12]
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	781a      	ldrb	r2, [r3, #0]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	b298      	uxth	r0, r3
 800acf2:	79fb      	ldrb	r3, [r7, #7]
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	4603      	mov	r3, r0
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 f9b9 	bl	800b070 <USB_WritePacket>
 800acfe:	e105      	b.n	800af0c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	015a      	lsls	r2, r3, #5
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	4413      	add	r3, r2
 800ad08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad0c:	691b      	ldr	r3, [r3, #16]
 800ad0e:	69ba      	ldr	r2, [r7, #24]
 800ad10:	0151      	lsls	r1, r2, #5
 800ad12:	69fa      	ldr	r2, [r7, #28]
 800ad14:	440a      	add	r2, r1
 800ad16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad1a:	0cdb      	lsrs	r3, r3, #19
 800ad1c:	04db      	lsls	r3, r3, #19
 800ad1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	69ba      	ldr	r2, [r7, #24]
 800ad30:	0151      	lsls	r1, r2, #5
 800ad32:	69fa      	ldr	r2, [r7, #28]
 800ad34:	440a      	add	r2, r1
 800ad36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad3a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ad3e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ad42:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d132      	bne.n	800adb0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d003      	beq.n	800ad5a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	689a      	ldr	r2, [r3, #8]
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	689a      	ldr	r2, [r3, #8]
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	015a      	lsls	r2, r3, #5
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	4413      	add	r3, r2
 800ad6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad6e:	691a      	ldr	r2, [r3, #16]
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad78:	69b9      	ldr	r1, [r7, #24]
 800ad7a:	0148      	lsls	r0, r1, #5
 800ad7c:	69f9      	ldr	r1, [r7, #28]
 800ad7e:	4401      	add	r1, r0
 800ad80:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ad84:	4313      	orrs	r3, r2
 800ad86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	69ba      	ldr	r2, [r7, #24]
 800ad98:	0151      	lsls	r1, r2, #5
 800ad9a:	69fa      	ldr	r2, [r7, #28]
 800ad9c:	440a      	add	r2, r1
 800ad9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ada2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ada6:	6113      	str	r3, [r2, #16]
 800ada8:	e062      	b.n	800ae70 <USB_EPStartXfer+0x490>
 800adaa:	bf00      	nop
 800adac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d123      	bne.n	800ae00 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adc4:	691a      	ldr	r2, [r3, #16]
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adce:	69b9      	ldr	r1, [r7, #24]
 800add0:	0148      	lsls	r0, r1, #5
 800add2:	69f9      	ldr	r1, [r7, #28]
 800add4:	4401      	add	r1, r0
 800add6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800adda:	4313      	orrs	r3, r2
 800addc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	015a      	lsls	r2, r3, #5
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	4413      	add	r3, r2
 800ade6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	69ba      	ldr	r2, [r7, #24]
 800adee:	0151      	lsls	r1, r2, #5
 800adf0:	69fa      	ldr	r2, [r7, #28]
 800adf2:	440a      	add	r2, r1
 800adf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800adfc:	6113      	str	r3, [r2, #16]
 800adfe:	e037      	b.n	800ae70 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	691a      	ldr	r2, [r3, #16]
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	4413      	add	r3, r2
 800ae0a:	1e5a      	subs	r2, r3, #1
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae14:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	8afa      	ldrh	r2, [r7, #22]
 800ae1c:	fb03 f202 	mul.w	r2, r3, r2
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	015a      	lsls	r2, r3, #5
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae30:	691a      	ldr	r2, [r3, #16]
 800ae32:	8afb      	ldrh	r3, [r7, #22]
 800ae34:	04d9      	lsls	r1, r3, #19
 800ae36:	4b38      	ldr	r3, [pc, #224]	@ (800af18 <USB_EPStartXfer+0x538>)
 800ae38:	400b      	ands	r3, r1
 800ae3a:	69b9      	ldr	r1, [r7, #24]
 800ae3c:	0148      	lsls	r0, r1, #5
 800ae3e:	69f9      	ldr	r1, [r7, #28]
 800ae40:	4401      	add	r1, r0
 800ae42:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae46:	4313      	orrs	r3, r2
 800ae48:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	015a      	lsls	r2, r3, #5
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	4413      	add	r3, r2
 800ae52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae56:	691a      	ldr	r2, [r3, #16]
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	6a1b      	ldr	r3, [r3, #32]
 800ae5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae60:	69b9      	ldr	r1, [r7, #24]
 800ae62:	0148      	lsls	r0, r1, #5
 800ae64:	69f9      	ldr	r1, [r7, #28]
 800ae66:	4401      	add	r1, r0
 800ae68:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ae70:	79fb      	ldrb	r3, [r7, #7]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d10d      	bne.n	800ae92 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d009      	beq.n	800ae92 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	68d9      	ldr	r1, [r3, #12]
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	015a      	lsls	r2, r3, #5
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	4413      	add	r3, r2
 800ae8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae8e:	460a      	mov	r2, r1
 800ae90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	791b      	ldrb	r3, [r3, #4]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d128      	bne.n	800aeec <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d110      	bne.n	800aecc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	015a      	lsls	r2, r3, #5
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	69ba      	ldr	r2, [r7, #24]
 800aeba:	0151      	lsls	r1, r2, #5
 800aebc:	69fa      	ldr	r2, [r7, #28]
 800aebe:	440a      	add	r2, r1
 800aec0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aec4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	e00f      	b.n	800aeec <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	015a      	lsls	r2, r3, #5
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	4413      	add	r3, r2
 800aed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	69ba      	ldr	r2, [r7, #24]
 800aedc:	0151      	lsls	r1, r2, #5
 800aede:	69fa      	ldr	r2, [r7, #28]
 800aee0:	440a      	add	r2, r1
 800aee2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aeea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	015a      	lsls	r2, r3, #5
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	4413      	add	r3, r2
 800aef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	69ba      	ldr	r2, [r7, #24]
 800aefc:	0151      	lsls	r1, r2, #5
 800aefe:	69fa      	ldr	r2, [r7, #28]
 800af00:	440a      	add	r2, r1
 800af02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af06:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800af0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3720      	adds	r7, #32
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	1ff80000 	.word	0x1ff80000

0800af1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b087      	sub	sp, #28
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af26:	2300      	movs	r3, #0
 800af28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	785b      	ldrb	r3, [r3, #1]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d14a      	bne.n	800afd0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	015a      	lsls	r2, r3, #5
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	4413      	add	r3, r2
 800af44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af52:	f040 8086 	bne.w	800b062 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	015a      	lsls	r2, r3, #5
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	4413      	add	r3, r2
 800af60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	7812      	ldrb	r2, [r2, #0]
 800af6a:	0151      	lsls	r1, r2, #5
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	440a      	add	r2, r1
 800af70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800af78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	015a      	lsls	r2, r3, #5
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	4413      	add	r3, r2
 800af84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	7812      	ldrb	r2, [r2, #0]
 800af8e:	0151      	lsls	r1, r2, #5
 800af90:	693a      	ldr	r2, [r7, #16]
 800af92:	440a      	add	r2, r1
 800af94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800af9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	3301      	adds	r3, #1
 800afa2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800afaa:	4293      	cmp	r3, r2
 800afac:	d902      	bls.n	800afb4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	75fb      	strb	r3, [r7, #23]
          break;
 800afb2:	e056      	b.n	800b062 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	015a      	lsls	r2, r3, #5
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	4413      	add	r3, r2
 800afbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afcc:	d0e7      	beq.n	800af9e <USB_EPStopXfer+0x82>
 800afce:	e048      	b.n	800b062 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	015a      	lsls	r2, r3, #5
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	4413      	add	r3, r2
 800afda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afe4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afe8:	d13b      	bne.n	800b062 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	7812      	ldrb	r2, [r2, #0]
 800affe:	0151      	lsls	r1, r2, #5
 800b000:	693a      	ldr	r2, [r7, #16]
 800b002:	440a      	add	r2, r1
 800b004:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b008:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b00c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	015a      	lsls	r2, r3, #5
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	7812      	ldrb	r2, [r2, #0]
 800b022:	0151      	lsls	r1, r2, #5
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	440a      	add	r2, r1
 800b028:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b02c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b030:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3301      	adds	r3, #1
 800b036:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b03e:	4293      	cmp	r3, r2
 800b040:	d902      	bls.n	800b048 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	75fb      	strb	r3, [r7, #23]
          break;
 800b046:	e00c      	b.n	800b062 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	015a      	lsls	r2, r3, #5
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	4413      	add	r3, r2
 800b052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b05c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b060:	d0e7      	beq.n	800b032 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b062:	7dfb      	ldrb	r3, [r7, #23]
}
 800b064:	4618      	mov	r0, r3
 800b066:	371c      	adds	r7, #28
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b070:	b480      	push	{r7}
 800b072:	b089      	sub	sp, #36	@ 0x24
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	4611      	mov	r1, r2
 800b07c:	461a      	mov	r2, r3
 800b07e:	460b      	mov	r3, r1
 800b080:	71fb      	strb	r3, [r7, #7]
 800b082:	4613      	mov	r3, r2
 800b084:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b08e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b092:	2b00      	cmp	r3, #0
 800b094:	d123      	bne.n	800b0de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b096:	88bb      	ldrh	r3, [r7, #4]
 800b098:	3303      	adds	r3, #3
 800b09a:	089b      	lsrs	r3, r3, #2
 800b09c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b09e:	2300      	movs	r3, #0
 800b0a0:	61bb      	str	r3, [r7, #24]
 800b0a2:	e018      	b.n	800b0d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b0a4:	79fb      	ldrb	r3, [r7, #7]
 800b0a6:	031a      	lsls	r2, r3, #12
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	61bb      	str	r3, [r7, #24]
 800b0d6:	69ba      	ldr	r2, [r7, #24]
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d3e2      	bcc.n	800b0a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3724      	adds	r7, #36	@ 0x24
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b08b      	sub	sp, #44	@ 0x2c
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b102:	88fb      	ldrh	r3, [r7, #6]
 800b104:	089b      	lsrs	r3, r3, #2
 800b106:	b29b      	uxth	r3, r3
 800b108:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b10a:	88fb      	ldrh	r3, [r7, #6]
 800b10c:	f003 0303 	and.w	r3, r3, #3
 800b110:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b112:	2300      	movs	r3, #0
 800b114:	623b      	str	r3, [r7, #32]
 800b116:	e014      	b.n	800b142 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b122:	601a      	str	r2, [r3, #0]
    pDest++;
 800b124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b126:	3301      	adds	r3, #1
 800b128:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b12c:	3301      	adds	r3, #1
 800b12e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b132:	3301      	adds	r3, #1
 800b134:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b138:	3301      	adds	r3, #1
 800b13a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	3301      	adds	r3, #1
 800b140:	623b      	str	r3, [r7, #32]
 800b142:	6a3a      	ldr	r2, [r7, #32]
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	429a      	cmp	r2, r3
 800b148:	d3e6      	bcc.n	800b118 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b14a:	8bfb      	ldrh	r3, [r7, #30]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d01e      	beq.n	800b18e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b150:	2300      	movs	r3, #0
 800b152:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b15a:	461a      	mov	r2, r3
 800b15c:	f107 0310 	add.w	r3, r7, #16
 800b160:	6812      	ldr	r2, [r2, #0]
 800b162:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	00db      	lsls	r3, r3, #3
 800b16c:	fa22 f303 	lsr.w	r3, r2, r3
 800b170:	b2da      	uxtb	r2, r3
 800b172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b174:	701a      	strb	r2, [r3, #0]
      i++;
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	3301      	adds	r3, #1
 800b17a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17e:	3301      	adds	r3, #1
 800b180:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b182:	8bfb      	ldrh	r3, [r7, #30]
 800b184:	3b01      	subs	r3, #1
 800b186:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b188:	8bfb      	ldrh	r3, [r7, #30]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1ea      	bne.n	800b164 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b190:	4618      	mov	r0, r3
 800b192:	372c      	adds	r7, #44	@ 0x2c
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	785b      	ldrb	r3, [r3, #1]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d12c      	bne.n	800b212 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	db12      	blt.n	800b1f0 <USB_EPSetStall+0x54>
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00f      	beq.n	800b1f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	015a      	lsls	r2, r3, #5
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	0151      	lsls	r1, r2, #5
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	440a      	add	r2, r1
 800b1e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b1ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	015a      	lsls	r2, r3, #5
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	0151      	lsls	r1, r2, #5
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	440a      	add	r2, r1
 800b206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b20a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	e02b      	b.n	800b26a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	015a      	lsls	r2, r3, #5
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	4413      	add	r3, r2
 800b21a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	db12      	blt.n	800b24a <USB_EPSetStall+0xae>
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00f      	beq.n	800b24a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	015a      	lsls	r2, r3, #5
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	4413      	add	r3, r2
 800b232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	0151      	lsls	r1, r2, #5
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	440a      	add	r2, r1
 800b240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b244:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b248:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	015a      	lsls	r2, r3, #5
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	4413      	add	r3, r2
 800b252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	0151      	lsls	r1, r2, #5
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	440a      	add	r2, r1
 800b260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b264:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b268:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	785b      	ldrb	r3, [r3, #1]
 800b290:	2b01      	cmp	r3, #1
 800b292:	d128      	bne.n	800b2e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	015a      	lsls	r2, r3, #5
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	4413      	add	r3, r2
 800b29c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	0151      	lsls	r1, r2, #5
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	440a      	add	r2, r1
 800b2aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b2b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	791b      	ldrb	r3, [r3, #4]
 800b2b8:	2b03      	cmp	r3, #3
 800b2ba:	d003      	beq.n	800b2c4 <USB_EPClearStall+0x4c>
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	791b      	ldrb	r3, [r3, #4]
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d138      	bne.n	800b336 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	015a      	lsls	r2, r3, #5
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	0151      	lsls	r1, r2, #5
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	440a      	add	r2, r1
 800b2da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2e2:	6013      	str	r3, [r2, #0]
 800b2e4:	e027      	b.n	800b336 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	015a      	lsls	r2, r3, #5
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	0151      	lsls	r1, r2, #5
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	440a      	add	r2, r1
 800b2fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b300:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b304:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	791b      	ldrb	r3, [r3, #4]
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d003      	beq.n	800b316 <USB_EPClearStall+0x9e>
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	791b      	ldrb	r3, [r3, #4]
 800b312:	2b02      	cmp	r3, #2
 800b314:	d10f      	bne.n	800b336 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	015a      	lsls	r2, r3, #5
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	4413      	add	r3, r2
 800b31e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	0151      	lsls	r1, r2, #5
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	440a      	add	r2, r1
 800b32c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b334:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3714      	adds	r7, #20
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	460b      	mov	r3, r1
 800b34e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b362:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b366:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	78fb      	ldrb	r3, [r7, #3]
 800b372:	011b      	lsls	r3, r3, #4
 800b374:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b378:	68f9      	ldr	r1, [r7, #12]
 800b37a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b37e:	4313      	orrs	r3, r2
 800b380:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b3aa:	f023 0303 	bic.w	r3, r3, #3
 800b3ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b3be:	f023 0302 	bic.w	r3, r3, #2
 800b3c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3d2:	b480      	push	{r7}
 800b3d4:	b085      	sub	sp, #20
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b3ec:	f023 0303 	bic.w	r3, r3, #3
 800b3f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b400:	f043 0302 	orr.w	r3, r3, #2
 800b404:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3714      	adds	r7, #20
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	4013      	ands	r3, r2
 800b42a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b42c:	68fb      	ldr	r3, [r7, #12]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3714      	adds	r7, #20
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b085      	sub	sp, #20
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	4013      	ands	r3, r2
 800b45c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	0c1b      	lsrs	r3, r3, #16
}
 800b462:	4618      	mov	r0, r3
 800b464:	3714      	adds	r7, #20
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b46e:	b480      	push	{r7}
 800b470:	b085      	sub	sp, #20
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b48a:	69db      	ldr	r3, [r3, #28]
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	4013      	ands	r3, r2
 800b490:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	b29b      	uxth	r3, r3
}
 800b496:	4618      	mov	r0, r3
 800b498:	3714      	adds	r7, #20
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b085      	sub	sp, #20
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b4b2:	78fb      	ldrb	r3, [r7, #3]
 800b4b4:	015a      	lsls	r2, r3, #5
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3714      	adds	r7, #20
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr

0800b4de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b4de:	b480      	push	{r7}
 800b4e0:	b087      	sub	sp, #28
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4f4:	691b      	ldr	r3, [r3, #16]
 800b4f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b500:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b502:	78fb      	ldrb	r3, [r7, #3]
 800b504:	f003 030f 	and.w	r3, r3, #15
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	fa22 f303 	lsr.w	r3, r2, r3
 800b50e:	01db      	lsls	r3, r3, #7
 800b510:	b2db      	uxtb	r3, r3
 800b512:	693a      	ldr	r2, [r7, #16]
 800b514:	4313      	orrs	r3, r2
 800b516:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b518:	78fb      	ldrb	r3, [r7, #3]
 800b51a:	015a      	lsls	r2, r3, #5
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	4413      	add	r3, r2
 800b520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	4013      	ands	r3, r2
 800b52a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b52c:	68bb      	ldr	r3, [r7, #8]
}
 800b52e:	4618      	mov	r0, r3
 800b530:	371c      	adds	r7, #28
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	f003 0301 	and.w	r3, r3, #1
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	370c      	adds	r7, #12
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr

0800b556 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b556:	b480      	push	{r7}
 800b558:	b085      	sub	sp, #20
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b570:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b574:	f023 0307 	bic.w	r3, r3, #7
 800b578:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b58c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3714      	adds	r7, #20
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b087      	sub	sp, #28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	333c      	adds	r3, #60	@ 0x3c
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	4a26      	ldr	r2, [pc, #152]	@ (800b654 <USB_EP0_OutStart+0xb8>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d90a      	bls.n	800b5d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5d0:	d101      	bne.n	800b5d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	e037      	b.n	800b646 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5dc:	461a      	mov	r2, r3
 800b5de:	2300      	movs	r3, #0
 800b5e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b5f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	697a      	ldr	r2, [r7, #20]
 800b600:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b604:	f043 0318 	orr.w	r3, r3, #24
 800b608:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	697a      	ldr	r2, [r7, #20]
 800b614:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b618:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b61c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b61e:	7afb      	ldrb	r3, [r7, #11]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d10f      	bne.n	800b644 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b62a:	461a      	mov	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	697a      	ldr	r2, [r7, #20]
 800b63a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b63e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b642:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	371c      	adds	r7, #28
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	4f54300a 	.word	0x4f54300a

0800b658 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b660:	2300      	movs	r3, #0
 800b662:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	3301      	adds	r3, #1
 800b668:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b670:	d901      	bls.n	800b676 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b672:	2303      	movs	r3, #3
 800b674:	e01b      	b.n	800b6ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	691b      	ldr	r3, [r3, #16]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	daf2      	bge.n	800b664 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b67e:	2300      	movs	r3, #0
 800b680:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	f043 0201 	orr.w	r2, r3, #1
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	3301      	adds	r3, #1
 800b692:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b69a:	d901      	bls.n	800b6a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b69c:	2303      	movs	r3, #3
 800b69e:	e006      	b.n	800b6ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d0f0      	beq.n	800b68e <USB_CoreReset+0x36>

  return HAL_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
	...

0800b6bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b6c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b6cc:	f002 fc94 	bl	800dff8 <USBD_static_malloc>
 800b6d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d109      	bne.n	800b6ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	32b0      	adds	r2, #176	@ 0xb0
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	e0d4      	b.n	800b896 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b6ec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f003 fc97 	bl	800f026 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	32b0      	adds	r2, #176	@ 0xb0
 800b702:	68f9      	ldr	r1, [r7, #12]
 800b704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	32b0      	adds	r2, #176	@ 0xb0
 800b712:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	7c1b      	ldrb	r3, [r3, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d138      	bne.n	800b796 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b724:	4b5e      	ldr	r3, [pc, #376]	@ (800b8a0 <USBD_CDC_Init+0x1e4>)
 800b726:	7819      	ldrb	r1, [r3, #0]
 800b728:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b72c:	2202      	movs	r2, #2
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f002 fb3f 	bl	800ddb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b734:	4b5a      	ldr	r3, [pc, #360]	@ (800b8a0 <USBD_CDC_Init+0x1e4>)
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	f003 020f 	and.w	r2, r3, #15
 800b73c:	6879      	ldr	r1, [r7, #4]
 800b73e:	4613      	mov	r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4413      	add	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	440b      	add	r3, r1
 800b748:	3324      	adds	r3, #36	@ 0x24
 800b74a:	2201      	movs	r2, #1
 800b74c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b74e:	4b55      	ldr	r3, [pc, #340]	@ (800b8a4 <USBD_CDC_Init+0x1e8>)
 800b750:	7819      	ldrb	r1, [r3, #0]
 800b752:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b756:	2202      	movs	r2, #2
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f002 fb2a 	bl	800ddb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b75e:	4b51      	ldr	r3, [pc, #324]	@ (800b8a4 <USBD_CDC_Init+0x1e8>)
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	f003 020f 	and.w	r2, r3, #15
 800b766:	6879      	ldr	r1, [r7, #4]
 800b768:	4613      	mov	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4413      	add	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	440b      	add	r3, r1
 800b772:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b776:	2201      	movs	r2, #1
 800b778:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b77a:	4b4b      	ldr	r3, [pc, #300]	@ (800b8a8 <USBD_CDC_Init+0x1ec>)
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	f003 020f 	and.w	r2, r3, #15
 800b782:	6879      	ldr	r1, [r7, #4]
 800b784:	4613      	mov	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4413      	add	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	440b      	add	r3, r1
 800b78e:	3326      	adds	r3, #38	@ 0x26
 800b790:	2210      	movs	r2, #16
 800b792:	801a      	strh	r2, [r3, #0]
 800b794:	e035      	b.n	800b802 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b796:	4b42      	ldr	r3, [pc, #264]	@ (800b8a0 <USBD_CDC_Init+0x1e4>)
 800b798:	7819      	ldrb	r1, [r3, #0]
 800b79a:	2340      	movs	r3, #64	@ 0x40
 800b79c:	2202      	movs	r2, #2
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f002 fb07 	bl	800ddb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b7a4:	4b3e      	ldr	r3, [pc, #248]	@ (800b8a0 <USBD_CDC_Init+0x1e4>)
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	f003 020f 	and.w	r2, r3, #15
 800b7ac:	6879      	ldr	r1, [r7, #4]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	4413      	add	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	440b      	add	r3, r1
 800b7b8:	3324      	adds	r3, #36	@ 0x24
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b7be:	4b39      	ldr	r3, [pc, #228]	@ (800b8a4 <USBD_CDC_Init+0x1e8>)
 800b7c0:	7819      	ldrb	r1, [r3, #0]
 800b7c2:	2340      	movs	r3, #64	@ 0x40
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f002 faf3 	bl	800ddb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b7cc:	4b35      	ldr	r3, [pc, #212]	@ (800b8a4 <USBD_CDC_Init+0x1e8>)
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	f003 020f 	and.w	r2, r3, #15
 800b7d4:	6879      	ldr	r1, [r7, #4]
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	4413      	add	r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	440b      	add	r3, r1
 800b7e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b7e8:	4b2f      	ldr	r3, [pc, #188]	@ (800b8a8 <USBD_CDC_Init+0x1ec>)
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	f003 020f 	and.w	r2, r3, #15
 800b7f0:	6879      	ldr	r1, [r7, #4]
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4413      	add	r3, r2
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	440b      	add	r3, r1
 800b7fc:	3326      	adds	r3, #38	@ 0x26
 800b7fe:	2210      	movs	r2, #16
 800b800:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b802:	4b29      	ldr	r3, [pc, #164]	@ (800b8a8 <USBD_CDC_Init+0x1ec>)
 800b804:	7819      	ldrb	r1, [r3, #0]
 800b806:	2308      	movs	r3, #8
 800b808:	2203      	movs	r2, #3
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f002 fad1 	bl	800ddb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b810:	4b25      	ldr	r3, [pc, #148]	@ (800b8a8 <USBD_CDC_Init+0x1ec>)
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	f003 020f 	and.w	r2, r3, #15
 800b818:	6879      	ldr	r1, [r7, #4]
 800b81a:	4613      	mov	r3, r2
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	440b      	add	r3, r1
 800b824:	3324      	adds	r3, #36	@ 0x24
 800b826:	2201      	movs	r2, #1
 800b828:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2200      	movs	r2, #0
 800b82e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	33b0      	adds	r3, #176	@ 0xb0
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4413      	add	r3, r2
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b860:	2302      	movs	r3, #2
 800b862:	e018      	b.n	800b896 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	7c1b      	ldrb	r3, [r3, #16]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10a      	bne.n	800b882 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b86c:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a4 <USBD_CDC_Init+0x1e8>)
 800b86e:	7819      	ldrb	r1, [r3, #0]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b876:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f002 fb88 	bl	800df90 <USBD_LL_PrepareReceive>
 800b880:	e008      	b.n	800b894 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b882:	4b08      	ldr	r3, [pc, #32]	@ (800b8a4 <USBD_CDC_Init+0x1e8>)
 800b884:	7819      	ldrb	r1, [r3, #0]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b88c:	2340      	movs	r3, #64	@ 0x40
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f002 fb7e 	bl	800df90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	2000009b 	.word	0x2000009b
 800b8a4:	2000009c 	.word	0x2000009c
 800b8a8:	2000009d 	.word	0x2000009d

0800b8ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b8b8:	4b3a      	ldr	r3, [pc, #232]	@ (800b9a4 <USBD_CDC_DeInit+0xf8>)
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f002 fa9d 	bl	800ddfe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b8c4:	4b37      	ldr	r3, [pc, #220]	@ (800b9a4 <USBD_CDC_DeInit+0xf8>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	f003 020f 	and.w	r2, r3, #15
 800b8cc:	6879      	ldr	r1, [r7, #4]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	4413      	add	r3, r2
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	440b      	add	r3, r1
 800b8d8:	3324      	adds	r3, #36	@ 0x24
 800b8da:	2200      	movs	r2, #0
 800b8dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b8de:	4b32      	ldr	r3, [pc, #200]	@ (800b9a8 <USBD_CDC_DeInit+0xfc>)
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f002 fa8a 	bl	800ddfe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b8ea:	4b2f      	ldr	r3, [pc, #188]	@ (800b9a8 <USBD_CDC_DeInit+0xfc>)
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	f003 020f 	and.w	r2, r3, #15
 800b8f2:	6879      	ldr	r1, [r7, #4]
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	4413      	add	r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	440b      	add	r3, r1
 800b8fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b902:	2200      	movs	r2, #0
 800b904:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b906:	4b29      	ldr	r3, [pc, #164]	@ (800b9ac <USBD_CDC_DeInit+0x100>)
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	4619      	mov	r1, r3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f002 fa76 	bl	800ddfe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b912:	4b26      	ldr	r3, [pc, #152]	@ (800b9ac <USBD_CDC_DeInit+0x100>)
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	f003 020f 	and.w	r2, r3, #15
 800b91a:	6879      	ldr	r1, [r7, #4]
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	440b      	add	r3, r1
 800b926:	3324      	adds	r3, #36	@ 0x24
 800b928:	2200      	movs	r2, #0
 800b92a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b92c:	4b1f      	ldr	r3, [pc, #124]	@ (800b9ac <USBD_CDC_DeInit+0x100>)
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	f003 020f 	and.w	r2, r3, #15
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	4613      	mov	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	440b      	add	r3, r1
 800b940:	3326      	adds	r3, #38	@ 0x26
 800b942:	2200      	movs	r2, #0
 800b944:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	32b0      	adds	r2, #176	@ 0xb0
 800b950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d01f      	beq.n	800b998 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	33b0      	adds	r3, #176	@ 0xb0
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4413      	add	r3, r2
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	32b0      	adds	r2, #176	@ 0xb0
 800b976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f002 fb4a 	bl	800e014 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	32b0      	adds	r2, #176	@ 0xb0
 800b98a:	2100      	movs	r1, #0
 800b98c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3708      	adds	r7, #8
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	2000009b 	.word	0x2000009b
 800b9a8:	2000009c 	.word	0x2000009c
 800b9ac:	2000009d 	.word	0x2000009d

0800b9b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	32b0      	adds	r2, #176	@ 0xb0
 800b9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d101      	bne.n	800b9e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b9dc:	2303      	movs	r3, #3
 800b9de:	e0bf      	b.n	800bb60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d050      	beq.n	800ba8e <USBD_CDC_Setup+0xde>
 800b9ec:	2b20      	cmp	r3, #32
 800b9ee:	f040 80af 	bne.w	800bb50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	88db      	ldrh	r3, [r3, #6]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d03a      	beq.n	800ba70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	b25b      	sxtb	r3, r3
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	da1b      	bge.n	800ba3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	33b0      	adds	r3, #176	@ 0xb0
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4413      	add	r3, r2
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ba1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba1c:	683a      	ldr	r2, [r7, #0]
 800ba1e:	88d2      	ldrh	r2, [r2, #6]
 800ba20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	88db      	ldrh	r3, [r3, #6]
 800ba26:	2b07      	cmp	r3, #7
 800ba28:	bf28      	it	cs
 800ba2a:	2307      	movcs	r3, #7
 800ba2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	89fa      	ldrh	r2, [r7, #14]
 800ba32:	4619      	mov	r1, r3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f001 fd93 	bl	800d560 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ba3a:	e090      	b.n	800bb5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	785a      	ldrb	r2, [r3, #1]
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	88db      	ldrh	r3, [r3, #6]
 800ba4a:	2b3f      	cmp	r3, #63	@ 0x3f
 800ba4c:	d803      	bhi.n	800ba56 <USBD_CDC_Setup+0xa6>
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	88db      	ldrh	r3, [r3, #6]
 800ba52:	b2da      	uxtb	r2, r3
 800ba54:	e000      	b.n	800ba58 <USBD_CDC_Setup+0xa8>
 800ba56:	2240      	movs	r2, #64	@ 0x40
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ba5e:	6939      	ldr	r1, [r7, #16]
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ba66:	461a      	mov	r2, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f001 fda5 	bl	800d5b8 <USBD_CtlPrepareRx>
      break;
 800ba6e:	e076      	b.n	800bb5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	33b0      	adds	r3, #176	@ 0xb0
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	683a      	ldr	r2, [r7, #0]
 800ba84:	7850      	ldrb	r0, [r2, #1]
 800ba86:	2200      	movs	r2, #0
 800ba88:	6839      	ldr	r1, [r7, #0]
 800ba8a:	4798      	blx	r3
      break;
 800ba8c:	e067      	b.n	800bb5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	785b      	ldrb	r3, [r3, #1]
 800ba92:	2b0b      	cmp	r3, #11
 800ba94:	d851      	bhi.n	800bb3a <USBD_CDC_Setup+0x18a>
 800ba96:	a201      	add	r2, pc, #4	@ (adr r2, 800ba9c <USBD_CDC_Setup+0xec>)
 800ba98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba9c:	0800bacd 	.word	0x0800bacd
 800baa0:	0800bb49 	.word	0x0800bb49
 800baa4:	0800bb3b 	.word	0x0800bb3b
 800baa8:	0800bb3b 	.word	0x0800bb3b
 800baac:	0800bb3b 	.word	0x0800bb3b
 800bab0:	0800bb3b 	.word	0x0800bb3b
 800bab4:	0800bb3b 	.word	0x0800bb3b
 800bab8:	0800bb3b 	.word	0x0800bb3b
 800babc:	0800bb3b 	.word	0x0800bb3b
 800bac0:	0800bb3b 	.word	0x0800bb3b
 800bac4:	0800baf7 	.word	0x0800baf7
 800bac8:	0800bb21 	.word	0x0800bb21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	d107      	bne.n	800bae8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bad8:	f107 030a 	add.w	r3, r7, #10
 800badc:	2202      	movs	r2, #2
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f001 fd3d 	bl	800d560 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bae6:	e032      	b.n	800bb4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f001 fcbb 	bl	800d466 <USBD_CtlError>
            ret = USBD_FAIL;
 800baf0:	2303      	movs	r3, #3
 800baf2:	75fb      	strb	r3, [r7, #23]
          break;
 800baf4:	e02b      	b.n	800bb4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	d107      	bne.n	800bb12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bb02:	f107 030d 	add.w	r3, r7, #13
 800bb06:	2201      	movs	r2, #1
 800bb08:	4619      	mov	r1, r3
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f001 fd28 	bl	800d560 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb10:	e01d      	b.n	800bb4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f001 fca6 	bl	800d466 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	75fb      	strb	r3, [r7, #23]
          break;
 800bb1e:	e016      	b.n	800bb4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	2b03      	cmp	r3, #3
 800bb2a:	d00f      	beq.n	800bb4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f001 fc99 	bl	800d466 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb34:	2303      	movs	r3, #3
 800bb36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bb38:	e008      	b.n	800bb4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f001 fc92 	bl	800d466 <USBD_CtlError>
          ret = USBD_FAIL;
 800bb42:	2303      	movs	r3, #3
 800bb44:	75fb      	strb	r3, [r7, #23]
          break;
 800bb46:	e002      	b.n	800bb4e <USBD_CDC_Setup+0x19e>
          break;
 800bb48:	bf00      	nop
 800bb4a:	e008      	b.n	800bb5e <USBD_CDC_Setup+0x1ae>
          break;
 800bb4c:	bf00      	nop
      }
      break;
 800bb4e:	e006      	b.n	800bb5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bb50:	6839      	ldr	r1, [r7, #0]
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f001 fc87 	bl	800d466 <USBD_CtlError>
      ret = USBD_FAIL;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb5c:	bf00      	nop
  }

  return (uint8_t)ret;
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3718      	adds	r7, #24
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	32b0      	adds	r2, #176	@ 0xb0
 800bb86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bb8e:	2303      	movs	r3, #3
 800bb90:	e065      	b.n	800bc5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	32b0      	adds	r2, #176	@ 0xb0
 800bb9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bba2:	78fb      	ldrb	r3, [r7, #3]
 800bba4:	f003 020f 	and.w	r2, r3, #15
 800bba8:	6879      	ldr	r1, [r7, #4]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	4413      	add	r3, r2
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	440b      	add	r3, r1
 800bbb4:	3318      	adds	r3, #24
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d02f      	beq.n	800bc1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bbbc:	78fb      	ldrb	r3, [r7, #3]
 800bbbe:	f003 020f 	and.w	r2, r3, #15
 800bbc2:	6879      	ldr	r1, [r7, #4]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	440b      	add	r3, r1
 800bbce:	3318      	adds	r3, #24
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	78fb      	ldrb	r3, [r7, #3]
 800bbd4:	f003 010f 	and.w	r1, r3, #15
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	460b      	mov	r3, r1
 800bbdc:	00db      	lsls	r3, r3, #3
 800bbde:	440b      	add	r3, r1
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4403      	add	r3, r0
 800bbe4:	331c      	adds	r3, #28
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	fbb2 f1f3 	udiv	r1, r2, r3
 800bbec:	fb01 f303 	mul.w	r3, r1, r3
 800bbf0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d112      	bne.n	800bc1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bbf6:	78fb      	ldrb	r3, [r7, #3]
 800bbf8:	f003 020f 	and.w	r2, r3, #15
 800bbfc:	6879      	ldr	r1, [r7, #4]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4413      	add	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	440b      	add	r3, r1
 800bc08:	3318      	adds	r3, #24
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bc0e:	78f9      	ldrb	r1, [r7, #3]
 800bc10:	2300      	movs	r3, #0
 800bc12:	2200      	movs	r2, #0
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f002 f99a 	bl	800df4e <USBD_LL_Transmit>
 800bc1a:	e01f      	b.n	800bc5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	33b0      	adds	r3, #176	@ 0xb0
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d010      	beq.n	800bc5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	33b0      	adds	r3, #176	@ 0xb0
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	4413      	add	r3, r2
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bc58:	78fa      	ldrb	r2, [r7, #3]
 800bc5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b084      	sub	sp, #16
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	460b      	mov	r3, r1
 800bc70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	32b0      	adds	r2, #176	@ 0xb0
 800bc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	32b0      	adds	r2, #176	@ 0xb0
 800bc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d101      	bne.n	800bc98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bc94:	2303      	movs	r3, #3
 800bc96:	e01a      	b.n	800bcce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bc98:	78fb      	ldrb	r3, [r7, #3]
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f002 f998 	bl	800dfd2 <USBD_LL_GetRxDataSize>
 800bca2:	4602      	mov	r2, r0
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	33b0      	adds	r3, #176	@ 0xb0
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4413      	add	r3, r2
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bcc8:	4611      	mov	r1, r2
 800bcca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bccc:	2300      	movs	r3, #0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b084      	sub	sp, #16
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	32b0      	adds	r2, #176	@ 0xb0
 800bce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d101      	bne.n	800bcf8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	e024      	b.n	800bd42 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	33b0      	adds	r3, #176	@ 0xb0
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	4413      	add	r3, r2
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d019      	beq.n	800bd40 <USBD_CDC_EP0_RxReady+0x6a>
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bd12:	2bff      	cmp	r3, #255	@ 0xff
 800bd14:	d014      	beq.n	800bd40 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	33b0      	adds	r3, #176	@ 0xb0
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4413      	add	r3, r2
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bd2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd36:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	22ff      	movs	r2, #255	@ 0xff
 800bd3c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
	...

0800bd4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bd54:	2182      	movs	r1, #130	@ 0x82
 800bd56:	4818      	ldr	r0, [pc, #96]	@ (800bdb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd58:	f000 fd4f 	bl	800c7fa <USBD_GetEpDesc>
 800bd5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bd5e:	2101      	movs	r1, #1
 800bd60:	4815      	ldr	r0, [pc, #84]	@ (800bdb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd62:	f000 fd4a 	bl	800c7fa <USBD_GetEpDesc>
 800bd66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bd68:	2181      	movs	r1, #129	@ 0x81
 800bd6a:	4813      	ldr	r0, [pc, #76]	@ (800bdb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd6c:	f000 fd45 	bl	800c7fa <USBD_GetEpDesc>
 800bd70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	2210      	movs	r2, #16
 800bd7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d006      	beq.n	800bd92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd8c:	711a      	strb	r2, [r3, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d006      	beq.n	800bda6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bda0:	711a      	strb	r2, [r3, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2243      	movs	r2, #67	@ 0x43
 800bdaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bdac:	4b02      	ldr	r3, [pc, #8]	@ (800bdb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3718      	adds	r7, #24
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20000058 	.word	0x20000058

0800bdbc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bdc4:	2182      	movs	r1, #130	@ 0x82
 800bdc6:	4818      	ldr	r0, [pc, #96]	@ (800be28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bdc8:	f000 fd17 	bl	800c7fa <USBD_GetEpDesc>
 800bdcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bdce:	2101      	movs	r1, #1
 800bdd0:	4815      	ldr	r0, [pc, #84]	@ (800be28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bdd2:	f000 fd12 	bl	800c7fa <USBD_GetEpDesc>
 800bdd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bdd8:	2181      	movs	r1, #129	@ 0x81
 800bdda:	4813      	ldr	r0, [pc, #76]	@ (800be28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bddc:	f000 fd0d 	bl	800c7fa <USBD_GetEpDesc>
 800bde0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d002      	beq.n	800bdee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	2210      	movs	r2, #16
 800bdec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d006      	beq.n	800be02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	711a      	strb	r2, [r3, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f042 0202 	orr.w	r2, r2, #2
 800be00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d006      	beq.n	800be16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2200      	movs	r2, #0
 800be0c:	711a      	strb	r2, [r3, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	f042 0202 	orr.w	r2, r2, #2
 800be14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2243      	movs	r2, #67	@ 0x43
 800be1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be1c:	4b02      	ldr	r3, [pc, #8]	@ (800be28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3718      	adds	r7, #24
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	20000058 	.word	0x20000058

0800be2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be34:	2182      	movs	r1, #130	@ 0x82
 800be36:	4818      	ldr	r0, [pc, #96]	@ (800be98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be38:	f000 fcdf 	bl	800c7fa <USBD_GetEpDesc>
 800be3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be3e:	2101      	movs	r1, #1
 800be40:	4815      	ldr	r0, [pc, #84]	@ (800be98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be42:	f000 fcda 	bl	800c7fa <USBD_GetEpDesc>
 800be46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be48:	2181      	movs	r1, #129	@ 0x81
 800be4a:	4813      	ldr	r0, [pc, #76]	@ (800be98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be4c:	f000 fcd5 	bl	800c7fa <USBD_GetEpDesc>
 800be50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2210      	movs	r2, #16
 800be5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d006      	beq.n	800be72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	2200      	movs	r2, #0
 800be68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800be6c:	711a      	strb	r2, [r3, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d006      	beq.n	800be86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800be80:	711a      	strb	r2, [r3, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2243      	movs	r2, #67	@ 0x43
 800be8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be8c:	4b02      	ldr	r3, [pc, #8]	@ (800be98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3718      	adds	r7, #24
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20000058 	.word	0x20000058

0800be9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	220a      	movs	r2, #10
 800bea8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800beaa:	4b03      	ldr	r3, [pc, #12]	@ (800beb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800beac:	4618      	mov	r0, r3
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr
 800beb8:	20000014 	.word	0x20000014

0800bebc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d101      	bne.n	800bed0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800becc:	2303      	movs	r3, #3
 800bece:	e009      	b.n	800bee4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	33b0      	adds	r3, #176	@ 0xb0
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4413      	add	r3, r2
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b087      	sub	sp, #28
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	32b0      	adds	r2, #176	@ 0xb0
 800bf06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf0a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d101      	bne.n	800bf16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bf12:	2303      	movs	r3, #3
 800bf14:	e008      	b.n	800bf28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	371c      	adds	r7, #28
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	32b0      	adds	r2, #176	@ 0xb0
 800bf48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d101      	bne.n	800bf58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bf54:	2303      	movs	r3, #3
 800bf56:	e004      	b.n	800bf62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	683a      	ldr	r2, [r7, #0]
 800bf5c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3714      	adds	r7, #20
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
	...

0800bf70 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	32b0      	adds	r2, #176	@ 0xb0
 800bf82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf86:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d101      	bne.n	800bf96 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bf92:	2303      	movs	r3, #3
 800bf94:	e025      	b.n	800bfe2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d11f      	bne.n	800bfe0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bfa8:	4b10      	ldr	r3, [pc, #64]	@ (800bfec <USBD_CDC_TransmitPacket+0x7c>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	f003 020f 	and.w	r2, r3, #15
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4403      	add	r3, r0
 800bfc2:	3318      	adds	r3, #24
 800bfc4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bfc6:	4b09      	ldr	r3, [pc, #36]	@ (800bfec <USBD_CDC_TransmitPacket+0x7c>)
 800bfc8:	7819      	ldrb	r1, [r3, #0]
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f001 ffb9 	bl	800df4e <USBD_LL_Transmit>

    ret = USBD_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bfe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	2000009b 	.word	0x2000009b

0800bff0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	32b0      	adds	r2, #176	@ 0xb0
 800c002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c006:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	32b0      	adds	r2, #176	@ 0xb0
 800c012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d101      	bne.n	800c01e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c01a:	2303      	movs	r3, #3
 800c01c:	e018      	b.n	800c050 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	7c1b      	ldrb	r3, [r3, #16]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d10a      	bne.n	800c03c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c026:	4b0c      	ldr	r3, [pc, #48]	@ (800c058 <USBD_CDC_ReceivePacket+0x68>)
 800c028:	7819      	ldrb	r1, [r3, #0]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f001 ffab 	bl	800df90 <USBD_LL_PrepareReceive>
 800c03a:	e008      	b.n	800c04e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c03c:	4b06      	ldr	r3, [pc, #24]	@ (800c058 <USBD_CDC_ReceivePacket+0x68>)
 800c03e:	7819      	ldrb	r1, [r3, #0]
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c046:	2340      	movs	r3, #64	@ 0x40
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f001 ffa1 	bl	800df90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	2000009c 	.word	0x2000009c

0800c05c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b086      	sub	sp, #24
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	4613      	mov	r3, r2
 800c068:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c070:	2303      	movs	r3, #3
 800c072:	e01f      	b.n	800c0b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2200      	movs	r2, #0
 800c078:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2200      	movs	r2, #0
 800c080:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d003      	beq.n	800c09a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	68ba      	ldr	r2, [r7, #8]
 800c096:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2201      	movs	r2, #1
 800c09e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	79fa      	ldrb	r2, [r7, #7]
 800c0a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f001 fe1b 	bl	800dce4 <USBD_LL_Init>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c0b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e025      	b.n	800c120 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	683a      	ldr	r2, [r7, #0]
 800c0d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	32ae      	adds	r2, #174	@ 0xae
 800c0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00f      	beq.n	800c110 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	32ae      	adds	r2, #174	@ 0xae
 800c0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c100:	f107 020e 	add.w	r2, r7, #14
 800c104:	4610      	mov	r0, r2
 800c106:	4798      	blx	r3
 800c108:	4602      	mov	r2, r0
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c116:	1c5a      	adds	r2, r3, #1
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f001 fe23 	bl	800dd7c <USBD_LL_Start>
 800c136:	4603      	mov	r3, r0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c148:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	370c      	adds	r7, #12
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b084      	sub	sp, #16
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	460b      	mov	r3, r1
 800c160:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c162:	2300      	movs	r3, #0
 800c164:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d009      	beq.n	800c184 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	78fa      	ldrb	r2, [r7, #3]
 800c17a:	4611      	mov	r1, r2
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	4798      	blx	r3
 800c180:	4603      	mov	r3, r0
 800c182:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c184:	7bfb      	ldrb	r3, [r7, #15]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b084      	sub	sp, #16
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	460b      	mov	r3, r1
 800c198:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c19a:	2300      	movs	r3, #0
 800c19c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	78fa      	ldrb	r2, [r7, #3]
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	4798      	blx	r3
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d001      	beq.n	800c1b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b084      	sub	sp, #16
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f001 f90c 	bl	800d3f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2201      	movs	r2, #1
 800c1de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c1f6:	f003 031f 	and.w	r3, r3, #31
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d01a      	beq.n	800c234 <USBD_LL_SetupStage+0x72>
 800c1fe:	2b02      	cmp	r3, #2
 800c200:	d822      	bhi.n	800c248 <USBD_LL_SetupStage+0x86>
 800c202:	2b00      	cmp	r3, #0
 800c204:	d002      	beq.n	800c20c <USBD_LL_SetupStage+0x4a>
 800c206:	2b01      	cmp	r3, #1
 800c208:	d00a      	beq.n	800c220 <USBD_LL_SetupStage+0x5e>
 800c20a:	e01d      	b.n	800c248 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c212:	4619      	mov	r1, r3
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fb63 	bl	800c8e0 <USBD_StdDevReq>
 800c21a:	4603      	mov	r3, r0
 800c21c:	73fb      	strb	r3, [r7, #15]
      break;
 800c21e:	e020      	b.n	800c262 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fbcb 	bl	800c9c4 <USBD_StdItfReq>
 800c22e:	4603      	mov	r3, r0
 800c230:	73fb      	strb	r3, [r7, #15]
      break;
 800c232:	e016      	b.n	800c262 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c23a:	4619      	mov	r1, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fc2d 	bl	800ca9c <USBD_StdEPReq>
 800c242:	4603      	mov	r3, r0
 800c244:	73fb      	strb	r3, [r7, #15]
      break;
 800c246:	e00c      	b.n	800c262 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c24e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c252:	b2db      	uxtb	r3, r3
 800c254:	4619      	mov	r1, r3
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f001 fdf0 	bl	800de3c <USBD_LL_StallEP>
 800c25c:	4603      	mov	r3, r0
 800c25e:	73fb      	strb	r3, [r7, #15]
      break;
 800c260:	bf00      	nop
  }

  return ret;
 800c262:	7bfb      	ldrb	r3, [r7, #15]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b086      	sub	sp, #24
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	460b      	mov	r3, r1
 800c276:	607a      	str	r2, [r7, #4]
 800c278:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c27a:	2300      	movs	r3, #0
 800c27c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c27e:	7afb      	ldrb	r3, [r7, #11]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d16e      	bne.n	800c362 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c28a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c292:	2b03      	cmp	r3, #3
 800c294:	f040 8098 	bne.w	800c3c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	689a      	ldr	r2, [r3, #8]
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d913      	bls.n	800c2cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	689a      	ldr	r2, [r3, #8]
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	1ad2      	subs	r2, r2, r3
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	68da      	ldr	r2, [r3, #12]
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	bf28      	it	cs
 800c2be:	4613      	movcs	r3, r2
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	6879      	ldr	r1, [r7, #4]
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	f001 f994 	bl	800d5f2 <USBD_CtlContinueRx>
 800c2ca:	e07d      	b.n	800c3c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c2d2:	f003 031f 	and.w	r3, r3, #31
 800c2d6:	2b02      	cmp	r3, #2
 800c2d8:	d014      	beq.n	800c304 <USBD_LL_DataOutStage+0x98>
 800c2da:	2b02      	cmp	r3, #2
 800c2dc:	d81d      	bhi.n	800c31a <USBD_LL_DataOutStage+0xae>
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d002      	beq.n	800c2e8 <USBD_LL_DataOutStage+0x7c>
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d003      	beq.n	800c2ee <USBD_LL_DataOutStage+0x82>
 800c2e6:	e018      	b.n	800c31a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	75bb      	strb	r3, [r7, #22]
            break;
 800c2ec:	e018      	b.n	800c320 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	f000 fa64 	bl	800c7c6 <USBD_CoreFindIF>
 800c2fe:	4603      	mov	r3, r0
 800c300:	75bb      	strb	r3, [r7, #22]
            break;
 800c302:	e00d      	b.n	800c320 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	4619      	mov	r1, r3
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	f000 fa66 	bl	800c7e0 <USBD_CoreFindEP>
 800c314:	4603      	mov	r3, r0
 800c316:	75bb      	strb	r3, [r7, #22]
            break;
 800c318:	e002      	b.n	800c320 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c31a:	2300      	movs	r3, #0
 800c31c:	75bb      	strb	r3, [r7, #22]
            break;
 800c31e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c320:	7dbb      	ldrb	r3, [r7, #22]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d119      	bne.n	800c35a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d113      	bne.n	800c35a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c332:	7dba      	ldrb	r2, [r7, #22]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	32ae      	adds	r2, #174	@ 0xae
 800c338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c33c:	691b      	ldr	r3, [r3, #16]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d00b      	beq.n	800c35a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c342:	7dba      	ldrb	r2, [r7, #22]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c34a:	7dba      	ldrb	r2, [r7, #22]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	32ae      	adds	r2, #174	@ 0xae
 800c350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f001 f95a 	bl	800d614 <USBD_CtlSendStatus>
 800c360:	e032      	b.n	800c3c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c362:	7afb      	ldrb	r3, [r7, #11]
 800c364:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	4619      	mov	r1, r3
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f000 fa37 	bl	800c7e0 <USBD_CoreFindEP>
 800c372:	4603      	mov	r3, r0
 800c374:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c376:	7dbb      	ldrb	r3, [r7, #22]
 800c378:	2bff      	cmp	r3, #255	@ 0xff
 800c37a:	d025      	beq.n	800c3c8 <USBD_LL_DataOutStage+0x15c>
 800c37c:	7dbb      	ldrb	r3, [r7, #22]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d122      	bne.n	800c3c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	2b03      	cmp	r3, #3
 800c38c:	d117      	bne.n	800c3be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c38e:	7dba      	ldrb	r2, [r7, #22]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	32ae      	adds	r2, #174	@ 0xae
 800c394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c398:	699b      	ldr	r3, [r3, #24]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00f      	beq.n	800c3be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c39e:	7dba      	ldrb	r2, [r7, #22]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c3a6:	7dba      	ldrb	r2, [r7, #22]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	32ae      	adds	r2, #174	@ 0xae
 800c3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b0:	699b      	ldr	r3, [r3, #24]
 800c3b2:	7afa      	ldrb	r2, [r7, #11]
 800c3b4:	4611      	mov	r1, r2
 800c3b6:	68f8      	ldr	r0, [r7, #12]
 800c3b8:	4798      	blx	r3
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d001      	beq.n	800c3c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c3c4:	7dfb      	ldrb	r3, [r7, #23]
 800c3c6:	e000      	b.n	800c3ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3718      	adds	r7, #24
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b086      	sub	sp, #24
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	60f8      	str	r0, [r7, #12]
 800c3da:	460b      	mov	r3, r1
 800c3dc:	607a      	str	r2, [r7, #4]
 800c3de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c3e0:	7afb      	ldrb	r3, [r7, #11]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d16f      	bne.n	800c4c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3314      	adds	r3, #20
 800c3ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d15a      	bne.n	800c4ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	689a      	ldr	r2, [r3, #8]
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d914      	bls.n	800c42c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	689a      	ldr	r2, [r3, #8]
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	1ad2      	subs	r2, r2, r3
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	461a      	mov	r2, r3
 800c416:	6879      	ldr	r1, [r7, #4]
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f001 f8bc 	bl	800d596 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c41e:	2300      	movs	r3, #0
 800c420:	2200      	movs	r2, #0
 800c422:	2100      	movs	r1, #0
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f001 fdb3 	bl	800df90 <USBD_LL_PrepareReceive>
 800c42a:	e03f      	b.n	800c4ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	68da      	ldr	r2, [r3, #12]
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	429a      	cmp	r2, r3
 800c436:	d11c      	bne.n	800c472 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c440:	429a      	cmp	r2, r3
 800c442:	d316      	bcc.n	800c472 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c44e:	429a      	cmp	r2, r3
 800c450:	d20f      	bcs.n	800c472 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c452:	2200      	movs	r2, #0
 800c454:	2100      	movs	r1, #0
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f001 f89d 	bl	800d596 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2200      	movs	r2, #0
 800c460:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c464:	2300      	movs	r3, #0
 800c466:	2200      	movs	r2, #0
 800c468:	2100      	movs	r1, #0
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	f001 fd90 	bl	800df90 <USBD_LL_PrepareReceive>
 800c470:	e01c      	b.n	800c4ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	2b03      	cmp	r3, #3
 800c47c:	d10f      	bne.n	800c49e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d009      	beq.n	800c49e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2200      	movs	r2, #0
 800c48e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c49e:	2180      	movs	r1, #128	@ 0x80
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f001 fccb 	bl	800de3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c4a6:	68f8      	ldr	r0, [r7, #12]
 800c4a8:	f001 f8c7 	bl	800d63a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d03a      	beq.n	800c52c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	f7ff fe42 	bl	800c140 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c4c4:	e032      	b.n	800c52c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c4c6:	7afb      	ldrb	r3, [r7, #11]
 800c4c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f000 f985 	bl	800c7e0 <USBD_CoreFindEP>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4da:	7dfb      	ldrb	r3, [r7, #23]
 800c4dc:	2bff      	cmp	r3, #255	@ 0xff
 800c4de:	d025      	beq.n	800c52c <USBD_LL_DataInStage+0x15a>
 800c4e0:	7dfb      	ldrb	r3, [r7, #23]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d122      	bne.n	800c52c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	2b03      	cmp	r3, #3
 800c4f0:	d11c      	bne.n	800c52c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c4f2:	7dfa      	ldrb	r2, [r7, #23]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	32ae      	adds	r2, #174	@ 0xae
 800c4f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d014      	beq.n	800c52c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c502:	7dfa      	ldrb	r2, [r7, #23]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c50a:	7dfa      	ldrb	r2, [r7, #23]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	32ae      	adds	r2, #174	@ 0xae
 800c510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c514:	695b      	ldr	r3, [r3, #20]
 800c516:	7afa      	ldrb	r2, [r7, #11]
 800c518:	4611      	mov	r1, r2
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	4798      	blx	r3
 800c51e:	4603      	mov	r3, r0
 800c520:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c522:	7dbb      	ldrb	r3, [r7, #22]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d001      	beq.n	800c52c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c528:	7dbb      	ldrb	r3, [r7, #22]
 800c52a:	e000      	b.n	800c52e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c52c:	2300      	movs	r3, #0
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3718      	adds	r7, #24
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b084      	sub	sp, #16
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c53e:	2300      	movs	r3, #0
 800c540:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2201      	movs	r2, #1
 800c546:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d014      	beq.n	800c59c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00e      	beq.n	800c59c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	6852      	ldr	r2, [r2, #4]
 800c58a:	b2d2      	uxtb	r2, r2
 800c58c:	4611      	mov	r1, r2
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	4798      	blx	r3
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d001      	beq.n	800c59c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c598:	2303      	movs	r3, #3
 800c59a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c59c:	2340      	movs	r3, #64	@ 0x40
 800c59e:	2200      	movs	r2, #0
 800c5a0:	2100      	movs	r1, #0
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f001 fc05 	bl	800ddb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2240      	movs	r2, #64	@ 0x40
 800c5b4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5b8:	2340      	movs	r3, #64	@ 0x40
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	2180      	movs	r1, #128	@ 0x80
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f001 fbf7 	bl	800ddb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2240      	movs	r2, #64	@ 0x40
 800c5ce:	621a      	str	r2, [r3, #32]

  return ret;
 800c5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c5da:	b480      	push	{r7}
 800c5dc:	b083      	sub	sp, #12
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	78fa      	ldrb	r2, [r7, #3]
 800c5ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	370c      	adds	r7, #12
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c5fa:	b480      	push	{r7}
 800c5fc:	b083      	sub	sp, #12
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b04      	cmp	r3, #4
 800c60c:	d006      	beq.n	800c61c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c614:	b2da      	uxtb	r2, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2204      	movs	r2, #4
 800c620:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	370c      	adds	r7, #12
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr

0800c632 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c632:	b480      	push	{r7}
 800c634:	b083      	sub	sp, #12
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b04      	cmp	r3, #4
 800c644:	d106      	bne.n	800c654 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c64c:	b2da      	uxtb	r2, r3
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	370c      	adds	r7, #12
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr

0800c662 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b082      	sub	sp, #8
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c670:	b2db      	uxtb	r3, r3
 800c672:	2b03      	cmp	r3, #3
 800c674:	d110      	bne.n	800c698 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00b      	beq.n	800c698 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c686:	69db      	ldr	r3, [r3, #28]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d005      	beq.n	800c698 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c692:	69db      	ldr	r3, [r3, #28]
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b082      	sub	sp, #8
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	32ae      	adds	r2, #174	@ 0xae
 800c6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c6c0:	2303      	movs	r3, #3
 800c6c2:	e01c      	b.n	800c6fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	2b03      	cmp	r3, #3
 800c6ce:	d115      	bne.n	800c6fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	32ae      	adds	r2, #174	@ 0xae
 800c6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6de:	6a1b      	ldr	r3, [r3, #32]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00b      	beq.n	800c6fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	32ae      	adds	r2, #174	@ 0xae
 800c6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6f2:	6a1b      	ldr	r3, [r3, #32]
 800c6f4:	78fa      	ldrb	r2, [r7, #3]
 800c6f6:	4611      	mov	r1, r2
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c6fc:	2300      	movs	r3, #0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b082      	sub	sp, #8
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	460b      	mov	r3, r1
 800c710:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	32ae      	adds	r2, #174	@ 0xae
 800c71c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d101      	bne.n	800c728 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c724:	2303      	movs	r3, #3
 800c726:	e01c      	b.n	800c762 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	2b03      	cmp	r3, #3
 800c732:	d115      	bne.n	800c760 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	32ae      	adds	r2, #174	@ 0xae
 800c73e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00b      	beq.n	800c760 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	32ae      	adds	r2, #174	@ 0xae
 800c752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c758:	78fa      	ldrb	r2, [r7, #3]
 800c75a:	4611      	mov	r1, r2
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c76a:	b480      	push	{r7}
 800c76c:	b083      	sub	sp, #12
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c788:	2300      	movs	r3, #0
 800c78a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d00e      	beq.n	800c7bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	6852      	ldr	r2, [r2, #4]
 800c7aa:	b2d2      	uxtb	r2, r2
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	4798      	blx	r3
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d001      	beq.n	800c7bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c7b8:	2303      	movs	r3, #3
 800c7ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b083      	sub	sp, #12
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c7d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c7ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	370c      	adds	r7, #12
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr

0800c7fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b086      	sub	sp, #24
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
 800c802:	460b      	mov	r3, r1
 800c804:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c80e:	2300      	movs	r3, #0
 800c810:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	885b      	ldrh	r3, [r3, #2]
 800c816:	b29b      	uxth	r3, r3
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	7812      	ldrb	r2, [r2, #0]
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d91f      	bls.n	800c860 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c826:	e013      	b.n	800c850 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c828:	f107 030a 	add.w	r3, r7, #10
 800c82c:	4619      	mov	r1, r3
 800c82e:	6978      	ldr	r0, [r7, #20]
 800c830:	f000 f81b 	bl	800c86a <USBD_GetNextDesc>
 800c834:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	785b      	ldrb	r3, [r3, #1]
 800c83a:	2b05      	cmp	r3, #5
 800c83c:	d108      	bne.n	800c850 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	789b      	ldrb	r3, [r3, #2]
 800c846:	78fa      	ldrb	r2, [r7, #3]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d008      	beq.n	800c85e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c84c:	2300      	movs	r3, #0
 800c84e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	885b      	ldrh	r3, [r3, #2]
 800c854:	b29a      	uxth	r2, r3
 800c856:	897b      	ldrh	r3, [r7, #10]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d8e5      	bhi.n	800c828 <USBD_GetEpDesc+0x2e>
 800c85c:	e000      	b.n	800c860 <USBD_GetEpDesc+0x66>
          break;
 800c85e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c860:	693b      	ldr	r3, [r7, #16]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c86a:	b480      	push	{r7}
 800c86c:	b085      	sub	sp, #20
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
 800c872:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	881b      	ldrh	r3, [r3, #0]
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	7812      	ldrb	r2, [r2, #0]
 800c880:	4413      	add	r3, r2
 800c882:	b29a      	uxth	r2, r3
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	461a      	mov	r2, r3
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4413      	add	r3, r2
 800c892:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c894:	68fb      	ldr	r3, [r7, #12]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr

0800c8a2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c8a2:	b480      	push	{r7}
 800c8a4:	b087      	sub	sp, #28
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c8c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c8c4:	021b      	lsls	r3, r3, #8
 800c8c6:	b21a      	sxth	r2, r3
 800c8c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	b21b      	sxth	r3, r3
 800c8d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c8d2:	89fb      	ldrh	r3, [r7, #14]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	371c      	adds	r7, #28
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c8f6:	2b40      	cmp	r3, #64	@ 0x40
 800c8f8:	d005      	beq.n	800c906 <USBD_StdDevReq+0x26>
 800c8fa:	2b40      	cmp	r3, #64	@ 0x40
 800c8fc:	d857      	bhi.n	800c9ae <USBD_StdDevReq+0xce>
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00f      	beq.n	800c922 <USBD_StdDevReq+0x42>
 800c902:	2b20      	cmp	r3, #32
 800c904:	d153      	bne.n	800c9ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	32ae      	adds	r2, #174	@ 0xae
 800c910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	4798      	blx	r3
 800c91c:	4603      	mov	r3, r0
 800c91e:	73fb      	strb	r3, [r7, #15]
      break;
 800c920:	e04a      	b.n	800c9b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	785b      	ldrb	r3, [r3, #1]
 800c926:	2b09      	cmp	r3, #9
 800c928:	d83b      	bhi.n	800c9a2 <USBD_StdDevReq+0xc2>
 800c92a:	a201      	add	r2, pc, #4	@ (adr r2, 800c930 <USBD_StdDevReq+0x50>)
 800c92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c930:	0800c985 	.word	0x0800c985
 800c934:	0800c999 	.word	0x0800c999
 800c938:	0800c9a3 	.word	0x0800c9a3
 800c93c:	0800c98f 	.word	0x0800c98f
 800c940:	0800c9a3 	.word	0x0800c9a3
 800c944:	0800c963 	.word	0x0800c963
 800c948:	0800c959 	.word	0x0800c959
 800c94c:	0800c9a3 	.word	0x0800c9a3
 800c950:	0800c97b 	.word	0x0800c97b
 800c954:	0800c96d 	.word	0x0800c96d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c958:	6839      	ldr	r1, [r7, #0]
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fa3c 	bl	800cdd8 <USBD_GetDescriptor>
          break;
 800c960:	e024      	b.n	800c9ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c962:	6839      	ldr	r1, [r7, #0]
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 fba1 	bl	800d0ac <USBD_SetAddress>
          break;
 800c96a:	e01f      	b.n	800c9ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c96c:	6839      	ldr	r1, [r7, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fbe0 	bl	800d134 <USBD_SetConfig>
 800c974:	4603      	mov	r3, r0
 800c976:	73fb      	strb	r3, [r7, #15]
          break;
 800c978:	e018      	b.n	800c9ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c97a:	6839      	ldr	r1, [r7, #0]
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fc83 	bl	800d288 <USBD_GetConfig>
          break;
 800c982:	e013      	b.n	800c9ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c984:	6839      	ldr	r1, [r7, #0]
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 fcb4 	bl	800d2f4 <USBD_GetStatus>
          break;
 800c98c:	e00e      	b.n	800c9ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c98e:	6839      	ldr	r1, [r7, #0]
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 fce3 	bl	800d35c <USBD_SetFeature>
          break;
 800c996:	e009      	b.n	800c9ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c998:	6839      	ldr	r1, [r7, #0]
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fd07 	bl	800d3ae <USBD_ClrFeature>
          break;
 800c9a0:	e004      	b.n	800c9ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c9a2:	6839      	ldr	r1, [r7, #0]
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fd5e 	bl	800d466 <USBD_CtlError>
          break;
 800c9aa:	bf00      	nop
      }
      break;
 800c9ac:	e004      	b.n	800c9b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c9ae:	6839      	ldr	r1, [r7, #0]
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 fd58 	bl	800d466 <USBD_CtlError>
      break;
 800c9b6:	bf00      	nop
  }

  return ret;
 800c9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop

0800c9c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c9da:	2b40      	cmp	r3, #64	@ 0x40
 800c9dc:	d005      	beq.n	800c9ea <USBD_StdItfReq+0x26>
 800c9de:	2b40      	cmp	r3, #64	@ 0x40
 800c9e0:	d852      	bhi.n	800ca88 <USBD_StdItfReq+0xc4>
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d001      	beq.n	800c9ea <USBD_StdItfReq+0x26>
 800c9e6:	2b20      	cmp	r3, #32
 800c9e8:	d14e      	bne.n	800ca88 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	2b02      	cmp	r3, #2
 800c9f6:	d840      	bhi.n	800ca7a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	889b      	ldrh	r3, [r3, #4]
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d836      	bhi.n	800ca70 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	889b      	ldrh	r3, [r3, #4]
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	4619      	mov	r1, r3
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7ff fedb 	bl	800c7c6 <USBD_CoreFindIF>
 800ca10:	4603      	mov	r3, r0
 800ca12:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca14:	7bbb      	ldrb	r3, [r7, #14]
 800ca16:	2bff      	cmp	r3, #255	@ 0xff
 800ca18:	d01d      	beq.n	800ca56 <USBD_StdItfReq+0x92>
 800ca1a:	7bbb      	ldrb	r3, [r7, #14]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d11a      	bne.n	800ca56 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ca20:	7bba      	ldrb	r2, [r7, #14]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	32ae      	adds	r2, #174	@ 0xae
 800ca26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d00f      	beq.n	800ca50 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ca30:	7bba      	ldrb	r2, [r7, #14]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ca38:	7bba      	ldrb	r2, [r7, #14]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	32ae      	adds	r2, #174	@ 0xae
 800ca3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	6839      	ldr	r1, [r7, #0]
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	4798      	blx	r3
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ca4e:	e004      	b.n	800ca5a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ca50:	2303      	movs	r3, #3
 800ca52:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ca54:	e001      	b.n	800ca5a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ca56:	2303      	movs	r3, #3
 800ca58:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	88db      	ldrh	r3, [r3, #6]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d110      	bne.n	800ca84 <USBD_StdItfReq+0xc0>
 800ca62:	7bfb      	ldrb	r3, [r7, #15]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10d      	bne.n	800ca84 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 fdd3 	bl	800d614 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ca6e:	e009      	b.n	800ca84 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ca70:	6839      	ldr	r1, [r7, #0]
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 fcf7 	bl	800d466 <USBD_CtlError>
          break;
 800ca78:	e004      	b.n	800ca84 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ca7a:	6839      	ldr	r1, [r7, #0]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 fcf2 	bl	800d466 <USBD_CtlError>
          break;
 800ca82:	e000      	b.n	800ca86 <USBD_StdItfReq+0xc2>
          break;
 800ca84:	bf00      	nop
      }
      break;
 800ca86:	e004      	b.n	800ca92 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ca88:	6839      	ldr	r1, [r7, #0]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 fceb 	bl	800d466 <USBD_CtlError>
      break;
 800ca90:	bf00      	nop
  }

  return ret;
 800ca92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	889b      	ldrh	r3, [r3, #4]
 800caae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cab8:	2b40      	cmp	r3, #64	@ 0x40
 800caba:	d007      	beq.n	800cacc <USBD_StdEPReq+0x30>
 800cabc:	2b40      	cmp	r3, #64	@ 0x40
 800cabe:	f200 817f 	bhi.w	800cdc0 <USBD_StdEPReq+0x324>
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d02a      	beq.n	800cb1c <USBD_StdEPReq+0x80>
 800cac6:	2b20      	cmp	r3, #32
 800cac8:	f040 817a 	bne.w	800cdc0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cacc:	7bbb      	ldrb	r3, [r7, #14]
 800cace:	4619      	mov	r1, r3
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f7ff fe85 	bl	800c7e0 <USBD_CoreFindEP>
 800cad6:	4603      	mov	r3, r0
 800cad8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cada:	7b7b      	ldrb	r3, [r7, #13]
 800cadc:	2bff      	cmp	r3, #255	@ 0xff
 800cade:	f000 8174 	beq.w	800cdca <USBD_StdEPReq+0x32e>
 800cae2:	7b7b      	ldrb	r3, [r7, #13]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f040 8170 	bne.w	800cdca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800caea:	7b7a      	ldrb	r2, [r7, #13]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800caf2:	7b7a      	ldrb	r2, [r7, #13]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	32ae      	adds	r2, #174	@ 0xae
 800caf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f000 8163 	beq.w	800cdca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cb04:	7b7a      	ldrb	r2, [r7, #13]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	32ae      	adds	r2, #174	@ 0xae
 800cb0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	6839      	ldr	r1, [r7, #0]
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	4798      	blx	r3
 800cb16:	4603      	mov	r3, r0
 800cb18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cb1a:	e156      	b.n	800cdca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	785b      	ldrb	r3, [r3, #1]
 800cb20:	2b03      	cmp	r3, #3
 800cb22:	d008      	beq.n	800cb36 <USBD_StdEPReq+0x9a>
 800cb24:	2b03      	cmp	r3, #3
 800cb26:	f300 8145 	bgt.w	800cdb4 <USBD_StdEPReq+0x318>
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f000 809b 	beq.w	800cc66 <USBD_StdEPReq+0x1ca>
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d03c      	beq.n	800cbae <USBD_StdEPReq+0x112>
 800cb34:	e13e      	b.n	800cdb4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	2b02      	cmp	r3, #2
 800cb40:	d002      	beq.n	800cb48 <USBD_StdEPReq+0xac>
 800cb42:	2b03      	cmp	r3, #3
 800cb44:	d016      	beq.n	800cb74 <USBD_StdEPReq+0xd8>
 800cb46:	e02c      	b.n	800cba2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb48:	7bbb      	ldrb	r3, [r7, #14]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00d      	beq.n	800cb6a <USBD_StdEPReq+0xce>
 800cb4e:	7bbb      	ldrb	r3, [r7, #14]
 800cb50:	2b80      	cmp	r3, #128	@ 0x80
 800cb52:	d00a      	beq.n	800cb6a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb54:	7bbb      	ldrb	r3, [r7, #14]
 800cb56:	4619      	mov	r1, r3
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f001 f96f 	bl	800de3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb5e:	2180      	movs	r1, #128	@ 0x80
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f001 f96b 	bl	800de3c <USBD_LL_StallEP>
 800cb66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb68:	e020      	b.n	800cbac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cb6a:	6839      	ldr	r1, [r7, #0]
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 fc7a 	bl	800d466 <USBD_CtlError>
              break;
 800cb72:	e01b      	b.n	800cbac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	885b      	ldrh	r3, [r3, #2]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10e      	bne.n	800cb9a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cb7c:	7bbb      	ldrb	r3, [r7, #14]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00b      	beq.n	800cb9a <USBD_StdEPReq+0xfe>
 800cb82:	7bbb      	ldrb	r3, [r7, #14]
 800cb84:	2b80      	cmp	r3, #128	@ 0x80
 800cb86:	d008      	beq.n	800cb9a <USBD_StdEPReq+0xfe>
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	88db      	ldrh	r3, [r3, #6]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d104      	bne.n	800cb9a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb90:	7bbb      	ldrb	r3, [r7, #14]
 800cb92:	4619      	mov	r1, r3
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f001 f951 	bl	800de3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 fd3a 	bl	800d614 <USBD_CtlSendStatus>

              break;
 800cba0:	e004      	b.n	800cbac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cba2:	6839      	ldr	r1, [r7, #0]
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 fc5e 	bl	800d466 <USBD_CtlError>
              break;
 800cbaa:	bf00      	nop
          }
          break;
 800cbac:	e107      	b.n	800cdbe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d002      	beq.n	800cbc0 <USBD_StdEPReq+0x124>
 800cbba:	2b03      	cmp	r3, #3
 800cbbc:	d016      	beq.n	800cbec <USBD_StdEPReq+0x150>
 800cbbe:	e04b      	b.n	800cc58 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbc0:	7bbb      	ldrb	r3, [r7, #14]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00d      	beq.n	800cbe2 <USBD_StdEPReq+0x146>
 800cbc6:	7bbb      	ldrb	r3, [r7, #14]
 800cbc8:	2b80      	cmp	r3, #128	@ 0x80
 800cbca:	d00a      	beq.n	800cbe2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbcc:	7bbb      	ldrb	r3, [r7, #14]
 800cbce:	4619      	mov	r1, r3
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f001 f933 	bl	800de3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbd6:	2180      	movs	r1, #128	@ 0x80
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f001 f92f 	bl	800de3c <USBD_LL_StallEP>
 800cbde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cbe0:	e040      	b.n	800cc64 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 fc3e 	bl	800d466 <USBD_CtlError>
              break;
 800cbea:	e03b      	b.n	800cc64 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	885b      	ldrh	r3, [r3, #2]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d136      	bne.n	800cc62 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cbf4:	7bbb      	ldrb	r3, [r7, #14]
 800cbf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d004      	beq.n	800cc08 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cbfe:	7bbb      	ldrb	r3, [r7, #14]
 800cc00:	4619      	mov	r1, r3
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f001 f939 	bl	800de7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 fd03 	bl	800d614 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cc0e:	7bbb      	ldrb	r3, [r7, #14]
 800cc10:	4619      	mov	r1, r3
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f7ff fde4 	bl	800c7e0 <USBD_CoreFindEP>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc1c:	7b7b      	ldrb	r3, [r7, #13]
 800cc1e:	2bff      	cmp	r3, #255	@ 0xff
 800cc20:	d01f      	beq.n	800cc62 <USBD_StdEPReq+0x1c6>
 800cc22:	7b7b      	ldrb	r3, [r7, #13]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d11c      	bne.n	800cc62 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cc28:	7b7a      	ldrb	r2, [r7, #13]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cc30:	7b7a      	ldrb	r2, [r7, #13]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	32ae      	adds	r2, #174	@ 0xae
 800cc36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d010      	beq.n	800cc62 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cc40:	7b7a      	ldrb	r2, [r7, #13]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	32ae      	adds	r2, #174	@ 0xae
 800cc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	4798      	blx	r3
 800cc52:	4603      	mov	r3, r0
 800cc54:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cc56:	e004      	b.n	800cc62 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cc58:	6839      	ldr	r1, [r7, #0]
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 fc03 	bl	800d466 <USBD_CtlError>
              break;
 800cc60:	e000      	b.n	800cc64 <USBD_StdEPReq+0x1c8>
              break;
 800cc62:	bf00      	nop
          }
          break;
 800cc64:	e0ab      	b.n	800cdbe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	d002      	beq.n	800cc78 <USBD_StdEPReq+0x1dc>
 800cc72:	2b03      	cmp	r3, #3
 800cc74:	d032      	beq.n	800ccdc <USBD_StdEPReq+0x240>
 800cc76:	e097      	b.n	800cda8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc78:	7bbb      	ldrb	r3, [r7, #14]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d007      	beq.n	800cc8e <USBD_StdEPReq+0x1f2>
 800cc7e:	7bbb      	ldrb	r3, [r7, #14]
 800cc80:	2b80      	cmp	r3, #128	@ 0x80
 800cc82:	d004      	beq.n	800cc8e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cc84:	6839      	ldr	r1, [r7, #0]
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 fbed 	bl	800d466 <USBD_CtlError>
                break;
 800cc8c:	e091      	b.n	800cdb2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	da0b      	bge.n	800ccae <USBD_StdEPReq+0x212>
 800cc96:	7bbb      	ldrb	r3, [r7, #14]
 800cc98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	009b      	lsls	r3, r3, #2
 800cca0:	4413      	add	r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	3310      	adds	r3, #16
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	4413      	add	r3, r2
 800ccaa:	3304      	adds	r3, #4
 800ccac:	e00b      	b.n	800ccc6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccae:	7bbb      	ldrb	r3, [r7, #14]
 800ccb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	4413      	add	r3, r2
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	3304      	adds	r3, #4
 800ccc6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	2200      	movs	r2, #0
 800cccc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 fc43 	bl	800d560 <USBD_CtlSendData>
              break;
 800ccda:	e06a      	b.n	800cdb2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ccdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	da11      	bge.n	800cd08 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cce4:	7bbb      	ldrb	r3, [r7, #14]
 800cce6:	f003 020f 	and.w	r2, r3, #15
 800ccea:	6879      	ldr	r1, [r7, #4]
 800ccec:	4613      	mov	r3, r2
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	4413      	add	r3, r2
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	440b      	add	r3, r1
 800ccf6:	3324      	adds	r3, #36	@ 0x24
 800ccf8:	881b      	ldrh	r3, [r3, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d117      	bne.n	800cd2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ccfe:	6839      	ldr	r1, [r7, #0]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 fbb0 	bl	800d466 <USBD_CtlError>
                  break;
 800cd06:	e054      	b.n	800cdb2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd08:	7bbb      	ldrb	r3, [r7, #14]
 800cd0a:	f003 020f 	and.w	r2, r3, #15
 800cd0e:	6879      	ldr	r1, [r7, #4]
 800cd10:	4613      	mov	r3, r2
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	4413      	add	r3, r2
 800cd16:	009b      	lsls	r3, r3, #2
 800cd18:	440b      	add	r3, r1
 800cd1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cd1e:	881b      	ldrh	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d104      	bne.n	800cd2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cd24:	6839      	ldr	r1, [r7, #0]
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 fb9d 	bl	800d466 <USBD_CtlError>
                  break;
 800cd2c:	e041      	b.n	800cdb2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	da0b      	bge.n	800cd4e <USBD_StdEPReq+0x2b2>
 800cd36:	7bbb      	ldrb	r3, [r7, #14]
 800cd38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	3310      	adds	r3, #16
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	4413      	add	r3, r2
 800cd4a:	3304      	adds	r3, #4
 800cd4c:	e00b      	b.n	800cd66 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd4e:	7bbb      	ldrb	r3, [r7, #14]
 800cd50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd54:	4613      	mov	r3, r2
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4413      	add	r3, r2
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	4413      	add	r3, r2
 800cd64:	3304      	adds	r3, #4
 800cd66:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cd68:	7bbb      	ldrb	r3, [r7, #14]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d002      	beq.n	800cd74 <USBD_StdEPReq+0x2d8>
 800cd6e:	7bbb      	ldrb	r3, [r7, #14]
 800cd70:	2b80      	cmp	r3, #128	@ 0x80
 800cd72:	d103      	bne.n	800cd7c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	2200      	movs	r2, #0
 800cd78:	601a      	str	r2, [r3, #0]
 800cd7a:	e00e      	b.n	800cd9a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cd7c:	7bbb      	ldrb	r3, [r7, #14]
 800cd7e:	4619      	mov	r1, r3
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f001 f899 	bl	800deb8 <USBD_LL_IsStallEP>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d003      	beq.n	800cd94 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	601a      	str	r2, [r3, #0]
 800cd92:	e002      	b.n	800cd9a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	2200      	movs	r2, #0
 800cd98:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	2202      	movs	r2, #2
 800cd9e:	4619      	mov	r1, r3
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fbdd 	bl	800d560 <USBD_CtlSendData>
              break;
 800cda6:	e004      	b.n	800cdb2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cda8:	6839      	ldr	r1, [r7, #0]
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 fb5b 	bl	800d466 <USBD_CtlError>
              break;
 800cdb0:	bf00      	nop
          }
          break;
 800cdb2:	e004      	b.n	800cdbe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cdb4:	6839      	ldr	r1, [r7, #0]
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 fb55 	bl	800d466 <USBD_CtlError>
          break;
 800cdbc:	bf00      	nop
      }
      break;
 800cdbe:	e005      	b.n	800cdcc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cdc0:	6839      	ldr	r1, [r7, #0]
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fb4f 	bl	800d466 <USBD_CtlError>
      break;
 800cdc8:	e000      	b.n	800cdcc <USBD_StdEPReq+0x330>
      break;
 800cdca:	bf00      	nop
  }

  return ret;
 800cdcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
	...

0800cdd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cde2:	2300      	movs	r3, #0
 800cde4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cde6:	2300      	movs	r3, #0
 800cde8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cdea:	2300      	movs	r3, #0
 800cdec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	885b      	ldrh	r3, [r3, #2]
 800cdf2:	0a1b      	lsrs	r3, r3, #8
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	3b01      	subs	r3, #1
 800cdf8:	2b06      	cmp	r3, #6
 800cdfa:	f200 8128 	bhi.w	800d04e <USBD_GetDescriptor+0x276>
 800cdfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ce04 <USBD_GetDescriptor+0x2c>)
 800ce00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce04:	0800ce21 	.word	0x0800ce21
 800ce08:	0800ce39 	.word	0x0800ce39
 800ce0c:	0800ce79 	.word	0x0800ce79
 800ce10:	0800d04f 	.word	0x0800d04f
 800ce14:	0800d04f 	.word	0x0800d04f
 800ce18:	0800cfef 	.word	0x0800cfef
 800ce1c:	0800d01b 	.word	0x0800d01b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	7c12      	ldrb	r2, [r2, #16]
 800ce2c:	f107 0108 	add.w	r1, r7, #8
 800ce30:	4610      	mov	r0, r2
 800ce32:	4798      	blx	r3
 800ce34:	60f8      	str	r0, [r7, #12]
      break;
 800ce36:	e112      	b.n	800d05e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	7c1b      	ldrb	r3, [r3, #16]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10d      	bne.n	800ce5c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce48:	f107 0208 	add.w	r2, r7, #8
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	4798      	blx	r3
 800ce50:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	3301      	adds	r3, #1
 800ce56:	2202      	movs	r2, #2
 800ce58:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ce5a:	e100      	b.n	800d05e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce64:	f107 0208 	add.w	r2, r7, #8
 800ce68:	4610      	mov	r0, r2
 800ce6a:	4798      	blx	r3
 800ce6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	3301      	adds	r3, #1
 800ce72:	2202      	movs	r2, #2
 800ce74:	701a      	strb	r2, [r3, #0]
      break;
 800ce76:	e0f2      	b.n	800d05e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	885b      	ldrh	r3, [r3, #2]
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	2b05      	cmp	r3, #5
 800ce80:	f200 80ac 	bhi.w	800cfdc <USBD_GetDescriptor+0x204>
 800ce84:	a201      	add	r2, pc, #4	@ (adr r2, 800ce8c <USBD_GetDescriptor+0xb4>)
 800ce86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8a:	bf00      	nop
 800ce8c:	0800cea5 	.word	0x0800cea5
 800ce90:	0800ced9 	.word	0x0800ced9
 800ce94:	0800cf0d 	.word	0x0800cf0d
 800ce98:	0800cf41 	.word	0x0800cf41
 800ce9c:	0800cf75 	.word	0x0800cf75
 800cea0:	0800cfa9 	.word	0x0800cfa9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00b      	beq.n	800cec8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	7c12      	ldrb	r2, [r2, #16]
 800cebc:	f107 0108 	add.w	r1, r7, #8
 800cec0:	4610      	mov	r0, r2
 800cec2:	4798      	blx	r3
 800cec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cec6:	e091      	b.n	800cfec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 facb 	bl	800d466 <USBD_CtlError>
            err++;
 800ced0:	7afb      	ldrb	r3, [r7, #11]
 800ced2:	3301      	adds	r3, #1
 800ced4:	72fb      	strb	r3, [r7, #11]
          break;
 800ced6:	e089      	b.n	800cfec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00b      	beq.n	800cefc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ceea:	689b      	ldr	r3, [r3, #8]
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	7c12      	ldrb	r2, [r2, #16]
 800cef0:	f107 0108 	add.w	r1, r7, #8
 800cef4:	4610      	mov	r0, r2
 800cef6:	4798      	blx	r3
 800cef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cefa:	e077      	b.n	800cfec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cefc:	6839      	ldr	r1, [r7, #0]
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 fab1 	bl	800d466 <USBD_CtlError>
            err++;
 800cf04:	7afb      	ldrb	r3, [r7, #11]
 800cf06:	3301      	adds	r3, #1
 800cf08:	72fb      	strb	r3, [r7, #11]
          break;
 800cf0a:	e06f      	b.n	800cfec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00b      	beq.n	800cf30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	7c12      	ldrb	r2, [r2, #16]
 800cf24:	f107 0108 	add.w	r1, r7, #8
 800cf28:	4610      	mov	r0, r2
 800cf2a:	4798      	blx	r3
 800cf2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf2e:	e05d      	b.n	800cfec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 fa97 	bl	800d466 <USBD_CtlError>
            err++;
 800cf38:	7afb      	ldrb	r3, [r7, #11]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf3e:	e055      	b.n	800cfec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00b      	beq.n	800cf64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf52:	691b      	ldr	r3, [r3, #16]
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	7c12      	ldrb	r2, [r2, #16]
 800cf58:	f107 0108 	add.w	r1, r7, #8
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	4798      	blx	r3
 800cf60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf62:	e043      	b.n	800cfec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fa7d 	bl	800d466 <USBD_CtlError>
            err++;
 800cf6c:	7afb      	ldrb	r3, [r7, #11]
 800cf6e:	3301      	adds	r3, #1
 800cf70:	72fb      	strb	r3, [r7, #11]
          break;
 800cf72:	e03b      	b.n	800cfec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf7a:	695b      	ldr	r3, [r3, #20]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d00b      	beq.n	800cf98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf86:	695b      	ldr	r3, [r3, #20]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	7c12      	ldrb	r2, [r2, #16]
 800cf8c:	f107 0108 	add.w	r1, r7, #8
 800cf90:	4610      	mov	r0, r2
 800cf92:	4798      	blx	r3
 800cf94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf96:	e029      	b.n	800cfec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf98:	6839      	ldr	r1, [r7, #0]
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 fa63 	bl	800d466 <USBD_CtlError>
            err++;
 800cfa0:	7afb      	ldrb	r3, [r7, #11]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	72fb      	strb	r3, [r7, #11]
          break;
 800cfa6:	e021      	b.n	800cfec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfae:	699b      	ldr	r3, [r3, #24]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00b      	beq.n	800cfcc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfba:	699b      	ldr	r3, [r3, #24]
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	7c12      	ldrb	r2, [r2, #16]
 800cfc0:	f107 0108 	add.w	r1, r7, #8
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	4798      	blx	r3
 800cfc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfca:	e00f      	b.n	800cfec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfcc:	6839      	ldr	r1, [r7, #0]
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 fa49 	bl	800d466 <USBD_CtlError>
            err++;
 800cfd4:	7afb      	ldrb	r3, [r7, #11]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	72fb      	strb	r3, [r7, #11]
          break;
 800cfda:	e007      	b.n	800cfec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cfdc:	6839      	ldr	r1, [r7, #0]
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fa41 	bl	800d466 <USBD_CtlError>
          err++;
 800cfe4:	7afb      	ldrb	r3, [r7, #11]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cfea:	bf00      	nop
      }
      break;
 800cfec:	e037      	b.n	800d05e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	7c1b      	ldrb	r3, [r3, #16]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d109      	bne.n	800d00a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cffe:	f107 0208 	add.w	r2, r7, #8
 800d002:	4610      	mov	r0, r2
 800d004:	4798      	blx	r3
 800d006:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d008:	e029      	b.n	800d05e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d00a:	6839      	ldr	r1, [r7, #0]
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 fa2a 	bl	800d466 <USBD_CtlError>
        err++;
 800d012:	7afb      	ldrb	r3, [r7, #11]
 800d014:	3301      	adds	r3, #1
 800d016:	72fb      	strb	r3, [r7, #11]
      break;
 800d018:	e021      	b.n	800d05e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	7c1b      	ldrb	r3, [r3, #16]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d10d      	bne.n	800d03e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d02a:	f107 0208 	add.w	r2, r7, #8
 800d02e:	4610      	mov	r0, r2
 800d030:	4798      	blx	r3
 800d032:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	3301      	adds	r3, #1
 800d038:	2207      	movs	r2, #7
 800d03a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d03c:	e00f      	b.n	800d05e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d03e:	6839      	ldr	r1, [r7, #0]
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 fa10 	bl	800d466 <USBD_CtlError>
        err++;
 800d046:	7afb      	ldrb	r3, [r7, #11]
 800d048:	3301      	adds	r3, #1
 800d04a:	72fb      	strb	r3, [r7, #11]
      break;
 800d04c:	e007      	b.n	800d05e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d04e:	6839      	ldr	r1, [r7, #0]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 fa08 	bl	800d466 <USBD_CtlError>
      err++;
 800d056:	7afb      	ldrb	r3, [r7, #11]
 800d058:	3301      	adds	r3, #1
 800d05a:	72fb      	strb	r3, [r7, #11]
      break;
 800d05c:	bf00      	nop
  }

  if (err != 0U)
 800d05e:	7afb      	ldrb	r3, [r7, #11]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d11e      	bne.n	800d0a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	88db      	ldrh	r3, [r3, #6]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d016      	beq.n	800d09a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d06c:	893b      	ldrh	r3, [r7, #8]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00e      	beq.n	800d090 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	88da      	ldrh	r2, [r3, #6]
 800d076:	893b      	ldrh	r3, [r7, #8]
 800d078:	4293      	cmp	r3, r2
 800d07a:	bf28      	it	cs
 800d07c:	4613      	movcs	r3, r2
 800d07e:	b29b      	uxth	r3, r3
 800d080:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d082:	893b      	ldrh	r3, [r7, #8]
 800d084:	461a      	mov	r2, r3
 800d086:	68f9      	ldr	r1, [r7, #12]
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 fa69 	bl	800d560 <USBD_CtlSendData>
 800d08e:	e009      	b.n	800d0a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f9e7 	bl	800d466 <USBD_CtlError>
 800d098:	e004      	b.n	800d0a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 faba 	bl	800d614 <USBD_CtlSendStatus>
 800d0a0:	e000      	b.n	800d0a4 <USBD_GetDescriptor+0x2cc>
    return;
 800d0a2:	bf00      	nop
  }
}
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop

0800d0ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	889b      	ldrh	r3, [r3, #4]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d131      	bne.n	800d122 <USBD_SetAddress+0x76>
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	88db      	ldrh	r3, [r3, #6]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d12d      	bne.n	800d122 <USBD_SetAddress+0x76>
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	885b      	ldrh	r3, [r3, #2]
 800d0ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800d0cc:	d829      	bhi.n	800d122 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	885b      	ldrh	r3, [r3, #2]
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	2b03      	cmp	r3, #3
 800d0e4:	d104      	bne.n	800d0f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d0e6:	6839      	ldr	r1, [r7, #0]
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 f9bc 	bl	800d466 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0ee:	e01d      	b.n	800d12c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	7bfa      	ldrb	r2, [r7, #15]
 800d0f4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d0f8:	7bfb      	ldrb	r3, [r7, #15]
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 ff07 	bl	800df10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f000 fa86 	bl	800d614 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d108:	7bfb      	ldrb	r3, [r7, #15]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d004      	beq.n	800d118 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2202      	movs	r2, #2
 800d112:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d116:	e009      	b.n	800d12c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d120:	e004      	b.n	800d12c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 f99e 	bl	800d466 <USBD_CtlError>
  }
}
 800d12a:	bf00      	nop
 800d12c:	bf00      	nop
 800d12e:	3710      	adds	r7, #16
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	885b      	ldrh	r3, [r3, #2]
 800d146:	b2da      	uxtb	r2, r3
 800d148:	4b4e      	ldr	r3, [pc, #312]	@ (800d284 <USBD_SetConfig+0x150>)
 800d14a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d14c:	4b4d      	ldr	r3, [pc, #308]	@ (800d284 <USBD_SetConfig+0x150>)
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	2b01      	cmp	r3, #1
 800d152:	d905      	bls.n	800d160 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d154:	6839      	ldr	r1, [r7, #0]
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 f985 	bl	800d466 <USBD_CtlError>
    return USBD_FAIL;
 800d15c:	2303      	movs	r3, #3
 800d15e:	e08c      	b.n	800d27a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d166:	b2db      	uxtb	r3, r3
 800d168:	2b02      	cmp	r3, #2
 800d16a:	d002      	beq.n	800d172 <USBD_SetConfig+0x3e>
 800d16c:	2b03      	cmp	r3, #3
 800d16e:	d029      	beq.n	800d1c4 <USBD_SetConfig+0x90>
 800d170:	e075      	b.n	800d25e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d172:	4b44      	ldr	r3, [pc, #272]	@ (800d284 <USBD_SetConfig+0x150>)
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d020      	beq.n	800d1bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d17a:	4b42      	ldr	r3, [pc, #264]	@ (800d284 <USBD_SetConfig+0x150>)
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	461a      	mov	r2, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d184:	4b3f      	ldr	r3, [pc, #252]	@ (800d284 <USBD_SetConfig+0x150>)
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	4619      	mov	r1, r3
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f7fe ffe3 	bl	800c156 <USBD_SetClassConfig>
 800d190:	4603      	mov	r3, r0
 800d192:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d194:	7bfb      	ldrb	r3, [r7, #15]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d008      	beq.n	800d1ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d19a:	6839      	ldr	r1, [r7, #0]
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 f962 	bl	800d466 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2202      	movs	r2, #2
 800d1a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d1aa:	e065      	b.n	800d278 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f000 fa31 	bl	800d614 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2203      	movs	r2, #3
 800d1b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d1ba:	e05d      	b.n	800d278 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 fa29 	bl	800d614 <USBD_CtlSendStatus>
      break;
 800d1c2:	e059      	b.n	800d278 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d1c4:	4b2f      	ldr	r3, [pc, #188]	@ (800d284 <USBD_SetConfig+0x150>)
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d112      	bne.n	800d1f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2202      	movs	r2, #2
 800d1d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d1d4:	4b2b      	ldr	r3, [pc, #172]	@ (800d284 <USBD_SetConfig+0x150>)
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	461a      	mov	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d1de:	4b29      	ldr	r3, [pc, #164]	@ (800d284 <USBD_SetConfig+0x150>)
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f7fe ffd2 	bl	800c18e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 fa12 	bl	800d614 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d1f0:	e042      	b.n	800d278 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d1f2:	4b24      	ldr	r3, [pc, #144]	@ (800d284 <USBD_SetConfig+0x150>)
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d02a      	beq.n	800d256 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	b2db      	uxtb	r3, r3
 800d206:	4619      	mov	r1, r3
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f7fe ffc0 	bl	800c18e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d20e:	4b1d      	ldr	r3, [pc, #116]	@ (800d284 <USBD_SetConfig+0x150>)
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	461a      	mov	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d218:	4b1a      	ldr	r3, [pc, #104]	@ (800d284 <USBD_SetConfig+0x150>)
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	4619      	mov	r1, r3
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f7fe ff99 	bl	800c156 <USBD_SetClassConfig>
 800d224:	4603      	mov	r3, r0
 800d226:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d228:	7bfb      	ldrb	r3, [r7, #15]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00f      	beq.n	800d24e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d22e:	6839      	ldr	r1, [r7, #0]
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f000 f918 	bl	800d466 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	4619      	mov	r1, r3
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7fe ffa5 	bl	800c18e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2202      	movs	r2, #2
 800d248:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d24c:	e014      	b.n	800d278 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 f9e0 	bl	800d614 <USBD_CtlSendStatus>
      break;
 800d254:	e010      	b.n	800d278 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 f9dc 	bl	800d614 <USBD_CtlSendStatus>
      break;
 800d25c:	e00c      	b.n	800d278 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d25e:	6839      	ldr	r1, [r7, #0]
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 f900 	bl	800d466 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d266:	4b07      	ldr	r3, [pc, #28]	@ (800d284 <USBD_SetConfig+0x150>)
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	4619      	mov	r1, r3
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f7fe ff8e 	bl	800c18e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d272:	2303      	movs	r3, #3
 800d274:	73fb      	strb	r3, [r7, #15]
      break;
 800d276:	bf00      	nop
  }

  return ret;
 800d278:	7bfb      	ldrb	r3, [r7, #15]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3710      	adds	r7, #16
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	200008cc 	.word	0x200008cc

0800d288 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	88db      	ldrh	r3, [r3, #6]
 800d296:	2b01      	cmp	r3, #1
 800d298:	d004      	beq.n	800d2a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f8e2 	bl	800d466 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d2a2:	e023      	b.n	800d2ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	dc02      	bgt.n	800d2b6 <USBD_GetConfig+0x2e>
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	dc03      	bgt.n	800d2bc <USBD_GetConfig+0x34>
 800d2b4:	e015      	b.n	800d2e2 <USBD_GetConfig+0x5a>
 800d2b6:	2b03      	cmp	r3, #3
 800d2b8:	d00b      	beq.n	800d2d2 <USBD_GetConfig+0x4a>
 800d2ba:	e012      	b.n	800d2e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	3308      	adds	r3, #8
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 f948 	bl	800d560 <USBD_CtlSendData>
        break;
 800d2d0:	e00c      	b.n	800d2ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	4619      	mov	r1, r3
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 f940 	bl	800d560 <USBD_CtlSendData>
        break;
 800d2e0:	e004      	b.n	800d2ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d2e2:	6839      	ldr	r1, [r7, #0]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f8be 	bl	800d466 <USBD_CtlError>
        break;
 800d2ea:	bf00      	nop
}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d304:	b2db      	uxtb	r3, r3
 800d306:	3b01      	subs	r3, #1
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d81e      	bhi.n	800d34a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	88db      	ldrh	r3, [r3, #6]
 800d310:	2b02      	cmp	r3, #2
 800d312:	d004      	beq.n	800d31e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d314:	6839      	ldr	r1, [r7, #0]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f8a5 	bl	800d466 <USBD_CtlError>
        break;
 800d31c:	e01a      	b.n	800d354 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2201      	movs	r2, #1
 800d322:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d005      	beq.n	800d33a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	f043 0202 	orr.w	r2, r3, #2
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	330c      	adds	r3, #12
 800d33e:	2202      	movs	r2, #2
 800d340:	4619      	mov	r1, r3
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 f90c 	bl	800d560 <USBD_CtlSendData>
      break;
 800d348:	e004      	b.n	800d354 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d34a:	6839      	ldr	r1, [r7, #0]
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 f88a 	bl	800d466 <USBD_CtlError>
      break;
 800d352:	bf00      	nop
  }
}
 800d354:	bf00      	nop
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	885b      	ldrh	r3, [r3, #2]
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d107      	bne.n	800d37e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2201      	movs	r2, #1
 800d372:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 f94c 	bl	800d614 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d37c:	e013      	b.n	800d3a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	885b      	ldrh	r3, [r3, #2]
 800d382:	2b02      	cmp	r3, #2
 800d384:	d10b      	bne.n	800d39e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	889b      	ldrh	r3, [r3, #4]
 800d38a:	0a1b      	lsrs	r3, r3, #8
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 f93c 	bl	800d614 <USBD_CtlSendStatus>
}
 800d39c:	e003      	b.n	800d3a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d39e:	6839      	ldr	r1, [r7, #0]
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 f860 	bl	800d466 <USBD_CtlError>
}
 800d3a6:	bf00      	nop
 800d3a8:	3708      	adds	r7, #8
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b082      	sub	sp, #8
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	3b01      	subs	r3, #1
 800d3c2:	2b02      	cmp	r3, #2
 800d3c4:	d80b      	bhi.n	800d3de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	885b      	ldrh	r3, [r3, #2]
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d10c      	bne.n	800d3e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 f91c 	bl	800d614 <USBD_CtlSendStatus>
      }
      break;
 800d3dc:	e004      	b.n	800d3e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d3de:	6839      	ldr	r1, [r7, #0]
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 f840 	bl	800d466 <USBD_CtlError>
      break;
 800d3e6:	e000      	b.n	800d3ea <USBD_ClrFeature+0x3c>
      break;
 800d3e8:	bf00      	nop
  }
}
 800d3ea:	bf00      	nop
 800d3ec:	3708      	adds	r7, #8
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b084      	sub	sp, #16
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
 800d3fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	781a      	ldrb	r2, [r3, #0]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	3301      	adds	r3, #1
 800d40c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	781a      	ldrb	r2, [r3, #0]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	3301      	adds	r3, #1
 800d41a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	f7ff fa40 	bl	800c8a2 <SWAPBYTE>
 800d422:	4603      	mov	r3, r0
 800d424:	461a      	mov	r2, r3
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	3301      	adds	r3, #1
 800d42e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	3301      	adds	r3, #1
 800d434:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f7ff fa33 	bl	800c8a2 <SWAPBYTE>
 800d43c:	4603      	mov	r3, r0
 800d43e:	461a      	mov	r2, r3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	3301      	adds	r3, #1
 800d448:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	3301      	adds	r3, #1
 800d44e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f7ff fa26 	bl	800c8a2 <SWAPBYTE>
 800d456:	4603      	mov	r3, r0
 800d458:	461a      	mov	r2, r3
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	80da      	strh	r2, [r3, #6]
}
 800d45e:	bf00      	nop
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d466:	b580      	push	{r7, lr}
 800d468:	b082      	sub	sp, #8
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
 800d46e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d470:	2180      	movs	r1, #128	@ 0x80
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 fce2 	bl	800de3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d478:	2100      	movs	r1, #0
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 fcde 	bl	800de3c <USBD_LL_StallEP>
}
 800d480:	bf00      	nop
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d494:	2300      	movs	r3, #0
 800d496:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d042      	beq.n	800d524 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d4a2:	6938      	ldr	r0, [r7, #16]
 800d4a4:	f000 f842 	bl	800d52c <USBD_GetLen>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	005b      	lsls	r3, r3, #1
 800d4ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4b2:	d808      	bhi.n	800d4c6 <USBD_GetString+0x3e>
 800d4b4:	6938      	ldr	r0, [r7, #16]
 800d4b6:	f000 f839 	bl	800d52c <USBD_GetLen>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	3301      	adds	r3, #1
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	005b      	lsls	r3, r3, #1
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	e001      	b.n	800d4ca <USBD_GetString+0x42>
 800d4c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d4ce:	7dfb      	ldrb	r3, [r7, #23]
 800d4d0:	68ba      	ldr	r2, [r7, #8]
 800d4d2:	4413      	add	r3, r2
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	7812      	ldrb	r2, [r2, #0]
 800d4d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800d4da:	7dfb      	ldrb	r3, [r7, #23]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d4e0:	7dfb      	ldrb	r3, [r7, #23]
 800d4e2:	68ba      	ldr	r2, [r7, #8]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	2203      	movs	r2, #3
 800d4e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800d4ea:	7dfb      	ldrb	r3, [r7, #23]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d4f0:	e013      	b.n	800d51a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d4f2:	7dfb      	ldrb	r3, [r7, #23]
 800d4f4:	68ba      	ldr	r2, [r7, #8]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	693a      	ldr	r2, [r7, #16]
 800d4fa:	7812      	ldrb	r2, [r2, #0]
 800d4fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	3301      	adds	r3, #1
 800d502:	613b      	str	r3, [r7, #16]
    idx++;
 800d504:	7dfb      	ldrb	r3, [r7, #23]
 800d506:	3301      	adds	r3, #1
 800d508:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d50a:	7dfb      	ldrb	r3, [r7, #23]
 800d50c:	68ba      	ldr	r2, [r7, #8]
 800d50e:	4413      	add	r3, r2
 800d510:	2200      	movs	r2, #0
 800d512:	701a      	strb	r2, [r3, #0]
    idx++;
 800d514:	7dfb      	ldrb	r3, [r7, #23]
 800d516:	3301      	adds	r3, #1
 800d518:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1e7      	bne.n	800d4f2 <USBD_GetString+0x6a>
 800d522:	e000      	b.n	800d526 <USBD_GetString+0x9e>
    return;
 800d524:	bf00      	nop
  }
}
 800d526:	3718      	adds	r7, #24
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b085      	sub	sp, #20
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d534:	2300      	movs	r3, #0
 800d536:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d53c:	e005      	b.n	800d54a <USBD_GetLen+0x1e>
  {
    len++;
 800d53e:	7bfb      	ldrb	r3, [r7, #15]
 800d540:	3301      	adds	r3, #1
 800d542:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	3301      	adds	r3, #1
 800d548:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1f5      	bne.n	800d53e <USBD_GetLen+0x12>
  }

  return len;
 800d552:	7bfb      	ldrb	r3, [r7, #15]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3714      	adds	r7, #20
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2202      	movs	r2, #2
 800d570:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	687a      	ldr	r2, [r7, #4]
 800d57e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	68ba      	ldr	r2, [r7, #8]
 800d584:	2100      	movs	r1, #0
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	f000 fce1 	bl	800df4e <USBD_LL_Transmit>

  return USBD_OK;
 800d58c:	2300      	movs	r3, #0
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b084      	sub	sp, #16
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	60f8      	str	r0, [r7, #12]
 800d59e:	60b9      	str	r1, [r7, #8]
 800d5a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	68ba      	ldr	r2, [r7, #8]
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f000 fcd0 	bl	800df4e <USBD_LL_Transmit>

  return USBD_OK;
 800d5ae:	2300      	movs	r3, #0
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2203      	movs	r2, #3
 800d5c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	68ba      	ldr	r2, [r7, #8]
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f000 fcd4 	bl	800df90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d5e8:	2300      	movs	r3, #0
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3710      	adds	r7, #16
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b084      	sub	sp, #16
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	60f8      	str	r0, [r7, #12]
 800d5fa:	60b9      	str	r1, [r7, #8]
 800d5fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	68ba      	ldr	r2, [r7, #8]
 800d602:	2100      	movs	r1, #0
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 fcc3 	bl	800df90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2204      	movs	r2, #4
 800d620:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d624:	2300      	movs	r3, #0
 800d626:	2200      	movs	r2, #0
 800d628:	2100      	movs	r1, #0
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 fc8f 	bl	800df4e <USBD_LL_Transmit>

  return USBD_OK;
 800d630:	2300      	movs	r3, #0
}
 800d632:	4618      	mov	r0, r3
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b082      	sub	sp, #8
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2205      	movs	r2, #5
 800d646:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d64a:	2300      	movs	r3, #0
 800d64c:	2200      	movs	r2, #0
 800d64e:	2100      	movs	r1, #0
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 fc9d 	bl	800df90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d664:	2200      	movs	r2, #0
 800d666:	4912      	ldr	r1, [pc, #72]	@ (800d6b0 <MX_USB_DEVICE_Init+0x50>)
 800d668:	4812      	ldr	r0, [pc, #72]	@ (800d6b4 <MX_USB_DEVICE_Init+0x54>)
 800d66a:	f7fe fcf7 	bl	800c05c <USBD_Init>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d674:	f7f4 fe7a 	bl	800236c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d678:	490f      	ldr	r1, [pc, #60]	@ (800d6b8 <MX_USB_DEVICE_Init+0x58>)
 800d67a:	480e      	ldr	r0, [pc, #56]	@ (800d6b4 <MX_USB_DEVICE_Init+0x54>)
 800d67c:	f7fe fd1e 	bl	800c0bc <USBD_RegisterClass>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d686:	f7f4 fe71 	bl	800236c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d68a:	490c      	ldr	r1, [pc, #48]	@ (800d6bc <MX_USB_DEVICE_Init+0x5c>)
 800d68c:	4809      	ldr	r0, [pc, #36]	@ (800d6b4 <MX_USB_DEVICE_Init+0x54>)
 800d68e:	f7fe fc15 	bl	800bebc <USBD_CDC_RegisterInterface>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d001      	beq.n	800d69c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d698:	f7f4 fe68 	bl	800236c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d69c:	4805      	ldr	r0, [pc, #20]	@ (800d6b4 <MX_USB_DEVICE_Init+0x54>)
 800d69e:	f7fe fd43 	bl	800c128 <USBD_Start>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d001      	beq.n	800d6ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d6a8:	f7f4 fe60 	bl	800236c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d6ac:	bf00      	nop
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	200000b4 	.word	0x200000b4
 800d6b4:	200008d0 	.word	0x200008d0
 800d6b8:	20000020 	.word	0x20000020
 800d6bc:	200000a0 	.word	0x200000a0

0800d6c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	4905      	ldr	r1, [pc, #20]	@ (800d6dc <CDC_Init_FS+0x1c>)
 800d6c8:	4805      	ldr	r0, [pc, #20]	@ (800d6e0 <CDC_Init_FS+0x20>)
 800d6ca:	f7fe fc11 	bl	800bef0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d6ce:	4905      	ldr	r1, [pc, #20]	@ (800d6e4 <CDC_Init_FS+0x24>)
 800d6d0:	4803      	ldr	r0, [pc, #12]	@ (800d6e0 <CDC_Init_FS+0x20>)
 800d6d2:	f7fe fc2f 	bl	800bf34 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d6d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	200013ac 	.word	0x200013ac
 800d6e0:	200008d0 	.word	0x200008d0
 800d6e4:	20000bac 	.word	0x20000bac

0800d6e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d6ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	4603      	mov	r3, r0
 800d700:	6039      	str	r1, [r7, #0]
 800d702:	71fb      	strb	r3, [r7, #7]
 800d704:	4613      	mov	r3, r2
 800d706:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d708:	79fb      	ldrb	r3, [r7, #7]
 800d70a:	2b23      	cmp	r3, #35	@ 0x23
 800d70c:	d84a      	bhi.n	800d7a4 <CDC_Control_FS+0xac>
 800d70e:	a201      	add	r2, pc, #4	@ (adr r2, 800d714 <CDC_Control_FS+0x1c>)
 800d710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d714:	0800d7a5 	.word	0x0800d7a5
 800d718:	0800d7a5 	.word	0x0800d7a5
 800d71c:	0800d7a5 	.word	0x0800d7a5
 800d720:	0800d7a5 	.word	0x0800d7a5
 800d724:	0800d7a5 	.word	0x0800d7a5
 800d728:	0800d7a5 	.word	0x0800d7a5
 800d72c:	0800d7a5 	.word	0x0800d7a5
 800d730:	0800d7a5 	.word	0x0800d7a5
 800d734:	0800d7a5 	.word	0x0800d7a5
 800d738:	0800d7a5 	.word	0x0800d7a5
 800d73c:	0800d7a5 	.word	0x0800d7a5
 800d740:	0800d7a5 	.word	0x0800d7a5
 800d744:	0800d7a5 	.word	0x0800d7a5
 800d748:	0800d7a5 	.word	0x0800d7a5
 800d74c:	0800d7a5 	.word	0x0800d7a5
 800d750:	0800d7a5 	.word	0x0800d7a5
 800d754:	0800d7a5 	.word	0x0800d7a5
 800d758:	0800d7a5 	.word	0x0800d7a5
 800d75c:	0800d7a5 	.word	0x0800d7a5
 800d760:	0800d7a5 	.word	0x0800d7a5
 800d764:	0800d7a5 	.word	0x0800d7a5
 800d768:	0800d7a5 	.word	0x0800d7a5
 800d76c:	0800d7a5 	.word	0x0800d7a5
 800d770:	0800d7a5 	.word	0x0800d7a5
 800d774:	0800d7a5 	.word	0x0800d7a5
 800d778:	0800d7a5 	.word	0x0800d7a5
 800d77c:	0800d7a5 	.word	0x0800d7a5
 800d780:	0800d7a5 	.word	0x0800d7a5
 800d784:	0800d7a5 	.word	0x0800d7a5
 800d788:	0800d7a5 	.word	0x0800d7a5
 800d78c:	0800d7a5 	.word	0x0800d7a5
 800d790:	0800d7a5 	.word	0x0800d7a5
 800d794:	0800d7a5 	.word	0x0800d7a5
 800d798:	0800d7a5 	.word	0x0800d7a5
 800d79c:	0800d7a5 	.word	0x0800d7a5
 800d7a0:	0800d7a5 	.word	0x0800d7a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d7a4:	bf00      	nop
  }

  return (USBD_OK);
 800d7a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	370c      	adds	r7, #12
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr

0800d7b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d7be:	6879      	ldr	r1, [r7, #4]
 800d7c0:	4805      	ldr	r0, [pc, #20]	@ (800d7d8 <CDC_Receive_FS+0x24>)
 800d7c2:	f7fe fbb7 	bl	800bf34 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d7c6:	4804      	ldr	r0, [pc, #16]	@ (800d7d8 <CDC_Receive_FS+0x24>)
 800d7c8:	f7fe fc12 	bl	800bff0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d7cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3708      	adds	r7, #8
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	200008d0 	.word	0x200008d0

0800d7dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d7ec:	4b0d      	ldr	r3, [pc, #52]	@ (800d824 <CDC_Transmit_FS+0x48>)
 800d7ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d7f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d001      	beq.n	800d802 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d7fe:	2301      	movs	r3, #1
 800d800:	e00b      	b.n	800d81a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d802:	887b      	ldrh	r3, [r7, #2]
 800d804:	461a      	mov	r2, r3
 800d806:	6879      	ldr	r1, [r7, #4]
 800d808:	4806      	ldr	r0, [pc, #24]	@ (800d824 <CDC_Transmit_FS+0x48>)
 800d80a:	f7fe fb71 	bl	800bef0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d80e:	4805      	ldr	r0, [pc, #20]	@ (800d824 <CDC_Transmit_FS+0x48>)
 800d810:	f7fe fbae 	bl	800bf70 <USBD_CDC_TransmitPacket>
 800d814:	4603      	mov	r3, r0
 800d816:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d818:	7bfb      	ldrb	r3, [r7, #15]
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	200008d0 	.word	0x200008d0

0800d828 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d828:	b480      	push	{r7}
 800d82a:	b087      	sub	sp, #28
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	4613      	mov	r3, r2
 800d834:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d836:	2300      	movs	r3, #0
 800d838:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d83a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	371c      	adds	r7, #28
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr
	...

0800d84c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	4603      	mov	r3, r0
 800d854:	6039      	str	r1, [r7, #0]
 800d856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	2212      	movs	r2, #18
 800d85c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d85e:	4b03      	ldr	r3, [pc, #12]	@ (800d86c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d860:	4618      	mov	r0, r3
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	200000d0 	.word	0x200000d0

0800d870 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	4603      	mov	r3, r0
 800d878:	6039      	str	r1, [r7, #0]
 800d87a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	2204      	movs	r2, #4
 800d880:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d882:	4b03      	ldr	r3, [pc, #12]	@ (800d890 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d884:	4618      	mov	r0, r3
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr
 800d890:	200000e4 	.word	0x200000e4

0800d894 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
 800d89a:	4603      	mov	r3, r0
 800d89c:	6039      	str	r1, [r7, #0]
 800d89e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d8a0:	79fb      	ldrb	r3, [r7, #7]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d105      	bne.n	800d8b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d8a6:	683a      	ldr	r2, [r7, #0]
 800d8a8:	4907      	ldr	r1, [pc, #28]	@ (800d8c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d8aa:	4808      	ldr	r0, [pc, #32]	@ (800d8cc <USBD_FS_ProductStrDescriptor+0x38>)
 800d8ac:	f7ff fdec 	bl	800d488 <USBD_GetString>
 800d8b0:	e004      	b.n	800d8bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d8b2:	683a      	ldr	r2, [r7, #0]
 800d8b4:	4904      	ldr	r1, [pc, #16]	@ (800d8c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d8b6:	4805      	ldr	r0, [pc, #20]	@ (800d8cc <USBD_FS_ProductStrDescriptor+0x38>)
 800d8b8:	f7ff fde6 	bl	800d488 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8bc:	4b02      	ldr	r3, [pc, #8]	@ (800d8c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3708      	adds	r7, #8
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	20001bac 	.word	0x20001bac
 800d8cc:	08014b38 	.word	0x08014b38

0800d8d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	6039      	str	r1, [r7, #0]
 800d8da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d8dc:	683a      	ldr	r2, [r7, #0]
 800d8de:	4904      	ldr	r1, [pc, #16]	@ (800d8f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d8e0:	4804      	ldr	r0, [pc, #16]	@ (800d8f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d8e2:	f7ff fdd1 	bl	800d488 <USBD_GetString>
  return USBD_StrDesc;
 800d8e6:	4b02      	ldr	r3, [pc, #8]	@ (800d8f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}
 800d8f0:	20001bac 	.word	0x20001bac
 800d8f4:	08014b40 	.word	0x08014b40

0800d8f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	4603      	mov	r3, r0
 800d900:	6039      	str	r1, [r7, #0]
 800d902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	221a      	movs	r2, #26
 800d908:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d90a:	f000 f843 	bl	800d994 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d90e:	4b02      	ldr	r3, [pc, #8]	@ (800d918 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d910:	4618      	mov	r0, r3
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	200000e8 	.word	0x200000e8

0800d91c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
 800d922:	4603      	mov	r3, r0
 800d924:	6039      	str	r1, [r7, #0]
 800d926:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d928:	79fb      	ldrb	r3, [r7, #7]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d105      	bne.n	800d93a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d92e:	683a      	ldr	r2, [r7, #0]
 800d930:	4907      	ldr	r1, [pc, #28]	@ (800d950 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d932:	4808      	ldr	r0, [pc, #32]	@ (800d954 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d934:	f7ff fda8 	bl	800d488 <USBD_GetString>
 800d938:	e004      	b.n	800d944 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d93a:	683a      	ldr	r2, [r7, #0]
 800d93c:	4904      	ldr	r1, [pc, #16]	@ (800d950 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d93e:	4805      	ldr	r0, [pc, #20]	@ (800d954 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d940:	f7ff fda2 	bl	800d488 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d944:	4b02      	ldr	r3, [pc, #8]	@ (800d950 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d946:	4618      	mov	r0, r3
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	20001bac 	.word	0x20001bac
 800d954:	08014b4c 	.word	0x08014b4c

0800d958 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	4603      	mov	r3, r0
 800d960:	6039      	str	r1, [r7, #0]
 800d962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d964:	79fb      	ldrb	r3, [r7, #7]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d105      	bne.n	800d976 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d96a:	683a      	ldr	r2, [r7, #0]
 800d96c:	4907      	ldr	r1, [pc, #28]	@ (800d98c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d96e:	4808      	ldr	r0, [pc, #32]	@ (800d990 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d970:	f7ff fd8a 	bl	800d488 <USBD_GetString>
 800d974:	e004      	b.n	800d980 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d976:	683a      	ldr	r2, [r7, #0]
 800d978:	4904      	ldr	r1, [pc, #16]	@ (800d98c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d97a:	4805      	ldr	r0, [pc, #20]	@ (800d990 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d97c:	f7ff fd84 	bl	800d488 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d980:	4b02      	ldr	r3, [pc, #8]	@ (800d98c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d982:	4618      	mov	r0, r3
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	20001bac 	.word	0x20001bac
 800d990:	08014b58 	.word	0x08014b58

0800d994 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d99a:	4b0f      	ldr	r3, [pc, #60]	@ (800d9d8 <Get_SerialNum+0x44>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d9a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d9dc <Get_SerialNum+0x48>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d9a6:	4b0e      	ldr	r3, [pc, #56]	@ (800d9e0 <Get_SerialNum+0x4c>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d009      	beq.n	800d9ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d9ba:	2208      	movs	r2, #8
 800d9bc:	4909      	ldr	r1, [pc, #36]	@ (800d9e4 <Get_SerialNum+0x50>)
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f000 f814 	bl	800d9ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d9c4:	2204      	movs	r2, #4
 800d9c6:	4908      	ldr	r1, [pc, #32]	@ (800d9e8 <Get_SerialNum+0x54>)
 800d9c8:	68b8      	ldr	r0, [r7, #8]
 800d9ca:	f000 f80f 	bl	800d9ec <IntToUnicode>
  }
}
 800d9ce:	bf00      	nop
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	1fff7a10 	.word	0x1fff7a10
 800d9dc:	1fff7a14 	.word	0x1fff7a14
 800d9e0:	1fff7a18 	.word	0x1fff7a18
 800d9e4:	200000ea 	.word	0x200000ea
 800d9e8:	200000fa 	.word	0x200000fa

0800d9ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b087      	sub	sp, #28
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	60f8      	str	r0, [r7, #12]
 800d9f4:	60b9      	str	r1, [r7, #8]
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d9fe:	2300      	movs	r3, #0
 800da00:	75fb      	strb	r3, [r7, #23]
 800da02:	e027      	b.n	800da54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	0f1b      	lsrs	r3, r3, #28
 800da08:	2b09      	cmp	r3, #9
 800da0a:	d80b      	bhi.n	800da24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	0f1b      	lsrs	r3, r3, #28
 800da10:	b2da      	uxtb	r2, r3
 800da12:	7dfb      	ldrb	r3, [r7, #23]
 800da14:	005b      	lsls	r3, r3, #1
 800da16:	4619      	mov	r1, r3
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	440b      	add	r3, r1
 800da1c:	3230      	adds	r2, #48	@ 0x30
 800da1e:	b2d2      	uxtb	r2, r2
 800da20:	701a      	strb	r2, [r3, #0]
 800da22:	e00a      	b.n	800da3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	0f1b      	lsrs	r3, r3, #28
 800da28:	b2da      	uxtb	r2, r3
 800da2a:	7dfb      	ldrb	r3, [r7, #23]
 800da2c:	005b      	lsls	r3, r3, #1
 800da2e:	4619      	mov	r1, r3
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	440b      	add	r3, r1
 800da34:	3237      	adds	r2, #55	@ 0x37
 800da36:	b2d2      	uxtb	r2, r2
 800da38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	011b      	lsls	r3, r3, #4
 800da3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800da40:	7dfb      	ldrb	r3, [r7, #23]
 800da42:	005b      	lsls	r3, r3, #1
 800da44:	3301      	adds	r3, #1
 800da46:	68ba      	ldr	r2, [r7, #8]
 800da48:	4413      	add	r3, r2
 800da4a:	2200      	movs	r2, #0
 800da4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800da4e:	7dfb      	ldrb	r3, [r7, #23]
 800da50:	3301      	adds	r3, #1
 800da52:	75fb      	strb	r3, [r7, #23]
 800da54:	7dfa      	ldrb	r2, [r7, #23]
 800da56:	79fb      	ldrb	r3, [r7, #7]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d3d3      	bcc.n	800da04 <IntToUnicode+0x18>
  }
}
 800da5c:	bf00      	nop
 800da5e:	bf00      	nop
 800da60:	371c      	adds	r7, #28
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
	...

0800da6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b08a      	sub	sp, #40	@ 0x28
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da74:	f107 0314 	add.w	r3, r7, #20
 800da78:	2200      	movs	r2, #0
 800da7a:	601a      	str	r2, [r3, #0]
 800da7c:	605a      	str	r2, [r3, #4]
 800da7e:	609a      	str	r2, [r3, #8]
 800da80:	60da      	str	r2, [r3, #12]
 800da82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800da8c:	d13a      	bne.n	800db04 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da8e:	2300      	movs	r3, #0
 800da90:	613b      	str	r3, [r7, #16]
 800da92:	4b1e      	ldr	r3, [pc, #120]	@ (800db0c <HAL_PCD_MspInit+0xa0>)
 800da94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da96:	4a1d      	ldr	r2, [pc, #116]	@ (800db0c <HAL_PCD_MspInit+0xa0>)
 800da98:	f043 0301 	orr.w	r3, r3, #1
 800da9c:	6313      	str	r3, [r2, #48]	@ 0x30
 800da9e:	4b1b      	ldr	r3, [pc, #108]	@ (800db0c <HAL_PCD_MspInit+0xa0>)
 800daa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daa2:	f003 0301 	and.w	r3, r3, #1
 800daa6:	613b      	str	r3, [r7, #16]
 800daa8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800daaa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800daae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dab0:	2302      	movs	r3, #2
 800dab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dab4:	2300      	movs	r3, #0
 800dab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dab8:	2303      	movs	r3, #3
 800daba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dabc:	230a      	movs	r3, #10
 800dabe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dac0:	f107 0314 	add.w	r3, r7, #20
 800dac4:	4619      	mov	r1, r3
 800dac6:	4812      	ldr	r0, [pc, #72]	@ (800db10 <HAL_PCD_MspInit+0xa4>)
 800dac8:	f7f7 ff8a 	bl	80059e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dacc:	4b0f      	ldr	r3, [pc, #60]	@ (800db0c <HAL_PCD_MspInit+0xa0>)
 800dace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dad0:	4a0e      	ldr	r2, [pc, #56]	@ (800db0c <HAL_PCD_MspInit+0xa0>)
 800dad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dad6:	6353      	str	r3, [r2, #52]	@ 0x34
 800dad8:	2300      	movs	r3, #0
 800dada:	60fb      	str	r3, [r7, #12]
 800dadc:	4b0b      	ldr	r3, [pc, #44]	@ (800db0c <HAL_PCD_MspInit+0xa0>)
 800dade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dae0:	4a0a      	ldr	r2, [pc, #40]	@ (800db0c <HAL_PCD_MspInit+0xa0>)
 800dae2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dae6:	6453      	str	r3, [r2, #68]	@ 0x44
 800dae8:	4b08      	ldr	r3, [pc, #32]	@ (800db0c <HAL_PCD_MspInit+0xa0>)
 800daea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800daf0:	60fb      	str	r3, [r7, #12]
 800daf2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800daf4:	2200      	movs	r2, #0
 800daf6:	2100      	movs	r1, #0
 800daf8:	2043      	movs	r0, #67	@ 0x43
 800dafa:	f7f7 fc5d 	bl	80053b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dafe:	2043      	movs	r0, #67	@ 0x43
 800db00:	f7f7 fc76 	bl	80053f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800db04:	bf00      	nop
 800db06:	3728      	adds	r7, #40	@ 0x28
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	40023800 	.word	0x40023800
 800db10:	40020000 	.word	0x40020000

0800db14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800db28:	4619      	mov	r1, r3
 800db2a:	4610      	mov	r0, r2
 800db2c:	f7fe fb49 	bl	800c1c2 <USBD_LL_SetupStage>
}
 800db30:	bf00      	nop
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	460b      	mov	r3, r1
 800db42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800db4a:	78fa      	ldrb	r2, [r7, #3]
 800db4c:	6879      	ldr	r1, [r7, #4]
 800db4e:	4613      	mov	r3, r2
 800db50:	00db      	lsls	r3, r3, #3
 800db52:	4413      	add	r3, r2
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	440b      	add	r3, r1
 800db58:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	78fb      	ldrb	r3, [r7, #3]
 800db60:	4619      	mov	r1, r3
 800db62:	f7fe fb83 	bl	800c26c <USBD_LL_DataOutStage>
}
 800db66:	bf00      	nop
 800db68:	3708      	adds	r7, #8
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db6e:	b580      	push	{r7, lr}
 800db70:	b082      	sub	sp, #8
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
 800db76:	460b      	mov	r3, r1
 800db78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800db80:	78fa      	ldrb	r2, [r7, #3]
 800db82:	6879      	ldr	r1, [r7, #4]
 800db84:	4613      	mov	r3, r2
 800db86:	00db      	lsls	r3, r3, #3
 800db88:	4413      	add	r3, r2
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	440b      	add	r3, r1
 800db8e:	3320      	adds	r3, #32
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	78fb      	ldrb	r3, [r7, #3]
 800db94:	4619      	mov	r1, r3
 800db96:	f7fe fc1c 	bl	800c3d2 <USBD_LL_DataInStage>
}
 800db9a:	bf00      	nop
 800db9c:	3708      	adds	r7, #8
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b082      	sub	sp, #8
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7fe fd56 	bl	800c662 <USBD_LL_SOF>
}
 800dbb6:	bf00      	nop
 800dbb8:	3708      	adds	r7, #8
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b084      	sub	sp, #16
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	79db      	ldrb	r3, [r3, #7]
 800dbce:	2b02      	cmp	r3, #2
 800dbd0:	d001      	beq.n	800dbd6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dbd2:	f7f4 fbcb 	bl	800236c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbdc:	7bfa      	ldrb	r2, [r7, #15]
 800dbde:	4611      	mov	r1, r2
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7fe fcfa 	bl	800c5da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7fe fca2 	bl	800c536 <USBD_LL_Reset>
}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
	...

0800dbfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fe fcf5 	bl	800c5fa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	6812      	ldr	r2, [r2, #0]
 800dc1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dc22:	f043 0301 	orr.w	r3, r3, #1
 800dc26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	7adb      	ldrb	r3, [r3, #11]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d005      	beq.n	800dc3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc30:	4b04      	ldr	r3, [pc, #16]	@ (800dc44 <HAL_PCD_SuspendCallback+0x48>)
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	4a03      	ldr	r2, [pc, #12]	@ (800dc44 <HAL_PCD_SuspendCallback+0x48>)
 800dc36:	f043 0306 	orr.w	r3, r3, #6
 800dc3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dc3c:	bf00      	nop
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	e000ed00 	.word	0xe000ed00

0800dc48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fe fceb 	bl	800c632 <USBD_LL_Resume>
}
 800dc5c:	bf00      	nop
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc76:	78fa      	ldrb	r2, [r7, #3]
 800dc78:	4611      	mov	r1, r2
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fe fd43 	bl	800c706 <USBD_LL_IsoOUTIncomplete>
}
 800dc80:	bf00      	nop
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	460b      	mov	r3, r1
 800dc92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc9a:	78fa      	ldrb	r2, [r7, #3]
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fe fcff 	bl	800c6a2 <USBD_LL_IsoINIncomplete>
}
 800dca4:	bf00      	nop
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fe fd55 	bl	800c76a <USBD_LL_DevConnected>
}
 800dcc0:	bf00      	nop
 800dcc2:	3708      	adds	r7, #8
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fe fd52 	bl	800c780 <USBD_LL_DevDisconnected>
}
 800dcdc:	bf00      	nop
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d13c      	bne.n	800dd6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dcf4:	4a20      	ldr	r2, [pc, #128]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	4a1e      	ldr	r2, [pc, #120]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd00:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dd04:	4b1c      	ldr	r3, [pc, #112]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dd0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dd0c:	4b1a      	ldr	r3, [pc, #104]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd0e:	2204      	movs	r2, #4
 800dd10:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dd12:	4b19      	ldr	r3, [pc, #100]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd14:	2202      	movs	r2, #2
 800dd16:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dd18:	4b17      	ldr	r3, [pc, #92]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dd1e:	4b16      	ldr	r3, [pc, #88]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd20:	2202      	movs	r2, #2
 800dd22:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dd24:	4b14      	ldr	r3, [pc, #80]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd26:	2200      	movs	r2, #0
 800dd28:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dd2a:	4b13      	ldr	r3, [pc, #76]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dd30:	4b11      	ldr	r3, [pc, #68]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dd36:	4b10      	ldr	r3, [pc, #64]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dd3c:	4b0e      	ldr	r3, [pc, #56]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd3e:	2200      	movs	r2, #0
 800dd40:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dd42:	480d      	ldr	r0, [pc, #52]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd44:	f7f9 f80e 	bl	8006d64 <HAL_PCD_Init>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d001      	beq.n	800dd52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dd4e:	f7f4 fb0d 	bl	800236c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dd52:	2180      	movs	r1, #128	@ 0x80
 800dd54:	4808      	ldr	r0, [pc, #32]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd56:	f7fa fa3a 	bl	80081ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dd5a:	2240      	movs	r2, #64	@ 0x40
 800dd5c:	2100      	movs	r1, #0
 800dd5e:	4806      	ldr	r0, [pc, #24]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd60:	f7fa f9ee 	bl	8008140 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dd64:	2280      	movs	r2, #128	@ 0x80
 800dd66:	2101      	movs	r1, #1
 800dd68:	4803      	ldr	r0, [pc, #12]	@ (800dd78 <USBD_LL_Init+0x94>)
 800dd6a:	f7fa f9e9 	bl	8008140 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dd6e:	2300      	movs	r3, #0
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	20001dac 	.word	0x20001dac

0800dd7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd84:	2300      	movs	r3, #0
 800dd86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7f9 f8f5 	bl	8006f82 <HAL_PCD_Start>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f000 f942 	bl	800e028 <USBD_Get_USB_Status>
 800dda4:	4603      	mov	r3, r0
 800dda6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dda8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3710      	adds	r7, #16
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b084      	sub	sp, #16
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
 800ddba:	4608      	mov	r0, r1
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	70fb      	strb	r3, [r7, #3]
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	70bb      	strb	r3, [r7, #2]
 800ddc8:	4613      	mov	r3, r2
 800ddca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ddda:	78bb      	ldrb	r3, [r7, #2]
 800dddc:	883a      	ldrh	r2, [r7, #0]
 800ddde:	78f9      	ldrb	r1, [r7, #3]
 800dde0:	f7f9 fdc9 	bl	8007976 <HAL_PCD_EP_Open>
 800dde4:	4603      	mov	r3, r0
 800dde6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dde8:	7bfb      	ldrb	r3, [r7, #15]
 800ddea:	4618      	mov	r0, r3
 800ddec:	f000 f91c 	bl	800e028 <USBD_Get_USB_Status>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b084      	sub	sp, #16
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	460b      	mov	r3, r1
 800de08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de0e:	2300      	movs	r3, #0
 800de10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de18:	78fa      	ldrb	r2, [r7, #3]
 800de1a:	4611      	mov	r1, r2
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7f9 fe14 	bl	8007a4a <HAL_PCD_EP_Close>
 800de22:	4603      	mov	r3, r0
 800de24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de26:	7bfb      	ldrb	r3, [r7, #15]
 800de28:	4618      	mov	r0, r3
 800de2a:	f000 f8fd 	bl	800e028 <USBD_Get_USB_Status>
 800de2e:	4603      	mov	r3, r0
 800de30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de32:	7bbb      	ldrb	r3, [r7, #14]
}
 800de34:	4618      	mov	r0, r3
 800de36:	3710      	adds	r7, #16
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	460b      	mov	r3, r1
 800de46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de48:	2300      	movs	r3, #0
 800de4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de4c:	2300      	movs	r3, #0
 800de4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de56:	78fa      	ldrb	r2, [r7, #3]
 800de58:	4611      	mov	r1, r2
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7f9 fecc 	bl	8007bf8 <HAL_PCD_EP_SetStall>
 800de60:	4603      	mov	r3, r0
 800de62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de64:	7bfb      	ldrb	r3, [r7, #15]
 800de66:	4618      	mov	r0, r3
 800de68:	f000 f8de 	bl	800e028 <USBD_Get_USB_Status>
 800de6c:	4603      	mov	r3, r0
 800de6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de70:	7bbb      	ldrb	r3, [r7, #14]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b084      	sub	sp, #16
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
 800de82:	460b      	mov	r3, r1
 800de84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de86:	2300      	movs	r3, #0
 800de88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de94:	78fa      	ldrb	r2, [r7, #3]
 800de96:	4611      	mov	r1, r2
 800de98:	4618      	mov	r0, r3
 800de9a:	f7f9 ff10 	bl	8007cbe <HAL_PCD_EP_ClrStall>
 800de9e:	4603      	mov	r3, r0
 800dea0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dea2:	7bfb      	ldrb	r3, [r7, #15]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f000 f8bf 	bl	800e028 <USBD_Get_USB_Status>
 800deaa:	4603      	mov	r3, r0
 800deac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800deae:	7bbb      	ldrb	r3, [r7, #14]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800deb8:	b480      	push	{r7}
 800deba:	b085      	sub	sp, #20
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	460b      	mov	r3, r1
 800dec2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800deca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800decc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	da0b      	bge.n	800deec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ded4:	78fb      	ldrb	r3, [r7, #3]
 800ded6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800deda:	68f9      	ldr	r1, [r7, #12]
 800dedc:	4613      	mov	r3, r2
 800dede:	00db      	lsls	r3, r3, #3
 800dee0:	4413      	add	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	440b      	add	r3, r1
 800dee6:	3316      	adds	r3, #22
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	e00b      	b.n	800df04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800deec:	78fb      	ldrb	r3, [r7, #3]
 800deee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800def2:	68f9      	ldr	r1, [r7, #12]
 800def4:	4613      	mov	r3, r2
 800def6:	00db      	lsls	r3, r3, #3
 800def8:	4413      	add	r3, r2
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	440b      	add	r3, r1
 800defe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800df02:	781b      	ldrb	r3, [r3, #0]
  }
}
 800df04:	4618      	mov	r0, r3
 800df06:	3714      	adds	r7, #20
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	460b      	mov	r3, r1
 800df1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df1c:	2300      	movs	r3, #0
 800df1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df20:	2300      	movs	r3, #0
 800df22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df2a:	78fa      	ldrb	r2, [r7, #3]
 800df2c:	4611      	mov	r1, r2
 800df2e:	4618      	mov	r0, r3
 800df30:	f7f9 fcfd 	bl	800792e <HAL_PCD_SetAddress>
 800df34:	4603      	mov	r3, r0
 800df36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df38:	7bfb      	ldrb	r3, [r7, #15]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f000 f874 	bl	800e028 <USBD_Get_USB_Status>
 800df40:	4603      	mov	r3, r0
 800df42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df44:	7bbb      	ldrb	r3, [r7, #14]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df4e:	b580      	push	{r7, lr}
 800df50:	b086      	sub	sp, #24
 800df52:	af00      	add	r7, sp, #0
 800df54:	60f8      	str	r0, [r7, #12]
 800df56:	607a      	str	r2, [r7, #4]
 800df58:	603b      	str	r3, [r7, #0]
 800df5a:	460b      	mov	r3, r1
 800df5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df5e:	2300      	movs	r3, #0
 800df60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df62:	2300      	movs	r3, #0
 800df64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800df6c:	7af9      	ldrb	r1, [r7, #11]
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	f7f9 fe07 	bl	8007b84 <HAL_PCD_EP_Transmit>
 800df76:	4603      	mov	r3, r0
 800df78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df7a:	7dfb      	ldrb	r3, [r7, #23]
 800df7c:	4618      	mov	r0, r3
 800df7e:	f000 f853 	bl	800e028 <USBD_Get_USB_Status>
 800df82:	4603      	mov	r3, r0
 800df84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df86:	7dbb      	ldrb	r3, [r7, #22]
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3718      	adds	r7, #24
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b086      	sub	sp, #24
 800df94:	af00      	add	r7, sp, #0
 800df96:	60f8      	str	r0, [r7, #12]
 800df98:	607a      	str	r2, [r7, #4]
 800df9a:	603b      	str	r3, [r7, #0]
 800df9c:	460b      	mov	r3, r1
 800df9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dfae:	7af9      	ldrb	r1, [r7, #11]
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	f7f9 fd93 	bl	8007ade <HAL_PCD_EP_Receive>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfbc:	7dfb      	ldrb	r3, [r7, #23]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f000 f832 	bl	800e028 <USBD_Get_USB_Status>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dfc8:	7dbb      	ldrb	r3, [r7, #22]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3718      	adds	r7, #24
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b082      	sub	sp, #8
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
 800dfda:	460b      	mov	r3, r1
 800dfdc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dfe4:	78fa      	ldrb	r2, [r7, #3]
 800dfe6:	4611      	mov	r1, r2
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7f9 fdb3 	bl	8007b54 <HAL_PCD_EP_GetRxCount>
 800dfee:	4603      	mov	r3, r0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3708      	adds	r7, #8
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e000:	4b03      	ldr	r3, [pc, #12]	@ (800e010 <USBD_static_malloc+0x18>)
}
 800e002:	4618      	mov	r0, r3
 800e004:	370c      	adds	r7, #12
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	20002290 	.word	0x20002290

0800e014 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]

}
 800e01c:	bf00      	nop
 800e01e:	370c      	adds	r7, #12
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e028:	b480      	push	{r7}
 800e02a:	b085      	sub	sp, #20
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	4603      	mov	r3, r0
 800e030:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e032:	2300      	movs	r3, #0
 800e034:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e036:	79fb      	ldrb	r3, [r7, #7]
 800e038:	2b03      	cmp	r3, #3
 800e03a:	d817      	bhi.n	800e06c <USBD_Get_USB_Status+0x44>
 800e03c:	a201      	add	r2, pc, #4	@ (adr r2, 800e044 <USBD_Get_USB_Status+0x1c>)
 800e03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e042:	bf00      	nop
 800e044:	0800e055 	.word	0x0800e055
 800e048:	0800e05b 	.word	0x0800e05b
 800e04c:	0800e061 	.word	0x0800e061
 800e050:	0800e067 	.word	0x0800e067
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e054:	2300      	movs	r3, #0
 800e056:	73fb      	strb	r3, [r7, #15]
    break;
 800e058:	e00b      	b.n	800e072 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e05a:	2303      	movs	r3, #3
 800e05c:	73fb      	strb	r3, [r7, #15]
    break;
 800e05e:	e008      	b.n	800e072 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e060:	2301      	movs	r3, #1
 800e062:	73fb      	strb	r3, [r7, #15]
    break;
 800e064:	e005      	b.n	800e072 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e066:	2303      	movs	r3, #3
 800e068:	73fb      	strb	r3, [r7, #15]
    break;
 800e06a:	e002      	b.n	800e072 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e06c:	2303      	movs	r3, #3
 800e06e:	73fb      	strb	r3, [r7, #15]
    break;
 800e070:	bf00      	nop
  }
  return usb_status;
 800e072:	7bfb      	ldrb	r3, [r7, #15]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3714      	adds	r7, #20
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr

0800e080 <__cvt>:
 800e080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e084:	ec57 6b10 	vmov	r6, r7, d0
 800e088:	2f00      	cmp	r7, #0
 800e08a:	460c      	mov	r4, r1
 800e08c:	4619      	mov	r1, r3
 800e08e:	463b      	mov	r3, r7
 800e090:	bfbb      	ittet	lt
 800e092:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e096:	461f      	movlt	r7, r3
 800e098:	2300      	movge	r3, #0
 800e09a:	232d      	movlt	r3, #45	@ 0x2d
 800e09c:	700b      	strb	r3, [r1, #0]
 800e09e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e0a4:	4691      	mov	r9, r2
 800e0a6:	f023 0820 	bic.w	r8, r3, #32
 800e0aa:	bfbc      	itt	lt
 800e0ac:	4632      	movlt	r2, r6
 800e0ae:	4616      	movlt	r6, r2
 800e0b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e0b4:	d005      	beq.n	800e0c2 <__cvt+0x42>
 800e0b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e0ba:	d100      	bne.n	800e0be <__cvt+0x3e>
 800e0bc:	3401      	adds	r4, #1
 800e0be:	2102      	movs	r1, #2
 800e0c0:	e000      	b.n	800e0c4 <__cvt+0x44>
 800e0c2:	2103      	movs	r1, #3
 800e0c4:	ab03      	add	r3, sp, #12
 800e0c6:	9301      	str	r3, [sp, #4]
 800e0c8:	ab02      	add	r3, sp, #8
 800e0ca:	9300      	str	r3, [sp, #0]
 800e0cc:	ec47 6b10 	vmov	d0, r6, r7
 800e0d0:	4653      	mov	r3, sl
 800e0d2:	4622      	mov	r2, r4
 800e0d4:	f001 f8b8 	bl	800f248 <_dtoa_r>
 800e0d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e0dc:	4605      	mov	r5, r0
 800e0de:	d119      	bne.n	800e114 <__cvt+0x94>
 800e0e0:	f019 0f01 	tst.w	r9, #1
 800e0e4:	d00e      	beq.n	800e104 <__cvt+0x84>
 800e0e6:	eb00 0904 	add.w	r9, r0, r4
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	4630      	mov	r0, r6
 800e0f0:	4639      	mov	r1, r7
 800e0f2:	f7f2 fcf1 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0f6:	b108      	cbz	r0, 800e0fc <__cvt+0x7c>
 800e0f8:	f8cd 900c 	str.w	r9, [sp, #12]
 800e0fc:	2230      	movs	r2, #48	@ 0x30
 800e0fe:	9b03      	ldr	r3, [sp, #12]
 800e100:	454b      	cmp	r3, r9
 800e102:	d31e      	bcc.n	800e142 <__cvt+0xc2>
 800e104:	9b03      	ldr	r3, [sp, #12]
 800e106:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e108:	1b5b      	subs	r3, r3, r5
 800e10a:	4628      	mov	r0, r5
 800e10c:	6013      	str	r3, [r2, #0]
 800e10e:	b004      	add	sp, #16
 800e110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e114:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e118:	eb00 0904 	add.w	r9, r0, r4
 800e11c:	d1e5      	bne.n	800e0ea <__cvt+0x6a>
 800e11e:	7803      	ldrb	r3, [r0, #0]
 800e120:	2b30      	cmp	r3, #48	@ 0x30
 800e122:	d10a      	bne.n	800e13a <__cvt+0xba>
 800e124:	2200      	movs	r2, #0
 800e126:	2300      	movs	r3, #0
 800e128:	4630      	mov	r0, r6
 800e12a:	4639      	mov	r1, r7
 800e12c:	f7f2 fcd4 	bl	8000ad8 <__aeabi_dcmpeq>
 800e130:	b918      	cbnz	r0, 800e13a <__cvt+0xba>
 800e132:	f1c4 0401 	rsb	r4, r4, #1
 800e136:	f8ca 4000 	str.w	r4, [sl]
 800e13a:	f8da 3000 	ldr.w	r3, [sl]
 800e13e:	4499      	add	r9, r3
 800e140:	e7d3      	b.n	800e0ea <__cvt+0x6a>
 800e142:	1c59      	adds	r1, r3, #1
 800e144:	9103      	str	r1, [sp, #12]
 800e146:	701a      	strb	r2, [r3, #0]
 800e148:	e7d9      	b.n	800e0fe <__cvt+0x7e>

0800e14a <__exponent>:
 800e14a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e14c:	2900      	cmp	r1, #0
 800e14e:	bfba      	itte	lt
 800e150:	4249      	neglt	r1, r1
 800e152:	232d      	movlt	r3, #45	@ 0x2d
 800e154:	232b      	movge	r3, #43	@ 0x2b
 800e156:	2909      	cmp	r1, #9
 800e158:	7002      	strb	r2, [r0, #0]
 800e15a:	7043      	strb	r3, [r0, #1]
 800e15c:	dd29      	ble.n	800e1b2 <__exponent+0x68>
 800e15e:	f10d 0307 	add.w	r3, sp, #7
 800e162:	461d      	mov	r5, r3
 800e164:	270a      	movs	r7, #10
 800e166:	461a      	mov	r2, r3
 800e168:	fbb1 f6f7 	udiv	r6, r1, r7
 800e16c:	fb07 1416 	mls	r4, r7, r6, r1
 800e170:	3430      	adds	r4, #48	@ 0x30
 800e172:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e176:	460c      	mov	r4, r1
 800e178:	2c63      	cmp	r4, #99	@ 0x63
 800e17a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e17e:	4631      	mov	r1, r6
 800e180:	dcf1      	bgt.n	800e166 <__exponent+0x1c>
 800e182:	3130      	adds	r1, #48	@ 0x30
 800e184:	1e94      	subs	r4, r2, #2
 800e186:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e18a:	1c41      	adds	r1, r0, #1
 800e18c:	4623      	mov	r3, r4
 800e18e:	42ab      	cmp	r3, r5
 800e190:	d30a      	bcc.n	800e1a8 <__exponent+0x5e>
 800e192:	f10d 0309 	add.w	r3, sp, #9
 800e196:	1a9b      	subs	r3, r3, r2
 800e198:	42ac      	cmp	r4, r5
 800e19a:	bf88      	it	hi
 800e19c:	2300      	movhi	r3, #0
 800e19e:	3302      	adds	r3, #2
 800e1a0:	4403      	add	r3, r0
 800e1a2:	1a18      	subs	r0, r3, r0
 800e1a4:	b003      	add	sp, #12
 800e1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e1ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e1b0:	e7ed      	b.n	800e18e <__exponent+0x44>
 800e1b2:	2330      	movs	r3, #48	@ 0x30
 800e1b4:	3130      	adds	r1, #48	@ 0x30
 800e1b6:	7083      	strb	r3, [r0, #2]
 800e1b8:	70c1      	strb	r1, [r0, #3]
 800e1ba:	1d03      	adds	r3, r0, #4
 800e1bc:	e7f1      	b.n	800e1a2 <__exponent+0x58>
	...

0800e1c0 <_printf_float>:
 800e1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c4:	b08d      	sub	sp, #52	@ 0x34
 800e1c6:	460c      	mov	r4, r1
 800e1c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e1cc:	4616      	mov	r6, r2
 800e1ce:	461f      	mov	r7, r3
 800e1d0:	4605      	mov	r5, r0
 800e1d2:	f000 ff31 	bl	800f038 <_localeconv_r>
 800e1d6:	6803      	ldr	r3, [r0, #0]
 800e1d8:	9304      	str	r3, [sp, #16]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7f2 f850 	bl	8000280 <strlen>
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1e4:	f8d8 3000 	ldr.w	r3, [r8]
 800e1e8:	9005      	str	r0, [sp, #20]
 800e1ea:	3307      	adds	r3, #7
 800e1ec:	f023 0307 	bic.w	r3, r3, #7
 800e1f0:	f103 0208 	add.w	r2, r3, #8
 800e1f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e1f8:	f8d4 b000 	ldr.w	fp, [r4]
 800e1fc:	f8c8 2000 	str.w	r2, [r8]
 800e200:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e204:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e208:	9307      	str	r3, [sp, #28]
 800e20a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e20e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e212:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e216:	4b9c      	ldr	r3, [pc, #624]	@ (800e488 <_printf_float+0x2c8>)
 800e218:	f04f 32ff 	mov.w	r2, #4294967295
 800e21c:	f7f2 fc8e 	bl	8000b3c <__aeabi_dcmpun>
 800e220:	bb70      	cbnz	r0, 800e280 <_printf_float+0xc0>
 800e222:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e226:	4b98      	ldr	r3, [pc, #608]	@ (800e488 <_printf_float+0x2c8>)
 800e228:	f04f 32ff 	mov.w	r2, #4294967295
 800e22c:	f7f2 fc68 	bl	8000b00 <__aeabi_dcmple>
 800e230:	bb30      	cbnz	r0, 800e280 <_printf_float+0xc0>
 800e232:	2200      	movs	r2, #0
 800e234:	2300      	movs	r3, #0
 800e236:	4640      	mov	r0, r8
 800e238:	4649      	mov	r1, r9
 800e23a:	f7f2 fc57 	bl	8000aec <__aeabi_dcmplt>
 800e23e:	b110      	cbz	r0, 800e246 <_printf_float+0x86>
 800e240:	232d      	movs	r3, #45	@ 0x2d
 800e242:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e246:	4a91      	ldr	r2, [pc, #580]	@ (800e48c <_printf_float+0x2cc>)
 800e248:	4b91      	ldr	r3, [pc, #580]	@ (800e490 <_printf_float+0x2d0>)
 800e24a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e24e:	bf8c      	ite	hi
 800e250:	4690      	movhi	r8, r2
 800e252:	4698      	movls	r8, r3
 800e254:	2303      	movs	r3, #3
 800e256:	6123      	str	r3, [r4, #16]
 800e258:	f02b 0304 	bic.w	r3, fp, #4
 800e25c:	6023      	str	r3, [r4, #0]
 800e25e:	f04f 0900 	mov.w	r9, #0
 800e262:	9700      	str	r7, [sp, #0]
 800e264:	4633      	mov	r3, r6
 800e266:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e268:	4621      	mov	r1, r4
 800e26a:	4628      	mov	r0, r5
 800e26c:	f000 f9d2 	bl	800e614 <_printf_common>
 800e270:	3001      	adds	r0, #1
 800e272:	f040 808d 	bne.w	800e390 <_printf_float+0x1d0>
 800e276:	f04f 30ff 	mov.w	r0, #4294967295
 800e27a:	b00d      	add	sp, #52	@ 0x34
 800e27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e280:	4642      	mov	r2, r8
 800e282:	464b      	mov	r3, r9
 800e284:	4640      	mov	r0, r8
 800e286:	4649      	mov	r1, r9
 800e288:	f7f2 fc58 	bl	8000b3c <__aeabi_dcmpun>
 800e28c:	b140      	cbz	r0, 800e2a0 <_printf_float+0xe0>
 800e28e:	464b      	mov	r3, r9
 800e290:	2b00      	cmp	r3, #0
 800e292:	bfbc      	itt	lt
 800e294:	232d      	movlt	r3, #45	@ 0x2d
 800e296:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e29a:	4a7e      	ldr	r2, [pc, #504]	@ (800e494 <_printf_float+0x2d4>)
 800e29c:	4b7e      	ldr	r3, [pc, #504]	@ (800e498 <_printf_float+0x2d8>)
 800e29e:	e7d4      	b.n	800e24a <_printf_float+0x8a>
 800e2a0:	6863      	ldr	r3, [r4, #4]
 800e2a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e2a6:	9206      	str	r2, [sp, #24]
 800e2a8:	1c5a      	adds	r2, r3, #1
 800e2aa:	d13b      	bne.n	800e324 <_printf_float+0x164>
 800e2ac:	2306      	movs	r3, #6
 800e2ae:	6063      	str	r3, [r4, #4]
 800e2b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	6022      	str	r2, [r4, #0]
 800e2b8:	9303      	str	r3, [sp, #12]
 800e2ba:	ab0a      	add	r3, sp, #40	@ 0x28
 800e2bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e2c0:	ab09      	add	r3, sp, #36	@ 0x24
 800e2c2:	9300      	str	r3, [sp, #0]
 800e2c4:	6861      	ldr	r1, [r4, #4]
 800e2c6:	ec49 8b10 	vmov	d0, r8, r9
 800e2ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	f7ff fed6 	bl	800e080 <__cvt>
 800e2d4:	9b06      	ldr	r3, [sp, #24]
 800e2d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e2d8:	2b47      	cmp	r3, #71	@ 0x47
 800e2da:	4680      	mov	r8, r0
 800e2dc:	d129      	bne.n	800e332 <_printf_float+0x172>
 800e2de:	1cc8      	adds	r0, r1, #3
 800e2e0:	db02      	blt.n	800e2e8 <_printf_float+0x128>
 800e2e2:	6863      	ldr	r3, [r4, #4]
 800e2e4:	4299      	cmp	r1, r3
 800e2e6:	dd41      	ble.n	800e36c <_printf_float+0x1ac>
 800e2e8:	f1aa 0a02 	sub.w	sl, sl, #2
 800e2ec:	fa5f fa8a 	uxtb.w	sl, sl
 800e2f0:	3901      	subs	r1, #1
 800e2f2:	4652      	mov	r2, sl
 800e2f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e2f8:	9109      	str	r1, [sp, #36]	@ 0x24
 800e2fa:	f7ff ff26 	bl	800e14a <__exponent>
 800e2fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e300:	1813      	adds	r3, r2, r0
 800e302:	2a01      	cmp	r2, #1
 800e304:	4681      	mov	r9, r0
 800e306:	6123      	str	r3, [r4, #16]
 800e308:	dc02      	bgt.n	800e310 <_printf_float+0x150>
 800e30a:	6822      	ldr	r2, [r4, #0]
 800e30c:	07d2      	lsls	r2, r2, #31
 800e30e:	d501      	bpl.n	800e314 <_printf_float+0x154>
 800e310:	3301      	adds	r3, #1
 800e312:	6123      	str	r3, [r4, #16]
 800e314:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d0a2      	beq.n	800e262 <_printf_float+0xa2>
 800e31c:	232d      	movs	r3, #45	@ 0x2d
 800e31e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e322:	e79e      	b.n	800e262 <_printf_float+0xa2>
 800e324:	9a06      	ldr	r2, [sp, #24]
 800e326:	2a47      	cmp	r2, #71	@ 0x47
 800e328:	d1c2      	bne.n	800e2b0 <_printf_float+0xf0>
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d1c0      	bne.n	800e2b0 <_printf_float+0xf0>
 800e32e:	2301      	movs	r3, #1
 800e330:	e7bd      	b.n	800e2ae <_printf_float+0xee>
 800e332:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e336:	d9db      	bls.n	800e2f0 <_printf_float+0x130>
 800e338:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e33c:	d118      	bne.n	800e370 <_printf_float+0x1b0>
 800e33e:	2900      	cmp	r1, #0
 800e340:	6863      	ldr	r3, [r4, #4]
 800e342:	dd0b      	ble.n	800e35c <_printf_float+0x19c>
 800e344:	6121      	str	r1, [r4, #16]
 800e346:	b913      	cbnz	r3, 800e34e <_printf_float+0x18e>
 800e348:	6822      	ldr	r2, [r4, #0]
 800e34a:	07d0      	lsls	r0, r2, #31
 800e34c:	d502      	bpl.n	800e354 <_printf_float+0x194>
 800e34e:	3301      	adds	r3, #1
 800e350:	440b      	add	r3, r1
 800e352:	6123      	str	r3, [r4, #16]
 800e354:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e356:	f04f 0900 	mov.w	r9, #0
 800e35a:	e7db      	b.n	800e314 <_printf_float+0x154>
 800e35c:	b913      	cbnz	r3, 800e364 <_printf_float+0x1a4>
 800e35e:	6822      	ldr	r2, [r4, #0]
 800e360:	07d2      	lsls	r2, r2, #31
 800e362:	d501      	bpl.n	800e368 <_printf_float+0x1a8>
 800e364:	3302      	adds	r3, #2
 800e366:	e7f4      	b.n	800e352 <_printf_float+0x192>
 800e368:	2301      	movs	r3, #1
 800e36a:	e7f2      	b.n	800e352 <_printf_float+0x192>
 800e36c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e372:	4299      	cmp	r1, r3
 800e374:	db05      	blt.n	800e382 <_printf_float+0x1c2>
 800e376:	6823      	ldr	r3, [r4, #0]
 800e378:	6121      	str	r1, [r4, #16]
 800e37a:	07d8      	lsls	r0, r3, #31
 800e37c:	d5ea      	bpl.n	800e354 <_printf_float+0x194>
 800e37e:	1c4b      	adds	r3, r1, #1
 800e380:	e7e7      	b.n	800e352 <_printf_float+0x192>
 800e382:	2900      	cmp	r1, #0
 800e384:	bfd4      	ite	le
 800e386:	f1c1 0202 	rsble	r2, r1, #2
 800e38a:	2201      	movgt	r2, #1
 800e38c:	4413      	add	r3, r2
 800e38e:	e7e0      	b.n	800e352 <_printf_float+0x192>
 800e390:	6823      	ldr	r3, [r4, #0]
 800e392:	055a      	lsls	r2, r3, #21
 800e394:	d407      	bmi.n	800e3a6 <_printf_float+0x1e6>
 800e396:	6923      	ldr	r3, [r4, #16]
 800e398:	4642      	mov	r2, r8
 800e39a:	4631      	mov	r1, r6
 800e39c:	4628      	mov	r0, r5
 800e39e:	47b8      	blx	r7
 800e3a0:	3001      	adds	r0, #1
 800e3a2:	d12b      	bne.n	800e3fc <_printf_float+0x23c>
 800e3a4:	e767      	b.n	800e276 <_printf_float+0xb6>
 800e3a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e3aa:	f240 80dd 	bls.w	800e568 <_printf_float+0x3a8>
 800e3ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	f7f2 fb8f 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	d033      	beq.n	800e426 <_printf_float+0x266>
 800e3be:	4a37      	ldr	r2, [pc, #220]	@ (800e49c <_printf_float+0x2dc>)
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	47b8      	blx	r7
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	f43f af54 	beq.w	800e276 <_printf_float+0xb6>
 800e3ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e3d2:	4543      	cmp	r3, r8
 800e3d4:	db02      	blt.n	800e3dc <_printf_float+0x21c>
 800e3d6:	6823      	ldr	r3, [r4, #0]
 800e3d8:	07d8      	lsls	r0, r3, #31
 800e3da:	d50f      	bpl.n	800e3fc <_printf_float+0x23c>
 800e3dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3e0:	4631      	mov	r1, r6
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	47b8      	blx	r7
 800e3e6:	3001      	adds	r0, #1
 800e3e8:	f43f af45 	beq.w	800e276 <_printf_float+0xb6>
 800e3ec:	f04f 0900 	mov.w	r9, #0
 800e3f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800e3f4:	f104 0a1a 	add.w	sl, r4, #26
 800e3f8:	45c8      	cmp	r8, r9
 800e3fa:	dc09      	bgt.n	800e410 <_printf_float+0x250>
 800e3fc:	6823      	ldr	r3, [r4, #0]
 800e3fe:	079b      	lsls	r3, r3, #30
 800e400:	f100 8103 	bmi.w	800e60a <_printf_float+0x44a>
 800e404:	68e0      	ldr	r0, [r4, #12]
 800e406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e408:	4298      	cmp	r0, r3
 800e40a:	bfb8      	it	lt
 800e40c:	4618      	movlt	r0, r3
 800e40e:	e734      	b.n	800e27a <_printf_float+0xba>
 800e410:	2301      	movs	r3, #1
 800e412:	4652      	mov	r2, sl
 800e414:	4631      	mov	r1, r6
 800e416:	4628      	mov	r0, r5
 800e418:	47b8      	blx	r7
 800e41a:	3001      	adds	r0, #1
 800e41c:	f43f af2b 	beq.w	800e276 <_printf_float+0xb6>
 800e420:	f109 0901 	add.w	r9, r9, #1
 800e424:	e7e8      	b.n	800e3f8 <_printf_float+0x238>
 800e426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e428:	2b00      	cmp	r3, #0
 800e42a:	dc39      	bgt.n	800e4a0 <_printf_float+0x2e0>
 800e42c:	4a1b      	ldr	r2, [pc, #108]	@ (800e49c <_printf_float+0x2dc>)
 800e42e:	2301      	movs	r3, #1
 800e430:	4631      	mov	r1, r6
 800e432:	4628      	mov	r0, r5
 800e434:	47b8      	blx	r7
 800e436:	3001      	adds	r0, #1
 800e438:	f43f af1d 	beq.w	800e276 <_printf_float+0xb6>
 800e43c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e440:	ea59 0303 	orrs.w	r3, r9, r3
 800e444:	d102      	bne.n	800e44c <_printf_float+0x28c>
 800e446:	6823      	ldr	r3, [r4, #0]
 800e448:	07d9      	lsls	r1, r3, #31
 800e44a:	d5d7      	bpl.n	800e3fc <_printf_float+0x23c>
 800e44c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e450:	4631      	mov	r1, r6
 800e452:	4628      	mov	r0, r5
 800e454:	47b8      	blx	r7
 800e456:	3001      	adds	r0, #1
 800e458:	f43f af0d 	beq.w	800e276 <_printf_float+0xb6>
 800e45c:	f04f 0a00 	mov.w	sl, #0
 800e460:	f104 0b1a 	add.w	fp, r4, #26
 800e464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e466:	425b      	negs	r3, r3
 800e468:	4553      	cmp	r3, sl
 800e46a:	dc01      	bgt.n	800e470 <_printf_float+0x2b0>
 800e46c:	464b      	mov	r3, r9
 800e46e:	e793      	b.n	800e398 <_printf_float+0x1d8>
 800e470:	2301      	movs	r3, #1
 800e472:	465a      	mov	r2, fp
 800e474:	4631      	mov	r1, r6
 800e476:	4628      	mov	r0, r5
 800e478:	47b8      	blx	r7
 800e47a:	3001      	adds	r0, #1
 800e47c:	f43f aefb 	beq.w	800e276 <_printf_float+0xb6>
 800e480:	f10a 0a01 	add.w	sl, sl, #1
 800e484:	e7ee      	b.n	800e464 <_printf_float+0x2a4>
 800e486:	bf00      	nop
 800e488:	7fefffff 	.word	0x7fefffff
 800e48c:	08014b8c 	.word	0x08014b8c
 800e490:	08014b88 	.word	0x08014b88
 800e494:	08014b94 	.word	0x08014b94
 800e498:	08014b90 	.word	0x08014b90
 800e49c:	08014b98 	.word	0x08014b98
 800e4a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e4a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e4a6:	4553      	cmp	r3, sl
 800e4a8:	bfa8      	it	ge
 800e4aa:	4653      	movge	r3, sl
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	4699      	mov	r9, r3
 800e4b0:	dc36      	bgt.n	800e520 <_printf_float+0x360>
 800e4b2:	f04f 0b00 	mov.w	fp, #0
 800e4b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4ba:	f104 021a 	add.w	r2, r4, #26
 800e4be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e4c0:	9306      	str	r3, [sp, #24]
 800e4c2:	eba3 0309 	sub.w	r3, r3, r9
 800e4c6:	455b      	cmp	r3, fp
 800e4c8:	dc31      	bgt.n	800e52e <_printf_float+0x36e>
 800e4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4cc:	459a      	cmp	sl, r3
 800e4ce:	dc3a      	bgt.n	800e546 <_printf_float+0x386>
 800e4d0:	6823      	ldr	r3, [r4, #0]
 800e4d2:	07da      	lsls	r2, r3, #31
 800e4d4:	d437      	bmi.n	800e546 <_printf_float+0x386>
 800e4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4d8:	ebaa 0903 	sub.w	r9, sl, r3
 800e4dc:	9b06      	ldr	r3, [sp, #24]
 800e4de:	ebaa 0303 	sub.w	r3, sl, r3
 800e4e2:	4599      	cmp	r9, r3
 800e4e4:	bfa8      	it	ge
 800e4e6:	4699      	movge	r9, r3
 800e4e8:	f1b9 0f00 	cmp.w	r9, #0
 800e4ec:	dc33      	bgt.n	800e556 <_printf_float+0x396>
 800e4ee:	f04f 0800 	mov.w	r8, #0
 800e4f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4f6:	f104 0b1a 	add.w	fp, r4, #26
 800e4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4fc:	ebaa 0303 	sub.w	r3, sl, r3
 800e500:	eba3 0309 	sub.w	r3, r3, r9
 800e504:	4543      	cmp	r3, r8
 800e506:	f77f af79 	ble.w	800e3fc <_printf_float+0x23c>
 800e50a:	2301      	movs	r3, #1
 800e50c:	465a      	mov	r2, fp
 800e50e:	4631      	mov	r1, r6
 800e510:	4628      	mov	r0, r5
 800e512:	47b8      	blx	r7
 800e514:	3001      	adds	r0, #1
 800e516:	f43f aeae 	beq.w	800e276 <_printf_float+0xb6>
 800e51a:	f108 0801 	add.w	r8, r8, #1
 800e51e:	e7ec      	b.n	800e4fa <_printf_float+0x33a>
 800e520:	4642      	mov	r2, r8
 800e522:	4631      	mov	r1, r6
 800e524:	4628      	mov	r0, r5
 800e526:	47b8      	blx	r7
 800e528:	3001      	adds	r0, #1
 800e52a:	d1c2      	bne.n	800e4b2 <_printf_float+0x2f2>
 800e52c:	e6a3      	b.n	800e276 <_printf_float+0xb6>
 800e52e:	2301      	movs	r3, #1
 800e530:	4631      	mov	r1, r6
 800e532:	4628      	mov	r0, r5
 800e534:	9206      	str	r2, [sp, #24]
 800e536:	47b8      	blx	r7
 800e538:	3001      	adds	r0, #1
 800e53a:	f43f ae9c 	beq.w	800e276 <_printf_float+0xb6>
 800e53e:	9a06      	ldr	r2, [sp, #24]
 800e540:	f10b 0b01 	add.w	fp, fp, #1
 800e544:	e7bb      	b.n	800e4be <_printf_float+0x2fe>
 800e546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e54a:	4631      	mov	r1, r6
 800e54c:	4628      	mov	r0, r5
 800e54e:	47b8      	blx	r7
 800e550:	3001      	adds	r0, #1
 800e552:	d1c0      	bne.n	800e4d6 <_printf_float+0x316>
 800e554:	e68f      	b.n	800e276 <_printf_float+0xb6>
 800e556:	9a06      	ldr	r2, [sp, #24]
 800e558:	464b      	mov	r3, r9
 800e55a:	4442      	add	r2, r8
 800e55c:	4631      	mov	r1, r6
 800e55e:	4628      	mov	r0, r5
 800e560:	47b8      	blx	r7
 800e562:	3001      	adds	r0, #1
 800e564:	d1c3      	bne.n	800e4ee <_printf_float+0x32e>
 800e566:	e686      	b.n	800e276 <_printf_float+0xb6>
 800e568:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e56c:	f1ba 0f01 	cmp.w	sl, #1
 800e570:	dc01      	bgt.n	800e576 <_printf_float+0x3b6>
 800e572:	07db      	lsls	r3, r3, #31
 800e574:	d536      	bpl.n	800e5e4 <_printf_float+0x424>
 800e576:	2301      	movs	r3, #1
 800e578:	4642      	mov	r2, r8
 800e57a:	4631      	mov	r1, r6
 800e57c:	4628      	mov	r0, r5
 800e57e:	47b8      	blx	r7
 800e580:	3001      	adds	r0, #1
 800e582:	f43f ae78 	beq.w	800e276 <_printf_float+0xb6>
 800e586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e58a:	4631      	mov	r1, r6
 800e58c:	4628      	mov	r0, r5
 800e58e:	47b8      	blx	r7
 800e590:	3001      	adds	r0, #1
 800e592:	f43f ae70 	beq.w	800e276 <_printf_float+0xb6>
 800e596:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e59a:	2200      	movs	r2, #0
 800e59c:	2300      	movs	r3, #0
 800e59e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e5a2:	f7f2 fa99 	bl	8000ad8 <__aeabi_dcmpeq>
 800e5a6:	b9c0      	cbnz	r0, 800e5da <_printf_float+0x41a>
 800e5a8:	4653      	mov	r3, sl
 800e5aa:	f108 0201 	add.w	r2, r8, #1
 800e5ae:	4631      	mov	r1, r6
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	47b8      	blx	r7
 800e5b4:	3001      	adds	r0, #1
 800e5b6:	d10c      	bne.n	800e5d2 <_printf_float+0x412>
 800e5b8:	e65d      	b.n	800e276 <_printf_float+0xb6>
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	465a      	mov	r2, fp
 800e5be:	4631      	mov	r1, r6
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	47b8      	blx	r7
 800e5c4:	3001      	adds	r0, #1
 800e5c6:	f43f ae56 	beq.w	800e276 <_printf_float+0xb6>
 800e5ca:	f108 0801 	add.w	r8, r8, #1
 800e5ce:	45d0      	cmp	r8, sl
 800e5d0:	dbf3      	blt.n	800e5ba <_printf_float+0x3fa>
 800e5d2:	464b      	mov	r3, r9
 800e5d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e5d8:	e6df      	b.n	800e39a <_printf_float+0x1da>
 800e5da:	f04f 0800 	mov.w	r8, #0
 800e5de:	f104 0b1a 	add.w	fp, r4, #26
 800e5e2:	e7f4      	b.n	800e5ce <_printf_float+0x40e>
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	4642      	mov	r2, r8
 800e5e8:	e7e1      	b.n	800e5ae <_printf_float+0x3ee>
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	464a      	mov	r2, r9
 800e5ee:	4631      	mov	r1, r6
 800e5f0:	4628      	mov	r0, r5
 800e5f2:	47b8      	blx	r7
 800e5f4:	3001      	adds	r0, #1
 800e5f6:	f43f ae3e 	beq.w	800e276 <_printf_float+0xb6>
 800e5fa:	f108 0801 	add.w	r8, r8, #1
 800e5fe:	68e3      	ldr	r3, [r4, #12]
 800e600:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e602:	1a5b      	subs	r3, r3, r1
 800e604:	4543      	cmp	r3, r8
 800e606:	dcf0      	bgt.n	800e5ea <_printf_float+0x42a>
 800e608:	e6fc      	b.n	800e404 <_printf_float+0x244>
 800e60a:	f04f 0800 	mov.w	r8, #0
 800e60e:	f104 0919 	add.w	r9, r4, #25
 800e612:	e7f4      	b.n	800e5fe <_printf_float+0x43e>

0800e614 <_printf_common>:
 800e614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e618:	4616      	mov	r6, r2
 800e61a:	4698      	mov	r8, r3
 800e61c:	688a      	ldr	r2, [r1, #8]
 800e61e:	690b      	ldr	r3, [r1, #16]
 800e620:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e624:	4293      	cmp	r3, r2
 800e626:	bfb8      	it	lt
 800e628:	4613      	movlt	r3, r2
 800e62a:	6033      	str	r3, [r6, #0]
 800e62c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e630:	4607      	mov	r7, r0
 800e632:	460c      	mov	r4, r1
 800e634:	b10a      	cbz	r2, 800e63a <_printf_common+0x26>
 800e636:	3301      	adds	r3, #1
 800e638:	6033      	str	r3, [r6, #0]
 800e63a:	6823      	ldr	r3, [r4, #0]
 800e63c:	0699      	lsls	r1, r3, #26
 800e63e:	bf42      	ittt	mi
 800e640:	6833      	ldrmi	r3, [r6, #0]
 800e642:	3302      	addmi	r3, #2
 800e644:	6033      	strmi	r3, [r6, #0]
 800e646:	6825      	ldr	r5, [r4, #0]
 800e648:	f015 0506 	ands.w	r5, r5, #6
 800e64c:	d106      	bne.n	800e65c <_printf_common+0x48>
 800e64e:	f104 0a19 	add.w	sl, r4, #25
 800e652:	68e3      	ldr	r3, [r4, #12]
 800e654:	6832      	ldr	r2, [r6, #0]
 800e656:	1a9b      	subs	r3, r3, r2
 800e658:	42ab      	cmp	r3, r5
 800e65a:	dc26      	bgt.n	800e6aa <_printf_common+0x96>
 800e65c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e660:	6822      	ldr	r2, [r4, #0]
 800e662:	3b00      	subs	r3, #0
 800e664:	bf18      	it	ne
 800e666:	2301      	movne	r3, #1
 800e668:	0692      	lsls	r2, r2, #26
 800e66a:	d42b      	bmi.n	800e6c4 <_printf_common+0xb0>
 800e66c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e670:	4641      	mov	r1, r8
 800e672:	4638      	mov	r0, r7
 800e674:	47c8      	blx	r9
 800e676:	3001      	adds	r0, #1
 800e678:	d01e      	beq.n	800e6b8 <_printf_common+0xa4>
 800e67a:	6823      	ldr	r3, [r4, #0]
 800e67c:	6922      	ldr	r2, [r4, #16]
 800e67e:	f003 0306 	and.w	r3, r3, #6
 800e682:	2b04      	cmp	r3, #4
 800e684:	bf02      	ittt	eq
 800e686:	68e5      	ldreq	r5, [r4, #12]
 800e688:	6833      	ldreq	r3, [r6, #0]
 800e68a:	1aed      	subeq	r5, r5, r3
 800e68c:	68a3      	ldr	r3, [r4, #8]
 800e68e:	bf0c      	ite	eq
 800e690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e694:	2500      	movne	r5, #0
 800e696:	4293      	cmp	r3, r2
 800e698:	bfc4      	itt	gt
 800e69a:	1a9b      	subgt	r3, r3, r2
 800e69c:	18ed      	addgt	r5, r5, r3
 800e69e:	2600      	movs	r6, #0
 800e6a0:	341a      	adds	r4, #26
 800e6a2:	42b5      	cmp	r5, r6
 800e6a4:	d11a      	bne.n	800e6dc <_printf_common+0xc8>
 800e6a6:	2000      	movs	r0, #0
 800e6a8:	e008      	b.n	800e6bc <_printf_common+0xa8>
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	4652      	mov	r2, sl
 800e6ae:	4641      	mov	r1, r8
 800e6b0:	4638      	mov	r0, r7
 800e6b2:	47c8      	blx	r9
 800e6b4:	3001      	adds	r0, #1
 800e6b6:	d103      	bne.n	800e6c0 <_printf_common+0xac>
 800e6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6c0:	3501      	adds	r5, #1
 800e6c2:	e7c6      	b.n	800e652 <_printf_common+0x3e>
 800e6c4:	18e1      	adds	r1, r4, r3
 800e6c6:	1c5a      	adds	r2, r3, #1
 800e6c8:	2030      	movs	r0, #48	@ 0x30
 800e6ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e6ce:	4422      	add	r2, r4
 800e6d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e6d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e6d8:	3302      	adds	r3, #2
 800e6da:	e7c7      	b.n	800e66c <_printf_common+0x58>
 800e6dc:	2301      	movs	r3, #1
 800e6de:	4622      	mov	r2, r4
 800e6e0:	4641      	mov	r1, r8
 800e6e2:	4638      	mov	r0, r7
 800e6e4:	47c8      	blx	r9
 800e6e6:	3001      	adds	r0, #1
 800e6e8:	d0e6      	beq.n	800e6b8 <_printf_common+0xa4>
 800e6ea:	3601      	adds	r6, #1
 800e6ec:	e7d9      	b.n	800e6a2 <_printf_common+0x8e>
	...

0800e6f0 <_printf_i>:
 800e6f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6f4:	7e0f      	ldrb	r7, [r1, #24]
 800e6f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e6f8:	2f78      	cmp	r7, #120	@ 0x78
 800e6fa:	4691      	mov	r9, r2
 800e6fc:	4680      	mov	r8, r0
 800e6fe:	460c      	mov	r4, r1
 800e700:	469a      	mov	sl, r3
 800e702:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e706:	d807      	bhi.n	800e718 <_printf_i+0x28>
 800e708:	2f62      	cmp	r7, #98	@ 0x62
 800e70a:	d80a      	bhi.n	800e722 <_printf_i+0x32>
 800e70c:	2f00      	cmp	r7, #0
 800e70e:	f000 80d1 	beq.w	800e8b4 <_printf_i+0x1c4>
 800e712:	2f58      	cmp	r7, #88	@ 0x58
 800e714:	f000 80b8 	beq.w	800e888 <_printf_i+0x198>
 800e718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e71c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e720:	e03a      	b.n	800e798 <_printf_i+0xa8>
 800e722:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e726:	2b15      	cmp	r3, #21
 800e728:	d8f6      	bhi.n	800e718 <_printf_i+0x28>
 800e72a:	a101      	add	r1, pc, #4	@ (adr r1, 800e730 <_printf_i+0x40>)
 800e72c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e730:	0800e789 	.word	0x0800e789
 800e734:	0800e79d 	.word	0x0800e79d
 800e738:	0800e719 	.word	0x0800e719
 800e73c:	0800e719 	.word	0x0800e719
 800e740:	0800e719 	.word	0x0800e719
 800e744:	0800e719 	.word	0x0800e719
 800e748:	0800e79d 	.word	0x0800e79d
 800e74c:	0800e719 	.word	0x0800e719
 800e750:	0800e719 	.word	0x0800e719
 800e754:	0800e719 	.word	0x0800e719
 800e758:	0800e719 	.word	0x0800e719
 800e75c:	0800e89b 	.word	0x0800e89b
 800e760:	0800e7c7 	.word	0x0800e7c7
 800e764:	0800e855 	.word	0x0800e855
 800e768:	0800e719 	.word	0x0800e719
 800e76c:	0800e719 	.word	0x0800e719
 800e770:	0800e8bd 	.word	0x0800e8bd
 800e774:	0800e719 	.word	0x0800e719
 800e778:	0800e7c7 	.word	0x0800e7c7
 800e77c:	0800e719 	.word	0x0800e719
 800e780:	0800e719 	.word	0x0800e719
 800e784:	0800e85d 	.word	0x0800e85d
 800e788:	6833      	ldr	r3, [r6, #0]
 800e78a:	1d1a      	adds	r2, r3, #4
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	6032      	str	r2, [r6, #0]
 800e790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e794:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e798:	2301      	movs	r3, #1
 800e79a:	e09c      	b.n	800e8d6 <_printf_i+0x1e6>
 800e79c:	6833      	ldr	r3, [r6, #0]
 800e79e:	6820      	ldr	r0, [r4, #0]
 800e7a0:	1d19      	adds	r1, r3, #4
 800e7a2:	6031      	str	r1, [r6, #0]
 800e7a4:	0606      	lsls	r6, r0, #24
 800e7a6:	d501      	bpl.n	800e7ac <_printf_i+0xbc>
 800e7a8:	681d      	ldr	r5, [r3, #0]
 800e7aa:	e003      	b.n	800e7b4 <_printf_i+0xc4>
 800e7ac:	0645      	lsls	r5, r0, #25
 800e7ae:	d5fb      	bpl.n	800e7a8 <_printf_i+0xb8>
 800e7b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e7b4:	2d00      	cmp	r5, #0
 800e7b6:	da03      	bge.n	800e7c0 <_printf_i+0xd0>
 800e7b8:	232d      	movs	r3, #45	@ 0x2d
 800e7ba:	426d      	negs	r5, r5
 800e7bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7c0:	4858      	ldr	r0, [pc, #352]	@ (800e924 <_printf_i+0x234>)
 800e7c2:	230a      	movs	r3, #10
 800e7c4:	e011      	b.n	800e7ea <_printf_i+0xfa>
 800e7c6:	6821      	ldr	r1, [r4, #0]
 800e7c8:	6833      	ldr	r3, [r6, #0]
 800e7ca:	0608      	lsls	r0, r1, #24
 800e7cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800e7d0:	d402      	bmi.n	800e7d8 <_printf_i+0xe8>
 800e7d2:	0649      	lsls	r1, r1, #25
 800e7d4:	bf48      	it	mi
 800e7d6:	b2ad      	uxthmi	r5, r5
 800e7d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800e7da:	4852      	ldr	r0, [pc, #328]	@ (800e924 <_printf_i+0x234>)
 800e7dc:	6033      	str	r3, [r6, #0]
 800e7de:	bf14      	ite	ne
 800e7e0:	230a      	movne	r3, #10
 800e7e2:	2308      	moveq	r3, #8
 800e7e4:	2100      	movs	r1, #0
 800e7e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e7ea:	6866      	ldr	r6, [r4, #4]
 800e7ec:	60a6      	str	r6, [r4, #8]
 800e7ee:	2e00      	cmp	r6, #0
 800e7f0:	db05      	blt.n	800e7fe <_printf_i+0x10e>
 800e7f2:	6821      	ldr	r1, [r4, #0]
 800e7f4:	432e      	orrs	r6, r5
 800e7f6:	f021 0104 	bic.w	r1, r1, #4
 800e7fa:	6021      	str	r1, [r4, #0]
 800e7fc:	d04b      	beq.n	800e896 <_printf_i+0x1a6>
 800e7fe:	4616      	mov	r6, r2
 800e800:	fbb5 f1f3 	udiv	r1, r5, r3
 800e804:	fb03 5711 	mls	r7, r3, r1, r5
 800e808:	5dc7      	ldrb	r7, [r0, r7]
 800e80a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e80e:	462f      	mov	r7, r5
 800e810:	42bb      	cmp	r3, r7
 800e812:	460d      	mov	r5, r1
 800e814:	d9f4      	bls.n	800e800 <_printf_i+0x110>
 800e816:	2b08      	cmp	r3, #8
 800e818:	d10b      	bne.n	800e832 <_printf_i+0x142>
 800e81a:	6823      	ldr	r3, [r4, #0]
 800e81c:	07df      	lsls	r7, r3, #31
 800e81e:	d508      	bpl.n	800e832 <_printf_i+0x142>
 800e820:	6923      	ldr	r3, [r4, #16]
 800e822:	6861      	ldr	r1, [r4, #4]
 800e824:	4299      	cmp	r1, r3
 800e826:	bfde      	ittt	le
 800e828:	2330      	movle	r3, #48	@ 0x30
 800e82a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e82e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e832:	1b92      	subs	r2, r2, r6
 800e834:	6122      	str	r2, [r4, #16]
 800e836:	f8cd a000 	str.w	sl, [sp]
 800e83a:	464b      	mov	r3, r9
 800e83c:	aa03      	add	r2, sp, #12
 800e83e:	4621      	mov	r1, r4
 800e840:	4640      	mov	r0, r8
 800e842:	f7ff fee7 	bl	800e614 <_printf_common>
 800e846:	3001      	adds	r0, #1
 800e848:	d14a      	bne.n	800e8e0 <_printf_i+0x1f0>
 800e84a:	f04f 30ff 	mov.w	r0, #4294967295
 800e84e:	b004      	add	sp, #16
 800e850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e854:	6823      	ldr	r3, [r4, #0]
 800e856:	f043 0320 	orr.w	r3, r3, #32
 800e85a:	6023      	str	r3, [r4, #0]
 800e85c:	4832      	ldr	r0, [pc, #200]	@ (800e928 <_printf_i+0x238>)
 800e85e:	2778      	movs	r7, #120	@ 0x78
 800e860:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e864:	6823      	ldr	r3, [r4, #0]
 800e866:	6831      	ldr	r1, [r6, #0]
 800e868:	061f      	lsls	r7, r3, #24
 800e86a:	f851 5b04 	ldr.w	r5, [r1], #4
 800e86e:	d402      	bmi.n	800e876 <_printf_i+0x186>
 800e870:	065f      	lsls	r7, r3, #25
 800e872:	bf48      	it	mi
 800e874:	b2ad      	uxthmi	r5, r5
 800e876:	6031      	str	r1, [r6, #0]
 800e878:	07d9      	lsls	r1, r3, #31
 800e87a:	bf44      	itt	mi
 800e87c:	f043 0320 	orrmi.w	r3, r3, #32
 800e880:	6023      	strmi	r3, [r4, #0]
 800e882:	b11d      	cbz	r5, 800e88c <_printf_i+0x19c>
 800e884:	2310      	movs	r3, #16
 800e886:	e7ad      	b.n	800e7e4 <_printf_i+0xf4>
 800e888:	4826      	ldr	r0, [pc, #152]	@ (800e924 <_printf_i+0x234>)
 800e88a:	e7e9      	b.n	800e860 <_printf_i+0x170>
 800e88c:	6823      	ldr	r3, [r4, #0]
 800e88e:	f023 0320 	bic.w	r3, r3, #32
 800e892:	6023      	str	r3, [r4, #0]
 800e894:	e7f6      	b.n	800e884 <_printf_i+0x194>
 800e896:	4616      	mov	r6, r2
 800e898:	e7bd      	b.n	800e816 <_printf_i+0x126>
 800e89a:	6833      	ldr	r3, [r6, #0]
 800e89c:	6825      	ldr	r5, [r4, #0]
 800e89e:	6961      	ldr	r1, [r4, #20]
 800e8a0:	1d18      	adds	r0, r3, #4
 800e8a2:	6030      	str	r0, [r6, #0]
 800e8a4:	062e      	lsls	r6, r5, #24
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	d501      	bpl.n	800e8ae <_printf_i+0x1be>
 800e8aa:	6019      	str	r1, [r3, #0]
 800e8ac:	e002      	b.n	800e8b4 <_printf_i+0x1c4>
 800e8ae:	0668      	lsls	r0, r5, #25
 800e8b0:	d5fb      	bpl.n	800e8aa <_printf_i+0x1ba>
 800e8b2:	8019      	strh	r1, [r3, #0]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	6123      	str	r3, [r4, #16]
 800e8b8:	4616      	mov	r6, r2
 800e8ba:	e7bc      	b.n	800e836 <_printf_i+0x146>
 800e8bc:	6833      	ldr	r3, [r6, #0]
 800e8be:	1d1a      	adds	r2, r3, #4
 800e8c0:	6032      	str	r2, [r6, #0]
 800e8c2:	681e      	ldr	r6, [r3, #0]
 800e8c4:	6862      	ldr	r2, [r4, #4]
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	f7f1 fc89 	bl	80001e0 <memchr>
 800e8ce:	b108      	cbz	r0, 800e8d4 <_printf_i+0x1e4>
 800e8d0:	1b80      	subs	r0, r0, r6
 800e8d2:	6060      	str	r0, [r4, #4]
 800e8d4:	6863      	ldr	r3, [r4, #4]
 800e8d6:	6123      	str	r3, [r4, #16]
 800e8d8:	2300      	movs	r3, #0
 800e8da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8de:	e7aa      	b.n	800e836 <_printf_i+0x146>
 800e8e0:	6923      	ldr	r3, [r4, #16]
 800e8e2:	4632      	mov	r2, r6
 800e8e4:	4649      	mov	r1, r9
 800e8e6:	4640      	mov	r0, r8
 800e8e8:	47d0      	blx	sl
 800e8ea:	3001      	adds	r0, #1
 800e8ec:	d0ad      	beq.n	800e84a <_printf_i+0x15a>
 800e8ee:	6823      	ldr	r3, [r4, #0]
 800e8f0:	079b      	lsls	r3, r3, #30
 800e8f2:	d413      	bmi.n	800e91c <_printf_i+0x22c>
 800e8f4:	68e0      	ldr	r0, [r4, #12]
 800e8f6:	9b03      	ldr	r3, [sp, #12]
 800e8f8:	4298      	cmp	r0, r3
 800e8fa:	bfb8      	it	lt
 800e8fc:	4618      	movlt	r0, r3
 800e8fe:	e7a6      	b.n	800e84e <_printf_i+0x15e>
 800e900:	2301      	movs	r3, #1
 800e902:	4632      	mov	r2, r6
 800e904:	4649      	mov	r1, r9
 800e906:	4640      	mov	r0, r8
 800e908:	47d0      	blx	sl
 800e90a:	3001      	adds	r0, #1
 800e90c:	d09d      	beq.n	800e84a <_printf_i+0x15a>
 800e90e:	3501      	adds	r5, #1
 800e910:	68e3      	ldr	r3, [r4, #12]
 800e912:	9903      	ldr	r1, [sp, #12]
 800e914:	1a5b      	subs	r3, r3, r1
 800e916:	42ab      	cmp	r3, r5
 800e918:	dcf2      	bgt.n	800e900 <_printf_i+0x210>
 800e91a:	e7eb      	b.n	800e8f4 <_printf_i+0x204>
 800e91c:	2500      	movs	r5, #0
 800e91e:	f104 0619 	add.w	r6, r4, #25
 800e922:	e7f5      	b.n	800e910 <_printf_i+0x220>
 800e924:	08014b9a 	.word	0x08014b9a
 800e928:	08014bab 	.word	0x08014bab

0800e92c <_scanf_float>:
 800e92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e930:	b087      	sub	sp, #28
 800e932:	4691      	mov	r9, r2
 800e934:	9303      	str	r3, [sp, #12]
 800e936:	688b      	ldr	r3, [r1, #8]
 800e938:	1e5a      	subs	r2, r3, #1
 800e93a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e93e:	bf81      	itttt	hi
 800e940:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e944:	eb03 0b05 	addhi.w	fp, r3, r5
 800e948:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e94c:	608b      	strhi	r3, [r1, #8]
 800e94e:	680b      	ldr	r3, [r1, #0]
 800e950:	460a      	mov	r2, r1
 800e952:	f04f 0500 	mov.w	r5, #0
 800e956:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e95a:	f842 3b1c 	str.w	r3, [r2], #28
 800e95e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e962:	4680      	mov	r8, r0
 800e964:	460c      	mov	r4, r1
 800e966:	bf98      	it	ls
 800e968:	f04f 0b00 	movls.w	fp, #0
 800e96c:	9201      	str	r2, [sp, #4]
 800e96e:	4616      	mov	r6, r2
 800e970:	46aa      	mov	sl, r5
 800e972:	462f      	mov	r7, r5
 800e974:	9502      	str	r5, [sp, #8]
 800e976:	68a2      	ldr	r2, [r4, #8]
 800e978:	b15a      	cbz	r2, 800e992 <_scanf_float+0x66>
 800e97a:	f8d9 3000 	ldr.w	r3, [r9]
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	2b4e      	cmp	r3, #78	@ 0x4e
 800e982:	d863      	bhi.n	800ea4c <_scanf_float+0x120>
 800e984:	2b40      	cmp	r3, #64	@ 0x40
 800e986:	d83b      	bhi.n	800ea00 <_scanf_float+0xd4>
 800e988:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e98c:	b2c8      	uxtb	r0, r1
 800e98e:	280e      	cmp	r0, #14
 800e990:	d939      	bls.n	800ea06 <_scanf_float+0xda>
 800e992:	b11f      	cbz	r7, 800e99c <_scanf_float+0x70>
 800e994:	6823      	ldr	r3, [r4, #0]
 800e996:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e99a:	6023      	str	r3, [r4, #0]
 800e99c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9a0:	f1ba 0f01 	cmp.w	sl, #1
 800e9a4:	f200 8114 	bhi.w	800ebd0 <_scanf_float+0x2a4>
 800e9a8:	9b01      	ldr	r3, [sp, #4]
 800e9aa:	429e      	cmp	r6, r3
 800e9ac:	f200 8105 	bhi.w	800ebba <_scanf_float+0x28e>
 800e9b0:	2001      	movs	r0, #1
 800e9b2:	b007      	add	sp, #28
 800e9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e9bc:	2a0d      	cmp	r2, #13
 800e9be:	d8e8      	bhi.n	800e992 <_scanf_float+0x66>
 800e9c0:	a101      	add	r1, pc, #4	@ (adr r1, 800e9c8 <_scanf_float+0x9c>)
 800e9c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e9c6:	bf00      	nop
 800e9c8:	0800eb11 	.word	0x0800eb11
 800e9cc:	0800e993 	.word	0x0800e993
 800e9d0:	0800e993 	.word	0x0800e993
 800e9d4:	0800e993 	.word	0x0800e993
 800e9d8:	0800eb6d 	.word	0x0800eb6d
 800e9dc:	0800eb47 	.word	0x0800eb47
 800e9e0:	0800e993 	.word	0x0800e993
 800e9e4:	0800e993 	.word	0x0800e993
 800e9e8:	0800eb1f 	.word	0x0800eb1f
 800e9ec:	0800e993 	.word	0x0800e993
 800e9f0:	0800e993 	.word	0x0800e993
 800e9f4:	0800e993 	.word	0x0800e993
 800e9f8:	0800e993 	.word	0x0800e993
 800e9fc:	0800eadb 	.word	0x0800eadb
 800ea00:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ea04:	e7da      	b.n	800e9bc <_scanf_float+0x90>
 800ea06:	290e      	cmp	r1, #14
 800ea08:	d8c3      	bhi.n	800e992 <_scanf_float+0x66>
 800ea0a:	a001      	add	r0, pc, #4	@ (adr r0, 800ea10 <_scanf_float+0xe4>)
 800ea0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ea10:	0800eacb 	.word	0x0800eacb
 800ea14:	0800e993 	.word	0x0800e993
 800ea18:	0800eacb 	.word	0x0800eacb
 800ea1c:	0800eb5b 	.word	0x0800eb5b
 800ea20:	0800e993 	.word	0x0800e993
 800ea24:	0800ea6d 	.word	0x0800ea6d
 800ea28:	0800eab1 	.word	0x0800eab1
 800ea2c:	0800eab1 	.word	0x0800eab1
 800ea30:	0800eab1 	.word	0x0800eab1
 800ea34:	0800eab1 	.word	0x0800eab1
 800ea38:	0800eab1 	.word	0x0800eab1
 800ea3c:	0800eab1 	.word	0x0800eab1
 800ea40:	0800eab1 	.word	0x0800eab1
 800ea44:	0800eab1 	.word	0x0800eab1
 800ea48:	0800eab1 	.word	0x0800eab1
 800ea4c:	2b6e      	cmp	r3, #110	@ 0x6e
 800ea4e:	d809      	bhi.n	800ea64 <_scanf_float+0x138>
 800ea50:	2b60      	cmp	r3, #96	@ 0x60
 800ea52:	d8b1      	bhi.n	800e9b8 <_scanf_float+0x8c>
 800ea54:	2b54      	cmp	r3, #84	@ 0x54
 800ea56:	d07b      	beq.n	800eb50 <_scanf_float+0x224>
 800ea58:	2b59      	cmp	r3, #89	@ 0x59
 800ea5a:	d19a      	bne.n	800e992 <_scanf_float+0x66>
 800ea5c:	2d07      	cmp	r5, #7
 800ea5e:	d198      	bne.n	800e992 <_scanf_float+0x66>
 800ea60:	2508      	movs	r5, #8
 800ea62:	e02f      	b.n	800eac4 <_scanf_float+0x198>
 800ea64:	2b74      	cmp	r3, #116	@ 0x74
 800ea66:	d073      	beq.n	800eb50 <_scanf_float+0x224>
 800ea68:	2b79      	cmp	r3, #121	@ 0x79
 800ea6a:	e7f6      	b.n	800ea5a <_scanf_float+0x12e>
 800ea6c:	6821      	ldr	r1, [r4, #0]
 800ea6e:	05c8      	lsls	r0, r1, #23
 800ea70:	d51e      	bpl.n	800eab0 <_scanf_float+0x184>
 800ea72:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ea76:	6021      	str	r1, [r4, #0]
 800ea78:	3701      	adds	r7, #1
 800ea7a:	f1bb 0f00 	cmp.w	fp, #0
 800ea7e:	d003      	beq.n	800ea88 <_scanf_float+0x15c>
 800ea80:	3201      	adds	r2, #1
 800ea82:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ea86:	60a2      	str	r2, [r4, #8]
 800ea88:	68a3      	ldr	r3, [r4, #8]
 800ea8a:	3b01      	subs	r3, #1
 800ea8c:	60a3      	str	r3, [r4, #8]
 800ea8e:	6923      	ldr	r3, [r4, #16]
 800ea90:	3301      	adds	r3, #1
 800ea92:	6123      	str	r3, [r4, #16]
 800ea94:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ea98:	3b01      	subs	r3, #1
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	f8c9 3004 	str.w	r3, [r9, #4]
 800eaa0:	f340 8082 	ble.w	800eba8 <_scanf_float+0x27c>
 800eaa4:	f8d9 3000 	ldr.w	r3, [r9]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	f8c9 3000 	str.w	r3, [r9]
 800eaae:	e762      	b.n	800e976 <_scanf_float+0x4a>
 800eab0:	eb1a 0105 	adds.w	r1, sl, r5
 800eab4:	f47f af6d 	bne.w	800e992 <_scanf_float+0x66>
 800eab8:	6822      	ldr	r2, [r4, #0]
 800eaba:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800eabe:	6022      	str	r2, [r4, #0]
 800eac0:	460d      	mov	r5, r1
 800eac2:	468a      	mov	sl, r1
 800eac4:	f806 3b01 	strb.w	r3, [r6], #1
 800eac8:	e7de      	b.n	800ea88 <_scanf_float+0x15c>
 800eaca:	6822      	ldr	r2, [r4, #0]
 800eacc:	0610      	lsls	r0, r2, #24
 800eace:	f57f af60 	bpl.w	800e992 <_scanf_float+0x66>
 800ead2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ead6:	6022      	str	r2, [r4, #0]
 800ead8:	e7f4      	b.n	800eac4 <_scanf_float+0x198>
 800eada:	f1ba 0f00 	cmp.w	sl, #0
 800eade:	d10c      	bne.n	800eafa <_scanf_float+0x1ce>
 800eae0:	b977      	cbnz	r7, 800eb00 <_scanf_float+0x1d4>
 800eae2:	6822      	ldr	r2, [r4, #0]
 800eae4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800eae8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800eaec:	d108      	bne.n	800eb00 <_scanf_float+0x1d4>
 800eaee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eaf2:	6022      	str	r2, [r4, #0]
 800eaf4:	f04f 0a01 	mov.w	sl, #1
 800eaf8:	e7e4      	b.n	800eac4 <_scanf_float+0x198>
 800eafa:	f1ba 0f02 	cmp.w	sl, #2
 800eafe:	d050      	beq.n	800eba2 <_scanf_float+0x276>
 800eb00:	2d01      	cmp	r5, #1
 800eb02:	d002      	beq.n	800eb0a <_scanf_float+0x1de>
 800eb04:	2d04      	cmp	r5, #4
 800eb06:	f47f af44 	bne.w	800e992 <_scanf_float+0x66>
 800eb0a:	3501      	adds	r5, #1
 800eb0c:	b2ed      	uxtb	r5, r5
 800eb0e:	e7d9      	b.n	800eac4 <_scanf_float+0x198>
 800eb10:	f1ba 0f01 	cmp.w	sl, #1
 800eb14:	f47f af3d 	bne.w	800e992 <_scanf_float+0x66>
 800eb18:	f04f 0a02 	mov.w	sl, #2
 800eb1c:	e7d2      	b.n	800eac4 <_scanf_float+0x198>
 800eb1e:	b975      	cbnz	r5, 800eb3e <_scanf_float+0x212>
 800eb20:	2f00      	cmp	r7, #0
 800eb22:	f47f af37 	bne.w	800e994 <_scanf_float+0x68>
 800eb26:	6822      	ldr	r2, [r4, #0]
 800eb28:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800eb2c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800eb30:	f040 8103 	bne.w	800ed3a <_scanf_float+0x40e>
 800eb34:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eb38:	6022      	str	r2, [r4, #0]
 800eb3a:	2501      	movs	r5, #1
 800eb3c:	e7c2      	b.n	800eac4 <_scanf_float+0x198>
 800eb3e:	2d03      	cmp	r5, #3
 800eb40:	d0e3      	beq.n	800eb0a <_scanf_float+0x1de>
 800eb42:	2d05      	cmp	r5, #5
 800eb44:	e7df      	b.n	800eb06 <_scanf_float+0x1da>
 800eb46:	2d02      	cmp	r5, #2
 800eb48:	f47f af23 	bne.w	800e992 <_scanf_float+0x66>
 800eb4c:	2503      	movs	r5, #3
 800eb4e:	e7b9      	b.n	800eac4 <_scanf_float+0x198>
 800eb50:	2d06      	cmp	r5, #6
 800eb52:	f47f af1e 	bne.w	800e992 <_scanf_float+0x66>
 800eb56:	2507      	movs	r5, #7
 800eb58:	e7b4      	b.n	800eac4 <_scanf_float+0x198>
 800eb5a:	6822      	ldr	r2, [r4, #0]
 800eb5c:	0591      	lsls	r1, r2, #22
 800eb5e:	f57f af18 	bpl.w	800e992 <_scanf_float+0x66>
 800eb62:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800eb66:	6022      	str	r2, [r4, #0]
 800eb68:	9702      	str	r7, [sp, #8]
 800eb6a:	e7ab      	b.n	800eac4 <_scanf_float+0x198>
 800eb6c:	6822      	ldr	r2, [r4, #0]
 800eb6e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800eb72:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800eb76:	d005      	beq.n	800eb84 <_scanf_float+0x258>
 800eb78:	0550      	lsls	r0, r2, #21
 800eb7a:	f57f af0a 	bpl.w	800e992 <_scanf_float+0x66>
 800eb7e:	2f00      	cmp	r7, #0
 800eb80:	f000 80db 	beq.w	800ed3a <_scanf_float+0x40e>
 800eb84:	0591      	lsls	r1, r2, #22
 800eb86:	bf58      	it	pl
 800eb88:	9902      	ldrpl	r1, [sp, #8]
 800eb8a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eb8e:	bf58      	it	pl
 800eb90:	1a79      	subpl	r1, r7, r1
 800eb92:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800eb96:	bf58      	it	pl
 800eb98:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800eb9c:	6022      	str	r2, [r4, #0]
 800eb9e:	2700      	movs	r7, #0
 800eba0:	e790      	b.n	800eac4 <_scanf_float+0x198>
 800eba2:	f04f 0a03 	mov.w	sl, #3
 800eba6:	e78d      	b.n	800eac4 <_scanf_float+0x198>
 800eba8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ebac:	4649      	mov	r1, r9
 800ebae:	4640      	mov	r0, r8
 800ebb0:	4798      	blx	r3
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	f43f aedf 	beq.w	800e976 <_scanf_float+0x4a>
 800ebb8:	e6eb      	b.n	800e992 <_scanf_float+0x66>
 800ebba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ebc2:	464a      	mov	r2, r9
 800ebc4:	4640      	mov	r0, r8
 800ebc6:	4798      	blx	r3
 800ebc8:	6923      	ldr	r3, [r4, #16]
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	6123      	str	r3, [r4, #16]
 800ebce:	e6eb      	b.n	800e9a8 <_scanf_float+0x7c>
 800ebd0:	1e6b      	subs	r3, r5, #1
 800ebd2:	2b06      	cmp	r3, #6
 800ebd4:	d824      	bhi.n	800ec20 <_scanf_float+0x2f4>
 800ebd6:	2d02      	cmp	r5, #2
 800ebd8:	d836      	bhi.n	800ec48 <_scanf_float+0x31c>
 800ebda:	9b01      	ldr	r3, [sp, #4]
 800ebdc:	429e      	cmp	r6, r3
 800ebde:	f67f aee7 	bls.w	800e9b0 <_scanf_float+0x84>
 800ebe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ebea:	464a      	mov	r2, r9
 800ebec:	4640      	mov	r0, r8
 800ebee:	4798      	blx	r3
 800ebf0:	6923      	ldr	r3, [r4, #16]
 800ebf2:	3b01      	subs	r3, #1
 800ebf4:	6123      	str	r3, [r4, #16]
 800ebf6:	e7f0      	b.n	800ebda <_scanf_float+0x2ae>
 800ebf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebfc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ec00:	464a      	mov	r2, r9
 800ec02:	4640      	mov	r0, r8
 800ec04:	4798      	blx	r3
 800ec06:	6923      	ldr	r3, [r4, #16]
 800ec08:	3b01      	subs	r3, #1
 800ec0a:	6123      	str	r3, [r4, #16]
 800ec0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec10:	fa5f fa8a 	uxtb.w	sl, sl
 800ec14:	f1ba 0f02 	cmp.w	sl, #2
 800ec18:	d1ee      	bne.n	800ebf8 <_scanf_float+0x2cc>
 800ec1a:	3d03      	subs	r5, #3
 800ec1c:	b2ed      	uxtb	r5, r5
 800ec1e:	1b76      	subs	r6, r6, r5
 800ec20:	6823      	ldr	r3, [r4, #0]
 800ec22:	05da      	lsls	r2, r3, #23
 800ec24:	d530      	bpl.n	800ec88 <_scanf_float+0x35c>
 800ec26:	055b      	lsls	r3, r3, #21
 800ec28:	d511      	bpl.n	800ec4e <_scanf_float+0x322>
 800ec2a:	9b01      	ldr	r3, [sp, #4]
 800ec2c:	429e      	cmp	r6, r3
 800ec2e:	f67f aebf 	bls.w	800e9b0 <_scanf_float+0x84>
 800ec32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec3a:	464a      	mov	r2, r9
 800ec3c:	4640      	mov	r0, r8
 800ec3e:	4798      	blx	r3
 800ec40:	6923      	ldr	r3, [r4, #16]
 800ec42:	3b01      	subs	r3, #1
 800ec44:	6123      	str	r3, [r4, #16]
 800ec46:	e7f0      	b.n	800ec2a <_scanf_float+0x2fe>
 800ec48:	46aa      	mov	sl, r5
 800ec4a:	46b3      	mov	fp, r6
 800ec4c:	e7de      	b.n	800ec0c <_scanf_float+0x2e0>
 800ec4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ec52:	6923      	ldr	r3, [r4, #16]
 800ec54:	2965      	cmp	r1, #101	@ 0x65
 800ec56:	f103 33ff 	add.w	r3, r3, #4294967295
 800ec5a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ec5e:	6123      	str	r3, [r4, #16]
 800ec60:	d00c      	beq.n	800ec7c <_scanf_float+0x350>
 800ec62:	2945      	cmp	r1, #69	@ 0x45
 800ec64:	d00a      	beq.n	800ec7c <_scanf_float+0x350>
 800ec66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec6a:	464a      	mov	r2, r9
 800ec6c:	4640      	mov	r0, r8
 800ec6e:	4798      	blx	r3
 800ec70:	6923      	ldr	r3, [r4, #16]
 800ec72:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ec76:	3b01      	subs	r3, #1
 800ec78:	1eb5      	subs	r5, r6, #2
 800ec7a:	6123      	str	r3, [r4, #16]
 800ec7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec80:	464a      	mov	r2, r9
 800ec82:	4640      	mov	r0, r8
 800ec84:	4798      	blx	r3
 800ec86:	462e      	mov	r6, r5
 800ec88:	6822      	ldr	r2, [r4, #0]
 800ec8a:	f012 0210 	ands.w	r2, r2, #16
 800ec8e:	d001      	beq.n	800ec94 <_scanf_float+0x368>
 800ec90:	2000      	movs	r0, #0
 800ec92:	e68e      	b.n	800e9b2 <_scanf_float+0x86>
 800ec94:	7032      	strb	r2, [r6, #0]
 800ec96:	6823      	ldr	r3, [r4, #0]
 800ec98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ec9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eca0:	d125      	bne.n	800ecee <_scanf_float+0x3c2>
 800eca2:	9b02      	ldr	r3, [sp, #8]
 800eca4:	429f      	cmp	r7, r3
 800eca6:	d00a      	beq.n	800ecbe <_scanf_float+0x392>
 800eca8:	1bda      	subs	r2, r3, r7
 800ecaa:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ecae:	429e      	cmp	r6, r3
 800ecb0:	bf28      	it	cs
 800ecb2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ecb6:	4922      	ldr	r1, [pc, #136]	@ (800ed40 <_scanf_float+0x414>)
 800ecb8:	4630      	mov	r0, r6
 800ecba:	f000 f94f 	bl	800ef5c <siprintf>
 800ecbe:	9901      	ldr	r1, [sp, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	4640      	mov	r0, r8
 800ecc4:	f002 fc3c 	bl	8011540 <_strtod_r>
 800ecc8:	9b03      	ldr	r3, [sp, #12]
 800ecca:	6821      	ldr	r1, [r4, #0]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f011 0f02 	tst.w	r1, #2
 800ecd2:	ec57 6b10 	vmov	r6, r7, d0
 800ecd6:	f103 0204 	add.w	r2, r3, #4
 800ecda:	d015      	beq.n	800ed08 <_scanf_float+0x3dc>
 800ecdc:	9903      	ldr	r1, [sp, #12]
 800ecde:	600a      	str	r2, [r1, #0]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	e9c3 6700 	strd	r6, r7, [r3]
 800ece6:	68e3      	ldr	r3, [r4, #12]
 800ece8:	3301      	adds	r3, #1
 800ecea:	60e3      	str	r3, [r4, #12]
 800ecec:	e7d0      	b.n	800ec90 <_scanf_float+0x364>
 800ecee:	9b04      	ldr	r3, [sp, #16]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d0e4      	beq.n	800ecbe <_scanf_float+0x392>
 800ecf4:	9905      	ldr	r1, [sp, #20]
 800ecf6:	230a      	movs	r3, #10
 800ecf8:	3101      	adds	r1, #1
 800ecfa:	4640      	mov	r0, r8
 800ecfc:	f002 fca0 	bl	8011640 <_strtol_r>
 800ed00:	9b04      	ldr	r3, [sp, #16]
 800ed02:	9e05      	ldr	r6, [sp, #20]
 800ed04:	1ac2      	subs	r2, r0, r3
 800ed06:	e7d0      	b.n	800ecaa <_scanf_float+0x37e>
 800ed08:	f011 0f04 	tst.w	r1, #4
 800ed0c:	9903      	ldr	r1, [sp, #12]
 800ed0e:	600a      	str	r2, [r1, #0]
 800ed10:	d1e6      	bne.n	800ece0 <_scanf_float+0x3b4>
 800ed12:	681d      	ldr	r5, [r3, #0]
 800ed14:	4632      	mov	r2, r6
 800ed16:	463b      	mov	r3, r7
 800ed18:	4630      	mov	r0, r6
 800ed1a:	4639      	mov	r1, r7
 800ed1c:	f7f1 ff0e 	bl	8000b3c <__aeabi_dcmpun>
 800ed20:	b128      	cbz	r0, 800ed2e <_scanf_float+0x402>
 800ed22:	4808      	ldr	r0, [pc, #32]	@ (800ed44 <_scanf_float+0x418>)
 800ed24:	f000 fa00 	bl	800f128 <nanf>
 800ed28:	ed85 0a00 	vstr	s0, [r5]
 800ed2c:	e7db      	b.n	800ece6 <_scanf_float+0x3ba>
 800ed2e:	4630      	mov	r0, r6
 800ed30:	4639      	mov	r1, r7
 800ed32:	f7f1 ff61 	bl	8000bf8 <__aeabi_d2f>
 800ed36:	6028      	str	r0, [r5, #0]
 800ed38:	e7d5      	b.n	800ece6 <_scanf_float+0x3ba>
 800ed3a:	2700      	movs	r7, #0
 800ed3c:	e62e      	b.n	800e99c <_scanf_float+0x70>
 800ed3e:	bf00      	nop
 800ed40:	08014bbc 	.word	0x08014bbc
 800ed44:	08014cfd 	.word	0x08014cfd

0800ed48 <std>:
 800ed48:	2300      	movs	r3, #0
 800ed4a:	b510      	push	{r4, lr}
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	e9c0 3300 	strd	r3, r3, [r0]
 800ed52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed56:	6083      	str	r3, [r0, #8]
 800ed58:	8181      	strh	r1, [r0, #12]
 800ed5a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ed5c:	81c2      	strh	r2, [r0, #14]
 800ed5e:	6183      	str	r3, [r0, #24]
 800ed60:	4619      	mov	r1, r3
 800ed62:	2208      	movs	r2, #8
 800ed64:	305c      	adds	r0, #92	@ 0x5c
 800ed66:	f000 f95e 	bl	800f026 <memset>
 800ed6a:	4b0d      	ldr	r3, [pc, #52]	@ (800eda0 <std+0x58>)
 800ed6c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ed6e:	4b0d      	ldr	r3, [pc, #52]	@ (800eda4 <std+0x5c>)
 800ed70:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ed72:	4b0d      	ldr	r3, [pc, #52]	@ (800eda8 <std+0x60>)
 800ed74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ed76:	4b0d      	ldr	r3, [pc, #52]	@ (800edac <std+0x64>)
 800ed78:	6323      	str	r3, [r4, #48]	@ 0x30
 800ed7a:	4b0d      	ldr	r3, [pc, #52]	@ (800edb0 <std+0x68>)
 800ed7c:	6224      	str	r4, [r4, #32]
 800ed7e:	429c      	cmp	r4, r3
 800ed80:	d006      	beq.n	800ed90 <std+0x48>
 800ed82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ed86:	4294      	cmp	r4, r2
 800ed88:	d002      	beq.n	800ed90 <std+0x48>
 800ed8a:	33d0      	adds	r3, #208	@ 0xd0
 800ed8c:	429c      	cmp	r4, r3
 800ed8e:	d105      	bne.n	800ed9c <std+0x54>
 800ed90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ed94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed98:	f000 b9c2 	b.w	800f120 <__retarget_lock_init_recursive>
 800ed9c:	bd10      	pop	{r4, pc}
 800ed9e:	bf00      	nop
 800eda0:	0800efa1 	.word	0x0800efa1
 800eda4:	0800efc3 	.word	0x0800efc3
 800eda8:	0800effb 	.word	0x0800effb
 800edac:	0800f01f 	.word	0x0800f01f
 800edb0:	200024b0 	.word	0x200024b0

0800edb4 <stdio_exit_handler>:
 800edb4:	4a02      	ldr	r2, [pc, #8]	@ (800edc0 <stdio_exit_handler+0xc>)
 800edb6:	4903      	ldr	r1, [pc, #12]	@ (800edc4 <stdio_exit_handler+0x10>)
 800edb8:	4803      	ldr	r0, [pc, #12]	@ (800edc8 <stdio_exit_handler+0x14>)
 800edba:	f000 b869 	b.w	800ee90 <_fwalk_sglue>
 800edbe:	bf00      	nop
 800edc0:	20000104 	.word	0x20000104
 800edc4:	08011c81 	.word	0x08011c81
 800edc8:	20000114 	.word	0x20000114

0800edcc <cleanup_stdio>:
 800edcc:	6841      	ldr	r1, [r0, #4]
 800edce:	4b0c      	ldr	r3, [pc, #48]	@ (800ee00 <cleanup_stdio+0x34>)
 800edd0:	4299      	cmp	r1, r3
 800edd2:	b510      	push	{r4, lr}
 800edd4:	4604      	mov	r4, r0
 800edd6:	d001      	beq.n	800eddc <cleanup_stdio+0x10>
 800edd8:	f002 ff52 	bl	8011c80 <_fflush_r>
 800eddc:	68a1      	ldr	r1, [r4, #8]
 800edde:	4b09      	ldr	r3, [pc, #36]	@ (800ee04 <cleanup_stdio+0x38>)
 800ede0:	4299      	cmp	r1, r3
 800ede2:	d002      	beq.n	800edea <cleanup_stdio+0x1e>
 800ede4:	4620      	mov	r0, r4
 800ede6:	f002 ff4b 	bl	8011c80 <_fflush_r>
 800edea:	68e1      	ldr	r1, [r4, #12]
 800edec:	4b06      	ldr	r3, [pc, #24]	@ (800ee08 <cleanup_stdio+0x3c>)
 800edee:	4299      	cmp	r1, r3
 800edf0:	d004      	beq.n	800edfc <cleanup_stdio+0x30>
 800edf2:	4620      	mov	r0, r4
 800edf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edf8:	f002 bf42 	b.w	8011c80 <_fflush_r>
 800edfc:	bd10      	pop	{r4, pc}
 800edfe:	bf00      	nop
 800ee00:	200024b0 	.word	0x200024b0
 800ee04:	20002518 	.word	0x20002518
 800ee08:	20002580 	.word	0x20002580

0800ee0c <global_stdio_init.part.0>:
 800ee0c:	b510      	push	{r4, lr}
 800ee0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ee3c <global_stdio_init.part.0+0x30>)
 800ee10:	4c0b      	ldr	r4, [pc, #44]	@ (800ee40 <global_stdio_init.part.0+0x34>)
 800ee12:	4a0c      	ldr	r2, [pc, #48]	@ (800ee44 <global_stdio_init.part.0+0x38>)
 800ee14:	601a      	str	r2, [r3, #0]
 800ee16:	4620      	mov	r0, r4
 800ee18:	2200      	movs	r2, #0
 800ee1a:	2104      	movs	r1, #4
 800ee1c:	f7ff ff94 	bl	800ed48 <std>
 800ee20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ee24:	2201      	movs	r2, #1
 800ee26:	2109      	movs	r1, #9
 800ee28:	f7ff ff8e 	bl	800ed48 <std>
 800ee2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ee30:	2202      	movs	r2, #2
 800ee32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee36:	2112      	movs	r1, #18
 800ee38:	f7ff bf86 	b.w	800ed48 <std>
 800ee3c:	200025e8 	.word	0x200025e8
 800ee40:	200024b0 	.word	0x200024b0
 800ee44:	0800edb5 	.word	0x0800edb5

0800ee48 <__sfp_lock_acquire>:
 800ee48:	4801      	ldr	r0, [pc, #4]	@ (800ee50 <__sfp_lock_acquire+0x8>)
 800ee4a:	f000 b96a 	b.w	800f122 <__retarget_lock_acquire_recursive>
 800ee4e:	bf00      	nop
 800ee50:	200025f1 	.word	0x200025f1

0800ee54 <__sfp_lock_release>:
 800ee54:	4801      	ldr	r0, [pc, #4]	@ (800ee5c <__sfp_lock_release+0x8>)
 800ee56:	f000 b965 	b.w	800f124 <__retarget_lock_release_recursive>
 800ee5a:	bf00      	nop
 800ee5c:	200025f1 	.word	0x200025f1

0800ee60 <__sinit>:
 800ee60:	b510      	push	{r4, lr}
 800ee62:	4604      	mov	r4, r0
 800ee64:	f7ff fff0 	bl	800ee48 <__sfp_lock_acquire>
 800ee68:	6a23      	ldr	r3, [r4, #32]
 800ee6a:	b11b      	cbz	r3, 800ee74 <__sinit+0x14>
 800ee6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee70:	f7ff bff0 	b.w	800ee54 <__sfp_lock_release>
 800ee74:	4b04      	ldr	r3, [pc, #16]	@ (800ee88 <__sinit+0x28>)
 800ee76:	6223      	str	r3, [r4, #32]
 800ee78:	4b04      	ldr	r3, [pc, #16]	@ (800ee8c <__sinit+0x2c>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d1f5      	bne.n	800ee6c <__sinit+0xc>
 800ee80:	f7ff ffc4 	bl	800ee0c <global_stdio_init.part.0>
 800ee84:	e7f2      	b.n	800ee6c <__sinit+0xc>
 800ee86:	bf00      	nop
 800ee88:	0800edcd 	.word	0x0800edcd
 800ee8c:	200025e8 	.word	0x200025e8

0800ee90 <_fwalk_sglue>:
 800ee90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee94:	4607      	mov	r7, r0
 800ee96:	4688      	mov	r8, r1
 800ee98:	4614      	mov	r4, r2
 800ee9a:	2600      	movs	r6, #0
 800ee9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eea0:	f1b9 0901 	subs.w	r9, r9, #1
 800eea4:	d505      	bpl.n	800eeb2 <_fwalk_sglue+0x22>
 800eea6:	6824      	ldr	r4, [r4, #0]
 800eea8:	2c00      	cmp	r4, #0
 800eeaa:	d1f7      	bne.n	800ee9c <_fwalk_sglue+0xc>
 800eeac:	4630      	mov	r0, r6
 800eeae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeb2:	89ab      	ldrh	r3, [r5, #12]
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d907      	bls.n	800eec8 <_fwalk_sglue+0x38>
 800eeb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eebc:	3301      	adds	r3, #1
 800eebe:	d003      	beq.n	800eec8 <_fwalk_sglue+0x38>
 800eec0:	4629      	mov	r1, r5
 800eec2:	4638      	mov	r0, r7
 800eec4:	47c0      	blx	r8
 800eec6:	4306      	orrs	r6, r0
 800eec8:	3568      	adds	r5, #104	@ 0x68
 800eeca:	e7e9      	b.n	800eea0 <_fwalk_sglue+0x10>

0800eecc <iprintf>:
 800eecc:	b40f      	push	{r0, r1, r2, r3}
 800eece:	b507      	push	{r0, r1, r2, lr}
 800eed0:	4906      	ldr	r1, [pc, #24]	@ (800eeec <iprintf+0x20>)
 800eed2:	ab04      	add	r3, sp, #16
 800eed4:	6808      	ldr	r0, [r1, #0]
 800eed6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eeda:	6881      	ldr	r1, [r0, #8]
 800eedc:	9301      	str	r3, [sp, #4]
 800eede:	f002 fd33 	bl	8011948 <_vfiprintf_r>
 800eee2:	b003      	add	sp, #12
 800eee4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eee8:	b004      	add	sp, #16
 800eeea:	4770      	bx	lr
 800eeec:	20000110 	.word	0x20000110

0800eef0 <sniprintf>:
 800eef0:	b40c      	push	{r2, r3}
 800eef2:	b530      	push	{r4, r5, lr}
 800eef4:	4b18      	ldr	r3, [pc, #96]	@ (800ef58 <sniprintf+0x68>)
 800eef6:	1e0c      	subs	r4, r1, #0
 800eef8:	681d      	ldr	r5, [r3, #0]
 800eefa:	b09d      	sub	sp, #116	@ 0x74
 800eefc:	da08      	bge.n	800ef10 <sniprintf+0x20>
 800eefe:	238b      	movs	r3, #139	@ 0x8b
 800ef00:	602b      	str	r3, [r5, #0]
 800ef02:	f04f 30ff 	mov.w	r0, #4294967295
 800ef06:	b01d      	add	sp, #116	@ 0x74
 800ef08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef0c:	b002      	add	sp, #8
 800ef0e:	4770      	bx	lr
 800ef10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ef14:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ef18:	f04f 0300 	mov.w	r3, #0
 800ef1c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ef1e:	bf14      	ite	ne
 800ef20:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ef24:	4623      	moveq	r3, r4
 800ef26:	9304      	str	r3, [sp, #16]
 800ef28:	9307      	str	r3, [sp, #28]
 800ef2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ef2e:	9002      	str	r0, [sp, #8]
 800ef30:	9006      	str	r0, [sp, #24]
 800ef32:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ef36:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ef38:	ab21      	add	r3, sp, #132	@ 0x84
 800ef3a:	a902      	add	r1, sp, #8
 800ef3c:	4628      	mov	r0, r5
 800ef3e:	9301      	str	r3, [sp, #4]
 800ef40:	f002 fbdc 	bl	80116fc <_svfiprintf_r>
 800ef44:	1c43      	adds	r3, r0, #1
 800ef46:	bfbc      	itt	lt
 800ef48:	238b      	movlt	r3, #139	@ 0x8b
 800ef4a:	602b      	strlt	r3, [r5, #0]
 800ef4c:	2c00      	cmp	r4, #0
 800ef4e:	d0da      	beq.n	800ef06 <sniprintf+0x16>
 800ef50:	9b02      	ldr	r3, [sp, #8]
 800ef52:	2200      	movs	r2, #0
 800ef54:	701a      	strb	r2, [r3, #0]
 800ef56:	e7d6      	b.n	800ef06 <sniprintf+0x16>
 800ef58:	20000110 	.word	0x20000110

0800ef5c <siprintf>:
 800ef5c:	b40e      	push	{r1, r2, r3}
 800ef5e:	b510      	push	{r4, lr}
 800ef60:	b09d      	sub	sp, #116	@ 0x74
 800ef62:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ef64:	9002      	str	r0, [sp, #8]
 800ef66:	9006      	str	r0, [sp, #24]
 800ef68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ef6c:	480a      	ldr	r0, [pc, #40]	@ (800ef98 <siprintf+0x3c>)
 800ef6e:	9107      	str	r1, [sp, #28]
 800ef70:	9104      	str	r1, [sp, #16]
 800ef72:	490a      	ldr	r1, [pc, #40]	@ (800ef9c <siprintf+0x40>)
 800ef74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef78:	9105      	str	r1, [sp, #20]
 800ef7a:	2400      	movs	r4, #0
 800ef7c:	a902      	add	r1, sp, #8
 800ef7e:	6800      	ldr	r0, [r0, #0]
 800ef80:	9301      	str	r3, [sp, #4]
 800ef82:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ef84:	f002 fbba 	bl	80116fc <_svfiprintf_r>
 800ef88:	9b02      	ldr	r3, [sp, #8]
 800ef8a:	701c      	strb	r4, [r3, #0]
 800ef8c:	b01d      	add	sp, #116	@ 0x74
 800ef8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef92:	b003      	add	sp, #12
 800ef94:	4770      	bx	lr
 800ef96:	bf00      	nop
 800ef98:	20000110 	.word	0x20000110
 800ef9c:	ffff0208 	.word	0xffff0208

0800efa0 <__sread>:
 800efa0:	b510      	push	{r4, lr}
 800efa2:	460c      	mov	r4, r1
 800efa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efa8:	f000 f86c 	bl	800f084 <_read_r>
 800efac:	2800      	cmp	r0, #0
 800efae:	bfab      	itete	ge
 800efb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800efb2:	89a3      	ldrhlt	r3, [r4, #12]
 800efb4:	181b      	addge	r3, r3, r0
 800efb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800efba:	bfac      	ite	ge
 800efbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800efbe:	81a3      	strhlt	r3, [r4, #12]
 800efc0:	bd10      	pop	{r4, pc}

0800efc2 <__swrite>:
 800efc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc6:	461f      	mov	r7, r3
 800efc8:	898b      	ldrh	r3, [r1, #12]
 800efca:	05db      	lsls	r3, r3, #23
 800efcc:	4605      	mov	r5, r0
 800efce:	460c      	mov	r4, r1
 800efd0:	4616      	mov	r6, r2
 800efd2:	d505      	bpl.n	800efe0 <__swrite+0x1e>
 800efd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efd8:	2302      	movs	r3, #2
 800efda:	2200      	movs	r2, #0
 800efdc:	f000 f840 	bl	800f060 <_lseek_r>
 800efe0:	89a3      	ldrh	r3, [r4, #12]
 800efe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efe6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800efea:	81a3      	strh	r3, [r4, #12]
 800efec:	4632      	mov	r2, r6
 800efee:	463b      	mov	r3, r7
 800eff0:	4628      	mov	r0, r5
 800eff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eff6:	f000 b857 	b.w	800f0a8 <_write_r>

0800effa <__sseek>:
 800effa:	b510      	push	{r4, lr}
 800effc:	460c      	mov	r4, r1
 800effe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f002:	f000 f82d 	bl	800f060 <_lseek_r>
 800f006:	1c43      	adds	r3, r0, #1
 800f008:	89a3      	ldrh	r3, [r4, #12]
 800f00a:	bf15      	itete	ne
 800f00c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f00e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f012:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f016:	81a3      	strheq	r3, [r4, #12]
 800f018:	bf18      	it	ne
 800f01a:	81a3      	strhne	r3, [r4, #12]
 800f01c:	bd10      	pop	{r4, pc}

0800f01e <__sclose>:
 800f01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f022:	f000 b80d 	b.w	800f040 <_close_r>

0800f026 <memset>:
 800f026:	4402      	add	r2, r0
 800f028:	4603      	mov	r3, r0
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d100      	bne.n	800f030 <memset+0xa>
 800f02e:	4770      	bx	lr
 800f030:	f803 1b01 	strb.w	r1, [r3], #1
 800f034:	e7f9      	b.n	800f02a <memset+0x4>
	...

0800f038 <_localeconv_r>:
 800f038:	4800      	ldr	r0, [pc, #0]	@ (800f03c <_localeconv_r+0x4>)
 800f03a:	4770      	bx	lr
 800f03c:	20000250 	.word	0x20000250

0800f040 <_close_r>:
 800f040:	b538      	push	{r3, r4, r5, lr}
 800f042:	4d06      	ldr	r5, [pc, #24]	@ (800f05c <_close_r+0x1c>)
 800f044:	2300      	movs	r3, #0
 800f046:	4604      	mov	r4, r0
 800f048:	4608      	mov	r0, r1
 800f04a:	602b      	str	r3, [r5, #0]
 800f04c:	f7f5 fd7e 	bl	8004b4c <_close>
 800f050:	1c43      	adds	r3, r0, #1
 800f052:	d102      	bne.n	800f05a <_close_r+0x1a>
 800f054:	682b      	ldr	r3, [r5, #0]
 800f056:	b103      	cbz	r3, 800f05a <_close_r+0x1a>
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	bd38      	pop	{r3, r4, r5, pc}
 800f05c:	200025ec 	.word	0x200025ec

0800f060 <_lseek_r>:
 800f060:	b538      	push	{r3, r4, r5, lr}
 800f062:	4d07      	ldr	r5, [pc, #28]	@ (800f080 <_lseek_r+0x20>)
 800f064:	4604      	mov	r4, r0
 800f066:	4608      	mov	r0, r1
 800f068:	4611      	mov	r1, r2
 800f06a:	2200      	movs	r2, #0
 800f06c:	602a      	str	r2, [r5, #0]
 800f06e:	461a      	mov	r2, r3
 800f070:	f7f5 fd93 	bl	8004b9a <_lseek>
 800f074:	1c43      	adds	r3, r0, #1
 800f076:	d102      	bne.n	800f07e <_lseek_r+0x1e>
 800f078:	682b      	ldr	r3, [r5, #0]
 800f07a:	b103      	cbz	r3, 800f07e <_lseek_r+0x1e>
 800f07c:	6023      	str	r3, [r4, #0]
 800f07e:	bd38      	pop	{r3, r4, r5, pc}
 800f080:	200025ec 	.word	0x200025ec

0800f084 <_read_r>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	4d07      	ldr	r5, [pc, #28]	@ (800f0a4 <_read_r+0x20>)
 800f088:	4604      	mov	r4, r0
 800f08a:	4608      	mov	r0, r1
 800f08c:	4611      	mov	r1, r2
 800f08e:	2200      	movs	r2, #0
 800f090:	602a      	str	r2, [r5, #0]
 800f092:	461a      	mov	r2, r3
 800f094:	f7f5 fd21 	bl	8004ada <_read>
 800f098:	1c43      	adds	r3, r0, #1
 800f09a:	d102      	bne.n	800f0a2 <_read_r+0x1e>
 800f09c:	682b      	ldr	r3, [r5, #0]
 800f09e:	b103      	cbz	r3, 800f0a2 <_read_r+0x1e>
 800f0a0:	6023      	str	r3, [r4, #0]
 800f0a2:	bd38      	pop	{r3, r4, r5, pc}
 800f0a4:	200025ec 	.word	0x200025ec

0800f0a8 <_write_r>:
 800f0a8:	b538      	push	{r3, r4, r5, lr}
 800f0aa:	4d07      	ldr	r5, [pc, #28]	@ (800f0c8 <_write_r+0x20>)
 800f0ac:	4604      	mov	r4, r0
 800f0ae:	4608      	mov	r0, r1
 800f0b0:	4611      	mov	r1, r2
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	602a      	str	r2, [r5, #0]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	f7f5 fd2c 	bl	8004b14 <_write>
 800f0bc:	1c43      	adds	r3, r0, #1
 800f0be:	d102      	bne.n	800f0c6 <_write_r+0x1e>
 800f0c0:	682b      	ldr	r3, [r5, #0]
 800f0c2:	b103      	cbz	r3, 800f0c6 <_write_r+0x1e>
 800f0c4:	6023      	str	r3, [r4, #0]
 800f0c6:	bd38      	pop	{r3, r4, r5, pc}
 800f0c8:	200025ec 	.word	0x200025ec

0800f0cc <__errno>:
 800f0cc:	4b01      	ldr	r3, [pc, #4]	@ (800f0d4 <__errno+0x8>)
 800f0ce:	6818      	ldr	r0, [r3, #0]
 800f0d0:	4770      	bx	lr
 800f0d2:	bf00      	nop
 800f0d4:	20000110 	.word	0x20000110

0800f0d8 <__libc_init_array>:
 800f0d8:	b570      	push	{r4, r5, r6, lr}
 800f0da:	4d0d      	ldr	r5, [pc, #52]	@ (800f110 <__libc_init_array+0x38>)
 800f0dc:	4c0d      	ldr	r4, [pc, #52]	@ (800f114 <__libc_init_array+0x3c>)
 800f0de:	1b64      	subs	r4, r4, r5
 800f0e0:	10a4      	asrs	r4, r4, #2
 800f0e2:	2600      	movs	r6, #0
 800f0e4:	42a6      	cmp	r6, r4
 800f0e6:	d109      	bne.n	800f0fc <__libc_init_array+0x24>
 800f0e8:	4d0b      	ldr	r5, [pc, #44]	@ (800f118 <__libc_init_array+0x40>)
 800f0ea:	4c0c      	ldr	r4, [pc, #48]	@ (800f11c <__libc_init_array+0x44>)
 800f0ec:	f005 fcf6 	bl	8014adc <_init>
 800f0f0:	1b64      	subs	r4, r4, r5
 800f0f2:	10a4      	asrs	r4, r4, #2
 800f0f4:	2600      	movs	r6, #0
 800f0f6:	42a6      	cmp	r6, r4
 800f0f8:	d105      	bne.n	800f106 <__libc_init_array+0x2e>
 800f0fa:	bd70      	pop	{r4, r5, r6, pc}
 800f0fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f100:	4798      	blx	r3
 800f102:	3601      	adds	r6, #1
 800f104:	e7ee      	b.n	800f0e4 <__libc_init_array+0xc>
 800f106:	f855 3b04 	ldr.w	r3, [r5], #4
 800f10a:	4798      	blx	r3
 800f10c:	3601      	adds	r6, #1
 800f10e:	e7f2      	b.n	800f0f6 <__libc_init_array+0x1e>
 800f110:	08015440 	.word	0x08015440
 800f114:	08015440 	.word	0x08015440
 800f118:	08015440 	.word	0x08015440
 800f11c:	08015444 	.word	0x08015444

0800f120 <__retarget_lock_init_recursive>:
 800f120:	4770      	bx	lr

0800f122 <__retarget_lock_acquire_recursive>:
 800f122:	4770      	bx	lr

0800f124 <__retarget_lock_release_recursive>:
 800f124:	4770      	bx	lr
	...

0800f128 <nanf>:
 800f128:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f130 <nanf+0x8>
 800f12c:	4770      	bx	lr
 800f12e:	bf00      	nop
 800f130:	7fc00000 	.word	0x7fc00000

0800f134 <quorem>:
 800f134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f138:	6903      	ldr	r3, [r0, #16]
 800f13a:	690c      	ldr	r4, [r1, #16]
 800f13c:	42a3      	cmp	r3, r4
 800f13e:	4607      	mov	r7, r0
 800f140:	db7e      	blt.n	800f240 <quorem+0x10c>
 800f142:	3c01      	subs	r4, #1
 800f144:	f101 0814 	add.w	r8, r1, #20
 800f148:	00a3      	lsls	r3, r4, #2
 800f14a:	f100 0514 	add.w	r5, r0, #20
 800f14e:	9300      	str	r3, [sp, #0]
 800f150:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f154:	9301      	str	r3, [sp, #4]
 800f156:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f15a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f15e:	3301      	adds	r3, #1
 800f160:	429a      	cmp	r2, r3
 800f162:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f166:	fbb2 f6f3 	udiv	r6, r2, r3
 800f16a:	d32e      	bcc.n	800f1ca <quorem+0x96>
 800f16c:	f04f 0a00 	mov.w	sl, #0
 800f170:	46c4      	mov	ip, r8
 800f172:	46ae      	mov	lr, r5
 800f174:	46d3      	mov	fp, sl
 800f176:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f17a:	b298      	uxth	r0, r3
 800f17c:	fb06 a000 	mla	r0, r6, r0, sl
 800f180:	0c02      	lsrs	r2, r0, #16
 800f182:	0c1b      	lsrs	r3, r3, #16
 800f184:	fb06 2303 	mla	r3, r6, r3, r2
 800f188:	f8de 2000 	ldr.w	r2, [lr]
 800f18c:	b280      	uxth	r0, r0
 800f18e:	b292      	uxth	r2, r2
 800f190:	1a12      	subs	r2, r2, r0
 800f192:	445a      	add	r2, fp
 800f194:	f8de 0000 	ldr.w	r0, [lr]
 800f198:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f1a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f1a6:	b292      	uxth	r2, r2
 800f1a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f1ac:	45e1      	cmp	r9, ip
 800f1ae:	f84e 2b04 	str.w	r2, [lr], #4
 800f1b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f1b6:	d2de      	bcs.n	800f176 <quorem+0x42>
 800f1b8:	9b00      	ldr	r3, [sp, #0]
 800f1ba:	58eb      	ldr	r3, [r5, r3]
 800f1bc:	b92b      	cbnz	r3, 800f1ca <quorem+0x96>
 800f1be:	9b01      	ldr	r3, [sp, #4]
 800f1c0:	3b04      	subs	r3, #4
 800f1c2:	429d      	cmp	r5, r3
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	d32f      	bcc.n	800f228 <quorem+0xf4>
 800f1c8:	613c      	str	r4, [r7, #16]
 800f1ca:	4638      	mov	r0, r7
 800f1cc:	f001 f9c8 	bl	8010560 <__mcmp>
 800f1d0:	2800      	cmp	r0, #0
 800f1d2:	db25      	blt.n	800f220 <quorem+0xec>
 800f1d4:	4629      	mov	r1, r5
 800f1d6:	2000      	movs	r0, #0
 800f1d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f1dc:	f8d1 c000 	ldr.w	ip, [r1]
 800f1e0:	fa1f fe82 	uxth.w	lr, r2
 800f1e4:	fa1f f38c 	uxth.w	r3, ip
 800f1e8:	eba3 030e 	sub.w	r3, r3, lr
 800f1ec:	4403      	add	r3, r0
 800f1ee:	0c12      	lsrs	r2, r2, #16
 800f1f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f1f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1fe:	45c1      	cmp	r9, r8
 800f200:	f841 3b04 	str.w	r3, [r1], #4
 800f204:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f208:	d2e6      	bcs.n	800f1d8 <quorem+0xa4>
 800f20a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f20e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f212:	b922      	cbnz	r2, 800f21e <quorem+0xea>
 800f214:	3b04      	subs	r3, #4
 800f216:	429d      	cmp	r5, r3
 800f218:	461a      	mov	r2, r3
 800f21a:	d30b      	bcc.n	800f234 <quorem+0x100>
 800f21c:	613c      	str	r4, [r7, #16]
 800f21e:	3601      	adds	r6, #1
 800f220:	4630      	mov	r0, r6
 800f222:	b003      	add	sp, #12
 800f224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f228:	6812      	ldr	r2, [r2, #0]
 800f22a:	3b04      	subs	r3, #4
 800f22c:	2a00      	cmp	r2, #0
 800f22e:	d1cb      	bne.n	800f1c8 <quorem+0x94>
 800f230:	3c01      	subs	r4, #1
 800f232:	e7c6      	b.n	800f1c2 <quorem+0x8e>
 800f234:	6812      	ldr	r2, [r2, #0]
 800f236:	3b04      	subs	r3, #4
 800f238:	2a00      	cmp	r2, #0
 800f23a:	d1ef      	bne.n	800f21c <quorem+0xe8>
 800f23c:	3c01      	subs	r4, #1
 800f23e:	e7ea      	b.n	800f216 <quorem+0xe2>
 800f240:	2000      	movs	r0, #0
 800f242:	e7ee      	b.n	800f222 <quorem+0xee>
 800f244:	0000      	movs	r0, r0
	...

0800f248 <_dtoa_r>:
 800f248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f24c:	69c7      	ldr	r7, [r0, #28]
 800f24e:	b097      	sub	sp, #92	@ 0x5c
 800f250:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f254:	ec55 4b10 	vmov	r4, r5, d0
 800f258:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f25a:	9107      	str	r1, [sp, #28]
 800f25c:	4681      	mov	r9, r0
 800f25e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f260:	9311      	str	r3, [sp, #68]	@ 0x44
 800f262:	b97f      	cbnz	r7, 800f284 <_dtoa_r+0x3c>
 800f264:	2010      	movs	r0, #16
 800f266:	f000 fe09 	bl	800fe7c <malloc>
 800f26a:	4602      	mov	r2, r0
 800f26c:	f8c9 001c 	str.w	r0, [r9, #28]
 800f270:	b920      	cbnz	r0, 800f27c <_dtoa_r+0x34>
 800f272:	4ba9      	ldr	r3, [pc, #676]	@ (800f518 <_dtoa_r+0x2d0>)
 800f274:	21ef      	movs	r1, #239	@ 0xef
 800f276:	48a9      	ldr	r0, [pc, #676]	@ (800f51c <_dtoa_r+0x2d4>)
 800f278:	f002 fe12 	bl	8011ea0 <__assert_func>
 800f27c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f280:	6007      	str	r7, [r0, #0]
 800f282:	60c7      	str	r7, [r0, #12]
 800f284:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f288:	6819      	ldr	r1, [r3, #0]
 800f28a:	b159      	cbz	r1, 800f2a4 <_dtoa_r+0x5c>
 800f28c:	685a      	ldr	r2, [r3, #4]
 800f28e:	604a      	str	r2, [r1, #4]
 800f290:	2301      	movs	r3, #1
 800f292:	4093      	lsls	r3, r2
 800f294:	608b      	str	r3, [r1, #8]
 800f296:	4648      	mov	r0, r9
 800f298:	f000 fee6 	bl	8010068 <_Bfree>
 800f29c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	601a      	str	r2, [r3, #0]
 800f2a4:	1e2b      	subs	r3, r5, #0
 800f2a6:	bfb9      	ittee	lt
 800f2a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f2ac:	9305      	strlt	r3, [sp, #20]
 800f2ae:	2300      	movge	r3, #0
 800f2b0:	6033      	strge	r3, [r6, #0]
 800f2b2:	9f05      	ldr	r7, [sp, #20]
 800f2b4:	4b9a      	ldr	r3, [pc, #616]	@ (800f520 <_dtoa_r+0x2d8>)
 800f2b6:	bfbc      	itt	lt
 800f2b8:	2201      	movlt	r2, #1
 800f2ba:	6032      	strlt	r2, [r6, #0]
 800f2bc:	43bb      	bics	r3, r7
 800f2be:	d112      	bne.n	800f2e6 <_dtoa_r+0x9e>
 800f2c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f2c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f2c6:	6013      	str	r3, [r2, #0]
 800f2c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f2cc:	4323      	orrs	r3, r4
 800f2ce:	f000 855a 	beq.w	800fd86 <_dtoa_r+0xb3e>
 800f2d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f2d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f534 <_dtoa_r+0x2ec>
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	f000 855c 	beq.w	800fd96 <_dtoa_r+0xb4e>
 800f2de:	f10a 0303 	add.w	r3, sl, #3
 800f2e2:	f000 bd56 	b.w	800fd92 <_dtoa_r+0xb4a>
 800f2e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	ec51 0b17 	vmov	r0, r1, d7
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f2f6:	f7f1 fbef 	bl	8000ad8 <__aeabi_dcmpeq>
 800f2fa:	4680      	mov	r8, r0
 800f2fc:	b158      	cbz	r0, 800f316 <_dtoa_r+0xce>
 800f2fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f300:	2301      	movs	r3, #1
 800f302:	6013      	str	r3, [r2, #0]
 800f304:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f306:	b113      	cbz	r3, 800f30e <_dtoa_r+0xc6>
 800f308:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f30a:	4b86      	ldr	r3, [pc, #536]	@ (800f524 <_dtoa_r+0x2dc>)
 800f30c:	6013      	str	r3, [r2, #0]
 800f30e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f538 <_dtoa_r+0x2f0>
 800f312:	f000 bd40 	b.w	800fd96 <_dtoa_r+0xb4e>
 800f316:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f31a:	aa14      	add	r2, sp, #80	@ 0x50
 800f31c:	a915      	add	r1, sp, #84	@ 0x54
 800f31e:	4648      	mov	r0, r9
 800f320:	f001 fa3e 	bl	80107a0 <__d2b>
 800f324:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f328:	9002      	str	r0, [sp, #8]
 800f32a:	2e00      	cmp	r6, #0
 800f32c:	d078      	beq.n	800f420 <_dtoa_r+0x1d8>
 800f32e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f330:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f33c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f340:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f344:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f348:	4619      	mov	r1, r3
 800f34a:	2200      	movs	r2, #0
 800f34c:	4b76      	ldr	r3, [pc, #472]	@ (800f528 <_dtoa_r+0x2e0>)
 800f34e:	f7f0 ffa3 	bl	8000298 <__aeabi_dsub>
 800f352:	a36b      	add	r3, pc, #428	@ (adr r3, 800f500 <_dtoa_r+0x2b8>)
 800f354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f358:	f7f1 f956 	bl	8000608 <__aeabi_dmul>
 800f35c:	a36a      	add	r3, pc, #424	@ (adr r3, 800f508 <_dtoa_r+0x2c0>)
 800f35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f362:	f7f0 ff9b 	bl	800029c <__adddf3>
 800f366:	4604      	mov	r4, r0
 800f368:	4630      	mov	r0, r6
 800f36a:	460d      	mov	r5, r1
 800f36c:	f7f1 f8e2 	bl	8000534 <__aeabi_i2d>
 800f370:	a367      	add	r3, pc, #412	@ (adr r3, 800f510 <_dtoa_r+0x2c8>)
 800f372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f376:	f7f1 f947 	bl	8000608 <__aeabi_dmul>
 800f37a:	4602      	mov	r2, r0
 800f37c:	460b      	mov	r3, r1
 800f37e:	4620      	mov	r0, r4
 800f380:	4629      	mov	r1, r5
 800f382:	f7f0 ff8b 	bl	800029c <__adddf3>
 800f386:	4604      	mov	r4, r0
 800f388:	460d      	mov	r5, r1
 800f38a:	f7f1 fbed 	bl	8000b68 <__aeabi_d2iz>
 800f38e:	2200      	movs	r2, #0
 800f390:	4607      	mov	r7, r0
 800f392:	2300      	movs	r3, #0
 800f394:	4620      	mov	r0, r4
 800f396:	4629      	mov	r1, r5
 800f398:	f7f1 fba8 	bl	8000aec <__aeabi_dcmplt>
 800f39c:	b140      	cbz	r0, 800f3b0 <_dtoa_r+0x168>
 800f39e:	4638      	mov	r0, r7
 800f3a0:	f7f1 f8c8 	bl	8000534 <__aeabi_i2d>
 800f3a4:	4622      	mov	r2, r4
 800f3a6:	462b      	mov	r3, r5
 800f3a8:	f7f1 fb96 	bl	8000ad8 <__aeabi_dcmpeq>
 800f3ac:	b900      	cbnz	r0, 800f3b0 <_dtoa_r+0x168>
 800f3ae:	3f01      	subs	r7, #1
 800f3b0:	2f16      	cmp	r7, #22
 800f3b2:	d852      	bhi.n	800f45a <_dtoa_r+0x212>
 800f3b4:	4b5d      	ldr	r3, [pc, #372]	@ (800f52c <_dtoa_r+0x2e4>)
 800f3b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f3c2:	f7f1 fb93 	bl	8000aec <__aeabi_dcmplt>
 800f3c6:	2800      	cmp	r0, #0
 800f3c8:	d049      	beq.n	800f45e <_dtoa_r+0x216>
 800f3ca:	3f01      	subs	r7, #1
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f3d2:	1b9b      	subs	r3, r3, r6
 800f3d4:	1e5a      	subs	r2, r3, #1
 800f3d6:	bf45      	ittet	mi
 800f3d8:	f1c3 0301 	rsbmi	r3, r3, #1
 800f3dc:	9300      	strmi	r3, [sp, #0]
 800f3de:	2300      	movpl	r3, #0
 800f3e0:	2300      	movmi	r3, #0
 800f3e2:	9206      	str	r2, [sp, #24]
 800f3e4:	bf54      	ite	pl
 800f3e6:	9300      	strpl	r3, [sp, #0]
 800f3e8:	9306      	strmi	r3, [sp, #24]
 800f3ea:	2f00      	cmp	r7, #0
 800f3ec:	db39      	blt.n	800f462 <_dtoa_r+0x21a>
 800f3ee:	9b06      	ldr	r3, [sp, #24]
 800f3f0:	970d      	str	r7, [sp, #52]	@ 0x34
 800f3f2:	443b      	add	r3, r7
 800f3f4:	9306      	str	r3, [sp, #24]
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	9308      	str	r3, [sp, #32]
 800f3fa:	9b07      	ldr	r3, [sp, #28]
 800f3fc:	2b09      	cmp	r3, #9
 800f3fe:	d863      	bhi.n	800f4c8 <_dtoa_r+0x280>
 800f400:	2b05      	cmp	r3, #5
 800f402:	bfc4      	itt	gt
 800f404:	3b04      	subgt	r3, #4
 800f406:	9307      	strgt	r3, [sp, #28]
 800f408:	9b07      	ldr	r3, [sp, #28]
 800f40a:	f1a3 0302 	sub.w	r3, r3, #2
 800f40e:	bfcc      	ite	gt
 800f410:	2400      	movgt	r4, #0
 800f412:	2401      	movle	r4, #1
 800f414:	2b03      	cmp	r3, #3
 800f416:	d863      	bhi.n	800f4e0 <_dtoa_r+0x298>
 800f418:	e8df f003 	tbb	[pc, r3]
 800f41c:	2b375452 	.word	0x2b375452
 800f420:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f424:	441e      	add	r6, r3
 800f426:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f42a:	2b20      	cmp	r3, #32
 800f42c:	bfc1      	itttt	gt
 800f42e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f432:	409f      	lslgt	r7, r3
 800f434:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f438:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f43c:	bfd6      	itet	le
 800f43e:	f1c3 0320 	rsble	r3, r3, #32
 800f442:	ea47 0003 	orrgt.w	r0, r7, r3
 800f446:	fa04 f003 	lslle.w	r0, r4, r3
 800f44a:	f7f1 f863 	bl	8000514 <__aeabi_ui2d>
 800f44e:	2201      	movs	r2, #1
 800f450:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f454:	3e01      	subs	r6, #1
 800f456:	9212      	str	r2, [sp, #72]	@ 0x48
 800f458:	e776      	b.n	800f348 <_dtoa_r+0x100>
 800f45a:	2301      	movs	r3, #1
 800f45c:	e7b7      	b.n	800f3ce <_dtoa_r+0x186>
 800f45e:	9010      	str	r0, [sp, #64]	@ 0x40
 800f460:	e7b6      	b.n	800f3d0 <_dtoa_r+0x188>
 800f462:	9b00      	ldr	r3, [sp, #0]
 800f464:	1bdb      	subs	r3, r3, r7
 800f466:	9300      	str	r3, [sp, #0]
 800f468:	427b      	negs	r3, r7
 800f46a:	9308      	str	r3, [sp, #32]
 800f46c:	2300      	movs	r3, #0
 800f46e:	930d      	str	r3, [sp, #52]	@ 0x34
 800f470:	e7c3      	b.n	800f3fa <_dtoa_r+0x1b2>
 800f472:	2301      	movs	r3, #1
 800f474:	9309      	str	r3, [sp, #36]	@ 0x24
 800f476:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f478:	eb07 0b03 	add.w	fp, r7, r3
 800f47c:	f10b 0301 	add.w	r3, fp, #1
 800f480:	2b01      	cmp	r3, #1
 800f482:	9303      	str	r3, [sp, #12]
 800f484:	bfb8      	it	lt
 800f486:	2301      	movlt	r3, #1
 800f488:	e006      	b.n	800f498 <_dtoa_r+0x250>
 800f48a:	2301      	movs	r3, #1
 800f48c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f48e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f490:	2b00      	cmp	r3, #0
 800f492:	dd28      	ble.n	800f4e6 <_dtoa_r+0x29e>
 800f494:	469b      	mov	fp, r3
 800f496:	9303      	str	r3, [sp, #12]
 800f498:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f49c:	2100      	movs	r1, #0
 800f49e:	2204      	movs	r2, #4
 800f4a0:	f102 0514 	add.w	r5, r2, #20
 800f4a4:	429d      	cmp	r5, r3
 800f4a6:	d926      	bls.n	800f4f6 <_dtoa_r+0x2ae>
 800f4a8:	6041      	str	r1, [r0, #4]
 800f4aa:	4648      	mov	r0, r9
 800f4ac:	f000 fd9c 	bl	800ffe8 <_Balloc>
 800f4b0:	4682      	mov	sl, r0
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	d142      	bne.n	800f53c <_dtoa_r+0x2f4>
 800f4b6:	4b1e      	ldr	r3, [pc, #120]	@ (800f530 <_dtoa_r+0x2e8>)
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	f240 11af 	movw	r1, #431	@ 0x1af
 800f4be:	e6da      	b.n	800f276 <_dtoa_r+0x2e>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	e7e3      	b.n	800f48c <_dtoa_r+0x244>
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	e7d5      	b.n	800f474 <_dtoa_r+0x22c>
 800f4c8:	2401      	movs	r4, #1
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	9307      	str	r3, [sp, #28]
 800f4ce:	9409      	str	r4, [sp, #36]	@ 0x24
 800f4d0:	f04f 3bff 	mov.w	fp, #4294967295
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	f8cd b00c 	str.w	fp, [sp, #12]
 800f4da:	2312      	movs	r3, #18
 800f4dc:	920c      	str	r2, [sp, #48]	@ 0x30
 800f4de:	e7db      	b.n	800f498 <_dtoa_r+0x250>
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4e4:	e7f4      	b.n	800f4d0 <_dtoa_r+0x288>
 800f4e6:	f04f 0b01 	mov.w	fp, #1
 800f4ea:	f8cd b00c 	str.w	fp, [sp, #12]
 800f4ee:	465b      	mov	r3, fp
 800f4f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f4f4:	e7d0      	b.n	800f498 <_dtoa_r+0x250>
 800f4f6:	3101      	adds	r1, #1
 800f4f8:	0052      	lsls	r2, r2, #1
 800f4fa:	e7d1      	b.n	800f4a0 <_dtoa_r+0x258>
 800f4fc:	f3af 8000 	nop.w
 800f500:	636f4361 	.word	0x636f4361
 800f504:	3fd287a7 	.word	0x3fd287a7
 800f508:	8b60c8b3 	.word	0x8b60c8b3
 800f50c:	3fc68a28 	.word	0x3fc68a28
 800f510:	509f79fb 	.word	0x509f79fb
 800f514:	3fd34413 	.word	0x3fd34413
 800f518:	08014bce 	.word	0x08014bce
 800f51c:	08014be5 	.word	0x08014be5
 800f520:	7ff00000 	.word	0x7ff00000
 800f524:	08014b99 	.word	0x08014b99
 800f528:	3ff80000 	.word	0x3ff80000
 800f52c:	08014d98 	.word	0x08014d98
 800f530:	08014c3d 	.word	0x08014c3d
 800f534:	08014bca 	.word	0x08014bca
 800f538:	08014b98 	.word	0x08014b98
 800f53c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f540:	6018      	str	r0, [r3, #0]
 800f542:	9b03      	ldr	r3, [sp, #12]
 800f544:	2b0e      	cmp	r3, #14
 800f546:	f200 80a1 	bhi.w	800f68c <_dtoa_r+0x444>
 800f54a:	2c00      	cmp	r4, #0
 800f54c:	f000 809e 	beq.w	800f68c <_dtoa_r+0x444>
 800f550:	2f00      	cmp	r7, #0
 800f552:	dd33      	ble.n	800f5bc <_dtoa_r+0x374>
 800f554:	4b9c      	ldr	r3, [pc, #624]	@ (800f7c8 <_dtoa_r+0x580>)
 800f556:	f007 020f 	and.w	r2, r7, #15
 800f55a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f55e:	ed93 7b00 	vldr	d7, [r3]
 800f562:	05f8      	lsls	r0, r7, #23
 800f564:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f568:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f56c:	d516      	bpl.n	800f59c <_dtoa_r+0x354>
 800f56e:	4b97      	ldr	r3, [pc, #604]	@ (800f7cc <_dtoa_r+0x584>)
 800f570:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f578:	f7f1 f970 	bl	800085c <__aeabi_ddiv>
 800f57c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f580:	f004 040f 	and.w	r4, r4, #15
 800f584:	2603      	movs	r6, #3
 800f586:	4d91      	ldr	r5, [pc, #580]	@ (800f7cc <_dtoa_r+0x584>)
 800f588:	b954      	cbnz	r4, 800f5a0 <_dtoa_r+0x358>
 800f58a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f58e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f592:	f7f1 f963 	bl	800085c <__aeabi_ddiv>
 800f596:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f59a:	e028      	b.n	800f5ee <_dtoa_r+0x3a6>
 800f59c:	2602      	movs	r6, #2
 800f59e:	e7f2      	b.n	800f586 <_dtoa_r+0x33e>
 800f5a0:	07e1      	lsls	r1, r4, #31
 800f5a2:	d508      	bpl.n	800f5b6 <_dtoa_r+0x36e>
 800f5a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f5a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f5ac:	f7f1 f82c 	bl	8000608 <__aeabi_dmul>
 800f5b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f5b4:	3601      	adds	r6, #1
 800f5b6:	1064      	asrs	r4, r4, #1
 800f5b8:	3508      	adds	r5, #8
 800f5ba:	e7e5      	b.n	800f588 <_dtoa_r+0x340>
 800f5bc:	f000 80af 	beq.w	800f71e <_dtoa_r+0x4d6>
 800f5c0:	427c      	negs	r4, r7
 800f5c2:	4b81      	ldr	r3, [pc, #516]	@ (800f7c8 <_dtoa_r+0x580>)
 800f5c4:	4d81      	ldr	r5, [pc, #516]	@ (800f7cc <_dtoa_r+0x584>)
 800f5c6:	f004 020f 	and.w	r2, r4, #15
 800f5ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f5d6:	f7f1 f817 	bl	8000608 <__aeabi_dmul>
 800f5da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f5de:	1124      	asrs	r4, r4, #4
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	2602      	movs	r6, #2
 800f5e4:	2c00      	cmp	r4, #0
 800f5e6:	f040 808f 	bne.w	800f708 <_dtoa_r+0x4c0>
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d1d3      	bne.n	800f596 <_dtoa_r+0x34e>
 800f5ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f5f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f000 8094 	beq.w	800f722 <_dtoa_r+0x4da>
 800f5fa:	4b75      	ldr	r3, [pc, #468]	@ (800f7d0 <_dtoa_r+0x588>)
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	4620      	mov	r0, r4
 800f600:	4629      	mov	r1, r5
 800f602:	f7f1 fa73 	bl	8000aec <__aeabi_dcmplt>
 800f606:	2800      	cmp	r0, #0
 800f608:	f000 808b 	beq.w	800f722 <_dtoa_r+0x4da>
 800f60c:	9b03      	ldr	r3, [sp, #12]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	f000 8087 	beq.w	800f722 <_dtoa_r+0x4da>
 800f614:	f1bb 0f00 	cmp.w	fp, #0
 800f618:	dd34      	ble.n	800f684 <_dtoa_r+0x43c>
 800f61a:	4620      	mov	r0, r4
 800f61c:	4b6d      	ldr	r3, [pc, #436]	@ (800f7d4 <_dtoa_r+0x58c>)
 800f61e:	2200      	movs	r2, #0
 800f620:	4629      	mov	r1, r5
 800f622:	f7f0 fff1 	bl	8000608 <__aeabi_dmul>
 800f626:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f62a:	f107 38ff 	add.w	r8, r7, #4294967295
 800f62e:	3601      	adds	r6, #1
 800f630:	465c      	mov	r4, fp
 800f632:	4630      	mov	r0, r6
 800f634:	f7f0 ff7e 	bl	8000534 <__aeabi_i2d>
 800f638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f63c:	f7f0 ffe4 	bl	8000608 <__aeabi_dmul>
 800f640:	4b65      	ldr	r3, [pc, #404]	@ (800f7d8 <_dtoa_r+0x590>)
 800f642:	2200      	movs	r2, #0
 800f644:	f7f0 fe2a 	bl	800029c <__adddf3>
 800f648:	4605      	mov	r5, r0
 800f64a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f64e:	2c00      	cmp	r4, #0
 800f650:	d16a      	bne.n	800f728 <_dtoa_r+0x4e0>
 800f652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f656:	4b61      	ldr	r3, [pc, #388]	@ (800f7dc <_dtoa_r+0x594>)
 800f658:	2200      	movs	r2, #0
 800f65a:	f7f0 fe1d 	bl	8000298 <__aeabi_dsub>
 800f65e:	4602      	mov	r2, r0
 800f660:	460b      	mov	r3, r1
 800f662:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f666:	462a      	mov	r2, r5
 800f668:	4633      	mov	r3, r6
 800f66a:	f7f1 fa5d 	bl	8000b28 <__aeabi_dcmpgt>
 800f66e:	2800      	cmp	r0, #0
 800f670:	f040 8298 	bne.w	800fba4 <_dtoa_r+0x95c>
 800f674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f678:	462a      	mov	r2, r5
 800f67a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f67e:	f7f1 fa35 	bl	8000aec <__aeabi_dcmplt>
 800f682:	bb38      	cbnz	r0, 800f6d4 <_dtoa_r+0x48c>
 800f684:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f688:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f68c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f2c0 8157 	blt.w	800f942 <_dtoa_r+0x6fa>
 800f694:	2f0e      	cmp	r7, #14
 800f696:	f300 8154 	bgt.w	800f942 <_dtoa_r+0x6fa>
 800f69a:	4b4b      	ldr	r3, [pc, #300]	@ (800f7c8 <_dtoa_r+0x580>)
 800f69c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f6a0:	ed93 7b00 	vldr	d7, [r3]
 800f6a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	ed8d 7b00 	vstr	d7, [sp]
 800f6ac:	f280 80e5 	bge.w	800f87a <_dtoa_r+0x632>
 800f6b0:	9b03      	ldr	r3, [sp, #12]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	f300 80e1 	bgt.w	800f87a <_dtoa_r+0x632>
 800f6b8:	d10c      	bne.n	800f6d4 <_dtoa_r+0x48c>
 800f6ba:	4b48      	ldr	r3, [pc, #288]	@ (800f7dc <_dtoa_r+0x594>)
 800f6bc:	2200      	movs	r2, #0
 800f6be:	ec51 0b17 	vmov	r0, r1, d7
 800f6c2:	f7f0 ffa1 	bl	8000608 <__aeabi_dmul>
 800f6c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6ca:	f7f1 fa23 	bl	8000b14 <__aeabi_dcmpge>
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	f000 8266 	beq.w	800fba0 <_dtoa_r+0x958>
 800f6d4:	2400      	movs	r4, #0
 800f6d6:	4625      	mov	r5, r4
 800f6d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6da:	4656      	mov	r6, sl
 800f6dc:	ea6f 0803 	mvn.w	r8, r3
 800f6e0:	2700      	movs	r7, #0
 800f6e2:	4621      	mov	r1, r4
 800f6e4:	4648      	mov	r0, r9
 800f6e6:	f000 fcbf 	bl	8010068 <_Bfree>
 800f6ea:	2d00      	cmp	r5, #0
 800f6ec:	f000 80bd 	beq.w	800f86a <_dtoa_r+0x622>
 800f6f0:	b12f      	cbz	r7, 800f6fe <_dtoa_r+0x4b6>
 800f6f2:	42af      	cmp	r7, r5
 800f6f4:	d003      	beq.n	800f6fe <_dtoa_r+0x4b6>
 800f6f6:	4639      	mov	r1, r7
 800f6f8:	4648      	mov	r0, r9
 800f6fa:	f000 fcb5 	bl	8010068 <_Bfree>
 800f6fe:	4629      	mov	r1, r5
 800f700:	4648      	mov	r0, r9
 800f702:	f000 fcb1 	bl	8010068 <_Bfree>
 800f706:	e0b0      	b.n	800f86a <_dtoa_r+0x622>
 800f708:	07e2      	lsls	r2, r4, #31
 800f70a:	d505      	bpl.n	800f718 <_dtoa_r+0x4d0>
 800f70c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f710:	f7f0 ff7a 	bl	8000608 <__aeabi_dmul>
 800f714:	3601      	adds	r6, #1
 800f716:	2301      	movs	r3, #1
 800f718:	1064      	asrs	r4, r4, #1
 800f71a:	3508      	adds	r5, #8
 800f71c:	e762      	b.n	800f5e4 <_dtoa_r+0x39c>
 800f71e:	2602      	movs	r6, #2
 800f720:	e765      	b.n	800f5ee <_dtoa_r+0x3a6>
 800f722:	9c03      	ldr	r4, [sp, #12]
 800f724:	46b8      	mov	r8, r7
 800f726:	e784      	b.n	800f632 <_dtoa_r+0x3ea>
 800f728:	4b27      	ldr	r3, [pc, #156]	@ (800f7c8 <_dtoa_r+0x580>)
 800f72a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f72c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f730:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f734:	4454      	add	r4, sl
 800f736:	2900      	cmp	r1, #0
 800f738:	d054      	beq.n	800f7e4 <_dtoa_r+0x59c>
 800f73a:	4929      	ldr	r1, [pc, #164]	@ (800f7e0 <_dtoa_r+0x598>)
 800f73c:	2000      	movs	r0, #0
 800f73e:	f7f1 f88d 	bl	800085c <__aeabi_ddiv>
 800f742:	4633      	mov	r3, r6
 800f744:	462a      	mov	r2, r5
 800f746:	f7f0 fda7 	bl	8000298 <__aeabi_dsub>
 800f74a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f74e:	4656      	mov	r6, sl
 800f750:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f754:	f7f1 fa08 	bl	8000b68 <__aeabi_d2iz>
 800f758:	4605      	mov	r5, r0
 800f75a:	f7f0 feeb 	bl	8000534 <__aeabi_i2d>
 800f75e:	4602      	mov	r2, r0
 800f760:	460b      	mov	r3, r1
 800f762:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f766:	f7f0 fd97 	bl	8000298 <__aeabi_dsub>
 800f76a:	3530      	adds	r5, #48	@ 0x30
 800f76c:	4602      	mov	r2, r0
 800f76e:	460b      	mov	r3, r1
 800f770:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f774:	f806 5b01 	strb.w	r5, [r6], #1
 800f778:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f77c:	f7f1 f9b6 	bl	8000aec <__aeabi_dcmplt>
 800f780:	2800      	cmp	r0, #0
 800f782:	d172      	bne.n	800f86a <_dtoa_r+0x622>
 800f784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f788:	4911      	ldr	r1, [pc, #68]	@ (800f7d0 <_dtoa_r+0x588>)
 800f78a:	2000      	movs	r0, #0
 800f78c:	f7f0 fd84 	bl	8000298 <__aeabi_dsub>
 800f790:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f794:	f7f1 f9aa 	bl	8000aec <__aeabi_dcmplt>
 800f798:	2800      	cmp	r0, #0
 800f79a:	f040 80b4 	bne.w	800f906 <_dtoa_r+0x6be>
 800f79e:	42a6      	cmp	r6, r4
 800f7a0:	f43f af70 	beq.w	800f684 <_dtoa_r+0x43c>
 800f7a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f7a8:	4b0a      	ldr	r3, [pc, #40]	@ (800f7d4 <_dtoa_r+0x58c>)
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	f7f0 ff2c 	bl	8000608 <__aeabi_dmul>
 800f7b0:	4b08      	ldr	r3, [pc, #32]	@ (800f7d4 <_dtoa_r+0x58c>)
 800f7b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7bc:	f7f0 ff24 	bl	8000608 <__aeabi_dmul>
 800f7c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f7c4:	e7c4      	b.n	800f750 <_dtoa_r+0x508>
 800f7c6:	bf00      	nop
 800f7c8:	08014d98 	.word	0x08014d98
 800f7cc:	08014d70 	.word	0x08014d70
 800f7d0:	3ff00000 	.word	0x3ff00000
 800f7d4:	40240000 	.word	0x40240000
 800f7d8:	401c0000 	.word	0x401c0000
 800f7dc:	40140000 	.word	0x40140000
 800f7e0:	3fe00000 	.word	0x3fe00000
 800f7e4:	4631      	mov	r1, r6
 800f7e6:	4628      	mov	r0, r5
 800f7e8:	f7f0 ff0e 	bl	8000608 <__aeabi_dmul>
 800f7ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f7f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f7f2:	4656      	mov	r6, sl
 800f7f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7f8:	f7f1 f9b6 	bl	8000b68 <__aeabi_d2iz>
 800f7fc:	4605      	mov	r5, r0
 800f7fe:	f7f0 fe99 	bl	8000534 <__aeabi_i2d>
 800f802:	4602      	mov	r2, r0
 800f804:	460b      	mov	r3, r1
 800f806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f80a:	f7f0 fd45 	bl	8000298 <__aeabi_dsub>
 800f80e:	3530      	adds	r5, #48	@ 0x30
 800f810:	f806 5b01 	strb.w	r5, [r6], #1
 800f814:	4602      	mov	r2, r0
 800f816:	460b      	mov	r3, r1
 800f818:	42a6      	cmp	r6, r4
 800f81a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f81e:	f04f 0200 	mov.w	r2, #0
 800f822:	d124      	bne.n	800f86e <_dtoa_r+0x626>
 800f824:	4baf      	ldr	r3, [pc, #700]	@ (800fae4 <_dtoa_r+0x89c>)
 800f826:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f82a:	f7f0 fd37 	bl	800029c <__adddf3>
 800f82e:	4602      	mov	r2, r0
 800f830:	460b      	mov	r3, r1
 800f832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f836:	f7f1 f977 	bl	8000b28 <__aeabi_dcmpgt>
 800f83a:	2800      	cmp	r0, #0
 800f83c:	d163      	bne.n	800f906 <_dtoa_r+0x6be>
 800f83e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f842:	49a8      	ldr	r1, [pc, #672]	@ (800fae4 <_dtoa_r+0x89c>)
 800f844:	2000      	movs	r0, #0
 800f846:	f7f0 fd27 	bl	8000298 <__aeabi_dsub>
 800f84a:	4602      	mov	r2, r0
 800f84c:	460b      	mov	r3, r1
 800f84e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f852:	f7f1 f94b 	bl	8000aec <__aeabi_dcmplt>
 800f856:	2800      	cmp	r0, #0
 800f858:	f43f af14 	beq.w	800f684 <_dtoa_r+0x43c>
 800f85c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f85e:	1e73      	subs	r3, r6, #1
 800f860:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f862:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f866:	2b30      	cmp	r3, #48	@ 0x30
 800f868:	d0f8      	beq.n	800f85c <_dtoa_r+0x614>
 800f86a:	4647      	mov	r7, r8
 800f86c:	e03b      	b.n	800f8e6 <_dtoa_r+0x69e>
 800f86e:	4b9e      	ldr	r3, [pc, #632]	@ (800fae8 <_dtoa_r+0x8a0>)
 800f870:	f7f0 feca 	bl	8000608 <__aeabi_dmul>
 800f874:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f878:	e7bc      	b.n	800f7f4 <_dtoa_r+0x5ac>
 800f87a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f87e:	4656      	mov	r6, sl
 800f880:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f884:	4620      	mov	r0, r4
 800f886:	4629      	mov	r1, r5
 800f888:	f7f0 ffe8 	bl	800085c <__aeabi_ddiv>
 800f88c:	f7f1 f96c 	bl	8000b68 <__aeabi_d2iz>
 800f890:	4680      	mov	r8, r0
 800f892:	f7f0 fe4f 	bl	8000534 <__aeabi_i2d>
 800f896:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f89a:	f7f0 feb5 	bl	8000608 <__aeabi_dmul>
 800f89e:	4602      	mov	r2, r0
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	4629      	mov	r1, r5
 800f8a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f8aa:	f7f0 fcf5 	bl	8000298 <__aeabi_dsub>
 800f8ae:	f806 4b01 	strb.w	r4, [r6], #1
 800f8b2:	9d03      	ldr	r5, [sp, #12]
 800f8b4:	eba6 040a 	sub.w	r4, r6, sl
 800f8b8:	42a5      	cmp	r5, r4
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	460b      	mov	r3, r1
 800f8be:	d133      	bne.n	800f928 <_dtoa_r+0x6e0>
 800f8c0:	f7f0 fcec 	bl	800029c <__adddf3>
 800f8c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8c8:	4604      	mov	r4, r0
 800f8ca:	460d      	mov	r5, r1
 800f8cc:	f7f1 f92c 	bl	8000b28 <__aeabi_dcmpgt>
 800f8d0:	b9c0      	cbnz	r0, 800f904 <_dtoa_r+0x6bc>
 800f8d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	4629      	mov	r1, r5
 800f8da:	f7f1 f8fd 	bl	8000ad8 <__aeabi_dcmpeq>
 800f8de:	b110      	cbz	r0, 800f8e6 <_dtoa_r+0x69e>
 800f8e0:	f018 0f01 	tst.w	r8, #1
 800f8e4:	d10e      	bne.n	800f904 <_dtoa_r+0x6bc>
 800f8e6:	9902      	ldr	r1, [sp, #8]
 800f8e8:	4648      	mov	r0, r9
 800f8ea:	f000 fbbd 	bl	8010068 <_Bfree>
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	7033      	strb	r3, [r6, #0]
 800f8f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f8f4:	3701      	adds	r7, #1
 800f8f6:	601f      	str	r7, [r3, #0]
 800f8f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	f000 824b 	beq.w	800fd96 <_dtoa_r+0xb4e>
 800f900:	601e      	str	r6, [r3, #0]
 800f902:	e248      	b.n	800fd96 <_dtoa_r+0xb4e>
 800f904:	46b8      	mov	r8, r7
 800f906:	4633      	mov	r3, r6
 800f908:	461e      	mov	r6, r3
 800f90a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f90e:	2a39      	cmp	r2, #57	@ 0x39
 800f910:	d106      	bne.n	800f920 <_dtoa_r+0x6d8>
 800f912:	459a      	cmp	sl, r3
 800f914:	d1f8      	bne.n	800f908 <_dtoa_r+0x6c0>
 800f916:	2230      	movs	r2, #48	@ 0x30
 800f918:	f108 0801 	add.w	r8, r8, #1
 800f91c:	f88a 2000 	strb.w	r2, [sl]
 800f920:	781a      	ldrb	r2, [r3, #0]
 800f922:	3201      	adds	r2, #1
 800f924:	701a      	strb	r2, [r3, #0]
 800f926:	e7a0      	b.n	800f86a <_dtoa_r+0x622>
 800f928:	4b6f      	ldr	r3, [pc, #444]	@ (800fae8 <_dtoa_r+0x8a0>)
 800f92a:	2200      	movs	r2, #0
 800f92c:	f7f0 fe6c 	bl	8000608 <__aeabi_dmul>
 800f930:	2200      	movs	r2, #0
 800f932:	2300      	movs	r3, #0
 800f934:	4604      	mov	r4, r0
 800f936:	460d      	mov	r5, r1
 800f938:	f7f1 f8ce 	bl	8000ad8 <__aeabi_dcmpeq>
 800f93c:	2800      	cmp	r0, #0
 800f93e:	d09f      	beq.n	800f880 <_dtoa_r+0x638>
 800f940:	e7d1      	b.n	800f8e6 <_dtoa_r+0x69e>
 800f942:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f944:	2a00      	cmp	r2, #0
 800f946:	f000 80ea 	beq.w	800fb1e <_dtoa_r+0x8d6>
 800f94a:	9a07      	ldr	r2, [sp, #28]
 800f94c:	2a01      	cmp	r2, #1
 800f94e:	f300 80cd 	bgt.w	800faec <_dtoa_r+0x8a4>
 800f952:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f954:	2a00      	cmp	r2, #0
 800f956:	f000 80c1 	beq.w	800fadc <_dtoa_r+0x894>
 800f95a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f95e:	9c08      	ldr	r4, [sp, #32]
 800f960:	9e00      	ldr	r6, [sp, #0]
 800f962:	9a00      	ldr	r2, [sp, #0]
 800f964:	441a      	add	r2, r3
 800f966:	9200      	str	r2, [sp, #0]
 800f968:	9a06      	ldr	r2, [sp, #24]
 800f96a:	2101      	movs	r1, #1
 800f96c:	441a      	add	r2, r3
 800f96e:	4648      	mov	r0, r9
 800f970:	9206      	str	r2, [sp, #24]
 800f972:	f000 fc77 	bl	8010264 <__i2b>
 800f976:	4605      	mov	r5, r0
 800f978:	b166      	cbz	r6, 800f994 <_dtoa_r+0x74c>
 800f97a:	9b06      	ldr	r3, [sp, #24]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	dd09      	ble.n	800f994 <_dtoa_r+0x74c>
 800f980:	42b3      	cmp	r3, r6
 800f982:	9a00      	ldr	r2, [sp, #0]
 800f984:	bfa8      	it	ge
 800f986:	4633      	movge	r3, r6
 800f988:	1ad2      	subs	r2, r2, r3
 800f98a:	9200      	str	r2, [sp, #0]
 800f98c:	9a06      	ldr	r2, [sp, #24]
 800f98e:	1af6      	subs	r6, r6, r3
 800f990:	1ad3      	subs	r3, r2, r3
 800f992:	9306      	str	r3, [sp, #24]
 800f994:	9b08      	ldr	r3, [sp, #32]
 800f996:	b30b      	cbz	r3, 800f9dc <_dtoa_r+0x794>
 800f998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f000 80c6 	beq.w	800fb2c <_dtoa_r+0x8e4>
 800f9a0:	2c00      	cmp	r4, #0
 800f9a2:	f000 80c0 	beq.w	800fb26 <_dtoa_r+0x8de>
 800f9a6:	4629      	mov	r1, r5
 800f9a8:	4622      	mov	r2, r4
 800f9aa:	4648      	mov	r0, r9
 800f9ac:	f000 fd12 	bl	80103d4 <__pow5mult>
 800f9b0:	9a02      	ldr	r2, [sp, #8]
 800f9b2:	4601      	mov	r1, r0
 800f9b4:	4605      	mov	r5, r0
 800f9b6:	4648      	mov	r0, r9
 800f9b8:	f000 fc6a 	bl	8010290 <__multiply>
 800f9bc:	9902      	ldr	r1, [sp, #8]
 800f9be:	4680      	mov	r8, r0
 800f9c0:	4648      	mov	r0, r9
 800f9c2:	f000 fb51 	bl	8010068 <_Bfree>
 800f9c6:	9b08      	ldr	r3, [sp, #32]
 800f9c8:	1b1b      	subs	r3, r3, r4
 800f9ca:	9308      	str	r3, [sp, #32]
 800f9cc:	f000 80b1 	beq.w	800fb32 <_dtoa_r+0x8ea>
 800f9d0:	9a08      	ldr	r2, [sp, #32]
 800f9d2:	4641      	mov	r1, r8
 800f9d4:	4648      	mov	r0, r9
 800f9d6:	f000 fcfd 	bl	80103d4 <__pow5mult>
 800f9da:	9002      	str	r0, [sp, #8]
 800f9dc:	2101      	movs	r1, #1
 800f9de:	4648      	mov	r0, r9
 800f9e0:	f000 fc40 	bl	8010264 <__i2b>
 800f9e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f000 81d8 	beq.w	800fd9e <_dtoa_r+0xb56>
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	4601      	mov	r1, r0
 800f9f2:	4648      	mov	r0, r9
 800f9f4:	f000 fcee 	bl	80103d4 <__pow5mult>
 800f9f8:	9b07      	ldr	r3, [sp, #28]
 800f9fa:	2b01      	cmp	r3, #1
 800f9fc:	4604      	mov	r4, r0
 800f9fe:	f300 809f 	bgt.w	800fb40 <_dtoa_r+0x8f8>
 800fa02:	9b04      	ldr	r3, [sp, #16]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	f040 8097 	bne.w	800fb38 <_dtoa_r+0x8f0>
 800fa0a:	9b05      	ldr	r3, [sp, #20]
 800fa0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	f040 8093 	bne.w	800fb3c <_dtoa_r+0x8f4>
 800fa16:	9b05      	ldr	r3, [sp, #20]
 800fa18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fa1c:	0d1b      	lsrs	r3, r3, #20
 800fa1e:	051b      	lsls	r3, r3, #20
 800fa20:	b133      	cbz	r3, 800fa30 <_dtoa_r+0x7e8>
 800fa22:	9b00      	ldr	r3, [sp, #0]
 800fa24:	3301      	adds	r3, #1
 800fa26:	9300      	str	r3, [sp, #0]
 800fa28:	9b06      	ldr	r3, [sp, #24]
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	9306      	str	r3, [sp, #24]
 800fa2e:	2301      	movs	r3, #1
 800fa30:	9308      	str	r3, [sp, #32]
 800fa32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	f000 81b8 	beq.w	800fdaa <_dtoa_r+0xb62>
 800fa3a:	6923      	ldr	r3, [r4, #16]
 800fa3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fa40:	6918      	ldr	r0, [r3, #16]
 800fa42:	f000 fbc3 	bl	80101cc <__hi0bits>
 800fa46:	f1c0 0020 	rsb	r0, r0, #32
 800fa4a:	9b06      	ldr	r3, [sp, #24]
 800fa4c:	4418      	add	r0, r3
 800fa4e:	f010 001f 	ands.w	r0, r0, #31
 800fa52:	f000 8082 	beq.w	800fb5a <_dtoa_r+0x912>
 800fa56:	f1c0 0320 	rsb	r3, r0, #32
 800fa5a:	2b04      	cmp	r3, #4
 800fa5c:	dd73      	ble.n	800fb46 <_dtoa_r+0x8fe>
 800fa5e:	9b00      	ldr	r3, [sp, #0]
 800fa60:	f1c0 001c 	rsb	r0, r0, #28
 800fa64:	4403      	add	r3, r0
 800fa66:	9300      	str	r3, [sp, #0]
 800fa68:	9b06      	ldr	r3, [sp, #24]
 800fa6a:	4403      	add	r3, r0
 800fa6c:	4406      	add	r6, r0
 800fa6e:	9306      	str	r3, [sp, #24]
 800fa70:	9b00      	ldr	r3, [sp, #0]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	dd05      	ble.n	800fa82 <_dtoa_r+0x83a>
 800fa76:	9902      	ldr	r1, [sp, #8]
 800fa78:	461a      	mov	r2, r3
 800fa7a:	4648      	mov	r0, r9
 800fa7c:	f000 fd04 	bl	8010488 <__lshift>
 800fa80:	9002      	str	r0, [sp, #8]
 800fa82:	9b06      	ldr	r3, [sp, #24]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	dd05      	ble.n	800fa94 <_dtoa_r+0x84c>
 800fa88:	4621      	mov	r1, r4
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	4648      	mov	r0, r9
 800fa8e:	f000 fcfb 	bl	8010488 <__lshift>
 800fa92:	4604      	mov	r4, r0
 800fa94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d061      	beq.n	800fb5e <_dtoa_r+0x916>
 800fa9a:	9802      	ldr	r0, [sp, #8]
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	f000 fd5f 	bl	8010560 <__mcmp>
 800faa2:	2800      	cmp	r0, #0
 800faa4:	da5b      	bge.n	800fb5e <_dtoa_r+0x916>
 800faa6:	2300      	movs	r3, #0
 800faa8:	9902      	ldr	r1, [sp, #8]
 800faaa:	220a      	movs	r2, #10
 800faac:	4648      	mov	r0, r9
 800faae:	f000 fafd 	bl	80100ac <__multadd>
 800fab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fab4:	9002      	str	r0, [sp, #8]
 800fab6:	f107 38ff 	add.w	r8, r7, #4294967295
 800faba:	2b00      	cmp	r3, #0
 800fabc:	f000 8177 	beq.w	800fdae <_dtoa_r+0xb66>
 800fac0:	4629      	mov	r1, r5
 800fac2:	2300      	movs	r3, #0
 800fac4:	220a      	movs	r2, #10
 800fac6:	4648      	mov	r0, r9
 800fac8:	f000 faf0 	bl	80100ac <__multadd>
 800facc:	f1bb 0f00 	cmp.w	fp, #0
 800fad0:	4605      	mov	r5, r0
 800fad2:	dc6f      	bgt.n	800fbb4 <_dtoa_r+0x96c>
 800fad4:	9b07      	ldr	r3, [sp, #28]
 800fad6:	2b02      	cmp	r3, #2
 800fad8:	dc49      	bgt.n	800fb6e <_dtoa_r+0x926>
 800fada:	e06b      	b.n	800fbb4 <_dtoa_r+0x96c>
 800fadc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fade:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fae2:	e73c      	b.n	800f95e <_dtoa_r+0x716>
 800fae4:	3fe00000 	.word	0x3fe00000
 800fae8:	40240000 	.word	0x40240000
 800faec:	9b03      	ldr	r3, [sp, #12]
 800faee:	1e5c      	subs	r4, r3, #1
 800faf0:	9b08      	ldr	r3, [sp, #32]
 800faf2:	42a3      	cmp	r3, r4
 800faf4:	db09      	blt.n	800fb0a <_dtoa_r+0x8c2>
 800faf6:	1b1c      	subs	r4, r3, r4
 800faf8:	9b03      	ldr	r3, [sp, #12]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	f6bf af30 	bge.w	800f960 <_dtoa_r+0x718>
 800fb00:	9b00      	ldr	r3, [sp, #0]
 800fb02:	9a03      	ldr	r2, [sp, #12]
 800fb04:	1a9e      	subs	r6, r3, r2
 800fb06:	2300      	movs	r3, #0
 800fb08:	e72b      	b.n	800f962 <_dtoa_r+0x71a>
 800fb0a:	9b08      	ldr	r3, [sp, #32]
 800fb0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fb0e:	9408      	str	r4, [sp, #32]
 800fb10:	1ae3      	subs	r3, r4, r3
 800fb12:	441a      	add	r2, r3
 800fb14:	9e00      	ldr	r6, [sp, #0]
 800fb16:	9b03      	ldr	r3, [sp, #12]
 800fb18:	920d      	str	r2, [sp, #52]	@ 0x34
 800fb1a:	2400      	movs	r4, #0
 800fb1c:	e721      	b.n	800f962 <_dtoa_r+0x71a>
 800fb1e:	9c08      	ldr	r4, [sp, #32]
 800fb20:	9e00      	ldr	r6, [sp, #0]
 800fb22:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800fb24:	e728      	b.n	800f978 <_dtoa_r+0x730>
 800fb26:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800fb2a:	e751      	b.n	800f9d0 <_dtoa_r+0x788>
 800fb2c:	9a08      	ldr	r2, [sp, #32]
 800fb2e:	9902      	ldr	r1, [sp, #8]
 800fb30:	e750      	b.n	800f9d4 <_dtoa_r+0x78c>
 800fb32:	f8cd 8008 	str.w	r8, [sp, #8]
 800fb36:	e751      	b.n	800f9dc <_dtoa_r+0x794>
 800fb38:	2300      	movs	r3, #0
 800fb3a:	e779      	b.n	800fa30 <_dtoa_r+0x7e8>
 800fb3c:	9b04      	ldr	r3, [sp, #16]
 800fb3e:	e777      	b.n	800fa30 <_dtoa_r+0x7e8>
 800fb40:	2300      	movs	r3, #0
 800fb42:	9308      	str	r3, [sp, #32]
 800fb44:	e779      	b.n	800fa3a <_dtoa_r+0x7f2>
 800fb46:	d093      	beq.n	800fa70 <_dtoa_r+0x828>
 800fb48:	9a00      	ldr	r2, [sp, #0]
 800fb4a:	331c      	adds	r3, #28
 800fb4c:	441a      	add	r2, r3
 800fb4e:	9200      	str	r2, [sp, #0]
 800fb50:	9a06      	ldr	r2, [sp, #24]
 800fb52:	441a      	add	r2, r3
 800fb54:	441e      	add	r6, r3
 800fb56:	9206      	str	r2, [sp, #24]
 800fb58:	e78a      	b.n	800fa70 <_dtoa_r+0x828>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	e7f4      	b.n	800fb48 <_dtoa_r+0x900>
 800fb5e:	9b03      	ldr	r3, [sp, #12]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	46b8      	mov	r8, r7
 800fb64:	dc20      	bgt.n	800fba8 <_dtoa_r+0x960>
 800fb66:	469b      	mov	fp, r3
 800fb68:	9b07      	ldr	r3, [sp, #28]
 800fb6a:	2b02      	cmp	r3, #2
 800fb6c:	dd1e      	ble.n	800fbac <_dtoa_r+0x964>
 800fb6e:	f1bb 0f00 	cmp.w	fp, #0
 800fb72:	f47f adb1 	bne.w	800f6d8 <_dtoa_r+0x490>
 800fb76:	4621      	mov	r1, r4
 800fb78:	465b      	mov	r3, fp
 800fb7a:	2205      	movs	r2, #5
 800fb7c:	4648      	mov	r0, r9
 800fb7e:	f000 fa95 	bl	80100ac <__multadd>
 800fb82:	4601      	mov	r1, r0
 800fb84:	4604      	mov	r4, r0
 800fb86:	9802      	ldr	r0, [sp, #8]
 800fb88:	f000 fcea 	bl	8010560 <__mcmp>
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	f77f ada3 	ble.w	800f6d8 <_dtoa_r+0x490>
 800fb92:	4656      	mov	r6, sl
 800fb94:	2331      	movs	r3, #49	@ 0x31
 800fb96:	f806 3b01 	strb.w	r3, [r6], #1
 800fb9a:	f108 0801 	add.w	r8, r8, #1
 800fb9e:	e59f      	b.n	800f6e0 <_dtoa_r+0x498>
 800fba0:	9c03      	ldr	r4, [sp, #12]
 800fba2:	46b8      	mov	r8, r7
 800fba4:	4625      	mov	r5, r4
 800fba6:	e7f4      	b.n	800fb92 <_dtoa_r+0x94a>
 800fba8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800fbac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	f000 8101 	beq.w	800fdb6 <_dtoa_r+0xb6e>
 800fbb4:	2e00      	cmp	r6, #0
 800fbb6:	dd05      	ble.n	800fbc4 <_dtoa_r+0x97c>
 800fbb8:	4629      	mov	r1, r5
 800fbba:	4632      	mov	r2, r6
 800fbbc:	4648      	mov	r0, r9
 800fbbe:	f000 fc63 	bl	8010488 <__lshift>
 800fbc2:	4605      	mov	r5, r0
 800fbc4:	9b08      	ldr	r3, [sp, #32]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d05c      	beq.n	800fc84 <_dtoa_r+0xa3c>
 800fbca:	6869      	ldr	r1, [r5, #4]
 800fbcc:	4648      	mov	r0, r9
 800fbce:	f000 fa0b 	bl	800ffe8 <_Balloc>
 800fbd2:	4606      	mov	r6, r0
 800fbd4:	b928      	cbnz	r0, 800fbe2 <_dtoa_r+0x99a>
 800fbd6:	4b82      	ldr	r3, [pc, #520]	@ (800fde0 <_dtoa_r+0xb98>)
 800fbd8:	4602      	mov	r2, r0
 800fbda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fbde:	f7ff bb4a 	b.w	800f276 <_dtoa_r+0x2e>
 800fbe2:	692a      	ldr	r2, [r5, #16]
 800fbe4:	3202      	adds	r2, #2
 800fbe6:	0092      	lsls	r2, r2, #2
 800fbe8:	f105 010c 	add.w	r1, r5, #12
 800fbec:	300c      	adds	r0, #12
 800fbee:	f002 f93f 	bl	8011e70 <memcpy>
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	4631      	mov	r1, r6
 800fbf6:	4648      	mov	r0, r9
 800fbf8:	f000 fc46 	bl	8010488 <__lshift>
 800fbfc:	f10a 0301 	add.w	r3, sl, #1
 800fc00:	9300      	str	r3, [sp, #0]
 800fc02:	eb0a 030b 	add.w	r3, sl, fp
 800fc06:	9308      	str	r3, [sp, #32]
 800fc08:	9b04      	ldr	r3, [sp, #16]
 800fc0a:	f003 0301 	and.w	r3, r3, #1
 800fc0e:	462f      	mov	r7, r5
 800fc10:	9306      	str	r3, [sp, #24]
 800fc12:	4605      	mov	r5, r0
 800fc14:	9b00      	ldr	r3, [sp, #0]
 800fc16:	9802      	ldr	r0, [sp, #8]
 800fc18:	4621      	mov	r1, r4
 800fc1a:	f103 3bff 	add.w	fp, r3, #4294967295
 800fc1e:	f7ff fa89 	bl	800f134 <quorem>
 800fc22:	4603      	mov	r3, r0
 800fc24:	3330      	adds	r3, #48	@ 0x30
 800fc26:	9003      	str	r0, [sp, #12]
 800fc28:	4639      	mov	r1, r7
 800fc2a:	9802      	ldr	r0, [sp, #8]
 800fc2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc2e:	f000 fc97 	bl	8010560 <__mcmp>
 800fc32:	462a      	mov	r2, r5
 800fc34:	9004      	str	r0, [sp, #16]
 800fc36:	4621      	mov	r1, r4
 800fc38:	4648      	mov	r0, r9
 800fc3a:	f000 fcad 	bl	8010598 <__mdiff>
 800fc3e:	68c2      	ldr	r2, [r0, #12]
 800fc40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc42:	4606      	mov	r6, r0
 800fc44:	bb02      	cbnz	r2, 800fc88 <_dtoa_r+0xa40>
 800fc46:	4601      	mov	r1, r0
 800fc48:	9802      	ldr	r0, [sp, #8]
 800fc4a:	f000 fc89 	bl	8010560 <__mcmp>
 800fc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc50:	4602      	mov	r2, r0
 800fc52:	4631      	mov	r1, r6
 800fc54:	4648      	mov	r0, r9
 800fc56:	920c      	str	r2, [sp, #48]	@ 0x30
 800fc58:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc5a:	f000 fa05 	bl	8010068 <_Bfree>
 800fc5e:	9b07      	ldr	r3, [sp, #28]
 800fc60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fc62:	9e00      	ldr	r6, [sp, #0]
 800fc64:	ea42 0103 	orr.w	r1, r2, r3
 800fc68:	9b06      	ldr	r3, [sp, #24]
 800fc6a:	4319      	orrs	r1, r3
 800fc6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc6e:	d10d      	bne.n	800fc8c <_dtoa_r+0xa44>
 800fc70:	2b39      	cmp	r3, #57	@ 0x39
 800fc72:	d027      	beq.n	800fcc4 <_dtoa_r+0xa7c>
 800fc74:	9a04      	ldr	r2, [sp, #16]
 800fc76:	2a00      	cmp	r2, #0
 800fc78:	dd01      	ble.n	800fc7e <_dtoa_r+0xa36>
 800fc7a:	9b03      	ldr	r3, [sp, #12]
 800fc7c:	3331      	adds	r3, #49	@ 0x31
 800fc7e:	f88b 3000 	strb.w	r3, [fp]
 800fc82:	e52e      	b.n	800f6e2 <_dtoa_r+0x49a>
 800fc84:	4628      	mov	r0, r5
 800fc86:	e7b9      	b.n	800fbfc <_dtoa_r+0x9b4>
 800fc88:	2201      	movs	r2, #1
 800fc8a:	e7e2      	b.n	800fc52 <_dtoa_r+0xa0a>
 800fc8c:	9904      	ldr	r1, [sp, #16]
 800fc8e:	2900      	cmp	r1, #0
 800fc90:	db04      	blt.n	800fc9c <_dtoa_r+0xa54>
 800fc92:	9807      	ldr	r0, [sp, #28]
 800fc94:	4301      	orrs	r1, r0
 800fc96:	9806      	ldr	r0, [sp, #24]
 800fc98:	4301      	orrs	r1, r0
 800fc9a:	d120      	bne.n	800fcde <_dtoa_r+0xa96>
 800fc9c:	2a00      	cmp	r2, #0
 800fc9e:	ddee      	ble.n	800fc7e <_dtoa_r+0xa36>
 800fca0:	9902      	ldr	r1, [sp, #8]
 800fca2:	9300      	str	r3, [sp, #0]
 800fca4:	2201      	movs	r2, #1
 800fca6:	4648      	mov	r0, r9
 800fca8:	f000 fbee 	bl	8010488 <__lshift>
 800fcac:	4621      	mov	r1, r4
 800fcae:	9002      	str	r0, [sp, #8]
 800fcb0:	f000 fc56 	bl	8010560 <__mcmp>
 800fcb4:	2800      	cmp	r0, #0
 800fcb6:	9b00      	ldr	r3, [sp, #0]
 800fcb8:	dc02      	bgt.n	800fcc0 <_dtoa_r+0xa78>
 800fcba:	d1e0      	bne.n	800fc7e <_dtoa_r+0xa36>
 800fcbc:	07da      	lsls	r2, r3, #31
 800fcbe:	d5de      	bpl.n	800fc7e <_dtoa_r+0xa36>
 800fcc0:	2b39      	cmp	r3, #57	@ 0x39
 800fcc2:	d1da      	bne.n	800fc7a <_dtoa_r+0xa32>
 800fcc4:	2339      	movs	r3, #57	@ 0x39
 800fcc6:	f88b 3000 	strb.w	r3, [fp]
 800fcca:	4633      	mov	r3, r6
 800fccc:	461e      	mov	r6, r3
 800fcce:	3b01      	subs	r3, #1
 800fcd0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fcd4:	2a39      	cmp	r2, #57	@ 0x39
 800fcd6:	d04e      	beq.n	800fd76 <_dtoa_r+0xb2e>
 800fcd8:	3201      	adds	r2, #1
 800fcda:	701a      	strb	r2, [r3, #0]
 800fcdc:	e501      	b.n	800f6e2 <_dtoa_r+0x49a>
 800fcde:	2a00      	cmp	r2, #0
 800fce0:	dd03      	ble.n	800fcea <_dtoa_r+0xaa2>
 800fce2:	2b39      	cmp	r3, #57	@ 0x39
 800fce4:	d0ee      	beq.n	800fcc4 <_dtoa_r+0xa7c>
 800fce6:	3301      	adds	r3, #1
 800fce8:	e7c9      	b.n	800fc7e <_dtoa_r+0xa36>
 800fcea:	9a00      	ldr	r2, [sp, #0]
 800fcec:	9908      	ldr	r1, [sp, #32]
 800fcee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fcf2:	428a      	cmp	r2, r1
 800fcf4:	d028      	beq.n	800fd48 <_dtoa_r+0xb00>
 800fcf6:	9902      	ldr	r1, [sp, #8]
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	220a      	movs	r2, #10
 800fcfc:	4648      	mov	r0, r9
 800fcfe:	f000 f9d5 	bl	80100ac <__multadd>
 800fd02:	42af      	cmp	r7, r5
 800fd04:	9002      	str	r0, [sp, #8]
 800fd06:	f04f 0300 	mov.w	r3, #0
 800fd0a:	f04f 020a 	mov.w	r2, #10
 800fd0e:	4639      	mov	r1, r7
 800fd10:	4648      	mov	r0, r9
 800fd12:	d107      	bne.n	800fd24 <_dtoa_r+0xadc>
 800fd14:	f000 f9ca 	bl	80100ac <__multadd>
 800fd18:	4607      	mov	r7, r0
 800fd1a:	4605      	mov	r5, r0
 800fd1c:	9b00      	ldr	r3, [sp, #0]
 800fd1e:	3301      	adds	r3, #1
 800fd20:	9300      	str	r3, [sp, #0]
 800fd22:	e777      	b.n	800fc14 <_dtoa_r+0x9cc>
 800fd24:	f000 f9c2 	bl	80100ac <__multadd>
 800fd28:	4629      	mov	r1, r5
 800fd2a:	4607      	mov	r7, r0
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	220a      	movs	r2, #10
 800fd30:	4648      	mov	r0, r9
 800fd32:	f000 f9bb 	bl	80100ac <__multadd>
 800fd36:	4605      	mov	r5, r0
 800fd38:	e7f0      	b.n	800fd1c <_dtoa_r+0xad4>
 800fd3a:	f1bb 0f00 	cmp.w	fp, #0
 800fd3e:	bfcc      	ite	gt
 800fd40:	465e      	movgt	r6, fp
 800fd42:	2601      	movle	r6, #1
 800fd44:	4456      	add	r6, sl
 800fd46:	2700      	movs	r7, #0
 800fd48:	9902      	ldr	r1, [sp, #8]
 800fd4a:	9300      	str	r3, [sp, #0]
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	4648      	mov	r0, r9
 800fd50:	f000 fb9a 	bl	8010488 <__lshift>
 800fd54:	4621      	mov	r1, r4
 800fd56:	9002      	str	r0, [sp, #8]
 800fd58:	f000 fc02 	bl	8010560 <__mcmp>
 800fd5c:	2800      	cmp	r0, #0
 800fd5e:	dcb4      	bgt.n	800fcca <_dtoa_r+0xa82>
 800fd60:	d102      	bne.n	800fd68 <_dtoa_r+0xb20>
 800fd62:	9b00      	ldr	r3, [sp, #0]
 800fd64:	07db      	lsls	r3, r3, #31
 800fd66:	d4b0      	bmi.n	800fcca <_dtoa_r+0xa82>
 800fd68:	4633      	mov	r3, r6
 800fd6a:	461e      	mov	r6, r3
 800fd6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd70:	2a30      	cmp	r2, #48	@ 0x30
 800fd72:	d0fa      	beq.n	800fd6a <_dtoa_r+0xb22>
 800fd74:	e4b5      	b.n	800f6e2 <_dtoa_r+0x49a>
 800fd76:	459a      	cmp	sl, r3
 800fd78:	d1a8      	bne.n	800fccc <_dtoa_r+0xa84>
 800fd7a:	2331      	movs	r3, #49	@ 0x31
 800fd7c:	f108 0801 	add.w	r8, r8, #1
 800fd80:	f88a 3000 	strb.w	r3, [sl]
 800fd84:	e4ad      	b.n	800f6e2 <_dtoa_r+0x49a>
 800fd86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fd88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800fde4 <_dtoa_r+0xb9c>
 800fd8c:	b11b      	cbz	r3, 800fd96 <_dtoa_r+0xb4e>
 800fd8e:	f10a 0308 	add.w	r3, sl, #8
 800fd92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fd94:	6013      	str	r3, [r2, #0]
 800fd96:	4650      	mov	r0, sl
 800fd98:	b017      	add	sp, #92	@ 0x5c
 800fd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd9e:	9b07      	ldr	r3, [sp, #28]
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	f77f ae2e 	ble.w	800fa02 <_dtoa_r+0x7ba>
 800fda6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fda8:	9308      	str	r3, [sp, #32]
 800fdaa:	2001      	movs	r0, #1
 800fdac:	e64d      	b.n	800fa4a <_dtoa_r+0x802>
 800fdae:	f1bb 0f00 	cmp.w	fp, #0
 800fdb2:	f77f aed9 	ble.w	800fb68 <_dtoa_r+0x920>
 800fdb6:	4656      	mov	r6, sl
 800fdb8:	9802      	ldr	r0, [sp, #8]
 800fdba:	4621      	mov	r1, r4
 800fdbc:	f7ff f9ba 	bl	800f134 <quorem>
 800fdc0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800fdc4:	f806 3b01 	strb.w	r3, [r6], #1
 800fdc8:	eba6 020a 	sub.w	r2, r6, sl
 800fdcc:	4593      	cmp	fp, r2
 800fdce:	ddb4      	ble.n	800fd3a <_dtoa_r+0xaf2>
 800fdd0:	9902      	ldr	r1, [sp, #8]
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	220a      	movs	r2, #10
 800fdd6:	4648      	mov	r0, r9
 800fdd8:	f000 f968 	bl	80100ac <__multadd>
 800fddc:	9002      	str	r0, [sp, #8]
 800fdde:	e7eb      	b.n	800fdb8 <_dtoa_r+0xb70>
 800fde0:	08014c3d 	.word	0x08014c3d
 800fde4:	08014bc1 	.word	0x08014bc1

0800fde8 <_free_r>:
 800fde8:	b538      	push	{r3, r4, r5, lr}
 800fdea:	4605      	mov	r5, r0
 800fdec:	2900      	cmp	r1, #0
 800fdee:	d041      	beq.n	800fe74 <_free_r+0x8c>
 800fdf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdf4:	1f0c      	subs	r4, r1, #4
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	bfb8      	it	lt
 800fdfa:	18e4      	addlt	r4, r4, r3
 800fdfc:	f000 f8e8 	bl	800ffd0 <__malloc_lock>
 800fe00:	4a1d      	ldr	r2, [pc, #116]	@ (800fe78 <_free_r+0x90>)
 800fe02:	6813      	ldr	r3, [r2, #0]
 800fe04:	b933      	cbnz	r3, 800fe14 <_free_r+0x2c>
 800fe06:	6063      	str	r3, [r4, #4]
 800fe08:	6014      	str	r4, [r2, #0]
 800fe0a:	4628      	mov	r0, r5
 800fe0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe10:	f000 b8e4 	b.w	800ffdc <__malloc_unlock>
 800fe14:	42a3      	cmp	r3, r4
 800fe16:	d908      	bls.n	800fe2a <_free_r+0x42>
 800fe18:	6820      	ldr	r0, [r4, #0]
 800fe1a:	1821      	adds	r1, r4, r0
 800fe1c:	428b      	cmp	r3, r1
 800fe1e:	bf01      	itttt	eq
 800fe20:	6819      	ldreq	r1, [r3, #0]
 800fe22:	685b      	ldreq	r3, [r3, #4]
 800fe24:	1809      	addeq	r1, r1, r0
 800fe26:	6021      	streq	r1, [r4, #0]
 800fe28:	e7ed      	b.n	800fe06 <_free_r+0x1e>
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	b10b      	cbz	r3, 800fe34 <_free_r+0x4c>
 800fe30:	42a3      	cmp	r3, r4
 800fe32:	d9fa      	bls.n	800fe2a <_free_r+0x42>
 800fe34:	6811      	ldr	r1, [r2, #0]
 800fe36:	1850      	adds	r0, r2, r1
 800fe38:	42a0      	cmp	r0, r4
 800fe3a:	d10b      	bne.n	800fe54 <_free_r+0x6c>
 800fe3c:	6820      	ldr	r0, [r4, #0]
 800fe3e:	4401      	add	r1, r0
 800fe40:	1850      	adds	r0, r2, r1
 800fe42:	4283      	cmp	r3, r0
 800fe44:	6011      	str	r1, [r2, #0]
 800fe46:	d1e0      	bne.n	800fe0a <_free_r+0x22>
 800fe48:	6818      	ldr	r0, [r3, #0]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	6053      	str	r3, [r2, #4]
 800fe4e:	4408      	add	r0, r1
 800fe50:	6010      	str	r0, [r2, #0]
 800fe52:	e7da      	b.n	800fe0a <_free_r+0x22>
 800fe54:	d902      	bls.n	800fe5c <_free_r+0x74>
 800fe56:	230c      	movs	r3, #12
 800fe58:	602b      	str	r3, [r5, #0]
 800fe5a:	e7d6      	b.n	800fe0a <_free_r+0x22>
 800fe5c:	6820      	ldr	r0, [r4, #0]
 800fe5e:	1821      	adds	r1, r4, r0
 800fe60:	428b      	cmp	r3, r1
 800fe62:	bf04      	itt	eq
 800fe64:	6819      	ldreq	r1, [r3, #0]
 800fe66:	685b      	ldreq	r3, [r3, #4]
 800fe68:	6063      	str	r3, [r4, #4]
 800fe6a:	bf04      	itt	eq
 800fe6c:	1809      	addeq	r1, r1, r0
 800fe6e:	6021      	streq	r1, [r4, #0]
 800fe70:	6054      	str	r4, [r2, #4]
 800fe72:	e7ca      	b.n	800fe0a <_free_r+0x22>
 800fe74:	bd38      	pop	{r3, r4, r5, pc}
 800fe76:	bf00      	nop
 800fe78:	200025f8 	.word	0x200025f8

0800fe7c <malloc>:
 800fe7c:	4b02      	ldr	r3, [pc, #8]	@ (800fe88 <malloc+0xc>)
 800fe7e:	4601      	mov	r1, r0
 800fe80:	6818      	ldr	r0, [r3, #0]
 800fe82:	f000 b825 	b.w	800fed0 <_malloc_r>
 800fe86:	bf00      	nop
 800fe88:	20000110 	.word	0x20000110

0800fe8c <sbrk_aligned>:
 800fe8c:	b570      	push	{r4, r5, r6, lr}
 800fe8e:	4e0f      	ldr	r6, [pc, #60]	@ (800fecc <sbrk_aligned+0x40>)
 800fe90:	460c      	mov	r4, r1
 800fe92:	6831      	ldr	r1, [r6, #0]
 800fe94:	4605      	mov	r5, r0
 800fe96:	b911      	cbnz	r1, 800fe9e <sbrk_aligned+0x12>
 800fe98:	f001 ffda 	bl	8011e50 <_sbrk_r>
 800fe9c:	6030      	str	r0, [r6, #0]
 800fe9e:	4621      	mov	r1, r4
 800fea0:	4628      	mov	r0, r5
 800fea2:	f001 ffd5 	bl	8011e50 <_sbrk_r>
 800fea6:	1c43      	adds	r3, r0, #1
 800fea8:	d103      	bne.n	800feb2 <sbrk_aligned+0x26>
 800feaa:	f04f 34ff 	mov.w	r4, #4294967295
 800feae:	4620      	mov	r0, r4
 800feb0:	bd70      	pop	{r4, r5, r6, pc}
 800feb2:	1cc4      	adds	r4, r0, #3
 800feb4:	f024 0403 	bic.w	r4, r4, #3
 800feb8:	42a0      	cmp	r0, r4
 800feba:	d0f8      	beq.n	800feae <sbrk_aligned+0x22>
 800febc:	1a21      	subs	r1, r4, r0
 800febe:	4628      	mov	r0, r5
 800fec0:	f001 ffc6 	bl	8011e50 <_sbrk_r>
 800fec4:	3001      	adds	r0, #1
 800fec6:	d1f2      	bne.n	800feae <sbrk_aligned+0x22>
 800fec8:	e7ef      	b.n	800feaa <sbrk_aligned+0x1e>
 800feca:	bf00      	nop
 800fecc:	200025f4 	.word	0x200025f4

0800fed0 <_malloc_r>:
 800fed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fed4:	1ccd      	adds	r5, r1, #3
 800fed6:	f025 0503 	bic.w	r5, r5, #3
 800feda:	3508      	adds	r5, #8
 800fedc:	2d0c      	cmp	r5, #12
 800fede:	bf38      	it	cc
 800fee0:	250c      	movcc	r5, #12
 800fee2:	2d00      	cmp	r5, #0
 800fee4:	4606      	mov	r6, r0
 800fee6:	db01      	blt.n	800feec <_malloc_r+0x1c>
 800fee8:	42a9      	cmp	r1, r5
 800feea:	d904      	bls.n	800fef6 <_malloc_r+0x26>
 800feec:	230c      	movs	r3, #12
 800feee:	6033      	str	r3, [r6, #0]
 800fef0:	2000      	movs	r0, #0
 800fef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fef6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ffcc <_malloc_r+0xfc>
 800fefa:	f000 f869 	bl	800ffd0 <__malloc_lock>
 800fefe:	f8d8 3000 	ldr.w	r3, [r8]
 800ff02:	461c      	mov	r4, r3
 800ff04:	bb44      	cbnz	r4, 800ff58 <_malloc_r+0x88>
 800ff06:	4629      	mov	r1, r5
 800ff08:	4630      	mov	r0, r6
 800ff0a:	f7ff ffbf 	bl	800fe8c <sbrk_aligned>
 800ff0e:	1c43      	adds	r3, r0, #1
 800ff10:	4604      	mov	r4, r0
 800ff12:	d158      	bne.n	800ffc6 <_malloc_r+0xf6>
 800ff14:	f8d8 4000 	ldr.w	r4, [r8]
 800ff18:	4627      	mov	r7, r4
 800ff1a:	2f00      	cmp	r7, #0
 800ff1c:	d143      	bne.n	800ffa6 <_malloc_r+0xd6>
 800ff1e:	2c00      	cmp	r4, #0
 800ff20:	d04b      	beq.n	800ffba <_malloc_r+0xea>
 800ff22:	6823      	ldr	r3, [r4, #0]
 800ff24:	4639      	mov	r1, r7
 800ff26:	4630      	mov	r0, r6
 800ff28:	eb04 0903 	add.w	r9, r4, r3
 800ff2c:	f001 ff90 	bl	8011e50 <_sbrk_r>
 800ff30:	4581      	cmp	r9, r0
 800ff32:	d142      	bne.n	800ffba <_malloc_r+0xea>
 800ff34:	6821      	ldr	r1, [r4, #0]
 800ff36:	1a6d      	subs	r5, r5, r1
 800ff38:	4629      	mov	r1, r5
 800ff3a:	4630      	mov	r0, r6
 800ff3c:	f7ff ffa6 	bl	800fe8c <sbrk_aligned>
 800ff40:	3001      	adds	r0, #1
 800ff42:	d03a      	beq.n	800ffba <_malloc_r+0xea>
 800ff44:	6823      	ldr	r3, [r4, #0]
 800ff46:	442b      	add	r3, r5
 800ff48:	6023      	str	r3, [r4, #0]
 800ff4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ff4e:	685a      	ldr	r2, [r3, #4]
 800ff50:	bb62      	cbnz	r2, 800ffac <_malloc_r+0xdc>
 800ff52:	f8c8 7000 	str.w	r7, [r8]
 800ff56:	e00f      	b.n	800ff78 <_malloc_r+0xa8>
 800ff58:	6822      	ldr	r2, [r4, #0]
 800ff5a:	1b52      	subs	r2, r2, r5
 800ff5c:	d420      	bmi.n	800ffa0 <_malloc_r+0xd0>
 800ff5e:	2a0b      	cmp	r2, #11
 800ff60:	d917      	bls.n	800ff92 <_malloc_r+0xc2>
 800ff62:	1961      	adds	r1, r4, r5
 800ff64:	42a3      	cmp	r3, r4
 800ff66:	6025      	str	r5, [r4, #0]
 800ff68:	bf18      	it	ne
 800ff6a:	6059      	strne	r1, [r3, #4]
 800ff6c:	6863      	ldr	r3, [r4, #4]
 800ff6e:	bf08      	it	eq
 800ff70:	f8c8 1000 	streq.w	r1, [r8]
 800ff74:	5162      	str	r2, [r4, r5]
 800ff76:	604b      	str	r3, [r1, #4]
 800ff78:	4630      	mov	r0, r6
 800ff7a:	f000 f82f 	bl	800ffdc <__malloc_unlock>
 800ff7e:	f104 000b 	add.w	r0, r4, #11
 800ff82:	1d23      	adds	r3, r4, #4
 800ff84:	f020 0007 	bic.w	r0, r0, #7
 800ff88:	1ac2      	subs	r2, r0, r3
 800ff8a:	bf1c      	itt	ne
 800ff8c:	1a1b      	subne	r3, r3, r0
 800ff8e:	50a3      	strne	r3, [r4, r2]
 800ff90:	e7af      	b.n	800fef2 <_malloc_r+0x22>
 800ff92:	6862      	ldr	r2, [r4, #4]
 800ff94:	42a3      	cmp	r3, r4
 800ff96:	bf0c      	ite	eq
 800ff98:	f8c8 2000 	streq.w	r2, [r8]
 800ff9c:	605a      	strne	r2, [r3, #4]
 800ff9e:	e7eb      	b.n	800ff78 <_malloc_r+0xa8>
 800ffa0:	4623      	mov	r3, r4
 800ffa2:	6864      	ldr	r4, [r4, #4]
 800ffa4:	e7ae      	b.n	800ff04 <_malloc_r+0x34>
 800ffa6:	463c      	mov	r4, r7
 800ffa8:	687f      	ldr	r7, [r7, #4]
 800ffaa:	e7b6      	b.n	800ff1a <_malloc_r+0x4a>
 800ffac:	461a      	mov	r2, r3
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	42a3      	cmp	r3, r4
 800ffb2:	d1fb      	bne.n	800ffac <_malloc_r+0xdc>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	6053      	str	r3, [r2, #4]
 800ffb8:	e7de      	b.n	800ff78 <_malloc_r+0xa8>
 800ffba:	230c      	movs	r3, #12
 800ffbc:	6033      	str	r3, [r6, #0]
 800ffbe:	4630      	mov	r0, r6
 800ffc0:	f000 f80c 	bl	800ffdc <__malloc_unlock>
 800ffc4:	e794      	b.n	800fef0 <_malloc_r+0x20>
 800ffc6:	6005      	str	r5, [r0, #0]
 800ffc8:	e7d6      	b.n	800ff78 <_malloc_r+0xa8>
 800ffca:	bf00      	nop
 800ffcc:	200025f8 	.word	0x200025f8

0800ffd0 <__malloc_lock>:
 800ffd0:	4801      	ldr	r0, [pc, #4]	@ (800ffd8 <__malloc_lock+0x8>)
 800ffd2:	f7ff b8a6 	b.w	800f122 <__retarget_lock_acquire_recursive>
 800ffd6:	bf00      	nop
 800ffd8:	200025f0 	.word	0x200025f0

0800ffdc <__malloc_unlock>:
 800ffdc:	4801      	ldr	r0, [pc, #4]	@ (800ffe4 <__malloc_unlock+0x8>)
 800ffde:	f7ff b8a1 	b.w	800f124 <__retarget_lock_release_recursive>
 800ffe2:	bf00      	nop
 800ffe4:	200025f0 	.word	0x200025f0

0800ffe8 <_Balloc>:
 800ffe8:	b570      	push	{r4, r5, r6, lr}
 800ffea:	69c6      	ldr	r6, [r0, #28]
 800ffec:	4604      	mov	r4, r0
 800ffee:	460d      	mov	r5, r1
 800fff0:	b976      	cbnz	r6, 8010010 <_Balloc+0x28>
 800fff2:	2010      	movs	r0, #16
 800fff4:	f7ff ff42 	bl	800fe7c <malloc>
 800fff8:	4602      	mov	r2, r0
 800fffa:	61e0      	str	r0, [r4, #28]
 800fffc:	b920      	cbnz	r0, 8010008 <_Balloc+0x20>
 800fffe:	4b18      	ldr	r3, [pc, #96]	@ (8010060 <_Balloc+0x78>)
 8010000:	4818      	ldr	r0, [pc, #96]	@ (8010064 <_Balloc+0x7c>)
 8010002:	216b      	movs	r1, #107	@ 0x6b
 8010004:	f001 ff4c 	bl	8011ea0 <__assert_func>
 8010008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801000c:	6006      	str	r6, [r0, #0]
 801000e:	60c6      	str	r6, [r0, #12]
 8010010:	69e6      	ldr	r6, [r4, #28]
 8010012:	68f3      	ldr	r3, [r6, #12]
 8010014:	b183      	cbz	r3, 8010038 <_Balloc+0x50>
 8010016:	69e3      	ldr	r3, [r4, #28]
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801001e:	b9b8      	cbnz	r0, 8010050 <_Balloc+0x68>
 8010020:	2101      	movs	r1, #1
 8010022:	fa01 f605 	lsl.w	r6, r1, r5
 8010026:	1d72      	adds	r2, r6, #5
 8010028:	0092      	lsls	r2, r2, #2
 801002a:	4620      	mov	r0, r4
 801002c:	f001 ff56 	bl	8011edc <_calloc_r>
 8010030:	b160      	cbz	r0, 801004c <_Balloc+0x64>
 8010032:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010036:	e00e      	b.n	8010056 <_Balloc+0x6e>
 8010038:	2221      	movs	r2, #33	@ 0x21
 801003a:	2104      	movs	r1, #4
 801003c:	4620      	mov	r0, r4
 801003e:	f001 ff4d 	bl	8011edc <_calloc_r>
 8010042:	69e3      	ldr	r3, [r4, #28]
 8010044:	60f0      	str	r0, [r6, #12]
 8010046:	68db      	ldr	r3, [r3, #12]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d1e4      	bne.n	8010016 <_Balloc+0x2e>
 801004c:	2000      	movs	r0, #0
 801004e:	bd70      	pop	{r4, r5, r6, pc}
 8010050:	6802      	ldr	r2, [r0, #0]
 8010052:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010056:	2300      	movs	r3, #0
 8010058:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801005c:	e7f7      	b.n	801004e <_Balloc+0x66>
 801005e:	bf00      	nop
 8010060:	08014bce 	.word	0x08014bce
 8010064:	08014c4e 	.word	0x08014c4e

08010068 <_Bfree>:
 8010068:	b570      	push	{r4, r5, r6, lr}
 801006a:	69c6      	ldr	r6, [r0, #28]
 801006c:	4605      	mov	r5, r0
 801006e:	460c      	mov	r4, r1
 8010070:	b976      	cbnz	r6, 8010090 <_Bfree+0x28>
 8010072:	2010      	movs	r0, #16
 8010074:	f7ff ff02 	bl	800fe7c <malloc>
 8010078:	4602      	mov	r2, r0
 801007a:	61e8      	str	r0, [r5, #28]
 801007c:	b920      	cbnz	r0, 8010088 <_Bfree+0x20>
 801007e:	4b09      	ldr	r3, [pc, #36]	@ (80100a4 <_Bfree+0x3c>)
 8010080:	4809      	ldr	r0, [pc, #36]	@ (80100a8 <_Bfree+0x40>)
 8010082:	218f      	movs	r1, #143	@ 0x8f
 8010084:	f001 ff0c 	bl	8011ea0 <__assert_func>
 8010088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801008c:	6006      	str	r6, [r0, #0]
 801008e:	60c6      	str	r6, [r0, #12]
 8010090:	b13c      	cbz	r4, 80100a2 <_Bfree+0x3a>
 8010092:	69eb      	ldr	r3, [r5, #28]
 8010094:	6862      	ldr	r2, [r4, #4]
 8010096:	68db      	ldr	r3, [r3, #12]
 8010098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801009c:	6021      	str	r1, [r4, #0]
 801009e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80100a2:	bd70      	pop	{r4, r5, r6, pc}
 80100a4:	08014bce 	.word	0x08014bce
 80100a8:	08014c4e 	.word	0x08014c4e

080100ac <__multadd>:
 80100ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100b0:	690d      	ldr	r5, [r1, #16]
 80100b2:	4607      	mov	r7, r0
 80100b4:	460c      	mov	r4, r1
 80100b6:	461e      	mov	r6, r3
 80100b8:	f101 0c14 	add.w	ip, r1, #20
 80100bc:	2000      	movs	r0, #0
 80100be:	f8dc 3000 	ldr.w	r3, [ip]
 80100c2:	b299      	uxth	r1, r3
 80100c4:	fb02 6101 	mla	r1, r2, r1, r6
 80100c8:	0c1e      	lsrs	r6, r3, #16
 80100ca:	0c0b      	lsrs	r3, r1, #16
 80100cc:	fb02 3306 	mla	r3, r2, r6, r3
 80100d0:	b289      	uxth	r1, r1
 80100d2:	3001      	adds	r0, #1
 80100d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80100d8:	4285      	cmp	r5, r0
 80100da:	f84c 1b04 	str.w	r1, [ip], #4
 80100de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80100e2:	dcec      	bgt.n	80100be <__multadd+0x12>
 80100e4:	b30e      	cbz	r6, 801012a <__multadd+0x7e>
 80100e6:	68a3      	ldr	r3, [r4, #8]
 80100e8:	42ab      	cmp	r3, r5
 80100ea:	dc19      	bgt.n	8010120 <__multadd+0x74>
 80100ec:	6861      	ldr	r1, [r4, #4]
 80100ee:	4638      	mov	r0, r7
 80100f0:	3101      	adds	r1, #1
 80100f2:	f7ff ff79 	bl	800ffe8 <_Balloc>
 80100f6:	4680      	mov	r8, r0
 80100f8:	b928      	cbnz	r0, 8010106 <__multadd+0x5a>
 80100fa:	4602      	mov	r2, r0
 80100fc:	4b0c      	ldr	r3, [pc, #48]	@ (8010130 <__multadd+0x84>)
 80100fe:	480d      	ldr	r0, [pc, #52]	@ (8010134 <__multadd+0x88>)
 8010100:	21ba      	movs	r1, #186	@ 0xba
 8010102:	f001 fecd 	bl	8011ea0 <__assert_func>
 8010106:	6922      	ldr	r2, [r4, #16]
 8010108:	3202      	adds	r2, #2
 801010a:	f104 010c 	add.w	r1, r4, #12
 801010e:	0092      	lsls	r2, r2, #2
 8010110:	300c      	adds	r0, #12
 8010112:	f001 fead 	bl	8011e70 <memcpy>
 8010116:	4621      	mov	r1, r4
 8010118:	4638      	mov	r0, r7
 801011a:	f7ff ffa5 	bl	8010068 <_Bfree>
 801011e:	4644      	mov	r4, r8
 8010120:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010124:	3501      	adds	r5, #1
 8010126:	615e      	str	r6, [r3, #20]
 8010128:	6125      	str	r5, [r4, #16]
 801012a:	4620      	mov	r0, r4
 801012c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010130:	08014c3d 	.word	0x08014c3d
 8010134:	08014c4e 	.word	0x08014c4e

08010138 <__s2b>:
 8010138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801013c:	460c      	mov	r4, r1
 801013e:	4615      	mov	r5, r2
 8010140:	461f      	mov	r7, r3
 8010142:	2209      	movs	r2, #9
 8010144:	3308      	adds	r3, #8
 8010146:	4606      	mov	r6, r0
 8010148:	fb93 f3f2 	sdiv	r3, r3, r2
 801014c:	2100      	movs	r1, #0
 801014e:	2201      	movs	r2, #1
 8010150:	429a      	cmp	r2, r3
 8010152:	db09      	blt.n	8010168 <__s2b+0x30>
 8010154:	4630      	mov	r0, r6
 8010156:	f7ff ff47 	bl	800ffe8 <_Balloc>
 801015a:	b940      	cbnz	r0, 801016e <__s2b+0x36>
 801015c:	4602      	mov	r2, r0
 801015e:	4b19      	ldr	r3, [pc, #100]	@ (80101c4 <__s2b+0x8c>)
 8010160:	4819      	ldr	r0, [pc, #100]	@ (80101c8 <__s2b+0x90>)
 8010162:	21d3      	movs	r1, #211	@ 0xd3
 8010164:	f001 fe9c 	bl	8011ea0 <__assert_func>
 8010168:	0052      	lsls	r2, r2, #1
 801016a:	3101      	adds	r1, #1
 801016c:	e7f0      	b.n	8010150 <__s2b+0x18>
 801016e:	9b08      	ldr	r3, [sp, #32]
 8010170:	6143      	str	r3, [r0, #20]
 8010172:	2d09      	cmp	r5, #9
 8010174:	f04f 0301 	mov.w	r3, #1
 8010178:	6103      	str	r3, [r0, #16]
 801017a:	dd16      	ble.n	80101aa <__s2b+0x72>
 801017c:	f104 0909 	add.w	r9, r4, #9
 8010180:	46c8      	mov	r8, r9
 8010182:	442c      	add	r4, r5
 8010184:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010188:	4601      	mov	r1, r0
 801018a:	3b30      	subs	r3, #48	@ 0x30
 801018c:	220a      	movs	r2, #10
 801018e:	4630      	mov	r0, r6
 8010190:	f7ff ff8c 	bl	80100ac <__multadd>
 8010194:	45a0      	cmp	r8, r4
 8010196:	d1f5      	bne.n	8010184 <__s2b+0x4c>
 8010198:	f1a5 0408 	sub.w	r4, r5, #8
 801019c:	444c      	add	r4, r9
 801019e:	1b2d      	subs	r5, r5, r4
 80101a0:	1963      	adds	r3, r4, r5
 80101a2:	42bb      	cmp	r3, r7
 80101a4:	db04      	blt.n	80101b0 <__s2b+0x78>
 80101a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101aa:	340a      	adds	r4, #10
 80101ac:	2509      	movs	r5, #9
 80101ae:	e7f6      	b.n	801019e <__s2b+0x66>
 80101b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80101b4:	4601      	mov	r1, r0
 80101b6:	3b30      	subs	r3, #48	@ 0x30
 80101b8:	220a      	movs	r2, #10
 80101ba:	4630      	mov	r0, r6
 80101bc:	f7ff ff76 	bl	80100ac <__multadd>
 80101c0:	e7ee      	b.n	80101a0 <__s2b+0x68>
 80101c2:	bf00      	nop
 80101c4:	08014c3d 	.word	0x08014c3d
 80101c8:	08014c4e 	.word	0x08014c4e

080101cc <__hi0bits>:
 80101cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80101d0:	4603      	mov	r3, r0
 80101d2:	bf36      	itet	cc
 80101d4:	0403      	lslcc	r3, r0, #16
 80101d6:	2000      	movcs	r0, #0
 80101d8:	2010      	movcc	r0, #16
 80101da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80101de:	bf3c      	itt	cc
 80101e0:	021b      	lslcc	r3, r3, #8
 80101e2:	3008      	addcc	r0, #8
 80101e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80101e8:	bf3c      	itt	cc
 80101ea:	011b      	lslcc	r3, r3, #4
 80101ec:	3004      	addcc	r0, #4
 80101ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101f2:	bf3c      	itt	cc
 80101f4:	009b      	lslcc	r3, r3, #2
 80101f6:	3002      	addcc	r0, #2
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	db05      	blt.n	8010208 <__hi0bits+0x3c>
 80101fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010200:	f100 0001 	add.w	r0, r0, #1
 8010204:	bf08      	it	eq
 8010206:	2020      	moveq	r0, #32
 8010208:	4770      	bx	lr

0801020a <__lo0bits>:
 801020a:	6803      	ldr	r3, [r0, #0]
 801020c:	4602      	mov	r2, r0
 801020e:	f013 0007 	ands.w	r0, r3, #7
 8010212:	d00b      	beq.n	801022c <__lo0bits+0x22>
 8010214:	07d9      	lsls	r1, r3, #31
 8010216:	d421      	bmi.n	801025c <__lo0bits+0x52>
 8010218:	0798      	lsls	r0, r3, #30
 801021a:	bf49      	itett	mi
 801021c:	085b      	lsrmi	r3, r3, #1
 801021e:	089b      	lsrpl	r3, r3, #2
 8010220:	2001      	movmi	r0, #1
 8010222:	6013      	strmi	r3, [r2, #0]
 8010224:	bf5c      	itt	pl
 8010226:	6013      	strpl	r3, [r2, #0]
 8010228:	2002      	movpl	r0, #2
 801022a:	4770      	bx	lr
 801022c:	b299      	uxth	r1, r3
 801022e:	b909      	cbnz	r1, 8010234 <__lo0bits+0x2a>
 8010230:	0c1b      	lsrs	r3, r3, #16
 8010232:	2010      	movs	r0, #16
 8010234:	b2d9      	uxtb	r1, r3
 8010236:	b909      	cbnz	r1, 801023c <__lo0bits+0x32>
 8010238:	3008      	adds	r0, #8
 801023a:	0a1b      	lsrs	r3, r3, #8
 801023c:	0719      	lsls	r1, r3, #28
 801023e:	bf04      	itt	eq
 8010240:	091b      	lsreq	r3, r3, #4
 8010242:	3004      	addeq	r0, #4
 8010244:	0799      	lsls	r1, r3, #30
 8010246:	bf04      	itt	eq
 8010248:	089b      	lsreq	r3, r3, #2
 801024a:	3002      	addeq	r0, #2
 801024c:	07d9      	lsls	r1, r3, #31
 801024e:	d403      	bmi.n	8010258 <__lo0bits+0x4e>
 8010250:	085b      	lsrs	r3, r3, #1
 8010252:	f100 0001 	add.w	r0, r0, #1
 8010256:	d003      	beq.n	8010260 <__lo0bits+0x56>
 8010258:	6013      	str	r3, [r2, #0]
 801025a:	4770      	bx	lr
 801025c:	2000      	movs	r0, #0
 801025e:	4770      	bx	lr
 8010260:	2020      	movs	r0, #32
 8010262:	4770      	bx	lr

08010264 <__i2b>:
 8010264:	b510      	push	{r4, lr}
 8010266:	460c      	mov	r4, r1
 8010268:	2101      	movs	r1, #1
 801026a:	f7ff febd 	bl	800ffe8 <_Balloc>
 801026e:	4602      	mov	r2, r0
 8010270:	b928      	cbnz	r0, 801027e <__i2b+0x1a>
 8010272:	4b05      	ldr	r3, [pc, #20]	@ (8010288 <__i2b+0x24>)
 8010274:	4805      	ldr	r0, [pc, #20]	@ (801028c <__i2b+0x28>)
 8010276:	f240 1145 	movw	r1, #325	@ 0x145
 801027a:	f001 fe11 	bl	8011ea0 <__assert_func>
 801027e:	2301      	movs	r3, #1
 8010280:	6144      	str	r4, [r0, #20]
 8010282:	6103      	str	r3, [r0, #16]
 8010284:	bd10      	pop	{r4, pc}
 8010286:	bf00      	nop
 8010288:	08014c3d 	.word	0x08014c3d
 801028c:	08014c4e 	.word	0x08014c4e

08010290 <__multiply>:
 8010290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010294:	4617      	mov	r7, r2
 8010296:	690a      	ldr	r2, [r1, #16]
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	429a      	cmp	r2, r3
 801029c:	bfa8      	it	ge
 801029e:	463b      	movge	r3, r7
 80102a0:	4689      	mov	r9, r1
 80102a2:	bfa4      	itt	ge
 80102a4:	460f      	movge	r7, r1
 80102a6:	4699      	movge	r9, r3
 80102a8:	693d      	ldr	r5, [r7, #16]
 80102aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	6879      	ldr	r1, [r7, #4]
 80102b2:	eb05 060a 	add.w	r6, r5, sl
 80102b6:	42b3      	cmp	r3, r6
 80102b8:	b085      	sub	sp, #20
 80102ba:	bfb8      	it	lt
 80102bc:	3101      	addlt	r1, #1
 80102be:	f7ff fe93 	bl	800ffe8 <_Balloc>
 80102c2:	b930      	cbnz	r0, 80102d2 <__multiply+0x42>
 80102c4:	4602      	mov	r2, r0
 80102c6:	4b41      	ldr	r3, [pc, #260]	@ (80103cc <__multiply+0x13c>)
 80102c8:	4841      	ldr	r0, [pc, #260]	@ (80103d0 <__multiply+0x140>)
 80102ca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80102ce:	f001 fde7 	bl	8011ea0 <__assert_func>
 80102d2:	f100 0414 	add.w	r4, r0, #20
 80102d6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80102da:	4623      	mov	r3, r4
 80102dc:	2200      	movs	r2, #0
 80102de:	4573      	cmp	r3, lr
 80102e0:	d320      	bcc.n	8010324 <__multiply+0x94>
 80102e2:	f107 0814 	add.w	r8, r7, #20
 80102e6:	f109 0114 	add.w	r1, r9, #20
 80102ea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80102ee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80102f2:	9302      	str	r3, [sp, #8]
 80102f4:	1beb      	subs	r3, r5, r7
 80102f6:	3b15      	subs	r3, #21
 80102f8:	f023 0303 	bic.w	r3, r3, #3
 80102fc:	3304      	adds	r3, #4
 80102fe:	3715      	adds	r7, #21
 8010300:	42bd      	cmp	r5, r7
 8010302:	bf38      	it	cc
 8010304:	2304      	movcc	r3, #4
 8010306:	9301      	str	r3, [sp, #4]
 8010308:	9b02      	ldr	r3, [sp, #8]
 801030a:	9103      	str	r1, [sp, #12]
 801030c:	428b      	cmp	r3, r1
 801030e:	d80c      	bhi.n	801032a <__multiply+0x9a>
 8010310:	2e00      	cmp	r6, #0
 8010312:	dd03      	ble.n	801031c <__multiply+0x8c>
 8010314:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010318:	2b00      	cmp	r3, #0
 801031a:	d055      	beq.n	80103c8 <__multiply+0x138>
 801031c:	6106      	str	r6, [r0, #16]
 801031e:	b005      	add	sp, #20
 8010320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010324:	f843 2b04 	str.w	r2, [r3], #4
 8010328:	e7d9      	b.n	80102de <__multiply+0x4e>
 801032a:	f8b1 a000 	ldrh.w	sl, [r1]
 801032e:	f1ba 0f00 	cmp.w	sl, #0
 8010332:	d01f      	beq.n	8010374 <__multiply+0xe4>
 8010334:	46c4      	mov	ip, r8
 8010336:	46a1      	mov	r9, r4
 8010338:	2700      	movs	r7, #0
 801033a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801033e:	f8d9 3000 	ldr.w	r3, [r9]
 8010342:	fa1f fb82 	uxth.w	fp, r2
 8010346:	b29b      	uxth	r3, r3
 8010348:	fb0a 330b 	mla	r3, sl, fp, r3
 801034c:	443b      	add	r3, r7
 801034e:	f8d9 7000 	ldr.w	r7, [r9]
 8010352:	0c12      	lsrs	r2, r2, #16
 8010354:	0c3f      	lsrs	r7, r7, #16
 8010356:	fb0a 7202 	mla	r2, sl, r2, r7
 801035a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801035e:	b29b      	uxth	r3, r3
 8010360:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010364:	4565      	cmp	r5, ip
 8010366:	f849 3b04 	str.w	r3, [r9], #4
 801036a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801036e:	d8e4      	bhi.n	801033a <__multiply+0xaa>
 8010370:	9b01      	ldr	r3, [sp, #4]
 8010372:	50e7      	str	r7, [r4, r3]
 8010374:	9b03      	ldr	r3, [sp, #12]
 8010376:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801037a:	3104      	adds	r1, #4
 801037c:	f1b9 0f00 	cmp.w	r9, #0
 8010380:	d020      	beq.n	80103c4 <__multiply+0x134>
 8010382:	6823      	ldr	r3, [r4, #0]
 8010384:	4647      	mov	r7, r8
 8010386:	46a4      	mov	ip, r4
 8010388:	f04f 0a00 	mov.w	sl, #0
 801038c:	f8b7 b000 	ldrh.w	fp, [r7]
 8010390:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010394:	fb09 220b 	mla	r2, r9, fp, r2
 8010398:	4452      	add	r2, sl
 801039a:	b29b      	uxth	r3, r3
 801039c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80103a0:	f84c 3b04 	str.w	r3, [ip], #4
 80103a4:	f857 3b04 	ldr.w	r3, [r7], #4
 80103a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80103ac:	f8bc 3000 	ldrh.w	r3, [ip]
 80103b0:	fb09 330a 	mla	r3, r9, sl, r3
 80103b4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80103b8:	42bd      	cmp	r5, r7
 80103ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80103be:	d8e5      	bhi.n	801038c <__multiply+0xfc>
 80103c0:	9a01      	ldr	r2, [sp, #4]
 80103c2:	50a3      	str	r3, [r4, r2]
 80103c4:	3404      	adds	r4, #4
 80103c6:	e79f      	b.n	8010308 <__multiply+0x78>
 80103c8:	3e01      	subs	r6, #1
 80103ca:	e7a1      	b.n	8010310 <__multiply+0x80>
 80103cc:	08014c3d 	.word	0x08014c3d
 80103d0:	08014c4e 	.word	0x08014c4e

080103d4 <__pow5mult>:
 80103d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103d8:	4615      	mov	r5, r2
 80103da:	f012 0203 	ands.w	r2, r2, #3
 80103de:	4607      	mov	r7, r0
 80103e0:	460e      	mov	r6, r1
 80103e2:	d007      	beq.n	80103f4 <__pow5mult+0x20>
 80103e4:	4c25      	ldr	r4, [pc, #148]	@ (801047c <__pow5mult+0xa8>)
 80103e6:	3a01      	subs	r2, #1
 80103e8:	2300      	movs	r3, #0
 80103ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80103ee:	f7ff fe5d 	bl	80100ac <__multadd>
 80103f2:	4606      	mov	r6, r0
 80103f4:	10ad      	asrs	r5, r5, #2
 80103f6:	d03d      	beq.n	8010474 <__pow5mult+0xa0>
 80103f8:	69fc      	ldr	r4, [r7, #28]
 80103fa:	b97c      	cbnz	r4, 801041c <__pow5mult+0x48>
 80103fc:	2010      	movs	r0, #16
 80103fe:	f7ff fd3d 	bl	800fe7c <malloc>
 8010402:	4602      	mov	r2, r0
 8010404:	61f8      	str	r0, [r7, #28]
 8010406:	b928      	cbnz	r0, 8010414 <__pow5mult+0x40>
 8010408:	4b1d      	ldr	r3, [pc, #116]	@ (8010480 <__pow5mult+0xac>)
 801040a:	481e      	ldr	r0, [pc, #120]	@ (8010484 <__pow5mult+0xb0>)
 801040c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010410:	f001 fd46 	bl	8011ea0 <__assert_func>
 8010414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010418:	6004      	str	r4, [r0, #0]
 801041a:	60c4      	str	r4, [r0, #12]
 801041c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010424:	b94c      	cbnz	r4, 801043a <__pow5mult+0x66>
 8010426:	f240 2171 	movw	r1, #625	@ 0x271
 801042a:	4638      	mov	r0, r7
 801042c:	f7ff ff1a 	bl	8010264 <__i2b>
 8010430:	2300      	movs	r3, #0
 8010432:	f8c8 0008 	str.w	r0, [r8, #8]
 8010436:	4604      	mov	r4, r0
 8010438:	6003      	str	r3, [r0, #0]
 801043a:	f04f 0900 	mov.w	r9, #0
 801043e:	07eb      	lsls	r3, r5, #31
 8010440:	d50a      	bpl.n	8010458 <__pow5mult+0x84>
 8010442:	4631      	mov	r1, r6
 8010444:	4622      	mov	r2, r4
 8010446:	4638      	mov	r0, r7
 8010448:	f7ff ff22 	bl	8010290 <__multiply>
 801044c:	4631      	mov	r1, r6
 801044e:	4680      	mov	r8, r0
 8010450:	4638      	mov	r0, r7
 8010452:	f7ff fe09 	bl	8010068 <_Bfree>
 8010456:	4646      	mov	r6, r8
 8010458:	106d      	asrs	r5, r5, #1
 801045a:	d00b      	beq.n	8010474 <__pow5mult+0xa0>
 801045c:	6820      	ldr	r0, [r4, #0]
 801045e:	b938      	cbnz	r0, 8010470 <__pow5mult+0x9c>
 8010460:	4622      	mov	r2, r4
 8010462:	4621      	mov	r1, r4
 8010464:	4638      	mov	r0, r7
 8010466:	f7ff ff13 	bl	8010290 <__multiply>
 801046a:	6020      	str	r0, [r4, #0]
 801046c:	f8c0 9000 	str.w	r9, [r0]
 8010470:	4604      	mov	r4, r0
 8010472:	e7e4      	b.n	801043e <__pow5mult+0x6a>
 8010474:	4630      	mov	r0, r6
 8010476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801047a:	bf00      	nop
 801047c:	08014d60 	.word	0x08014d60
 8010480:	08014bce 	.word	0x08014bce
 8010484:	08014c4e 	.word	0x08014c4e

08010488 <__lshift>:
 8010488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801048c:	460c      	mov	r4, r1
 801048e:	6849      	ldr	r1, [r1, #4]
 8010490:	6923      	ldr	r3, [r4, #16]
 8010492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010496:	68a3      	ldr	r3, [r4, #8]
 8010498:	4607      	mov	r7, r0
 801049a:	4691      	mov	r9, r2
 801049c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80104a0:	f108 0601 	add.w	r6, r8, #1
 80104a4:	42b3      	cmp	r3, r6
 80104a6:	db0b      	blt.n	80104c0 <__lshift+0x38>
 80104a8:	4638      	mov	r0, r7
 80104aa:	f7ff fd9d 	bl	800ffe8 <_Balloc>
 80104ae:	4605      	mov	r5, r0
 80104b0:	b948      	cbnz	r0, 80104c6 <__lshift+0x3e>
 80104b2:	4602      	mov	r2, r0
 80104b4:	4b28      	ldr	r3, [pc, #160]	@ (8010558 <__lshift+0xd0>)
 80104b6:	4829      	ldr	r0, [pc, #164]	@ (801055c <__lshift+0xd4>)
 80104b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80104bc:	f001 fcf0 	bl	8011ea0 <__assert_func>
 80104c0:	3101      	adds	r1, #1
 80104c2:	005b      	lsls	r3, r3, #1
 80104c4:	e7ee      	b.n	80104a4 <__lshift+0x1c>
 80104c6:	2300      	movs	r3, #0
 80104c8:	f100 0114 	add.w	r1, r0, #20
 80104cc:	f100 0210 	add.w	r2, r0, #16
 80104d0:	4618      	mov	r0, r3
 80104d2:	4553      	cmp	r3, sl
 80104d4:	db33      	blt.n	801053e <__lshift+0xb6>
 80104d6:	6920      	ldr	r0, [r4, #16]
 80104d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80104dc:	f104 0314 	add.w	r3, r4, #20
 80104e0:	f019 091f 	ands.w	r9, r9, #31
 80104e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80104e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80104ec:	d02b      	beq.n	8010546 <__lshift+0xbe>
 80104ee:	f1c9 0e20 	rsb	lr, r9, #32
 80104f2:	468a      	mov	sl, r1
 80104f4:	2200      	movs	r2, #0
 80104f6:	6818      	ldr	r0, [r3, #0]
 80104f8:	fa00 f009 	lsl.w	r0, r0, r9
 80104fc:	4310      	orrs	r0, r2
 80104fe:	f84a 0b04 	str.w	r0, [sl], #4
 8010502:	f853 2b04 	ldr.w	r2, [r3], #4
 8010506:	459c      	cmp	ip, r3
 8010508:	fa22 f20e 	lsr.w	r2, r2, lr
 801050c:	d8f3      	bhi.n	80104f6 <__lshift+0x6e>
 801050e:	ebac 0304 	sub.w	r3, ip, r4
 8010512:	3b15      	subs	r3, #21
 8010514:	f023 0303 	bic.w	r3, r3, #3
 8010518:	3304      	adds	r3, #4
 801051a:	f104 0015 	add.w	r0, r4, #21
 801051e:	4560      	cmp	r0, ip
 8010520:	bf88      	it	hi
 8010522:	2304      	movhi	r3, #4
 8010524:	50ca      	str	r2, [r1, r3]
 8010526:	b10a      	cbz	r2, 801052c <__lshift+0xa4>
 8010528:	f108 0602 	add.w	r6, r8, #2
 801052c:	3e01      	subs	r6, #1
 801052e:	4638      	mov	r0, r7
 8010530:	612e      	str	r6, [r5, #16]
 8010532:	4621      	mov	r1, r4
 8010534:	f7ff fd98 	bl	8010068 <_Bfree>
 8010538:	4628      	mov	r0, r5
 801053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801053e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010542:	3301      	adds	r3, #1
 8010544:	e7c5      	b.n	80104d2 <__lshift+0x4a>
 8010546:	3904      	subs	r1, #4
 8010548:	f853 2b04 	ldr.w	r2, [r3], #4
 801054c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010550:	459c      	cmp	ip, r3
 8010552:	d8f9      	bhi.n	8010548 <__lshift+0xc0>
 8010554:	e7ea      	b.n	801052c <__lshift+0xa4>
 8010556:	bf00      	nop
 8010558:	08014c3d 	.word	0x08014c3d
 801055c:	08014c4e 	.word	0x08014c4e

08010560 <__mcmp>:
 8010560:	690a      	ldr	r2, [r1, #16]
 8010562:	4603      	mov	r3, r0
 8010564:	6900      	ldr	r0, [r0, #16]
 8010566:	1a80      	subs	r0, r0, r2
 8010568:	b530      	push	{r4, r5, lr}
 801056a:	d10e      	bne.n	801058a <__mcmp+0x2a>
 801056c:	3314      	adds	r3, #20
 801056e:	3114      	adds	r1, #20
 8010570:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010574:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010578:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801057c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010580:	4295      	cmp	r5, r2
 8010582:	d003      	beq.n	801058c <__mcmp+0x2c>
 8010584:	d205      	bcs.n	8010592 <__mcmp+0x32>
 8010586:	f04f 30ff 	mov.w	r0, #4294967295
 801058a:	bd30      	pop	{r4, r5, pc}
 801058c:	42a3      	cmp	r3, r4
 801058e:	d3f3      	bcc.n	8010578 <__mcmp+0x18>
 8010590:	e7fb      	b.n	801058a <__mcmp+0x2a>
 8010592:	2001      	movs	r0, #1
 8010594:	e7f9      	b.n	801058a <__mcmp+0x2a>
	...

08010598 <__mdiff>:
 8010598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801059c:	4689      	mov	r9, r1
 801059e:	4606      	mov	r6, r0
 80105a0:	4611      	mov	r1, r2
 80105a2:	4648      	mov	r0, r9
 80105a4:	4614      	mov	r4, r2
 80105a6:	f7ff ffdb 	bl	8010560 <__mcmp>
 80105aa:	1e05      	subs	r5, r0, #0
 80105ac:	d112      	bne.n	80105d4 <__mdiff+0x3c>
 80105ae:	4629      	mov	r1, r5
 80105b0:	4630      	mov	r0, r6
 80105b2:	f7ff fd19 	bl	800ffe8 <_Balloc>
 80105b6:	4602      	mov	r2, r0
 80105b8:	b928      	cbnz	r0, 80105c6 <__mdiff+0x2e>
 80105ba:	4b3f      	ldr	r3, [pc, #252]	@ (80106b8 <__mdiff+0x120>)
 80105bc:	f240 2137 	movw	r1, #567	@ 0x237
 80105c0:	483e      	ldr	r0, [pc, #248]	@ (80106bc <__mdiff+0x124>)
 80105c2:	f001 fc6d 	bl	8011ea0 <__assert_func>
 80105c6:	2301      	movs	r3, #1
 80105c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80105cc:	4610      	mov	r0, r2
 80105ce:	b003      	add	sp, #12
 80105d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d4:	bfbc      	itt	lt
 80105d6:	464b      	movlt	r3, r9
 80105d8:	46a1      	movlt	r9, r4
 80105da:	4630      	mov	r0, r6
 80105dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80105e0:	bfba      	itte	lt
 80105e2:	461c      	movlt	r4, r3
 80105e4:	2501      	movlt	r5, #1
 80105e6:	2500      	movge	r5, #0
 80105e8:	f7ff fcfe 	bl	800ffe8 <_Balloc>
 80105ec:	4602      	mov	r2, r0
 80105ee:	b918      	cbnz	r0, 80105f8 <__mdiff+0x60>
 80105f0:	4b31      	ldr	r3, [pc, #196]	@ (80106b8 <__mdiff+0x120>)
 80105f2:	f240 2145 	movw	r1, #581	@ 0x245
 80105f6:	e7e3      	b.n	80105c0 <__mdiff+0x28>
 80105f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80105fc:	6926      	ldr	r6, [r4, #16]
 80105fe:	60c5      	str	r5, [r0, #12]
 8010600:	f109 0310 	add.w	r3, r9, #16
 8010604:	f109 0514 	add.w	r5, r9, #20
 8010608:	f104 0e14 	add.w	lr, r4, #20
 801060c:	f100 0b14 	add.w	fp, r0, #20
 8010610:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010614:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010618:	9301      	str	r3, [sp, #4]
 801061a:	46d9      	mov	r9, fp
 801061c:	f04f 0c00 	mov.w	ip, #0
 8010620:	9b01      	ldr	r3, [sp, #4]
 8010622:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010626:	f853 af04 	ldr.w	sl, [r3, #4]!
 801062a:	9301      	str	r3, [sp, #4]
 801062c:	fa1f f38a 	uxth.w	r3, sl
 8010630:	4619      	mov	r1, r3
 8010632:	b283      	uxth	r3, r0
 8010634:	1acb      	subs	r3, r1, r3
 8010636:	0c00      	lsrs	r0, r0, #16
 8010638:	4463      	add	r3, ip
 801063a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801063e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010642:	b29b      	uxth	r3, r3
 8010644:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010648:	4576      	cmp	r6, lr
 801064a:	f849 3b04 	str.w	r3, [r9], #4
 801064e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010652:	d8e5      	bhi.n	8010620 <__mdiff+0x88>
 8010654:	1b33      	subs	r3, r6, r4
 8010656:	3b15      	subs	r3, #21
 8010658:	f023 0303 	bic.w	r3, r3, #3
 801065c:	3415      	adds	r4, #21
 801065e:	3304      	adds	r3, #4
 8010660:	42a6      	cmp	r6, r4
 8010662:	bf38      	it	cc
 8010664:	2304      	movcc	r3, #4
 8010666:	441d      	add	r5, r3
 8010668:	445b      	add	r3, fp
 801066a:	461e      	mov	r6, r3
 801066c:	462c      	mov	r4, r5
 801066e:	4544      	cmp	r4, r8
 8010670:	d30e      	bcc.n	8010690 <__mdiff+0xf8>
 8010672:	f108 0103 	add.w	r1, r8, #3
 8010676:	1b49      	subs	r1, r1, r5
 8010678:	f021 0103 	bic.w	r1, r1, #3
 801067c:	3d03      	subs	r5, #3
 801067e:	45a8      	cmp	r8, r5
 8010680:	bf38      	it	cc
 8010682:	2100      	movcc	r1, #0
 8010684:	440b      	add	r3, r1
 8010686:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801068a:	b191      	cbz	r1, 80106b2 <__mdiff+0x11a>
 801068c:	6117      	str	r7, [r2, #16]
 801068e:	e79d      	b.n	80105cc <__mdiff+0x34>
 8010690:	f854 1b04 	ldr.w	r1, [r4], #4
 8010694:	46e6      	mov	lr, ip
 8010696:	0c08      	lsrs	r0, r1, #16
 8010698:	fa1c fc81 	uxtah	ip, ip, r1
 801069c:	4471      	add	r1, lr
 801069e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80106a2:	b289      	uxth	r1, r1
 80106a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80106a8:	f846 1b04 	str.w	r1, [r6], #4
 80106ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80106b0:	e7dd      	b.n	801066e <__mdiff+0xd6>
 80106b2:	3f01      	subs	r7, #1
 80106b4:	e7e7      	b.n	8010686 <__mdiff+0xee>
 80106b6:	bf00      	nop
 80106b8:	08014c3d 	.word	0x08014c3d
 80106bc:	08014c4e 	.word	0x08014c4e

080106c0 <__ulp>:
 80106c0:	b082      	sub	sp, #8
 80106c2:	ed8d 0b00 	vstr	d0, [sp]
 80106c6:	9a01      	ldr	r2, [sp, #4]
 80106c8:	4b0f      	ldr	r3, [pc, #60]	@ (8010708 <__ulp+0x48>)
 80106ca:	4013      	ands	r3, r2
 80106cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	dc08      	bgt.n	80106e6 <__ulp+0x26>
 80106d4:	425b      	negs	r3, r3
 80106d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80106da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80106de:	da04      	bge.n	80106ea <__ulp+0x2a>
 80106e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80106e4:	4113      	asrs	r3, r2
 80106e6:	2200      	movs	r2, #0
 80106e8:	e008      	b.n	80106fc <__ulp+0x3c>
 80106ea:	f1a2 0314 	sub.w	r3, r2, #20
 80106ee:	2b1e      	cmp	r3, #30
 80106f0:	bfda      	itte	le
 80106f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80106f6:	40da      	lsrle	r2, r3
 80106f8:	2201      	movgt	r2, #1
 80106fa:	2300      	movs	r3, #0
 80106fc:	4619      	mov	r1, r3
 80106fe:	4610      	mov	r0, r2
 8010700:	ec41 0b10 	vmov	d0, r0, r1
 8010704:	b002      	add	sp, #8
 8010706:	4770      	bx	lr
 8010708:	7ff00000 	.word	0x7ff00000

0801070c <__b2d>:
 801070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010710:	6906      	ldr	r6, [r0, #16]
 8010712:	f100 0814 	add.w	r8, r0, #20
 8010716:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801071a:	1f37      	subs	r7, r6, #4
 801071c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010720:	4610      	mov	r0, r2
 8010722:	f7ff fd53 	bl	80101cc <__hi0bits>
 8010726:	f1c0 0320 	rsb	r3, r0, #32
 801072a:	280a      	cmp	r0, #10
 801072c:	600b      	str	r3, [r1, #0]
 801072e:	491b      	ldr	r1, [pc, #108]	@ (801079c <__b2d+0x90>)
 8010730:	dc15      	bgt.n	801075e <__b2d+0x52>
 8010732:	f1c0 0c0b 	rsb	ip, r0, #11
 8010736:	fa22 f30c 	lsr.w	r3, r2, ip
 801073a:	45b8      	cmp	r8, r7
 801073c:	ea43 0501 	orr.w	r5, r3, r1
 8010740:	bf34      	ite	cc
 8010742:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010746:	2300      	movcs	r3, #0
 8010748:	3015      	adds	r0, #21
 801074a:	fa02 f000 	lsl.w	r0, r2, r0
 801074e:	fa23 f30c 	lsr.w	r3, r3, ip
 8010752:	4303      	orrs	r3, r0
 8010754:	461c      	mov	r4, r3
 8010756:	ec45 4b10 	vmov	d0, r4, r5
 801075a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801075e:	45b8      	cmp	r8, r7
 8010760:	bf3a      	itte	cc
 8010762:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010766:	f1a6 0708 	subcc.w	r7, r6, #8
 801076a:	2300      	movcs	r3, #0
 801076c:	380b      	subs	r0, #11
 801076e:	d012      	beq.n	8010796 <__b2d+0x8a>
 8010770:	f1c0 0120 	rsb	r1, r0, #32
 8010774:	fa23 f401 	lsr.w	r4, r3, r1
 8010778:	4082      	lsls	r2, r0
 801077a:	4322      	orrs	r2, r4
 801077c:	4547      	cmp	r7, r8
 801077e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010782:	bf8c      	ite	hi
 8010784:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010788:	2200      	movls	r2, #0
 801078a:	4083      	lsls	r3, r0
 801078c:	40ca      	lsrs	r2, r1
 801078e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010792:	4313      	orrs	r3, r2
 8010794:	e7de      	b.n	8010754 <__b2d+0x48>
 8010796:	ea42 0501 	orr.w	r5, r2, r1
 801079a:	e7db      	b.n	8010754 <__b2d+0x48>
 801079c:	3ff00000 	.word	0x3ff00000

080107a0 <__d2b>:
 80107a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80107a4:	460f      	mov	r7, r1
 80107a6:	2101      	movs	r1, #1
 80107a8:	ec59 8b10 	vmov	r8, r9, d0
 80107ac:	4616      	mov	r6, r2
 80107ae:	f7ff fc1b 	bl	800ffe8 <_Balloc>
 80107b2:	4604      	mov	r4, r0
 80107b4:	b930      	cbnz	r0, 80107c4 <__d2b+0x24>
 80107b6:	4602      	mov	r2, r0
 80107b8:	4b23      	ldr	r3, [pc, #140]	@ (8010848 <__d2b+0xa8>)
 80107ba:	4824      	ldr	r0, [pc, #144]	@ (801084c <__d2b+0xac>)
 80107bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80107c0:	f001 fb6e 	bl	8011ea0 <__assert_func>
 80107c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80107c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80107cc:	b10d      	cbz	r5, 80107d2 <__d2b+0x32>
 80107ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80107d2:	9301      	str	r3, [sp, #4]
 80107d4:	f1b8 0300 	subs.w	r3, r8, #0
 80107d8:	d023      	beq.n	8010822 <__d2b+0x82>
 80107da:	4668      	mov	r0, sp
 80107dc:	9300      	str	r3, [sp, #0]
 80107de:	f7ff fd14 	bl	801020a <__lo0bits>
 80107e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80107e6:	b1d0      	cbz	r0, 801081e <__d2b+0x7e>
 80107e8:	f1c0 0320 	rsb	r3, r0, #32
 80107ec:	fa02 f303 	lsl.w	r3, r2, r3
 80107f0:	430b      	orrs	r3, r1
 80107f2:	40c2      	lsrs	r2, r0
 80107f4:	6163      	str	r3, [r4, #20]
 80107f6:	9201      	str	r2, [sp, #4]
 80107f8:	9b01      	ldr	r3, [sp, #4]
 80107fa:	61a3      	str	r3, [r4, #24]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	bf0c      	ite	eq
 8010800:	2201      	moveq	r2, #1
 8010802:	2202      	movne	r2, #2
 8010804:	6122      	str	r2, [r4, #16]
 8010806:	b1a5      	cbz	r5, 8010832 <__d2b+0x92>
 8010808:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801080c:	4405      	add	r5, r0
 801080e:	603d      	str	r5, [r7, #0]
 8010810:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010814:	6030      	str	r0, [r6, #0]
 8010816:	4620      	mov	r0, r4
 8010818:	b003      	add	sp, #12
 801081a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801081e:	6161      	str	r1, [r4, #20]
 8010820:	e7ea      	b.n	80107f8 <__d2b+0x58>
 8010822:	a801      	add	r0, sp, #4
 8010824:	f7ff fcf1 	bl	801020a <__lo0bits>
 8010828:	9b01      	ldr	r3, [sp, #4]
 801082a:	6163      	str	r3, [r4, #20]
 801082c:	3020      	adds	r0, #32
 801082e:	2201      	movs	r2, #1
 8010830:	e7e8      	b.n	8010804 <__d2b+0x64>
 8010832:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010836:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801083a:	6038      	str	r0, [r7, #0]
 801083c:	6918      	ldr	r0, [r3, #16]
 801083e:	f7ff fcc5 	bl	80101cc <__hi0bits>
 8010842:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010846:	e7e5      	b.n	8010814 <__d2b+0x74>
 8010848:	08014c3d 	.word	0x08014c3d
 801084c:	08014c4e 	.word	0x08014c4e

08010850 <__ratio>:
 8010850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010854:	b085      	sub	sp, #20
 8010856:	e9cd 1000 	strd	r1, r0, [sp]
 801085a:	a902      	add	r1, sp, #8
 801085c:	f7ff ff56 	bl	801070c <__b2d>
 8010860:	9800      	ldr	r0, [sp, #0]
 8010862:	a903      	add	r1, sp, #12
 8010864:	ec55 4b10 	vmov	r4, r5, d0
 8010868:	f7ff ff50 	bl	801070c <__b2d>
 801086c:	9b01      	ldr	r3, [sp, #4]
 801086e:	6919      	ldr	r1, [r3, #16]
 8010870:	9b00      	ldr	r3, [sp, #0]
 8010872:	691b      	ldr	r3, [r3, #16]
 8010874:	1ac9      	subs	r1, r1, r3
 8010876:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801087a:	1a9b      	subs	r3, r3, r2
 801087c:	ec5b ab10 	vmov	sl, fp, d0
 8010880:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010884:	2b00      	cmp	r3, #0
 8010886:	bfce      	itee	gt
 8010888:	462a      	movgt	r2, r5
 801088a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801088e:	465a      	movle	r2, fp
 8010890:	462f      	mov	r7, r5
 8010892:	46d9      	mov	r9, fp
 8010894:	bfcc      	ite	gt
 8010896:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801089a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801089e:	464b      	mov	r3, r9
 80108a0:	4652      	mov	r2, sl
 80108a2:	4620      	mov	r0, r4
 80108a4:	4639      	mov	r1, r7
 80108a6:	f7ef ffd9 	bl	800085c <__aeabi_ddiv>
 80108aa:	ec41 0b10 	vmov	d0, r0, r1
 80108ae:	b005      	add	sp, #20
 80108b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080108b4 <__copybits>:
 80108b4:	3901      	subs	r1, #1
 80108b6:	b570      	push	{r4, r5, r6, lr}
 80108b8:	1149      	asrs	r1, r1, #5
 80108ba:	6914      	ldr	r4, [r2, #16]
 80108bc:	3101      	adds	r1, #1
 80108be:	f102 0314 	add.w	r3, r2, #20
 80108c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80108c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80108ca:	1f05      	subs	r5, r0, #4
 80108cc:	42a3      	cmp	r3, r4
 80108ce:	d30c      	bcc.n	80108ea <__copybits+0x36>
 80108d0:	1aa3      	subs	r3, r4, r2
 80108d2:	3b11      	subs	r3, #17
 80108d4:	f023 0303 	bic.w	r3, r3, #3
 80108d8:	3211      	adds	r2, #17
 80108da:	42a2      	cmp	r2, r4
 80108dc:	bf88      	it	hi
 80108de:	2300      	movhi	r3, #0
 80108e0:	4418      	add	r0, r3
 80108e2:	2300      	movs	r3, #0
 80108e4:	4288      	cmp	r0, r1
 80108e6:	d305      	bcc.n	80108f4 <__copybits+0x40>
 80108e8:	bd70      	pop	{r4, r5, r6, pc}
 80108ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80108ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80108f2:	e7eb      	b.n	80108cc <__copybits+0x18>
 80108f4:	f840 3b04 	str.w	r3, [r0], #4
 80108f8:	e7f4      	b.n	80108e4 <__copybits+0x30>

080108fa <__any_on>:
 80108fa:	f100 0214 	add.w	r2, r0, #20
 80108fe:	6900      	ldr	r0, [r0, #16]
 8010900:	114b      	asrs	r3, r1, #5
 8010902:	4298      	cmp	r0, r3
 8010904:	b510      	push	{r4, lr}
 8010906:	db11      	blt.n	801092c <__any_on+0x32>
 8010908:	dd0a      	ble.n	8010920 <__any_on+0x26>
 801090a:	f011 011f 	ands.w	r1, r1, #31
 801090e:	d007      	beq.n	8010920 <__any_on+0x26>
 8010910:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010914:	fa24 f001 	lsr.w	r0, r4, r1
 8010918:	fa00 f101 	lsl.w	r1, r0, r1
 801091c:	428c      	cmp	r4, r1
 801091e:	d10b      	bne.n	8010938 <__any_on+0x3e>
 8010920:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010924:	4293      	cmp	r3, r2
 8010926:	d803      	bhi.n	8010930 <__any_on+0x36>
 8010928:	2000      	movs	r0, #0
 801092a:	bd10      	pop	{r4, pc}
 801092c:	4603      	mov	r3, r0
 801092e:	e7f7      	b.n	8010920 <__any_on+0x26>
 8010930:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010934:	2900      	cmp	r1, #0
 8010936:	d0f5      	beq.n	8010924 <__any_on+0x2a>
 8010938:	2001      	movs	r0, #1
 801093a:	e7f6      	b.n	801092a <__any_on+0x30>

0801093c <sulp>:
 801093c:	b570      	push	{r4, r5, r6, lr}
 801093e:	4604      	mov	r4, r0
 8010940:	460d      	mov	r5, r1
 8010942:	ec45 4b10 	vmov	d0, r4, r5
 8010946:	4616      	mov	r6, r2
 8010948:	f7ff feba 	bl	80106c0 <__ulp>
 801094c:	ec51 0b10 	vmov	r0, r1, d0
 8010950:	b17e      	cbz	r6, 8010972 <sulp+0x36>
 8010952:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010956:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801095a:	2b00      	cmp	r3, #0
 801095c:	dd09      	ble.n	8010972 <sulp+0x36>
 801095e:	051b      	lsls	r3, r3, #20
 8010960:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010964:	2400      	movs	r4, #0
 8010966:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801096a:	4622      	mov	r2, r4
 801096c:	462b      	mov	r3, r5
 801096e:	f7ef fe4b 	bl	8000608 <__aeabi_dmul>
 8010972:	ec41 0b10 	vmov	d0, r0, r1
 8010976:	bd70      	pop	{r4, r5, r6, pc}

08010978 <_strtod_l>:
 8010978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801097c:	b09f      	sub	sp, #124	@ 0x7c
 801097e:	460c      	mov	r4, r1
 8010980:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010982:	2200      	movs	r2, #0
 8010984:	921a      	str	r2, [sp, #104]	@ 0x68
 8010986:	9005      	str	r0, [sp, #20]
 8010988:	f04f 0a00 	mov.w	sl, #0
 801098c:	f04f 0b00 	mov.w	fp, #0
 8010990:	460a      	mov	r2, r1
 8010992:	9219      	str	r2, [sp, #100]	@ 0x64
 8010994:	7811      	ldrb	r1, [r2, #0]
 8010996:	292b      	cmp	r1, #43	@ 0x2b
 8010998:	d04a      	beq.n	8010a30 <_strtod_l+0xb8>
 801099a:	d838      	bhi.n	8010a0e <_strtod_l+0x96>
 801099c:	290d      	cmp	r1, #13
 801099e:	d832      	bhi.n	8010a06 <_strtod_l+0x8e>
 80109a0:	2908      	cmp	r1, #8
 80109a2:	d832      	bhi.n	8010a0a <_strtod_l+0x92>
 80109a4:	2900      	cmp	r1, #0
 80109a6:	d03b      	beq.n	8010a20 <_strtod_l+0xa8>
 80109a8:	2200      	movs	r2, #0
 80109aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80109ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80109ae:	782a      	ldrb	r2, [r5, #0]
 80109b0:	2a30      	cmp	r2, #48	@ 0x30
 80109b2:	f040 80b2 	bne.w	8010b1a <_strtod_l+0x1a2>
 80109b6:	786a      	ldrb	r2, [r5, #1]
 80109b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80109bc:	2a58      	cmp	r2, #88	@ 0x58
 80109be:	d16e      	bne.n	8010a9e <_strtod_l+0x126>
 80109c0:	9302      	str	r3, [sp, #8]
 80109c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109c4:	9301      	str	r3, [sp, #4]
 80109c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80109c8:	9300      	str	r3, [sp, #0]
 80109ca:	4a8f      	ldr	r2, [pc, #572]	@ (8010c08 <_strtod_l+0x290>)
 80109cc:	9805      	ldr	r0, [sp, #20]
 80109ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80109d0:	a919      	add	r1, sp, #100	@ 0x64
 80109d2:	f001 faff 	bl	8011fd4 <__gethex>
 80109d6:	f010 060f 	ands.w	r6, r0, #15
 80109da:	4604      	mov	r4, r0
 80109dc:	d005      	beq.n	80109ea <_strtod_l+0x72>
 80109de:	2e06      	cmp	r6, #6
 80109e0:	d128      	bne.n	8010a34 <_strtod_l+0xbc>
 80109e2:	3501      	adds	r5, #1
 80109e4:	2300      	movs	r3, #0
 80109e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80109e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80109ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f040 858e 	bne.w	801150e <_strtod_l+0xb96>
 80109f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109f4:	b1cb      	cbz	r3, 8010a2a <_strtod_l+0xb2>
 80109f6:	4652      	mov	r2, sl
 80109f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80109fc:	ec43 2b10 	vmov	d0, r2, r3
 8010a00:	b01f      	add	sp, #124	@ 0x7c
 8010a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a06:	2920      	cmp	r1, #32
 8010a08:	d1ce      	bne.n	80109a8 <_strtod_l+0x30>
 8010a0a:	3201      	adds	r2, #1
 8010a0c:	e7c1      	b.n	8010992 <_strtod_l+0x1a>
 8010a0e:	292d      	cmp	r1, #45	@ 0x2d
 8010a10:	d1ca      	bne.n	80109a8 <_strtod_l+0x30>
 8010a12:	2101      	movs	r1, #1
 8010a14:	910e      	str	r1, [sp, #56]	@ 0x38
 8010a16:	1c51      	adds	r1, r2, #1
 8010a18:	9119      	str	r1, [sp, #100]	@ 0x64
 8010a1a:	7852      	ldrb	r2, [r2, #1]
 8010a1c:	2a00      	cmp	r2, #0
 8010a1e:	d1c5      	bne.n	80109ac <_strtod_l+0x34>
 8010a20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010a22:	9419      	str	r4, [sp, #100]	@ 0x64
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	f040 8570 	bne.w	801150a <_strtod_l+0xb92>
 8010a2a:	4652      	mov	r2, sl
 8010a2c:	465b      	mov	r3, fp
 8010a2e:	e7e5      	b.n	80109fc <_strtod_l+0x84>
 8010a30:	2100      	movs	r1, #0
 8010a32:	e7ef      	b.n	8010a14 <_strtod_l+0x9c>
 8010a34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010a36:	b13a      	cbz	r2, 8010a48 <_strtod_l+0xd0>
 8010a38:	2135      	movs	r1, #53	@ 0x35
 8010a3a:	a81c      	add	r0, sp, #112	@ 0x70
 8010a3c:	f7ff ff3a 	bl	80108b4 <__copybits>
 8010a40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010a42:	9805      	ldr	r0, [sp, #20]
 8010a44:	f7ff fb10 	bl	8010068 <_Bfree>
 8010a48:	3e01      	subs	r6, #1
 8010a4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010a4c:	2e04      	cmp	r6, #4
 8010a4e:	d806      	bhi.n	8010a5e <_strtod_l+0xe6>
 8010a50:	e8df f006 	tbb	[pc, r6]
 8010a54:	201d0314 	.word	0x201d0314
 8010a58:	14          	.byte	0x14
 8010a59:	00          	.byte	0x00
 8010a5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010a5e:	05e1      	lsls	r1, r4, #23
 8010a60:	bf48      	it	mi
 8010a62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010a66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010a6a:	0d1b      	lsrs	r3, r3, #20
 8010a6c:	051b      	lsls	r3, r3, #20
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d1bb      	bne.n	80109ea <_strtod_l+0x72>
 8010a72:	f7fe fb2b 	bl	800f0cc <__errno>
 8010a76:	2322      	movs	r3, #34	@ 0x22
 8010a78:	6003      	str	r3, [r0, #0]
 8010a7a:	e7b6      	b.n	80109ea <_strtod_l+0x72>
 8010a7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010a80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010a84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010a88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010a8c:	e7e7      	b.n	8010a5e <_strtod_l+0xe6>
 8010a8e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8010c10 <_strtod_l+0x298>
 8010a92:	e7e4      	b.n	8010a5e <_strtod_l+0xe6>
 8010a94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010a98:	f04f 3aff 	mov.w	sl, #4294967295
 8010a9c:	e7df      	b.n	8010a5e <_strtod_l+0xe6>
 8010a9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010aa0:	1c5a      	adds	r2, r3, #1
 8010aa2:	9219      	str	r2, [sp, #100]	@ 0x64
 8010aa4:	785b      	ldrb	r3, [r3, #1]
 8010aa6:	2b30      	cmp	r3, #48	@ 0x30
 8010aa8:	d0f9      	beq.n	8010a9e <_strtod_l+0x126>
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d09d      	beq.n	80109ea <_strtod_l+0x72>
 8010aae:	2301      	movs	r3, #1
 8010ab0:	2700      	movs	r7, #0
 8010ab2:	9308      	str	r3, [sp, #32]
 8010ab4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ab6:	930c      	str	r3, [sp, #48]	@ 0x30
 8010ab8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8010aba:	46b9      	mov	r9, r7
 8010abc:	220a      	movs	r2, #10
 8010abe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010ac0:	7805      	ldrb	r5, [r0, #0]
 8010ac2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010ac6:	b2d9      	uxtb	r1, r3
 8010ac8:	2909      	cmp	r1, #9
 8010aca:	d928      	bls.n	8010b1e <_strtod_l+0x1a6>
 8010acc:	494f      	ldr	r1, [pc, #316]	@ (8010c0c <_strtod_l+0x294>)
 8010ace:	2201      	movs	r2, #1
 8010ad0:	f001 f9ac 	bl	8011e2c <strncmp>
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	d032      	beq.n	8010b3e <_strtod_l+0x1c6>
 8010ad8:	2000      	movs	r0, #0
 8010ada:	462a      	mov	r2, r5
 8010adc:	900a      	str	r0, [sp, #40]	@ 0x28
 8010ade:	464d      	mov	r5, r9
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	2a65      	cmp	r2, #101	@ 0x65
 8010ae4:	d001      	beq.n	8010aea <_strtod_l+0x172>
 8010ae6:	2a45      	cmp	r2, #69	@ 0x45
 8010ae8:	d114      	bne.n	8010b14 <_strtod_l+0x19c>
 8010aea:	b91d      	cbnz	r5, 8010af4 <_strtod_l+0x17c>
 8010aec:	9a08      	ldr	r2, [sp, #32]
 8010aee:	4302      	orrs	r2, r0
 8010af0:	d096      	beq.n	8010a20 <_strtod_l+0xa8>
 8010af2:	2500      	movs	r5, #0
 8010af4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010af6:	1c62      	adds	r2, r4, #1
 8010af8:	9219      	str	r2, [sp, #100]	@ 0x64
 8010afa:	7862      	ldrb	r2, [r4, #1]
 8010afc:	2a2b      	cmp	r2, #43	@ 0x2b
 8010afe:	d07a      	beq.n	8010bf6 <_strtod_l+0x27e>
 8010b00:	2a2d      	cmp	r2, #45	@ 0x2d
 8010b02:	d07e      	beq.n	8010c02 <_strtod_l+0x28a>
 8010b04:	f04f 0c00 	mov.w	ip, #0
 8010b08:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010b0c:	2909      	cmp	r1, #9
 8010b0e:	f240 8085 	bls.w	8010c1c <_strtod_l+0x2a4>
 8010b12:	9419      	str	r4, [sp, #100]	@ 0x64
 8010b14:	f04f 0800 	mov.w	r8, #0
 8010b18:	e0a5      	b.n	8010c66 <_strtod_l+0x2ee>
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	e7c8      	b.n	8010ab0 <_strtod_l+0x138>
 8010b1e:	f1b9 0f08 	cmp.w	r9, #8
 8010b22:	bfd8      	it	le
 8010b24:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8010b26:	f100 0001 	add.w	r0, r0, #1
 8010b2a:	bfda      	itte	le
 8010b2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010b30:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8010b32:	fb02 3707 	mlagt	r7, r2, r7, r3
 8010b36:	f109 0901 	add.w	r9, r9, #1
 8010b3a:	9019      	str	r0, [sp, #100]	@ 0x64
 8010b3c:	e7bf      	b.n	8010abe <_strtod_l+0x146>
 8010b3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010b40:	1c5a      	adds	r2, r3, #1
 8010b42:	9219      	str	r2, [sp, #100]	@ 0x64
 8010b44:	785a      	ldrb	r2, [r3, #1]
 8010b46:	f1b9 0f00 	cmp.w	r9, #0
 8010b4a:	d03b      	beq.n	8010bc4 <_strtod_l+0x24c>
 8010b4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8010b4e:	464d      	mov	r5, r9
 8010b50:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010b54:	2b09      	cmp	r3, #9
 8010b56:	d912      	bls.n	8010b7e <_strtod_l+0x206>
 8010b58:	2301      	movs	r3, #1
 8010b5a:	e7c2      	b.n	8010ae2 <_strtod_l+0x16a>
 8010b5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010b5e:	1c5a      	adds	r2, r3, #1
 8010b60:	9219      	str	r2, [sp, #100]	@ 0x64
 8010b62:	785a      	ldrb	r2, [r3, #1]
 8010b64:	3001      	adds	r0, #1
 8010b66:	2a30      	cmp	r2, #48	@ 0x30
 8010b68:	d0f8      	beq.n	8010b5c <_strtod_l+0x1e4>
 8010b6a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010b6e:	2b08      	cmp	r3, #8
 8010b70:	f200 84d2 	bhi.w	8011518 <_strtod_l+0xba0>
 8010b74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010b76:	900a      	str	r0, [sp, #40]	@ 0x28
 8010b78:	2000      	movs	r0, #0
 8010b7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8010b7c:	4605      	mov	r5, r0
 8010b7e:	3a30      	subs	r2, #48	@ 0x30
 8010b80:	f100 0301 	add.w	r3, r0, #1
 8010b84:	d018      	beq.n	8010bb8 <_strtod_l+0x240>
 8010b86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010b88:	4419      	add	r1, r3
 8010b8a:	910a      	str	r1, [sp, #40]	@ 0x28
 8010b8c:	462e      	mov	r6, r5
 8010b8e:	f04f 0e0a 	mov.w	lr, #10
 8010b92:	1c71      	adds	r1, r6, #1
 8010b94:	eba1 0c05 	sub.w	ip, r1, r5
 8010b98:	4563      	cmp	r3, ip
 8010b9a:	dc15      	bgt.n	8010bc8 <_strtod_l+0x250>
 8010b9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010ba0:	182b      	adds	r3, r5, r0
 8010ba2:	2b08      	cmp	r3, #8
 8010ba4:	f105 0501 	add.w	r5, r5, #1
 8010ba8:	4405      	add	r5, r0
 8010baa:	dc1a      	bgt.n	8010be2 <_strtod_l+0x26a>
 8010bac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010bae:	230a      	movs	r3, #10
 8010bb0:	fb03 2301 	mla	r3, r3, r1, r2
 8010bb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010bba:	1c51      	adds	r1, r2, #1
 8010bbc:	9119      	str	r1, [sp, #100]	@ 0x64
 8010bbe:	7852      	ldrb	r2, [r2, #1]
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	e7c5      	b.n	8010b50 <_strtod_l+0x1d8>
 8010bc4:	4648      	mov	r0, r9
 8010bc6:	e7ce      	b.n	8010b66 <_strtod_l+0x1ee>
 8010bc8:	2e08      	cmp	r6, #8
 8010bca:	dc05      	bgt.n	8010bd8 <_strtod_l+0x260>
 8010bcc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010bce:	fb0e f606 	mul.w	r6, lr, r6
 8010bd2:	960b      	str	r6, [sp, #44]	@ 0x2c
 8010bd4:	460e      	mov	r6, r1
 8010bd6:	e7dc      	b.n	8010b92 <_strtod_l+0x21a>
 8010bd8:	2910      	cmp	r1, #16
 8010bda:	bfd8      	it	le
 8010bdc:	fb0e f707 	mulle.w	r7, lr, r7
 8010be0:	e7f8      	b.n	8010bd4 <_strtod_l+0x25c>
 8010be2:	2b0f      	cmp	r3, #15
 8010be4:	bfdc      	itt	le
 8010be6:	230a      	movle	r3, #10
 8010be8:	fb03 2707 	mlale	r7, r3, r7, r2
 8010bec:	e7e3      	b.n	8010bb6 <_strtod_l+0x23e>
 8010bee:	2300      	movs	r3, #0
 8010bf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	e77a      	b.n	8010aec <_strtod_l+0x174>
 8010bf6:	f04f 0c00 	mov.w	ip, #0
 8010bfa:	1ca2      	adds	r2, r4, #2
 8010bfc:	9219      	str	r2, [sp, #100]	@ 0x64
 8010bfe:	78a2      	ldrb	r2, [r4, #2]
 8010c00:	e782      	b.n	8010b08 <_strtod_l+0x190>
 8010c02:	f04f 0c01 	mov.w	ip, #1
 8010c06:	e7f8      	b.n	8010bfa <_strtod_l+0x282>
 8010c08:	08014e74 	.word	0x08014e74
 8010c0c:	08014ca7 	.word	0x08014ca7
 8010c10:	7ff00000 	.word	0x7ff00000
 8010c14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010c16:	1c51      	adds	r1, r2, #1
 8010c18:	9119      	str	r1, [sp, #100]	@ 0x64
 8010c1a:	7852      	ldrb	r2, [r2, #1]
 8010c1c:	2a30      	cmp	r2, #48	@ 0x30
 8010c1e:	d0f9      	beq.n	8010c14 <_strtod_l+0x29c>
 8010c20:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010c24:	2908      	cmp	r1, #8
 8010c26:	f63f af75 	bhi.w	8010b14 <_strtod_l+0x19c>
 8010c2a:	3a30      	subs	r2, #48	@ 0x30
 8010c2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8010c2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010c30:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010c32:	f04f 080a 	mov.w	r8, #10
 8010c36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010c38:	1c56      	adds	r6, r2, #1
 8010c3a:	9619      	str	r6, [sp, #100]	@ 0x64
 8010c3c:	7852      	ldrb	r2, [r2, #1]
 8010c3e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010c42:	f1be 0f09 	cmp.w	lr, #9
 8010c46:	d939      	bls.n	8010cbc <_strtod_l+0x344>
 8010c48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010c4a:	1a76      	subs	r6, r6, r1
 8010c4c:	2e08      	cmp	r6, #8
 8010c4e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010c52:	dc03      	bgt.n	8010c5c <_strtod_l+0x2e4>
 8010c54:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010c56:	4588      	cmp	r8, r1
 8010c58:	bfa8      	it	ge
 8010c5a:	4688      	movge	r8, r1
 8010c5c:	f1bc 0f00 	cmp.w	ip, #0
 8010c60:	d001      	beq.n	8010c66 <_strtod_l+0x2ee>
 8010c62:	f1c8 0800 	rsb	r8, r8, #0
 8010c66:	2d00      	cmp	r5, #0
 8010c68:	d14e      	bne.n	8010d08 <_strtod_l+0x390>
 8010c6a:	9908      	ldr	r1, [sp, #32]
 8010c6c:	4308      	orrs	r0, r1
 8010c6e:	f47f aebc 	bne.w	80109ea <_strtod_l+0x72>
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	f47f aed4 	bne.w	8010a20 <_strtod_l+0xa8>
 8010c78:	2a69      	cmp	r2, #105	@ 0x69
 8010c7a:	d028      	beq.n	8010cce <_strtod_l+0x356>
 8010c7c:	dc25      	bgt.n	8010cca <_strtod_l+0x352>
 8010c7e:	2a49      	cmp	r2, #73	@ 0x49
 8010c80:	d025      	beq.n	8010cce <_strtod_l+0x356>
 8010c82:	2a4e      	cmp	r2, #78	@ 0x4e
 8010c84:	f47f aecc 	bne.w	8010a20 <_strtod_l+0xa8>
 8010c88:	499a      	ldr	r1, [pc, #616]	@ (8010ef4 <_strtod_l+0x57c>)
 8010c8a:	a819      	add	r0, sp, #100	@ 0x64
 8010c8c:	f001 fbc4 	bl	8012418 <__match>
 8010c90:	2800      	cmp	r0, #0
 8010c92:	f43f aec5 	beq.w	8010a20 <_strtod_l+0xa8>
 8010c96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c98:	781b      	ldrb	r3, [r3, #0]
 8010c9a:	2b28      	cmp	r3, #40	@ 0x28
 8010c9c:	d12e      	bne.n	8010cfc <_strtod_l+0x384>
 8010c9e:	4996      	ldr	r1, [pc, #600]	@ (8010ef8 <_strtod_l+0x580>)
 8010ca0:	aa1c      	add	r2, sp, #112	@ 0x70
 8010ca2:	a819      	add	r0, sp, #100	@ 0x64
 8010ca4:	f001 fbcc 	bl	8012440 <__hexnan>
 8010ca8:	2805      	cmp	r0, #5
 8010caa:	d127      	bne.n	8010cfc <_strtod_l+0x384>
 8010cac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010cae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010cb2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010cb6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010cba:	e696      	b.n	80109ea <_strtod_l+0x72>
 8010cbc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010cbe:	fb08 2101 	mla	r1, r8, r1, r2
 8010cc2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010cc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8010cc8:	e7b5      	b.n	8010c36 <_strtod_l+0x2be>
 8010cca:	2a6e      	cmp	r2, #110	@ 0x6e
 8010ccc:	e7da      	b.n	8010c84 <_strtod_l+0x30c>
 8010cce:	498b      	ldr	r1, [pc, #556]	@ (8010efc <_strtod_l+0x584>)
 8010cd0:	a819      	add	r0, sp, #100	@ 0x64
 8010cd2:	f001 fba1 	bl	8012418 <__match>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	f43f aea2 	beq.w	8010a20 <_strtod_l+0xa8>
 8010cdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cde:	4988      	ldr	r1, [pc, #544]	@ (8010f00 <_strtod_l+0x588>)
 8010ce0:	3b01      	subs	r3, #1
 8010ce2:	a819      	add	r0, sp, #100	@ 0x64
 8010ce4:	9319      	str	r3, [sp, #100]	@ 0x64
 8010ce6:	f001 fb97 	bl	8012418 <__match>
 8010cea:	b910      	cbnz	r0, 8010cf2 <_strtod_l+0x37a>
 8010cec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cee:	3301      	adds	r3, #1
 8010cf0:	9319      	str	r3, [sp, #100]	@ 0x64
 8010cf2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8010f10 <_strtod_l+0x598>
 8010cf6:	f04f 0a00 	mov.w	sl, #0
 8010cfa:	e676      	b.n	80109ea <_strtod_l+0x72>
 8010cfc:	4881      	ldr	r0, [pc, #516]	@ (8010f04 <_strtod_l+0x58c>)
 8010cfe:	f001 f8c7 	bl	8011e90 <nan>
 8010d02:	ec5b ab10 	vmov	sl, fp, d0
 8010d06:	e670      	b.n	80109ea <_strtod_l+0x72>
 8010d08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d0a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010d0c:	eba8 0303 	sub.w	r3, r8, r3
 8010d10:	f1b9 0f00 	cmp.w	r9, #0
 8010d14:	bf08      	it	eq
 8010d16:	46a9      	moveq	r9, r5
 8010d18:	2d10      	cmp	r5, #16
 8010d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d1c:	462c      	mov	r4, r5
 8010d1e:	bfa8      	it	ge
 8010d20:	2410      	movge	r4, #16
 8010d22:	f7ef fbf7 	bl	8000514 <__aeabi_ui2d>
 8010d26:	2d09      	cmp	r5, #9
 8010d28:	4682      	mov	sl, r0
 8010d2a:	468b      	mov	fp, r1
 8010d2c:	dc13      	bgt.n	8010d56 <_strtod_l+0x3de>
 8010d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	f43f ae5a 	beq.w	80109ea <_strtod_l+0x72>
 8010d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d38:	dd78      	ble.n	8010e2c <_strtod_l+0x4b4>
 8010d3a:	2b16      	cmp	r3, #22
 8010d3c:	dc5f      	bgt.n	8010dfe <_strtod_l+0x486>
 8010d3e:	4972      	ldr	r1, [pc, #456]	@ (8010f08 <_strtod_l+0x590>)
 8010d40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d48:	4652      	mov	r2, sl
 8010d4a:	465b      	mov	r3, fp
 8010d4c:	f7ef fc5c 	bl	8000608 <__aeabi_dmul>
 8010d50:	4682      	mov	sl, r0
 8010d52:	468b      	mov	fp, r1
 8010d54:	e649      	b.n	80109ea <_strtod_l+0x72>
 8010d56:	4b6c      	ldr	r3, [pc, #432]	@ (8010f08 <_strtod_l+0x590>)
 8010d58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010d5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010d60:	f7ef fc52 	bl	8000608 <__aeabi_dmul>
 8010d64:	4682      	mov	sl, r0
 8010d66:	4638      	mov	r0, r7
 8010d68:	468b      	mov	fp, r1
 8010d6a:	f7ef fbd3 	bl	8000514 <__aeabi_ui2d>
 8010d6e:	4602      	mov	r2, r0
 8010d70:	460b      	mov	r3, r1
 8010d72:	4650      	mov	r0, sl
 8010d74:	4659      	mov	r1, fp
 8010d76:	f7ef fa91 	bl	800029c <__adddf3>
 8010d7a:	2d0f      	cmp	r5, #15
 8010d7c:	4682      	mov	sl, r0
 8010d7e:	468b      	mov	fp, r1
 8010d80:	ddd5      	ble.n	8010d2e <_strtod_l+0x3b6>
 8010d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d84:	1b2c      	subs	r4, r5, r4
 8010d86:	441c      	add	r4, r3
 8010d88:	2c00      	cmp	r4, #0
 8010d8a:	f340 8093 	ble.w	8010eb4 <_strtod_l+0x53c>
 8010d8e:	f014 030f 	ands.w	r3, r4, #15
 8010d92:	d00a      	beq.n	8010daa <_strtod_l+0x432>
 8010d94:	495c      	ldr	r1, [pc, #368]	@ (8010f08 <_strtod_l+0x590>)
 8010d96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010d9a:	4652      	mov	r2, sl
 8010d9c:	465b      	mov	r3, fp
 8010d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010da2:	f7ef fc31 	bl	8000608 <__aeabi_dmul>
 8010da6:	4682      	mov	sl, r0
 8010da8:	468b      	mov	fp, r1
 8010daa:	f034 040f 	bics.w	r4, r4, #15
 8010dae:	d073      	beq.n	8010e98 <_strtod_l+0x520>
 8010db0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010db4:	dd49      	ble.n	8010e4a <_strtod_l+0x4d2>
 8010db6:	2400      	movs	r4, #0
 8010db8:	46a0      	mov	r8, r4
 8010dba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010dbc:	46a1      	mov	r9, r4
 8010dbe:	9a05      	ldr	r2, [sp, #20]
 8010dc0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8010f10 <_strtod_l+0x598>
 8010dc4:	2322      	movs	r3, #34	@ 0x22
 8010dc6:	6013      	str	r3, [r2, #0]
 8010dc8:	f04f 0a00 	mov.w	sl, #0
 8010dcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	f43f ae0b 	beq.w	80109ea <_strtod_l+0x72>
 8010dd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010dd6:	9805      	ldr	r0, [sp, #20]
 8010dd8:	f7ff f946 	bl	8010068 <_Bfree>
 8010ddc:	9805      	ldr	r0, [sp, #20]
 8010dde:	4649      	mov	r1, r9
 8010de0:	f7ff f942 	bl	8010068 <_Bfree>
 8010de4:	9805      	ldr	r0, [sp, #20]
 8010de6:	4641      	mov	r1, r8
 8010de8:	f7ff f93e 	bl	8010068 <_Bfree>
 8010dec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010dee:	9805      	ldr	r0, [sp, #20]
 8010df0:	f7ff f93a 	bl	8010068 <_Bfree>
 8010df4:	9805      	ldr	r0, [sp, #20]
 8010df6:	4621      	mov	r1, r4
 8010df8:	f7ff f936 	bl	8010068 <_Bfree>
 8010dfc:	e5f5      	b.n	80109ea <_strtod_l+0x72>
 8010dfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010e04:	4293      	cmp	r3, r2
 8010e06:	dbbc      	blt.n	8010d82 <_strtod_l+0x40a>
 8010e08:	4c3f      	ldr	r4, [pc, #252]	@ (8010f08 <_strtod_l+0x590>)
 8010e0a:	f1c5 050f 	rsb	r5, r5, #15
 8010e0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010e12:	4652      	mov	r2, sl
 8010e14:	465b      	mov	r3, fp
 8010e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e1a:	f7ef fbf5 	bl	8000608 <__aeabi_dmul>
 8010e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e20:	1b5d      	subs	r5, r3, r5
 8010e22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010e26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010e2a:	e78f      	b.n	8010d4c <_strtod_l+0x3d4>
 8010e2c:	3316      	adds	r3, #22
 8010e2e:	dba8      	blt.n	8010d82 <_strtod_l+0x40a>
 8010e30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e32:	eba3 0808 	sub.w	r8, r3, r8
 8010e36:	4b34      	ldr	r3, [pc, #208]	@ (8010f08 <_strtod_l+0x590>)
 8010e38:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010e3c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010e40:	4650      	mov	r0, sl
 8010e42:	4659      	mov	r1, fp
 8010e44:	f7ef fd0a 	bl	800085c <__aeabi_ddiv>
 8010e48:	e782      	b.n	8010d50 <_strtod_l+0x3d8>
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	4f2f      	ldr	r7, [pc, #188]	@ (8010f0c <_strtod_l+0x594>)
 8010e4e:	1124      	asrs	r4, r4, #4
 8010e50:	4650      	mov	r0, sl
 8010e52:	4659      	mov	r1, fp
 8010e54:	461e      	mov	r6, r3
 8010e56:	2c01      	cmp	r4, #1
 8010e58:	dc21      	bgt.n	8010e9e <_strtod_l+0x526>
 8010e5a:	b10b      	cbz	r3, 8010e60 <_strtod_l+0x4e8>
 8010e5c:	4682      	mov	sl, r0
 8010e5e:	468b      	mov	fp, r1
 8010e60:	492a      	ldr	r1, [pc, #168]	@ (8010f0c <_strtod_l+0x594>)
 8010e62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010e66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010e6a:	4652      	mov	r2, sl
 8010e6c:	465b      	mov	r3, fp
 8010e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e72:	f7ef fbc9 	bl	8000608 <__aeabi_dmul>
 8010e76:	4b26      	ldr	r3, [pc, #152]	@ (8010f10 <_strtod_l+0x598>)
 8010e78:	460a      	mov	r2, r1
 8010e7a:	400b      	ands	r3, r1
 8010e7c:	4925      	ldr	r1, [pc, #148]	@ (8010f14 <_strtod_l+0x59c>)
 8010e7e:	428b      	cmp	r3, r1
 8010e80:	4682      	mov	sl, r0
 8010e82:	d898      	bhi.n	8010db6 <_strtod_l+0x43e>
 8010e84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010e88:	428b      	cmp	r3, r1
 8010e8a:	bf86      	itte	hi
 8010e8c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8010f18 <_strtod_l+0x5a0>
 8010e90:	f04f 3aff 	movhi.w	sl, #4294967295
 8010e94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010e98:	2300      	movs	r3, #0
 8010e9a:	9308      	str	r3, [sp, #32]
 8010e9c:	e076      	b.n	8010f8c <_strtod_l+0x614>
 8010e9e:	07e2      	lsls	r2, r4, #31
 8010ea0:	d504      	bpl.n	8010eac <_strtod_l+0x534>
 8010ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ea6:	f7ef fbaf 	bl	8000608 <__aeabi_dmul>
 8010eaa:	2301      	movs	r3, #1
 8010eac:	3601      	adds	r6, #1
 8010eae:	1064      	asrs	r4, r4, #1
 8010eb0:	3708      	adds	r7, #8
 8010eb2:	e7d0      	b.n	8010e56 <_strtod_l+0x4de>
 8010eb4:	d0f0      	beq.n	8010e98 <_strtod_l+0x520>
 8010eb6:	4264      	negs	r4, r4
 8010eb8:	f014 020f 	ands.w	r2, r4, #15
 8010ebc:	d00a      	beq.n	8010ed4 <_strtod_l+0x55c>
 8010ebe:	4b12      	ldr	r3, [pc, #72]	@ (8010f08 <_strtod_l+0x590>)
 8010ec0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ec4:	4650      	mov	r0, sl
 8010ec6:	4659      	mov	r1, fp
 8010ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ecc:	f7ef fcc6 	bl	800085c <__aeabi_ddiv>
 8010ed0:	4682      	mov	sl, r0
 8010ed2:	468b      	mov	fp, r1
 8010ed4:	1124      	asrs	r4, r4, #4
 8010ed6:	d0df      	beq.n	8010e98 <_strtod_l+0x520>
 8010ed8:	2c1f      	cmp	r4, #31
 8010eda:	dd1f      	ble.n	8010f1c <_strtod_l+0x5a4>
 8010edc:	2400      	movs	r4, #0
 8010ede:	46a0      	mov	r8, r4
 8010ee0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010ee2:	46a1      	mov	r9, r4
 8010ee4:	9a05      	ldr	r2, [sp, #20]
 8010ee6:	2322      	movs	r3, #34	@ 0x22
 8010ee8:	f04f 0a00 	mov.w	sl, #0
 8010eec:	f04f 0b00 	mov.w	fp, #0
 8010ef0:	6013      	str	r3, [r2, #0]
 8010ef2:	e76b      	b.n	8010dcc <_strtod_l+0x454>
 8010ef4:	08014b95 	.word	0x08014b95
 8010ef8:	08014e60 	.word	0x08014e60
 8010efc:	08014b8d 	.word	0x08014b8d
 8010f00:	08014bc4 	.word	0x08014bc4
 8010f04:	08014cfd 	.word	0x08014cfd
 8010f08:	08014d98 	.word	0x08014d98
 8010f0c:	08014d70 	.word	0x08014d70
 8010f10:	7ff00000 	.word	0x7ff00000
 8010f14:	7ca00000 	.word	0x7ca00000
 8010f18:	7fefffff 	.word	0x7fefffff
 8010f1c:	f014 0310 	ands.w	r3, r4, #16
 8010f20:	bf18      	it	ne
 8010f22:	236a      	movne	r3, #106	@ 0x6a
 8010f24:	4ea9      	ldr	r6, [pc, #676]	@ (80111cc <_strtod_l+0x854>)
 8010f26:	9308      	str	r3, [sp, #32]
 8010f28:	4650      	mov	r0, sl
 8010f2a:	4659      	mov	r1, fp
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	07e7      	lsls	r7, r4, #31
 8010f30:	d504      	bpl.n	8010f3c <_strtod_l+0x5c4>
 8010f32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010f36:	f7ef fb67 	bl	8000608 <__aeabi_dmul>
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	1064      	asrs	r4, r4, #1
 8010f3e:	f106 0608 	add.w	r6, r6, #8
 8010f42:	d1f4      	bne.n	8010f2e <_strtod_l+0x5b6>
 8010f44:	b10b      	cbz	r3, 8010f4a <_strtod_l+0x5d2>
 8010f46:	4682      	mov	sl, r0
 8010f48:	468b      	mov	fp, r1
 8010f4a:	9b08      	ldr	r3, [sp, #32]
 8010f4c:	b1b3      	cbz	r3, 8010f7c <_strtod_l+0x604>
 8010f4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010f52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	4659      	mov	r1, fp
 8010f5a:	dd0f      	ble.n	8010f7c <_strtod_l+0x604>
 8010f5c:	2b1f      	cmp	r3, #31
 8010f5e:	dd56      	ble.n	801100e <_strtod_l+0x696>
 8010f60:	2b34      	cmp	r3, #52	@ 0x34
 8010f62:	bfde      	ittt	le
 8010f64:	f04f 33ff 	movle.w	r3, #4294967295
 8010f68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010f6c:	4093      	lslle	r3, r2
 8010f6e:	f04f 0a00 	mov.w	sl, #0
 8010f72:	bfcc      	ite	gt
 8010f74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010f78:	ea03 0b01 	andle.w	fp, r3, r1
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	2300      	movs	r3, #0
 8010f80:	4650      	mov	r0, sl
 8010f82:	4659      	mov	r1, fp
 8010f84:	f7ef fda8 	bl	8000ad8 <__aeabi_dcmpeq>
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	d1a7      	bne.n	8010edc <_strtod_l+0x564>
 8010f8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f8e:	9300      	str	r3, [sp, #0]
 8010f90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010f92:	9805      	ldr	r0, [sp, #20]
 8010f94:	462b      	mov	r3, r5
 8010f96:	464a      	mov	r2, r9
 8010f98:	f7ff f8ce 	bl	8010138 <__s2b>
 8010f9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010f9e:	2800      	cmp	r0, #0
 8010fa0:	f43f af09 	beq.w	8010db6 <_strtod_l+0x43e>
 8010fa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010fa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fa8:	2a00      	cmp	r2, #0
 8010faa:	eba3 0308 	sub.w	r3, r3, r8
 8010fae:	bfa8      	it	ge
 8010fb0:	2300      	movge	r3, #0
 8010fb2:	9312      	str	r3, [sp, #72]	@ 0x48
 8010fb4:	2400      	movs	r4, #0
 8010fb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010fba:	9316      	str	r3, [sp, #88]	@ 0x58
 8010fbc:	46a0      	mov	r8, r4
 8010fbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010fc0:	9805      	ldr	r0, [sp, #20]
 8010fc2:	6859      	ldr	r1, [r3, #4]
 8010fc4:	f7ff f810 	bl	800ffe8 <_Balloc>
 8010fc8:	4681      	mov	r9, r0
 8010fca:	2800      	cmp	r0, #0
 8010fcc:	f43f aef7 	beq.w	8010dbe <_strtod_l+0x446>
 8010fd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010fd2:	691a      	ldr	r2, [r3, #16]
 8010fd4:	3202      	adds	r2, #2
 8010fd6:	f103 010c 	add.w	r1, r3, #12
 8010fda:	0092      	lsls	r2, r2, #2
 8010fdc:	300c      	adds	r0, #12
 8010fde:	f000 ff47 	bl	8011e70 <memcpy>
 8010fe2:	ec4b ab10 	vmov	d0, sl, fp
 8010fe6:	9805      	ldr	r0, [sp, #20]
 8010fe8:	aa1c      	add	r2, sp, #112	@ 0x70
 8010fea:	a91b      	add	r1, sp, #108	@ 0x6c
 8010fec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010ff0:	f7ff fbd6 	bl	80107a0 <__d2b>
 8010ff4:	901a      	str	r0, [sp, #104]	@ 0x68
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	f43f aee1 	beq.w	8010dbe <_strtod_l+0x446>
 8010ffc:	9805      	ldr	r0, [sp, #20]
 8010ffe:	2101      	movs	r1, #1
 8011000:	f7ff f930 	bl	8010264 <__i2b>
 8011004:	4680      	mov	r8, r0
 8011006:	b948      	cbnz	r0, 801101c <_strtod_l+0x6a4>
 8011008:	f04f 0800 	mov.w	r8, #0
 801100c:	e6d7      	b.n	8010dbe <_strtod_l+0x446>
 801100e:	f04f 32ff 	mov.w	r2, #4294967295
 8011012:	fa02 f303 	lsl.w	r3, r2, r3
 8011016:	ea03 0a0a 	and.w	sl, r3, sl
 801101a:	e7af      	b.n	8010f7c <_strtod_l+0x604>
 801101c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801101e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011020:	2d00      	cmp	r5, #0
 8011022:	bfab      	itete	ge
 8011024:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011026:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011028:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801102a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801102c:	bfac      	ite	ge
 801102e:	18ef      	addge	r7, r5, r3
 8011030:	1b5e      	sublt	r6, r3, r5
 8011032:	9b08      	ldr	r3, [sp, #32]
 8011034:	1aed      	subs	r5, r5, r3
 8011036:	4415      	add	r5, r2
 8011038:	4b65      	ldr	r3, [pc, #404]	@ (80111d0 <_strtod_l+0x858>)
 801103a:	3d01      	subs	r5, #1
 801103c:	429d      	cmp	r5, r3
 801103e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011042:	da50      	bge.n	80110e6 <_strtod_l+0x76e>
 8011044:	1b5b      	subs	r3, r3, r5
 8011046:	2b1f      	cmp	r3, #31
 8011048:	eba2 0203 	sub.w	r2, r2, r3
 801104c:	f04f 0101 	mov.w	r1, #1
 8011050:	dc3d      	bgt.n	80110ce <_strtod_l+0x756>
 8011052:	fa01 f303 	lsl.w	r3, r1, r3
 8011056:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011058:	2300      	movs	r3, #0
 801105a:	9310      	str	r3, [sp, #64]	@ 0x40
 801105c:	18bd      	adds	r5, r7, r2
 801105e:	9b08      	ldr	r3, [sp, #32]
 8011060:	42af      	cmp	r7, r5
 8011062:	4416      	add	r6, r2
 8011064:	441e      	add	r6, r3
 8011066:	463b      	mov	r3, r7
 8011068:	bfa8      	it	ge
 801106a:	462b      	movge	r3, r5
 801106c:	42b3      	cmp	r3, r6
 801106e:	bfa8      	it	ge
 8011070:	4633      	movge	r3, r6
 8011072:	2b00      	cmp	r3, #0
 8011074:	bfc2      	ittt	gt
 8011076:	1aed      	subgt	r5, r5, r3
 8011078:	1af6      	subgt	r6, r6, r3
 801107a:	1aff      	subgt	r7, r7, r3
 801107c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801107e:	2b00      	cmp	r3, #0
 8011080:	dd16      	ble.n	80110b0 <_strtod_l+0x738>
 8011082:	4641      	mov	r1, r8
 8011084:	9805      	ldr	r0, [sp, #20]
 8011086:	461a      	mov	r2, r3
 8011088:	f7ff f9a4 	bl	80103d4 <__pow5mult>
 801108c:	4680      	mov	r8, r0
 801108e:	2800      	cmp	r0, #0
 8011090:	d0ba      	beq.n	8011008 <_strtod_l+0x690>
 8011092:	4601      	mov	r1, r0
 8011094:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011096:	9805      	ldr	r0, [sp, #20]
 8011098:	f7ff f8fa 	bl	8010290 <__multiply>
 801109c:	900a      	str	r0, [sp, #40]	@ 0x28
 801109e:	2800      	cmp	r0, #0
 80110a0:	f43f ae8d 	beq.w	8010dbe <_strtod_l+0x446>
 80110a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80110a6:	9805      	ldr	r0, [sp, #20]
 80110a8:	f7fe ffde 	bl	8010068 <_Bfree>
 80110ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80110b0:	2d00      	cmp	r5, #0
 80110b2:	dc1d      	bgt.n	80110f0 <_strtod_l+0x778>
 80110b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	dd23      	ble.n	8011102 <_strtod_l+0x78a>
 80110ba:	4649      	mov	r1, r9
 80110bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80110be:	9805      	ldr	r0, [sp, #20]
 80110c0:	f7ff f988 	bl	80103d4 <__pow5mult>
 80110c4:	4681      	mov	r9, r0
 80110c6:	b9e0      	cbnz	r0, 8011102 <_strtod_l+0x78a>
 80110c8:	f04f 0900 	mov.w	r9, #0
 80110cc:	e677      	b.n	8010dbe <_strtod_l+0x446>
 80110ce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80110d2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80110d6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80110da:	35e2      	adds	r5, #226	@ 0xe2
 80110dc:	fa01 f305 	lsl.w	r3, r1, r5
 80110e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80110e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80110e4:	e7ba      	b.n	801105c <_strtod_l+0x6e4>
 80110e6:	2300      	movs	r3, #0
 80110e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80110ea:	2301      	movs	r3, #1
 80110ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80110ee:	e7b5      	b.n	801105c <_strtod_l+0x6e4>
 80110f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80110f2:	9805      	ldr	r0, [sp, #20]
 80110f4:	462a      	mov	r2, r5
 80110f6:	f7ff f9c7 	bl	8010488 <__lshift>
 80110fa:	901a      	str	r0, [sp, #104]	@ 0x68
 80110fc:	2800      	cmp	r0, #0
 80110fe:	d1d9      	bne.n	80110b4 <_strtod_l+0x73c>
 8011100:	e65d      	b.n	8010dbe <_strtod_l+0x446>
 8011102:	2e00      	cmp	r6, #0
 8011104:	dd07      	ble.n	8011116 <_strtod_l+0x79e>
 8011106:	4649      	mov	r1, r9
 8011108:	9805      	ldr	r0, [sp, #20]
 801110a:	4632      	mov	r2, r6
 801110c:	f7ff f9bc 	bl	8010488 <__lshift>
 8011110:	4681      	mov	r9, r0
 8011112:	2800      	cmp	r0, #0
 8011114:	d0d8      	beq.n	80110c8 <_strtod_l+0x750>
 8011116:	2f00      	cmp	r7, #0
 8011118:	dd08      	ble.n	801112c <_strtod_l+0x7b4>
 801111a:	4641      	mov	r1, r8
 801111c:	9805      	ldr	r0, [sp, #20]
 801111e:	463a      	mov	r2, r7
 8011120:	f7ff f9b2 	bl	8010488 <__lshift>
 8011124:	4680      	mov	r8, r0
 8011126:	2800      	cmp	r0, #0
 8011128:	f43f ae49 	beq.w	8010dbe <_strtod_l+0x446>
 801112c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801112e:	9805      	ldr	r0, [sp, #20]
 8011130:	464a      	mov	r2, r9
 8011132:	f7ff fa31 	bl	8010598 <__mdiff>
 8011136:	4604      	mov	r4, r0
 8011138:	2800      	cmp	r0, #0
 801113a:	f43f ae40 	beq.w	8010dbe <_strtod_l+0x446>
 801113e:	68c3      	ldr	r3, [r0, #12]
 8011140:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011142:	2300      	movs	r3, #0
 8011144:	60c3      	str	r3, [r0, #12]
 8011146:	4641      	mov	r1, r8
 8011148:	f7ff fa0a 	bl	8010560 <__mcmp>
 801114c:	2800      	cmp	r0, #0
 801114e:	da45      	bge.n	80111dc <_strtod_l+0x864>
 8011150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011152:	ea53 030a 	orrs.w	r3, r3, sl
 8011156:	d16b      	bne.n	8011230 <_strtod_l+0x8b8>
 8011158:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801115c:	2b00      	cmp	r3, #0
 801115e:	d167      	bne.n	8011230 <_strtod_l+0x8b8>
 8011160:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011164:	0d1b      	lsrs	r3, r3, #20
 8011166:	051b      	lsls	r3, r3, #20
 8011168:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801116c:	d960      	bls.n	8011230 <_strtod_l+0x8b8>
 801116e:	6963      	ldr	r3, [r4, #20]
 8011170:	b913      	cbnz	r3, 8011178 <_strtod_l+0x800>
 8011172:	6923      	ldr	r3, [r4, #16]
 8011174:	2b01      	cmp	r3, #1
 8011176:	dd5b      	ble.n	8011230 <_strtod_l+0x8b8>
 8011178:	4621      	mov	r1, r4
 801117a:	2201      	movs	r2, #1
 801117c:	9805      	ldr	r0, [sp, #20]
 801117e:	f7ff f983 	bl	8010488 <__lshift>
 8011182:	4641      	mov	r1, r8
 8011184:	4604      	mov	r4, r0
 8011186:	f7ff f9eb 	bl	8010560 <__mcmp>
 801118a:	2800      	cmp	r0, #0
 801118c:	dd50      	ble.n	8011230 <_strtod_l+0x8b8>
 801118e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011192:	9a08      	ldr	r2, [sp, #32]
 8011194:	0d1b      	lsrs	r3, r3, #20
 8011196:	051b      	lsls	r3, r3, #20
 8011198:	2a00      	cmp	r2, #0
 801119a:	d06a      	beq.n	8011272 <_strtod_l+0x8fa>
 801119c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80111a0:	d867      	bhi.n	8011272 <_strtod_l+0x8fa>
 80111a2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80111a6:	f67f ae9d 	bls.w	8010ee4 <_strtod_l+0x56c>
 80111aa:	4b0a      	ldr	r3, [pc, #40]	@ (80111d4 <_strtod_l+0x85c>)
 80111ac:	4650      	mov	r0, sl
 80111ae:	4659      	mov	r1, fp
 80111b0:	2200      	movs	r2, #0
 80111b2:	f7ef fa29 	bl	8000608 <__aeabi_dmul>
 80111b6:	4b08      	ldr	r3, [pc, #32]	@ (80111d8 <_strtod_l+0x860>)
 80111b8:	400b      	ands	r3, r1
 80111ba:	4682      	mov	sl, r0
 80111bc:	468b      	mov	fp, r1
 80111be:	2b00      	cmp	r3, #0
 80111c0:	f47f ae08 	bne.w	8010dd4 <_strtod_l+0x45c>
 80111c4:	9a05      	ldr	r2, [sp, #20]
 80111c6:	2322      	movs	r3, #34	@ 0x22
 80111c8:	6013      	str	r3, [r2, #0]
 80111ca:	e603      	b.n	8010dd4 <_strtod_l+0x45c>
 80111cc:	08014e88 	.word	0x08014e88
 80111d0:	fffffc02 	.word	0xfffffc02
 80111d4:	39500000 	.word	0x39500000
 80111d8:	7ff00000 	.word	0x7ff00000
 80111dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80111e0:	d165      	bne.n	80112ae <_strtod_l+0x936>
 80111e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80111e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80111e8:	b35a      	cbz	r2, 8011242 <_strtod_l+0x8ca>
 80111ea:	4a9f      	ldr	r2, [pc, #636]	@ (8011468 <_strtod_l+0xaf0>)
 80111ec:	4293      	cmp	r3, r2
 80111ee:	d12b      	bne.n	8011248 <_strtod_l+0x8d0>
 80111f0:	9b08      	ldr	r3, [sp, #32]
 80111f2:	4651      	mov	r1, sl
 80111f4:	b303      	cbz	r3, 8011238 <_strtod_l+0x8c0>
 80111f6:	4b9d      	ldr	r3, [pc, #628]	@ (801146c <_strtod_l+0xaf4>)
 80111f8:	465a      	mov	r2, fp
 80111fa:	4013      	ands	r3, r2
 80111fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011200:	f04f 32ff 	mov.w	r2, #4294967295
 8011204:	d81b      	bhi.n	801123e <_strtod_l+0x8c6>
 8011206:	0d1b      	lsrs	r3, r3, #20
 8011208:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801120c:	fa02 f303 	lsl.w	r3, r2, r3
 8011210:	4299      	cmp	r1, r3
 8011212:	d119      	bne.n	8011248 <_strtod_l+0x8d0>
 8011214:	4b96      	ldr	r3, [pc, #600]	@ (8011470 <_strtod_l+0xaf8>)
 8011216:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011218:	429a      	cmp	r2, r3
 801121a:	d102      	bne.n	8011222 <_strtod_l+0x8aa>
 801121c:	3101      	adds	r1, #1
 801121e:	f43f adce 	beq.w	8010dbe <_strtod_l+0x446>
 8011222:	4b92      	ldr	r3, [pc, #584]	@ (801146c <_strtod_l+0xaf4>)
 8011224:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011226:	401a      	ands	r2, r3
 8011228:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801122c:	f04f 0a00 	mov.w	sl, #0
 8011230:	9b08      	ldr	r3, [sp, #32]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d1b9      	bne.n	80111aa <_strtod_l+0x832>
 8011236:	e5cd      	b.n	8010dd4 <_strtod_l+0x45c>
 8011238:	f04f 33ff 	mov.w	r3, #4294967295
 801123c:	e7e8      	b.n	8011210 <_strtod_l+0x898>
 801123e:	4613      	mov	r3, r2
 8011240:	e7e6      	b.n	8011210 <_strtod_l+0x898>
 8011242:	ea53 030a 	orrs.w	r3, r3, sl
 8011246:	d0a2      	beq.n	801118e <_strtod_l+0x816>
 8011248:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801124a:	b1db      	cbz	r3, 8011284 <_strtod_l+0x90c>
 801124c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801124e:	4213      	tst	r3, r2
 8011250:	d0ee      	beq.n	8011230 <_strtod_l+0x8b8>
 8011252:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011254:	9a08      	ldr	r2, [sp, #32]
 8011256:	4650      	mov	r0, sl
 8011258:	4659      	mov	r1, fp
 801125a:	b1bb      	cbz	r3, 801128c <_strtod_l+0x914>
 801125c:	f7ff fb6e 	bl	801093c <sulp>
 8011260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011264:	ec53 2b10 	vmov	r2, r3, d0
 8011268:	f7ef f818 	bl	800029c <__adddf3>
 801126c:	4682      	mov	sl, r0
 801126e:	468b      	mov	fp, r1
 8011270:	e7de      	b.n	8011230 <_strtod_l+0x8b8>
 8011272:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011276:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801127a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801127e:	f04f 3aff 	mov.w	sl, #4294967295
 8011282:	e7d5      	b.n	8011230 <_strtod_l+0x8b8>
 8011284:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011286:	ea13 0f0a 	tst.w	r3, sl
 801128a:	e7e1      	b.n	8011250 <_strtod_l+0x8d8>
 801128c:	f7ff fb56 	bl	801093c <sulp>
 8011290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011294:	ec53 2b10 	vmov	r2, r3, d0
 8011298:	f7ee fffe 	bl	8000298 <__aeabi_dsub>
 801129c:	2200      	movs	r2, #0
 801129e:	2300      	movs	r3, #0
 80112a0:	4682      	mov	sl, r0
 80112a2:	468b      	mov	fp, r1
 80112a4:	f7ef fc18 	bl	8000ad8 <__aeabi_dcmpeq>
 80112a8:	2800      	cmp	r0, #0
 80112aa:	d0c1      	beq.n	8011230 <_strtod_l+0x8b8>
 80112ac:	e61a      	b.n	8010ee4 <_strtod_l+0x56c>
 80112ae:	4641      	mov	r1, r8
 80112b0:	4620      	mov	r0, r4
 80112b2:	f7ff facd 	bl	8010850 <__ratio>
 80112b6:	ec57 6b10 	vmov	r6, r7, d0
 80112ba:	2200      	movs	r2, #0
 80112bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80112c0:	4630      	mov	r0, r6
 80112c2:	4639      	mov	r1, r7
 80112c4:	f7ef fc1c 	bl	8000b00 <__aeabi_dcmple>
 80112c8:	2800      	cmp	r0, #0
 80112ca:	d06f      	beq.n	80113ac <_strtod_l+0xa34>
 80112cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d17a      	bne.n	80113c8 <_strtod_l+0xa50>
 80112d2:	f1ba 0f00 	cmp.w	sl, #0
 80112d6:	d158      	bne.n	801138a <_strtod_l+0xa12>
 80112d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80112da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d15a      	bne.n	8011398 <_strtod_l+0xa20>
 80112e2:	4b64      	ldr	r3, [pc, #400]	@ (8011474 <_strtod_l+0xafc>)
 80112e4:	2200      	movs	r2, #0
 80112e6:	4630      	mov	r0, r6
 80112e8:	4639      	mov	r1, r7
 80112ea:	f7ef fbff 	bl	8000aec <__aeabi_dcmplt>
 80112ee:	2800      	cmp	r0, #0
 80112f0:	d159      	bne.n	80113a6 <_strtod_l+0xa2e>
 80112f2:	4630      	mov	r0, r6
 80112f4:	4639      	mov	r1, r7
 80112f6:	4b60      	ldr	r3, [pc, #384]	@ (8011478 <_strtod_l+0xb00>)
 80112f8:	2200      	movs	r2, #0
 80112fa:	f7ef f985 	bl	8000608 <__aeabi_dmul>
 80112fe:	4606      	mov	r6, r0
 8011300:	460f      	mov	r7, r1
 8011302:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011306:	9606      	str	r6, [sp, #24]
 8011308:	9307      	str	r3, [sp, #28]
 801130a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801130e:	4d57      	ldr	r5, [pc, #348]	@ (801146c <_strtod_l+0xaf4>)
 8011310:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011316:	401d      	ands	r5, r3
 8011318:	4b58      	ldr	r3, [pc, #352]	@ (801147c <_strtod_l+0xb04>)
 801131a:	429d      	cmp	r5, r3
 801131c:	f040 80b2 	bne.w	8011484 <_strtod_l+0xb0c>
 8011320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011322:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011326:	ec4b ab10 	vmov	d0, sl, fp
 801132a:	f7ff f9c9 	bl	80106c0 <__ulp>
 801132e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011332:	ec51 0b10 	vmov	r0, r1, d0
 8011336:	f7ef f967 	bl	8000608 <__aeabi_dmul>
 801133a:	4652      	mov	r2, sl
 801133c:	465b      	mov	r3, fp
 801133e:	f7ee ffad 	bl	800029c <__adddf3>
 8011342:	460b      	mov	r3, r1
 8011344:	4949      	ldr	r1, [pc, #292]	@ (801146c <_strtod_l+0xaf4>)
 8011346:	4a4e      	ldr	r2, [pc, #312]	@ (8011480 <_strtod_l+0xb08>)
 8011348:	4019      	ands	r1, r3
 801134a:	4291      	cmp	r1, r2
 801134c:	4682      	mov	sl, r0
 801134e:	d942      	bls.n	80113d6 <_strtod_l+0xa5e>
 8011350:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011352:	4b47      	ldr	r3, [pc, #284]	@ (8011470 <_strtod_l+0xaf8>)
 8011354:	429a      	cmp	r2, r3
 8011356:	d103      	bne.n	8011360 <_strtod_l+0x9e8>
 8011358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801135a:	3301      	adds	r3, #1
 801135c:	f43f ad2f 	beq.w	8010dbe <_strtod_l+0x446>
 8011360:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011470 <_strtod_l+0xaf8>
 8011364:	f04f 3aff 	mov.w	sl, #4294967295
 8011368:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801136a:	9805      	ldr	r0, [sp, #20]
 801136c:	f7fe fe7c 	bl	8010068 <_Bfree>
 8011370:	9805      	ldr	r0, [sp, #20]
 8011372:	4649      	mov	r1, r9
 8011374:	f7fe fe78 	bl	8010068 <_Bfree>
 8011378:	9805      	ldr	r0, [sp, #20]
 801137a:	4641      	mov	r1, r8
 801137c:	f7fe fe74 	bl	8010068 <_Bfree>
 8011380:	9805      	ldr	r0, [sp, #20]
 8011382:	4621      	mov	r1, r4
 8011384:	f7fe fe70 	bl	8010068 <_Bfree>
 8011388:	e619      	b.n	8010fbe <_strtod_l+0x646>
 801138a:	f1ba 0f01 	cmp.w	sl, #1
 801138e:	d103      	bne.n	8011398 <_strtod_l+0xa20>
 8011390:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011392:	2b00      	cmp	r3, #0
 8011394:	f43f ada6 	beq.w	8010ee4 <_strtod_l+0x56c>
 8011398:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011448 <_strtod_l+0xad0>
 801139c:	4f35      	ldr	r7, [pc, #212]	@ (8011474 <_strtod_l+0xafc>)
 801139e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80113a2:	2600      	movs	r6, #0
 80113a4:	e7b1      	b.n	801130a <_strtod_l+0x992>
 80113a6:	4f34      	ldr	r7, [pc, #208]	@ (8011478 <_strtod_l+0xb00>)
 80113a8:	2600      	movs	r6, #0
 80113aa:	e7aa      	b.n	8011302 <_strtod_l+0x98a>
 80113ac:	4b32      	ldr	r3, [pc, #200]	@ (8011478 <_strtod_l+0xb00>)
 80113ae:	4630      	mov	r0, r6
 80113b0:	4639      	mov	r1, r7
 80113b2:	2200      	movs	r2, #0
 80113b4:	f7ef f928 	bl	8000608 <__aeabi_dmul>
 80113b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113ba:	4606      	mov	r6, r0
 80113bc:	460f      	mov	r7, r1
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d09f      	beq.n	8011302 <_strtod_l+0x98a>
 80113c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80113c6:	e7a0      	b.n	801130a <_strtod_l+0x992>
 80113c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011450 <_strtod_l+0xad8>
 80113cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80113d0:	ec57 6b17 	vmov	r6, r7, d7
 80113d4:	e799      	b.n	801130a <_strtod_l+0x992>
 80113d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80113da:	9b08      	ldr	r3, [sp, #32]
 80113dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d1c1      	bne.n	8011368 <_strtod_l+0x9f0>
 80113e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80113e8:	0d1b      	lsrs	r3, r3, #20
 80113ea:	051b      	lsls	r3, r3, #20
 80113ec:	429d      	cmp	r5, r3
 80113ee:	d1bb      	bne.n	8011368 <_strtod_l+0x9f0>
 80113f0:	4630      	mov	r0, r6
 80113f2:	4639      	mov	r1, r7
 80113f4:	f7ef fd76 	bl	8000ee4 <__aeabi_d2lz>
 80113f8:	f7ef f8d8 	bl	80005ac <__aeabi_l2d>
 80113fc:	4602      	mov	r2, r0
 80113fe:	460b      	mov	r3, r1
 8011400:	4630      	mov	r0, r6
 8011402:	4639      	mov	r1, r7
 8011404:	f7ee ff48 	bl	8000298 <__aeabi_dsub>
 8011408:	460b      	mov	r3, r1
 801140a:	4602      	mov	r2, r0
 801140c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011410:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011416:	ea46 060a 	orr.w	r6, r6, sl
 801141a:	431e      	orrs	r6, r3
 801141c:	d06f      	beq.n	80114fe <_strtod_l+0xb86>
 801141e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011458 <_strtod_l+0xae0>)
 8011420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011424:	f7ef fb62 	bl	8000aec <__aeabi_dcmplt>
 8011428:	2800      	cmp	r0, #0
 801142a:	f47f acd3 	bne.w	8010dd4 <_strtod_l+0x45c>
 801142e:	a30c      	add	r3, pc, #48	@ (adr r3, 8011460 <_strtod_l+0xae8>)
 8011430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011434:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011438:	f7ef fb76 	bl	8000b28 <__aeabi_dcmpgt>
 801143c:	2800      	cmp	r0, #0
 801143e:	d093      	beq.n	8011368 <_strtod_l+0x9f0>
 8011440:	e4c8      	b.n	8010dd4 <_strtod_l+0x45c>
 8011442:	bf00      	nop
 8011444:	f3af 8000 	nop.w
 8011448:	00000000 	.word	0x00000000
 801144c:	bff00000 	.word	0xbff00000
 8011450:	00000000 	.word	0x00000000
 8011454:	3ff00000 	.word	0x3ff00000
 8011458:	94a03595 	.word	0x94a03595
 801145c:	3fdfffff 	.word	0x3fdfffff
 8011460:	35afe535 	.word	0x35afe535
 8011464:	3fe00000 	.word	0x3fe00000
 8011468:	000fffff 	.word	0x000fffff
 801146c:	7ff00000 	.word	0x7ff00000
 8011470:	7fefffff 	.word	0x7fefffff
 8011474:	3ff00000 	.word	0x3ff00000
 8011478:	3fe00000 	.word	0x3fe00000
 801147c:	7fe00000 	.word	0x7fe00000
 8011480:	7c9fffff 	.word	0x7c9fffff
 8011484:	9b08      	ldr	r3, [sp, #32]
 8011486:	b323      	cbz	r3, 80114d2 <_strtod_l+0xb5a>
 8011488:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801148c:	d821      	bhi.n	80114d2 <_strtod_l+0xb5a>
 801148e:	a328      	add	r3, pc, #160	@ (adr r3, 8011530 <_strtod_l+0xbb8>)
 8011490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011494:	4630      	mov	r0, r6
 8011496:	4639      	mov	r1, r7
 8011498:	f7ef fb32 	bl	8000b00 <__aeabi_dcmple>
 801149c:	b1a0      	cbz	r0, 80114c8 <_strtod_l+0xb50>
 801149e:	4639      	mov	r1, r7
 80114a0:	4630      	mov	r0, r6
 80114a2:	f7ef fb89 	bl	8000bb8 <__aeabi_d2uiz>
 80114a6:	2801      	cmp	r0, #1
 80114a8:	bf38      	it	cc
 80114aa:	2001      	movcc	r0, #1
 80114ac:	f7ef f832 	bl	8000514 <__aeabi_ui2d>
 80114b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114b2:	4606      	mov	r6, r0
 80114b4:	460f      	mov	r7, r1
 80114b6:	b9fb      	cbnz	r3, 80114f8 <_strtod_l+0xb80>
 80114b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80114bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80114be:	9315      	str	r3, [sp, #84]	@ 0x54
 80114c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80114c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80114c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80114ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80114ce:	1b5b      	subs	r3, r3, r5
 80114d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80114d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80114d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80114da:	f7ff f8f1 	bl	80106c0 <__ulp>
 80114de:	4650      	mov	r0, sl
 80114e0:	ec53 2b10 	vmov	r2, r3, d0
 80114e4:	4659      	mov	r1, fp
 80114e6:	f7ef f88f 	bl	8000608 <__aeabi_dmul>
 80114ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80114ee:	f7ee fed5 	bl	800029c <__adddf3>
 80114f2:	4682      	mov	sl, r0
 80114f4:	468b      	mov	fp, r1
 80114f6:	e770      	b.n	80113da <_strtod_l+0xa62>
 80114f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80114fc:	e7e0      	b.n	80114c0 <_strtod_l+0xb48>
 80114fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8011538 <_strtod_l+0xbc0>)
 8011500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011504:	f7ef faf2 	bl	8000aec <__aeabi_dcmplt>
 8011508:	e798      	b.n	801143c <_strtod_l+0xac4>
 801150a:	2300      	movs	r3, #0
 801150c:	930e      	str	r3, [sp, #56]	@ 0x38
 801150e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011510:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011512:	6013      	str	r3, [r2, #0]
 8011514:	f7ff ba6d 	b.w	80109f2 <_strtod_l+0x7a>
 8011518:	2a65      	cmp	r2, #101	@ 0x65
 801151a:	f43f ab68 	beq.w	8010bee <_strtod_l+0x276>
 801151e:	2a45      	cmp	r2, #69	@ 0x45
 8011520:	f43f ab65 	beq.w	8010bee <_strtod_l+0x276>
 8011524:	2301      	movs	r3, #1
 8011526:	f7ff bba0 	b.w	8010c6a <_strtod_l+0x2f2>
 801152a:	bf00      	nop
 801152c:	f3af 8000 	nop.w
 8011530:	ffc00000 	.word	0xffc00000
 8011534:	41dfffff 	.word	0x41dfffff
 8011538:	94a03595 	.word	0x94a03595
 801153c:	3fcfffff 	.word	0x3fcfffff

08011540 <_strtod_r>:
 8011540:	4b01      	ldr	r3, [pc, #4]	@ (8011548 <_strtod_r+0x8>)
 8011542:	f7ff ba19 	b.w	8010978 <_strtod_l>
 8011546:	bf00      	nop
 8011548:	20000160 	.word	0x20000160

0801154c <_strtol_l.isra.0>:
 801154c:	2b24      	cmp	r3, #36	@ 0x24
 801154e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011552:	4686      	mov	lr, r0
 8011554:	4690      	mov	r8, r2
 8011556:	d801      	bhi.n	801155c <_strtol_l.isra.0+0x10>
 8011558:	2b01      	cmp	r3, #1
 801155a:	d106      	bne.n	801156a <_strtol_l.isra.0+0x1e>
 801155c:	f7fd fdb6 	bl	800f0cc <__errno>
 8011560:	2316      	movs	r3, #22
 8011562:	6003      	str	r3, [r0, #0]
 8011564:	2000      	movs	r0, #0
 8011566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801156a:	4834      	ldr	r0, [pc, #208]	@ (801163c <_strtol_l.isra.0+0xf0>)
 801156c:	460d      	mov	r5, r1
 801156e:	462a      	mov	r2, r5
 8011570:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011574:	5d06      	ldrb	r6, [r0, r4]
 8011576:	f016 0608 	ands.w	r6, r6, #8
 801157a:	d1f8      	bne.n	801156e <_strtol_l.isra.0+0x22>
 801157c:	2c2d      	cmp	r4, #45	@ 0x2d
 801157e:	d110      	bne.n	80115a2 <_strtol_l.isra.0+0x56>
 8011580:	782c      	ldrb	r4, [r5, #0]
 8011582:	2601      	movs	r6, #1
 8011584:	1c95      	adds	r5, r2, #2
 8011586:	f033 0210 	bics.w	r2, r3, #16
 801158a:	d115      	bne.n	80115b8 <_strtol_l.isra.0+0x6c>
 801158c:	2c30      	cmp	r4, #48	@ 0x30
 801158e:	d10d      	bne.n	80115ac <_strtol_l.isra.0+0x60>
 8011590:	782a      	ldrb	r2, [r5, #0]
 8011592:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011596:	2a58      	cmp	r2, #88	@ 0x58
 8011598:	d108      	bne.n	80115ac <_strtol_l.isra.0+0x60>
 801159a:	786c      	ldrb	r4, [r5, #1]
 801159c:	3502      	adds	r5, #2
 801159e:	2310      	movs	r3, #16
 80115a0:	e00a      	b.n	80115b8 <_strtol_l.isra.0+0x6c>
 80115a2:	2c2b      	cmp	r4, #43	@ 0x2b
 80115a4:	bf04      	itt	eq
 80115a6:	782c      	ldrbeq	r4, [r5, #0]
 80115a8:	1c95      	addeq	r5, r2, #2
 80115aa:	e7ec      	b.n	8011586 <_strtol_l.isra.0+0x3a>
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d1f6      	bne.n	801159e <_strtol_l.isra.0+0x52>
 80115b0:	2c30      	cmp	r4, #48	@ 0x30
 80115b2:	bf14      	ite	ne
 80115b4:	230a      	movne	r3, #10
 80115b6:	2308      	moveq	r3, #8
 80115b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80115bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80115c0:	2200      	movs	r2, #0
 80115c2:	fbbc f9f3 	udiv	r9, ip, r3
 80115c6:	4610      	mov	r0, r2
 80115c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80115cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80115d0:	2f09      	cmp	r7, #9
 80115d2:	d80f      	bhi.n	80115f4 <_strtol_l.isra.0+0xa8>
 80115d4:	463c      	mov	r4, r7
 80115d6:	42a3      	cmp	r3, r4
 80115d8:	dd1b      	ble.n	8011612 <_strtol_l.isra.0+0xc6>
 80115da:	1c57      	adds	r7, r2, #1
 80115dc:	d007      	beq.n	80115ee <_strtol_l.isra.0+0xa2>
 80115de:	4581      	cmp	r9, r0
 80115e0:	d314      	bcc.n	801160c <_strtol_l.isra.0+0xc0>
 80115e2:	d101      	bne.n	80115e8 <_strtol_l.isra.0+0x9c>
 80115e4:	45a2      	cmp	sl, r4
 80115e6:	db11      	blt.n	801160c <_strtol_l.isra.0+0xc0>
 80115e8:	fb00 4003 	mla	r0, r0, r3, r4
 80115ec:	2201      	movs	r2, #1
 80115ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80115f2:	e7eb      	b.n	80115cc <_strtol_l.isra.0+0x80>
 80115f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80115f8:	2f19      	cmp	r7, #25
 80115fa:	d801      	bhi.n	8011600 <_strtol_l.isra.0+0xb4>
 80115fc:	3c37      	subs	r4, #55	@ 0x37
 80115fe:	e7ea      	b.n	80115d6 <_strtol_l.isra.0+0x8a>
 8011600:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011604:	2f19      	cmp	r7, #25
 8011606:	d804      	bhi.n	8011612 <_strtol_l.isra.0+0xc6>
 8011608:	3c57      	subs	r4, #87	@ 0x57
 801160a:	e7e4      	b.n	80115d6 <_strtol_l.isra.0+0x8a>
 801160c:	f04f 32ff 	mov.w	r2, #4294967295
 8011610:	e7ed      	b.n	80115ee <_strtol_l.isra.0+0xa2>
 8011612:	1c53      	adds	r3, r2, #1
 8011614:	d108      	bne.n	8011628 <_strtol_l.isra.0+0xdc>
 8011616:	2322      	movs	r3, #34	@ 0x22
 8011618:	f8ce 3000 	str.w	r3, [lr]
 801161c:	4660      	mov	r0, ip
 801161e:	f1b8 0f00 	cmp.w	r8, #0
 8011622:	d0a0      	beq.n	8011566 <_strtol_l.isra.0+0x1a>
 8011624:	1e69      	subs	r1, r5, #1
 8011626:	e006      	b.n	8011636 <_strtol_l.isra.0+0xea>
 8011628:	b106      	cbz	r6, 801162c <_strtol_l.isra.0+0xe0>
 801162a:	4240      	negs	r0, r0
 801162c:	f1b8 0f00 	cmp.w	r8, #0
 8011630:	d099      	beq.n	8011566 <_strtol_l.isra.0+0x1a>
 8011632:	2a00      	cmp	r2, #0
 8011634:	d1f6      	bne.n	8011624 <_strtol_l.isra.0+0xd8>
 8011636:	f8c8 1000 	str.w	r1, [r8]
 801163a:	e794      	b.n	8011566 <_strtol_l.isra.0+0x1a>
 801163c:	08014eb1 	.word	0x08014eb1

08011640 <_strtol_r>:
 8011640:	f7ff bf84 	b.w	801154c <_strtol_l.isra.0>

08011644 <__ssputs_r>:
 8011644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011648:	688e      	ldr	r6, [r1, #8]
 801164a:	461f      	mov	r7, r3
 801164c:	42be      	cmp	r6, r7
 801164e:	680b      	ldr	r3, [r1, #0]
 8011650:	4682      	mov	sl, r0
 8011652:	460c      	mov	r4, r1
 8011654:	4690      	mov	r8, r2
 8011656:	d82d      	bhi.n	80116b4 <__ssputs_r+0x70>
 8011658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801165c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011660:	d026      	beq.n	80116b0 <__ssputs_r+0x6c>
 8011662:	6965      	ldr	r5, [r4, #20]
 8011664:	6909      	ldr	r1, [r1, #16]
 8011666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801166a:	eba3 0901 	sub.w	r9, r3, r1
 801166e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011672:	1c7b      	adds	r3, r7, #1
 8011674:	444b      	add	r3, r9
 8011676:	106d      	asrs	r5, r5, #1
 8011678:	429d      	cmp	r5, r3
 801167a:	bf38      	it	cc
 801167c:	461d      	movcc	r5, r3
 801167e:	0553      	lsls	r3, r2, #21
 8011680:	d527      	bpl.n	80116d2 <__ssputs_r+0x8e>
 8011682:	4629      	mov	r1, r5
 8011684:	f7fe fc24 	bl	800fed0 <_malloc_r>
 8011688:	4606      	mov	r6, r0
 801168a:	b360      	cbz	r0, 80116e6 <__ssputs_r+0xa2>
 801168c:	6921      	ldr	r1, [r4, #16]
 801168e:	464a      	mov	r2, r9
 8011690:	f000 fbee 	bl	8011e70 <memcpy>
 8011694:	89a3      	ldrh	r3, [r4, #12]
 8011696:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801169a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801169e:	81a3      	strh	r3, [r4, #12]
 80116a0:	6126      	str	r6, [r4, #16]
 80116a2:	6165      	str	r5, [r4, #20]
 80116a4:	444e      	add	r6, r9
 80116a6:	eba5 0509 	sub.w	r5, r5, r9
 80116aa:	6026      	str	r6, [r4, #0]
 80116ac:	60a5      	str	r5, [r4, #8]
 80116ae:	463e      	mov	r6, r7
 80116b0:	42be      	cmp	r6, r7
 80116b2:	d900      	bls.n	80116b6 <__ssputs_r+0x72>
 80116b4:	463e      	mov	r6, r7
 80116b6:	6820      	ldr	r0, [r4, #0]
 80116b8:	4632      	mov	r2, r6
 80116ba:	4641      	mov	r1, r8
 80116bc:	f000 fb9c 	bl	8011df8 <memmove>
 80116c0:	68a3      	ldr	r3, [r4, #8]
 80116c2:	1b9b      	subs	r3, r3, r6
 80116c4:	60a3      	str	r3, [r4, #8]
 80116c6:	6823      	ldr	r3, [r4, #0]
 80116c8:	4433      	add	r3, r6
 80116ca:	6023      	str	r3, [r4, #0]
 80116cc:	2000      	movs	r0, #0
 80116ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116d2:	462a      	mov	r2, r5
 80116d4:	f000 ff61 	bl	801259a <_realloc_r>
 80116d8:	4606      	mov	r6, r0
 80116da:	2800      	cmp	r0, #0
 80116dc:	d1e0      	bne.n	80116a0 <__ssputs_r+0x5c>
 80116de:	6921      	ldr	r1, [r4, #16]
 80116e0:	4650      	mov	r0, sl
 80116e2:	f7fe fb81 	bl	800fde8 <_free_r>
 80116e6:	230c      	movs	r3, #12
 80116e8:	f8ca 3000 	str.w	r3, [sl]
 80116ec:	89a3      	ldrh	r3, [r4, #12]
 80116ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116f2:	81a3      	strh	r3, [r4, #12]
 80116f4:	f04f 30ff 	mov.w	r0, #4294967295
 80116f8:	e7e9      	b.n	80116ce <__ssputs_r+0x8a>
	...

080116fc <_svfiprintf_r>:
 80116fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011700:	4698      	mov	r8, r3
 8011702:	898b      	ldrh	r3, [r1, #12]
 8011704:	061b      	lsls	r3, r3, #24
 8011706:	b09d      	sub	sp, #116	@ 0x74
 8011708:	4607      	mov	r7, r0
 801170a:	460d      	mov	r5, r1
 801170c:	4614      	mov	r4, r2
 801170e:	d510      	bpl.n	8011732 <_svfiprintf_r+0x36>
 8011710:	690b      	ldr	r3, [r1, #16]
 8011712:	b973      	cbnz	r3, 8011732 <_svfiprintf_r+0x36>
 8011714:	2140      	movs	r1, #64	@ 0x40
 8011716:	f7fe fbdb 	bl	800fed0 <_malloc_r>
 801171a:	6028      	str	r0, [r5, #0]
 801171c:	6128      	str	r0, [r5, #16]
 801171e:	b930      	cbnz	r0, 801172e <_svfiprintf_r+0x32>
 8011720:	230c      	movs	r3, #12
 8011722:	603b      	str	r3, [r7, #0]
 8011724:	f04f 30ff 	mov.w	r0, #4294967295
 8011728:	b01d      	add	sp, #116	@ 0x74
 801172a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801172e:	2340      	movs	r3, #64	@ 0x40
 8011730:	616b      	str	r3, [r5, #20]
 8011732:	2300      	movs	r3, #0
 8011734:	9309      	str	r3, [sp, #36]	@ 0x24
 8011736:	2320      	movs	r3, #32
 8011738:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801173c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011740:	2330      	movs	r3, #48	@ 0x30
 8011742:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80118e0 <_svfiprintf_r+0x1e4>
 8011746:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801174a:	f04f 0901 	mov.w	r9, #1
 801174e:	4623      	mov	r3, r4
 8011750:	469a      	mov	sl, r3
 8011752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011756:	b10a      	cbz	r2, 801175c <_svfiprintf_r+0x60>
 8011758:	2a25      	cmp	r2, #37	@ 0x25
 801175a:	d1f9      	bne.n	8011750 <_svfiprintf_r+0x54>
 801175c:	ebba 0b04 	subs.w	fp, sl, r4
 8011760:	d00b      	beq.n	801177a <_svfiprintf_r+0x7e>
 8011762:	465b      	mov	r3, fp
 8011764:	4622      	mov	r2, r4
 8011766:	4629      	mov	r1, r5
 8011768:	4638      	mov	r0, r7
 801176a:	f7ff ff6b 	bl	8011644 <__ssputs_r>
 801176e:	3001      	adds	r0, #1
 8011770:	f000 80a7 	beq.w	80118c2 <_svfiprintf_r+0x1c6>
 8011774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011776:	445a      	add	r2, fp
 8011778:	9209      	str	r2, [sp, #36]	@ 0x24
 801177a:	f89a 3000 	ldrb.w	r3, [sl]
 801177e:	2b00      	cmp	r3, #0
 8011780:	f000 809f 	beq.w	80118c2 <_svfiprintf_r+0x1c6>
 8011784:	2300      	movs	r3, #0
 8011786:	f04f 32ff 	mov.w	r2, #4294967295
 801178a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801178e:	f10a 0a01 	add.w	sl, sl, #1
 8011792:	9304      	str	r3, [sp, #16]
 8011794:	9307      	str	r3, [sp, #28]
 8011796:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801179a:	931a      	str	r3, [sp, #104]	@ 0x68
 801179c:	4654      	mov	r4, sl
 801179e:	2205      	movs	r2, #5
 80117a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117a4:	484e      	ldr	r0, [pc, #312]	@ (80118e0 <_svfiprintf_r+0x1e4>)
 80117a6:	f7ee fd1b 	bl	80001e0 <memchr>
 80117aa:	9a04      	ldr	r2, [sp, #16]
 80117ac:	b9d8      	cbnz	r0, 80117e6 <_svfiprintf_r+0xea>
 80117ae:	06d0      	lsls	r0, r2, #27
 80117b0:	bf44      	itt	mi
 80117b2:	2320      	movmi	r3, #32
 80117b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80117b8:	0711      	lsls	r1, r2, #28
 80117ba:	bf44      	itt	mi
 80117bc:	232b      	movmi	r3, #43	@ 0x2b
 80117be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80117c2:	f89a 3000 	ldrb.w	r3, [sl]
 80117c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80117c8:	d015      	beq.n	80117f6 <_svfiprintf_r+0xfa>
 80117ca:	9a07      	ldr	r2, [sp, #28]
 80117cc:	4654      	mov	r4, sl
 80117ce:	2000      	movs	r0, #0
 80117d0:	f04f 0c0a 	mov.w	ip, #10
 80117d4:	4621      	mov	r1, r4
 80117d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117da:	3b30      	subs	r3, #48	@ 0x30
 80117dc:	2b09      	cmp	r3, #9
 80117de:	d94b      	bls.n	8011878 <_svfiprintf_r+0x17c>
 80117e0:	b1b0      	cbz	r0, 8011810 <_svfiprintf_r+0x114>
 80117e2:	9207      	str	r2, [sp, #28]
 80117e4:	e014      	b.n	8011810 <_svfiprintf_r+0x114>
 80117e6:	eba0 0308 	sub.w	r3, r0, r8
 80117ea:	fa09 f303 	lsl.w	r3, r9, r3
 80117ee:	4313      	orrs	r3, r2
 80117f0:	9304      	str	r3, [sp, #16]
 80117f2:	46a2      	mov	sl, r4
 80117f4:	e7d2      	b.n	801179c <_svfiprintf_r+0xa0>
 80117f6:	9b03      	ldr	r3, [sp, #12]
 80117f8:	1d19      	adds	r1, r3, #4
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	9103      	str	r1, [sp, #12]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	bfbb      	ittet	lt
 8011802:	425b      	neglt	r3, r3
 8011804:	f042 0202 	orrlt.w	r2, r2, #2
 8011808:	9307      	strge	r3, [sp, #28]
 801180a:	9307      	strlt	r3, [sp, #28]
 801180c:	bfb8      	it	lt
 801180e:	9204      	strlt	r2, [sp, #16]
 8011810:	7823      	ldrb	r3, [r4, #0]
 8011812:	2b2e      	cmp	r3, #46	@ 0x2e
 8011814:	d10a      	bne.n	801182c <_svfiprintf_r+0x130>
 8011816:	7863      	ldrb	r3, [r4, #1]
 8011818:	2b2a      	cmp	r3, #42	@ 0x2a
 801181a:	d132      	bne.n	8011882 <_svfiprintf_r+0x186>
 801181c:	9b03      	ldr	r3, [sp, #12]
 801181e:	1d1a      	adds	r2, r3, #4
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	9203      	str	r2, [sp, #12]
 8011824:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011828:	3402      	adds	r4, #2
 801182a:	9305      	str	r3, [sp, #20]
 801182c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80118f0 <_svfiprintf_r+0x1f4>
 8011830:	7821      	ldrb	r1, [r4, #0]
 8011832:	2203      	movs	r2, #3
 8011834:	4650      	mov	r0, sl
 8011836:	f7ee fcd3 	bl	80001e0 <memchr>
 801183a:	b138      	cbz	r0, 801184c <_svfiprintf_r+0x150>
 801183c:	9b04      	ldr	r3, [sp, #16]
 801183e:	eba0 000a 	sub.w	r0, r0, sl
 8011842:	2240      	movs	r2, #64	@ 0x40
 8011844:	4082      	lsls	r2, r0
 8011846:	4313      	orrs	r3, r2
 8011848:	3401      	adds	r4, #1
 801184a:	9304      	str	r3, [sp, #16]
 801184c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011850:	4824      	ldr	r0, [pc, #144]	@ (80118e4 <_svfiprintf_r+0x1e8>)
 8011852:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011856:	2206      	movs	r2, #6
 8011858:	f7ee fcc2 	bl	80001e0 <memchr>
 801185c:	2800      	cmp	r0, #0
 801185e:	d036      	beq.n	80118ce <_svfiprintf_r+0x1d2>
 8011860:	4b21      	ldr	r3, [pc, #132]	@ (80118e8 <_svfiprintf_r+0x1ec>)
 8011862:	bb1b      	cbnz	r3, 80118ac <_svfiprintf_r+0x1b0>
 8011864:	9b03      	ldr	r3, [sp, #12]
 8011866:	3307      	adds	r3, #7
 8011868:	f023 0307 	bic.w	r3, r3, #7
 801186c:	3308      	adds	r3, #8
 801186e:	9303      	str	r3, [sp, #12]
 8011870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011872:	4433      	add	r3, r6
 8011874:	9309      	str	r3, [sp, #36]	@ 0x24
 8011876:	e76a      	b.n	801174e <_svfiprintf_r+0x52>
 8011878:	fb0c 3202 	mla	r2, ip, r2, r3
 801187c:	460c      	mov	r4, r1
 801187e:	2001      	movs	r0, #1
 8011880:	e7a8      	b.n	80117d4 <_svfiprintf_r+0xd8>
 8011882:	2300      	movs	r3, #0
 8011884:	3401      	adds	r4, #1
 8011886:	9305      	str	r3, [sp, #20]
 8011888:	4619      	mov	r1, r3
 801188a:	f04f 0c0a 	mov.w	ip, #10
 801188e:	4620      	mov	r0, r4
 8011890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011894:	3a30      	subs	r2, #48	@ 0x30
 8011896:	2a09      	cmp	r2, #9
 8011898:	d903      	bls.n	80118a2 <_svfiprintf_r+0x1a6>
 801189a:	2b00      	cmp	r3, #0
 801189c:	d0c6      	beq.n	801182c <_svfiprintf_r+0x130>
 801189e:	9105      	str	r1, [sp, #20]
 80118a0:	e7c4      	b.n	801182c <_svfiprintf_r+0x130>
 80118a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80118a6:	4604      	mov	r4, r0
 80118a8:	2301      	movs	r3, #1
 80118aa:	e7f0      	b.n	801188e <_svfiprintf_r+0x192>
 80118ac:	ab03      	add	r3, sp, #12
 80118ae:	9300      	str	r3, [sp, #0]
 80118b0:	462a      	mov	r2, r5
 80118b2:	4b0e      	ldr	r3, [pc, #56]	@ (80118ec <_svfiprintf_r+0x1f0>)
 80118b4:	a904      	add	r1, sp, #16
 80118b6:	4638      	mov	r0, r7
 80118b8:	f7fc fc82 	bl	800e1c0 <_printf_float>
 80118bc:	1c42      	adds	r2, r0, #1
 80118be:	4606      	mov	r6, r0
 80118c0:	d1d6      	bne.n	8011870 <_svfiprintf_r+0x174>
 80118c2:	89ab      	ldrh	r3, [r5, #12]
 80118c4:	065b      	lsls	r3, r3, #25
 80118c6:	f53f af2d 	bmi.w	8011724 <_svfiprintf_r+0x28>
 80118ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80118cc:	e72c      	b.n	8011728 <_svfiprintf_r+0x2c>
 80118ce:	ab03      	add	r3, sp, #12
 80118d0:	9300      	str	r3, [sp, #0]
 80118d2:	462a      	mov	r2, r5
 80118d4:	4b05      	ldr	r3, [pc, #20]	@ (80118ec <_svfiprintf_r+0x1f0>)
 80118d6:	a904      	add	r1, sp, #16
 80118d8:	4638      	mov	r0, r7
 80118da:	f7fc ff09 	bl	800e6f0 <_printf_i>
 80118de:	e7ed      	b.n	80118bc <_svfiprintf_r+0x1c0>
 80118e0:	08014ca9 	.word	0x08014ca9
 80118e4:	08014cb3 	.word	0x08014cb3
 80118e8:	0800e1c1 	.word	0x0800e1c1
 80118ec:	08011645 	.word	0x08011645
 80118f0:	08014caf 	.word	0x08014caf

080118f4 <__sfputc_r>:
 80118f4:	6893      	ldr	r3, [r2, #8]
 80118f6:	3b01      	subs	r3, #1
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	b410      	push	{r4}
 80118fc:	6093      	str	r3, [r2, #8]
 80118fe:	da08      	bge.n	8011912 <__sfputc_r+0x1e>
 8011900:	6994      	ldr	r4, [r2, #24]
 8011902:	42a3      	cmp	r3, r4
 8011904:	db01      	blt.n	801190a <__sfputc_r+0x16>
 8011906:	290a      	cmp	r1, #10
 8011908:	d103      	bne.n	8011912 <__sfputc_r+0x1e>
 801190a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801190e:	f000 b9df 	b.w	8011cd0 <__swbuf_r>
 8011912:	6813      	ldr	r3, [r2, #0]
 8011914:	1c58      	adds	r0, r3, #1
 8011916:	6010      	str	r0, [r2, #0]
 8011918:	7019      	strb	r1, [r3, #0]
 801191a:	4608      	mov	r0, r1
 801191c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011920:	4770      	bx	lr

08011922 <__sfputs_r>:
 8011922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011924:	4606      	mov	r6, r0
 8011926:	460f      	mov	r7, r1
 8011928:	4614      	mov	r4, r2
 801192a:	18d5      	adds	r5, r2, r3
 801192c:	42ac      	cmp	r4, r5
 801192e:	d101      	bne.n	8011934 <__sfputs_r+0x12>
 8011930:	2000      	movs	r0, #0
 8011932:	e007      	b.n	8011944 <__sfputs_r+0x22>
 8011934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011938:	463a      	mov	r2, r7
 801193a:	4630      	mov	r0, r6
 801193c:	f7ff ffda 	bl	80118f4 <__sfputc_r>
 8011940:	1c43      	adds	r3, r0, #1
 8011942:	d1f3      	bne.n	801192c <__sfputs_r+0xa>
 8011944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011948 <_vfiprintf_r>:
 8011948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	460d      	mov	r5, r1
 801194e:	b09d      	sub	sp, #116	@ 0x74
 8011950:	4614      	mov	r4, r2
 8011952:	4698      	mov	r8, r3
 8011954:	4606      	mov	r6, r0
 8011956:	b118      	cbz	r0, 8011960 <_vfiprintf_r+0x18>
 8011958:	6a03      	ldr	r3, [r0, #32]
 801195a:	b90b      	cbnz	r3, 8011960 <_vfiprintf_r+0x18>
 801195c:	f7fd fa80 	bl	800ee60 <__sinit>
 8011960:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011962:	07d9      	lsls	r1, r3, #31
 8011964:	d405      	bmi.n	8011972 <_vfiprintf_r+0x2a>
 8011966:	89ab      	ldrh	r3, [r5, #12]
 8011968:	059a      	lsls	r2, r3, #22
 801196a:	d402      	bmi.n	8011972 <_vfiprintf_r+0x2a>
 801196c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801196e:	f7fd fbd8 	bl	800f122 <__retarget_lock_acquire_recursive>
 8011972:	89ab      	ldrh	r3, [r5, #12]
 8011974:	071b      	lsls	r3, r3, #28
 8011976:	d501      	bpl.n	801197c <_vfiprintf_r+0x34>
 8011978:	692b      	ldr	r3, [r5, #16]
 801197a:	b99b      	cbnz	r3, 80119a4 <_vfiprintf_r+0x5c>
 801197c:	4629      	mov	r1, r5
 801197e:	4630      	mov	r0, r6
 8011980:	f000 f9e4 	bl	8011d4c <__swsetup_r>
 8011984:	b170      	cbz	r0, 80119a4 <_vfiprintf_r+0x5c>
 8011986:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011988:	07dc      	lsls	r4, r3, #31
 801198a:	d504      	bpl.n	8011996 <_vfiprintf_r+0x4e>
 801198c:	f04f 30ff 	mov.w	r0, #4294967295
 8011990:	b01d      	add	sp, #116	@ 0x74
 8011992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011996:	89ab      	ldrh	r3, [r5, #12]
 8011998:	0598      	lsls	r0, r3, #22
 801199a:	d4f7      	bmi.n	801198c <_vfiprintf_r+0x44>
 801199c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801199e:	f7fd fbc1 	bl	800f124 <__retarget_lock_release_recursive>
 80119a2:	e7f3      	b.n	801198c <_vfiprintf_r+0x44>
 80119a4:	2300      	movs	r3, #0
 80119a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80119a8:	2320      	movs	r3, #32
 80119aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80119ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80119b2:	2330      	movs	r3, #48	@ 0x30
 80119b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011b64 <_vfiprintf_r+0x21c>
 80119b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80119bc:	f04f 0901 	mov.w	r9, #1
 80119c0:	4623      	mov	r3, r4
 80119c2:	469a      	mov	sl, r3
 80119c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119c8:	b10a      	cbz	r2, 80119ce <_vfiprintf_r+0x86>
 80119ca:	2a25      	cmp	r2, #37	@ 0x25
 80119cc:	d1f9      	bne.n	80119c2 <_vfiprintf_r+0x7a>
 80119ce:	ebba 0b04 	subs.w	fp, sl, r4
 80119d2:	d00b      	beq.n	80119ec <_vfiprintf_r+0xa4>
 80119d4:	465b      	mov	r3, fp
 80119d6:	4622      	mov	r2, r4
 80119d8:	4629      	mov	r1, r5
 80119da:	4630      	mov	r0, r6
 80119dc:	f7ff ffa1 	bl	8011922 <__sfputs_r>
 80119e0:	3001      	adds	r0, #1
 80119e2:	f000 80a7 	beq.w	8011b34 <_vfiprintf_r+0x1ec>
 80119e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119e8:	445a      	add	r2, fp
 80119ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80119ec:	f89a 3000 	ldrb.w	r3, [sl]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	f000 809f 	beq.w	8011b34 <_vfiprintf_r+0x1ec>
 80119f6:	2300      	movs	r3, #0
 80119f8:	f04f 32ff 	mov.w	r2, #4294967295
 80119fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a00:	f10a 0a01 	add.w	sl, sl, #1
 8011a04:	9304      	str	r3, [sp, #16]
 8011a06:	9307      	str	r3, [sp, #28]
 8011a08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a0e:	4654      	mov	r4, sl
 8011a10:	2205      	movs	r2, #5
 8011a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a16:	4853      	ldr	r0, [pc, #332]	@ (8011b64 <_vfiprintf_r+0x21c>)
 8011a18:	f7ee fbe2 	bl	80001e0 <memchr>
 8011a1c:	9a04      	ldr	r2, [sp, #16]
 8011a1e:	b9d8      	cbnz	r0, 8011a58 <_vfiprintf_r+0x110>
 8011a20:	06d1      	lsls	r1, r2, #27
 8011a22:	bf44      	itt	mi
 8011a24:	2320      	movmi	r3, #32
 8011a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a2a:	0713      	lsls	r3, r2, #28
 8011a2c:	bf44      	itt	mi
 8011a2e:	232b      	movmi	r3, #43	@ 0x2b
 8011a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a34:	f89a 3000 	ldrb.w	r3, [sl]
 8011a38:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a3a:	d015      	beq.n	8011a68 <_vfiprintf_r+0x120>
 8011a3c:	9a07      	ldr	r2, [sp, #28]
 8011a3e:	4654      	mov	r4, sl
 8011a40:	2000      	movs	r0, #0
 8011a42:	f04f 0c0a 	mov.w	ip, #10
 8011a46:	4621      	mov	r1, r4
 8011a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a4c:	3b30      	subs	r3, #48	@ 0x30
 8011a4e:	2b09      	cmp	r3, #9
 8011a50:	d94b      	bls.n	8011aea <_vfiprintf_r+0x1a2>
 8011a52:	b1b0      	cbz	r0, 8011a82 <_vfiprintf_r+0x13a>
 8011a54:	9207      	str	r2, [sp, #28]
 8011a56:	e014      	b.n	8011a82 <_vfiprintf_r+0x13a>
 8011a58:	eba0 0308 	sub.w	r3, r0, r8
 8011a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8011a60:	4313      	orrs	r3, r2
 8011a62:	9304      	str	r3, [sp, #16]
 8011a64:	46a2      	mov	sl, r4
 8011a66:	e7d2      	b.n	8011a0e <_vfiprintf_r+0xc6>
 8011a68:	9b03      	ldr	r3, [sp, #12]
 8011a6a:	1d19      	adds	r1, r3, #4
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	9103      	str	r1, [sp, #12]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	bfbb      	ittet	lt
 8011a74:	425b      	neglt	r3, r3
 8011a76:	f042 0202 	orrlt.w	r2, r2, #2
 8011a7a:	9307      	strge	r3, [sp, #28]
 8011a7c:	9307      	strlt	r3, [sp, #28]
 8011a7e:	bfb8      	it	lt
 8011a80:	9204      	strlt	r2, [sp, #16]
 8011a82:	7823      	ldrb	r3, [r4, #0]
 8011a84:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a86:	d10a      	bne.n	8011a9e <_vfiprintf_r+0x156>
 8011a88:	7863      	ldrb	r3, [r4, #1]
 8011a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a8c:	d132      	bne.n	8011af4 <_vfiprintf_r+0x1ac>
 8011a8e:	9b03      	ldr	r3, [sp, #12]
 8011a90:	1d1a      	adds	r2, r3, #4
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	9203      	str	r2, [sp, #12]
 8011a96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011a9a:	3402      	adds	r4, #2
 8011a9c:	9305      	str	r3, [sp, #20]
 8011a9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011b74 <_vfiprintf_r+0x22c>
 8011aa2:	7821      	ldrb	r1, [r4, #0]
 8011aa4:	2203      	movs	r2, #3
 8011aa6:	4650      	mov	r0, sl
 8011aa8:	f7ee fb9a 	bl	80001e0 <memchr>
 8011aac:	b138      	cbz	r0, 8011abe <_vfiprintf_r+0x176>
 8011aae:	9b04      	ldr	r3, [sp, #16]
 8011ab0:	eba0 000a 	sub.w	r0, r0, sl
 8011ab4:	2240      	movs	r2, #64	@ 0x40
 8011ab6:	4082      	lsls	r2, r0
 8011ab8:	4313      	orrs	r3, r2
 8011aba:	3401      	adds	r4, #1
 8011abc:	9304      	str	r3, [sp, #16]
 8011abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ac2:	4829      	ldr	r0, [pc, #164]	@ (8011b68 <_vfiprintf_r+0x220>)
 8011ac4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ac8:	2206      	movs	r2, #6
 8011aca:	f7ee fb89 	bl	80001e0 <memchr>
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	d03f      	beq.n	8011b52 <_vfiprintf_r+0x20a>
 8011ad2:	4b26      	ldr	r3, [pc, #152]	@ (8011b6c <_vfiprintf_r+0x224>)
 8011ad4:	bb1b      	cbnz	r3, 8011b1e <_vfiprintf_r+0x1d6>
 8011ad6:	9b03      	ldr	r3, [sp, #12]
 8011ad8:	3307      	adds	r3, #7
 8011ada:	f023 0307 	bic.w	r3, r3, #7
 8011ade:	3308      	adds	r3, #8
 8011ae0:	9303      	str	r3, [sp, #12]
 8011ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ae4:	443b      	add	r3, r7
 8011ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ae8:	e76a      	b.n	80119c0 <_vfiprintf_r+0x78>
 8011aea:	fb0c 3202 	mla	r2, ip, r2, r3
 8011aee:	460c      	mov	r4, r1
 8011af0:	2001      	movs	r0, #1
 8011af2:	e7a8      	b.n	8011a46 <_vfiprintf_r+0xfe>
 8011af4:	2300      	movs	r3, #0
 8011af6:	3401      	adds	r4, #1
 8011af8:	9305      	str	r3, [sp, #20]
 8011afa:	4619      	mov	r1, r3
 8011afc:	f04f 0c0a 	mov.w	ip, #10
 8011b00:	4620      	mov	r0, r4
 8011b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b06:	3a30      	subs	r2, #48	@ 0x30
 8011b08:	2a09      	cmp	r2, #9
 8011b0a:	d903      	bls.n	8011b14 <_vfiprintf_r+0x1cc>
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d0c6      	beq.n	8011a9e <_vfiprintf_r+0x156>
 8011b10:	9105      	str	r1, [sp, #20]
 8011b12:	e7c4      	b.n	8011a9e <_vfiprintf_r+0x156>
 8011b14:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b18:	4604      	mov	r4, r0
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	e7f0      	b.n	8011b00 <_vfiprintf_r+0x1b8>
 8011b1e:	ab03      	add	r3, sp, #12
 8011b20:	9300      	str	r3, [sp, #0]
 8011b22:	462a      	mov	r2, r5
 8011b24:	4b12      	ldr	r3, [pc, #72]	@ (8011b70 <_vfiprintf_r+0x228>)
 8011b26:	a904      	add	r1, sp, #16
 8011b28:	4630      	mov	r0, r6
 8011b2a:	f7fc fb49 	bl	800e1c0 <_printf_float>
 8011b2e:	4607      	mov	r7, r0
 8011b30:	1c78      	adds	r0, r7, #1
 8011b32:	d1d6      	bne.n	8011ae2 <_vfiprintf_r+0x19a>
 8011b34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011b36:	07d9      	lsls	r1, r3, #31
 8011b38:	d405      	bmi.n	8011b46 <_vfiprintf_r+0x1fe>
 8011b3a:	89ab      	ldrh	r3, [r5, #12]
 8011b3c:	059a      	lsls	r2, r3, #22
 8011b3e:	d402      	bmi.n	8011b46 <_vfiprintf_r+0x1fe>
 8011b40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b42:	f7fd faef 	bl	800f124 <__retarget_lock_release_recursive>
 8011b46:	89ab      	ldrh	r3, [r5, #12]
 8011b48:	065b      	lsls	r3, r3, #25
 8011b4a:	f53f af1f 	bmi.w	801198c <_vfiprintf_r+0x44>
 8011b4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b50:	e71e      	b.n	8011990 <_vfiprintf_r+0x48>
 8011b52:	ab03      	add	r3, sp, #12
 8011b54:	9300      	str	r3, [sp, #0]
 8011b56:	462a      	mov	r2, r5
 8011b58:	4b05      	ldr	r3, [pc, #20]	@ (8011b70 <_vfiprintf_r+0x228>)
 8011b5a:	a904      	add	r1, sp, #16
 8011b5c:	4630      	mov	r0, r6
 8011b5e:	f7fc fdc7 	bl	800e6f0 <_printf_i>
 8011b62:	e7e4      	b.n	8011b2e <_vfiprintf_r+0x1e6>
 8011b64:	08014ca9 	.word	0x08014ca9
 8011b68:	08014cb3 	.word	0x08014cb3
 8011b6c:	0800e1c1 	.word	0x0800e1c1
 8011b70:	08011923 	.word	0x08011923
 8011b74:	08014caf 	.word	0x08014caf

08011b78 <__sflush_r>:
 8011b78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b80:	0716      	lsls	r6, r2, #28
 8011b82:	4605      	mov	r5, r0
 8011b84:	460c      	mov	r4, r1
 8011b86:	d454      	bmi.n	8011c32 <__sflush_r+0xba>
 8011b88:	684b      	ldr	r3, [r1, #4]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	dc02      	bgt.n	8011b94 <__sflush_r+0x1c>
 8011b8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	dd48      	ble.n	8011c26 <__sflush_r+0xae>
 8011b94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b96:	2e00      	cmp	r6, #0
 8011b98:	d045      	beq.n	8011c26 <__sflush_r+0xae>
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011ba0:	682f      	ldr	r7, [r5, #0]
 8011ba2:	6a21      	ldr	r1, [r4, #32]
 8011ba4:	602b      	str	r3, [r5, #0]
 8011ba6:	d030      	beq.n	8011c0a <__sflush_r+0x92>
 8011ba8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011baa:	89a3      	ldrh	r3, [r4, #12]
 8011bac:	0759      	lsls	r1, r3, #29
 8011bae:	d505      	bpl.n	8011bbc <__sflush_r+0x44>
 8011bb0:	6863      	ldr	r3, [r4, #4]
 8011bb2:	1ad2      	subs	r2, r2, r3
 8011bb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011bb6:	b10b      	cbz	r3, 8011bbc <__sflush_r+0x44>
 8011bb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011bba:	1ad2      	subs	r2, r2, r3
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011bc0:	6a21      	ldr	r1, [r4, #32]
 8011bc2:	4628      	mov	r0, r5
 8011bc4:	47b0      	blx	r6
 8011bc6:	1c43      	adds	r3, r0, #1
 8011bc8:	89a3      	ldrh	r3, [r4, #12]
 8011bca:	d106      	bne.n	8011bda <__sflush_r+0x62>
 8011bcc:	6829      	ldr	r1, [r5, #0]
 8011bce:	291d      	cmp	r1, #29
 8011bd0:	d82b      	bhi.n	8011c2a <__sflush_r+0xb2>
 8011bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8011c7c <__sflush_r+0x104>)
 8011bd4:	40ca      	lsrs	r2, r1
 8011bd6:	07d6      	lsls	r6, r2, #31
 8011bd8:	d527      	bpl.n	8011c2a <__sflush_r+0xb2>
 8011bda:	2200      	movs	r2, #0
 8011bdc:	6062      	str	r2, [r4, #4]
 8011bde:	04d9      	lsls	r1, r3, #19
 8011be0:	6922      	ldr	r2, [r4, #16]
 8011be2:	6022      	str	r2, [r4, #0]
 8011be4:	d504      	bpl.n	8011bf0 <__sflush_r+0x78>
 8011be6:	1c42      	adds	r2, r0, #1
 8011be8:	d101      	bne.n	8011bee <__sflush_r+0x76>
 8011bea:	682b      	ldr	r3, [r5, #0]
 8011bec:	b903      	cbnz	r3, 8011bf0 <__sflush_r+0x78>
 8011bee:	6560      	str	r0, [r4, #84]	@ 0x54
 8011bf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011bf2:	602f      	str	r7, [r5, #0]
 8011bf4:	b1b9      	cbz	r1, 8011c26 <__sflush_r+0xae>
 8011bf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011bfa:	4299      	cmp	r1, r3
 8011bfc:	d002      	beq.n	8011c04 <__sflush_r+0x8c>
 8011bfe:	4628      	mov	r0, r5
 8011c00:	f7fe f8f2 	bl	800fde8 <_free_r>
 8011c04:	2300      	movs	r3, #0
 8011c06:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c08:	e00d      	b.n	8011c26 <__sflush_r+0xae>
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	4628      	mov	r0, r5
 8011c0e:	47b0      	blx	r6
 8011c10:	4602      	mov	r2, r0
 8011c12:	1c50      	adds	r0, r2, #1
 8011c14:	d1c9      	bne.n	8011baa <__sflush_r+0x32>
 8011c16:	682b      	ldr	r3, [r5, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d0c6      	beq.n	8011baa <__sflush_r+0x32>
 8011c1c:	2b1d      	cmp	r3, #29
 8011c1e:	d001      	beq.n	8011c24 <__sflush_r+0xac>
 8011c20:	2b16      	cmp	r3, #22
 8011c22:	d11e      	bne.n	8011c62 <__sflush_r+0xea>
 8011c24:	602f      	str	r7, [r5, #0]
 8011c26:	2000      	movs	r0, #0
 8011c28:	e022      	b.n	8011c70 <__sflush_r+0xf8>
 8011c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c2e:	b21b      	sxth	r3, r3
 8011c30:	e01b      	b.n	8011c6a <__sflush_r+0xf2>
 8011c32:	690f      	ldr	r7, [r1, #16]
 8011c34:	2f00      	cmp	r7, #0
 8011c36:	d0f6      	beq.n	8011c26 <__sflush_r+0xae>
 8011c38:	0793      	lsls	r3, r2, #30
 8011c3a:	680e      	ldr	r6, [r1, #0]
 8011c3c:	bf08      	it	eq
 8011c3e:	694b      	ldreq	r3, [r1, #20]
 8011c40:	600f      	str	r7, [r1, #0]
 8011c42:	bf18      	it	ne
 8011c44:	2300      	movne	r3, #0
 8011c46:	eba6 0807 	sub.w	r8, r6, r7
 8011c4a:	608b      	str	r3, [r1, #8]
 8011c4c:	f1b8 0f00 	cmp.w	r8, #0
 8011c50:	dde9      	ble.n	8011c26 <__sflush_r+0xae>
 8011c52:	6a21      	ldr	r1, [r4, #32]
 8011c54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011c56:	4643      	mov	r3, r8
 8011c58:	463a      	mov	r2, r7
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	47b0      	blx	r6
 8011c5e:	2800      	cmp	r0, #0
 8011c60:	dc08      	bgt.n	8011c74 <__sflush_r+0xfc>
 8011c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c6a:	81a3      	strh	r3, [r4, #12]
 8011c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c74:	4407      	add	r7, r0
 8011c76:	eba8 0800 	sub.w	r8, r8, r0
 8011c7a:	e7e7      	b.n	8011c4c <__sflush_r+0xd4>
 8011c7c:	20400001 	.word	0x20400001

08011c80 <_fflush_r>:
 8011c80:	b538      	push	{r3, r4, r5, lr}
 8011c82:	690b      	ldr	r3, [r1, #16]
 8011c84:	4605      	mov	r5, r0
 8011c86:	460c      	mov	r4, r1
 8011c88:	b913      	cbnz	r3, 8011c90 <_fflush_r+0x10>
 8011c8a:	2500      	movs	r5, #0
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	bd38      	pop	{r3, r4, r5, pc}
 8011c90:	b118      	cbz	r0, 8011c9a <_fflush_r+0x1a>
 8011c92:	6a03      	ldr	r3, [r0, #32]
 8011c94:	b90b      	cbnz	r3, 8011c9a <_fflush_r+0x1a>
 8011c96:	f7fd f8e3 	bl	800ee60 <__sinit>
 8011c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d0f3      	beq.n	8011c8a <_fflush_r+0xa>
 8011ca2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011ca4:	07d0      	lsls	r0, r2, #31
 8011ca6:	d404      	bmi.n	8011cb2 <_fflush_r+0x32>
 8011ca8:	0599      	lsls	r1, r3, #22
 8011caa:	d402      	bmi.n	8011cb2 <_fflush_r+0x32>
 8011cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011cae:	f7fd fa38 	bl	800f122 <__retarget_lock_acquire_recursive>
 8011cb2:	4628      	mov	r0, r5
 8011cb4:	4621      	mov	r1, r4
 8011cb6:	f7ff ff5f 	bl	8011b78 <__sflush_r>
 8011cba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011cbc:	07da      	lsls	r2, r3, #31
 8011cbe:	4605      	mov	r5, r0
 8011cc0:	d4e4      	bmi.n	8011c8c <_fflush_r+0xc>
 8011cc2:	89a3      	ldrh	r3, [r4, #12]
 8011cc4:	059b      	lsls	r3, r3, #22
 8011cc6:	d4e1      	bmi.n	8011c8c <_fflush_r+0xc>
 8011cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011cca:	f7fd fa2b 	bl	800f124 <__retarget_lock_release_recursive>
 8011cce:	e7dd      	b.n	8011c8c <_fflush_r+0xc>

08011cd0 <__swbuf_r>:
 8011cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cd2:	460e      	mov	r6, r1
 8011cd4:	4614      	mov	r4, r2
 8011cd6:	4605      	mov	r5, r0
 8011cd8:	b118      	cbz	r0, 8011ce2 <__swbuf_r+0x12>
 8011cda:	6a03      	ldr	r3, [r0, #32]
 8011cdc:	b90b      	cbnz	r3, 8011ce2 <__swbuf_r+0x12>
 8011cde:	f7fd f8bf 	bl	800ee60 <__sinit>
 8011ce2:	69a3      	ldr	r3, [r4, #24]
 8011ce4:	60a3      	str	r3, [r4, #8]
 8011ce6:	89a3      	ldrh	r3, [r4, #12]
 8011ce8:	071a      	lsls	r2, r3, #28
 8011cea:	d501      	bpl.n	8011cf0 <__swbuf_r+0x20>
 8011cec:	6923      	ldr	r3, [r4, #16]
 8011cee:	b943      	cbnz	r3, 8011d02 <__swbuf_r+0x32>
 8011cf0:	4621      	mov	r1, r4
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	f000 f82a 	bl	8011d4c <__swsetup_r>
 8011cf8:	b118      	cbz	r0, 8011d02 <__swbuf_r+0x32>
 8011cfa:	f04f 37ff 	mov.w	r7, #4294967295
 8011cfe:	4638      	mov	r0, r7
 8011d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d02:	6823      	ldr	r3, [r4, #0]
 8011d04:	6922      	ldr	r2, [r4, #16]
 8011d06:	1a98      	subs	r0, r3, r2
 8011d08:	6963      	ldr	r3, [r4, #20]
 8011d0a:	b2f6      	uxtb	r6, r6
 8011d0c:	4283      	cmp	r3, r0
 8011d0e:	4637      	mov	r7, r6
 8011d10:	dc05      	bgt.n	8011d1e <__swbuf_r+0x4e>
 8011d12:	4621      	mov	r1, r4
 8011d14:	4628      	mov	r0, r5
 8011d16:	f7ff ffb3 	bl	8011c80 <_fflush_r>
 8011d1a:	2800      	cmp	r0, #0
 8011d1c:	d1ed      	bne.n	8011cfa <__swbuf_r+0x2a>
 8011d1e:	68a3      	ldr	r3, [r4, #8]
 8011d20:	3b01      	subs	r3, #1
 8011d22:	60a3      	str	r3, [r4, #8]
 8011d24:	6823      	ldr	r3, [r4, #0]
 8011d26:	1c5a      	adds	r2, r3, #1
 8011d28:	6022      	str	r2, [r4, #0]
 8011d2a:	701e      	strb	r6, [r3, #0]
 8011d2c:	6962      	ldr	r2, [r4, #20]
 8011d2e:	1c43      	adds	r3, r0, #1
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d004      	beq.n	8011d3e <__swbuf_r+0x6e>
 8011d34:	89a3      	ldrh	r3, [r4, #12]
 8011d36:	07db      	lsls	r3, r3, #31
 8011d38:	d5e1      	bpl.n	8011cfe <__swbuf_r+0x2e>
 8011d3a:	2e0a      	cmp	r6, #10
 8011d3c:	d1df      	bne.n	8011cfe <__swbuf_r+0x2e>
 8011d3e:	4621      	mov	r1, r4
 8011d40:	4628      	mov	r0, r5
 8011d42:	f7ff ff9d 	bl	8011c80 <_fflush_r>
 8011d46:	2800      	cmp	r0, #0
 8011d48:	d0d9      	beq.n	8011cfe <__swbuf_r+0x2e>
 8011d4a:	e7d6      	b.n	8011cfa <__swbuf_r+0x2a>

08011d4c <__swsetup_r>:
 8011d4c:	b538      	push	{r3, r4, r5, lr}
 8011d4e:	4b29      	ldr	r3, [pc, #164]	@ (8011df4 <__swsetup_r+0xa8>)
 8011d50:	4605      	mov	r5, r0
 8011d52:	6818      	ldr	r0, [r3, #0]
 8011d54:	460c      	mov	r4, r1
 8011d56:	b118      	cbz	r0, 8011d60 <__swsetup_r+0x14>
 8011d58:	6a03      	ldr	r3, [r0, #32]
 8011d5a:	b90b      	cbnz	r3, 8011d60 <__swsetup_r+0x14>
 8011d5c:	f7fd f880 	bl	800ee60 <__sinit>
 8011d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d64:	0719      	lsls	r1, r3, #28
 8011d66:	d422      	bmi.n	8011dae <__swsetup_r+0x62>
 8011d68:	06da      	lsls	r2, r3, #27
 8011d6a:	d407      	bmi.n	8011d7c <__swsetup_r+0x30>
 8011d6c:	2209      	movs	r2, #9
 8011d6e:	602a      	str	r2, [r5, #0]
 8011d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d74:	81a3      	strh	r3, [r4, #12]
 8011d76:	f04f 30ff 	mov.w	r0, #4294967295
 8011d7a:	e033      	b.n	8011de4 <__swsetup_r+0x98>
 8011d7c:	0758      	lsls	r0, r3, #29
 8011d7e:	d512      	bpl.n	8011da6 <__swsetup_r+0x5a>
 8011d80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d82:	b141      	cbz	r1, 8011d96 <__swsetup_r+0x4a>
 8011d84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d88:	4299      	cmp	r1, r3
 8011d8a:	d002      	beq.n	8011d92 <__swsetup_r+0x46>
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	f7fe f82b 	bl	800fde8 <_free_r>
 8011d92:	2300      	movs	r3, #0
 8011d94:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d96:	89a3      	ldrh	r3, [r4, #12]
 8011d98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011d9c:	81a3      	strh	r3, [r4, #12]
 8011d9e:	2300      	movs	r3, #0
 8011da0:	6063      	str	r3, [r4, #4]
 8011da2:	6923      	ldr	r3, [r4, #16]
 8011da4:	6023      	str	r3, [r4, #0]
 8011da6:	89a3      	ldrh	r3, [r4, #12]
 8011da8:	f043 0308 	orr.w	r3, r3, #8
 8011dac:	81a3      	strh	r3, [r4, #12]
 8011dae:	6923      	ldr	r3, [r4, #16]
 8011db0:	b94b      	cbnz	r3, 8011dc6 <__swsetup_r+0x7a>
 8011db2:	89a3      	ldrh	r3, [r4, #12]
 8011db4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011dbc:	d003      	beq.n	8011dc6 <__swsetup_r+0x7a>
 8011dbe:	4621      	mov	r1, r4
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	f000 fc5d 	bl	8012680 <__smakebuf_r>
 8011dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dca:	f013 0201 	ands.w	r2, r3, #1
 8011dce:	d00a      	beq.n	8011de6 <__swsetup_r+0x9a>
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	60a2      	str	r2, [r4, #8]
 8011dd4:	6962      	ldr	r2, [r4, #20]
 8011dd6:	4252      	negs	r2, r2
 8011dd8:	61a2      	str	r2, [r4, #24]
 8011dda:	6922      	ldr	r2, [r4, #16]
 8011ddc:	b942      	cbnz	r2, 8011df0 <__swsetup_r+0xa4>
 8011dde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011de2:	d1c5      	bne.n	8011d70 <__swsetup_r+0x24>
 8011de4:	bd38      	pop	{r3, r4, r5, pc}
 8011de6:	0799      	lsls	r1, r3, #30
 8011de8:	bf58      	it	pl
 8011dea:	6962      	ldrpl	r2, [r4, #20]
 8011dec:	60a2      	str	r2, [r4, #8]
 8011dee:	e7f4      	b.n	8011dda <__swsetup_r+0x8e>
 8011df0:	2000      	movs	r0, #0
 8011df2:	e7f7      	b.n	8011de4 <__swsetup_r+0x98>
 8011df4:	20000110 	.word	0x20000110

08011df8 <memmove>:
 8011df8:	4288      	cmp	r0, r1
 8011dfa:	b510      	push	{r4, lr}
 8011dfc:	eb01 0402 	add.w	r4, r1, r2
 8011e00:	d902      	bls.n	8011e08 <memmove+0x10>
 8011e02:	4284      	cmp	r4, r0
 8011e04:	4623      	mov	r3, r4
 8011e06:	d807      	bhi.n	8011e18 <memmove+0x20>
 8011e08:	1e43      	subs	r3, r0, #1
 8011e0a:	42a1      	cmp	r1, r4
 8011e0c:	d008      	beq.n	8011e20 <memmove+0x28>
 8011e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e16:	e7f8      	b.n	8011e0a <memmove+0x12>
 8011e18:	4402      	add	r2, r0
 8011e1a:	4601      	mov	r1, r0
 8011e1c:	428a      	cmp	r2, r1
 8011e1e:	d100      	bne.n	8011e22 <memmove+0x2a>
 8011e20:	bd10      	pop	{r4, pc}
 8011e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e2a:	e7f7      	b.n	8011e1c <memmove+0x24>

08011e2c <strncmp>:
 8011e2c:	b510      	push	{r4, lr}
 8011e2e:	b16a      	cbz	r2, 8011e4c <strncmp+0x20>
 8011e30:	3901      	subs	r1, #1
 8011e32:	1884      	adds	r4, r0, r2
 8011e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e38:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d103      	bne.n	8011e48 <strncmp+0x1c>
 8011e40:	42a0      	cmp	r0, r4
 8011e42:	d001      	beq.n	8011e48 <strncmp+0x1c>
 8011e44:	2a00      	cmp	r2, #0
 8011e46:	d1f5      	bne.n	8011e34 <strncmp+0x8>
 8011e48:	1ad0      	subs	r0, r2, r3
 8011e4a:	bd10      	pop	{r4, pc}
 8011e4c:	4610      	mov	r0, r2
 8011e4e:	e7fc      	b.n	8011e4a <strncmp+0x1e>

08011e50 <_sbrk_r>:
 8011e50:	b538      	push	{r3, r4, r5, lr}
 8011e52:	4d06      	ldr	r5, [pc, #24]	@ (8011e6c <_sbrk_r+0x1c>)
 8011e54:	2300      	movs	r3, #0
 8011e56:	4604      	mov	r4, r0
 8011e58:	4608      	mov	r0, r1
 8011e5a:	602b      	str	r3, [r5, #0]
 8011e5c:	f7f2 feaa 	bl	8004bb4 <_sbrk>
 8011e60:	1c43      	adds	r3, r0, #1
 8011e62:	d102      	bne.n	8011e6a <_sbrk_r+0x1a>
 8011e64:	682b      	ldr	r3, [r5, #0]
 8011e66:	b103      	cbz	r3, 8011e6a <_sbrk_r+0x1a>
 8011e68:	6023      	str	r3, [r4, #0]
 8011e6a:	bd38      	pop	{r3, r4, r5, pc}
 8011e6c:	200025ec 	.word	0x200025ec

08011e70 <memcpy>:
 8011e70:	440a      	add	r2, r1
 8011e72:	4291      	cmp	r1, r2
 8011e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e78:	d100      	bne.n	8011e7c <memcpy+0xc>
 8011e7a:	4770      	bx	lr
 8011e7c:	b510      	push	{r4, lr}
 8011e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e86:	4291      	cmp	r1, r2
 8011e88:	d1f9      	bne.n	8011e7e <memcpy+0xe>
 8011e8a:	bd10      	pop	{r4, pc}
 8011e8c:	0000      	movs	r0, r0
	...

08011e90 <nan>:
 8011e90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011e98 <nan+0x8>
 8011e94:	4770      	bx	lr
 8011e96:	bf00      	nop
 8011e98:	00000000 	.word	0x00000000
 8011e9c:	7ff80000 	.word	0x7ff80000

08011ea0 <__assert_func>:
 8011ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ea2:	4614      	mov	r4, r2
 8011ea4:	461a      	mov	r2, r3
 8011ea6:	4b09      	ldr	r3, [pc, #36]	@ (8011ecc <__assert_func+0x2c>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	4605      	mov	r5, r0
 8011eac:	68d8      	ldr	r0, [r3, #12]
 8011eae:	b14c      	cbz	r4, 8011ec4 <__assert_func+0x24>
 8011eb0:	4b07      	ldr	r3, [pc, #28]	@ (8011ed0 <__assert_func+0x30>)
 8011eb2:	9100      	str	r1, [sp, #0]
 8011eb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011eb8:	4906      	ldr	r1, [pc, #24]	@ (8011ed4 <__assert_func+0x34>)
 8011eba:	462b      	mov	r3, r5
 8011ebc:	f000 fba8 	bl	8012610 <fiprintf>
 8011ec0:	f000 fc3c 	bl	801273c <abort>
 8011ec4:	4b04      	ldr	r3, [pc, #16]	@ (8011ed8 <__assert_func+0x38>)
 8011ec6:	461c      	mov	r4, r3
 8011ec8:	e7f3      	b.n	8011eb2 <__assert_func+0x12>
 8011eca:	bf00      	nop
 8011ecc:	20000110 	.word	0x20000110
 8011ed0:	08014cc2 	.word	0x08014cc2
 8011ed4:	08014ccf 	.word	0x08014ccf
 8011ed8:	08014cfd 	.word	0x08014cfd

08011edc <_calloc_r>:
 8011edc:	b570      	push	{r4, r5, r6, lr}
 8011ede:	fba1 5402 	umull	r5, r4, r1, r2
 8011ee2:	b934      	cbnz	r4, 8011ef2 <_calloc_r+0x16>
 8011ee4:	4629      	mov	r1, r5
 8011ee6:	f7fd fff3 	bl	800fed0 <_malloc_r>
 8011eea:	4606      	mov	r6, r0
 8011eec:	b928      	cbnz	r0, 8011efa <_calloc_r+0x1e>
 8011eee:	4630      	mov	r0, r6
 8011ef0:	bd70      	pop	{r4, r5, r6, pc}
 8011ef2:	220c      	movs	r2, #12
 8011ef4:	6002      	str	r2, [r0, #0]
 8011ef6:	2600      	movs	r6, #0
 8011ef8:	e7f9      	b.n	8011eee <_calloc_r+0x12>
 8011efa:	462a      	mov	r2, r5
 8011efc:	4621      	mov	r1, r4
 8011efe:	f7fd f892 	bl	800f026 <memset>
 8011f02:	e7f4      	b.n	8011eee <_calloc_r+0x12>

08011f04 <rshift>:
 8011f04:	6903      	ldr	r3, [r0, #16]
 8011f06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011f0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011f12:	f100 0414 	add.w	r4, r0, #20
 8011f16:	dd45      	ble.n	8011fa4 <rshift+0xa0>
 8011f18:	f011 011f 	ands.w	r1, r1, #31
 8011f1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011f20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011f24:	d10c      	bne.n	8011f40 <rshift+0x3c>
 8011f26:	f100 0710 	add.w	r7, r0, #16
 8011f2a:	4629      	mov	r1, r5
 8011f2c:	42b1      	cmp	r1, r6
 8011f2e:	d334      	bcc.n	8011f9a <rshift+0x96>
 8011f30:	1a9b      	subs	r3, r3, r2
 8011f32:	009b      	lsls	r3, r3, #2
 8011f34:	1eea      	subs	r2, r5, #3
 8011f36:	4296      	cmp	r6, r2
 8011f38:	bf38      	it	cc
 8011f3a:	2300      	movcc	r3, #0
 8011f3c:	4423      	add	r3, r4
 8011f3e:	e015      	b.n	8011f6c <rshift+0x68>
 8011f40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011f44:	f1c1 0820 	rsb	r8, r1, #32
 8011f48:	40cf      	lsrs	r7, r1
 8011f4a:	f105 0e04 	add.w	lr, r5, #4
 8011f4e:	46a1      	mov	r9, r4
 8011f50:	4576      	cmp	r6, lr
 8011f52:	46f4      	mov	ip, lr
 8011f54:	d815      	bhi.n	8011f82 <rshift+0x7e>
 8011f56:	1a9a      	subs	r2, r3, r2
 8011f58:	0092      	lsls	r2, r2, #2
 8011f5a:	3a04      	subs	r2, #4
 8011f5c:	3501      	adds	r5, #1
 8011f5e:	42ae      	cmp	r6, r5
 8011f60:	bf38      	it	cc
 8011f62:	2200      	movcc	r2, #0
 8011f64:	18a3      	adds	r3, r4, r2
 8011f66:	50a7      	str	r7, [r4, r2]
 8011f68:	b107      	cbz	r7, 8011f6c <rshift+0x68>
 8011f6a:	3304      	adds	r3, #4
 8011f6c:	1b1a      	subs	r2, r3, r4
 8011f6e:	42a3      	cmp	r3, r4
 8011f70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011f74:	bf08      	it	eq
 8011f76:	2300      	moveq	r3, #0
 8011f78:	6102      	str	r2, [r0, #16]
 8011f7a:	bf08      	it	eq
 8011f7c:	6143      	streq	r3, [r0, #20]
 8011f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f82:	f8dc c000 	ldr.w	ip, [ip]
 8011f86:	fa0c fc08 	lsl.w	ip, ip, r8
 8011f8a:	ea4c 0707 	orr.w	r7, ip, r7
 8011f8e:	f849 7b04 	str.w	r7, [r9], #4
 8011f92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011f96:	40cf      	lsrs	r7, r1
 8011f98:	e7da      	b.n	8011f50 <rshift+0x4c>
 8011f9a:	f851 cb04 	ldr.w	ip, [r1], #4
 8011f9e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011fa2:	e7c3      	b.n	8011f2c <rshift+0x28>
 8011fa4:	4623      	mov	r3, r4
 8011fa6:	e7e1      	b.n	8011f6c <rshift+0x68>

08011fa8 <__hexdig_fun>:
 8011fa8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011fac:	2b09      	cmp	r3, #9
 8011fae:	d802      	bhi.n	8011fb6 <__hexdig_fun+0xe>
 8011fb0:	3820      	subs	r0, #32
 8011fb2:	b2c0      	uxtb	r0, r0
 8011fb4:	4770      	bx	lr
 8011fb6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011fba:	2b05      	cmp	r3, #5
 8011fbc:	d801      	bhi.n	8011fc2 <__hexdig_fun+0x1a>
 8011fbe:	3847      	subs	r0, #71	@ 0x47
 8011fc0:	e7f7      	b.n	8011fb2 <__hexdig_fun+0xa>
 8011fc2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011fc6:	2b05      	cmp	r3, #5
 8011fc8:	d801      	bhi.n	8011fce <__hexdig_fun+0x26>
 8011fca:	3827      	subs	r0, #39	@ 0x27
 8011fcc:	e7f1      	b.n	8011fb2 <__hexdig_fun+0xa>
 8011fce:	2000      	movs	r0, #0
 8011fd0:	4770      	bx	lr
	...

08011fd4 <__gethex>:
 8011fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd8:	b085      	sub	sp, #20
 8011fda:	468a      	mov	sl, r1
 8011fdc:	9302      	str	r3, [sp, #8]
 8011fde:	680b      	ldr	r3, [r1, #0]
 8011fe0:	9001      	str	r0, [sp, #4]
 8011fe2:	4690      	mov	r8, r2
 8011fe4:	1c9c      	adds	r4, r3, #2
 8011fe6:	46a1      	mov	r9, r4
 8011fe8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011fec:	2830      	cmp	r0, #48	@ 0x30
 8011fee:	d0fa      	beq.n	8011fe6 <__gethex+0x12>
 8011ff0:	eba9 0303 	sub.w	r3, r9, r3
 8011ff4:	f1a3 0b02 	sub.w	fp, r3, #2
 8011ff8:	f7ff ffd6 	bl	8011fa8 <__hexdig_fun>
 8011ffc:	4605      	mov	r5, r0
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d168      	bne.n	80120d4 <__gethex+0x100>
 8012002:	49a0      	ldr	r1, [pc, #640]	@ (8012284 <__gethex+0x2b0>)
 8012004:	2201      	movs	r2, #1
 8012006:	4648      	mov	r0, r9
 8012008:	f7ff ff10 	bl	8011e2c <strncmp>
 801200c:	4607      	mov	r7, r0
 801200e:	2800      	cmp	r0, #0
 8012010:	d167      	bne.n	80120e2 <__gethex+0x10e>
 8012012:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012016:	4626      	mov	r6, r4
 8012018:	f7ff ffc6 	bl	8011fa8 <__hexdig_fun>
 801201c:	2800      	cmp	r0, #0
 801201e:	d062      	beq.n	80120e6 <__gethex+0x112>
 8012020:	4623      	mov	r3, r4
 8012022:	7818      	ldrb	r0, [r3, #0]
 8012024:	2830      	cmp	r0, #48	@ 0x30
 8012026:	4699      	mov	r9, r3
 8012028:	f103 0301 	add.w	r3, r3, #1
 801202c:	d0f9      	beq.n	8012022 <__gethex+0x4e>
 801202e:	f7ff ffbb 	bl	8011fa8 <__hexdig_fun>
 8012032:	fab0 f580 	clz	r5, r0
 8012036:	096d      	lsrs	r5, r5, #5
 8012038:	f04f 0b01 	mov.w	fp, #1
 801203c:	464a      	mov	r2, r9
 801203e:	4616      	mov	r6, r2
 8012040:	3201      	adds	r2, #1
 8012042:	7830      	ldrb	r0, [r6, #0]
 8012044:	f7ff ffb0 	bl	8011fa8 <__hexdig_fun>
 8012048:	2800      	cmp	r0, #0
 801204a:	d1f8      	bne.n	801203e <__gethex+0x6a>
 801204c:	498d      	ldr	r1, [pc, #564]	@ (8012284 <__gethex+0x2b0>)
 801204e:	2201      	movs	r2, #1
 8012050:	4630      	mov	r0, r6
 8012052:	f7ff feeb 	bl	8011e2c <strncmp>
 8012056:	2800      	cmp	r0, #0
 8012058:	d13f      	bne.n	80120da <__gethex+0x106>
 801205a:	b944      	cbnz	r4, 801206e <__gethex+0x9a>
 801205c:	1c74      	adds	r4, r6, #1
 801205e:	4622      	mov	r2, r4
 8012060:	4616      	mov	r6, r2
 8012062:	3201      	adds	r2, #1
 8012064:	7830      	ldrb	r0, [r6, #0]
 8012066:	f7ff ff9f 	bl	8011fa8 <__hexdig_fun>
 801206a:	2800      	cmp	r0, #0
 801206c:	d1f8      	bne.n	8012060 <__gethex+0x8c>
 801206e:	1ba4      	subs	r4, r4, r6
 8012070:	00a7      	lsls	r7, r4, #2
 8012072:	7833      	ldrb	r3, [r6, #0]
 8012074:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012078:	2b50      	cmp	r3, #80	@ 0x50
 801207a:	d13e      	bne.n	80120fa <__gethex+0x126>
 801207c:	7873      	ldrb	r3, [r6, #1]
 801207e:	2b2b      	cmp	r3, #43	@ 0x2b
 8012080:	d033      	beq.n	80120ea <__gethex+0x116>
 8012082:	2b2d      	cmp	r3, #45	@ 0x2d
 8012084:	d034      	beq.n	80120f0 <__gethex+0x11c>
 8012086:	1c71      	adds	r1, r6, #1
 8012088:	2400      	movs	r4, #0
 801208a:	7808      	ldrb	r0, [r1, #0]
 801208c:	f7ff ff8c 	bl	8011fa8 <__hexdig_fun>
 8012090:	1e43      	subs	r3, r0, #1
 8012092:	b2db      	uxtb	r3, r3
 8012094:	2b18      	cmp	r3, #24
 8012096:	d830      	bhi.n	80120fa <__gethex+0x126>
 8012098:	f1a0 0210 	sub.w	r2, r0, #16
 801209c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80120a0:	f7ff ff82 	bl	8011fa8 <__hexdig_fun>
 80120a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80120a8:	fa5f fc8c 	uxtb.w	ip, ip
 80120ac:	f1bc 0f18 	cmp.w	ip, #24
 80120b0:	f04f 030a 	mov.w	r3, #10
 80120b4:	d91e      	bls.n	80120f4 <__gethex+0x120>
 80120b6:	b104      	cbz	r4, 80120ba <__gethex+0xe6>
 80120b8:	4252      	negs	r2, r2
 80120ba:	4417      	add	r7, r2
 80120bc:	f8ca 1000 	str.w	r1, [sl]
 80120c0:	b1ed      	cbz	r5, 80120fe <__gethex+0x12a>
 80120c2:	f1bb 0f00 	cmp.w	fp, #0
 80120c6:	bf0c      	ite	eq
 80120c8:	2506      	moveq	r5, #6
 80120ca:	2500      	movne	r5, #0
 80120cc:	4628      	mov	r0, r5
 80120ce:	b005      	add	sp, #20
 80120d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d4:	2500      	movs	r5, #0
 80120d6:	462c      	mov	r4, r5
 80120d8:	e7b0      	b.n	801203c <__gethex+0x68>
 80120da:	2c00      	cmp	r4, #0
 80120dc:	d1c7      	bne.n	801206e <__gethex+0x9a>
 80120de:	4627      	mov	r7, r4
 80120e0:	e7c7      	b.n	8012072 <__gethex+0x9e>
 80120e2:	464e      	mov	r6, r9
 80120e4:	462f      	mov	r7, r5
 80120e6:	2501      	movs	r5, #1
 80120e8:	e7c3      	b.n	8012072 <__gethex+0x9e>
 80120ea:	2400      	movs	r4, #0
 80120ec:	1cb1      	adds	r1, r6, #2
 80120ee:	e7cc      	b.n	801208a <__gethex+0xb6>
 80120f0:	2401      	movs	r4, #1
 80120f2:	e7fb      	b.n	80120ec <__gethex+0x118>
 80120f4:	fb03 0002 	mla	r0, r3, r2, r0
 80120f8:	e7ce      	b.n	8012098 <__gethex+0xc4>
 80120fa:	4631      	mov	r1, r6
 80120fc:	e7de      	b.n	80120bc <__gethex+0xe8>
 80120fe:	eba6 0309 	sub.w	r3, r6, r9
 8012102:	3b01      	subs	r3, #1
 8012104:	4629      	mov	r1, r5
 8012106:	2b07      	cmp	r3, #7
 8012108:	dc0a      	bgt.n	8012120 <__gethex+0x14c>
 801210a:	9801      	ldr	r0, [sp, #4]
 801210c:	f7fd ff6c 	bl	800ffe8 <_Balloc>
 8012110:	4604      	mov	r4, r0
 8012112:	b940      	cbnz	r0, 8012126 <__gethex+0x152>
 8012114:	4b5c      	ldr	r3, [pc, #368]	@ (8012288 <__gethex+0x2b4>)
 8012116:	4602      	mov	r2, r0
 8012118:	21e4      	movs	r1, #228	@ 0xe4
 801211a:	485c      	ldr	r0, [pc, #368]	@ (801228c <__gethex+0x2b8>)
 801211c:	f7ff fec0 	bl	8011ea0 <__assert_func>
 8012120:	3101      	adds	r1, #1
 8012122:	105b      	asrs	r3, r3, #1
 8012124:	e7ef      	b.n	8012106 <__gethex+0x132>
 8012126:	f100 0a14 	add.w	sl, r0, #20
 801212a:	2300      	movs	r3, #0
 801212c:	4655      	mov	r5, sl
 801212e:	469b      	mov	fp, r3
 8012130:	45b1      	cmp	r9, r6
 8012132:	d337      	bcc.n	80121a4 <__gethex+0x1d0>
 8012134:	f845 bb04 	str.w	fp, [r5], #4
 8012138:	eba5 050a 	sub.w	r5, r5, sl
 801213c:	10ad      	asrs	r5, r5, #2
 801213e:	6125      	str	r5, [r4, #16]
 8012140:	4658      	mov	r0, fp
 8012142:	f7fe f843 	bl	80101cc <__hi0bits>
 8012146:	016d      	lsls	r5, r5, #5
 8012148:	f8d8 6000 	ldr.w	r6, [r8]
 801214c:	1a2d      	subs	r5, r5, r0
 801214e:	42b5      	cmp	r5, r6
 8012150:	dd54      	ble.n	80121fc <__gethex+0x228>
 8012152:	1bad      	subs	r5, r5, r6
 8012154:	4629      	mov	r1, r5
 8012156:	4620      	mov	r0, r4
 8012158:	f7fe fbcf 	bl	80108fa <__any_on>
 801215c:	4681      	mov	r9, r0
 801215e:	b178      	cbz	r0, 8012180 <__gethex+0x1ac>
 8012160:	1e6b      	subs	r3, r5, #1
 8012162:	1159      	asrs	r1, r3, #5
 8012164:	f003 021f 	and.w	r2, r3, #31
 8012168:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801216c:	f04f 0901 	mov.w	r9, #1
 8012170:	fa09 f202 	lsl.w	r2, r9, r2
 8012174:	420a      	tst	r2, r1
 8012176:	d003      	beq.n	8012180 <__gethex+0x1ac>
 8012178:	454b      	cmp	r3, r9
 801217a:	dc36      	bgt.n	80121ea <__gethex+0x216>
 801217c:	f04f 0902 	mov.w	r9, #2
 8012180:	4629      	mov	r1, r5
 8012182:	4620      	mov	r0, r4
 8012184:	f7ff febe 	bl	8011f04 <rshift>
 8012188:	442f      	add	r7, r5
 801218a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801218e:	42bb      	cmp	r3, r7
 8012190:	da42      	bge.n	8012218 <__gethex+0x244>
 8012192:	9801      	ldr	r0, [sp, #4]
 8012194:	4621      	mov	r1, r4
 8012196:	f7fd ff67 	bl	8010068 <_Bfree>
 801219a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801219c:	2300      	movs	r3, #0
 801219e:	6013      	str	r3, [r2, #0]
 80121a0:	25a3      	movs	r5, #163	@ 0xa3
 80121a2:	e793      	b.n	80120cc <__gethex+0xf8>
 80121a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80121a8:	2a2e      	cmp	r2, #46	@ 0x2e
 80121aa:	d012      	beq.n	80121d2 <__gethex+0x1fe>
 80121ac:	2b20      	cmp	r3, #32
 80121ae:	d104      	bne.n	80121ba <__gethex+0x1e6>
 80121b0:	f845 bb04 	str.w	fp, [r5], #4
 80121b4:	f04f 0b00 	mov.w	fp, #0
 80121b8:	465b      	mov	r3, fp
 80121ba:	7830      	ldrb	r0, [r6, #0]
 80121bc:	9303      	str	r3, [sp, #12]
 80121be:	f7ff fef3 	bl	8011fa8 <__hexdig_fun>
 80121c2:	9b03      	ldr	r3, [sp, #12]
 80121c4:	f000 000f 	and.w	r0, r0, #15
 80121c8:	4098      	lsls	r0, r3
 80121ca:	ea4b 0b00 	orr.w	fp, fp, r0
 80121ce:	3304      	adds	r3, #4
 80121d0:	e7ae      	b.n	8012130 <__gethex+0x15c>
 80121d2:	45b1      	cmp	r9, r6
 80121d4:	d8ea      	bhi.n	80121ac <__gethex+0x1d8>
 80121d6:	492b      	ldr	r1, [pc, #172]	@ (8012284 <__gethex+0x2b0>)
 80121d8:	9303      	str	r3, [sp, #12]
 80121da:	2201      	movs	r2, #1
 80121dc:	4630      	mov	r0, r6
 80121de:	f7ff fe25 	bl	8011e2c <strncmp>
 80121e2:	9b03      	ldr	r3, [sp, #12]
 80121e4:	2800      	cmp	r0, #0
 80121e6:	d1e1      	bne.n	80121ac <__gethex+0x1d8>
 80121e8:	e7a2      	b.n	8012130 <__gethex+0x15c>
 80121ea:	1ea9      	subs	r1, r5, #2
 80121ec:	4620      	mov	r0, r4
 80121ee:	f7fe fb84 	bl	80108fa <__any_on>
 80121f2:	2800      	cmp	r0, #0
 80121f4:	d0c2      	beq.n	801217c <__gethex+0x1a8>
 80121f6:	f04f 0903 	mov.w	r9, #3
 80121fa:	e7c1      	b.n	8012180 <__gethex+0x1ac>
 80121fc:	da09      	bge.n	8012212 <__gethex+0x23e>
 80121fe:	1b75      	subs	r5, r6, r5
 8012200:	4621      	mov	r1, r4
 8012202:	9801      	ldr	r0, [sp, #4]
 8012204:	462a      	mov	r2, r5
 8012206:	f7fe f93f 	bl	8010488 <__lshift>
 801220a:	1b7f      	subs	r7, r7, r5
 801220c:	4604      	mov	r4, r0
 801220e:	f100 0a14 	add.w	sl, r0, #20
 8012212:	f04f 0900 	mov.w	r9, #0
 8012216:	e7b8      	b.n	801218a <__gethex+0x1b6>
 8012218:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801221c:	42bd      	cmp	r5, r7
 801221e:	dd6f      	ble.n	8012300 <__gethex+0x32c>
 8012220:	1bed      	subs	r5, r5, r7
 8012222:	42ae      	cmp	r6, r5
 8012224:	dc34      	bgt.n	8012290 <__gethex+0x2bc>
 8012226:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801222a:	2b02      	cmp	r3, #2
 801222c:	d022      	beq.n	8012274 <__gethex+0x2a0>
 801222e:	2b03      	cmp	r3, #3
 8012230:	d024      	beq.n	801227c <__gethex+0x2a8>
 8012232:	2b01      	cmp	r3, #1
 8012234:	d115      	bne.n	8012262 <__gethex+0x28e>
 8012236:	42ae      	cmp	r6, r5
 8012238:	d113      	bne.n	8012262 <__gethex+0x28e>
 801223a:	2e01      	cmp	r6, #1
 801223c:	d10b      	bne.n	8012256 <__gethex+0x282>
 801223e:	9a02      	ldr	r2, [sp, #8]
 8012240:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012244:	6013      	str	r3, [r2, #0]
 8012246:	2301      	movs	r3, #1
 8012248:	6123      	str	r3, [r4, #16]
 801224a:	f8ca 3000 	str.w	r3, [sl]
 801224e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012250:	2562      	movs	r5, #98	@ 0x62
 8012252:	601c      	str	r4, [r3, #0]
 8012254:	e73a      	b.n	80120cc <__gethex+0xf8>
 8012256:	1e71      	subs	r1, r6, #1
 8012258:	4620      	mov	r0, r4
 801225a:	f7fe fb4e 	bl	80108fa <__any_on>
 801225e:	2800      	cmp	r0, #0
 8012260:	d1ed      	bne.n	801223e <__gethex+0x26a>
 8012262:	9801      	ldr	r0, [sp, #4]
 8012264:	4621      	mov	r1, r4
 8012266:	f7fd feff 	bl	8010068 <_Bfree>
 801226a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801226c:	2300      	movs	r3, #0
 801226e:	6013      	str	r3, [r2, #0]
 8012270:	2550      	movs	r5, #80	@ 0x50
 8012272:	e72b      	b.n	80120cc <__gethex+0xf8>
 8012274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012276:	2b00      	cmp	r3, #0
 8012278:	d1f3      	bne.n	8012262 <__gethex+0x28e>
 801227a:	e7e0      	b.n	801223e <__gethex+0x26a>
 801227c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801227e:	2b00      	cmp	r3, #0
 8012280:	d1dd      	bne.n	801223e <__gethex+0x26a>
 8012282:	e7ee      	b.n	8012262 <__gethex+0x28e>
 8012284:	08014ca7 	.word	0x08014ca7
 8012288:	08014c3d 	.word	0x08014c3d
 801228c:	08014cfe 	.word	0x08014cfe
 8012290:	1e6f      	subs	r7, r5, #1
 8012292:	f1b9 0f00 	cmp.w	r9, #0
 8012296:	d130      	bne.n	80122fa <__gethex+0x326>
 8012298:	b127      	cbz	r7, 80122a4 <__gethex+0x2d0>
 801229a:	4639      	mov	r1, r7
 801229c:	4620      	mov	r0, r4
 801229e:	f7fe fb2c 	bl	80108fa <__any_on>
 80122a2:	4681      	mov	r9, r0
 80122a4:	117a      	asrs	r2, r7, #5
 80122a6:	2301      	movs	r3, #1
 80122a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80122ac:	f007 071f 	and.w	r7, r7, #31
 80122b0:	40bb      	lsls	r3, r7
 80122b2:	4213      	tst	r3, r2
 80122b4:	4629      	mov	r1, r5
 80122b6:	4620      	mov	r0, r4
 80122b8:	bf18      	it	ne
 80122ba:	f049 0902 	orrne.w	r9, r9, #2
 80122be:	f7ff fe21 	bl	8011f04 <rshift>
 80122c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80122c6:	1b76      	subs	r6, r6, r5
 80122c8:	2502      	movs	r5, #2
 80122ca:	f1b9 0f00 	cmp.w	r9, #0
 80122ce:	d047      	beq.n	8012360 <__gethex+0x38c>
 80122d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80122d4:	2b02      	cmp	r3, #2
 80122d6:	d015      	beq.n	8012304 <__gethex+0x330>
 80122d8:	2b03      	cmp	r3, #3
 80122da:	d017      	beq.n	801230c <__gethex+0x338>
 80122dc:	2b01      	cmp	r3, #1
 80122de:	d109      	bne.n	80122f4 <__gethex+0x320>
 80122e0:	f019 0f02 	tst.w	r9, #2
 80122e4:	d006      	beq.n	80122f4 <__gethex+0x320>
 80122e6:	f8da 3000 	ldr.w	r3, [sl]
 80122ea:	ea49 0903 	orr.w	r9, r9, r3
 80122ee:	f019 0f01 	tst.w	r9, #1
 80122f2:	d10e      	bne.n	8012312 <__gethex+0x33e>
 80122f4:	f045 0510 	orr.w	r5, r5, #16
 80122f8:	e032      	b.n	8012360 <__gethex+0x38c>
 80122fa:	f04f 0901 	mov.w	r9, #1
 80122fe:	e7d1      	b.n	80122a4 <__gethex+0x2d0>
 8012300:	2501      	movs	r5, #1
 8012302:	e7e2      	b.n	80122ca <__gethex+0x2f6>
 8012304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012306:	f1c3 0301 	rsb	r3, r3, #1
 801230a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801230c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801230e:	2b00      	cmp	r3, #0
 8012310:	d0f0      	beq.n	80122f4 <__gethex+0x320>
 8012312:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012316:	f104 0314 	add.w	r3, r4, #20
 801231a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801231e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012322:	f04f 0c00 	mov.w	ip, #0
 8012326:	4618      	mov	r0, r3
 8012328:	f853 2b04 	ldr.w	r2, [r3], #4
 801232c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012330:	d01b      	beq.n	801236a <__gethex+0x396>
 8012332:	3201      	adds	r2, #1
 8012334:	6002      	str	r2, [r0, #0]
 8012336:	2d02      	cmp	r5, #2
 8012338:	f104 0314 	add.w	r3, r4, #20
 801233c:	d13c      	bne.n	80123b8 <__gethex+0x3e4>
 801233e:	f8d8 2000 	ldr.w	r2, [r8]
 8012342:	3a01      	subs	r2, #1
 8012344:	42b2      	cmp	r2, r6
 8012346:	d109      	bne.n	801235c <__gethex+0x388>
 8012348:	1171      	asrs	r1, r6, #5
 801234a:	2201      	movs	r2, #1
 801234c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012350:	f006 061f 	and.w	r6, r6, #31
 8012354:	fa02 f606 	lsl.w	r6, r2, r6
 8012358:	421e      	tst	r6, r3
 801235a:	d13a      	bne.n	80123d2 <__gethex+0x3fe>
 801235c:	f045 0520 	orr.w	r5, r5, #32
 8012360:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012362:	601c      	str	r4, [r3, #0]
 8012364:	9b02      	ldr	r3, [sp, #8]
 8012366:	601f      	str	r7, [r3, #0]
 8012368:	e6b0      	b.n	80120cc <__gethex+0xf8>
 801236a:	4299      	cmp	r1, r3
 801236c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012370:	d8d9      	bhi.n	8012326 <__gethex+0x352>
 8012372:	68a3      	ldr	r3, [r4, #8]
 8012374:	459b      	cmp	fp, r3
 8012376:	db17      	blt.n	80123a8 <__gethex+0x3d4>
 8012378:	6861      	ldr	r1, [r4, #4]
 801237a:	9801      	ldr	r0, [sp, #4]
 801237c:	3101      	adds	r1, #1
 801237e:	f7fd fe33 	bl	800ffe8 <_Balloc>
 8012382:	4681      	mov	r9, r0
 8012384:	b918      	cbnz	r0, 801238e <__gethex+0x3ba>
 8012386:	4b1a      	ldr	r3, [pc, #104]	@ (80123f0 <__gethex+0x41c>)
 8012388:	4602      	mov	r2, r0
 801238a:	2184      	movs	r1, #132	@ 0x84
 801238c:	e6c5      	b.n	801211a <__gethex+0x146>
 801238e:	6922      	ldr	r2, [r4, #16]
 8012390:	3202      	adds	r2, #2
 8012392:	f104 010c 	add.w	r1, r4, #12
 8012396:	0092      	lsls	r2, r2, #2
 8012398:	300c      	adds	r0, #12
 801239a:	f7ff fd69 	bl	8011e70 <memcpy>
 801239e:	4621      	mov	r1, r4
 80123a0:	9801      	ldr	r0, [sp, #4]
 80123a2:	f7fd fe61 	bl	8010068 <_Bfree>
 80123a6:	464c      	mov	r4, r9
 80123a8:	6923      	ldr	r3, [r4, #16]
 80123aa:	1c5a      	adds	r2, r3, #1
 80123ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80123b0:	6122      	str	r2, [r4, #16]
 80123b2:	2201      	movs	r2, #1
 80123b4:	615a      	str	r2, [r3, #20]
 80123b6:	e7be      	b.n	8012336 <__gethex+0x362>
 80123b8:	6922      	ldr	r2, [r4, #16]
 80123ba:	455a      	cmp	r2, fp
 80123bc:	dd0b      	ble.n	80123d6 <__gethex+0x402>
 80123be:	2101      	movs	r1, #1
 80123c0:	4620      	mov	r0, r4
 80123c2:	f7ff fd9f 	bl	8011f04 <rshift>
 80123c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80123ca:	3701      	adds	r7, #1
 80123cc:	42bb      	cmp	r3, r7
 80123ce:	f6ff aee0 	blt.w	8012192 <__gethex+0x1be>
 80123d2:	2501      	movs	r5, #1
 80123d4:	e7c2      	b.n	801235c <__gethex+0x388>
 80123d6:	f016 061f 	ands.w	r6, r6, #31
 80123da:	d0fa      	beq.n	80123d2 <__gethex+0x3fe>
 80123dc:	4453      	add	r3, sl
 80123de:	f1c6 0620 	rsb	r6, r6, #32
 80123e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80123e6:	f7fd fef1 	bl	80101cc <__hi0bits>
 80123ea:	42b0      	cmp	r0, r6
 80123ec:	dbe7      	blt.n	80123be <__gethex+0x3ea>
 80123ee:	e7f0      	b.n	80123d2 <__gethex+0x3fe>
 80123f0:	08014c3d 	.word	0x08014c3d

080123f4 <L_shift>:
 80123f4:	f1c2 0208 	rsb	r2, r2, #8
 80123f8:	0092      	lsls	r2, r2, #2
 80123fa:	b570      	push	{r4, r5, r6, lr}
 80123fc:	f1c2 0620 	rsb	r6, r2, #32
 8012400:	6843      	ldr	r3, [r0, #4]
 8012402:	6804      	ldr	r4, [r0, #0]
 8012404:	fa03 f506 	lsl.w	r5, r3, r6
 8012408:	432c      	orrs	r4, r5
 801240a:	40d3      	lsrs	r3, r2
 801240c:	6004      	str	r4, [r0, #0]
 801240e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012412:	4288      	cmp	r0, r1
 8012414:	d3f4      	bcc.n	8012400 <L_shift+0xc>
 8012416:	bd70      	pop	{r4, r5, r6, pc}

08012418 <__match>:
 8012418:	b530      	push	{r4, r5, lr}
 801241a:	6803      	ldr	r3, [r0, #0]
 801241c:	3301      	adds	r3, #1
 801241e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012422:	b914      	cbnz	r4, 801242a <__match+0x12>
 8012424:	6003      	str	r3, [r0, #0]
 8012426:	2001      	movs	r0, #1
 8012428:	bd30      	pop	{r4, r5, pc}
 801242a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801242e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012432:	2d19      	cmp	r5, #25
 8012434:	bf98      	it	ls
 8012436:	3220      	addls	r2, #32
 8012438:	42a2      	cmp	r2, r4
 801243a:	d0f0      	beq.n	801241e <__match+0x6>
 801243c:	2000      	movs	r0, #0
 801243e:	e7f3      	b.n	8012428 <__match+0x10>

08012440 <__hexnan>:
 8012440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012444:	680b      	ldr	r3, [r1, #0]
 8012446:	6801      	ldr	r1, [r0, #0]
 8012448:	115e      	asrs	r6, r3, #5
 801244a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801244e:	f013 031f 	ands.w	r3, r3, #31
 8012452:	b087      	sub	sp, #28
 8012454:	bf18      	it	ne
 8012456:	3604      	addne	r6, #4
 8012458:	2500      	movs	r5, #0
 801245a:	1f37      	subs	r7, r6, #4
 801245c:	4682      	mov	sl, r0
 801245e:	4690      	mov	r8, r2
 8012460:	9301      	str	r3, [sp, #4]
 8012462:	f846 5c04 	str.w	r5, [r6, #-4]
 8012466:	46b9      	mov	r9, r7
 8012468:	463c      	mov	r4, r7
 801246a:	9502      	str	r5, [sp, #8]
 801246c:	46ab      	mov	fp, r5
 801246e:	784a      	ldrb	r2, [r1, #1]
 8012470:	1c4b      	adds	r3, r1, #1
 8012472:	9303      	str	r3, [sp, #12]
 8012474:	b342      	cbz	r2, 80124c8 <__hexnan+0x88>
 8012476:	4610      	mov	r0, r2
 8012478:	9105      	str	r1, [sp, #20]
 801247a:	9204      	str	r2, [sp, #16]
 801247c:	f7ff fd94 	bl	8011fa8 <__hexdig_fun>
 8012480:	2800      	cmp	r0, #0
 8012482:	d151      	bne.n	8012528 <__hexnan+0xe8>
 8012484:	9a04      	ldr	r2, [sp, #16]
 8012486:	9905      	ldr	r1, [sp, #20]
 8012488:	2a20      	cmp	r2, #32
 801248a:	d818      	bhi.n	80124be <__hexnan+0x7e>
 801248c:	9b02      	ldr	r3, [sp, #8]
 801248e:	459b      	cmp	fp, r3
 8012490:	dd13      	ble.n	80124ba <__hexnan+0x7a>
 8012492:	454c      	cmp	r4, r9
 8012494:	d206      	bcs.n	80124a4 <__hexnan+0x64>
 8012496:	2d07      	cmp	r5, #7
 8012498:	dc04      	bgt.n	80124a4 <__hexnan+0x64>
 801249a:	462a      	mov	r2, r5
 801249c:	4649      	mov	r1, r9
 801249e:	4620      	mov	r0, r4
 80124a0:	f7ff ffa8 	bl	80123f4 <L_shift>
 80124a4:	4544      	cmp	r4, r8
 80124a6:	d952      	bls.n	801254e <__hexnan+0x10e>
 80124a8:	2300      	movs	r3, #0
 80124aa:	f1a4 0904 	sub.w	r9, r4, #4
 80124ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80124b2:	f8cd b008 	str.w	fp, [sp, #8]
 80124b6:	464c      	mov	r4, r9
 80124b8:	461d      	mov	r5, r3
 80124ba:	9903      	ldr	r1, [sp, #12]
 80124bc:	e7d7      	b.n	801246e <__hexnan+0x2e>
 80124be:	2a29      	cmp	r2, #41	@ 0x29
 80124c0:	d157      	bne.n	8012572 <__hexnan+0x132>
 80124c2:	3102      	adds	r1, #2
 80124c4:	f8ca 1000 	str.w	r1, [sl]
 80124c8:	f1bb 0f00 	cmp.w	fp, #0
 80124cc:	d051      	beq.n	8012572 <__hexnan+0x132>
 80124ce:	454c      	cmp	r4, r9
 80124d0:	d206      	bcs.n	80124e0 <__hexnan+0xa0>
 80124d2:	2d07      	cmp	r5, #7
 80124d4:	dc04      	bgt.n	80124e0 <__hexnan+0xa0>
 80124d6:	462a      	mov	r2, r5
 80124d8:	4649      	mov	r1, r9
 80124da:	4620      	mov	r0, r4
 80124dc:	f7ff ff8a 	bl	80123f4 <L_shift>
 80124e0:	4544      	cmp	r4, r8
 80124e2:	d936      	bls.n	8012552 <__hexnan+0x112>
 80124e4:	f1a8 0204 	sub.w	r2, r8, #4
 80124e8:	4623      	mov	r3, r4
 80124ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80124ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80124f2:	429f      	cmp	r7, r3
 80124f4:	d2f9      	bcs.n	80124ea <__hexnan+0xaa>
 80124f6:	1b3b      	subs	r3, r7, r4
 80124f8:	f023 0303 	bic.w	r3, r3, #3
 80124fc:	3304      	adds	r3, #4
 80124fe:	3401      	adds	r4, #1
 8012500:	3e03      	subs	r6, #3
 8012502:	42b4      	cmp	r4, r6
 8012504:	bf88      	it	hi
 8012506:	2304      	movhi	r3, #4
 8012508:	4443      	add	r3, r8
 801250a:	2200      	movs	r2, #0
 801250c:	f843 2b04 	str.w	r2, [r3], #4
 8012510:	429f      	cmp	r7, r3
 8012512:	d2fb      	bcs.n	801250c <__hexnan+0xcc>
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	b91b      	cbnz	r3, 8012520 <__hexnan+0xe0>
 8012518:	4547      	cmp	r7, r8
 801251a:	d128      	bne.n	801256e <__hexnan+0x12e>
 801251c:	2301      	movs	r3, #1
 801251e:	603b      	str	r3, [r7, #0]
 8012520:	2005      	movs	r0, #5
 8012522:	b007      	add	sp, #28
 8012524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012528:	3501      	adds	r5, #1
 801252a:	2d08      	cmp	r5, #8
 801252c:	f10b 0b01 	add.w	fp, fp, #1
 8012530:	dd06      	ble.n	8012540 <__hexnan+0x100>
 8012532:	4544      	cmp	r4, r8
 8012534:	d9c1      	bls.n	80124ba <__hexnan+0x7a>
 8012536:	2300      	movs	r3, #0
 8012538:	f844 3c04 	str.w	r3, [r4, #-4]
 801253c:	2501      	movs	r5, #1
 801253e:	3c04      	subs	r4, #4
 8012540:	6822      	ldr	r2, [r4, #0]
 8012542:	f000 000f 	and.w	r0, r0, #15
 8012546:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801254a:	6020      	str	r0, [r4, #0]
 801254c:	e7b5      	b.n	80124ba <__hexnan+0x7a>
 801254e:	2508      	movs	r5, #8
 8012550:	e7b3      	b.n	80124ba <__hexnan+0x7a>
 8012552:	9b01      	ldr	r3, [sp, #4]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d0dd      	beq.n	8012514 <__hexnan+0xd4>
 8012558:	f1c3 0320 	rsb	r3, r3, #32
 801255c:	f04f 32ff 	mov.w	r2, #4294967295
 8012560:	40da      	lsrs	r2, r3
 8012562:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012566:	4013      	ands	r3, r2
 8012568:	f846 3c04 	str.w	r3, [r6, #-4]
 801256c:	e7d2      	b.n	8012514 <__hexnan+0xd4>
 801256e:	3f04      	subs	r7, #4
 8012570:	e7d0      	b.n	8012514 <__hexnan+0xd4>
 8012572:	2004      	movs	r0, #4
 8012574:	e7d5      	b.n	8012522 <__hexnan+0xe2>

08012576 <__ascii_mbtowc>:
 8012576:	b082      	sub	sp, #8
 8012578:	b901      	cbnz	r1, 801257c <__ascii_mbtowc+0x6>
 801257a:	a901      	add	r1, sp, #4
 801257c:	b142      	cbz	r2, 8012590 <__ascii_mbtowc+0x1a>
 801257e:	b14b      	cbz	r3, 8012594 <__ascii_mbtowc+0x1e>
 8012580:	7813      	ldrb	r3, [r2, #0]
 8012582:	600b      	str	r3, [r1, #0]
 8012584:	7812      	ldrb	r2, [r2, #0]
 8012586:	1e10      	subs	r0, r2, #0
 8012588:	bf18      	it	ne
 801258a:	2001      	movne	r0, #1
 801258c:	b002      	add	sp, #8
 801258e:	4770      	bx	lr
 8012590:	4610      	mov	r0, r2
 8012592:	e7fb      	b.n	801258c <__ascii_mbtowc+0x16>
 8012594:	f06f 0001 	mvn.w	r0, #1
 8012598:	e7f8      	b.n	801258c <__ascii_mbtowc+0x16>

0801259a <_realloc_r>:
 801259a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801259e:	4607      	mov	r7, r0
 80125a0:	4614      	mov	r4, r2
 80125a2:	460d      	mov	r5, r1
 80125a4:	b921      	cbnz	r1, 80125b0 <_realloc_r+0x16>
 80125a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125aa:	4611      	mov	r1, r2
 80125ac:	f7fd bc90 	b.w	800fed0 <_malloc_r>
 80125b0:	b92a      	cbnz	r2, 80125be <_realloc_r+0x24>
 80125b2:	f7fd fc19 	bl	800fde8 <_free_r>
 80125b6:	4625      	mov	r5, r4
 80125b8:	4628      	mov	r0, r5
 80125ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125be:	f000 f8c4 	bl	801274a <_malloc_usable_size_r>
 80125c2:	4284      	cmp	r4, r0
 80125c4:	4606      	mov	r6, r0
 80125c6:	d802      	bhi.n	80125ce <_realloc_r+0x34>
 80125c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80125cc:	d8f4      	bhi.n	80125b8 <_realloc_r+0x1e>
 80125ce:	4621      	mov	r1, r4
 80125d0:	4638      	mov	r0, r7
 80125d2:	f7fd fc7d 	bl	800fed0 <_malloc_r>
 80125d6:	4680      	mov	r8, r0
 80125d8:	b908      	cbnz	r0, 80125de <_realloc_r+0x44>
 80125da:	4645      	mov	r5, r8
 80125dc:	e7ec      	b.n	80125b8 <_realloc_r+0x1e>
 80125de:	42b4      	cmp	r4, r6
 80125e0:	4622      	mov	r2, r4
 80125e2:	4629      	mov	r1, r5
 80125e4:	bf28      	it	cs
 80125e6:	4632      	movcs	r2, r6
 80125e8:	f7ff fc42 	bl	8011e70 <memcpy>
 80125ec:	4629      	mov	r1, r5
 80125ee:	4638      	mov	r0, r7
 80125f0:	f7fd fbfa 	bl	800fde8 <_free_r>
 80125f4:	e7f1      	b.n	80125da <_realloc_r+0x40>

080125f6 <__ascii_wctomb>:
 80125f6:	4603      	mov	r3, r0
 80125f8:	4608      	mov	r0, r1
 80125fa:	b141      	cbz	r1, 801260e <__ascii_wctomb+0x18>
 80125fc:	2aff      	cmp	r2, #255	@ 0xff
 80125fe:	d904      	bls.n	801260a <__ascii_wctomb+0x14>
 8012600:	228a      	movs	r2, #138	@ 0x8a
 8012602:	601a      	str	r2, [r3, #0]
 8012604:	f04f 30ff 	mov.w	r0, #4294967295
 8012608:	4770      	bx	lr
 801260a:	700a      	strb	r2, [r1, #0]
 801260c:	2001      	movs	r0, #1
 801260e:	4770      	bx	lr

08012610 <fiprintf>:
 8012610:	b40e      	push	{r1, r2, r3}
 8012612:	b503      	push	{r0, r1, lr}
 8012614:	4601      	mov	r1, r0
 8012616:	ab03      	add	r3, sp, #12
 8012618:	4805      	ldr	r0, [pc, #20]	@ (8012630 <fiprintf+0x20>)
 801261a:	f853 2b04 	ldr.w	r2, [r3], #4
 801261e:	6800      	ldr	r0, [r0, #0]
 8012620:	9301      	str	r3, [sp, #4]
 8012622:	f7ff f991 	bl	8011948 <_vfiprintf_r>
 8012626:	b002      	add	sp, #8
 8012628:	f85d eb04 	ldr.w	lr, [sp], #4
 801262c:	b003      	add	sp, #12
 801262e:	4770      	bx	lr
 8012630:	20000110 	.word	0x20000110

08012634 <__swhatbuf_r>:
 8012634:	b570      	push	{r4, r5, r6, lr}
 8012636:	460c      	mov	r4, r1
 8012638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801263c:	2900      	cmp	r1, #0
 801263e:	b096      	sub	sp, #88	@ 0x58
 8012640:	4615      	mov	r5, r2
 8012642:	461e      	mov	r6, r3
 8012644:	da0d      	bge.n	8012662 <__swhatbuf_r+0x2e>
 8012646:	89a3      	ldrh	r3, [r4, #12]
 8012648:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801264c:	f04f 0100 	mov.w	r1, #0
 8012650:	bf14      	ite	ne
 8012652:	2340      	movne	r3, #64	@ 0x40
 8012654:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012658:	2000      	movs	r0, #0
 801265a:	6031      	str	r1, [r6, #0]
 801265c:	602b      	str	r3, [r5, #0]
 801265e:	b016      	add	sp, #88	@ 0x58
 8012660:	bd70      	pop	{r4, r5, r6, pc}
 8012662:	466a      	mov	r2, sp
 8012664:	f000 f848 	bl	80126f8 <_fstat_r>
 8012668:	2800      	cmp	r0, #0
 801266a:	dbec      	blt.n	8012646 <__swhatbuf_r+0x12>
 801266c:	9901      	ldr	r1, [sp, #4]
 801266e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012672:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012676:	4259      	negs	r1, r3
 8012678:	4159      	adcs	r1, r3
 801267a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801267e:	e7eb      	b.n	8012658 <__swhatbuf_r+0x24>

08012680 <__smakebuf_r>:
 8012680:	898b      	ldrh	r3, [r1, #12]
 8012682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012684:	079d      	lsls	r5, r3, #30
 8012686:	4606      	mov	r6, r0
 8012688:	460c      	mov	r4, r1
 801268a:	d507      	bpl.n	801269c <__smakebuf_r+0x1c>
 801268c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012690:	6023      	str	r3, [r4, #0]
 8012692:	6123      	str	r3, [r4, #16]
 8012694:	2301      	movs	r3, #1
 8012696:	6163      	str	r3, [r4, #20]
 8012698:	b003      	add	sp, #12
 801269a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801269c:	ab01      	add	r3, sp, #4
 801269e:	466a      	mov	r2, sp
 80126a0:	f7ff ffc8 	bl	8012634 <__swhatbuf_r>
 80126a4:	9f00      	ldr	r7, [sp, #0]
 80126a6:	4605      	mov	r5, r0
 80126a8:	4639      	mov	r1, r7
 80126aa:	4630      	mov	r0, r6
 80126ac:	f7fd fc10 	bl	800fed0 <_malloc_r>
 80126b0:	b948      	cbnz	r0, 80126c6 <__smakebuf_r+0x46>
 80126b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126b6:	059a      	lsls	r2, r3, #22
 80126b8:	d4ee      	bmi.n	8012698 <__smakebuf_r+0x18>
 80126ba:	f023 0303 	bic.w	r3, r3, #3
 80126be:	f043 0302 	orr.w	r3, r3, #2
 80126c2:	81a3      	strh	r3, [r4, #12]
 80126c4:	e7e2      	b.n	801268c <__smakebuf_r+0xc>
 80126c6:	89a3      	ldrh	r3, [r4, #12]
 80126c8:	6020      	str	r0, [r4, #0]
 80126ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126ce:	81a3      	strh	r3, [r4, #12]
 80126d0:	9b01      	ldr	r3, [sp, #4]
 80126d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80126d6:	b15b      	cbz	r3, 80126f0 <__smakebuf_r+0x70>
 80126d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126dc:	4630      	mov	r0, r6
 80126de:	f000 f81d 	bl	801271c <_isatty_r>
 80126e2:	b128      	cbz	r0, 80126f0 <__smakebuf_r+0x70>
 80126e4:	89a3      	ldrh	r3, [r4, #12]
 80126e6:	f023 0303 	bic.w	r3, r3, #3
 80126ea:	f043 0301 	orr.w	r3, r3, #1
 80126ee:	81a3      	strh	r3, [r4, #12]
 80126f0:	89a3      	ldrh	r3, [r4, #12]
 80126f2:	431d      	orrs	r5, r3
 80126f4:	81a5      	strh	r5, [r4, #12]
 80126f6:	e7cf      	b.n	8012698 <__smakebuf_r+0x18>

080126f8 <_fstat_r>:
 80126f8:	b538      	push	{r3, r4, r5, lr}
 80126fa:	4d07      	ldr	r5, [pc, #28]	@ (8012718 <_fstat_r+0x20>)
 80126fc:	2300      	movs	r3, #0
 80126fe:	4604      	mov	r4, r0
 8012700:	4608      	mov	r0, r1
 8012702:	4611      	mov	r1, r2
 8012704:	602b      	str	r3, [r5, #0]
 8012706:	f7f2 fa2d 	bl	8004b64 <_fstat>
 801270a:	1c43      	adds	r3, r0, #1
 801270c:	d102      	bne.n	8012714 <_fstat_r+0x1c>
 801270e:	682b      	ldr	r3, [r5, #0]
 8012710:	b103      	cbz	r3, 8012714 <_fstat_r+0x1c>
 8012712:	6023      	str	r3, [r4, #0]
 8012714:	bd38      	pop	{r3, r4, r5, pc}
 8012716:	bf00      	nop
 8012718:	200025ec 	.word	0x200025ec

0801271c <_isatty_r>:
 801271c:	b538      	push	{r3, r4, r5, lr}
 801271e:	4d06      	ldr	r5, [pc, #24]	@ (8012738 <_isatty_r+0x1c>)
 8012720:	2300      	movs	r3, #0
 8012722:	4604      	mov	r4, r0
 8012724:	4608      	mov	r0, r1
 8012726:	602b      	str	r3, [r5, #0]
 8012728:	f7f2 fa2c 	bl	8004b84 <_isatty>
 801272c:	1c43      	adds	r3, r0, #1
 801272e:	d102      	bne.n	8012736 <_isatty_r+0x1a>
 8012730:	682b      	ldr	r3, [r5, #0]
 8012732:	b103      	cbz	r3, 8012736 <_isatty_r+0x1a>
 8012734:	6023      	str	r3, [r4, #0]
 8012736:	bd38      	pop	{r3, r4, r5, pc}
 8012738:	200025ec 	.word	0x200025ec

0801273c <abort>:
 801273c:	b508      	push	{r3, lr}
 801273e:	2006      	movs	r0, #6
 8012740:	f000 f834 	bl	80127ac <raise>
 8012744:	2001      	movs	r0, #1
 8012746:	f7f2 f9bd 	bl	8004ac4 <_exit>

0801274a <_malloc_usable_size_r>:
 801274a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801274e:	1f18      	subs	r0, r3, #4
 8012750:	2b00      	cmp	r3, #0
 8012752:	bfbc      	itt	lt
 8012754:	580b      	ldrlt	r3, [r1, r0]
 8012756:	18c0      	addlt	r0, r0, r3
 8012758:	4770      	bx	lr

0801275a <_raise_r>:
 801275a:	291f      	cmp	r1, #31
 801275c:	b538      	push	{r3, r4, r5, lr}
 801275e:	4605      	mov	r5, r0
 8012760:	460c      	mov	r4, r1
 8012762:	d904      	bls.n	801276e <_raise_r+0x14>
 8012764:	2316      	movs	r3, #22
 8012766:	6003      	str	r3, [r0, #0]
 8012768:	f04f 30ff 	mov.w	r0, #4294967295
 801276c:	bd38      	pop	{r3, r4, r5, pc}
 801276e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012770:	b112      	cbz	r2, 8012778 <_raise_r+0x1e>
 8012772:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012776:	b94b      	cbnz	r3, 801278c <_raise_r+0x32>
 8012778:	4628      	mov	r0, r5
 801277a:	f000 f831 	bl	80127e0 <_getpid_r>
 801277e:	4622      	mov	r2, r4
 8012780:	4601      	mov	r1, r0
 8012782:	4628      	mov	r0, r5
 8012784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012788:	f000 b818 	b.w	80127bc <_kill_r>
 801278c:	2b01      	cmp	r3, #1
 801278e:	d00a      	beq.n	80127a6 <_raise_r+0x4c>
 8012790:	1c59      	adds	r1, r3, #1
 8012792:	d103      	bne.n	801279c <_raise_r+0x42>
 8012794:	2316      	movs	r3, #22
 8012796:	6003      	str	r3, [r0, #0]
 8012798:	2001      	movs	r0, #1
 801279a:	e7e7      	b.n	801276c <_raise_r+0x12>
 801279c:	2100      	movs	r1, #0
 801279e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80127a2:	4620      	mov	r0, r4
 80127a4:	4798      	blx	r3
 80127a6:	2000      	movs	r0, #0
 80127a8:	e7e0      	b.n	801276c <_raise_r+0x12>
	...

080127ac <raise>:
 80127ac:	4b02      	ldr	r3, [pc, #8]	@ (80127b8 <raise+0xc>)
 80127ae:	4601      	mov	r1, r0
 80127b0:	6818      	ldr	r0, [r3, #0]
 80127b2:	f7ff bfd2 	b.w	801275a <_raise_r>
 80127b6:	bf00      	nop
 80127b8:	20000110 	.word	0x20000110

080127bc <_kill_r>:
 80127bc:	b538      	push	{r3, r4, r5, lr}
 80127be:	4d07      	ldr	r5, [pc, #28]	@ (80127dc <_kill_r+0x20>)
 80127c0:	2300      	movs	r3, #0
 80127c2:	4604      	mov	r4, r0
 80127c4:	4608      	mov	r0, r1
 80127c6:	4611      	mov	r1, r2
 80127c8:	602b      	str	r3, [r5, #0]
 80127ca:	f7f2 f96b 	bl	8004aa4 <_kill>
 80127ce:	1c43      	adds	r3, r0, #1
 80127d0:	d102      	bne.n	80127d8 <_kill_r+0x1c>
 80127d2:	682b      	ldr	r3, [r5, #0]
 80127d4:	b103      	cbz	r3, 80127d8 <_kill_r+0x1c>
 80127d6:	6023      	str	r3, [r4, #0]
 80127d8:	bd38      	pop	{r3, r4, r5, pc}
 80127da:	bf00      	nop
 80127dc:	200025ec 	.word	0x200025ec

080127e0 <_getpid_r>:
 80127e0:	f7f2 b958 	b.w	8004a94 <_getpid>

080127e4 <asin>:
 80127e4:	b538      	push	{r3, r4, r5, lr}
 80127e6:	ed2d 8b02 	vpush	{d8}
 80127ea:	ec55 4b10 	vmov	r4, r5, d0
 80127ee:	f000 f9eb 	bl	8012bc8 <__ieee754_asin>
 80127f2:	4622      	mov	r2, r4
 80127f4:	462b      	mov	r3, r5
 80127f6:	4620      	mov	r0, r4
 80127f8:	4629      	mov	r1, r5
 80127fa:	eeb0 8a40 	vmov.f32	s16, s0
 80127fe:	eef0 8a60 	vmov.f32	s17, s1
 8012802:	f7ee f99b 	bl	8000b3c <__aeabi_dcmpun>
 8012806:	b9a8      	cbnz	r0, 8012834 <asin+0x50>
 8012808:	ec45 4b10 	vmov	d0, r4, r5
 801280c:	f000 f8bc 	bl	8012988 <fabs>
 8012810:	4b0c      	ldr	r3, [pc, #48]	@ (8012844 <asin+0x60>)
 8012812:	ec51 0b10 	vmov	r0, r1, d0
 8012816:	2200      	movs	r2, #0
 8012818:	f7ee f986 	bl	8000b28 <__aeabi_dcmpgt>
 801281c:	b150      	cbz	r0, 8012834 <asin+0x50>
 801281e:	f7fc fc55 	bl	800f0cc <__errno>
 8012822:	ecbd 8b02 	vpop	{d8}
 8012826:	2321      	movs	r3, #33	@ 0x21
 8012828:	6003      	str	r3, [r0, #0]
 801282a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801282e:	4806      	ldr	r0, [pc, #24]	@ (8012848 <asin+0x64>)
 8012830:	f7ff bb2e 	b.w	8011e90 <nan>
 8012834:	eeb0 0a48 	vmov.f32	s0, s16
 8012838:	eef0 0a68 	vmov.f32	s1, s17
 801283c:	ecbd 8b02 	vpop	{d8}
 8012840:	bd38      	pop	{r3, r4, r5, pc}
 8012842:	bf00      	nop
 8012844:	3ff00000 	.word	0x3ff00000
 8012848:	08014cfd 	.word	0x08014cfd

0801284c <atan2>:
 801284c:	f000 bbc0 	b.w	8012fd0 <__ieee754_atan2>

08012850 <pow>:
 8012850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012852:	ed2d 8b02 	vpush	{d8}
 8012856:	eeb0 8a40 	vmov.f32	s16, s0
 801285a:	eef0 8a60 	vmov.f32	s17, s1
 801285e:	ec55 4b11 	vmov	r4, r5, d1
 8012862:	f000 fc7d 	bl	8013160 <__ieee754_pow>
 8012866:	4622      	mov	r2, r4
 8012868:	462b      	mov	r3, r5
 801286a:	4620      	mov	r0, r4
 801286c:	4629      	mov	r1, r5
 801286e:	ec57 6b10 	vmov	r6, r7, d0
 8012872:	f7ee f963 	bl	8000b3c <__aeabi_dcmpun>
 8012876:	2800      	cmp	r0, #0
 8012878:	d13b      	bne.n	80128f2 <pow+0xa2>
 801287a:	ec51 0b18 	vmov	r0, r1, d8
 801287e:	2200      	movs	r2, #0
 8012880:	2300      	movs	r3, #0
 8012882:	f7ee f929 	bl	8000ad8 <__aeabi_dcmpeq>
 8012886:	b1b8      	cbz	r0, 80128b8 <pow+0x68>
 8012888:	2200      	movs	r2, #0
 801288a:	2300      	movs	r3, #0
 801288c:	4620      	mov	r0, r4
 801288e:	4629      	mov	r1, r5
 8012890:	f7ee f922 	bl	8000ad8 <__aeabi_dcmpeq>
 8012894:	2800      	cmp	r0, #0
 8012896:	d146      	bne.n	8012926 <pow+0xd6>
 8012898:	ec45 4b10 	vmov	d0, r4, r5
 801289c:	f000 f8b0 	bl	8012a00 <finite>
 80128a0:	b338      	cbz	r0, 80128f2 <pow+0xa2>
 80128a2:	2200      	movs	r2, #0
 80128a4:	2300      	movs	r3, #0
 80128a6:	4620      	mov	r0, r4
 80128a8:	4629      	mov	r1, r5
 80128aa:	f7ee f91f 	bl	8000aec <__aeabi_dcmplt>
 80128ae:	b300      	cbz	r0, 80128f2 <pow+0xa2>
 80128b0:	f7fc fc0c 	bl	800f0cc <__errno>
 80128b4:	2322      	movs	r3, #34	@ 0x22
 80128b6:	e01b      	b.n	80128f0 <pow+0xa0>
 80128b8:	ec47 6b10 	vmov	d0, r6, r7
 80128bc:	f000 f8a0 	bl	8012a00 <finite>
 80128c0:	b9e0      	cbnz	r0, 80128fc <pow+0xac>
 80128c2:	eeb0 0a48 	vmov.f32	s0, s16
 80128c6:	eef0 0a68 	vmov.f32	s1, s17
 80128ca:	f000 f899 	bl	8012a00 <finite>
 80128ce:	b1a8      	cbz	r0, 80128fc <pow+0xac>
 80128d0:	ec45 4b10 	vmov	d0, r4, r5
 80128d4:	f000 f894 	bl	8012a00 <finite>
 80128d8:	b180      	cbz	r0, 80128fc <pow+0xac>
 80128da:	4632      	mov	r2, r6
 80128dc:	463b      	mov	r3, r7
 80128de:	4630      	mov	r0, r6
 80128e0:	4639      	mov	r1, r7
 80128e2:	f7ee f92b 	bl	8000b3c <__aeabi_dcmpun>
 80128e6:	2800      	cmp	r0, #0
 80128e8:	d0e2      	beq.n	80128b0 <pow+0x60>
 80128ea:	f7fc fbef 	bl	800f0cc <__errno>
 80128ee:	2321      	movs	r3, #33	@ 0x21
 80128f0:	6003      	str	r3, [r0, #0]
 80128f2:	ecbd 8b02 	vpop	{d8}
 80128f6:	ec47 6b10 	vmov	d0, r6, r7
 80128fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128fc:	2200      	movs	r2, #0
 80128fe:	2300      	movs	r3, #0
 8012900:	4630      	mov	r0, r6
 8012902:	4639      	mov	r1, r7
 8012904:	f7ee f8e8 	bl	8000ad8 <__aeabi_dcmpeq>
 8012908:	2800      	cmp	r0, #0
 801290a:	d0f2      	beq.n	80128f2 <pow+0xa2>
 801290c:	eeb0 0a48 	vmov.f32	s0, s16
 8012910:	eef0 0a68 	vmov.f32	s1, s17
 8012914:	f000 f874 	bl	8012a00 <finite>
 8012918:	2800      	cmp	r0, #0
 801291a:	d0ea      	beq.n	80128f2 <pow+0xa2>
 801291c:	ec45 4b10 	vmov	d0, r4, r5
 8012920:	f000 f86e 	bl	8012a00 <finite>
 8012924:	e7c3      	b.n	80128ae <pow+0x5e>
 8012926:	4f01      	ldr	r7, [pc, #4]	@ (801292c <pow+0xdc>)
 8012928:	2600      	movs	r6, #0
 801292a:	e7e2      	b.n	80128f2 <pow+0xa2>
 801292c:	3ff00000 	.word	0x3ff00000

08012930 <sqrt>:
 8012930:	b538      	push	{r3, r4, r5, lr}
 8012932:	ed2d 8b02 	vpush	{d8}
 8012936:	ec55 4b10 	vmov	r4, r5, d0
 801293a:	f000 f86d 	bl	8012a18 <__ieee754_sqrt>
 801293e:	4622      	mov	r2, r4
 8012940:	462b      	mov	r3, r5
 8012942:	4620      	mov	r0, r4
 8012944:	4629      	mov	r1, r5
 8012946:	eeb0 8a40 	vmov.f32	s16, s0
 801294a:	eef0 8a60 	vmov.f32	s17, s1
 801294e:	f7ee f8f5 	bl	8000b3c <__aeabi_dcmpun>
 8012952:	b990      	cbnz	r0, 801297a <sqrt+0x4a>
 8012954:	2200      	movs	r2, #0
 8012956:	2300      	movs	r3, #0
 8012958:	4620      	mov	r0, r4
 801295a:	4629      	mov	r1, r5
 801295c:	f7ee f8c6 	bl	8000aec <__aeabi_dcmplt>
 8012960:	b158      	cbz	r0, 801297a <sqrt+0x4a>
 8012962:	f7fc fbb3 	bl	800f0cc <__errno>
 8012966:	2321      	movs	r3, #33	@ 0x21
 8012968:	6003      	str	r3, [r0, #0]
 801296a:	2200      	movs	r2, #0
 801296c:	2300      	movs	r3, #0
 801296e:	4610      	mov	r0, r2
 8012970:	4619      	mov	r1, r3
 8012972:	f7ed ff73 	bl	800085c <__aeabi_ddiv>
 8012976:	ec41 0b18 	vmov	d8, r0, r1
 801297a:	eeb0 0a48 	vmov.f32	s0, s16
 801297e:	eef0 0a68 	vmov.f32	s1, s17
 8012982:	ecbd 8b02 	vpop	{d8}
 8012986:	bd38      	pop	{r3, r4, r5, pc}

08012988 <fabs>:
 8012988:	ec51 0b10 	vmov	r0, r1, d0
 801298c:	4602      	mov	r2, r0
 801298e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012992:	ec43 2b10 	vmov	d0, r2, r3
 8012996:	4770      	bx	lr

08012998 <fabsf>:
 8012998:	ee10 3a10 	vmov	r3, s0
 801299c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80129a0:	ee00 3a10 	vmov	s0, r3
 80129a4:	4770      	bx	lr
	...

080129a8 <tanf>:
 80129a8:	ee10 3a10 	vmov	r3, s0
 80129ac:	b507      	push	{r0, r1, r2, lr}
 80129ae:	4a12      	ldr	r2, [pc, #72]	@ (80129f8 <tanf+0x50>)
 80129b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80129b4:	4293      	cmp	r3, r2
 80129b6:	d807      	bhi.n	80129c8 <tanf+0x20>
 80129b8:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80129fc <tanf+0x54>
 80129bc:	2001      	movs	r0, #1
 80129be:	b003      	add	sp, #12
 80129c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80129c4:	f001 bab0 	b.w	8013f28 <__kernel_tanf>
 80129c8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80129cc:	d304      	bcc.n	80129d8 <tanf+0x30>
 80129ce:	ee30 0a40 	vsub.f32	s0, s0, s0
 80129d2:	b003      	add	sp, #12
 80129d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80129d8:	4668      	mov	r0, sp
 80129da:	f001 fb85 	bl	80140e8 <__ieee754_rem_pio2f>
 80129de:	0040      	lsls	r0, r0, #1
 80129e0:	f000 0002 	and.w	r0, r0, #2
 80129e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80129e8:	ed9d 0a00 	vldr	s0, [sp]
 80129ec:	f1c0 0001 	rsb	r0, r0, #1
 80129f0:	f001 fa9a 	bl	8013f28 <__kernel_tanf>
 80129f4:	e7ed      	b.n	80129d2 <tanf+0x2a>
 80129f6:	bf00      	nop
 80129f8:	3f490fda 	.word	0x3f490fda
 80129fc:	00000000 	.word	0x00000000

08012a00 <finite>:
 8012a00:	b082      	sub	sp, #8
 8012a02:	ed8d 0b00 	vstr	d0, [sp]
 8012a06:	9801      	ldr	r0, [sp, #4]
 8012a08:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8012a0c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012a10:	0fc0      	lsrs	r0, r0, #31
 8012a12:	b002      	add	sp, #8
 8012a14:	4770      	bx	lr
	...

08012a18 <__ieee754_sqrt>:
 8012a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a1c:	4a66      	ldr	r2, [pc, #408]	@ (8012bb8 <__ieee754_sqrt+0x1a0>)
 8012a1e:	ec55 4b10 	vmov	r4, r5, d0
 8012a22:	43aa      	bics	r2, r5
 8012a24:	462b      	mov	r3, r5
 8012a26:	4621      	mov	r1, r4
 8012a28:	d110      	bne.n	8012a4c <__ieee754_sqrt+0x34>
 8012a2a:	4622      	mov	r2, r4
 8012a2c:	4620      	mov	r0, r4
 8012a2e:	4629      	mov	r1, r5
 8012a30:	f7ed fdea 	bl	8000608 <__aeabi_dmul>
 8012a34:	4602      	mov	r2, r0
 8012a36:	460b      	mov	r3, r1
 8012a38:	4620      	mov	r0, r4
 8012a3a:	4629      	mov	r1, r5
 8012a3c:	f7ed fc2e 	bl	800029c <__adddf3>
 8012a40:	4604      	mov	r4, r0
 8012a42:	460d      	mov	r5, r1
 8012a44:	ec45 4b10 	vmov	d0, r4, r5
 8012a48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a4c:	2d00      	cmp	r5, #0
 8012a4e:	dc0e      	bgt.n	8012a6e <__ieee754_sqrt+0x56>
 8012a50:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012a54:	4322      	orrs	r2, r4
 8012a56:	d0f5      	beq.n	8012a44 <__ieee754_sqrt+0x2c>
 8012a58:	b19d      	cbz	r5, 8012a82 <__ieee754_sqrt+0x6a>
 8012a5a:	4622      	mov	r2, r4
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	4629      	mov	r1, r5
 8012a60:	f7ed fc1a 	bl	8000298 <__aeabi_dsub>
 8012a64:	4602      	mov	r2, r0
 8012a66:	460b      	mov	r3, r1
 8012a68:	f7ed fef8 	bl	800085c <__aeabi_ddiv>
 8012a6c:	e7e8      	b.n	8012a40 <__ieee754_sqrt+0x28>
 8012a6e:	152a      	asrs	r2, r5, #20
 8012a70:	d115      	bne.n	8012a9e <__ieee754_sqrt+0x86>
 8012a72:	2000      	movs	r0, #0
 8012a74:	e009      	b.n	8012a8a <__ieee754_sqrt+0x72>
 8012a76:	0acb      	lsrs	r3, r1, #11
 8012a78:	3a15      	subs	r2, #21
 8012a7a:	0549      	lsls	r1, r1, #21
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d0fa      	beq.n	8012a76 <__ieee754_sqrt+0x5e>
 8012a80:	e7f7      	b.n	8012a72 <__ieee754_sqrt+0x5a>
 8012a82:	462a      	mov	r2, r5
 8012a84:	e7fa      	b.n	8012a7c <__ieee754_sqrt+0x64>
 8012a86:	005b      	lsls	r3, r3, #1
 8012a88:	3001      	adds	r0, #1
 8012a8a:	02dc      	lsls	r4, r3, #11
 8012a8c:	d5fb      	bpl.n	8012a86 <__ieee754_sqrt+0x6e>
 8012a8e:	1e44      	subs	r4, r0, #1
 8012a90:	1b12      	subs	r2, r2, r4
 8012a92:	f1c0 0420 	rsb	r4, r0, #32
 8012a96:	fa21 f404 	lsr.w	r4, r1, r4
 8012a9a:	4323      	orrs	r3, r4
 8012a9c:	4081      	lsls	r1, r0
 8012a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012aa2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8012aa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012aaa:	07d2      	lsls	r2, r2, #31
 8012aac:	bf5c      	itt	pl
 8012aae:	005b      	lslpl	r3, r3, #1
 8012ab0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012ab4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012ab8:	bf58      	it	pl
 8012aba:	0049      	lslpl	r1, r1, #1
 8012abc:	2600      	movs	r6, #0
 8012abe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012ac2:	107f      	asrs	r7, r7, #1
 8012ac4:	0049      	lsls	r1, r1, #1
 8012ac6:	2016      	movs	r0, #22
 8012ac8:	4632      	mov	r2, r6
 8012aca:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012ace:	1915      	adds	r5, r2, r4
 8012ad0:	429d      	cmp	r5, r3
 8012ad2:	bfde      	ittt	le
 8012ad4:	192a      	addle	r2, r5, r4
 8012ad6:	1b5b      	suble	r3, r3, r5
 8012ad8:	1936      	addle	r6, r6, r4
 8012ada:	0fcd      	lsrs	r5, r1, #31
 8012adc:	3801      	subs	r0, #1
 8012ade:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8012ae2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012ae6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012aea:	d1f0      	bne.n	8012ace <__ieee754_sqrt+0xb6>
 8012aec:	4605      	mov	r5, r0
 8012aee:	2420      	movs	r4, #32
 8012af0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012af4:	4293      	cmp	r3, r2
 8012af6:	eb0c 0e00 	add.w	lr, ip, r0
 8012afa:	dc02      	bgt.n	8012b02 <__ieee754_sqrt+0xea>
 8012afc:	d113      	bne.n	8012b26 <__ieee754_sqrt+0x10e>
 8012afe:	458e      	cmp	lr, r1
 8012b00:	d811      	bhi.n	8012b26 <__ieee754_sqrt+0x10e>
 8012b02:	f1be 0f00 	cmp.w	lr, #0
 8012b06:	eb0e 000c 	add.w	r0, lr, ip
 8012b0a:	da3f      	bge.n	8012b8c <__ieee754_sqrt+0x174>
 8012b0c:	2800      	cmp	r0, #0
 8012b0e:	db3d      	blt.n	8012b8c <__ieee754_sqrt+0x174>
 8012b10:	f102 0801 	add.w	r8, r2, #1
 8012b14:	1a9b      	subs	r3, r3, r2
 8012b16:	458e      	cmp	lr, r1
 8012b18:	bf88      	it	hi
 8012b1a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012b1e:	eba1 010e 	sub.w	r1, r1, lr
 8012b22:	4465      	add	r5, ip
 8012b24:	4642      	mov	r2, r8
 8012b26:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012b2a:	3c01      	subs	r4, #1
 8012b2c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012b30:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012b34:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012b38:	d1dc      	bne.n	8012af4 <__ieee754_sqrt+0xdc>
 8012b3a:	4319      	orrs	r1, r3
 8012b3c:	d01b      	beq.n	8012b76 <__ieee754_sqrt+0x15e>
 8012b3e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8012bbc <__ieee754_sqrt+0x1a4>
 8012b42:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8012bc0 <__ieee754_sqrt+0x1a8>
 8012b46:	e9da 0100 	ldrd	r0, r1, [sl]
 8012b4a:	e9db 2300 	ldrd	r2, r3, [fp]
 8012b4e:	f7ed fba3 	bl	8000298 <__aeabi_dsub>
 8012b52:	e9da 8900 	ldrd	r8, r9, [sl]
 8012b56:	4602      	mov	r2, r0
 8012b58:	460b      	mov	r3, r1
 8012b5a:	4640      	mov	r0, r8
 8012b5c:	4649      	mov	r1, r9
 8012b5e:	f7ed ffcf 	bl	8000b00 <__aeabi_dcmple>
 8012b62:	b140      	cbz	r0, 8012b76 <__ieee754_sqrt+0x15e>
 8012b64:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012b68:	e9da 0100 	ldrd	r0, r1, [sl]
 8012b6c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012b70:	d10e      	bne.n	8012b90 <__ieee754_sqrt+0x178>
 8012b72:	3601      	adds	r6, #1
 8012b74:	4625      	mov	r5, r4
 8012b76:	1073      	asrs	r3, r6, #1
 8012b78:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8012b7c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8012b80:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8012b84:	086b      	lsrs	r3, r5, #1
 8012b86:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8012b8a:	e759      	b.n	8012a40 <__ieee754_sqrt+0x28>
 8012b8c:	4690      	mov	r8, r2
 8012b8e:	e7c1      	b.n	8012b14 <__ieee754_sqrt+0xfc>
 8012b90:	f7ed fb84 	bl	800029c <__adddf3>
 8012b94:	e9da 8900 	ldrd	r8, r9, [sl]
 8012b98:	4602      	mov	r2, r0
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	4640      	mov	r0, r8
 8012b9e:	4649      	mov	r1, r9
 8012ba0:	f7ed ffa4 	bl	8000aec <__aeabi_dcmplt>
 8012ba4:	b120      	cbz	r0, 8012bb0 <__ieee754_sqrt+0x198>
 8012ba6:	1cab      	adds	r3, r5, #2
 8012ba8:	bf08      	it	eq
 8012baa:	3601      	addeq	r6, #1
 8012bac:	3502      	adds	r5, #2
 8012bae:	e7e2      	b.n	8012b76 <__ieee754_sqrt+0x15e>
 8012bb0:	1c6b      	adds	r3, r5, #1
 8012bb2:	f023 0501 	bic.w	r5, r3, #1
 8012bb6:	e7de      	b.n	8012b76 <__ieee754_sqrt+0x15e>
 8012bb8:	7ff00000 	.word	0x7ff00000
 8012bbc:	08014fc0 	.word	0x08014fc0
 8012bc0:	08014fb8 	.word	0x08014fb8
 8012bc4:	00000000 	.word	0x00000000

08012bc8 <__ieee754_asin>:
 8012bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bcc:	ec55 4b10 	vmov	r4, r5, d0
 8012bd0:	4bc7      	ldr	r3, [pc, #796]	@ (8012ef0 <__ieee754_asin+0x328>)
 8012bd2:	b087      	sub	sp, #28
 8012bd4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8012bd8:	429e      	cmp	r6, r3
 8012bda:	9501      	str	r5, [sp, #4]
 8012bdc:	d92d      	bls.n	8012c3a <__ieee754_asin+0x72>
 8012bde:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8012be2:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8012be6:	4326      	orrs	r6, r4
 8012be8:	d116      	bne.n	8012c18 <__ieee754_asin+0x50>
 8012bea:	a3a7      	add	r3, pc, #668	@ (adr r3, 8012e88 <__ieee754_asin+0x2c0>)
 8012bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf0:	4620      	mov	r0, r4
 8012bf2:	4629      	mov	r1, r5
 8012bf4:	f7ed fd08 	bl	8000608 <__aeabi_dmul>
 8012bf8:	a3a5      	add	r3, pc, #660	@ (adr r3, 8012e90 <__ieee754_asin+0x2c8>)
 8012bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bfe:	4606      	mov	r6, r0
 8012c00:	460f      	mov	r7, r1
 8012c02:	4620      	mov	r0, r4
 8012c04:	4629      	mov	r1, r5
 8012c06:	f7ed fcff 	bl	8000608 <__aeabi_dmul>
 8012c0a:	4602      	mov	r2, r0
 8012c0c:	460b      	mov	r3, r1
 8012c0e:	4630      	mov	r0, r6
 8012c10:	4639      	mov	r1, r7
 8012c12:	f7ed fb43 	bl	800029c <__adddf3>
 8012c16:	e009      	b.n	8012c2c <__ieee754_asin+0x64>
 8012c18:	4622      	mov	r2, r4
 8012c1a:	462b      	mov	r3, r5
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	4629      	mov	r1, r5
 8012c20:	f7ed fb3a 	bl	8000298 <__aeabi_dsub>
 8012c24:	4602      	mov	r2, r0
 8012c26:	460b      	mov	r3, r1
 8012c28:	f7ed fe18 	bl	800085c <__aeabi_ddiv>
 8012c2c:	4604      	mov	r4, r0
 8012c2e:	460d      	mov	r5, r1
 8012c30:	ec45 4b10 	vmov	d0, r4, r5
 8012c34:	b007      	add	sp, #28
 8012c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c3a:	4bae      	ldr	r3, [pc, #696]	@ (8012ef4 <__ieee754_asin+0x32c>)
 8012c3c:	429e      	cmp	r6, r3
 8012c3e:	d810      	bhi.n	8012c62 <__ieee754_asin+0x9a>
 8012c40:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8012c44:	f080 80ad 	bcs.w	8012da2 <__ieee754_asin+0x1da>
 8012c48:	a393      	add	r3, pc, #588	@ (adr r3, 8012e98 <__ieee754_asin+0x2d0>)
 8012c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c4e:	4620      	mov	r0, r4
 8012c50:	4629      	mov	r1, r5
 8012c52:	f7ed fb23 	bl	800029c <__adddf3>
 8012c56:	4ba8      	ldr	r3, [pc, #672]	@ (8012ef8 <__ieee754_asin+0x330>)
 8012c58:	2200      	movs	r2, #0
 8012c5a:	f7ed ff65 	bl	8000b28 <__aeabi_dcmpgt>
 8012c5e:	2800      	cmp	r0, #0
 8012c60:	d1e6      	bne.n	8012c30 <__ieee754_asin+0x68>
 8012c62:	ec45 4b10 	vmov	d0, r4, r5
 8012c66:	f7ff fe8f 	bl	8012988 <fabs>
 8012c6a:	49a3      	ldr	r1, [pc, #652]	@ (8012ef8 <__ieee754_asin+0x330>)
 8012c6c:	ec53 2b10 	vmov	r2, r3, d0
 8012c70:	2000      	movs	r0, #0
 8012c72:	f7ed fb11 	bl	8000298 <__aeabi_dsub>
 8012c76:	4ba1      	ldr	r3, [pc, #644]	@ (8012efc <__ieee754_asin+0x334>)
 8012c78:	2200      	movs	r2, #0
 8012c7a:	f7ed fcc5 	bl	8000608 <__aeabi_dmul>
 8012c7e:	a388      	add	r3, pc, #544	@ (adr r3, 8012ea0 <__ieee754_asin+0x2d8>)
 8012c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c84:	4604      	mov	r4, r0
 8012c86:	460d      	mov	r5, r1
 8012c88:	f7ed fcbe 	bl	8000608 <__aeabi_dmul>
 8012c8c:	a386      	add	r3, pc, #536	@ (adr r3, 8012ea8 <__ieee754_asin+0x2e0>)
 8012c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c92:	f7ed fb03 	bl	800029c <__adddf3>
 8012c96:	4622      	mov	r2, r4
 8012c98:	462b      	mov	r3, r5
 8012c9a:	f7ed fcb5 	bl	8000608 <__aeabi_dmul>
 8012c9e:	a384      	add	r3, pc, #528	@ (adr r3, 8012eb0 <__ieee754_asin+0x2e8>)
 8012ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca4:	f7ed faf8 	bl	8000298 <__aeabi_dsub>
 8012ca8:	4622      	mov	r2, r4
 8012caa:	462b      	mov	r3, r5
 8012cac:	f7ed fcac 	bl	8000608 <__aeabi_dmul>
 8012cb0:	a381      	add	r3, pc, #516	@ (adr r3, 8012eb8 <__ieee754_asin+0x2f0>)
 8012cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb6:	f7ed faf1 	bl	800029c <__adddf3>
 8012cba:	4622      	mov	r2, r4
 8012cbc:	462b      	mov	r3, r5
 8012cbe:	f7ed fca3 	bl	8000608 <__aeabi_dmul>
 8012cc2:	a37f      	add	r3, pc, #508	@ (adr r3, 8012ec0 <__ieee754_asin+0x2f8>)
 8012cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc8:	f7ed fae6 	bl	8000298 <__aeabi_dsub>
 8012ccc:	4622      	mov	r2, r4
 8012cce:	462b      	mov	r3, r5
 8012cd0:	f7ed fc9a 	bl	8000608 <__aeabi_dmul>
 8012cd4:	a37c      	add	r3, pc, #496	@ (adr r3, 8012ec8 <__ieee754_asin+0x300>)
 8012cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cda:	f7ed fadf 	bl	800029c <__adddf3>
 8012cde:	4622      	mov	r2, r4
 8012ce0:	462b      	mov	r3, r5
 8012ce2:	f7ed fc91 	bl	8000608 <__aeabi_dmul>
 8012ce6:	a37a      	add	r3, pc, #488	@ (adr r3, 8012ed0 <__ieee754_asin+0x308>)
 8012ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	4629      	mov	r1, r5
 8012cf4:	f7ed fc88 	bl	8000608 <__aeabi_dmul>
 8012cf8:	a377      	add	r3, pc, #476	@ (adr r3, 8012ed8 <__ieee754_asin+0x310>)
 8012cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cfe:	f7ed facb 	bl	8000298 <__aeabi_dsub>
 8012d02:	4622      	mov	r2, r4
 8012d04:	462b      	mov	r3, r5
 8012d06:	f7ed fc7f 	bl	8000608 <__aeabi_dmul>
 8012d0a:	a375      	add	r3, pc, #468	@ (adr r3, 8012ee0 <__ieee754_asin+0x318>)
 8012d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d10:	f7ed fac4 	bl	800029c <__adddf3>
 8012d14:	4622      	mov	r2, r4
 8012d16:	462b      	mov	r3, r5
 8012d18:	f7ed fc76 	bl	8000608 <__aeabi_dmul>
 8012d1c:	a372      	add	r3, pc, #456	@ (adr r3, 8012ee8 <__ieee754_asin+0x320>)
 8012d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d22:	f7ed fab9 	bl	8000298 <__aeabi_dsub>
 8012d26:	4622      	mov	r2, r4
 8012d28:	462b      	mov	r3, r5
 8012d2a:	f7ed fc6d 	bl	8000608 <__aeabi_dmul>
 8012d2e:	4b72      	ldr	r3, [pc, #456]	@ (8012ef8 <__ieee754_asin+0x330>)
 8012d30:	2200      	movs	r2, #0
 8012d32:	f7ed fab3 	bl	800029c <__adddf3>
 8012d36:	ec45 4b10 	vmov	d0, r4, r5
 8012d3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012d3e:	f7ff fe6b 	bl	8012a18 <__ieee754_sqrt>
 8012d42:	4b6f      	ldr	r3, [pc, #444]	@ (8012f00 <__ieee754_asin+0x338>)
 8012d44:	429e      	cmp	r6, r3
 8012d46:	ec5b ab10 	vmov	sl, fp, d0
 8012d4a:	f240 80db 	bls.w	8012f04 <__ieee754_asin+0x33c>
 8012d4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d56:	f7ed fd81 	bl	800085c <__aeabi_ddiv>
 8012d5a:	4652      	mov	r2, sl
 8012d5c:	465b      	mov	r3, fp
 8012d5e:	f7ed fc53 	bl	8000608 <__aeabi_dmul>
 8012d62:	4652      	mov	r2, sl
 8012d64:	465b      	mov	r3, fp
 8012d66:	f7ed fa99 	bl	800029c <__adddf3>
 8012d6a:	4602      	mov	r2, r0
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	f7ed fa95 	bl	800029c <__adddf3>
 8012d72:	a347      	add	r3, pc, #284	@ (adr r3, 8012e90 <__ieee754_asin+0x2c8>)
 8012d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d78:	f7ed fa8e 	bl	8000298 <__aeabi_dsub>
 8012d7c:	4602      	mov	r2, r0
 8012d7e:	460b      	mov	r3, r1
 8012d80:	a141      	add	r1, pc, #260	@ (adr r1, 8012e88 <__ieee754_asin+0x2c0>)
 8012d82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d86:	f7ed fa87 	bl	8000298 <__aeabi_dsub>
 8012d8a:	9b01      	ldr	r3, [sp, #4]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	bfdc      	itt	le
 8012d90:	4602      	movle	r2, r0
 8012d92:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8012d96:	4604      	mov	r4, r0
 8012d98:	460d      	mov	r5, r1
 8012d9a:	bfdc      	itt	le
 8012d9c:	4614      	movle	r4, r2
 8012d9e:	461d      	movle	r5, r3
 8012da0:	e746      	b.n	8012c30 <__ieee754_asin+0x68>
 8012da2:	4622      	mov	r2, r4
 8012da4:	462b      	mov	r3, r5
 8012da6:	4620      	mov	r0, r4
 8012da8:	4629      	mov	r1, r5
 8012daa:	f7ed fc2d 	bl	8000608 <__aeabi_dmul>
 8012dae:	a33c      	add	r3, pc, #240	@ (adr r3, 8012ea0 <__ieee754_asin+0x2d8>)
 8012db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012db4:	4606      	mov	r6, r0
 8012db6:	460f      	mov	r7, r1
 8012db8:	f7ed fc26 	bl	8000608 <__aeabi_dmul>
 8012dbc:	a33a      	add	r3, pc, #232	@ (adr r3, 8012ea8 <__ieee754_asin+0x2e0>)
 8012dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc2:	f7ed fa6b 	bl	800029c <__adddf3>
 8012dc6:	4632      	mov	r2, r6
 8012dc8:	463b      	mov	r3, r7
 8012dca:	f7ed fc1d 	bl	8000608 <__aeabi_dmul>
 8012dce:	a338      	add	r3, pc, #224	@ (adr r3, 8012eb0 <__ieee754_asin+0x2e8>)
 8012dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd4:	f7ed fa60 	bl	8000298 <__aeabi_dsub>
 8012dd8:	4632      	mov	r2, r6
 8012dda:	463b      	mov	r3, r7
 8012ddc:	f7ed fc14 	bl	8000608 <__aeabi_dmul>
 8012de0:	a335      	add	r3, pc, #212	@ (adr r3, 8012eb8 <__ieee754_asin+0x2f0>)
 8012de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de6:	f7ed fa59 	bl	800029c <__adddf3>
 8012dea:	4632      	mov	r2, r6
 8012dec:	463b      	mov	r3, r7
 8012dee:	f7ed fc0b 	bl	8000608 <__aeabi_dmul>
 8012df2:	a333      	add	r3, pc, #204	@ (adr r3, 8012ec0 <__ieee754_asin+0x2f8>)
 8012df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df8:	f7ed fa4e 	bl	8000298 <__aeabi_dsub>
 8012dfc:	4632      	mov	r2, r6
 8012dfe:	463b      	mov	r3, r7
 8012e00:	f7ed fc02 	bl	8000608 <__aeabi_dmul>
 8012e04:	a330      	add	r3, pc, #192	@ (adr r3, 8012ec8 <__ieee754_asin+0x300>)
 8012e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0a:	f7ed fa47 	bl	800029c <__adddf3>
 8012e0e:	4632      	mov	r2, r6
 8012e10:	463b      	mov	r3, r7
 8012e12:	f7ed fbf9 	bl	8000608 <__aeabi_dmul>
 8012e16:	a32e      	add	r3, pc, #184	@ (adr r3, 8012ed0 <__ieee754_asin+0x308>)
 8012e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1c:	4680      	mov	r8, r0
 8012e1e:	4689      	mov	r9, r1
 8012e20:	4630      	mov	r0, r6
 8012e22:	4639      	mov	r1, r7
 8012e24:	f7ed fbf0 	bl	8000608 <__aeabi_dmul>
 8012e28:	a32b      	add	r3, pc, #172	@ (adr r3, 8012ed8 <__ieee754_asin+0x310>)
 8012e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2e:	f7ed fa33 	bl	8000298 <__aeabi_dsub>
 8012e32:	4632      	mov	r2, r6
 8012e34:	463b      	mov	r3, r7
 8012e36:	f7ed fbe7 	bl	8000608 <__aeabi_dmul>
 8012e3a:	a329      	add	r3, pc, #164	@ (adr r3, 8012ee0 <__ieee754_asin+0x318>)
 8012e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e40:	f7ed fa2c 	bl	800029c <__adddf3>
 8012e44:	4632      	mov	r2, r6
 8012e46:	463b      	mov	r3, r7
 8012e48:	f7ed fbde 	bl	8000608 <__aeabi_dmul>
 8012e4c:	a326      	add	r3, pc, #152	@ (adr r3, 8012ee8 <__ieee754_asin+0x320>)
 8012e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e52:	f7ed fa21 	bl	8000298 <__aeabi_dsub>
 8012e56:	4632      	mov	r2, r6
 8012e58:	463b      	mov	r3, r7
 8012e5a:	f7ed fbd5 	bl	8000608 <__aeabi_dmul>
 8012e5e:	4b26      	ldr	r3, [pc, #152]	@ (8012ef8 <__ieee754_asin+0x330>)
 8012e60:	2200      	movs	r2, #0
 8012e62:	f7ed fa1b 	bl	800029c <__adddf3>
 8012e66:	4602      	mov	r2, r0
 8012e68:	460b      	mov	r3, r1
 8012e6a:	4640      	mov	r0, r8
 8012e6c:	4649      	mov	r1, r9
 8012e6e:	f7ed fcf5 	bl	800085c <__aeabi_ddiv>
 8012e72:	4622      	mov	r2, r4
 8012e74:	462b      	mov	r3, r5
 8012e76:	f7ed fbc7 	bl	8000608 <__aeabi_dmul>
 8012e7a:	4602      	mov	r2, r0
 8012e7c:	460b      	mov	r3, r1
 8012e7e:	4620      	mov	r0, r4
 8012e80:	4629      	mov	r1, r5
 8012e82:	e6c6      	b.n	8012c12 <__ieee754_asin+0x4a>
 8012e84:	f3af 8000 	nop.w
 8012e88:	54442d18 	.word	0x54442d18
 8012e8c:	3ff921fb 	.word	0x3ff921fb
 8012e90:	33145c07 	.word	0x33145c07
 8012e94:	3c91a626 	.word	0x3c91a626
 8012e98:	8800759c 	.word	0x8800759c
 8012e9c:	7e37e43c 	.word	0x7e37e43c
 8012ea0:	0dfdf709 	.word	0x0dfdf709
 8012ea4:	3f023de1 	.word	0x3f023de1
 8012ea8:	7501b288 	.word	0x7501b288
 8012eac:	3f49efe0 	.word	0x3f49efe0
 8012eb0:	b5688f3b 	.word	0xb5688f3b
 8012eb4:	3fa48228 	.word	0x3fa48228
 8012eb8:	0e884455 	.word	0x0e884455
 8012ebc:	3fc9c155 	.word	0x3fc9c155
 8012ec0:	03eb6f7d 	.word	0x03eb6f7d
 8012ec4:	3fd4d612 	.word	0x3fd4d612
 8012ec8:	55555555 	.word	0x55555555
 8012ecc:	3fc55555 	.word	0x3fc55555
 8012ed0:	b12e9282 	.word	0xb12e9282
 8012ed4:	3fb3b8c5 	.word	0x3fb3b8c5
 8012ed8:	1b8d0159 	.word	0x1b8d0159
 8012edc:	3fe6066c 	.word	0x3fe6066c
 8012ee0:	9c598ac8 	.word	0x9c598ac8
 8012ee4:	40002ae5 	.word	0x40002ae5
 8012ee8:	1c8a2d4b 	.word	0x1c8a2d4b
 8012eec:	40033a27 	.word	0x40033a27
 8012ef0:	3fefffff 	.word	0x3fefffff
 8012ef4:	3fdfffff 	.word	0x3fdfffff
 8012ef8:	3ff00000 	.word	0x3ff00000
 8012efc:	3fe00000 	.word	0x3fe00000
 8012f00:	3fef3332 	.word	0x3fef3332
 8012f04:	4652      	mov	r2, sl
 8012f06:	465b      	mov	r3, fp
 8012f08:	4650      	mov	r0, sl
 8012f0a:	4659      	mov	r1, fp
 8012f0c:	f7ed f9c6 	bl	800029c <__adddf3>
 8012f10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f14:	4606      	mov	r6, r0
 8012f16:	460f      	mov	r7, r1
 8012f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f1c:	f7ed fc9e 	bl	800085c <__aeabi_ddiv>
 8012f20:	4602      	mov	r2, r0
 8012f22:	460b      	mov	r3, r1
 8012f24:	4630      	mov	r0, r6
 8012f26:	4639      	mov	r1, r7
 8012f28:	f7ed fb6e 	bl	8000608 <__aeabi_dmul>
 8012f2c:	f04f 0800 	mov.w	r8, #0
 8012f30:	4606      	mov	r6, r0
 8012f32:	460f      	mov	r7, r1
 8012f34:	4642      	mov	r2, r8
 8012f36:	465b      	mov	r3, fp
 8012f38:	4640      	mov	r0, r8
 8012f3a:	4659      	mov	r1, fp
 8012f3c:	f7ed fb64 	bl	8000608 <__aeabi_dmul>
 8012f40:	4602      	mov	r2, r0
 8012f42:	460b      	mov	r3, r1
 8012f44:	4620      	mov	r0, r4
 8012f46:	4629      	mov	r1, r5
 8012f48:	f7ed f9a6 	bl	8000298 <__aeabi_dsub>
 8012f4c:	4642      	mov	r2, r8
 8012f4e:	4604      	mov	r4, r0
 8012f50:	460d      	mov	r5, r1
 8012f52:	465b      	mov	r3, fp
 8012f54:	4650      	mov	r0, sl
 8012f56:	4659      	mov	r1, fp
 8012f58:	f7ed f9a0 	bl	800029c <__adddf3>
 8012f5c:	4602      	mov	r2, r0
 8012f5e:	460b      	mov	r3, r1
 8012f60:	4620      	mov	r0, r4
 8012f62:	4629      	mov	r1, r5
 8012f64:	f7ed fc7a 	bl	800085c <__aeabi_ddiv>
 8012f68:	4602      	mov	r2, r0
 8012f6a:	460b      	mov	r3, r1
 8012f6c:	f7ed f996 	bl	800029c <__adddf3>
 8012f70:	4602      	mov	r2, r0
 8012f72:	460b      	mov	r3, r1
 8012f74:	a112      	add	r1, pc, #72	@ (adr r1, 8012fc0 <__ieee754_asin+0x3f8>)
 8012f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f7a:	f7ed f98d 	bl	8000298 <__aeabi_dsub>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	460b      	mov	r3, r1
 8012f82:	4630      	mov	r0, r6
 8012f84:	4639      	mov	r1, r7
 8012f86:	f7ed f987 	bl	8000298 <__aeabi_dsub>
 8012f8a:	4642      	mov	r2, r8
 8012f8c:	4604      	mov	r4, r0
 8012f8e:	460d      	mov	r5, r1
 8012f90:	465b      	mov	r3, fp
 8012f92:	4640      	mov	r0, r8
 8012f94:	4659      	mov	r1, fp
 8012f96:	f7ed f981 	bl	800029c <__adddf3>
 8012f9a:	4602      	mov	r2, r0
 8012f9c:	460b      	mov	r3, r1
 8012f9e:	a10a      	add	r1, pc, #40	@ (adr r1, 8012fc8 <__ieee754_asin+0x400>)
 8012fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fa4:	f7ed f978 	bl	8000298 <__aeabi_dsub>
 8012fa8:	4602      	mov	r2, r0
 8012faa:	460b      	mov	r3, r1
 8012fac:	4620      	mov	r0, r4
 8012fae:	4629      	mov	r1, r5
 8012fb0:	f7ed f972 	bl	8000298 <__aeabi_dsub>
 8012fb4:	4602      	mov	r2, r0
 8012fb6:	460b      	mov	r3, r1
 8012fb8:	a103      	add	r1, pc, #12	@ (adr r1, 8012fc8 <__ieee754_asin+0x400>)
 8012fba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fbe:	e6e2      	b.n	8012d86 <__ieee754_asin+0x1be>
 8012fc0:	33145c07 	.word	0x33145c07
 8012fc4:	3c91a626 	.word	0x3c91a626
 8012fc8:	54442d18 	.word	0x54442d18
 8012fcc:	3fe921fb 	.word	0x3fe921fb

08012fd0 <__ieee754_atan2>:
 8012fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fd4:	ec57 6b11 	vmov	r6, r7, d1
 8012fd8:	4273      	negs	r3, r6
 8012fda:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8013158 <__ieee754_atan2+0x188>
 8012fde:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8012fe2:	4333      	orrs	r3, r6
 8012fe4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012fe8:	4543      	cmp	r3, r8
 8012fea:	ec51 0b10 	vmov	r0, r1, d0
 8012fee:	4635      	mov	r5, r6
 8012ff0:	d809      	bhi.n	8013006 <__ieee754_atan2+0x36>
 8012ff2:	4244      	negs	r4, r0
 8012ff4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012ff8:	4304      	orrs	r4, r0
 8012ffa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012ffe:	4544      	cmp	r4, r8
 8013000:	468e      	mov	lr, r1
 8013002:	4681      	mov	r9, r0
 8013004:	d907      	bls.n	8013016 <__ieee754_atan2+0x46>
 8013006:	4632      	mov	r2, r6
 8013008:	463b      	mov	r3, r7
 801300a:	f7ed f947 	bl	800029c <__adddf3>
 801300e:	ec41 0b10 	vmov	d0, r0, r1
 8013012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013016:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801301a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801301e:	4334      	orrs	r4, r6
 8013020:	d103      	bne.n	801302a <__ieee754_atan2+0x5a>
 8013022:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013026:	f000 bde7 	b.w	8013bf8 <atan>
 801302a:	17bc      	asrs	r4, r7, #30
 801302c:	f004 0402 	and.w	r4, r4, #2
 8013030:	ea53 0909 	orrs.w	r9, r3, r9
 8013034:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013038:	d107      	bne.n	801304a <__ieee754_atan2+0x7a>
 801303a:	2c02      	cmp	r4, #2
 801303c:	d05f      	beq.n	80130fe <__ieee754_atan2+0x12e>
 801303e:	2c03      	cmp	r4, #3
 8013040:	d1e5      	bne.n	801300e <__ieee754_atan2+0x3e>
 8013042:	a143      	add	r1, pc, #268	@ (adr r1, 8013150 <__ieee754_atan2+0x180>)
 8013044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013048:	e7e1      	b.n	801300e <__ieee754_atan2+0x3e>
 801304a:	4315      	orrs	r5, r2
 801304c:	d106      	bne.n	801305c <__ieee754_atan2+0x8c>
 801304e:	f1be 0f00 	cmp.w	lr, #0
 8013052:	db5f      	blt.n	8013114 <__ieee754_atan2+0x144>
 8013054:	a136      	add	r1, pc, #216	@ (adr r1, 8013130 <__ieee754_atan2+0x160>)
 8013056:	e9d1 0100 	ldrd	r0, r1, [r1]
 801305a:	e7d8      	b.n	801300e <__ieee754_atan2+0x3e>
 801305c:	4542      	cmp	r2, r8
 801305e:	d10f      	bne.n	8013080 <__ieee754_atan2+0xb0>
 8013060:	4293      	cmp	r3, r2
 8013062:	f104 34ff 	add.w	r4, r4, #4294967295
 8013066:	d107      	bne.n	8013078 <__ieee754_atan2+0xa8>
 8013068:	2c02      	cmp	r4, #2
 801306a:	d84c      	bhi.n	8013106 <__ieee754_atan2+0x136>
 801306c:	4b36      	ldr	r3, [pc, #216]	@ (8013148 <__ieee754_atan2+0x178>)
 801306e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013076:	e7ca      	b.n	801300e <__ieee754_atan2+0x3e>
 8013078:	2c02      	cmp	r4, #2
 801307a:	d848      	bhi.n	801310e <__ieee754_atan2+0x13e>
 801307c:	4b33      	ldr	r3, [pc, #204]	@ (801314c <__ieee754_atan2+0x17c>)
 801307e:	e7f6      	b.n	801306e <__ieee754_atan2+0x9e>
 8013080:	4543      	cmp	r3, r8
 8013082:	d0e4      	beq.n	801304e <__ieee754_atan2+0x7e>
 8013084:	1a9b      	subs	r3, r3, r2
 8013086:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801308a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801308e:	da1e      	bge.n	80130ce <__ieee754_atan2+0xfe>
 8013090:	2f00      	cmp	r7, #0
 8013092:	da01      	bge.n	8013098 <__ieee754_atan2+0xc8>
 8013094:	323c      	adds	r2, #60	@ 0x3c
 8013096:	db1e      	blt.n	80130d6 <__ieee754_atan2+0x106>
 8013098:	4632      	mov	r2, r6
 801309a:	463b      	mov	r3, r7
 801309c:	f7ed fbde 	bl	800085c <__aeabi_ddiv>
 80130a0:	ec41 0b10 	vmov	d0, r0, r1
 80130a4:	f7ff fc70 	bl	8012988 <fabs>
 80130a8:	f000 fda6 	bl	8013bf8 <atan>
 80130ac:	ec51 0b10 	vmov	r0, r1, d0
 80130b0:	2c01      	cmp	r4, #1
 80130b2:	d013      	beq.n	80130dc <__ieee754_atan2+0x10c>
 80130b4:	2c02      	cmp	r4, #2
 80130b6:	d015      	beq.n	80130e4 <__ieee754_atan2+0x114>
 80130b8:	2c00      	cmp	r4, #0
 80130ba:	d0a8      	beq.n	801300e <__ieee754_atan2+0x3e>
 80130bc:	a318      	add	r3, pc, #96	@ (adr r3, 8013120 <__ieee754_atan2+0x150>)
 80130be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c2:	f7ed f8e9 	bl	8000298 <__aeabi_dsub>
 80130c6:	a318      	add	r3, pc, #96	@ (adr r3, 8013128 <__ieee754_atan2+0x158>)
 80130c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130cc:	e014      	b.n	80130f8 <__ieee754_atan2+0x128>
 80130ce:	a118      	add	r1, pc, #96	@ (adr r1, 8013130 <__ieee754_atan2+0x160>)
 80130d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130d4:	e7ec      	b.n	80130b0 <__ieee754_atan2+0xe0>
 80130d6:	2000      	movs	r0, #0
 80130d8:	2100      	movs	r1, #0
 80130da:	e7e9      	b.n	80130b0 <__ieee754_atan2+0xe0>
 80130dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80130e0:	4619      	mov	r1, r3
 80130e2:	e794      	b.n	801300e <__ieee754_atan2+0x3e>
 80130e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8013120 <__ieee754_atan2+0x150>)
 80130e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ea:	f7ed f8d5 	bl	8000298 <__aeabi_dsub>
 80130ee:	4602      	mov	r2, r0
 80130f0:	460b      	mov	r3, r1
 80130f2:	a10d      	add	r1, pc, #52	@ (adr r1, 8013128 <__ieee754_atan2+0x158>)
 80130f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130f8:	f7ed f8ce 	bl	8000298 <__aeabi_dsub>
 80130fc:	e787      	b.n	801300e <__ieee754_atan2+0x3e>
 80130fe:	a10a      	add	r1, pc, #40	@ (adr r1, 8013128 <__ieee754_atan2+0x158>)
 8013100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013104:	e783      	b.n	801300e <__ieee754_atan2+0x3e>
 8013106:	a10c      	add	r1, pc, #48	@ (adr r1, 8013138 <__ieee754_atan2+0x168>)
 8013108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801310c:	e77f      	b.n	801300e <__ieee754_atan2+0x3e>
 801310e:	2000      	movs	r0, #0
 8013110:	2100      	movs	r1, #0
 8013112:	e77c      	b.n	801300e <__ieee754_atan2+0x3e>
 8013114:	a10a      	add	r1, pc, #40	@ (adr r1, 8013140 <__ieee754_atan2+0x170>)
 8013116:	e9d1 0100 	ldrd	r0, r1, [r1]
 801311a:	e778      	b.n	801300e <__ieee754_atan2+0x3e>
 801311c:	f3af 8000 	nop.w
 8013120:	33145c07 	.word	0x33145c07
 8013124:	3ca1a626 	.word	0x3ca1a626
 8013128:	54442d18 	.word	0x54442d18
 801312c:	400921fb 	.word	0x400921fb
 8013130:	54442d18 	.word	0x54442d18
 8013134:	3ff921fb 	.word	0x3ff921fb
 8013138:	54442d18 	.word	0x54442d18
 801313c:	3fe921fb 	.word	0x3fe921fb
 8013140:	54442d18 	.word	0x54442d18
 8013144:	bff921fb 	.word	0xbff921fb
 8013148:	08014fe0 	.word	0x08014fe0
 801314c:	08014fc8 	.word	0x08014fc8
 8013150:	54442d18 	.word	0x54442d18
 8013154:	c00921fb 	.word	0xc00921fb
 8013158:	7ff00000 	.word	0x7ff00000
 801315c:	00000000 	.word	0x00000000

08013160 <__ieee754_pow>:
 8013160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013164:	b091      	sub	sp, #68	@ 0x44
 8013166:	ed8d 1b00 	vstr	d1, [sp]
 801316a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801316e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8013172:	ea5a 0001 	orrs.w	r0, sl, r1
 8013176:	ec57 6b10 	vmov	r6, r7, d0
 801317a:	d113      	bne.n	80131a4 <__ieee754_pow+0x44>
 801317c:	19b3      	adds	r3, r6, r6
 801317e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8013182:	4152      	adcs	r2, r2
 8013184:	4298      	cmp	r0, r3
 8013186:	4b9a      	ldr	r3, [pc, #616]	@ (80133f0 <__ieee754_pow+0x290>)
 8013188:	4193      	sbcs	r3, r2
 801318a:	f080 84ee 	bcs.w	8013b6a <__ieee754_pow+0xa0a>
 801318e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013192:	4630      	mov	r0, r6
 8013194:	4639      	mov	r1, r7
 8013196:	f7ed f881 	bl	800029c <__adddf3>
 801319a:	ec41 0b10 	vmov	d0, r0, r1
 801319e:	b011      	add	sp, #68	@ 0x44
 80131a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131a4:	4a93      	ldr	r2, [pc, #588]	@ (80133f4 <__ieee754_pow+0x294>)
 80131a6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80131aa:	4295      	cmp	r5, r2
 80131ac:	46b8      	mov	r8, r7
 80131ae:	4633      	mov	r3, r6
 80131b0:	d80a      	bhi.n	80131c8 <__ieee754_pow+0x68>
 80131b2:	d104      	bne.n	80131be <__ieee754_pow+0x5e>
 80131b4:	2e00      	cmp	r6, #0
 80131b6:	d1ea      	bne.n	801318e <__ieee754_pow+0x2e>
 80131b8:	45aa      	cmp	sl, r5
 80131ba:	d8e8      	bhi.n	801318e <__ieee754_pow+0x2e>
 80131bc:	e001      	b.n	80131c2 <__ieee754_pow+0x62>
 80131be:	4592      	cmp	sl, r2
 80131c0:	d802      	bhi.n	80131c8 <__ieee754_pow+0x68>
 80131c2:	4592      	cmp	sl, r2
 80131c4:	d10f      	bne.n	80131e6 <__ieee754_pow+0x86>
 80131c6:	b171      	cbz	r1, 80131e6 <__ieee754_pow+0x86>
 80131c8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80131cc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80131d0:	ea58 0803 	orrs.w	r8, r8, r3
 80131d4:	d1db      	bne.n	801318e <__ieee754_pow+0x2e>
 80131d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80131da:	18db      	adds	r3, r3, r3
 80131dc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80131e0:	4152      	adcs	r2, r2
 80131e2:	4598      	cmp	r8, r3
 80131e4:	e7cf      	b.n	8013186 <__ieee754_pow+0x26>
 80131e6:	f1b8 0f00 	cmp.w	r8, #0
 80131ea:	46ab      	mov	fp, r5
 80131ec:	da43      	bge.n	8013276 <__ieee754_pow+0x116>
 80131ee:	4a82      	ldr	r2, [pc, #520]	@ (80133f8 <__ieee754_pow+0x298>)
 80131f0:	4592      	cmp	sl, r2
 80131f2:	d856      	bhi.n	80132a2 <__ieee754_pow+0x142>
 80131f4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80131f8:	4592      	cmp	sl, r2
 80131fa:	f240 84c5 	bls.w	8013b88 <__ieee754_pow+0xa28>
 80131fe:	ea4f 522a 	mov.w	r2, sl, asr #20
 8013202:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013206:	2a14      	cmp	r2, #20
 8013208:	dd18      	ble.n	801323c <__ieee754_pow+0xdc>
 801320a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801320e:	fa21 f402 	lsr.w	r4, r1, r2
 8013212:	fa04 f202 	lsl.w	r2, r4, r2
 8013216:	428a      	cmp	r2, r1
 8013218:	f040 84b6 	bne.w	8013b88 <__ieee754_pow+0xa28>
 801321c:	f004 0401 	and.w	r4, r4, #1
 8013220:	f1c4 0402 	rsb	r4, r4, #2
 8013224:	2900      	cmp	r1, #0
 8013226:	d159      	bne.n	80132dc <__ieee754_pow+0x17c>
 8013228:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801322c:	d148      	bne.n	80132c0 <__ieee754_pow+0x160>
 801322e:	4632      	mov	r2, r6
 8013230:	463b      	mov	r3, r7
 8013232:	4630      	mov	r0, r6
 8013234:	4639      	mov	r1, r7
 8013236:	f7ed f9e7 	bl	8000608 <__aeabi_dmul>
 801323a:	e7ae      	b.n	801319a <__ieee754_pow+0x3a>
 801323c:	2900      	cmp	r1, #0
 801323e:	d14c      	bne.n	80132da <__ieee754_pow+0x17a>
 8013240:	f1c2 0214 	rsb	r2, r2, #20
 8013244:	fa4a f402 	asr.w	r4, sl, r2
 8013248:	fa04 f202 	lsl.w	r2, r4, r2
 801324c:	4552      	cmp	r2, sl
 801324e:	f040 8498 	bne.w	8013b82 <__ieee754_pow+0xa22>
 8013252:	f004 0401 	and.w	r4, r4, #1
 8013256:	f1c4 0402 	rsb	r4, r4, #2
 801325a:	4a68      	ldr	r2, [pc, #416]	@ (80133fc <__ieee754_pow+0x29c>)
 801325c:	4592      	cmp	sl, r2
 801325e:	d1e3      	bne.n	8013228 <__ieee754_pow+0xc8>
 8013260:	f1b9 0f00 	cmp.w	r9, #0
 8013264:	f280 8489 	bge.w	8013b7a <__ieee754_pow+0xa1a>
 8013268:	4964      	ldr	r1, [pc, #400]	@ (80133fc <__ieee754_pow+0x29c>)
 801326a:	4632      	mov	r2, r6
 801326c:	463b      	mov	r3, r7
 801326e:	2000      	movs	r0, #0
 8013270:	f7ed faf4 	bl	800085c <__aeabi_ddiv>
 8013274:	e791      	b.n	801319a <__ieee754_pow+0x3a>
 8013276:	2400      	movs	r4, #0
 8013278:	bb81      	cbnz	r1, 80132dc <__ieee754_pow+0x17c>
 801327a:	4a5e      	ldr	r2, [pc, #376]	@ (80133f4 <__ieee754_pow+0x294>)
 801327c:	4592      	cmp	sl, r2
 801327e:	d1ec      	bne.n	801325a <__ieee754_pow+0xfa>
 8013280:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8013284:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8013288:	431a      	orrs	r2, r3
 801328a:	f000 846e 	beq.w	8013b6a <__ieee754_pow+0xa0a>
 801328e:	4b5c      	ldr	r3, [pc, #368]	@ (8013400 <__ieee754_pow+0x2a0>)
 8013290:	429d      	cmp	r5, r3
 8013292:	d908      	bls.n	80132a6 <__ieee754_pow+0x146>
 8013294:	f1b9 0f00 	cmp.w	r9, #0
 8013298:	f280 846b 	bge.w	8013b72 <__ieee754_pow+0xa12>
 801329c:	2000      	movs	r0, #0
 801329e:	2100      	movs	r1, #0
 80132a0:	e77b      	b.n	801319a <__ieee754_pow+0x3a>
 80132a2:	2402      	movs	r4, #2
 80132a4:	e7e8      	b.n	8013278 <__ieee754_pow+0x118>
 80132a6:	f1b9 0f00 	cmp.w	r9, #0
 80132aa:	f04f 0000 	mov.w	r0, #0
 80132ae:	f04f 0100 	mov.w	r1, #0
 80132b2:	f6bf af72 	bge.w	801319a <__ieee754_pow+0x3a>
 80132b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80132ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80132be:	e76c      	b.n	801319a <__ieee754_pow+0x3a>
 80132c0:	4a50      	ldr	r2, [pc, #320]	@ (8013404 <__ieee754_pow+0x2a4>)
 80132c2:	4591      	cmp	r9, r2
 80132c4:	d10a      	bne.n	80132dc <__ieee754_pow+0x17c>
 80132c6:	f1b8 0f00 	cmp.w	r8, #0
 80132ca:	db07      	blt.n	80132dc <__ieee754_pow+0x17c>
 80132cc:	ec47 6b10 	vmov	d0, r6, r7
 80132d0:	b011      	add	sp, #68	@ 0x44
 80132d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d6:	f7ff bb9f 	b.w	8012a18 <__ieee754_sqrt>
 80132da:	2400      	movs	r4, #0
 80132dc:	ec47 6b10 	vmov	d0, r6, r7
 80132e0:	9302      	str	r3, [sp, #8]
 80132e2:	f7ff fb51 	bl	8012988 <fabs>
 80132e6:	9b02      	ldr	r3, [sp, #8]
 80132e8:	ec51 0b10 	vmov	r0, r1, d0
 80132ec:	bb43      	cbnz	r3, 8013340 <__ieee754_pow+0x1e0>
 80132ee:	4b43      	ldr	r3, [pc, #268]	@ (80133fc <__ieee754_pow+0x29c>)
 80132f0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d000      	beq.n	80132fa <__ieee754_pow+0x19a>
 80132f8:	bb15      	cbnz	r5, 8013340 <__ieee754_pow+0x1e0>
 80132fa:	f1b9 0f00 	cmp.w	r9, #0
 80132fe:	da05      	bge.n	801330c <__ieee754_pow+0x1ac>
 8013300:	4602      	mov	r2, r0
 8013302:	460b      	mov	r3, r1
 8013304:	2000      	movs	r0, #0
 8013306:	493d      	ldr	r1, [pc, #244]	@ (80133fc <__ieee754_pow+0x29c>)
 8013308:	f7ed faa8 	bl	800085c <__aeabi_ddiv>
 801330c:	f1b8 0f00 	cmp.w	r8, #0
 8013310:	f6bf af43 	bge.w	801319a <__ieee754_pow+0x3a>
 8013314:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8013318:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801331c:	4325      	orrs	r5, r4
 801331e:	d108      	bne.n	8013332 <__ieee754_pow+0x1d2>
 8013320:	4602      	mov	r2, r0
 8013322:	460b      	mov	r3, r1
 8013324:	4610      	mov	r0, r2
 8013326:	4619      	mov	r1, r3
 8013328:	f7ec ffb6 	bl	8000298 <__aeabi_dsub>
 801332c:	4602      	mov	r2, r0
 801332e:	460b      	mov	r3, r1
 8013330:	e79e      	b.n	8013270 <__ieee754_pow+0x110>
 8013332:	2c01      	cmp	r4, #1
 8013334:	f47f af31 	bne.w	801319a <__ieee754_pow+0x3a>
 8013338:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801333c:	4619      	mov	r1, r3
 801333e:	e72c      	b.n	801319a <__ieee754_pow+0x3a>
 8013340:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8013344:	3b01      	subs	r3, #1
 8013346:	ea53 0204 	orrs.w	r2, r3, r4
 801334a:	d102      	bne.n	8013352 <__ieee754_pow+0x1f2>
 801334c:	4632      	mov	r2, r6
 801334e:	463b      	mov	r3, r7
 8013350:	e7e8      	b.n	8013324 <__ieee754_pow+0x1c4>
 8013352:	3c01      	subs	r4, #1
 8013354:	431c      	orrs	r4, r3
 8013356:	d016      	beq.n	8013386 <__ieee754_pow+0x226>
 8013358:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80133e0 <__ieee754_pow+0x280>
 801335c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8013360:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013364:	f240 8110 	bls.w	8013588 <__ieee754_pow+0x428>
 8013368:	4b27      	ldr	r3, [pc, #156]	@ (8013408 <__ieee754_pow+0x2a8>)
 801336a:	459a      	cmp	sl, r3
 801336c:	4b24      	ldr	r3, [pc, #144]	@ (8013400 <__ieee754_pow+0x2a0>)
 801336e:	d916      	bls.n	801339e <__ieee754_pow+0x23e>
 8013370:	429d      	cmp	r5, r3
 8013372:	d80b      	bhi.n	801338c <__ieee754_pow+0x22c>
 8013374:	f1b9 0f00 	cmp.w	r9, #0
 8013378:	da0b      	bge.n	8013392 <__ieee754_pow+0x232>
 801337a:	2000      	movs	r0, #0
 801337c:	b011      	add	sp, #68	@ 0x44
 801337e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013382:	f001 b891 	b.w	80144a8 <__math_oflow>
 8013386:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80133e8 <__ieee754_pow+0x288>
 801338a:	e7e7      	b.n	801335c <__ieee754_pow+0x1fc>
 801338c:	f1b9 0f00 	cmp.w	r9, #0
 8013390:	dcf3      	bgt.n	801337a <__ieee754_pow+0x21a>
 8013392:	2000      	movs	r0, #0
 8013394:	b011      	add	sp, #68	@ 0x44
 8013396:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801339a:	f001 b87d 	b.w	8014498 <__math_uflow>
 801339e:	429d      	cmp	r5, r3
 80133a0:	d20c      	bcs.n	80133bc <__ieee754_pow+0x25c>
 80133a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133a6:	2200      	movs	r2, #0
 80133a8:	2300      	movs	r3, #0
 80133aa:	f7ed fb9f 	bl	8000aec <__aeabi_dcmplt>
 80133ae:	3800      	subs	r0, #0
 80133b0:	bf18      	it	ne
 80133b2:	2001      	movne	r0, #1
 80133b4:	f1b9 0f00 	cmp.w	r9, #0
 80133b8:	daec      	bge.n	8013394 <__ieee754_pow+0x234>
 80133ba:	e7df      	b.n	801337c <__ieee754_pow+0x21c>
 80133bc:	4b0f      	ldr	r3, [pc, #60]	@ (80133fc <__ieee754_pow+0x29c>)
 80133be:	429d      	cmp	r5, r3
 80133c0:	f04f 0200 	mov.w	r2, #0
 80133c4:	d922      	bls.n	801340c <__ieee754_pow+0x2ac>
 80133c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133ca:	2300      	movs	r3, #0
 80133cc:	f7ed fb8e 	bl	8000aec <__aeabi_dcmplt>
 80133d0:	3800      	subs	r0, #0
 80133d2:	bf18      	it	ne
 80133d4:	2001      	movne	r0, #1
 80133d6:	f1b9 0f00 	cmp.w	r9, #0
 80133da:	dccf      	bgt.n	801337c <__ieee754_pow+0x21c>
 80133dc:	e7da      	b.n	8013394 <__ieee754_pow+0x234>
 80133de:	bf00      	nop
 80133e0:	00000000 	.word	0x00000000
 80133e4:	3ff00000 	.word	0x3ff00000
 80133e8:	00000000 	.word	0x00000000
 80133ec:	bff00000 	.word	0xbff00000
 80133f0:	fff00000 	.word	0xfff00000
 80133f4:	7ff00000 	.word	0x7ff00000
 80133f8:	433fffff 	.word	0x433fffff
 80133fc:	3ff00000 	.word	0x3ff00000
 8013400:	3fefffff 	.word	0x3fefffff
 8013404:	3fe00000 	.word	0x3fe00000
 8013408:	43f00000 	.word	0x43f00000
 801340c:	4b5a      	ldr	r3, [pc, #360]	@ (8013578 <__ieee754_pow+0x418>)
 801340e:	f7ec ff43 	bl	8000298 <__aeabi_dsub>
 8013412:	a351      	add	r3, pc, #324	@ (adr r3, 8013558 <__ieee754_pow+0x3f8>)
 8013414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013418:	4604      	mov	r4, r0
 801341a:	460d      	mov	r5, r1
 801341c:	f7ed f8f4 	bl	8000608 <__aeabi_dmul>
 8013420:	a34f      	add	r3, pc, #316	@ (adr r3, 8013560 <__ieee754_pow+0x400>)
 8013422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013426:	4606      	mov	r6, r0
 8013428:	460f      	mov	r7, r1
 801342a:	4620      	mov	r0, r4
 801342c:	4629      	mov	r1, r5
 801342e:	f7ed f8eb 	bl	8000608 <__aeabi_dmul>
 8013432:	4b52      	ldr	r3, [pc, #328]	@ (801357c <__ieee754_pow+0x41c>)
 8013434:	4682      	mov	sl, r0
 8013436:	468b      	mov	fp, r1
 8013438:	2200      	movs	r2, #0
 801343a:	4620      	mov	r0, r4
 801343c:	4629      	mov	r1, r5
 801343e:	f7ed f8e3 	bl	8000608 <__aeabi_dmul>
 8013442:	4602      	mov	r2, r0
 8013444:	460b      	mov	r3, r1
 8013446:	a148      	add	r1, pc, #288	@ (adr r1, 8013568 <__ieee754_pow+0x408>)
 8013448:	e9d1 0100 	ldrd	r0, r1, [r1]
 801344c:	f7ec ff24 	bl	8000298 <__aeabi_dsub>
 8013450:	4622      	mov	r2, r4
 8013452:	462b      	mov	r3, r5
 8013454:	f7ed f8d8 	bl	8000608 <__aeabi_dmul>
 8013458:	4602      	mov	r2, r0
 801345a:	460b      	mov	r3, r1
 801345c:	2000      	movs	r0, #0
 801345e:	4948      	ldr	r1, [pc, #288]	@ (8013580 <__ieee754_pow+0x420>)
 8013460:	f7ec ff1a 	bl	8000298 <__aeabi_dsub>
 8013464:	4622      	mov	r2, r4
 8013466:	4680      	mov	r8, r0
 8013468:	4689      	mov	r9, r1
 801346a:	462b      	mov	r3, r5
 801346c:	4620      	mov	r0, r4
 801346e:	4629      	mov	r1, r5
 8013470:	f7ed f8ca 	bl	8000608 <__aeabi_dmul>
 8013474:	4602      	mov	r2, r0
 8013476:	460b      	mov	r3, r1
 8013478:	4640      	mov	r0, r8
 801347a:	4649      	mov	r1, r9
 801347c:	f7ed f8c4 	bl	8000608 <__aeabi_dmul>
 8013480:	a33b      	add	r3, pc, #236	@ (adr r3, 8013570 <__ieee754_pow+0x410>)
 8013482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013486:	f7ed f8bf 	bl	8000608 <__aeabi_dmul>
 801348a:	4602      	mov	r2, r0
 801348c:	460b      	mov	r3, r1
 801348e:	4650      	mov	r0, sl
 8013490:	4659      	mov	r1, fp
 8013492:	f7ec ff01 	bl	8000298 <__aeabi_dsub>
 8013496:	4602      	mov	r2, r0
 8013498:	460b      	mov	r3, r1
 801349a:	4680      	mov	r8, r0
 801349c:	4689      	mov	r9, r1
 801349e:	4630      	mov	r0, r6
 80134a0:	4639      	mov	r1, r7
 80134a2:	f7ec fefb 	bl	800029c <__adddf3>
 80134a6:	2400      	movs	r4, #0
 80134a8:	4632      	mov	r2, r6
 80134aa:	463b      	mov	r3, r7
 80134ac:	4620      	mov	r0, r4
 80134ae:	460d      	mov	r5, r1
 80134b0:	f7ec fef2 	bl	8000298 <__aeabi_dsub>
 80134b4:	4602      	mov	r2, r0
 80134b6:	460b      	mov	r3, r1
 80134b8:	4640      	mov	r0, r8
 80134ba:	4649      	mov	r1, r9
 80134bc:	f7ec feec 	bl	8000298 <__aeabi_dsub>
 80134c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80134c8:	2300      	movs	r3, #0
 80134ca:	9304      	str	r3, [sp, #16]
 80134cc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80134d0:	4606      	mov	r6, r0
 80134d2:	460f      	mov	r7, r1
 80134d4:	465b      	mov	r3, fp
 80134d6:	4652      	mov	r2, sl
 80134d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80134dc:	f7ec fedc 	bl	8000298 <__aeabi_dsub>
 80134e0:	4622      	mov	r2, r4
 80134e2:	462b      	mov	r3, r5
 80134e4:	f7ed f890 	bl	8000608 <__aeabi_dmul>
 80134e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134ec:	4680      	mov	r8, r0
 80134ee:	4689      	mov	r9, r1
 80134f0:	4630      	mov	r0, r6
 80134f2:	4639      	mov	r1, r7
 80134f4:	f7ed f888 	bl	8000608 <__aeabi_dmul>
 80134f8:	4602      	mov	r2, r0
 80134fa:	460b      	mov	r3, r1
 80134fc:	4640      	mov	r0, r8
 80134fe:	4649      	mov	r1, r9
 8013500:	f7ec fecc 	bl	800029c <__adddf3>
 8013504:	465b      	mov	r3, fp
 8013506:	4606      	mov	r6, r0
 8013508:	460f      	mov	r7, r1
 801350a:	4652      	mov	r2, sl
 801350c:	4620      	mov	r0, r4
 801350e:	4629      	mov	r1, r5
 8013510:	f7ed f87a 	bl	8000608 <__aeabi_dmul>
 8013514:	460b      	mov	r3, r1
 8013516:	4602      	mov	r2, r0
 8013518:	4680      	mov	r8, r0
 801351a:	4689      	mov	r9, r1
 801351c:	4630      	mov	r0, r6
 801351e:	4639      	mov	r1, r7
 8013520:	f7ec febc 	bl	800029c <__adddf3>
 8013524:	4b17      	ldr	r3, [pc, #92]	@ (8013584 <__ieee754_pow+0x424>)
 8013526:	4299      	cmp	r1, r3
 8013528:	4604      	mov	r4, r0
 801352a:	460d      	mov	r5, r1
 801352c:	468b      	mov	fp, r1
 801352e:	f340 820b 	ble.w	8013948 <__ieee754_pow+0x7e8>
 8013532:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013536:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801353a:	4303      	orrs	r3, r0
 801353c:	f000 81ea 	beq.w	8013914 <__ieee754_pow+0x7b4>
 8013540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013544:	2200      	movs	r2, #0
 8013546:	2300      	movs	r3, #0
 8013548:	f7ed fad0 	bl	8000aec <__aeabi_dcmplt>
 801354c:	3800      	subs	r0, #0
 801354e:	bf18      	it	ne
 8013550:	2001      	movne	r0, #1
 8013552:	e713      	b.n	801337c <__ieee754_pow+0x21c>
 8013554:	f3af 8000 	nop.w
 8013558:	60000000 	.word	0x60000000
 801355c:	3ff71547 	.word	0x3ff71547
 8013560:	f85ddf44 	.word	0xf85ddf44
 8013564:	3e54ae0b 	.word	0x3e54ae0b
 8013568:	55555555 	.word	0x55555555
 801356c:	3fd55555 	.word	0x3fd55555
 8013570:	652b82fe 	.word	0x652b82fe
 8013574:	3ff71547 	.word	0x3ff71547
 8013578:	3ff00000 	.word	0x3ff00000
 801357c:	3fd00000 	.word	0x3fd00000
 8013580:	3fe00000 	.word	0x3fe00000
 8013584:	408fffff 	.word	0x408fffff
 8013588:	4bd5      	ldr	r3, [pc, #852]	@ (80138e0 <__ieee754_pow+0x780>)
 801358a:	ea08 0303 	and.w	r3, r8, r3
 801358e:	2200      	movs	r2, #0
 8013590:	b92b      	cbnz	r3, 801359e <__ieee754_pow+0x43e>
 8013592:	4bd4      	ldr	r3, [pc, #848]	@ (80138e4 <__ieee754_pow+0x784>)
 8013594:	f7ed f838 	bl	8000608 <__aeabi_dmul>
 8013598:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801359c:	468b      	mov	fp, r1
 801359e:	ea4f 532b 	mov.w	r3, fp, asr #20
 80135a2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80135a6:	4413      	add	r3, r2
 80135a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80135aa:	4bcf      	ldr	r3, [pc, #828]	@ (80138e8 <__ieee754_pow+0x788>)
 80135ac:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80135b0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80135b4:	459b      	cmp	fp, r3
 80135b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80135ba:	dd08      	ble.n	80135ce <__ieee754_pow+0x46e>
 80135bc:	4bcb      	ldr	r3, [pc, #812]	@ (80138ec <__ieee754_pow+0x78c>)
 80135be:	459b      	cmp	fp, r3
 80135c0:	f340 81a5 	ble.w	801390e <__ieee754_pow+0x7ae>
 80135c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135c6:	3301      	adds	r3, #1
 80135c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80135ca:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80135ce:	f04f 0a00 	mov.w	sl, #0
 80135d2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80135d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80135d8:	4bc5      	ldr	r3, [pc, #788]	@ (80138f0 <__ieee754_pow+0x790>)
 80135da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80135de:	ed93 7b00 	vldr	d7, [r3]
 80135e2:	4629      	mov	r1, r5
 80135e4:	ec53 2b17 	vmov	r2, r3, d7
 80135e8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80135ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80135f0:	f7ec fe52 	bl	8000298 <__aeabi_dsub>
 80135f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80135f8:	4606      	mov	r6, r0
 80135fa:	460f      	mov	r7, r1
 80135fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013600:	f7ec fe4c 	bl	800029c <__adddf3>
 8013604:	4602      	mov	r2, r0
 8013606:	460b      	mov	r3, r1
 8013608:	2000      	movs	r0, #0
 801360a:	49ba      	ldr	r1, [pc, #744]	@ (80138f4 <__ieee754_pow+0x794>)
 801360c:	f7ed f926 	bl	800085c <__aeabi_ddiv>
 8013610:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013614:	4602      	mov	r2, r0
 8013616:	460b      	mov	r3, r1
 8013618:	4630      	mov	r0, r6
 801361a:	4639      	mov	r1, r7
 801361c:	f7ec fff4 	bl	8000608 <__aeabi_dmul>
 8013620:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013624:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8013628:	106d      	asrs	r5, r5, #1
 801362a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801362e:	f04f 0b00 	mov.w	fp, #0
 8013632:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013636:	4661      	mov	r1, ip
 8013638:	2200      	movs	r2, #0
 801363a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801363e:	4658      	mov	r0, fp
 8013640:	46e1      	mov	r9, ip
 8013642:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8013646:	4614      	mov	r4, r2
 8013648:	461d      	mov	r5, r3
 801364a:	f7ec ffdd 	bl	8000608 <__aeabi_dmul>
 801364e:	4602      	mov	r2, r0
 8013650:	460b      	mov	r3, r1
 8013652:	4630      	mov	r0, r6
 8013654:	4639      	mov	r1, r7
 8013656:	f7ec fe1f 	bl	8000298 <__aeabi_dsub>
 801365a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801365e:	4606      	mov	r6, r0
 8013660:	460f      	mov	r7, r1
 8013662:	4620      	mov	r0, r4
 8013664:	4629      	mov	r1, r5
 8013666:	f7ec fe17 	bl	8000298 <__aeabi_dsub>
 801366a:	4602      	mov	r2, r0
 801366c:	460b      	mov	r3, r1
 801366e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013672:	f7ec fe11 	bl	8000298 <__aeabi_dsub>
 8013676:	465a      	mov	r2, fp
 8013678:	464b      	mov	r3, r9
 801367a:	f7ec ffc5 	bl	8000608 <__aeabi_dmul>
 801367e:	4602      	mov	r2, r0
 8013680:	460b      	mov	r3, r1
 8013682:	4630      	mov	r0, r6
 8013684:	4639      	mov	r1, r7
 8013686:	f7ec fe07 	bl	8000298 <__aeabi_dsub>
 801368a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801368e:	f7ec ffbb 	bl	8000608 <__aeabi_dmul>
 8013692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013696:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801369a:	4610      	mov	r0, r2
 801369c:	4619      	mov	r1, r3
 801369e:	f7ec ffb3 	bl	8000608 <__aeabi_dmul>
 80136a2:	a37d      	add	r3, pc, #500	@ (adr r3, 8013898 <__ieee754_pow+0x738>)
 80136a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a8:	4604      	mov	r4, r0
 80136aa:	460d      	mov	r5, r1
 80136ac:	f7ec ffac 	bl	8000608 <__aeabi_dmul>
 80136b0:	a37b      	add	r3, pc, #492	@ (adr r3, 80138a0 <__ieee754_pow+0x740>)
 80136b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b6:	f7ec fdf1 	bl	800029c <__adddf3>
 80136ba:	4622      	mov	r2, r4
 80136bc:	462b      	mov	r3, r5
 80136be:	f7ec ffa3 	bl	8000608 <__aeabi_dmul>
 80136c2:	a379      	add	r3, pc, #484	@ (adr r3, 80138a8 <__ieee754_pow+0x748>)
 80136c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c8:	f7ec fde8 	bl	800029c <__adddf3>
 80136cc:	4622      	mov	r2, r4
 80136ce:	462b      	mov	r3, r5
 80136d0:	f7ec ff9a 	bl	8000608 <__aeabi_dmul>
 80136d4:	a376      	add	r3, pc, #472	@ (adr r3, 80138b0 <__ieee754_pow+0x750>)
 80136d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136da:	f7ec fddf 	bl	800029c <__adddf3>
 80136de:	4622      	mov	r2, r4
 80136e0:	462b      	mov	r3, r5
 80136e2:	f7ec ff91 	bl	8000608 <__aeabi_dmul>
 80136e6:	a374      	add	r3, pc, #464	@ (adr r3, 80138b8 <__ieee754_pow+0x758>)
 80136e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ec:	f7ec fdd6 	bl	800029c <__adddf3>
 80136f0:	4622      	mov	r2, r4
 80136f2:	462b      	mov	r3, r5
 80136f4:	f7ec ff88 	bl	8000608 <__aeabi_dmul>
 80136f8:	a371      	add	r3, pc, #452	@ (adr r3, 80138c0 <__ieee754_pow+0x760>)
 80136fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136fe:	f7ec fdcd 	bl	800029c <__adddf3>
 8013702:	4622      	mov	r2, r4
 8013704:	4606      	mov	r6, r0
 8013706:	460f      	mov	r7, r1
 8013708:	462b      	mov	r3, r5
 801370a:	4620      	mov	r0, r4
 801370c:	4629      	mov	r1, r5
 801370e:	f7ec ff7b 	bl	8000608 <__aeabi_dmul>
 8013712:	4602      	mov	r2, r0
 8013714:	460b      	mov	r3, r1
 8013716:	4630      	mov	r0, r6
 8013718:	4639      	mov	r1, r7
 801371a:	f7ec ff75 	bl	8000608 <__aeabi_dmul>
 801371e:	465a      	mov	r2, fp
 8013720:	4604      	mov	r4, r0
 8013722:	460d      	mov	r5, r1
 8013724:	464b      	mov	r3, r9
 8013726:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801372a:	f7ec fdb7 	bl	800029c <__adddf3>
 801372e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013732:	f7ec ff69 	bl	8000608 <__aeabi_dmul>
 8013736:	4622      	mov	r2, r4
 8013738:	462b      	mov	r3, r5
 801373a:	f7ec fdaf 	bl	800029c <__adddf3>
 801373e:	465a      	mov	r2, fp
 8013740:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013744:	464b      	mov	r3, r9
 8013746:	4658      	mov	r0, fp
 8013748:	4649      	mov	r1, r9
 801374a:	f7ec ff5d 	bl	8000608 <__aeabi_dmul>
 801374e:	4b6a      	ldr	r3, [pc, #424]	@ (80138f8 <__ieee754_pow+0x798>)
 8013750:	2200      	movs	r2, #0
 8013752:	4606      	mov	r6, r0
 8013754:	460f      	mov	r7, r1
 8013756:	f7ec fda1 	bl	800029c <__adddf3>
 801375a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801375e:	f7ec fd9d 	bl	800029c <__adddf3>
 8013762:	46d8      	mov	r8, fp
 8013764:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8013768:	460d      	mov	r5, r1
 801376a:	465a      	mov	r2, fp
 801376c:	460b      	mov	r3, r1
 801376e:	4640      	mov	r0, r8
 8013770:	4649      	mov	r1, r9
 8013772:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8013776:	f7ec ff47 	bl	8000608 <__aeabi_dmul>
 801377a:	465c      	mov	r4, fp
 801377c:	4680      	mov	r8, r0
 801377e:	4689      	mov	r9, r1
 8013780:	4b5d      	ldr	r3, [pc, #372]	@ (80138f8 <__ieee754_pow+0x798>)
 8013782:	2200      	movs	r2, #0
 8013784:	4620      	mov	r0, r4
 8013786:	4629      	mov	r1, r5
 8013788:	f7ec fd86 	bl	8000298 <__aeabi_dsub>
 801378c:	4632      	mov	r2, r6
 801378e:	463b      	mov	r3, r7
 8013790:	f7ec fd82 	bl	8000298 <__aeabi_dsub>
 8013794:	4602      	mov	r2, r0
 8013796:	460b      	mov	r3, r1
 8013798:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801379c:	f7ec fd7c 	bl	8000298 <__aeabi_dsub>
 80137a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80137a4:	f7ec ff30 	bl	8000608 <__aeabi_dmul>
 80137a8:	4622      	mov	r2, r4
 80137aa:	4606      	mov	r6, r0
 80137ac:	460f      	mov	r7, r1
 80137ae:	462b      	mov	r3, r5
 80137b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80137b4:	f7ec ff28 	bl	8000608 <__aeabi_dmul>
 80137b8:	4602      	mov	r2, r0
 80137ba:	460b      	mov	r3, r1
 80137bc:	4630      	mov	r0, r6
 80137be:	4639      	mov	r1, r7
 80137c0:	f7ec fd6c 	bl	800029c <__adddf3>
 80137c4:	4606      	mov	r6, r0
 80137c6:	460f      	mov	r7, r1
 80137c8:	4602      	mov	r2, r0
 80137ca:	460b      	mov	r3, r1
 80137cc:	4640      	mov	r0, r8
 80137ce:	4649      	mov	r1, r9
 80137d0:	f7ec fd64 	bl	800029c <__adddf3>
 80137d4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80137d8:	a33b      	add	r3, pc, #236	@ (adr r3, 80138c8 <__ieee754_pow+0x768>)
 80137da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137de:	4658      	mov	r0, fp
 80137e0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80137e4:	460d      	mov	r5, r1
 80137e6:	f7ec ff0f 	bl	8000608 <__aeabi_dmul>
 80137ea:	465c      	mov	r4, fp
 80137ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80137f0:	4642      	mov	r2, r8
 80137f2:	464b      	mov	r3, r9
 80137f4:	4620      	mov	r0, r4
 80137f6:	4629      	mov	r1, r5
 80137f8:	f7ec fd4e 	bl	8000298 <__aeabi_dsub>
 80137fc:	4602      	mov	r2, r0
 80137fe:	460b      	mov	r3, r1
 8013800:	4630      	mov	r0, r6
 8013802:	4639      	mov	r1, r7
 8013804:	f7ec fd48 	bl	8000298 <__aeabi_dsub>
 8013808:	a331      	add	r3, pc, #196	@ (adr r3, 80138d0 <__ieee754_pow+0x770>)
 801380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801380e:	f7ec fefb 	bl	8000608 <__aeabi_dmul>
 8013812:	a331      	add	r3, pc, #196	@ (adr r3, 80138d8 <__ieee754_pow+0x778>)
 8013814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013818:	4606      	mov	r6, r0
 801381a:	460f      	mov	r7, r1
 801381c:	4620      	mov	r0, r4
 801381e:	4629      	mov	r1, r5
 8013820:	f7ec fef2 	bl	8000608 <__aeabi_dmul>
 8013824:	4602      	mov	r2, r0
 8013826:	460b      	mov	r3, r1
 8013828:	4630      	mov	r0, r6
 801382a:	4639      	mov	r1, r7
 801382c:	f7ec fd36 	bl	800029c <__adddf3>
 8013830:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013832:	4b32      	ldr	r3, [pc, #200]	@ (80138fc <__ieee754_pow+0x79c>)
 8013834:	4413      	add	r3, r2
 8013836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801383a:	f7ec fd2f 	bl	800029c <__adddf3>
 801383e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013842:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013844:	f7ec fe76 	bl	8000534 <__aeabi_i2d>
 8013848:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801384a:	4b2d      	ldr	r3, [pc, #180]	@ (8013900 <__ieee754_pow+0x7a0>)
 801384c:	4413      	add	r3, r2
 801384e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013852:	4606      	mov	r6, r0
 8013854:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013858:	460f      	mov	r7, r1
 801385a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801385e:	f7ec fd1d 	bl	800029c <__adddf3>
 8013862:	4642      	mov	r2, r8
 8013864:	464b      	mov	r3, r9
 8013866:	f7ec fd19 	bl	800029c <__adddf3>
 801386a:	4632      	mov	r2, r6
 801386c:	463b      	mov	r3, r7
 801386e:	f7ec fd15 	bl	800029c <__adddf3>
 8013872:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8013876:	4632      	mov	r2, r6
 8013878:	463b      	mov	r3, r7
 801387a:	4658      	mov	r0, fp
 801387c:	460d      	mov	r5, r1
 801387e:	f7ec fd0b 	bl	8000298 <__aeabi_dsub>
 8013882:	4642      	mov	r2, r8
 8013884:	464b      	mov	r3, r9
 8013886:	f7ec fd07 	bl	8000298 <__aeabi_dsub>
 801388a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801388e:	f7ec fd03 	bl	8000298 <__aeabi_dsub>
 8013892:	465c      	mov	r4, fp
 8013894:	e036      	b.n	8013904 <__ieee754_pow+0x7a4>
 8013896:	bf00      	nop
 8013898:	4a454eef 	.word	0x4a454eef
 801389c:	3fca7e28 	.word	0x3fca7e28
 80138a0:	93c9db65 	.word	0x93c9db65
 80138a4:	3fcd864a 	.word	0x3fcd864a
 80138a8:	a91d4101 	.word	0xa91d4101
 80138ac:	3fd17460 	.word	0x3fd17460
 80138b0:	518f264d 	.word	0x518f264d
 80138b4:	3fd55555 	.word	0x3fd55555
 80138b8:	db6fabff 	.word	0xdb6fabff
 80138bc:	3fdb6db6 	.word	0x3fdb6db6
 80138c0:	33333303 	.word	0x33333303
 80138c4:	3fe33333 	.word	0x3fe33333
 80138c8:	e0000000 	.word	0xe0000000
 80138cc:	3feec709 	.word	0x3feec709
 80138d0:	dc3a03fd 	.word	0xdc3a03fd
 80138d4:	3feec709 	.word	0x3feec709
 80138d8:	145b01f5 	.word	0x145b01f5
 80138dc:	be3e2fe0 	.word	0xbe3e2fe0
 80138e0:	7ff00000 	.word	0x7ff00000
 80138e4:	43400000 	.word	0x43400000
 80138e8:	0003988e 	.word	0x0003988e
 80138ec:	000bb679 	.word	0x000bb679
 80138f0:	08015018 	.word	0x08015018
 80138f4:	3ff00000 	.word	0x3ff00000
 80138f8:	40080000 	.word	0x40080000
 80138fc:	08014ff8 	.word	0x08014ff8
 8013900:	08015008 	.word	0x08015008
 8013904:	4602      	mov	r2, r0
 8013906:	460b      	mov	r3, r1
 8013908:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801390c:	e5d6      	b.n	80134bc <__ieee754_pow+0x35c>
 801390e:	f04f 0a01 	mov.w	sl, #1
 8013912:	e65e      	b.n	80135d2 <__ieee754_pow+0x472>
 8013914:	a3b5      	add	r3, pc, #724	@ (adr r3, 8013bec <__ieee754_pow+0xa8c>)
 8013916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801391a:	4630      	mov	r0, r6
 801391c:	4639      	mov	r1, r7
 801391e:	f7ec fcbd 	bl	800029c <__adddf3>
 8013922:	4642      	mov	r2, r8
 8013924:	e9cd 0100 	strd	r0, r1, [sp]
 8013928:	464b      	mov	r3, r9
 801392a:	4620      	mov	r0, r4
 801392c:	4629      	mov	r1, r5
 801392e:	f7ec fcb3 	bl	8000298 <__aeabi_dsub>
 8013932:	4602      	mov	r2, r0
 8013934:	460b      	mov	r3, r1
 8013936:	e9dd 0100 	ldrd	r0, r1, [sp]
 801393a:	f7ed f8f5 	bl	8000b28 <__aeabi_dcmpgt>
 801393e:	2800      	cmp	r0, #0
 8013940:	f47f adfe 	bne.w	8013540 <__ieee754_pow+0x3e0>
 8013944:	4ba2      	ldr	r3, [pc, #648]	@ (8013bd0 <__ieee754_pow+0xa70>)
 8013946:	e022      	b.n	801398e <__ieee754_pow+0x82e>
 8013948:	4ca2      	ldr	r4, [pc, #648]	@ (8013bd4 <__ieee754_pow+0xa74>)
 801394a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801394e:	42a3      	cmp	r3, r4
 8013950:	d919      	bls.n	8013986 <__ieee754_pow+0x826>
 8013952:	4ba1      	ldr	r3, [pc, #644]	@ (8013bd8 <__ieee754_pow+0xa78>)
 8013954:	440b      	add	r3, r1
 8013956:	4303      	orrs	r3, r0
 8013958:	d009      	beq.n	801396e <__ieee754_pow+0x80e>
 801395a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801395e:	2200      	movs	r2, #0
 8013960:	2300      	movs	r3, #0
 8013962:	f7ed f8c3 	bl	8000aec <__aeabi_dcmplt>
 8013966:	3800      	subs	r0, #0
 8013968:	bf18      	it	ne
 801396a:	2001      	movne	r0, #1
 801396c:	e512      	b.n	8013394 <__ieee754_pow+0x234>
 801396e:	4642      	mov	r2, r8
 8013970:	464b      	mov	r3, r9
 8013972:	f7ec fc91 	bl	8000298 <__aeabi_dsub>
 8013976:	4632      	mov	r2, r6
 8013978:	463b      	mov	r3, r7
 801397a:	f7ed f8cb 	bl	8000b14 <__aeabi_dcmpge>
 801397e:	2800      	cmp	r0, #0
 8013980:	d1eb      	bne.n	801395a <__ieee754_pow+0x7fa>
 8013982:	4b96      	ldr	r3, [pc, #600]	@ (8013bdc <__ieee754_pow+0xa7c>)
 8013984:	e003      	b.n	801398e <__ieee754_pow+0x82e>
 8013986:	4a96      	ldr	r2, [pc, #600]	@ (8013be0 <__ieee754_pow+0xa80>)
 8013988:	4293      	cmp	r3, r2
 801398a:	f240 80e7 	bls.w	8013b5c <__ieee754_pow+0x9fc>
 801398e:	151b      	asrs	r3, r3, #20
 8013990:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8013994:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8013998:	fa4a fa03 	asr.w	sl, sl, r3
 801399c:	44da      	add	sl, fp
 801399e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80139a2:	4890      	ldr	r0, [pc, #576]	@ (8013be4 <__ieee754_pow+0xa84>)
 80139a4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80139a8:	4108      	asrs	r0, r1
 80139aa:	ea00 030a 	and.w	r3, r0, sl
 80139ae:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80139b2:	f1c1 0114 	rsb	r1, r1, #20
 80139b6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80139ba:	fa4a fa01 	asr.w	sl, sl, r1
 80139be:	f1bb 0f00 	cmp.w	fp, #0
 80139c2:	4640      	mov	r0, r8
 80139c4:	4649      	mov	r1, r9
 80139c6:	f04f 0200 	mov.w	r2, #0
 80139ca:	bfb8      	it	lt
 80139cc:	f1ca 0a00 	rsblt	sl, sl, #0
 80139d0:	f7ec fc62 	bl	8000298 <__aeabi_dsub>
 80139d4:	4680      	mov	r8, r0
 80139d6:	4689      	mov	r9, r1
 80139d8:	4632      	mov	r2, r6
 80139da:	463b      	mov	r3, r7
 80139dc:	4640      	mov	r0, r8
 80139de:	4649      	mov	r1, r9
 80139e0:	f7ec fc5c 	bl	800029c <__adddf3>
 80139e4:	2400      	movs	r4, #0
 80139e6:	a36a      	add	r3, pc, #424	@ (adr r3, 8013b90 <__ieee754_pow+0xa30>)
 80139e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ec:	4620      	mov	r0, r4
 80139ee:	460d      	mov	r5, r1
 80139f0:	f7ec fe0a 	bl	8000608 <__aeabi_dmul>
 80139f4:	4642      	mov	r2, r8
 80139f6:	e9cd 0100 	strd	r0, r1, [sp]
 80139fa:	464b      	mov	r3, r9
 80139fc:	4620      	mov	r0, r4
 80139fe:	4629      	mov	r1, r5
 8013a00:	f7ec fc4a 	bl	8000298 <__aeabi_dsub>
 8013a04:	4602      	mov	r2, r0
 8013a06:	460b      	mov	r3, r1
 8013a08:	4630      	mov	r0, r6
 8013a0a:	4639      	mov	r1, r7
 8013a0c:	f7ec fc44 	bl	8000298 <__aeabi_dsub>
 8013a10:	a361      	add	r3, pc, #388	@ (adr r3, 8013b98 <__ieee754_pow+0xa38>)
 8013a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a16:	f7ec fdf7 	bl	8000608 <__aeabi_dmul>
 8013a1a:	a361      	add	r3, pc, #388	@ (adr r3, 8013ba0 <__ieee754_pow+0xa40>)
 8013a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a20:	4680      	mov	r8, r0
 8013a22:	4689      	mov	r9, r1
 8013a24:	4620      	mov	r0, r4
 8013a26:	4629      	mov	r1, r5
 8013a28:	f7ec fdee 	bl	8000608 <__aeabi_dmul>
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	460b      	mov	r3, r1
 8013a30:	4640      	mov	r0, r8
 8013a32:	4649      	mov	r1, r9
 8013a34:	f7ec fc32 	bl	800029c <__adddf3>
 8013a38:	4604      	mov	r4, r0
 8013a3a:	460d      	mov	r5, r1
 8013a3c:	4602      	mov	r2, r0
 8013a3e:	460b      	mov	r3, r1
 8013a40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a44:	f7ec fc2a 	bl	800029c <__adddf3>
 8013a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013a4c:	4680      	mov	r8, r0
 8013a4e:	4689      	mov	r9, r1
 8013a50:	f7ec fc22 	bl	8000298 <__aeabi_dsub>
 8013a54:	4602      	mov	r2, r0
 8013a56:	460b      	mov	r3, r1
 8013a58:	4620      	mov	r0, r4
 8013a5a:	4629      	mov	r1, r5
 8013a5c:	f7ec fc1c 	bl	8000298 <__aeabi_dsub>
 8013a60:	4642      	mov	r2, r8
 8013a62:	4606      	mov	r6, r0
 8013a64:	460f      	mov	r7, r1
 8013a66:	464b      	mov	r3, r9
 8013a68:	4640      	mov	r0, r8
 8013a6a:	4649      	mov	r1, r9
 8013a6c:	f7ec fdcc 	bl	8000608 <__aeabi_dmul>
 8013a70:	a34d      	add	r3, pc, #308	@ (adr r3, 8013ba8 <__ieee754_pow+0xa48>)
 8013a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a76:	4604      	mov	r4, r0
 8013a78:	460d      	mov	r5, r1
 8013a7a:	f7ec fdc5 	bl	8000608 <__aeabi_dmul>
 8013a7e:	a34c      	add	r3, pc, #304	@ (adr r3, 8013bb0 <__ieee754_pow+0xa50>)
 8013a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a84:	f7ec fc08 	bl	8000298 <__aeabi_dsub>
 8013a88:	4622      	mov	r2, r4
 8013a8a:	462b      	mov	r3, r5
 8013a8c:	f7ec fdbc 	bl	8000608 <__aeabi_dmul>
 8013a90:	a349      	add	r3, pc, #292	@ (adr r3, 8013bb8 <__ieee754_pow+0xa58>)
 8013a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a96:	f7ec fc01 	bl	800029c <__adddf3>
 8013a9a:	4622      	mov	r2, r4
 8013a9c:	462b      	mov	r3, r5
 8013a9e:	f7ec fdb3 	bl	8000608 <__aeabi_dmul>
 8013aa2:	a347      	add	r3, pc, #284	@ (adr r3, 8013bc0 <__ieee754_pow+0xa60>)
 8013aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aa8:	f7ec fbf6 	bl	8000298 <__aeabi_dsub>
 8013aac:	4622      	mov	r2, r4
 8013aae:	462b      	mov	r3, r5
 8013ab0:	f7ec fdaa 	bl	8000608 <__aeabi_dmul>
 8013ab4:	a344      	add	r3, pc, #272	@ (adr r3, 8013bc8 <__ieee754_pow+0xa68>)
 8013ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aba:	f7ec fbef 	bl	800029c <__adddf3>
 8013abe:	4622      	mov	r2, r4
 8013ac0:	462b      	mov	r3, r5
 8013ac2:	f7ec fda1 	bl	8000608 <__aeabi_dmul>
 8013ac6:	4602      	mov	r2, r0
 8013ac8:	460b      	mov	r3, r1
 8013aca:	4640      	mov	r0, r8
 8013acc:	4649      	mov	r1, r9
 8013ace:	f7ec fbe3 	bl	8000298 <__aeabi_dsub>
 8013ad2:	4604      	mov	r4, r0
 8013ad4:	460d      	mov	r5, r1
 8013ad6:	4602      	mov	r2, r0
 8013ad8:	460b      	mov	r3, r1
 8013ada:	4640      	mov	r0, r8
 8013adc:	4649      	mov	r1, r9
 8013ade:	f7ec fd93 	bl	8000608 <__aeabi_dmul>
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	e9cd 0100 	strd	r0, r1, [sp]
 8013ae8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013aec:	4620      	mov	r0, r4
 8013aee:	4629      	mov	r1, r5
 8013af0:	f7ec fbd2 	bl	8000298 <__aeabi_dsub>
 8013af4:	4602      	mov	r2, r0
 8013af6:	460b      	mov	r3, r1
 8013af8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013afc:	f7ec feae 	bl	800085c <__aeabi_ddiv>
 8013b00:	4632      	mov	r2, r6
 8013b02:	4604      	mov	r4, r0
 8013b04:	460d      	mov	r5, r1
 8013b06:	463b      	mov	r3, r7
 8013b08:	4640      	mov	r0, r8
 8013b0a:	4649      	mov	r1, r9
 8013b0c:	f7ec fd7c 	bl	8000608 <__aeabi_dmul>
 8013b10:	4632      	mov	r2, r6
 8013b12:	463b      	mov	r3, r7
 8013b14:	f7ec fbc2 	bl	800029c <__adddf3>
 8013b18:	4602      	mov	r2, r0
 8013b1a:	460b      	mov	r3, r1
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	4629      	mov	r1, r5
 8013b20:	f7ec fbba 	bl	8000298 <__aeabi_dsub>
 8013b24:	4642      	mov	r2, r8
 8013b26:	464b      	mov	r3, r9
 8013b28:	f7ec fbb6 	bl	8000298 <__aeabi_dsub>
 8013b2c:	460b      	mov	r3, r1
 8013b2e:	4602      	mov	r2, r0
 8013b30:	492d      	ldr	r1, [pc, #180]	@ (8013be8 <__ieee754_pow+0xa88>)
 8013b32:	2000      	movs	r0, #0
 8013b34:	f7ec fbb0 	bl	8000298 <__aeabi_dsub>
 8013b38:	ec41 0b10 	vmov	d0, r0, r1
 8013b3c:	ee10 3a90 	vmov	r3, s1
 8013b40:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013b44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013b48:	da0b      	bge.n	8013b62 <__ieee754_pow+0xa02>
 8013b4a:	4650      	mov	r0, sl
 8013b4c:	f000 fbfc 	bl	8014348 <scalbn>
 8013b50:	ec51 0b10 	vmov	r0, r1, d0
 8013b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013b58:	f7ff bb6d 	b.w	8013236 <__ieee754_pow+0xd6>
 8013b5c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013b60:	e73a      	b.n	80139d8 <__ieee754_pow+0x878>
 8013b62:	ec51 0b10 	vmov	r0, r1, d0
 8013b66:	4619      	mov	r1, r3
 8013b68:	e7f4      	b.n	8013b54 <__ieee754_pow+0x9f4>
 8013b6a:	491f      	ldr	r1, [pc, #124]	@ (8013be8 <__ieee754_pow+0xa88>)
 8013b6c:	2000      	movs	r0, #0
 8013b6e:	f7ff bb14 	b.w	801319a <__ieee754_pow+0x3a>
 8013b72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b76:	f7ff bb10 	b.w	801319a <__ieee754_pow+0x3a>
 8013b7a:	4630      	mov	r0, r6
 8013b7c:	4639      	mov	r1, r7
 8013b7e:	f7ff bb0c 	b.w	801319a <__ieee754_pow+0x3a>
 8013b82:	460c      	mov	r4, r1
 8013b84:	f7ff bb69 	b.w	801325a <__ieee754_pow+0xfa>
 8013b88:	2400      	movs	r4, #0
 8013b8a:	f7ff bb4b 	b.w	8013224 <__ieee754_pow+0xc4>
 8013b8e:	bf00      	nop
 8013b90:	00000000 	.word	0x00000000
 8013b94:	3fe62e43 	.word	0x3fe62e43
 8013b98:	fefa39ef 	.word	0xfefa39ef
 8013b9c:	3fe62e42 	.word	0x3fe62e42
 8013ba0:	0ca86c39 	.word	0x0ca86c39
 8013ba4:	be205c61 	.word	0xbe205c61
 8013ba8:	72bea4d0 	.word	0x72bea4d0
 8013bac:	3e663769 	.word	0x3e663769
 8013bb0:	c5d26bf1 	.word	0xc5d26bf1
 8013bb4:	3ebbbd41 	.word	0x3ebbbd41
 8013bb8:	af25de2c 	.word	0xaf25de2c
 8013bbc:	3f11566a 	.word	0x3f11566a
 8013bc0:	16bebd93 	.word	0x16bebd93
 8013bc4:	3f66c16c 	.word	0x3f66c16c
 8013bc8:	5555553e 	.word	0x5555553e
 8013bcc:	3fc55555 	.word	0x3fc55555
 8013bd0:	40900000 	.word	0x40900000
 8013bd4:	4090cbff 	.word	0x4090cbff
 8013bd8:	3f6f3400 	.word	0x3f6f3400
 8013bdc:	4090cc00 	.word	0x4090cc00
 8013be0:	3fe00000 	.word	0x3fe00000
 8013be4:	fff00000 	.word	0xfff00000
 8013be8:	3ff00000 	.word	0x3ff00000
 8013bec:	652b82fe 	.word	0x652b82fe
 8013bf0:	3c971547 	.word	0x3c971547
 8013bf4:	00000000 	.word	0x00000000

08013bf8 <atan>:
 8013bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bfc:	ec55 4b10 	vmov	r4, r5, d0
 8013c00:	4bbf      	ldr	r3, [pc, #764]	@ (8013f00 <atan+0x308>)
 8013c02:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013c06:	429e      	cmp	r6, r3
 8013c08:	46ab      	mov	fp, r5
 8013c0a:	d918      	bls.n	8013c3e <atan+0x46>
 8013c0c:	4bbd      	ldr	r3, [pc, #756]	@ (8013f04 <atan+0x30c>)
 8013c0e:	429e      	cmp	r6, r3
 8013c10:	d801      	bhi.n	8013c16 <atan+0x1e>
 8013c12:	d109      	bne.n	8013c28 <atan+0x30>
 8013c14:	b144      	cbz	r4, 8013c28 <atan+0x30>
 8013c16:	4622      	mov	r2, r4
 8013c18:	462b      	mov	r3, r5
 8013c1a:	4620      	mov	r0, r4
 8013c1c:	4629      	mov	r1, r5
 8013c1e:	f7ec fb3d 	bl	800029c <__adddf3>
 8013c22:	4604      	mov	r4, r0
 8013c24:	460d      	mov	r5, r1
 8013c26:	e006      	b.n	8013c36 <atan+0x3e>
 8013c28:	f1bb 0f00 	cmp.w	fp, #0
 8013c2c:	f340 812b 	ble.w	8013e86 <atan+0x28e>
 8013c30:	a597      	add	r5, pc, #604	@ (adr r5, 8013e90 <atan+0x298>)
 8013c32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013c36:	ec45 4b10 	vmov	d0, r4, r5
 8013c3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c3e:	4bb2      	ldr	r3, [pc, #712]	@ (8013f08 <atan+0x310>)
 8013c40:	429e      	cmp	r6, r3
 8013c42:	d813      	bhi.n	8013c6c <atan+0x74>
 8013c44:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8013c48:	429e      	cmp	r6, r3
 8013c4a:	d80c      	bhi.n	8013c66 <atan+0x6e>
 8013c4c:	a392      	add	r3, pc, #584	@ (adr r3, 8013e98 <atan+0x2a0>)
 8013c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c52:	4620      	mov	r0, r4
 8013c54:	4629      	mov	r1, r5
 8013c56:	f7ec fb21 	bl	800029c <__adddf3>
 8013c5a:	4bac      	ldr	r3, [pc, #688]	@ (8013f0c <atan+0x314>)
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	f7ec ff63 	bl	8000b28 <__aeabi_dcmpgt>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	d1e7      	bne.n	8013c36 <atan+0x3e>
 8013c66:	f04f 3aff 	mov.w	sl, #4294967295
 8013c6a:	e029      	b.n	8013cc0 <atan+0xc8>
 8013c6c:	f7fe fe8c 	bl	8012988 <fabs>
 8013c70:	4ba7      	ldr	r3, [pc, #668]	@ (8013f10 <atan+0x318>)
 8013c72:	429e      	cmp	r6, r3
 8013c74:	ec55 4b10 	vmov	r4, r5, d0
 8013c78:	f200 80bc 	bhi.w	8013df4 <atan+0x1fc>
 8013c7c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8013c80:	429e      	cmp	r6, r3
 8013c82:	f200 809e 	bhi.w	8013dc2 <atan+0x1ca>
 8013c86:	4622      	mov	r2, r4
 8013c88:	462b      	mov	r3, r5
 8013c8a:	4620      	mov	r0, r4
 8013c8c:	4629      	mov	r1, r5
 8013c8e:	f7ec fb05 	bl	800029c <__adddf3>
 8013c92:	4b9e      	ldr	r3, [pc, #632]	@ (8013f0c <atan+0x314>)
 8013c94:	2200      	movs	r2, #0
 8013c96:	f7ec faff 	bl	8000298 <__aeabi_dsub>
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	4606      	mov	r6, r0
 8013c9e:	460f      	mov	r7, r1
 8013ca0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	4629      	mov	r1, r5
 8013ca8:	f7ec faf8 	bl	800029c <__adddf3>
 8013cac:	4602      	mov	r2, r0
 8013cae:	460b      	mov	r3, r1
 8013cb0:	4630      	mov	r0, r6
 8013cb2:	4639      	mov	r1, r7
 8013cb4:	f7ec fdd2 	bl	800085c <__aeabi_ddiv>
 8013cb8:	f04f 0a00 	mov.w	sl, #0
 8013cbc:	4604      	mov	r4, r0
 8013cbe:	460d      	mov	r5, r1
 8013cc0:	4622      	mov	r2, r4
 8013cc2:	462b      	mov	r3, r5
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	4629      	mov	r1, r5
 8013cc8:	f7ec fc9e 	bl	8000608 <__aeabi_dmul>
 8013ccc:	4602      	mov	r2, r0
 8013cce:	460b      	mov	r3, r1
 8013cd0:	4680      	mov	r8, r0
 8013cd2:	4689      	mov	r9, r1
 8013cd4:	f7ec fc98 	bl	8000608 <__aeabi_dmul>
 8013cd8:	a371      	add	r3, pc, #452	@ (adr r3, 8013ea0 <atan+0x2a8>)
 8013cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cde:	4606      	mov	r6, r0
 8013ce0:	460f      	mov	r7, r1
 8013ce2:	f7ec fc91 	bl	8000608 <__aeabi_dmul>
 8013ce6:	a370      	add	r3, pc, #448	@ (adr r3, 8013ea8 <atan+0x2b0>)
 8013ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cec:	f7ec fad6 	bl	800029c <__adddf3>
 8013cf0:	4632      	mov	r2, r6
 8013cf2:	463b      	mov	r3, r7
 8013cf4:	f7ec fc88 	bl	8000608 <__aeabi_dmul>
 8013cf8:	a36d      	add	r3, pc, #436	@ (adr r3, 8013eb0 <atan+0x2b8>)
 8013cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cfe:	f7ec facd 	bl	800029c <__adddf3>
 8013d02:	4632      	mov	r2, r6
 8013d04:	463b      	mov	r3, r7
 8013d06:	f7ec fc7f 	bl	8000608 <__aeabi_dmul>
 8013d0a:	a36b      	add	r3, pc, #428	@ (adr r3, 8013eb8 <atan+0x2c0>)
 8013d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d10:	f7ec fac4 	bl	800029c <__adddf3>
 8013d14:	4632      	mov	r2, r6
 8013d16:	463b      	mov	r3, r7
 8013d18:	f7ec fc76 	bl	8000608 <__aeabi_dmul>
 8013d1c:	a368      	add	r3, pc, #416	@ (adr r3, 8013ec0 <atan+0x2c8>)
 8013d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d22:	f7ec fabb 	bl	800029c <__adddf3>
 8013d26:	4632      	mov	r2, r6
 8013d28:	463b      	mov	r3, r7
 8013d2a:	f7ec fc6d 	bl	8000608 <__aeabi_dmul>
 8013d2e:	a366      	add	r3, pc, #408	@ (adr r3, 8013ec8 <atan+0x2d0>)
 8013d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d34:	f7ec fab2 	bl	800029c <__adddf3>
 8013d38:	4642      	mov	r2, r8
 8013d3a:	464b      	mov	r3, r9
 8013d3c:	f7ec fc64 	bl	8000608 <__aeabi_dmul>
 8013d40:	a363      	add	r3, pc, #396	@ (adr r3, 8013ed0 <atan+0x2d8>)
 8013d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d46:	4680      	mov	r8, r0
 8013d48:	4689      	mov	r9, r1
 8013d4a:	4630      	mov	r0, r6
 8013d4c:	4639      	mov	r1, r7
 8013d4e:	f7ec fc5b 	bl	8000608 <__aeabi_dmul>
 8013d52:	a361      	add	r3, pc, #388	@ (adr r3, 8013ed8 <atan+0x2e0>)
 8013d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d58:	f7ec fa9e 	bl	8000298 <__aeabi_dsub>
 8013d5c:	4632      	mov	r2, r6
 8013d5e:	463b      	mov	r3, r7
 8013d60:	f7ec fc52 	bl	8000608 <__aeabi_dmul>
 8013d64:	a35e      	add	r3, pc, #376	@ (adr r3, 8013ee0 <atan+0x2e8>)
 8013d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d6a:	f7ec fa95 	bl	8000298 <__aeabi_dsub>
 8013d6e:	4632      	mov	r2, r6
 8013d70:	463b      	mov	r3, r7
 8013d72:	f7ec fc49 	bl	8000608 <__aeabi_dmul>
 8013d76:	a35c      	add	r3, pc, #368	@ (adr r3, 8013ee8 <atan+0x2f0>)
 8013d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7c:	f7ec fa8c 	bl	8000298 <__aeabi_dsub>
 8013d80:	4632      	mov	r2, r6
 8013d82:	463b      	mov	r3, r7
 8013d84:	f7ec fc40 	bl	8000608 <__aeabi_dmul>
 8013d88:	a359      	add	r3, pc, #356	@ (adr r3, 8013ef0 <atan+0x2f8>)
 8013d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d8e:	f7ec fa83 	bl	8000298 <__aeabi_dsub>
 8013d92:	4632      	mov	r2, r6
 8013d94:	463b      	mov	r3, r7
 8013d96:	f7ec fc37 	bl	8000608 <__aeabi_dmul>
 8013d9a:	4602      	mov	r2, r0
 8013d9c:	460b      	mov	r3, r1
 8013d9e:	4640      	mov	r0, r8
 8013da0:	4649      	mov	r1, r9
 8013da2:	f7ec fa7b 	bl	800029c <__adddf3>
 8013da6:	4622      	mov	r2, r4
 8013da8:	462b      	mov	r3, r5
 8013daa:	f7ec fc2d 	bl	8000608 <__aeabi_dmul>
 8013dae:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013db2:	4602      	mov	r2, r0
 8013db4:	460b      	mov	r3, r1
 8013db6:	d148      	bne.n	8013e4a <atan+0x252>
 8013db8:	4620      	mov	r0, r4
 8013dba:	4629      	mov	r1, r5
 8013dbc:	f7ec fa6c 	bl	8000298 <__aeabi_dsub>
 8013dc0:	e72f      	b.n	8013c22 <atan+0x2a>
 8013dc2:	4b52      	ldr	r3, [pc, #328]	@ (8013f0c <atan+0x314>)
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	4620      	mov	r0, r4
 8013dc8:	4629      	mov	r1, r5
 8013dca:	f7ec fa65 	bl	8000298 <__aeabi_dsub>
 8013dce:	4b4f      	ldr	r3, [pc, #316]	@ (8013f0c <atan+0x314>)
 8013dd0:	4606      	mov	r6, r0
 8013dd2:	460f      	mov	r7, r1
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	4620      	mov	r0, r4
 8013dd8:	4629      	mov	r1, r5
 8013dda:	f7ec fa5f 	bl	800029c <__adddf3>
 8013dde:	4602      	mov	r2, r0
 8013de0:	460b      	mov	r3, r1
 8013de2:	4630      	mov	r0, r6
 8013de4:	4639      	mov	r1, r7
 8013de6:	f7ec fd39 	bl	800085c <__aeabi_ddiv>
 8013dea:	f04f 0a01 	mov.w	sl, #1
 8013dee:	4604      	mov	r4, r0
 8013df0:	460d      	mov	r5, r1
 8013df2:	e765      	b.n	8013cc0 <atan+0xc8>
 8013df4:	4b47      	ldr	r3, [pc, #284]	@ (8013f14 <atan+0x31c>)
 8013df6:	429e      	cmp	r6, r3
 8013df8:	d21c      	bcs.n	8013e34 <atan+0x23c>
 8013dfa:	4b47      	ldr	r3, [pc, #284]	@ (8013f18 <atan+0x320>)
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	4620      	mov	r0, r4
 8013e00:	4629      	mov	r1, r5
 8013e02:	f7ec fa49 	bl	8000298 <__aeabi_dsub>
 8013e06:	4b44      	ldr	r3, [pc, #272]	@ (8013f18 <atan+0x320>)
 8013e08:	4606      	mov	r6, r0
 8013e0a:	460f      	mov	r7, r1
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	4620      	mov	r0, r4
 8013e10:	4629      	mov	r1, r5
 8013e12:	f7ec fbf9 	bl	8000608 <__aeabi_dmul>
 8013e16:	4b3d      	ldr	r3, [pc, #244]	@ (8013f0c <atan+0x314>)
 8013e18:	2200      	movs	r2, #0
 8013e1a:	f7ec fa3f 	bl	800029c <__adddf3>
 8013e1e:	4602      	mov	r2, r0
 8013e20:	460b      	mov	r3, r1
 8013e22:	4630      	mov	r0, r6
 8013e24:	4639      	mov	r1, r7
 8013e26:	f7ec fd19 	bl	800085c <__aeabi_ddiv>
 8013e2a:	f04f 0a02 	mov.w	sl, #2
 8013e2e:	4604      	mov	r4, r0
 8013e30:	460d      	mov	r5, r1
 8013e32:	e745      	b.n	8013cc0 <atan+0xc8>
 8013e34:	4622      	mov	r2, r4
 8013e36:	462b      	mov	r3, r5
 8013e38:	4938      	ldr	r1, [pc, #224]	@ (8013f1c <atan+0x324>)
 8013e3a:	2000      	movs	r0, #0
 8013e3c:	f7ec fd0e 	bl	800085c <__aeabi_ddiv>
 8013e40:	f04f 0a03 	mov.w	sl, #3
 8013e44:	4604      	mov	r4, r0
 8013e46:	460d      	mov	r5, r1
 8013e48:	e73a      	b.n	8013cc0 <atan+0xc8>
 8013e4a:	4b35      	ldr	r3, [pc, #212]	@ (8013f20 <atan+0x328>)
 8013e4c:	4e35      	ldr	r6, [pc, #212]	@ (8013f24 <atan+0x32c>)
 8013e4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e56:	f7ec fa1f 	bl	8000298 <__aeabi_dsub>
 8013e5a:	4622      	mov	r2, r4
 8013e5c:	462b      	mov	r3, r5
 8013e5e:	f7ec fa1b 	bl	8000298 <__aeabi_dsub>
 8013e62:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8013e66:	4602      	mov	r2, r0
 8013e68:	460b      	mov	r3, r1
 8013e6a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013e6e:	f7ec fa13 	bl	8000298 <__aeabi_dsub>
 8013e72:	f1bb 0f00 	cmp.w	fp, #0
 8013e76:	4604      	mov	r4, r0
 8013e78:	460d      	mov	r5, r1
 8013e7a:	f6bf aedc 	bge.w	8013c36 <atan+0x3e>
 8013e7e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013e82:	461d      	mov	r5, r3
 8013e84:	e6d7      	b.n	8013c36 <atan+0x3e>
 8013e86:	a51c      	add	r5, pc, #112	@ (adr r5, 8013ef8 <atan+0x300>)
 8013e88:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013e8c:	e6d3      	b.n	8013c36 <atan+0x3e>
 8013e8e:	bf00      	nop
 8013e90:	54442d18 	.word	0x54442d18
 8013e94:	3ff921fb 	.word	0x3ff921fb
 8013e98:	8800759c 	.word	0x8800759c
 8013e9c:	7e37e43c 	.word	0x7e37e43c
 8013ea0:	e322da11 	.word	0xe322da11
 8013ea4:	3f90ad3a 	.word	0x3f90ad3a
 8013ea8:	24760deb 	.word	0x24760deb
 8013eac:	3fa97b4b 	.word	0x3fa97b4b
 8013eb0:	a0d03d51 	.word	0xa0d03d51
 8013eb4:	3fb10d66 	.word	0x3fb10d66
 8013eb8:	c54c206e 	.word	0xc54c206e
 8013ebc:	3fb745cd 	.word	0x3fb745cd
 8013ec0:	920083ff 	.word	0x920083ff
 8013ec4:	3fc24924 	.word	0x3fc24924
 8013ec8:	5555550d 	.word	0x5555550d
 8013ecc:	3fd55555 	.word	0x3fd55555
 8013ed0:	2c6a6c2f 	.word	0x2c6a6c2f
 8013ed4:	bfa2b444 	.word	0xbfa2b444
 8013ed8:	52defd9a 	.word	0x52defd9a
 8013edc:	3fadde2d 	.word	0x3fadde2d
 8013ee0:	af749a6d 	.word	0xaf749a6d
 8013ee4:	3fb3b0f2 	.word	0x3fb3b0f2
 8013ee8:	fe231671 	.word	0xfe231671
 8013eec:	3fbc71c6 	.word	0x3fbc71c6
 8013ef0:	9998ebc4 	.word	0x9998ebc4
 8013ef4:	3fc99999 	.word	0x3fc99999
 8013ef8:	54442d18 	.word	0x54442d18
 8013efc:	bff921fb 	.word	0xbff921fb
 8013f00:	440fffff 	.word	0x440fffff
 8013f04:	7ff00000 	.word	0x7ff00000
 8013f08:	3fdbffff 	.word	0x3fdbffff
 8013f0c:	3ff00000 	.word	0x3ff00000
 8013f10:	3ff2ffff 	.word	0x3ff2ffff
 8013f14:	40038000 	.word	0x40038000
 8013f18:	3ff80000 	.word	0x3ff80000
 8013f1c:	bff00000 	.word	0xbff00000
 8013f20:	08015028 	.word	0x08015028
 8013f24:	08015048 	.word	0x08015048

08013f28 <__kernel_tanf>:
 8013f28:	b508      	push	{r3, lr}
 8013f2a:	ee10 3a10 	vmov	r3, s0
 8013f2e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013f32:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 8013f36:	eef0 7a40 	vmov.f32	s15, s0
 8013f3a:	d217      	bcs.n	8013f6c <__kernel_tanf+0x44>
 8013f3c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8013f40:	ee17 1a10 	vmov	r1, s14
 8013f44:	bb41      	cbnz	r1, 8013f98 <__kernel_tanf+0x70>
 8013f46:	1c43      	adds	r3, r0, #1
 8013f48:	4313      	orrs	r3, r2
 8013f4a:	d108      	bne.n	8013f5e <__kernel_tanf+0x36>
 8013f4c:	f7fe fd24 	bl	8012998 <fabsf>
 8013f50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013f58:	eeb0 0a67 	vmov.f32	s0, s15
 8013f5c:	bd08      	pop	{r3, pc}
 8013f5e:	2801      	cmp	r0, #1
 8013f60:	d0fa      	beq.n	8013f58 <__kernel_tanf+0x30>
 8013f62:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8013f66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013f6a:	e7f5      	b.n	8013f58 <__kernel_tanf+0x30>
 8013f6c:	494c      	ldr	r1, [pc, #304]	@ (80140a0 <__kernel_tanf+0x178>)
 8013f6e:	428a      	cmp	r2, r1
 8013f70:	d312      	bcc.n	8013f98 <__kernel_tanf+0x70>
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80140a4 <__kernel_tanf+0x17c>
 8013f78:	bfb8      	it	lt
 8013f7a:	eef1 7a40 	vneglt.f32	s15, s0
 8013f7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013f82:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80140a8 <__kernel_tanf+0x180>
 8013f86:	bfb8      	it	lt
 8013f88:	eef1 0a60 	vneglt.f32	s1, s1
 8013f8c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013f90:	eddf 0a46 	vldr	s1, [pc, #280]	@ 80140ac <__kernel_tanf+0x184>
 8013f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f98:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8013f9c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80140b0 <__kernel_tanf+0x188>
 8013fa0:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 80140b4 <__kernel_tanf+0x18c>
 8013fa4:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 80140b8 <__kernel_tanf+0x190>
 8013fa8:	493d      	ldr	r1, [pc, #244]	@ (80140a0 <__kernel_tanf+0x178>)
 8013faa:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013fae:	428a      	cmp	r2, r1
 8013fb0:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013fb4:	eddf 5a41 	vldr	s11, [pc, #260]	@ 80140bc <__kernel_tanf+0x194>
 8013fb8:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013fbc:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80140c0 <__kernel_tanf+0x198>
 8013fc0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013fc4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80140c4 <__kernel_tanf+0x19c>
 8013fc8:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013fcc:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 80140c8 <__kernel_tanf+0x1a0>
 8013fd0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013fd4:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80140cc <__kernel_tanf+0x1a4>
 8013fd8:	eee7 5a05 	vfma.f32	s11, s14, s10
 8013fdc:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80140d0 <__kernel_tanf+0x1a8>
 8013fe0:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013fe4:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80140d4 <__kernel_tanf+0x1ac>
 8013fe8:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013fec:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80140d8 <__kernel_tanf+0x1b0>
 8013ff0:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013ff4:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80140dc <__kernel_tanf+0x1b4>
 8013ff8:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013ffc:	eeb0 7a46 	vmov.f32	s14, s12
 8014000:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014004:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8014008:	eeb0 6a60 	vmov.f32	s12, s1
 801400c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014010:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80140e0 <__kernel_tanf+0x1b8>
 8014014:	eee6 0a26 	vfma.f32	s1, s12, s13
 8014018:	eee5 0a07 	vfma.f32	s1, s10, s14
 801401c:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8014020:	d31d      	bcc.n	801405e <__kernel_tanf+0x136>
 8014022:	ee07 0a10 	vmov	s14, r0
 8014026:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801402a:	ee26 5a06 	vmul.f32	s10, s12, s12
 801402e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8014032:	179b      	asrs	r3, r3, #30
 8014034:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8014038:	f003 0302 	and.w	r3, r3, #2
 801403c:	f1c3 0301 	rsb	r3, r3, #1
 8014040:	ee06 3a90 	vmov	s13, r3
 8014044:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8014048:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801404c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014050:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8014054:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8014058:	ee66 7a87 	vmul.f32	s15, s13, s14
 801405c:	e77c      	b.n	8013f58 <__kernel_tanf+0x30>
 801405e:	2801      	cmp	r0, #1
 8014060:	d01b      	beq.n	801409a <__kernel_tanf+0x172>
 8014062:	4b20      	ldr	r3, [pc, #128]	@ (80140e4 <__kernel_tanf+0x1bc>)
 8014064:	ee16 2a10 	vmov	r2, s12
 8014068:	401a      	ands	r2, r3
 801406a:	ee05 2a90 	vmov	s11, r2
 801406e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8014072:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014076:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801407a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 801407e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8014082:	ee16 2a90 	vmov	r2, s13
 8014086:	4013      	ands	r3, r2
 8014088:	ee07 3a90 	vmov	s15, r3
 801408c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014090:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8014094:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014098:	e75e      	b.n	8013f58 <__kernel_tanf+0x30>
 801409a:	eef0 7a46 	vmov.f32	s15, s12
 801409e:	e75b      	b.n	8013f58 <__kernel_tanf+0x30>
 80140a0:	3f2ca140 	.word	0x3f2ca140
 80140a4:	3f490fda 	.word	0x3f490fda
 80140a8:	33222168 	.word	0x33222168
 80140ac:	00000000 	.word	0x00000000
 80140b0:	b79bae5f 	.word	0xb79bae5f
 80140b4:	38a3f445 	.word	0x38a3f445
 80140b8:	37d95384 	.word	0x37d95384
 80140bc:	3a1a26c8 	.word	0x3a1a26c8
 80140c0:	3b6b6916 	.word	0x3b6b6916
 80140c4:	3cb327a4 	.word	0x3cb327a4
 80140c8:	3e088889 	.word	0x3e088889
 80140cc:	3895c07a 	.word	0x3895c07a
 80140d0:	398137b9 	.word	0x398137b9
 80140d4:	3abede48 	.word	0x3abede48
 80140d8:	3c11371f 	.word	0x3c11371f
 80140dc:	3d5d0dd1 	.word	0x3d5d0dd1
 80140e0:	3eaaaaab 	.word	0x3eaaaaab
 80140e4:	fffff000 	.word	0xfffff000

080140e8 <__ieee754_rem_pio2f>:
 80140e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140ea:	ee10 6a10 	vmov	r6, s0
 80140ee:	4b88      	ldr	r3, [pc, #544]	@ (8014310 <__ieee754_rem_pio2f+0x228>)
 80140f0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80140f4:	429d      	cmp	r5, r3
 80140f6:	b087      	sub	sp, #28
 80140f8:	4604      	mov	r4, r0
 80140fa:	d805      	bhi.n	8014108 <__ieee754_rem_pio2f+0x20>
 80140fc:	2300      	movs	r3, #0
 80140fe:	ed80 0a00 	vstr	s0, [r0]
 8014102:	6043      	str	r3, [r0, #4]
 8014104:	2000      	movs	r0, #0
 8014106:	e022      	b.n	801414e <__ieee754_rem_pio2f+0x66>
 8014108:	4b82      	ldr	r3, [pc, #520]	@ (8014314 <__ieee754_rem_pio2f+0x22c>)
 801410a:	429d      	cmp	r5, r3
 801410c:	d83a      	bhi.n	8014184 <__ieee754_rem_pio2f+0x9c>
 801410e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8014112:	2e00      	cmp	r6, #0
 8014114:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8014318 <__ieee754_rem_pio2f+0x230>
 8014118:	4a80      	ldr	r2, [pc, #512]	@ (801431c <__ieee754_rem_pio2f+0x234>)
 801411a:	f023 030f 	bic.w	r3, r3, #15
 801411e:	dd18      	ble.n	8014152 <__ieee754_rem_pio2f+0x6a>
 8014120:	4293      	cmp	r3, r2
 8014122:	ee70 7a47 	vsub.f32	s15, s0, s14
 8014126:	bf09      	itett	eq
 8014128:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8014320 <__ieee754_rem_pio2f+0x238>
 801412c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8014324 <__ieee754_rem_pio2f+0x23c>
 8014130:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8014328 <__ieee754_rem_pio2f+0x240>
 8014134:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8014138:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801413c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014140:	ed80 7a00 	vstr	s14, [r0]
 8014144:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014148:	edc0 7a01 	vstr	s15, [r0, #4]
 801414c:	2001      	movs	r0, #1
 801414e:	b007      	add	sp, #28
 8014150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014152:	4293      	cmp	r3, r2
 8014154:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014158:	bf09      	itett	eq
 801415a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8014320 <__ieee754_rem_pio2f+0x238>
 801415e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8014324 <__ieee754_rem_pio2f+0x23c>
 8014162:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8014328 <__ieee754_rem_pio2f+0x240>
 8014166:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801416a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801416e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014172:	ed80 7a00 	vstr	s14, [r0]
 8014176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801417a:	edc0 7a01 	vstr	s15, [r0, #4]
 801417e:	f04f 30ff 	mov.w	r0, #4294967295
 8014182:	e7e4      	b.n	801414e <__ieee754_rem_pio2f+0x66>
 8014184:	4b69      	ldr	r3, [pc, #420]	@ (801432c <__ieee754_rem_pio2f+0x244>)
 8014186:	429d      	cmp	r5, r3
 8014188:	d873      	bhi.n	8014272 <__ieee754_rem_pio2f+0x18a>
 801418a:	f7fe fc05 	bl	8012998 <fabsf>
 801418e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8014330 <__ieee754_rem_pio2f+0x248>
 8014192:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014196:	eee0 7a07 	vfma.f32	s15, s0, s14
 801419a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801419e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80141a2:	ee17 0a90 	vmov	r0, s15
 80141a6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8014318 <__ieee754_rem_pio2f+0x230>
 80141aa:	eea7 0a67 	vfms.f32	s0, s14, s15
 80141ae:	281f      	cmp	r0, #31
 80141b0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8014324 <__ieee754_rem_pio2f+0x23c>
 80141b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141b8:	eeb1 6a47 	vneg.f32	s12, s14
 80141bc:	ee70 6a67 	vsub.f32	s13, s0, s15
 80141c0:	ee16 1a90 	vmov	r1, s13
 80141c4:	dc09      	bgt.n	80141da <__ieee754_rem_pio2f+0xf2>
 80141c6:	4a5b      	ldr	r2, [pc, #364]	@ (8014334 <__ieee754_rem_pio2f+0x24c>)
 80141c8:	1e47      	subs	r7, r0, #1
 80141ca:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80141ce:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80141d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80141d6:	4293      	cmp	r3, r2
 80141d8:	d107      	bne.n	80141ea <__ieee754_rem_pio2f+0x102>
 80141da:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80141de:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80141e2:	2a08      	cmp	r2, #8
 80141e4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80141e8:	dc14      	bgt.n	8014214 <__ieee754_rem_pio2f+0x12c>
 80141ea:	6021      	str	r1, [r4, #0]
 80141ec:	ed94 7a00 	vldr	s14, [r4]
 80141f0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80141f4:	2e00      	cmp	r6, #0
 80141f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80141fa:	ed84 0a01 	vstr	s0, [r4, #4]
 80141fe:	daa6      	bge.n	801414e <__ieee754_rem_pio2f+0x66>
 8014200:	eeb1 7a47 	vneg.f32	s14, s14
 8014204:	eeb1 0a40 	vneg.f32	s0, s0
 8014208:	ed84 7a00 	vstr	s14, [r4]
 801420c:	ed84 0a01 	vstr	s0, [r4, #4]
 8014210:	4240      	negs	r0, r0
 8014212:	e79c      	b.n	801414e <__ieee754_rem_pio2f+0x66>
 8014214:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8014320 <__ieee754_rem_pio2f+0x238>
 8014218:	eef0 6a40 	vmov.f32	s13, s0
 801421c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8014220:	ee70 7a66 	vsub.f32	s15, s0, s13
 8014224:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014228:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8014328 <__ieee754_rem_pio2f+0x240>
 801422c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8014230:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8014234:	ee15 2a90 	vmov	r2, s11
 8014238:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801423c:	1a5b      	subs	r3, r3, r1
 801423e:	2b19      	cmp	r3, #25
 8014240:	dc04      	bgt.n	801424c <__ieee754_rem_pio2f+0x164>
 8014242:	edc4 5a00 	vstr	s11, [r4]
 8014246:	eeb0 0a66 	vmov.f32	s0, s13
 801424a:	e7cf      	b.n	80141ec <__ieee754_rem_pio2f+0x104>
 801424c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8014338 <__ieee754_rem_pio2f+0x250>
 8014250:	eeb0 0a66 	vmov.f32	s0, s13
 8014254:	eea6 0a25 	vfma.f32	s0, s12, s11
 8014258:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801425c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801433c <__ieee754_rem_pio2f+0x254>
 8014260:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014264:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8014268:	ee30 7a67 	vsub.f32	s14, s0, s15
 801426c:	ed84 7a00 	vstr	s14, [r4]
 8014270:	e7bc      	b.n	80141ec <__ieee754_rem_pio2f+0x104>
 8014272:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8014276:	d306      	bcc.n	8014286 <__ieee754_rem_pio2f+0x19e>
 8014278:	ee70 7a40 	vsub.f32	s15, s0, s0
 801427c:	edc0 7a01 	vstr	s15, [r0, #4]
 8014280:	edc0 7a00 	vstr	s15, [r0]
 8014284:	e73e      	b.n	8014104 <__ieee754_rem_pio2f+0x1c>
 8014286:	15ea      	asrs	r2, r5, #23
 8014288:	3a86      	subs	r2, #134	@ 0x86
 801428a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801428e:	ee07 3a90 	vmov	s15, r3
 8014292:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014296:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8014340 <__ieee754_rem_pio2f+0x258>
 801429a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801429e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80142a2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80142a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80142aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80142ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80142b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80142b6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80142ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80142be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80142c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142c6:	edcd 7a05 	vstr	s15, [sp, #20]
 80142ca:	d11e      	bne.n	801430a <__ieee754_rem_pio2f+0x222>
 80142cc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80142d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142d4:	bf0c      	ite	eq
 80142d6:	2301      	moveq	r3, #1
 80142d8:	2302      	movne	r3, #2
 80142da:	491a      	ldr	r1, [pc, #104]	@ (8014344 <__ieee754_rem_pio2f+0x25c>)
 80142dc:	9101      	str	r1, [sp, #4]
 80142de:	2102      	movs	r1, #2
 80142e0:	9100      	str	r1, [sp, #0]
 80142e2:	a803      	add	r0, sp, #12
 80142e4:	4621      	mov	r1, r4
 80142e6:	f000 f8e7 	bl	80144b8 <__kernel_rem_pio2f>
 80142ea:	2e00      	cmp	r6, #0
 80142ec:	f6bf af2f 	bge.w	801414e <__ieee754_rem_pio2f+0x66>
 80142f0:	edd4 7a00 	vldr	s15, [r4]
 80142f4:	eef1 7a67 	vneg.f32	s15, s15
 80142f8:	edc4 7a00 	vstr	s15, [r4]
 80142fc:	edd4 7a01 	vldr	s15, [r4, #4]
 8014300:	eef1 7a67 	vneg.f32	s15, s15
 8014304:	edc4 7a01 	vstr	s15, [r4, #4]
 8014308:	e782      	b.n	8014210 <__ieee754_rem_pio2f+0x128>
 801430a:	2303      	movs	r3, #3
 801430c:	e7e5      	b.n	80142da <__ieee754_rem_pio2f+0x1f2>
 801430e:	bf00      	nop
 8014310:	3f490fd8 	.word	0x3f490fd8
 8014314:	4016cbe3 	.word	0x4016cbe3
 8014318:	3fc90f80 	.word	0x3fc90f80
 801431c:	3fc90fd0 	.word	0x3fc90fd0
 8014320:	37354400 	.word	0x37354400
 8014324:	37354443 	.word	0x37354443
 8014328:	2e85a308 	.word	0x2e85a308
 801432c:	43490f80 	.word	0x43490f80
 8014330:	3f22f984 	.word	0x3f22f984
 8014334:	08015068 	.word	0x08015068
 8014338:	2e85a300 	.word	0x2e85a300
 801433c:	248d3132 	.word	0x248d3132
 8014340:	43800000 	.word	0x43800000
 8014344:	080150e8 	.word	0x080150e8

08014348 <scalbn>:
 8014348:	b570      	push	{r4, r5, r6, lr}
 801434a:	ec55 4b10 	vmov	r4, r5, d0
 801434e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8014352:	4606      	mov	r6, r0
 8014354:	462b      	mov	r3, r5
 8014356:	b991      	cbnz	r1, 801437e <scalbn+0x36>
 8014358:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801435c:	4323      	orrs	r3, r4
 801435e:	d03b      	beq.n	80143d8 <scalbn+0x90>
 8014360:	4b33      	ldr	r3, [pc, #204]	@ (8014430 <scalbn+0xe8>)
 8014362:	4620      	mov	r0, r4
 8014364:	4629      	mov	r1, r5
 8014366:	2200      	movs	r2, #0
 8014368:	f7ec f94e 	bl	8000608 <__aeabi_dmul>
 801436c:	4b31      	ldr	r3, [pc, #196]	@ (8014434 <scalbn+0xec>)
 801436e:	429e      	cmp	r6, r3
 8014370:	4604      	mov	r4, r0
 8014372:	460d      	mov	r5, r1
 8014374:	da0f      	bge.n	8014396 <scalbn+0x4e>
 8014376:	a326      	add	r3, pc, #152	@ (adr r3, 8014410 <scalbn+0xc8>)
 8014378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801437c:	e01e      	b.n	80143bc <scalbn+0x74>
 801437e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8014382:	4291      	cmp	r1, r2
 8014384:	d10b      	bne.n	801439e <scalbn+0x56>
 8014386:	4622      	mov	r2, r4
 8014388:	4620      	mov	r0, r4
 801438a:	4629      	mov	r1, r5
 801438c:	f7eb ff86 	bl	800029c <__adddf3>
 8014390:	4604      	mov	r4, r0
 8014392:	460d      	mov	r5, r1
 8014394:	e020      	b.n	80143d8 <scalbn+0x90>
 8014396:	460b      	mov	r3, r1
 8014398:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801439c:	3936      	subs	r1, #54	@ 0x36
 801439e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80143a2:	4296      	cmp	r6, r2
 80143a4:	dd0d      	ble.n	80143c2 <scalbn+0x7a>
 80143a6:	2d00      	cmp	r5, #0
 80143a8:	a11b      	add	r1, pc, #108	@ (adr r1, 8014418 <scalbn+0xd0>)
 80143aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143ae:	da02      	bge.n	80143b6 <scalbn+0x6e>
 80143b0:	a11b      	add	r1, pc, #108	@ (adr r1, 8014420 <scalbn+0xd8>)
 80143b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143b6:	a318      	add	r3, pc, #96	@ (adr r3, 8014418 <scalbn+0xd0>)
 80143b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143bc:	f7ec f924 	bl	8000608 <__aeabi_dmul>
 80143c0:	e7e6      	b.n	8014390 <scalbn+0x48>
 80143c2:	1872      	adds	r2, r6, r1
 80143c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80143c8:	428a      	cmp	r2, r1
 80143ca:	dcec      	bgt.n	80143a6 <scalbn+0x5e>
 80143cc:	2a00      	cmp	r2, #0
 80143ce:	dd06      	ble.n	80143de <scalbn+0x96>
 80143d0:	f36f 531e 	bfc	r3, #20, #11
 80143d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80143d8:	ec45 4b10 	vmov	d0, r4, r5
 80143dc:	bd70      	pop	{r4, r5, r6, pc}
 80143de:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80143e2:	da08      	bge.n	80143f6 <scalbn+0xae>
 80143e4:	2d00      	cmp	r5, #0
 80143e6:	a10a      	add	r1, pc, #40	@ (adr r1, 8014410 <scalbn+0xc8>)
 80143e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143ec:	dac3      	bge.n	8014376 <scalbn+0x2e>
 80143ee:	a10e      	add	r1, pc, #56	@ (adr r1, 8014428 <scalbn+0xe0>)
 80143f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143f4:	e7bf      	b.n	8014376 <scalbn+0x2e>
 80143f6:	3236      	adds	r2, #54	@ 0x36
 80143f8:	f36f 531e 	bfc	r3, #20, #11
 80143fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014400:	4620      	mov	r0, r4
 8014402:	4b0d      	ldr	r3, [pc, #52]	@ (8014438 <scalbn+0xf0>)
 8014404:	4629      	mov	r1, r5
 8014406:	2200      	movs	r2, #0
 8014408:	e7d8      	b.n	80143bc <scalbn+0x74>
 801440a:	bf00      	nop
 801440c:	f3af 8000 	nop.w
 8014410:	c2f8f359 	.word	0xc2f8f359
 8014414:	01a56e1f 	.word	0x01a56e1f
 8014418:	8800759c 	.word	0x8800759c
 801441c:	7e37e43c 	.word	0x7e37e43c
 8014420:	8800759c 	.word	0x8800759c
 8014424:	fe37e43c 	.word	0xfe37e43c
 8014428:	c2f8f359 	.word	0xc2f8f359
 801442c:	81a56e1f 	.word	0x81a56e1f
 8014430:	43500000 	.word	0x43500000
 8014434:	ffff3cb0 	.word	0xffff3cb0
 8014438:	3c900000 	.word	0x3c900000

0801443c <with_errno>:
 801443c:	b510      	push	{r4, lr}
 801443e:	ed2d 8b02 	vpush	{d8}
 8014442:	eeb0 8a40 	vmov.f32	s16, s0
 8014446:	eef0 8a60 	vmov.f32	s17, s1
 801444a:	4604      	mov	r4, r0
 801444c:	f7fa fe3e 	bl	800f0cc <__errno>
 8014450:	eeb0 0a48 	vmov.f32	s0, s16
 8014454:	eef0 0a68 	vmov.f32	s1, s17
 8014458:	ecbd 8b02 	vpop	{d8}
 801445c:	6004      	str	r4, [r0, #0]
 801445e:	bd10      	pop	{r4, pc}

08014460 <xflow>:
 8014460:	4603      	mov	r3, r0
 8014462:	b507      	push	{r0, r1, r2, lr}
 8014464:	ec51 0b10 	vmov	r0, r1, d0
 8014468:	b183      	cbz	r3, 801448c <xflow+0x2c>
 801446a:	4602      	mov	r2, r0
 801446c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014470:	e9cd 2300 	strd	r2, r3, [sp]
 8014474:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014478:	f7ec f8c6 	bl	8000608 <__aeabi_dmul>
 801447c:	ec41 0b10 	vmov	d0, r0, r1
 8014480:	2022      	movs	r0, #34	@ 0x22
 8014482:	b003      	add	sp, #12
 8014484:	f85d eb04 	ldr.w	lr, [sp], #4
 8014488:	f7ff bfd8 	b.w	801443c <with_errno>
 801448c:	4602      	mov	r2, r0
 801448e:	460b      	mov	r3, r1
 8014490:	e7ee      	b.n	8014470 <xflow+0x10>
 8014492:	0000      	movs	r0, r0
 8014494:	0000      	movs	r0, r0
	...

08014498 <__math_uflow>:
 8014498:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80144a0 <__math_uflow+0x8>
 801449c:	f7ff bfe0 	b.w	8014460 <xflow>
 80144a0:	00000000 	.word	0x00000000
 80144a4:	10000000 	.word	0x10000000

080144a8 <__math_oflow>:
 80144a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80144b0 <__math_oflow+0x8>
 80144ac:	f7ff bfd8 	b.w	8014460 <xflow>
 80144b0:	00000000 	.word	0x00000000
 80144b4:	70000000 	.word	0x70000000

080144b8 <__kernel_rem_pio2f>:
 80144b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144bc:	ed2d 8b04 	vpush	{d8-d9}
 80144c0:	b0d9      	sub	sp, #356	@ 0x164
 80144c2:	4690      	mov	r8, r2
 80144c4:	9001      	str	r0, [sp, #4]
 80144c6:	4ab6      	ldr	r2, [pc, #728]	@ (80147a0 <__kernel_rem_pio2f+0x2e8>)
 80144c8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80144ca:	f118 0f04 	cmn.w	r8, #4
 80144ce:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80144d2:	460f      	mov	r7, r1
 80144d4:	f103 3bff 	add.w	fp, r3, #4294967295
 80144d8:	db26      	blt.n	8014528 <__kernel_rem_pio2f+0x70>
 80144da:	f1b8 0203 	subs.w	r2, r8, #3
 80144de:	bf48      	it	mi
 80144e0:	f108 0204 	addmi.w	r2, r8, #4
 80144e4:	10d2      	asrs	r2, r2, #3
 80144e6:	1c55      	adds	r5, r2, #1
 80144e8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80144ea:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80147b0 <__kernel_rem_pio2f+0x2f8>
 80144ee:	00e8      	lsls	r0, r5, #3
 80144f0:	eba2 060b 	sub.w	r6, r2, fp
 80144f4:	9002      	str	r0, [sp, #8]
 80144f6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80144fa:	eb0a 0c0b 	add.w	ip, sl, fp
 80144fe:	ac1c      	add	r4, sp, #112	@ 0x70
 8014500:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8014504:	2000      	movs	r0, #0
 8014506:	4560      	cmp	r0, ip
 8014508:	dd10      	ble.n	801452c <__kernel_rem_pio2f+0x74>
 801450a:	a91c      	add	r1, sp, #112	@ 0x70
 801450c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8014510:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8014514:	2600      	movs	r6, #0
 8014516:	4556      	cmp	r6, sl
 8014518:	dc24      	bgt.n	8014564 <__kernel_rem_pio2f+0xac>
 801451a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801451e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80147b0 <__kernel_rem_pio2f+0x2f8>
 8014522:	4684      	mov	ip, r0
 8014524:	2400      	movs	r4, #0
 8014526:	e016      	b.n	8014556 <__kernel_rem_pio2f+0x9e>
 8014528:	2200      	movs	r2, #0
 801452a:	e7dc      	b.n	80144e6 <__kernel_rem_pio2f+0x2e>
 801452c:	42c6      	cmn	r6, r0
 801452e:	bf5d      	ittte	pl
 8014530:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8014534:	ee07 1a90 	vmovpl	s15, r1
 8014538:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801453c:	eef0 7a47 	vmovmi.f32	s15, s14
 8014540:	ece4 7a01 	vstmia	r4!, {s15}
 8014544:	3001      	adds	r0, #1
 8014546:	e7de      	b.n	8014506 <__kernel_rem_pio2f+0x4e>
 8014548:	ecfe 6a01 	vldmia	lr!, {s13}
 801454c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8014550:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014554:	3401      	adds	r4, #1
 8014556:	455c      	cmp	r4, fp
 8014558:	ddf6      	ble.n	8014548 <__kernel_rem_pio2f+0x90>
 801455a:	ece9 7a01 	vstmia	r9!, {s15}
 801455e:	3601      	adds	r6, #1
 8014560:	3004      	adds	r0, #4
 8014562:	e7d8      	b.n	8014516 <__kernel_rem_pio2f+0x5e>
 8014564:	a908      	add	r1, sp, #32
 8014566:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801456a:	9104      	str	r1, [sp, #16]
 801456c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801456e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80147ac <__kernel_rem_pio2f+0x2f4>
 8014572:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80147a8 <__kernel_rem_pio2f+0x2f0>
 8014576:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801457a:	9203      	str	r2, [sp, #12]
 801457c:	4654      	mov	r4, sl
 801457e:	00a2      	lsls	r2, r4, #2
 8014580:	9205      	str	r2, [sp, #20]
 8014582:	aa58      	add	r2, sp, #352	@ 0x160
 8014584:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8014588:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801458c:	a944      	add	r1, sp, #272	@ 0x110
 801458e:	aa08      	add	r2, sp, #32
 8014590:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8014594:	4694      	mov	ip, r2
 8014596:	4626      	mov	r6, r4
 8014598:	2e00      	cmp	r6, #0
 801459a:	dc4c      	bgt.n	8014636 <__kernel_rem_pio2f+0x17e>
 801459c:	4628      	mov	r0, r5
 801459e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80145a2:	f000 f9f1 	bl	8014988 <scalbnf>
 80145a6:	eeb0 8a40 	vmov.f32	s16, s0
 80145aa:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80145ae:	ee28 0a00 	vmul.f32	s0, s16, s0
 80145b2:	f000 fa4f 	bl	8014a54 <floorf>
 80145b6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80145ba:	eea0 8a67 	vfms.f32	s16, s0, s15
 80145be:	2d00      	cmp	r5, #0
 80145c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80145c4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80145c8:	ee17 9a90 	vmov	r9, s15
 80145cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145d0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80145d4:	dd41      	ble.n	801465a <__kernel_rem_pio2f+0x1a2>
 80145d6:	f104 3cff 	add.w	ip, r4, #4294967295
 80145da:	a908      	add	r1, sp, #32
 80145dc:	f1c5 0e08 	rsb	lr, r5, #8
 80145e0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80145e4:	fa46 f00e 	asr.w	r0, r6, lr
 80145e8:	4481      	add	r9, r0
 80145ea:	fa00 f00e 	lsl.w	r0, r0, lr
 80145ee:	1a36      	subs	r6, r6, r0
 80145f0:	f1c5 0007 	rsb	r0, r5, #7
 80145f4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80145f8:	4106      	asrs	r6, r0
 80145fa:	2e00      	cmp	r6, #0
 80145fc:	dd3c      	ble.n	8014678 <__kernel_rem_pio2f+0x1c0>
 80145fe:	f04f 0e00 	mov.w	lr, #0
 8014602:	f109 0901 	add.w	r9, r9, #1
 8014606:	4670      	mov	r0, lr
 8014608:	4574      	cmp	r4, lr
 801460a:	dc68      	bgt.n	80146de <__kernel_rem_pio2f+0x226>
 801460c:	2d00      	cmp	r5, #0
 801460e:	dd03      	ble.n	8014618 <__kernel_rem_pio2f+0x160>
 8014610:	2d01      	cmp	r5, #1
 8014612:	d074      	beq.n	80146fe <__kernel_rem_pio2f+0x246>
 8014614:	2d02      	cmp	r5, #2
 8014616:	d07d      	beq.n	8014714 <__kernel_rem_pio2f+0x25c>
 8014618:	2e02      	cmp	r6, #2
 801461a:	d12d      	bne.n	8014678 <__kernel_rem_pio2f+0x1c0>
 801461c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014620:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014624:	b340      	cbz	r0, 8014678 <__kernel_rem_pio2f+0x1c0>
 8014626:	4628      	mov	r0, r5
 8014628:	9306      	str	r3, [sp, #24]
 801462a:	f000 f9ad 	bl	8014988 <scalbnf>
 801462e:	9b06      	ldr	r3, [sp, #24]
 8014630:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014634:	e020      	b.n	8014678 <__kernel_rem_pio2f+0x1c0>
 8014636:	ee60 7a28 	vmul.f32	s15, s0, s17
 801463a:	3e01      	subs	r6, #1
 801463c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014644:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014648:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801464c:	ecac 0a01 	vstmia	ip!, {s0}
 8014650:	ed30 0a01 	vldmdb	r0!, {s0}
 8014654:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014658:	e79e      	b.n	8014598 <__kernel_rem_pio2f+0xe0>
 801465a:	d105      	bne.n	8014668 <__kernel_rem_pio2f+0x1b0>
 801465c:	1e60      	subs	r0, r4, #1
 801465e:	a908      	add	r1, sp, #32
 8014660:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8014664:	11f6      	asrs	r6, r6, #7
 8014666:	e7c8      	b.n	80145fa <__kernel_rem_pio2f+0x142>
 8014668:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801466c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014674:	da31      	bge.n	80146da <__kernel_rem_pio2f+0x222>
 8014676:	2600      	movs	r6, #0
 8014678:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801467c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014680:	f040 8098 	bne.w	80147b4 <__kernel_rem_pio2f+0x2fc>
 8014684:	1e60      	subs	r0, r4, #1
 8014686:	2200      	movs	r2, #0
 8014688:	4550      	cmp	r0, sl
 801468a:	da4b      	bge.n	8014724 <__kernel_rem_pio2f+0x26c>
 801468c:	2a00      	cmp	r2, #0
 801468e:	d065      	beq.n	801475c <__kernel_rem_pio2f+0x2a4>
 8014690:	3c01      	subs	r4, #1
 8014692:	ab08      	add	r3, sp, #32
 8014694:	3d08      	subs	r5, #8
 8014696:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d0f8      	beq.n	8014690 <__kernel_rem_pio2f+0x1d8>
 801469e:	4628      	mov	r0, r5
 80146a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80146a4:	f000 f970 	bl	8014988 <scalbnf>
 80146a8:	1c63      	adds	r3, r4, #1
 80146aa:	aa44      	add	r2, sp, #272	@ 0x110
 80146ac:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80147ac <__kernel_rem_pio2f+0x2f4>
 80146b0:	0099      	lsls	r1, r3, #2
 80146b2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80146b6:	4623      	mov	r3, r4
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	f280 80a9 	bge.w	8014810 <__kernel_rem_pio2f+0x358>
 80146be:	4623      	mov	r3, r4
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	f2c0 80c7 	blt.w	8014854 <__kernel_rem_pio2f+0x39c>
 80146c6:	aa44      	add	r2, sp, #272	@ 0x110
 80146c8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80146cc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80147a4 <__kernel_rem_pio2f+0x2ec>
 80146d0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80147b0 <__kernel_rem_pio2f+0x2f8>
 80146d4:	2000      	movs	r0, #0
 80146d6:	1ae2      	subs	r2, r4, r3
 80146d8:	e0b1      	b.n	801483e <__kernel_rem_pio2f+0x386>
 80146da:	2602      	movs	r6, #2
 80146dc:	e78f      	b.n	80145fe <__kernel_rem_pio2f+0x146>
 80146de:	f852 1b04 	ldr.w	r1, [r2], #4
 80146e2:	b948      	cbnz	r0, 80146f8 <__kernel_rem_pio2f+0x240>
 80146e4:	b121      	cbz	r1, 80146f0 <__kernel_rem_pio2f+0x238>
 80146e6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80146ea:	f842 1c04 	str.w	r1, [r2, #-4]
 80146ee:	2101      	movs	r1, #1
 80146f0:	f10e 0e01 	add.w	lr, lr, #1
 80146f4:	4608      	mov	r0, r1
 80146f6:	e787      	b.n	8014608 <__kernel_rem_pio2f+0x150>
 80146f8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80146fc:	e7f5      	b.n	80146ea <__kernel_rem_pio2f+0x232>
 80146fe:	f104 3cff 	add.w	ip, r4, #4294967295
 8014702:	aa08      	add	r2, sp, #32
 8014704:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014708:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801470c:	a908      	add	r1, sp, #32
 801470e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8014712:	e781      	b.n	8014618 <__kernel_rem_pio2f+0x160>
 8014714:	f104 3cff 	add.w	ip, r4, #4294967295
 8014718:	aa08      	add	r2, sp, #32
 801471a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801471e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8014722:	e7f3      	b.n	801470c <__kernel_rem_pio2f+0x254>
 8014724:	a908      	add	r1, sp, #32
 8014726:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801472a:	3801      	subs	r0, #1
 801472c:	430a      	orrs	r2, r1
 801472e:	e7ab      	b.n	8014688 <__kernel_rem_pio2f+0x1d0>
 8014730:	3201      	adds	r2, #1
 8014732:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8014736:	2e00      	cmp	r6, #0
 8014738:	d0fa      	beq.n	8014730 <__kernel_rem_pio2f+0x278>
 801473a:	9905      	ldr	r1, [sp, #20]
 801473c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8014740:	eb0d 0001 	add.w	r0, sp, r1
 8014744:	18e6      	adds	r6, r4, r3
 8014746:	a91c      	add	r1, sp, #112	@ 0x70
 8014748:	f104 0c01 	add.w	ip, r4, #1
 801474c:	384c      	subs	r0, #76	@ 0x4c
 801474e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8014752:	4422      	add	r2, r4
 8014754:	4562      	cmp	r2, ip
 8014756:	da04      	bge.n	8014762 <__kernel_rem_pio2f+0x2aa>
 8014758:	4614      	mov	r4, r2
 801475a:	e710      	b.n	801457e <__kernel_rem_pio2f+0xc6>
 801475c:	9804      	ldr	r0, [sp, #16]
 801475e:	2201      	movs	r2, #1
 8014760:	e7e7      	b.n	8014732 <__kernel_rem_pio2f+0x27a>
 8014762:	9903      	ldr	r1, [sp, #12]
 8014764:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014768:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801476c:	9105      	str	r1, [sp, #20]
 801476e:	ee07 1a90 	vmov	s15, r1
 8014772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014776:	2400      	movs	r4, #0
 8014778:	ece6 7a01 	vstmia	r6!, {s15}
 801477c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80147b0 <__kernel_rem_pio2f+0x2f8>
 8014780:	46b1      	mov	r9, r6
 8014782:	455c      	cmp	r4, fp
 8014784:	dd04      	ble.n	8014790 <__kernel_rem_pio2f+0x2d8>
 8014786:	ece0 7a01 	vstmia	r0!, {s15}
 801478a:	f10c 0c01 	add.w	ip, ip, #1
 801478e:	e7e1      	b.n	8014754 <__kernel_rem_pio2f+0x29c>
 8014790:	ecfe 6a01 	vldmia	lr!, {s13}
 8014794:	ed39 7a01 	vldmdb	r9!, {s14}
 8014798:	3401      	adds	r4, #1
 801479a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801479e:	e7f0      	b.n	8014782 <__kernel_rem_pio2f+0x2ca>
 80147a0:	0801542c 	.word	0x0801542c
 80147a4:	08015400 	.word	0x08015400
 80147a8:	43800000 	.word	0x43800000
 80147ac:	3b800000 	.word	0x3b800000
 80147b0:	00000000 	.word	0x00000000
 80147b4:	9b02      	ldr	r3, [sp, #8]
 80147b6:	eeb0 0a48 	vmov.f32	s0, s16
 80147ba:	eba3 0008 	sub.w	r0, r3, r8
 80147be:	f000 f8e3 	bl	8014988 <scalbnf>
 80147c2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80147a8 <__kernel_rem_pio2f+0x2f0>
 80147c6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80147ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ce:	db19      	blt.n	8014804 <__kernel_rem_pio2f+0x34c>
 80147d0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80147ac <__kernel_rem_pio2f+0x2f4>
 80147d4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80147d8:	aa08      	add	r2, sp, #32
 80147da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147de:	3508      	adds	r5, #8
 80147e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147e4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80147e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80147f0:	ee10 3a10 	vmov	r3, s0
 80147f4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80147f8:	ee17 3a90 	vmov	r3, s15
 80147fc:	3401      	adds	r4, #1
 80147fe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014802:	e74c      	b.n	801469e <__kernel_rem_pio2f+0x1e6>
 8014804:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014808:	aa08      	add	r2, sp, #32
 801480a:	ee10 3a10 	vmov	r3, s0
 801480e:	e7f6      	b.n	80147fe <__kernel_rem_pio2f+0x346>
 8014810:	a808      	add	r0, sp, #32
 8014812:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8014816:	9001      	str	r0, [sp, #4]
 8014818:	ee07 0a90 	vmov	s15, r0
 801481c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014820:	3b01      	subs	r3, #1
 8014822:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014826:	ee20 0a07 	vmul.f32	s0, s0, s14
 801482a:	ed62 7a01 	vstmdb	r2!, {s15}
 801482e:	e743      	b.n	80146b8 <__kernel_rem_pio2f+0x200>
 8014830:	ecfc 6a01 	vldmia	ip!, {s13}
 8014834:	ecb5 7a01 	vldmia	r5!, {s14}
 8014838:	eee6 7a87 	vfma.f32	s15, s13, s14
 801483c:	3001      	adds	r0, #1
 801483e:	4550      	cmp	r0, sl
 8014840:	dc01      	bgt.n	8014846 <__kernel_rem_pio2f+0x38e>
 8014842:	4290      	cmp	r0, r2
 8014844:	ddf4      	ble.n	8014830 <__kernel_rem_pio2f+0x378>
 8014846:	a858      	add	r0, sp, #352	@ 0x160
 8014848:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801484c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8014850:	3b01      	subs	r3, #1
 8014852:	e735      	b.n	80146c0 <__kernel_rem_pio2f+0x208>
 8014854:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014856:	2b02      	cmp	r3, #2
 8014858:	dc09      	bgt.n	801486e <__kernel_rem_pio2f+0x3b6>
 801485a:	2b00      	cmp	r3, #0
 801485c:	dc27      	bgt.n	80148ae <__kernel_rem_pio2f+0x3f6>
 801485e:	d040      	beq.n	80148e2 <__kernel_rem_pio2f+0x42a>
 8014860:	f009 0007 	and.w	r0, r9, #7
 8014864:	b059      	add	sp, #356	@ 0x164
 8014866:	ecbd 8b04 	vpop	{d8-d9}
 801486a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801486e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014870:	2b03      	cmp	r3, #3
 8014872:	d1f5      	bne.n	8014860 <__kernel_rem_pio2f+0x3a8>
 8014874:	aa30      	add	r2, sp, #192	@ 0xc0
 8014876:	1f0b      	subs	r3, r1, #4
 8014878:	4413      	add	r3, r2
 801487a:	461a      	mov	r2, r3
 801487c:	4620      	mov	r0, r4
 801487e:	2800      	cmp	r0, #0
 8014880:	dc50      	bgt.n	8014924 <__kernel_rem_pio2f+0x46c>
 8014882:	4622      	mov	r2, r4
 8014884:	2a01      	cmp	r2, #1
 8014886:	dc5d      	bgt.n	8014944 <__kernel_rem_pio2f+0x48c>
 8014888:	ab30      	add	r3, sp, #192	@ 0xc0
 801488a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80147b0 <__kernel_rem_pio2f+0x2f8>
 801488e:	440b      	add	r3, r1
 8014890:	2c01      	cmp	r4, #1
 8014892:	dc67      	bgt.n	8014964 <__kernel_rem_pio2f+0x4ac>
 8014894:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8014898:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801489c:	2e00      	cmp	r6, #0
 801489e:	d167      	bne.n	8014970 <__kernel_rem_pio2f+0x4b8>
 80148a0:	edc7 6a00 	vstr	s13, [r7]
 80148a4:	ed87 7a01 	vstr	s14, [r7, #4]
 80148a8:	edc7 7a02 	vstr	s15, [r7, #8]
 80148ac:	e7d8      	b.n	8014860 <__kernel_rem_pio2f+0x3a8>
 80148ae:	ab30      	add	r3, sp, #192	@ 0xc0
 80148b0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80147b0 <__kernel_rem_pio2f+0x2f8>
 80148b4:	440b      	add	r3, r1
 80148b6:	4622      	mov	r2, r4
 80148b8:	2a00      	cmp	r2, #0
 80148ba:	da24      	bge.n	8014906 <__kernel_rem_pio2f+0x44e>
 80148bc:	b34e      	cbz	r6, 8014912 <__kernel_rem_pio2f+0x45a>
 80148be:	eef1 7a47 	vneg.f32	s15, s14
 80148c2:	edc7 7a00 	vstr	s15, [r7]
 80148c6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80148ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80148ce:	aa31      	add	r2, sp, #196	@ 0xc4
 80148d0:	2301      	movs	r3, #1
 80148d2:	429c      	cmp	r4, r3
 80148d4:	da20      	bge.n	8014918 <__kernel_rem_pio2f+0x460>
 80148d6:	b10e      	cbz	r6, 80148dc <__kernel_rem_pio2f+0x424>
 80148d8:	eef1 7a67 	vneg.f32	s15, s15
 80148dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80148e0:	e7be      	b.n	8014860 <__kernel_rem_pio2f+0x3a8>
 80148e2:	ab30      	add	r3, sp, #192	@ 0xc0
 80148e4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80147b0 <__kernel_rem_pio2f+0x2f8>
 80148e8:	440b      	add	r3, r1
 80148ea:	2c00      	cmp	r4, #0
 80148ec:	da05      	bge.n	80148fa <__kernel_rem_pio2f+0x442>
 80148ee:	b10e      	cbz	r6, 80148f4 <__kernel_rem_pio2f+0x43c>
 80148f0:	eef1 7a67 	vneg.f32	s15, s15
 80148f4:	edc7 7a00 	vstr	s15, [r7]
 80148f8:	e7b2      	b.n	8014860 <__kernel_rem_pio2f+0x3a8>
 80148fa:	ed33 7a01 	vldmdb	r3!, {s14}
 80148fe:	3c01      	subs	r4, #1
 8014900:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014904:	e7f1      	b.n	80148ea <__kernel_rem_pio2f+0x432>
 8014906:	ed73 7a01 	vldmdb	r3!, {s15}
 801490a:	3a01      	subs	r2, #1
 801490c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014910:	e7d2      	b.n	80148b8 <__kernel_rem_pio2f+0x400>
 8014912:	eef0 7a47 	vmov.f32	s15, s14
 8014916:	e7d4      	b.n	80148c2 <__kernel_rem_pio2f+0x40a>
 8014918:	ecb2 7a01 	vldmia	r2!, {s14}
 801491c:	3301      	adds	r3, #1
 801491e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014922:	e7d6      	b.n	80148d2 <__kernel_rem_pio2f+0x41a>
 8014924:	ed72 7a01 	vldmdb	r2!, {s15}
 8014928:	edd2 6a01 	vldr	s13, [r2, #4]
 801492c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014930:	3801      	subs	r0, #1
 8014932:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014936:	ed82 7a00 	vstr	s14, [r2]
 801493a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801493e:	edc2 7a01 	vstr	s15, [r2, #4]
 8014942:	e79c      	b.n	801487e <__kernel_rem_pio2f+0x3c6>
 8014944:	ed73 7a01 	vldmdb	r3!, {s15}
 8014948:	edd3 6a01 	vldr	s13, [r3, #4]
 801494c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014950:	3a01      	subs	r2, #1
 8014952:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014956:	ed83 7a00 	vstr	s14, [r3]
 801495a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801495e:	edc3 7a01 	vstr	s15, [r3, #4]
 8014962:	e78f      	b.n	8014884 <__kernel_rem_pio2f+0x3cc>
 8014964:	ed33 7a01 	vldmdb	r3!, {s14}
 8014968:	3c01      	subs	r4, #1
 801496a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801496e:	e78f      	b.n	8014890 <__kernel_rem_pio2f+0x3d8>
 8014970:	eef1 6a66 	vneg.f32	s13, s13
 8014974:	eeb1 7a47 	vneg.f32	s14, s14
 8014978:	edc7 6a00 	vstr	s13, [r7]
 801497c:	ed87 7a01 	vstr	s14, [r7, #4]
 8014980:	eef1 7a67 	vneg.f32	s15, s15
 8014984:	e790      	b.n	80148a8 <__kernel_rem_pio2f+0x3f0>
 8014986:	bf00      	nop

08014988 <scalbnf>:
 8014988:	ee10 3a10 	vmov	r3, s0
 801498c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8014990:	d02b      	beq.n	80149ea <scalbnf+0x62>
 8014992:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8014996:	d302      	bcc.n	801499e <scalbnf+0x16>
 8014998:	ee30 0a00 	vadd.f32	s0, s0, s0
 801499c:	4770      	bx	lr
 801499e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80149a2:	d123      	bne.n	80149ec <scalbnf+0x64>
 80149a4:	4b24      	ldr	r3, [pc, #144]	@ (8014a38 <scalbnf+0xb0>)
 80149a6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8014a3c <scalbnf+0xb4>
 80149aa:	4298      	cmp	r0, r3
 80149ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80149b0:	db17      	blt.n	80149e2 <scalbnf+0x5a>
 80149b2:	ee10 3a10 	vmov	r3, s0
 80149b6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80149ba:	3a19      	subs	r2, #25
 80149bc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80149c0:	4288      	cmp	r0, r1
 80149c2:	dd15      	ble.n	80149f0 <scalbnf+0x68>
 80149c4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8014a40 <scalbnf+0xb8>
 80149c8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8014a44 <scalbnf+0xbc>
 80149cc:	ee10 3a10 	vmov	r3, s0
 80149d0:	eeb0 7a67 	vmov.f32	s14, s15
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	bfb8      	it	lt
 80149d8:	eef0 7a66 	vmovlt.f32	s15, s13
 80149dc:	ee27 0a87 	vmul.f32	s0, s15, s14
 80149e0:	4770      	bx	lr
 80149e2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014a48 <scalbnf+0xc0>
 80149e6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80149ea:	4770      	bx	lr
 80149ec:	0dd2      	lsrs	r2, r2, #23
 80149ee:	e7e5      	b.n	80149bc <scalbnf+0x34>
 80149f0:	4410      	add	r0, r2
 80149f2:	28fe      	cmp	r0, #254	@ 0xfe
 80149f4:	dce6      	bgt.n	80149c4 <scalbnf+0x3c>
 80149f6:	2800      	cmp	r0, #0
 80149f8:	dd06      	ble.n	8014a08 <scalbnf+0x80>
 80149fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80149fe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014a02:	ee00 3a10 	vmov	s0, r3
 8014a06:	4770      	bx	lr
 8014a08:	f110 0f16 	cmn.w	r0, #22
 8014a0c:	da09      	bge.n	8014a22 <scalbnf+0x9a>
 8014a0e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8014a48 <scalbnf+0xc0>
 8014a12:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8014a4c <scalbnf+0xc4>
 8014a16:	ee10 3a10 	vmov	r3, s0
 8014a1a:	eeb0 7a67 	vmov.f32	s14, s15
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	e7d9      	b.n	80149d6 <scalbnf+0x4e>
 8014a22:	3019      	adds	r0, #25
 8014a24:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014a28:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014a2c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8014a50 <scalbnf+0xc8>
 8014a30:	ee07 3a90 	vmov	s15, r3
 8014a34:	e7d7      	b.n	80149e6 <scalbnf+0x5e>
 8014a36:	bf00      	nop
 8014a38:	ffff3cb0 	.word	0xffff3cb0
 8014a3c:	4c000000 	.word	0x4c000000
 8014a40:	7149f2ca 	.word	0x7149f2ca
 8014a44:	f149f2ca 	.word	0xf149f2ca
 8014a48:	0da24260 	.word	0x0da24260
 8014a4c:	8da24260 	.word	0x8da24260
 8014a50:	33000000 	.word	0x33000000

08014a54 <floorf>:
 8014a54:	ee10 3a10 	vmov	r3, s0
 8014a58:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014a5c:	3a7f      	subs	r2, #127	@ 0x7f
 8014a5e:	2a16      	cmp	r2, #22
 8014a60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014a64:	dc2b      	bgt.n	8014abe <floorf+0x6a>
 8014a66:	2a00      	cmp	r2, #0
 8014a68:	da12      	bge.n	8014a90 <floorf+0x3c>
 8014a6a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014ad0 <floorf+0x7c>
 8014a6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014a72:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a7a:	dd06      	ble.n	8014a8a <floorf+0x36>
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	da24      	bge.n	8014aca <floorf+0x76>
 8014a80:	2900      	cmp	r1, #0
 8014a82:	4b14      	ldr	r3, [pc, #80]	@ (8014ad4 <floorf+0x80>)
 8014a84:	bf08      	it	eq
 8014a86:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8014a8a:	ee00 3a10 	vmov	s0, r3
 8014a8e:	4770      	bx	lr
 8014a90:	4911      	ldr	r1, [pc, #68]	@ (8014ad8 <floorf+0x84>)
 8014a92:	4111      	asrs	r1, r2
 8014a94:	420b      	tst	r3, r1
 8014a96:	d0fa      	beq.n	8014a8e <floorf+0x3a>
 8014a98:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8014ad0 <floorf+0x7c>
 8014a9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014aa0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aa8:	ddef      	ble.n	8014a8a <floorf+0x36>
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	bfbe      	ittt	lt
 8014aae:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8014ab2:	fa40 f202 	asrlt.w	r2, r0, r2
 8014ab6:	189b      	addlt	r3, r3, r2
 8014ab8:	ea23 0301 	bic.w	r3, r3, r1
 8014abc:	e7e5      	b.n	8014a8a <floorf+0x36>
 8014abe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014ac2:	d3e4      	bcc.n	8014a8e <floorf+0x3a>
 8014ac4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014ac8:	4770      	bx	lr
 8014aca:	2300      	movs	r3, #0
 8014acc:	e7dd      	b.n	8014a8a <floorf+0x36>
 8014ace:	bf00      	nop
 8014ad0:	7149f2ca 	.word	0x7149f2ca
 8014ad4:	bf800000 	.word	0xbf800000
 8014ad8:	007fffff 	.word	0x007fffff

08014adc <_init>:
 8014adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ade:	bf00      	nop
 8014ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ae2:	bc08      	pop	{r3}
 8014ae4:	469e      	mov	lr, r3
 8014ae6:	4770      	bx	lr

08014ae8 <_fini>:
 8014ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aea:	bf00      	nop
 8014aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014aee:	bc08      	pop	{r3}
 8014af0:	469e      	mov	lr, r3
 8014af2:	4770      	bx	lr
