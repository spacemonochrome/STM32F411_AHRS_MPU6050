
F411_AHRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012374  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a8  08012518  08012518  00013518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ec0  08012ec0  000141f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012ec0  08012ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ec8  08012ec8  000141f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ec8  08012ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012ecc  08012ecc  00013ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08012ed0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bac  200001f8  080130c4  000141f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000da4  080130c4  00014da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183ad  00000000  00000000  00014224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003710  00000000  00000000  0002c5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  0002fce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001087  00000000  00000000  00031208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001997c  00000000  00000000  0003228f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b7f7  00000000  00000000  0004bc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000979c9  00000000  00000000  00067402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fedcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007748  00000000  00000000  000fee10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00106558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080124fc 	.word	0x080124fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	080124fc 	.word	0x080124fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	@ 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_uldivmod>:
 8000eb4:	b953      	cbnz	r3, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb6:	b94a      	cbnz	r2, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bf08      	it	eq
 8000ebc:	2800      	cmpeq	r0, #0
 8000ebe:	bf1c      	itt	ne
 8000ec0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ec4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec8:	f000 b9be 	b.w	8001248 <__aeabi_idiv0>
 8000ecc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed4:	f000 f83c 	bl	8000f50 <__udivmoddi4>
 8000ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_d2lz>:
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2300      	movs	r3, #0
 8000eea:	4604      	mov	r4, r0
 8000eec:	460d      	mov	r5, r1
 8000eee:	f7ff fdfd 	bl	8000aec <__aeabi_dcmplt>
 8000ef2:	b928      	cbnz	r0, 8000f00 <__aeabi_d2lz+0x1c>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000efc:	f000 b80a 	b.w	8000f14 <__aeabi_d2ulz>
 8000f00:	4620      	mov	r0, r4
 8000f02:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f06:	f000 f805 	bl	8000f14 <__aeabi_d2ulz>
 8000f0a:	4240      	negs	r0, r0
 8000f0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f10:	bd38      	pop	{r3, r4, r5, pc}
 8000f12:	bf00      	nop

08000f14 <__aeabi_d2ulz>:
 8000f14:	b5d0      	push	{r4, r6, r7, lr}
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <__aeabi_d2ulz+0x34>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4606      	mov	r6, r0
 8000f1c:	460f      	mov	r7, r1
 8000f1e:	f7ff fb73 	bl	8000608 <__aeabi_dmul>
 8000f22:	f7ff fe49 	bl	8000bb8 <__aeabi_d2uiz>
 8000f26:	4604      	mov	r4, r0
 8000f28:	f7ff faf4 	bl	8000514 <__aeabi_ui2d>
 8000f2c:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <__aeabi_d2ulz+0x38>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f7ff fb6a 	bl	8000608 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4630      	mov	r0, r6
 8000f3a:	4639      	mov	r1, r7
 8000f3c:	f7ff f9ac 	bl	8000298 <__aeabi_dsub>
 8000f40:	f7ff fe3a 	bl	8000bb8 <__aeabi_d2uiz>
 8000f44:	4621      	mov	r1, r4
 8000f46:	bdd0      	pop	{r4, r6, r7, pc}
 8000f48:	3df00000 	.word	0x3df00000
 8000f4c:	41f00000 	.word	0x41f00000

08000f50 <__udivmoddi4>:
 8000f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f54:	9d08      	ldr	r5, [sp, #32]
 8000f56:	468e      	mov	lr, r1
 8000f58:	4604      	mov	r4, r0
 8000f5a:	4688      	mov	r8, r1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d14a      	bne.n	8000ff6 <__udivmoddi4+0xa6>
 8000f60:	428a      	cmp	r2, r1
 8000f62:	4617      	mov	r7, r2
 8000f64:	d962      	bls.n	800102c <__udivmoddi4+0xdc>
 8000f66:	fab2 f682 	clz	r6, r2
 8000f6a:	b14e      	cbz	r6, 8000f80 <__udivmoddi4+0x30>
 8000f6c:	f1c6 0320 	rsb	r3, r6, #32
 8000f70:	fa01 f806 	lsl.w	r8, r1, r6
 8000f74:	fa20 f303 	lsr.w	r3, r0, r3
 8000f78:	40b7      	lsls	r7, r6
 8000f7a:	ea43 0808 	orr.w	r8, r3, r8
 8000f7e:	40b4      	lsls	r4, r6
 8000f80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f84:	fa1f fc87 	uxth.w	ip, r7
 8000f88:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f8c:	0c23      	lsrs	r3, r4, #16
 8000f8e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000f92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f96:	fb01 f20c 	mul.w	r2, r1, ip
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d909      	bls.n	8000fb2 <__udivmoddi4+0x62>
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000fa4:	f080 80ea 	bcs.w	800117c <__udivmoddi4+0x22c>
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	f240 80e7 	bls.w	800117c <__udivmoddi4+0x22c>
 8000fae:	3902      	subs	r1, #2
 8000fb0:	443b      	add	r3, r7
 8000fb2:	1a9a      	subs	r2, r3, r2
 8000fb4:	b2a3      	uxth	r3, r4
 8000fb6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000fba:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fc2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fc6:	459c      	cmp	ip, r3
 8000fc8:	d909      	bls.n	8000fde <__udivmoddi4+0x8e>
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fd0:	f080 80d6 	bcs.w	8001180 <__udivmoddi4+0x230>
 8000fd4:	459c      	cmp	ip, r3
 8000fd6:	f240 80d3 	bls.w	8001180 <__udivmoddi4+0x230>
 8000fda:	443b      	add	r3, r7
 8000fdc:	3802      	subs	r0, #2
 8000fde:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fe2:	eba3 030c 	sub.w	r3, r3, ip
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	b11d      	cbz	r5, 8000ff2 <__udivmoddi4+0xa2>
 8000fea:	40f3      	lsrs	r3, r6
 8000fec:	2200      	movs	r2, #0
 8000fee:	e9c5 3200 	strd	r3, r2, [r5]
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d905      	bls.n	8001006 <__udivmoddi4+0xb6>
 8000ffa:	b10d      	cbz	r5, 8001000 <__udivmoddi4+0xb0>
 8000ffc:	e9c5 0100 	strd	r0, r1, [r5]
 8001000:	2100      	movs	r1, #0
 8001002:	4608      	mov	r0, r1
 8001004:	e7f5      	b.n	8000ff2 <__udivmoddi4+0xa2>
 8001006:	fab3 f183 	clz	r1, r3
 800100a:	2900      	cmp	r1, #0
 800100c:	d146      	bne.n	800109c <__udivmoddi4+0x14c>
 800100e:	4573      	cmp	r3, lr
 8001010:	d302      	bcc.n	8001018 <__udivmoddi4+0xc8>
 8001012:	4282      	cmp	r2, r0
 8001014:	f200 8105 	bhi.w	8001222 <__udivmoddi4+0x2d2>
 8001018:	1a84      	subs	r4, r0, r2
 800101a:	eb6e 0203 	sbc.w	r2, lr, r3
 800101e:	2001      	movs	r0, #1
 8001020:	4690      	mov	r8, r2
 8001022:	2d00      	cmp	r5, #0
 8001024:	d0e5      	beq.n	8000ff2 <__udivmoddi4+0xa2>
 8001026:	e9c5 4800 	strd	r4, r8, [r5]
 800102a:	e7e2      	b.n	8000ff2 <__udivmoddi4+0xa2>
 800102c:	2a00      	cmp	r2, #0
 800102e:	f000 8090 	beq.w	8001152 <__udivmoddi4+0x202>
 8001032:	fab2 f682 	clz	r6, r2
 8001036:	2e00      	cmp	r6, #0
 8001038:	f040 80a4 	bne.w	8001184 <__udivmoddi4+0x234>
 800103c:	1a8a      	subs	r2, r1, r2
 800103e:	0c03      	lsrs	r3, r0, #16
 8001040:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001044:	b280      	uxth	r0, r0
 8001046:	b2bc      	uxth	r4, r7
 8001048:	2101      	movs	r1, #1
 800104a:	fbb2 fcfe 	udiv	ip, r2, lr
 800104e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001056:	fb04 f20c 	mul.w	r2, r4, ip
 800105a:	429a      	cmp	r2, r3
 800105c:	d907      	bls.n	800106e <__udivmoddi4+0x11e>
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001064:	d202      	bcs.n	800106c <__udivmoddi4+0x11c>
 8001066:	429a      	cmp	r2, r3
 8001068:	f200 80e0 	bhi.w	800122c <__udivmoddi4+0x2dc>
 800106c:	46c4      	mov	ip, r8
 800106e:	1a9b      	subs	r3, r3, r2
 8001070:	fbb3 f2fe 	udiv	r2, r3, lr
 8001074:	fb0e 3312 	mls	r3, lr, r2, r3
 8001078:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800107c:	fb02 f404 	mul.w	r4, r2, r4
 8001080:	429c      	cmp	r4, r3
 8001082:	d907      	bls.n	8001094 <__udivmoddi4+0x144>
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	f102 30ff 	add.w	r0, r2, #4294967295
 800108a:	d202      	bcs.n	8001092 <__udivmoddi4+0x142>
 800108c:	429c      	cmp	r4, r3
 800108e:	f200 80ca 	bhi.w	8001226 <__udivmoddi4+0x2d6>
 8001092:	4602      	mov	r2, r0
 8001094:	1b1b      	subs	r3, r3, r4
 8001096:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800109a:	e7a5      	b.n	8000fe8 <__udivmoddi4+0x98>
 800109c:	f1c1 0620 	rsb	r6, r1, #32
 80010a0:	408b      	lsls	r3, r1
 80010a2:	fa22 f706 	lsr.w	r7, r2, r6
 80010a6:	431f      	orrs	r7, r3
 80010a8:	fa0e f401 	lsl.w	r4, lr, r1
 80010ac:	fa20 f306 	lsr.w	r3, r0, r6
 80010b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80010b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80010b8:	4323      	orrs	r3, r4
 80010ba:	fa00 f801 	lsl.w	r8, r0, r1
 80010be:	fa1f fc87 	uxth.w	ip, r7
 80010c2:	fbbe f0f9 	udiv	r0, lr, r9
 80010c6:	0c1c      	lsrs	r4, r3, #16
 80010c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80010cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80010d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80010d4:	45a6      	cmp	lr, r4
 80010d6:	fa02 f201 	lsl.w	r2, r2, r1
 80010da:	d909      	bls.n	80010f0 <__udivmoddi4+0x1a0>
 80010dc:	193c      	adds	r4, r7, r4
 80010de:	f100 3aff 	add.w	sl, r0, #4294967295
 80010e2:	f080 809c 	bcs.w	800121e <__udivmoddi4+0x2ce>
 80010e6:	45a6      	cmp	lr, r4
 80010e8:	f240 8099 	bls.w	800121e <__udivmoddi4+0x2ce>
 80010ec:	3802      	subs	r0, #2
 80010ee:	443c      	add	r4, r7
 80010f0:	eba4 040e 	sub.w	r4, r4, lr
 80010f4:	fa1f fe83 	uxth.w	lr, r3
 80010f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80010fc:	fb09 4413 	mls	r4, r9, r3, r4
 8001100:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001104:	fb03 fc0c 	mul.w	ip, r3, ip
 8001108:	45a4      	cmp	ip, r4
 800110a:	d908      	bls.n	800111e <__udivmoddi4+0x1ce>
 800110c:	193c      	adds	r4, r7, r4
 800110e:	f103 3eff 	add.w	lr, r3, #4294967295
 8001112:	f080 8082 	bcs.w	800121a <__udivmoddi4+0x2ca>
 8001116:	45a4      	cmp	ip, r4
 8001118:	d97f      	bls.n	800121a <__udivmoddi4+0x2ca>
 800111a:	3b02      	subs	r3, #2
 800111c:	443c      	add	r4, r7
 800111e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001122:	eba4 040c 	sub.w	r4, r4, ip
 8001126:	fba0 ec02 	umull	lr, ip, r0, r2
 800112a:	4564      	cmp	r4, ip
 800112c:	4673      	mov	r3, lr
 800112e:	46e1      	mov	r9, ip
 8001130:	d362      	bcc.n	80011f8 <__udivmoddi4+0x2a8>
 8001132:	d05f      	beq.n	80011f4 <__udivmoddi4+0x2a4>
 8001134:	b15d      	cbz	r5, 800114e <__udivmoddi4+0x1fe>
 8001136:	ebb8 0203 	subs.w	r2, r8, r3
 800113a:	eb64 0409 	sbc.w	r4, r4, r9
 800113e:	fa04 f606 	lsl.w	r6, r4, r6
 8001142:	fa22 f301 	lsr.w	r3, r2, r1
 8001146:	431e      	orrs	r6, r3
 8001148:	40cc      	lsrs	r4, r1
 800114a:	e9c5 6400 	strd	r6, r4, [r5]
 800114e:	2100      	movs	r1, #0
 8001150:	e74f      	b.n	8000ff2 <__udivmoddi4+0xa2>
 8001152:	fbb1 fcf2 	udiv	ip, r1, r2
 8001156:	0c01      	lsrs	r1, r0, #16
 8001158:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800115c:	b280      	uxth	r0, r0
 800115e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001162:	463b      	mov	r3, r7
 8001164:	4638      	mov	r0, r7
 8001166:	463c      	mov	r4, r7
 8001168:	46b8      	mov	r8, r7
 800116a:	46be      	mov	lr, r7
 800116c:	2620      	movs	r6, #32
 800116e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001172:	eba2 0208 	sub.w	r2, r2, r8
 8001176:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800117a:	e766      	b.n	800104a <__udivmoddi4+0xfa>
 800117c:	4601      	mov	r1, r0
 800117e:	e718      	b.n	8000fb2 <__udivmoddi4+0x62>
 8001180:	4610      	mov	r0, r2
 8001182:	e72c      	b.n	8000fde <__udivmoddi4+0x8e>
 8001184:	f1c6 0220 	rsb	r2, r6, #32
 8001188:	fa2e f302 	lsr.w	r3, lr, r2
 800118c:	40b7      	lsls	r7, r6
 800118e:	40b1      	lsls	r1, r6
 8001190:	fa20 f202 	lsr.w	r2, r0, r2
 8001194:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001198:	430a      	orrs	r2, r1
 800119a:	fbb3 f8fe 	udiv	r8, r3, lr
 800119e:	b2bc      	uxth	r4, r7
 80011a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80011a4:	0c11      	lsrs	r1, r2, #16
 80011a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011aa:	fb08 f904 	mul.w	r9, r8, r4
 80011ae:	40b0      	lsls	r0, r6
 80011b0:	4589      	cmp	r9, r1
 80011b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80011b6:	b280      	uxth	r0, r0
 80011b8:	d93e      	bls.n	8001238 <__udivmoddi4+0x2e8>
 80011ba:	1879      	adds	r1, r7, r1
 80011bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80011c0:	d201      	bcs.n	80011c6 <__udivmoddi4+0x276>
 80011c2:	4589      	cmp	r9, r1
 80011c4:	d81f      	bhi.n	8001206 <__udivmoddi4+0x2b6>
 80011c6:	eba1 0109 	sub.w	r1, r1, r9
 80011ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80011ce:	fb09 f804 	mul.w	r8, r9, r4
 80011d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80011d6:	b292      	uxth	r2, r2
 80011d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011dc:	4542      	cmp	r2, r8
 80011de:	d229      	bcs.n	8001234 <__udivmoddi4+0x2e4>
 80011e0:	18ba      	adds	r2, r7, r2
 80011e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80011e6:	d2c4      	bcs.n	8001172 <__udivmoddi4+0x222>
 80011e8:	4542      	cmp	r2, r8
 80011ea:	d2c2      	bcs.n	8001172 <__udivmoddi4+0x222>
 80011ec:	f1a9 0102 	sub.w	r1, r9, #2
 80011f0:	443a      	add	r2, r7
 80011f2:	e7be      	b.n	8001172 <__udivmoddi4+0x222>
 80011f4:	45f0      	cmp	r8, lr
 80011f6:	d29d      	bcs.n	8001134 <__udivmoddi4+0x1e4>
 80011f8:	ebbe 0302 	subs.w	r3, lr, r2
 80011fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001200:	3801      	subs	r0, #1
 8001202:	46e1      	mov	r9, ip
 8001204:	e796      	b.n	8001134 <__udivmoddi4+0x1e4>
 8001206:	eba7 0909 	sub.w	r9, r7, r9
 800120a:	4449      	add	r1, r9
 800120c:	f1a8 0c02 	sub.w	ip, r8, #2
 8001210:	fbb1 f9fe 	udiv	r9, r1, lr
 8001214:	fb09 f804 	mul.w	r8, r9, r4
 8001218:	e7db      	b.n	80011d2 <__udivmoddi4+0x282>
 800121a:	4673      	mov	r3, lr
 800121c:	e77f      	b.n	800111e <__udivmoddi4+0x1ce>
 800121e:	4650      	mov	r0, sl
 8001220:	e766      	b.n	80010f0 <__udivmoddi4+0x1a0>
 8001222:	4608      	mov	r0, r1
 8001224:	e6fd      	b.n	8001022 <__udivmoddi4+0xd2>
 8001226:	443b      	add	r3, r7
 8001228:	3a02      	subs	r2, #2
 800122a:	e733      	b.n	8001094 <__udivmoddi4+0x144>
 800122c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001230:	443b      	add	r3, r7
 8001232:	e71c      	b.n	800106e <__udivmoddi4+0x11e>
 8001234:	4649      	mov	r1, r9
 8001236:	e79c      	b.n	8001172 <__udivmoddi4+0x222>
 8001238:	eba1 0109 	sub.w	r1, r1, r9
 800123c:	46c4      	mov	ip, r8
 800123e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001242:	fb09 f804 	mul.w	r8, r9, r4
 8001246:	e7c4      	b.n	80011d2 <__udivmoddi4+0x282>

08001248 <__aeabi_idiv0>:
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop

0800124c <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 800124c:	b480      	push	{r7}
 800124e:	b08b      	sub	sp, #44	@ 0x2c
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	ed87 0a00 	vstr	s0, [r7]
    fusionAhrs->gain = gain;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a15      	ldr	r2, [pc, #84]	@ (80012c0 <FusionAhrsInitialise+0x74>)
 800126a:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	625a      	str	r2, [r3, #36]	@ 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <FusionAhrsInitialise+0x78>)
 80012a8:	629a      	str	r2, [r3, #40]	@ 0x28
    fusionAhrs->zeroYawPending = false;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 80012b2:	bf00      	nop
 80012b4:	372c      	adds	r7, #44	@ 0x2c
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	7f7fffff 	.word	0x7f7fffff
 80012c4:	41200000 	.word	0x41200000

080012c8 <FusionAhrsSetMagneticField>:
 * @brief Sets the minimum and maximum valid magnetic field magnitudes in uT.
 * @param fusionAhrs AHRS algorithm structure.
 * @param minimumMagneticField Minimum valid magnetic field magnitude.
 * @param maximumMagneticField Maximum valid magnetic field magnitude.
 */
void FusionAhrsSetMagneticField(FusionAhrs * const fusionAhrs, const float minimumMagneticField, const float maximumMagneticField) {
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80012d4:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionAhrs->minimumMagneticFieldSquared = minimumMagneticField * minimumMagneticField;
 80012d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	edc3 7a01 	vstr	s15, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = maximumMagneticField * maximumMagneticField;
 80012e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8001300:	b490      	push	{r4, r7}
 8001302:	f5ad 6d85 	sub.w	sp, sp, #1064	@ 0x428
 8001306:	af00      	add	r7, sp, #0
 8001308:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800130c:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001310:	6018      	str	r0, [r3, #0]
 8001312:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001316:	f5a3 6181 	sub.w	r1, r3, #1032	@ 0x408
 800131a:	eeb0 5a61 	vmov.f32	s10, s3
 800131e:	eef0 5a42 	vmov.f32	s11, s4
 8001322:	eeb0 6a62 	vmov.f32	s12, s5
 8001326:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800132a:	f2a3 4214 	subw	r2, r3, #1044	@ 0x414
 800132e:	eef0 6a43 	vmov.f32	s13, s6
 8001332:	eeb0 7a63 	vmov.f32	s14, s7
 8001336:	eef0 7a44 	vmov.f32	s15, s8
 800133a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800133e:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8001342:	f507 6085 	add.w	r0, r7, #1064	@ 0x428
 8001346:	f2a0 4024 	subw	r0, r0, #1060	@ 0x424
 800134a:	edc0 4a00 	vstr	s9, [r0]
 800134e:	ed81 0a00 	vstr	s0, [r1]
 8001352:	edc1 0a01 	vstr	s1, [r1, #4]
 8001356:	ed81 1a02 	vstr	s2, [r1, #8]
 800135a:	ed82 5a00 	vstr	s10, [r2]
 800135e:	edc2 5a01 	vstr	s11, [r2, #4]
 8001362:	ed82 6a02 	vstr	s12, [r2, #8]
 8001366:	edc3 6a00 	vstr	s13, [r3]
 800136a:	ed83 7a01 	vstr	s14, [r3, #4]
 800136e:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 8001372:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001376:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001384:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001392:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 800139c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013a0:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	d116      	bne.n	80013e0 <FusionAhrsUpdate+0xe0>
 80013b2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013b6:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80013ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80013be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c6:	d10b      	bne.n	80013e0 <FusionAhrsUpdate+0xe0>
 80013c8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013cc:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80013d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80013d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013dc:	f000 8500 	beq.w	8001de0 <FusionAhrsUpdate+0xae0>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 80013e0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013e4:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	ed93 7a04 	vldr	s14, [r3, #16]
 80013ee:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013f2:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80013fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001400:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001404:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	edd3 6a03 	vldr	s13, [r3, #12]
 800140e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001412:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	edd3 7a05 	vldr	s15, [r3, #20]
 800141c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001420:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8001424:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001428:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800142c:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 8001430:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001434:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	ed93 7a03 	vldr	s14, [r3, #12]
 800143e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001442:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	edd3 7a04 	vldr	s15, [r3, #16]
 800144c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001450:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001454:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	edd3 6a05 	vldr	s13, [r3, #20]
 800145e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001462:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	edd3 7a06 	vldr	s15, [r3, #24]
 800146c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8001474:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001478:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800147c:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8001480:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001484:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	ed93 7a03 	vldr	s14, [r3, #12]
 800148e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001492:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	edd3 7a03 	vldr	s15, [r3, #12]
 800149c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80014a8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014ac:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	edd3 6a06 	vldr	s13, [r3, #24]
 80014b6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014ba:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80014c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 80014cc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014d0:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80014d4:	edc3 7a02 	vstr	s15, [r3, #8]
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 80014d8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014dc:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80014e0:	ed93 7a00 	vldr	s14, [r3]
 80014e4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014e8:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014f8:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80014fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8001500:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001504:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001508:	edd3 7a01 	vldr	s15, [r3, #4]
 800150c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001514:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001518:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800151c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001520:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001524:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001528:	edd3 7a02 	vldr	s15, [r3, #8]
 800152c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001534:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8001538:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 800153c:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154c:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001550:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8001554:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001558:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 800155c:	f207 421c 	addw	r2, r7, #1052	@ 0x41c
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001564:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800156e:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8001572:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001574:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001578:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	105a      	asrs	r2, r3, #1
 8001580:	4bb9      	ldr	r3, [pc, #740]	@ (8001868 <FusionAhrsUpdate+0x568>)
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8001588:	f5a2 726c 	sub.w	r2, r2, #944	@ 0x3b0
 800158c:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 800158e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001598:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 800159c:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 800159e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80015a2:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80015a6:	ed93 7a00 	vldr	s14, [r3]
 80015aa:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80015ba:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80015be:	edd3 7a00 	vldr	s15, [r3]
 80015c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80015ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ce:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80015d2:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015de:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80015e2:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80015e6:	edc3 7a00 	vstr	s15, [r3]
    return y;
 80015ea:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80015ee:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80015f2:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80015f4:	f207 4214 	addw	r2, r7, #1044	@ 0x414
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8001604:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8001606:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800160a:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800160e:	ed93 7a00 	vldr	s14, [r3]
 8001612:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001622:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8001626:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800162a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800162e:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001632:	ed93 7a01 	vldr	s14, [r3, #4]
 8001636:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001642:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001646:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 800164a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800164e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001652:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001656:	ed93 7a02 	vldr	s14, [r3, #8]
 800165a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800165e:	edd3 7a00 	vldr	s15, [r3]
 8001662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001666:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800166a:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 800166e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001672:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001676:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 800167a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800167e:	f5a3 7272 	sub.w	r2, r3, #968	@ 0x3c8
 8001682:	460b      	mov	r3, r1
 8001684:	ca07      	ldmia	r2, {r0, r1, r2}
 8001686:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800168a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800168e:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8001692:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 8001696:	ca07      	ldmia	r2, {r0, r1, r2}
 8001698:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800169c:	bf00      	nop
 800169e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80016a2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016a6:	461c      	mov	r4, r3
 80016a8:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 80016ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80016b4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80016b8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80016c0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80016c4:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80016c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80016cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80016d4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016d8:	edd3 6a02 	vldr	s13, [r3, #8]
 80016dc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80016e0:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80016e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80016e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80016f4:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 80016f8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 80016fc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001700:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001704:	ed93 7a02 	vldr	s14, [r3, #8]
 8001708:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800170c:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001718:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800171c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001720:	edd3 6a00 	vldr	s13, [r3]
 8001724:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001728:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800172c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001738:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800173c:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8001740:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001744:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001748:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001754:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001758:	edd3 7a01 	vldr	s15, [r3, #4]
 800175c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001760:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001764:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001768:	edd3 6a01 	vldr	s13, [r3, #4]
 800176c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001770:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001780:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001784:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8001788:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800178c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001790:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 8001794:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001798:	f5a3 727b 	sub.w	r2, r3, #1004	@ 0x3ec
 800179c:	460b      	mov	r3, r1
 800179e:	ca07      	ldmia	r2, {r0, r1, r2}
 80017a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017a4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80017a8:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 80017ac:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80017b0:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80017b4:	460b      	mov	r3, r1
 80017b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80017b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 80017bc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80017c0:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80017c4:	ed93 7a00 	vldr	s14, [r3]
 80017c8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80017cc:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80017dc:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80017e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80017e4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80017e8:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80017ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80017f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80017fc:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8001800:	edd3 6a02 	vldr	s13, [r3, #8]
 8001804:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001808:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 800180c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 8001818:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800181c:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 8001820:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001824:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	edd3 7a01 	vldr	s15, [r3, #4]
 800182e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183e:	f100 82d0 	bmi.w	8001de2 <FusionAhrsUpdate+0xae2>
 8001842:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001846:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001850:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001854:	ed93 7a00 	vldr	s14, [r3]
 8001858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	f300 82bf 	bgt.w	8001de2 <FusionAhrsUpdate+0xae2>
 8001864:	e002      	b.n	800186c <FusionAhrsUpdate+0x56c>
 8001866:	bf00      	nop
 8001868:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 800186c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001870:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	ed93 7a04 	vldr	s14, [r3, #16]
 800187a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800187e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	edd3 7a05 	vldr	s15, [r3, #20]
 8001888:	ee27 7a27 	vmul.f32	s14, s14, s15
 800188c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001890:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	edd3 6a03 	vldr	s13, [r3, #12]
 800189a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800189e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80018a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80018b0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80018b4:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80018b8:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 80018bc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80018c0:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80018ca:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80018ce:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80018d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80018e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018e4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80018e8:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	edd3 6a05 	vldr	s13, [r3, #20]
 80018f2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80018f6:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001904:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001908:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800190c:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001910:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 8001914:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001918:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001922:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001926:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001934:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001938:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001942:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001946:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001954:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001958:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800195c:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001960:	edc3 7a02 	vstr	s15, [r3, #8]
    result.axis.x = A.y * B.z - A.z * B.y;
 8001964:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001968:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800196c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001970:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001974:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8001978:	edd3 7a02 	vldr	s15, [r3, #8]
 800197c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001980:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001984:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001988:	edd3 6a02 	vldr	s13, [r3, #8]
 800198c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001990:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8001994:	edd3 7a01 	vldr	s15, [r3, #4]
 8001998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800199c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80019a4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80019a8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 80019ac:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80019b0:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80019b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80019b8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80019bc:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80019cc:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80019d0:	edd3 6a00 	vldr	s13, [r3]
 80019d4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80019d8:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80019dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80019e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80019ec:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80019f0:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80019f4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80019f8:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80019fc:	ed93 7a00 	vldr	s14, [r3]
 8001a00:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a04:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8001a08:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a10:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a14:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001a18:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a1c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a20:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a30:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a34:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001a38:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001a3c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a40:	f5a3 7244 	sub.w	r2, r3, #784	@ 0x310
 8001a44:	f507 735c 	add.w	r3, r7, #880	@ 0x370
 8001a48:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a4e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a52:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001a56:	461c      	mov	r4, r3
 8001a58:	f507 735c 	add.w	r3, r7, #880	@ 0x370
 8001a5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001a64:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a68:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001a6c:	ed93 7a00 	vldr	s14, [r3]
 8001a70:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a74:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a80:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a84:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001a88:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a8c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a90:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001a94:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aa0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001aa4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001aa8:	edd3 6a02 	vldr	s13, [r3, #8]
 8001aac:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001ab0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001ab4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ab8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac0:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8001ac4:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001ac8:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001adc:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8001ae0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001ae4:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001ae8:	f207 420c 	addw	r2, r7, #1036	@ 0x40c
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001af0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001afa:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001afe:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001b00:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b04:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	105a      	asrs	r2, r3, #1
 8001b0c:	4bb2      	ldr	r3, [pc, #712]	@ (8001dd8 <FusionAhrsUpdate+0xad8>)
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8001b14:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 8001b18:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001b1a:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b24:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001b28:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001b2a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b2e:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001b32:	ed93 7a00 	vldr	s14, [r3]
 8001b36:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b42:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b46:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b52:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001b56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b5a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b5e:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b6e:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001b72:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001b76:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b7a:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001b7e:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001b80:	f207 4204 	addw	r2, r7, #1028	@ 0x404
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f507 6280 	add.w	r2, r7, #1024	@ 0x400
 8001b90:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8001b92:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b96:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001b9a:	ed93 7a00 	vldr	s14, [r3]
 8001b9e:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001baa:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001bae:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8001bb2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001bb6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001bba:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001bbe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bc2:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bce:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001bd2:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8001bd6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001bda:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001bde:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001be2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001be6:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001bf6:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8001bfa:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001bfe:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c02:	f5a3 7252 	sub.w	r2, r3, #840	@ 0x348
 8001c06:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001c0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c10:	f507 7359 	add.w	r3, r7, #868	@ 0x364
 8001c14:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8001c18:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001c1e:	bf00      	nop
 8001c20:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c24:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c28:	461c      	mov	r4, r3
 8001c2a:	f507 7359 	add.w	r3, r7, #868	@ 0x364
 8001c2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001c36:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c3a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c42:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c46:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001c4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c52:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c56:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c5e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c62:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001c66:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c72:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c76:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001c7e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c82:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c86:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c8a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c8e:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c9e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ca2:	edd3 6a00 	vldr	s13, [r3]
 8001ca6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001caa:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001cae:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cba:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001cbe:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8001cc2:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001cc6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001cca:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001cce:	ed93 7a00 	vldr	s14, [r3]
 8001cd2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001cd6:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001cda:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001ce6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001cea:	edd3 6a01 	vldr	s13, [r3, #4]
 8001cee:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001cf2:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d02:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d06:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8001d0a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001d0e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d12:	f5a3 725b 	sub.w	r2, r3, #876	@ 0x36c
 8001d16:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 8001d1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001d20:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d24:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d28:	461c      	mov	r4, r3
 8001d2a:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 8001d2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001d36:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d3a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d3e:	ed93 7a00 	vldr	s14, [r3]
 8001d42:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d46:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d52:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d56:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8001d5a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001d5e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d62:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d66:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d6a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d6e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d72:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d7e:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8001d82:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001d86:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d8a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d92:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d96:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001da6:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8001daa:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001dae:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001db2:	f5a3 7264 	sub.w	r2, r3, #912	@ 0x390
 8001db6:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001dba:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001dc0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001dc4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001dc8:	461c      	mov	r4, r3
 8001dca:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001dd6:	e004      	b.n	8001de2 <FusionAhrsUpdate+0xae2>
 8001dd8:	5f3759df 	.word	0x5f3759df
 8001ddc:	3c8efa35 	.word	0x3c8efa35
            break;
 8001de0:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 8001de2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001de6:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d107      	bne.n	8001e0a <FusionAhrsUpdate+0xb0a>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 8001dfa:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001dfe:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 8001e0a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e0e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f207 4224 	addw	r2, r7, #1060	@ 0x424
 8001e1a:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 8001e1c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e20:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001e2a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e2e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e40:	dd2f      	ble.n	8001ea2 <FusionAhrsUpdate+0xba2>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 8001e42:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e46:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001e50:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e54:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	edd3 7a00 	vldr	s15, [r3]
 8001e5e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001e62:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e66:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e6a:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e76:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 8001e7a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e82:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e86:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        feedbackGain = fusionAhrs->rampedGain;
 8001e90:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e94:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	f207 4224 	addw	r2, r7, #1060	@ 0x424
 8001ea0:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 8001ea2:	ed1f 7a32 	vldr	s14, [pc, #-200]	@ 8001ddc <FusionAhrsUpdate+0xadc>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 8001ea6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	edc7 7afa 	vstr	s15, [r7, #1000]	@ 0x3e8
    result.axis.x = vector.axis.x * scalar;
 8001eb2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001eb6:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	edd7 7afa 	vldr	s15, [r7, #1000]	@ 0x3e8
 8001ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001eca:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ece:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001ed2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001ed6:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001eda:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ede:	edd7 7afa 	vldr	s15, [r7, #1000]	@ 0x3e8
 8001ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001eea:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001eee:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001ef2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001ef6:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001efa:	ed93 7a02 	vldr	s14, [r3, #8]
 8001efe:	edd7 7afa 	vldr	s15, [r7, #1000]	@ 0x3e8
 8001f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f06:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f0a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f0e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001f12:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f16:	f5a3 72d6 	sub.w	r2, r3, #428	@ 0x1ac
 8001f1a:	f507 7377 	add.w	r3, r7, #988	@ 0x3dc
 8001f1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f24:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f28:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f2c:	461c      	mov	r4, r3
 8001f2e:	f507 7377 	add.w	r3, r7, #988	@ 0x3dc
 8001f32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f3a:	f207 4324 	addw	r3, r7, #1060	@ 0x424
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    result.axis.x = vector.axis.x * scalar;
 8001f44:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f48:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f4c:	ed93 7a00 	vldr	s14, [r3]
 8001f50:	edd7 7afb 	vldr	s15, [r7, #1004]	@ 0x3ec
 8001f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f58:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f5c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001f60:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001f64:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f68:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f70:	edd7 7afb 	vldr	s15, [r7, #1004]	@ 0x3ec
 8001f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f78:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f7c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001f80:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001f84:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f88:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f90:	edd7 7afb 	vldr	s15, [r7, #1004]	@ 0x3ec
 8001f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f98:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f9c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001fa0:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001fa4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001fa8:	f5a3 72e2 	sub.w	r2, r3, #452	@ 0x1c4
 8001fac:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001fb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001fb6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001fba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001fbe:	461c      	mov	r4, r3
 8001fc0:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001fc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001fcc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001fd0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001fd4:	ed93 7a00 	vldr	s14, [r3]
 8001fd8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001fdc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001fec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ff0:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001ff4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001ff8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ffc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002000:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002004:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002008:	edd3 7a01 	vldr	s15, [r3, #4]
 800200c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002010:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002014:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002018:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 800201c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002020:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002024:	ed93 7a02 	vldr	s14, [r3, #8]
 8002028:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800202c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002030:	edd3 7a02 	vldr	s15, [r3, #8]
 8002034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002038:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800203c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002040:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002044:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002048:	f5a3 72f4 	sub.w	r2, r3, #488	@ 0x1e8
 800204c:	f507 7371 	add.w	r3, r7, #964	@ 0x3c4
 8002050:	ca07      	ldmia	r2, {r0, r1, r2}
 8002052:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002056:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800205a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800205e:	461c      	mov	r4, r3
 8002060:	f507 7371 	add.w	r3, r7, #964	@ 0x3c4
 8002064:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002068:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800206c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002070:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
    result.axis.x = vector.axis.x * scalar;
 800207a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800207e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002082:	ed93 7a00 	vldr	s14, [r3]
 8002086:	edd7 7afc 	vldr	s15, [r7, #1008]	@ 0x3f0
 800208a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002092:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002096:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800209a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800209e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80020a6:	edd7 7afc 	vldr	s15, [r7, #1008]	@ 0x3f0
 80020aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ae:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80020b2:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80020b6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80020ba:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80020be:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80020c6:	edd7 7afc 	vldr	s15, [r7, #1008]	@ 0x3f0
 80020ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ce:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80020d2:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80020d6:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80020da:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80020de:	f5a3 7200 	sub.w	r2, r3, #512	@ 0x200
 80020e2:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80020e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80020e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80020ec:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80020f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020f4:	461c      	mov	r4, r3
 80020f6:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80020fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002102:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002106:	f5a3 7207 	sub.w	r2, r3, #540	@ 0x21c
 800210a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800210e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4614      	mov	r4, r2
 8002116:	330c      	adds	r3, #12
 8002118:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800211a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 800211e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002122:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002126:	edd3 7a01 	vldr	s15, [r3, #4]
 800212a:	eeb1 7a67 	vneg.f32	s14, s15
 800212e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002132:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002142:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002146:	edd3 6a02 	vldr	s13, [r3, #8]
 800214a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800214e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002152:	edd3 7a01 	vldr	s15, [r3, #4]
 8002156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800215a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800215e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002162:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002166:	edd3 6a03 	vldr	s13, [r3, #12]
 800216a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800216e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002172:	edd3 7a02 	vldr	s15, [r3, #8]
 8002176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800217a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002182:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8002186:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 800218a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800218e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002192:	ed93 7a00 	vldr	s14, [r3]
 8002196:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800219a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80021aa:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80021ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80021b2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80021b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80021be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021c6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80021ca:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80021ce:	edd3 6a03 	vldr	s13, [r3, #12]
 80021d2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80021d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021da:	edd3 7a01 	vldr	s15, [r3, #4]
 80021de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80021ea:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80021ee:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 80021f2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80021f6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80021fa:	ed93 7a00 	vldr	s14, [r3]
 80021fe:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002202:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002206:	edd3 7a01 	vldr	s15, [r3, #4]
 800220a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800220e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002212:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002216:	edd3 6a01 	vldr	s13, [r3, #4]
 800221a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800221e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002222:	edd3 7a02 	vldr	s15, [r3, #8]
 8002226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800222e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002232:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002236:	edd3 6a03 	vldr	s13, [r3, #12]
 800223a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800223e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800224a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800224e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002252:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8002256:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 800225a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800225e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002262:	ed93 7a00 	vldr	s14, [r3]
 8002266:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800226a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800226e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002272:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002276:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800227a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800227e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002282:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002286:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800228a:	edd3 7a01 	vldr	s15, [r3, #4]
 800228e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002292:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002296:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800229a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800229e:	edd3 6a02 	vldr	s13, [r3, #8]
 80022a2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80022a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80022ba:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80022be:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 80022c2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80022c6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80022ca:	f507 746a 	add.w	r4, r7, #936	@ 0x3a8
 80022ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80022d4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80022d8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022dc:	461c      	mov	r4, r3
 80022de:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80022e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80022e8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80022ec:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 80022f0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80022f4:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4614      	mov	r4, r2
 80022fc:	330c      	adds	r3, #12
 80022fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 8002304:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002308:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800230c:	ed93 7a00 	vldr	s14, [r3]
 8002310:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002314:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002318:	edd3 7a00 	vldr	s15, [r3]
 800231c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002320:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002324:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8002328:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 800232c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002330:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002334:	ed93 7a01 	vldr	s14, [r3, #4]
 8002338:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800233c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002340:	edd3 7a01 	vldr	s15, [r3, #4]
 8002344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002348:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800234c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8002350:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 8002354:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002358:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800235c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002360:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002364:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002368:	edd3 7a02 	vldr	s15, [r3, #8]
 800236c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002370:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002374:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8002378:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 800237c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002380:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002384:	ed93 7a03 	vldr	s14, [r3, #12]
 8002388:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800238c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002390:	edd3 7a03 	vldr	s15, [r3, #12]
 8002394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002398:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800239c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80023a0:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 80023a4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80023a8:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80023ac:	f507 7466 	add.w	r4, r7, #920	@ 0x398
 80023b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80023b6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80023ba:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80023be:	461c      	mov	r4, r3
 80023c0:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 80023c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 80023ca:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80023ce:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 80023d8:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 80023dc:	f103 040c 	add.w	r4, r3, #12
 80023e0:	4613      	mov	r3, r2
 80023e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80023e8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80023ec:	f5a3 721f 	sub.w	r2, r3, #636	@ 0x27c
 80023f0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80023f4:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4614      	mov	r4, r2
 80023fc:	330c      	adds	r3, #12
 80023fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8002404:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002408:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800240c:	ed93 7a00 	vldr	s14, [r3]
 8002410:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002414:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002420:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002424:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002428:	edd3 6a01 	vldr	s13, [r3, #4]
 800242c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002430:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002434:	edd3 7a01 	vldr	s15, [r3, #4]
 8002438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002440:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002444:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002448:	edd3 6a02 	vldr	s13, [r3, #8]
 800244c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002450:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002454:	edd3 7a02 	vldr	s15, [r3, #8]
 8002458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800245c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002460:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002464:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002468:	edd3 6a03 	vldr	s13, [r3, #12]
 800246c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002470:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002474:	edd3 7a03 	vldr	s15, [r3, #12]
 8002478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800247c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002480:	edc7 7aff 	vstr	s15, [r7, #1020]	@ 0x3fc
    float halfx = 0.5f * x;
 8002484:	edd7 7aff 	vldr	s15, [r7, #1020]	@ 0x3fc
 8002488:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800248c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002490:	edc7 7afe 	vstr	s15, [r7, #1016]	@ 0x3f8
    float y = x;
 8002494:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002498:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800249c:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 80024a0:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 80024a2:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80024ac:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80024b0:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 80024b2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80024b6:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	105a      	asrs	r2, r3, #1
 80024be:	4bc0      	ldr	r3, [pc, #768]	@ (80027c0 <FusionAhrsUpdate+0x14c0>)
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 80024c6:	f5a2 7229 	sub.w	r2, r2, #676	@ 0x2a4
 80024ca:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80024cc:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80024d6:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80024da:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80024dc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80024e0:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80024e4:	ed93 7a00 	vldr	s14, [r3]
 80024e8:	edd7 7afe 	vldr	s15, [r7, #1016]	@ 0x3f8
 80024ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024f0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80024f4:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80024f8:	edd3 7a00 	vldr	s15, [r3]
 80024fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002500:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002504:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002508:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800250c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002518:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800251c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002520:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8002524:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002528:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800252c:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800252e:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8002532:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002536:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800253a:	ed93 7a00 	vldr	s14, [r3]
 800253e:	edd7 7afd 	vldr	s15, [r7, #1012]	@ 0x3f4
 8002542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002546:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800254a:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800254e:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8002552:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002556:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800255a:	ed93 7a01 	vldr	s14, [r3, #4]
 800255e:	edd7 7afd 	vldr	s15, [r7, #1012]	@ 0x3f4
 8002562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002566:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800256a:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800256e:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8002572:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002576:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800257a:	ed93 7a02 	vldr	s14, [r3, #8]
 800257e:	edd7 7afd 	vldr	s15, [r7, #1012]	@ 0x3f4
 8002582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002586:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800258a:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800258e:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8002592:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002596:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800259a:	ed93 7a03 	vldr	s14, [r3, #12]
 800259e:	edd7 7afd 	vldr	s15, [r7, #1012]	@ 0x3f4
 80025a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80025aa:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80025ae:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 80025b2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80025b6:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80025ba:	f507 7462 	add.w	r4, r7, #904	@ 0x388
 80025be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80025c4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80025c8:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80025cc:	461c      	mov	r4, r3
 80025ce:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80025d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 80025d8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80025dc:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 80025e6:	f5a2 7223 	sub.w	r2, r2, #652	@ 0x28c
 80025ea:	f103 040c 	add.w	r4, r3, #12
 80025ee:	4613      	mov	r3, r2
 80025f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 80025f6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80025fa:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	ed93 7a04 	vldr	s14, [r3, #16]
 8002604:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002608:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002616:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800261a:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	edd3 6a03 	vldr	s13, [r3, #12]
 8002624:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002628:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 800263e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002642:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002646:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 800264a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800264e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	ed93 7a03 	vldr	s14, [r3, #12]
 8002658:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800265c:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	edd3 7a04 	vldr	s15, [r3, #16]
 8002666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800266a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800266e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	edd3 6a05 	vldr	s13, [r3, #20]
 8002678:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800267c:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	edd3 7a06 	vldr	s15, [r3, #24]
 8002686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800268a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268e:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8002692:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002696:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800269a:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 800269e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80026a2:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80026ac:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80026b0:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80026ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80026c2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026c6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80026ca:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	edd3 6a06 	vldr	s13, [r3, #24]
 80026d4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80026d8:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	edd3 7a06 	vldr	s15, [r3, #24]
 80026e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 80026ee:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80026f2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80026f6:	edc3 7a02 	vstr	s15, [r3, #8]
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80026fa:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80026fe:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8002702:	ed93 7a00 	vldr	s14, [r3]
 8002706:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800270a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002716:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800271a:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 800271e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002722:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002726:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800272a:	ed93 7a01 	vldr	s14, [r3, #4]
 800272e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002732:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002736:	edd3 7a01 	vldr	s15, [r3, #4]
 800273a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800273e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002742:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8002746:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 800274a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800274e:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8002752:	ed93 7a02 	vldr	s14, [r3, #8]
 8002756:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800275a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800275e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002766:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800276a:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 800276e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002772:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002776:	f5a3 7235 	sub.w	r2, r3, #724	@ 0x2d4
 800277a:	f507 735f 	add.w	r3, r7, #892	@ 0x37c
 800277e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002780:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002784:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002788:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 800278c:	461c      	mov	r4, r3
 800278e:	f507 735f 	add.w	r3, r7, #892	@ 0x37c
 8002792:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002796:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 800279a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800279e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 80027a8:	f5a2 7232 	sub.w	r2, r2, #712	@ 0x2c8
 80027ac:	331c      	adds	r3, #28
 80027ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80027b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 80027b4:	bf00      	nop
 80027b6:	f507 6785 	add.w	r7, r7, #1064	@ 0x428
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc90      	pop	{r4, r7}
 80027be:	4770      	bx	lr
 80027c0:	5f3759df 	.word	0x5f3759df

080027c4 <FusionAhrsUpdateWithoutMagnetometer>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdateWithoutMagnetometer(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const float samplePeriod) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	@ 0x30
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	61f8      	str	r0, [r7, #28]
 80027cc:	eeb0 5a40 	vmov.f32	s10, s0
 80027d0:	eef0 5a60 	vmov.f32	s11, s1
 80027d4:	eeb0 6a41 	vmov.f32	s12, s2
 80027d8:	eef0 6a61 	vmov.f32	s13, s3
 80027dc:	eeb0 7a42 	vmov.f32	s14, s4
 80027e0:	eef0 7a62 	vmov.f32	s15, s5
 80027e4:	ed87 3a00 	vstr	s6, [r7]
 80027e8:	ed87 5a04 	vstr	s10, [r7, #16]
 80027ec:	edc7 5a05 	vstr	s11, [r7, #20]
 80027f0:	ed87 6a06 	vstr	s12, [r7, #24]
 80027f4:	edc7 6a01 	vstr	s13, [r7, #4]
 80027f8:	ed87 7a02 	vstr	s14, [r7, #8]
 80027fc:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(fusionAhrs, gyroscope, accelerometer, FUSION_VECTOR3_ZERO, samplePeriod);
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002812:	ed97 3a09 	vldr	s6, [r7, #36]	@ 0x24
 8002816:	edd7 3a0a 	vldr	s7, [r7, #40]	@ 0x28
 800281a:	ed97 4a0b 	vldr	s8, [r7, #44]	@ 0x2c
 800281e:	ed97 5a01 	vldr	s10, [r7, #4]
 8002822:	edd7 5a02 	vldr	s11, [r7, #8]
 8002826:	ed97 6a03 	vldr	s12, [r7, #12]
 800282a:	edd7 6a04 	vldr	s13, [r7, #16]
 800282e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002832:	edd7 7a06 	vldr	s15, [r7, #24]
 8002836:	edd7 4a00 	vldr	s9, [r7]
 800283a:	eef0 1a45 	vmov.f32	s3, s10
 800283e:	eeb0 2a65 	vmov.f32	s4, s11
 8002842:	eef0 2a46 	vmov.f32	s5, s12
 8002846:	eeb0 0a66 	vmov.f32	s0, s13
 800284a:	eef0 0a47 	vmov.f32	s1, s14
 800284e:	eeb0 1a67 	vmov.f32	s2, s15
 8002852:	69f8      	ldr	r0, [r7, #28]
 8002854:	f7fe fd54 	bl	8001300 <FusionAhrsUpdate>

    // Zero yaw once initialisation complete
    if (FusionAhrsIsInitialising(fusionAhrs) == true) {
 8002858:	69f8      	ldr	r0, [r7, #28]
 800285a:	f000 f862 	bl	8002922 <FusionAhrsIsInitialising>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d004      	beq.n	800286e <FusionAhrsUpdateWithoutMagnetometer+0xaa>
        fusionAhrs->zeroYawPending = true;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        if (fusionAhrs->zeroYawPending == true) {
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
            fusionAhrs->zeroYawPending = false;
        }
    }
}
 800286c:	e00d      	b.n	800288a <FusionAhrsUpdateWithoutMagnetometer+0xc6>
        if (fusionAhrs->zeroYawPending == true) {
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <FusionAhrsUpdateWithoutMagnetometer+0xc6>
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
 8002878:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002894 <FusionAhrsUpdateWithoutMagnetometer+0xd0>
 800287c:	69f8      	ldr	r0, [r7, #28]
 800287e:	f000 f869 	bl	8002954 <FusionAhrsSetYaw>
            fusionAhrs->zeroYawPending = false;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800288a:	bf00      	nop
 800288c:	3730      	adds	r7, #48	@ 0x30
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	00000000 	.word	0x00000000

08002898 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 8002898:	b490      	push	{r4, r7}
 800289a:	b096      	sub	sp, #88	@ 0x58
 800289c:	af00      	add	r7, sp, #0
 800289e:	6178      	str	r0, [r7, #20]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80028a6:	330c      	adds	r3, #12
 80028a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 80028ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b0:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 80028b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80028b6:	eef1 7a67 	vneg.f32	s15, s15
 80028ba:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 80028be:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80028c2:	eef1 7a67 	vneg.f32	s15, s15
 80028c6:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 80028ca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80028ce:	eef1 7a67 	vneg.f32	s15, s15
 80028d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return conjugate;
 80028d6:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 80028da:	f107 0318 	add.w	r3, r7, #24
 80028de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028e4:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80028e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 80028f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80028f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028fa:	ee06 0a10 	vmov	s12, r0
 80028fe:	ee06 1a90 	vmov	s13, r1
 8002902:	ee07 2a10 	vmov	s14, r2
 8002906:	ee07 3a90 	vmov	s15, r3
}
 800290a:	eeb0 0a46 	vmov.f32	s0, s12
 800290e:	eef0 0a66 	vmov.f32	s1, s13
 8002912:	eeb0 1a47 	vmov.f32	s2, s14
 8002916:	eef0 1a67 	vmov.f32	s3, s15
 800291a:	3758      	adds	r7, #88	@ 0x58
 800291c:	46bd      	mov	sp, r7
 800291e:	bc90      	pop	{r4, r7}
 8002920:	4770      	bx	lr

08002922 <FusionAhrsIsInitialising>:
/**
 * @brief Returns true while the AHRS algorithm is initialising.
 * @param fusionAhrs AHRS algorithm structure.
 * @return True while the AHRS algorithm is initialising.
 */
bool FusionAhrsIsInitialising(const FusionAhrs * const fusionAhrs) {
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
    return fusionAhrs->rampedGain > fusionAhrs->gain;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293e:	bfcc      	ite	gt
 8002940:	2301      	movgt	r3, #1
 8002942:	2300      	movle	r3, #0
 8002944:	b2db      	uxtb	r3, r3
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <FusionAhrsSetYaw>:
 * AHRS algorithm.  This function can be used to reset drift in yaw when the
 * AHRS algorithm is being used without a magnetometer.
 * @param fusionAhrs AHRS algorithm structure.
 * @param yaw Yaw angle in degrees.
 */
void FusionAhrsSetYaw(FusionAhrs * const fusionAhrs, const float yaw) {
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b0af      	sub	sp, #188	@ 0xbc
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	ed87 0a00 	vstr	s0, [r7]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8002966:	330c      	adds	r3, #12
 8002968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800296a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800296e:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002972:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002976:	ee27 7a27 	vmul.f32	s14, s14, s15
 800297a:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800297e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298a:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 800298e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002996:	ee37 7a27 	vadd.f32	s14, s14, s15
 800299a:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 800299e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80029a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029aa:	eeb0 0a67 	vmov.f32	s0, s15
 80029ae:	f00d f961 	bl	800fc74 <sqrtf>
 80029b2:	eeb0 7a40 	vmov.f32	s14, s0
 80029b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029be:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 80029c2:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80029c6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80029ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ce:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 80029d2:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80029d6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80029da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029de:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 80029e2:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80029e6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80029ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ee:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 80029f2:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80029f6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80029fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fe:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    return normalisedQuaternion;
 8002a02:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 8002a06:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a10:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002a14:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002a18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code
    fusionAhrs->quaternion = FusionQuaternionNormalise(fusionAhrs->quaternion); // quaternion must be normalised accurately (approximation not sufficient)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f103 040c 	add.w	r4, r3, #12
 8002a24:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002a28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float inverseYaw = atan2f(Q.x * Q.y + Q.w * Q.z, Q.w * Q.w - 0.5f + Q.x * Q.x); // Euler angle of conjugate
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	edd3 6a03 	vldr	s13, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a4e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a66:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	edd3 6a04 	vldr	s13, [r3, #16]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7e:	eef0 0a67 	vmov.f32	s1, s15
 8002a82:	eeb0 0a46 	vmov.f32	s0, s12
 8002a86:	f00d f8f3 	bl	800fc70 <atan2f>
 8002a8a:	ed87 0a2d 	vstr	s0, [r7, #180]	@ 0xb4
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    return degrees * ((float) M_PI / 180.0f);
 8002a94:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8002a98:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8002c28 <FusionAhrsSetYaw+0x2d4>
 8002a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
    const float halfInverseYawMinusOffset = 0.5f * (inverseYaw - FusionDegreesToRadians(yaw));
 8002aa0:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab0:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    const FusionQuaternion inverseYawQuaternion = {
        .element.w = cosf(halfInverseYawMinusOffset),
 8002ab4:	ed97 0a2c 	vldr	s0, [r7, #176]	@ 0xb0
 8002ab8:	f00d f8fa 	bl	800fcb0 <cosf>
 8002abc:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion inverseYawQuaternion = {
 8002ac0:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        .element.x = 0.0f,
        .element.y = 0.0f,
        .element.z = -1.0f * sinf(halfInverseYawMinusOffset),
 8002ad2:	ed97 0a2c 	vldr	s0, [r7, #176]	@ 0xb0
 8002ad6:	f00d f937 	bl	800fd48 <sinf>
 8002ada:	eef0 7a40 	vmov.f32	s15, s0
 8002ade:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion inverseYawQuaternion = {
 8002ae2:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002aec:	330c      	adds	r3, #12
 8002aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 8002af4:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002af8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002afc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b00:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8002b04:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b10:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8002b14:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002b18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b20:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8002b24:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b30:	edc7 7a02 	vstr	s15, [r7, #8]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 8002b34:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002b38:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b40:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8002b44:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b50:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8002b54:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b60:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8002b64:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b70:	edc7 7a03 	vstr	s15, [r7, #12]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 8002b74:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002b78:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b80:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8002b84:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002b88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b90:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8002b94:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ba0:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8002ba4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb0:	edc7 7a04 	vstr	s15, [r7, #16]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 8002bb4:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002bb8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc0:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8002bc4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd0:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8002bd4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002be0:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8002be4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002be8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf0:	edc7 7a05 	vstr	s15, [r7, #20]
    return result;
 8002bf4:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8002bf8:	f107 0308 	add.w	r3, r7, #8
 8002bfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002c02:	f107 0418 	add.w	r4, r7, #24
 8002c06:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };
    fusionAhrs->quaternion = FusionQuaternionMultiply(inverseYawQuaternion, fusionAhrs->quaternion);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f103 040c 	add.w	r4, r3, #12
 8002c16:	f107 0318 	add.w	r3, r7, #24
 8002c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q // undefine shorthand label
}
 8002c20:	bf00      	nop
 8002c22:	37bc      	adds	r7, #188	@ 0xbc
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd90      	pop	{r4, r7, pc}
 8002c28:	3c8efa35 	.word	0x3c8efa35
 8002c2c:	00000000 	.word	0x00000000

08002c30 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c3c:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionBias->threshold = threshold;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc81 	bl	8000558 <__aeabi_f2d>
 8002c56:	a312      	add	r3, pc, #72	@ (adr r3, 8002ca0 <FusionBiasInitialise+0x70>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f7fd fcd4 	bl	8000608 <__aeabi_dmul>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	f7fd ffc6 	bl	8000bf8 <__aeabi_d2f>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	609a      	str	r2, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	615a      	str	r2, [r3, #20]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	619a      	str	r2, [r3, #24]
}
 8002c92:	bf00      	nop
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	f3af 8000 	nop.w
 8002ca0:	8c0eff43 	.word	0x8c0eff43
 8002ca4:	3fc015bf 	.word	0x3fc015bf

08002ca8 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 8002ca8:	b480      	push	{r7}
 8002caa:	b0b5      	sub	sp, #212	@ 0xd4
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	61f8      	str	r0, [r7, #28]
 8002cb0:	eef0 6a40 	vmov.f32	s13, s0
 8002cb4:	eeb0 7a60 	vmov.f32	s14, s1
 8002cb8:	eef0 7a41 	vmov.f32	s15, s2
 8002cbc:	edc7 6a04 	vstr	s13, [r7, #16]
 8002cc0:	ed87 7a05 	vstr	s14, [r7, #20]
 8002cc4:	edc7 7a06 	vstr	s15, [r7, #24]
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002cce:	3210      	adds	r2, #16
 8002cd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002cd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cda:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002ce6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cea:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002cf6:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cfa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d02:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    return result;
 8002d06:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002d0a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002d0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d14:	f107 0310 	add.w	r3, r7, #16
 8002d18:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8002d1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8002d22:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d26:	eeb0 7ae7 	vabs.f32	s14, s15
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	edd3 7a00 	vldr	s15, [r3]
 8002d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d38:	dc17      	bgt.n	8002d6a <FusionBiasUpdate+0xc2>
 8002d3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d3e:	eeb0 7ae7 	vabs.f32	s14, s15
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	edd3 7a00 	vldr	s15, [r3]
 8002d48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d50:	dc0b      	bgt.n	8002d6a <FusionBiasUpdate+0xc2>
 8002d52:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d56:	eeb0 7ae7 	vabs.f32	s14, s15
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d68:	dd0b      	ble.n	8002d82 <FusionBiasUpdate+0xda>
        fusionBias->stationaryTimer = 0.0f;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	60da      	str	r2, [r3, #12]
        return gyroscope;
 8002d72:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002d76:	f107 0210 	add.w	r2, r7, #16
 8002d7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d80:	e081      	b.n	8002e86 <FusionBiasUpdate+0x1de>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d88:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d94:	d512      	bpl.n	8002dbc <FusionBiasUpdate+0x114>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 8002dac:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002db0:	f107 0210 	add.w	r2, r7, #16
 8002db4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002db6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002dba:	e064      	b.n	8002e86 <FusionBiasUpdate+0x1de>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    result.axis.x = vector.axis.x * scalar;
 8002dc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002dc8:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8002dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd0:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    result.axis.y = vector.axis.y * scalar;
 8002dd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dd8:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8002ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de0:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    result.axis.z = vector.axis.z * scalar;
 8002de4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002de8:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8002dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df0:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
    return result;
 8002df4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002df8:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8002dfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e02:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e06:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8002e0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e16:	3210      	adds	r2, #16
 8002e18:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8002e1e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002e22:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e2a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8002e2e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002e32:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8002e3e:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002e42:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8002e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    return result;
 8002e4e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002e52:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002e56:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e60:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8002e64:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3310      	adds	r3, #16
 8002e6e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002e72:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 8002e78:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002e7c:	f107 0210 	add.w	r2, r7, #16
 8002e80:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8002e86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e92:	ee06 1a90 	vmov	s13, r1
 8002e96:	ee07 2a10 	vmov	s14, r2
 8002e9a:	ee07 3a90 	vmov	s15, r3
 8002e9e:	eeb0 0a66 	vmov.f32	s0, s13
 8002ea2:	eef0 0a47 	vmov.f32	s1, s14
 8002ea6:	eeb0 1a67 	vmov.f32	s2, s15
 8002eaa:	37d4      	adds	r7, #212	@ 0xd4
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <initFusionAHRS>:
};

//


void initFusionAHRS(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float sample_S){
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	ed87 0a00 	vstr	s0, [r7]

	DataStruct->samplePeriod = sample_S;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	60da      	str	r2, [r3, #12]
	
	// Initialise gyroscope bias correction algorithm
    FusionBiasInitialise(fusionBias, 0.5f, DataStruct->samplePeriod); // stationary threshold = 0.5 degrees per second
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ed0:	eef0 0a67 	vmov.f32	s1, s15
 8002ed4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff fea9 	bl	8002c30 <FusionBiasInitialise>

    // Initialise AHRS algorithm
    FusionAhrsInitialise(fusionAhrs, 0.5f); // gain = 0.5
 8002ede:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8002ee2:	68b8      	ldr	r0, [r7, #8]
 8002ee4:	f7fe f9b2 	bl	800124c <FusionAhrsInitialise>

    // Set optional magnetic field limits
    FusionAhrsSetMagneticField(fusionAhrs, 20.0f, 70.0f); // valid magnetic field range = 20 uT to 70 uT
 8002ee8:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8002f00 <initFusionAHRS+0x4c>
 8002eec:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8002ef0:	68b8      	ldr	r0, [r7, #8]
 8002ef2:	f7fe f9e9 	bl	80012c8 <FusionAhrsSetMagneticField>
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	428c0000 	.word	0x428c0000

08002f04 <getFusionAHRS_6DoF>:
	DataStruct->YAW = eulerAngles.angle.yaw;
	DataStruct->PITCH = eulerAngles.angle.pitch;
	DataStruct->ROLL = eulerAngles.angle.roll;
}

void getFusionAHRS_6DoF(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float accX, float accY, float accZ, float gyrX, float gyrY, float gyrZ) {
 8002f04:	b5b0      	push	{r4, r5, r7, lr}
 8002f06:	f5ad 7d32 	sub.w	sp, sp, #712	@ 0x2c8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f10:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002f14:	6018      	str	r0, [r3, #0]
 8002f16:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f1a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002f1e:	6019      	str	r1, [r3, #0]
 8002f20:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f24:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f2e:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002f32:	ed83 0a00 	vstr	s0, [r3]
 8002f36:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f3a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002f3e:	edc3 0a00 	vstr	s1, [r3]
 8002f42:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f46:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8002f4a:	ed83 1a00 	vstr	s2, [r3]
 8002f4e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f52:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8002f56:	edc3 1a00 	vstr	s3, [r3]
 8002f5a:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f5e:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8002f62:	ed83 2a00 	vstr	s4, [r3]
 8002f66:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f6a:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8002f6e:	edc3 2a00 	vstr	s5, [r3]
	
	// Calibrate gyroscope
	FusionVector3 uncalibratedGyroscope = {
 8002f72:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f76:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8002f80:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f84:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8002f8e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f92:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		.axis.x = gyrX, /* replace this value with actual gyroscope x axis measurement in lsb */
		.axis.y = gyrY, /* replace this value with actual gyroscope y axis measurement in lsb */
		.axis.z = gyrZ, /* replace this value with actual gyroscope z axis measurement in lsb */
	};
	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 8002f9c:	4bea      	ldr	r3, [pc, #936]	@ (8003348 <getFusionAHRS_6DoF+0x444>)
 8002f9e:	f507 74e8 	add.w	r4, r7, #464	@ 0x1d0
 8002fa2:	461d      	mov	r5, r3
 8002fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fac:	682b      	ldr	r3, [r5, #0]
 8002fae:	6023      	str	r3, [r4, #0]
 8002fb0:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002fc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002fd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002fde:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002fe2:	4ada      	ldr	r2, [pc, #872]	@ (800334c <getFusionAHRS_6DoF+0x448>)
 8002fe4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fe6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002fea:	ed97 7a80 	vldr	s14, [r7, #512]	@ 0x200
 8002fee:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ffe:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003002:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003006:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 800300a:	ed97 7a81 	vldr	s14, [r7, #516]	@ 0x204
 800300e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003016:	edd3 7a01 	vldr	s15, [r3, #4]
 800301a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800301e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003022:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003026:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 800302a:	ed97 7a82 	vldr	s14, [r7, #520]	@ 0x208
 800302e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003036:	edd3 7a02 	vldr	s15, [r3, #8]
 800303a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800303e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003042:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003046:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800304a:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800304e:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 8003052:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003056:	ca07      	ldmia	r2, {r0, r1, r2}
 8003058:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800305c:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003060:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8003064:	ca07      	ldmia	r2, {r0, r1, r2}
 8003066:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 800306a:	ed97 7aa8 	vldr	s14, [r7, #672]	@ 0x2a0
 800306e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003072:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003082:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003086:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 800308a:	ed97 7aa9 	vldr	s14, [r7, #676]	@ 0x2a4
 800308e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003092:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003096:	edd3 7a01 	vldr	s15, [r3, #4]
 800309a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80030a2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80030a6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 80030aa:	ed97 7aaa 	vldr	s14, [r7, #680]	@ 0x2a8
 80030ae:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80030b2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80030ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030be:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80030c2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80030c6:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80030ca:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80030ce:	f5a3 72e2 	sub.w	r2, r3, #452	@ 0x1c4
 80030d2:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 80030d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80030d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030dc:	f507 7325 	add.w	r3, r7, #660	@ 0x294
 80030e0:	f507 721f 	add.w	r2, r7, #636	@ 0x27c
 80030e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80030e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 80030ea:	ed97 7a74 	vldr	s14, [r7, #464]	@ 0x1d0
 80030ee:	edd7 7aa5 	vldr	s15, [r7, #660]	@ 0x294
 80030f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030f6:	edd7 6a75 	vldr	s13, [r7, #468]	@ 0x1d4
 80030fa:	edd7 7aa6 	vldr	s15, [r7, #664]	@ 0x298
 80030fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003106:	edd7 6a76 	vldr	s13, [r7, #472]	@ 0x1d8
 800310a:	edd7 7aa7 	vldr	s15, [r7, #668]	@ 0x29c
 800310e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003116:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800311a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800311e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 8003122:	ed97 7a77 	vldr	s14, [r7, #476]	@ 0x1dc
 8003126:	edd7 7aa5 	vldr	s15, [r7, #660]	@ 0x294
 800312a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800312e:	edd7 6a78 	vldr	s13, [r7, #480]	@ 0x1e0
 8003132:	edd7 7aa6 	vldr	s15, [r7, #664]	@ 0x298
 8003136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800313a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800313e:	edd7 6a79 	vldr	s13, [r7, #484]	@ 0x1e4
 8003142:	edd7 7aa7 	vldr	s15, [r7, #668]	@ 0x29c
 8003146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800314a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003152:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003156:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800315a:	ed97 7a7a 	vldr	s14, [r7, #488]	@ 0x1e8
 800315e:	edd7 7aa5 	vldr	s15, [r7, #660]	@ 0x294
 8003162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003166:	edd7 6a7b 	vldr	s13, [r7, #492]	@ 0x1ec
 800316a:	edd7 7aa6 	vldr	s15, [r7, #664]	@ 0x298
 800316e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003172:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003176:	edd7 6a7c 	vldr	s13, [r7, #496]	@ 0x1f0
 800317a:	edd7 7aa7 	vldr	s15, [r7, #668]	@ 0x29c
 800317e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003186:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800318a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800318e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003192:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003196:	f5a3 72ee 	sub.w	r2, r3, #476	@ 0x1dc
 800319a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800319e:	ca07      	ldmia	r2, {r0, r1, r2}
 80031a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031a4:	f507 732b 	add.w	r3, r7, #684	@ 0x2ac
 80031a8:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 80031ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80031ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 80031b2:	bf00      	nop
 80031b4:	f507 73fa 	add.w	r3, r7, #500	@ 0x1f4
 80031b8:	f507 722b 	add.w	r2, r7, #684	@ 0x2ac
 80031bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80031be:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Calibrate accelerometer
	FusionVector3 uncalibratedAccelerometer = {
 80031c2:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80031c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80031ca:	f507 7232 	add.w	r2, r7, #712	@ 0x2c8
 80031ce:	f5a2 722c 	sub.w	r2, r2, #688	@ 0x2b0
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80031da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80031de:	f507 7232 	add.w	r2, r7, #712	@ 0x2c8
 80031e2:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80031ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80031f2:	f507 7232 	add.w	r2, r7, #712	@ 0x2c8
 80031f6:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	609a      	str	r2, [r3, #8]
		.axis.x = accX, /* replace this value with actual accelerometer x axis measurement in lsb */
		.axis.y = accY, /* replace this value with actual accelerometer y axis measurement in lsb */
		.axis.z = accZ, /* replace this value with actual accelerometer z axis measurement in lsb */
	};
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 80031fe:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003202:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003206:	4a50      	ldr	r2, [pc, #320]	@ (8003348 <getFusionAHRS_6DoF+0x444>)
 8003208:	461c      	mov	r4, r3
 800320a:	4615      	mov	r5, r2
 800320c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800320e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003214:	682b      	ldr	r3, [r5, #0]
 8003216:	6023      	str	r3, [r4, #0]
 8003218:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800321c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800322a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003238:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
 8003242:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003246:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800324a:	4a41      	ldr	r2, [pc, #260]	@ (8003350 <getFusionAHRS_6DoF+0x44c>)
 800324c:	ca07      	ldmia	r2, {r0, r1, r2}
 800324e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8003252:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003256:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800325a:	ed93 7a00 	vldr	s14, [r3]
 800325e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003262:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003272:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8003276:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 800327a:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800327e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003282:	ed93 7a01 	vldr	s14, [r3, #4]
 8003286:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800328a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800328e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003296:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800329a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800329e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80032a2:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80032a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80032aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80032ae:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80032b2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80032b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032be:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80032c2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80032c6:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80032ca:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80032ce:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 80032d2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80032d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80032d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80032dc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80032e0:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 80032e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80032e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 80032ea:	ed97 7a96 	vldr	s14, [r7, #600]	@ 0x258
 80032ee:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80032f2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fe:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003302:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003306:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 800330a:	ed97 7a97 	vldr	s14, [r7, #604]	@ 0x25c
 800330e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003312:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003316:	edd3 7a01 	vldr	s15, [r3, #4]
 800331a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003322:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003326:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 800332a:	ed97 7a98 	vldr	s14, [r7, #608]	@ 0x260
 800332e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003332:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003336:	edd3 7a02 	vldr	s15, [r3, #8]
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003342:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003346:	e007      	b.n	8003358 <getFusionAHRS_6DoF+0x454>
 8003348:	08012518 	.word	0x08012518
 800334c:	20000000 	.word	0x20000000
 8003350:	2000000c 	.word	0x2000000c
 8003354:	42652ee0 	.word	0x42652ee0
 8003358:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800335c:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003360:	f5a3 7212 	sub.w	r2, r3, #584	@ 0x248
 8003364:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8003368:	ca07      	ldmia	r2, {r0, r1, r2}
 800336a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800336e:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8003372:	f507 720d 	add.w	r2, r7, #564	@ 0x234
 8003376:	ca07      	ldmia	r2, {r0, r1, r2}
 8003378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 800337c:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003380:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003384:	ed93 7a00 	vldr	s14, [r3]
 8003388:	edd7 7a93 	vldr	s15, [r7, #588]	@ 0x24c
 800338c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003390:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003394:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003398:	edd3 6a01 	vldr	s13, [r3, #4]
 800339c:	edd7 7a94 	vldr	s15, [r7, #592]	@ 0x250
 80033a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a8:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80033ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80033b4:	edd7 7a95 	vldr	s15, [r7, #596]	@ 0x254
 80033b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c0:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80033c4:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80033c8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 80033cc:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80033d0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80033d8:	edd7 7a93 	vldr	s15, [r7, #588]	@ 0x24c
 80033dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e0:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80033e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033e8:	edd3 6a04 	vldr	s13, [r3, #16]
 80033ec:	edd7 7a94 	vldr	s15, [r7, #592]	@ 0x250
 80033f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033f8:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80033fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003400:	edd3 6a05 	vldr	s13, [r3, #20]
 8003404:	edd7 7a95 	vldr	s15, [r7, #596]	@ 0x254
 8003408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800340c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003410:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003414:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003418:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800341c:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003420:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003424:	ed93 7a06 	vldr	s14, [r3, #24]
 8003428:	edd7 7a93 	vldr	s15, [r7, #588]	@ 0x24c
 800342c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003430:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003434:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003438:	edd3 6a07 	vldr	s13, [r3, #28]
 800343c:	edd7 7a94 	vldr	s15, [r7, #592]	@ 0x250
 8003440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003448:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800344c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003450:	edd3 6a08 	vldr	s13, [r3, #32]
 8003454:	edd7 7a95 	vldr	s15, [r7, #596]	@ 0x254
 8003458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800345c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003460:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003464:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003468:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800346c:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003470:	f5a3 7218 	sub.w	r2, r3, #608	@ 0x260
 8003474:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8003478:	ca07      	ldmia	r2, {r0, r1, r2}
 800347a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800347e:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 8003482:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8003486:	ca07      	ldmia	r2, {r0, r1, r2}
 8003488:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800348c:	bf00      	nop
 800348e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003492:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003496:	461c      	mov	r4, r3
 8003498:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 800349c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Update gyroscope bias correction algorithm
	calibratedGyroscope = FusionBiasUpdate(fusionBias, calibratedGyroscope);
 80034a4:	edd7 6a7d 	vldr	s13, [r7, #500]	@ 0x1f4
 80034a8:	ed97 7a7e 	vldr	s14, [r7, #504]	@ 0x1f8
 80034ac:	edd7 7a7f 	vldr	s15, [r7, #508]	@ 0x1fc
 80034b0:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80034b4:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80034b8:	eeb0 0a66 	vmov.f32	s0, s13
 80034bc:	eef0 0a47 	vmov.f32	s1, s14
 80034c0:	eeb0 1a67 	vmov.f32	s2, s15
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	f7ff fbef 	bl	8002ca8 <FusionBiasUpdate>
 80034ca:	eef0 6a40 	vmov.f32	s13, s0
 80034ce:	eeb0 7a60 	vmov.f32	s14, s1
 80034d2:	eef0 7a41 	vmov.f32	s15, s2
 80034d6:	edc7 6a7d 	vstr	s13, [r7, #500]	@ 0x1f4
 80034da:	ed87 7a7e 	vstr	s14, [r7, #504]	@ 0x1f8
 80034de:	edc7 7a7f 	vstr	s15, [r7, #508]	@ 0x1fc

	// Update AHRS algorithm
	FusionAhrsUpdateWithoutMagnetometer(fusionAhrs, calibratedGyroscope, calibratedAccelerometer, DataStruct->samplePeriod);
 80034e2:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80034e6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	edd3 4a03 	vldr	s9, [r3, #12]
 80034f0:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80034f4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80034f8:	ed93 5a00 	vldr	s10, [r3]
 80034fc:	edd3 5a01 	vldr	s11, [r3, #4]
 8003500:	ed93 6a02 	vldr	s12, [r3, #8]
 8003504:	edd7 6a7d 	vldr	s13, [r7, #500]	@ 0x1f4
 8003508:	ed97 7a7e 	vldr	s14, [r7, #504]	@ 0x1f8
 800350c:	edd7 7a7f 	vldr	s15, [r7, #508]	@ 0x1fc
 8003510:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003514:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8003518:	eeb0 3a64 	vmov.f32	s6, s9
 800351c:	eef0 1a45 	vmov.f32	s3, s10
 8003520:	eeb0 2a65 	vmov.f32	s4, s11
 8003524:	eef0 2a46 	vmov.f32	s5, s12
 8003528:	eeb0 0a66 	vmov.f32	s0, s13
 800352c:	eef0 0a47 	vmov.f32	s1, s14
 8003530:	eeb0 1a67 	vmov.f32	s2, s15
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	f7ff f945 	bl	80027c4 <FusionAhrsUpdateWithoutMagnetometer>

	// Get Euler angles
	FusionEulerAngles eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(fusionAhrs));
 800353a:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800353e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	f7ff f9a8 	bl	8002898 <FusionAhrsGetQuaternion>
 8003548:	eeb0 6a40 	vmov.f32	s12, s0
 800354c:	eef0 6a60 	vmov.f32	s13, s1
 8003550:	eeb0 7a41 	vmov.f32	s14, s2
 8003554:	eef0 7a61 	vmov.f32	s15, s3
 8003558:	ed87 6a83 	vstr	s12, [r7, #524]	@ 0x20c
 800355c:	edc7 6a84 	vstr	s13, [r7, #528]	@ 0x210
 8003560:	ed87 7a85 	vstr	s14, [r7, #532]	@ 0x214
 8003564:	edc7 7a86 	vstr	s15, [r7, #536]	@ 0x218
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 8003568:	ed97 7a83 	vldr	s14, [r7, #524]	@ 0x20c
 800356c:	edd7 7a83 	vldr	s15, [r7, #524]	@ 0x20c
 8003570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003574:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003578:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800357c:	edc7 7ab1 	vstr	s15, [r7, #708]	@ 0x2c4
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003580:	ed97 7a85 	vldr	s14, [r7, #532]	@ 0x214
 8003584:	edd7 7a86 	vldr	s15, [r7, #536]	@ 0x218
 8003588:	ee27 7a27 	vmul.f32	s14, s14, s15
 800358c:	edd7 6a83 	vldr	s13, [r7, #524]	@ 0x20c
 8003590:	edd7 7a84 	vldr	s15, [r7, #528]	@ 0x210
 8003594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003598:	ee77 6a67 	vsub.f32	s13, s14, s15
 800359c:	ed97 7a86 	vldr	s14, [r7, #536]	@ 0x218
 80035a0:	edd7 7a86 	vldr	s15, [r7, #536]	@ 0x218
 80035a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035a8:	edd7 7ab1 	vldr	s15, [r7, #708]	@ 0x2c4
 80035ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b0:	eef0 0a67 	vmov.f32	s1, s15
 80035b4:	eeb0 0a66 	vmov.f32	s0, s13
 80035b8:	f00c fb5a 	bl	800fc70 <atan2f>
 80035bc:	eef0 7a40 	vmov.f32	s15, s0
 80035c0:	edc7 7ab0 	vstr	s15, [r7, #704]	@ 0x2c0
    return radians * (180.0f / (float) M_PI);
 80035c4:	edd7 7ab0 	vldr	s15, [r7, #704]	@ 0x2c0
 80035c8:	ed1f 7a9e 	vldr	s14, [pc, #-632]	@ 8003354 <getFusionAHRS_6DoF+0x450>
 80035cc:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 80035d0:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80035d4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80035d8:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 80035dc:	ed97 7a84 	vldr	s14, [r7, #528]	@ 0x210
 80035e0:	edd7 7a86 	vldr	s15, [r7, #536]	@ 0x218
 80035e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035e8:	edd7 6a83 	vldr	s13, [r7, #524]	@ 0x20c
 80035ec:	edd7 7a85 	vldr	s15, [r7, #532]	@ 0x214
 80035f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003600:	f00c fb0a 	bl	800fc18 <asinf>
 8003604:	eef0 7a40 	vmov.f32	s15, s0
 8003608:	eef1 7a67 	vneg.f32	s15, s15
 800360c:	edc7 7aaf 	vstr	s15, [r7, #700]	@ 0x2bc
    return radians * (180.0f / (float) M_PI);
 8003610:	edd7 7aaf 	vldr	s15, [r7, #700]	@ 0x2bc
 8003614:	ed1f 7ab1 	vldr	s14, [pc, #-708]	@ 8003354 <getFusionAHRS_6DoF+0x450>
 8003618:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 800361c:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003620:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003624:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003628:	ed97 7a84 	vldr	s14, [r7, #528]	@ 0x210
 800362c:	edd7 7a85 	vldr	s15, [r7, #532]	@ 0x214
 8003630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003634:	edd7 6a83 	vldr	s13, [r7, #524]	@ 0x20c
 8003638:	edd7 7a86 	vldr	s15, [r7, #536]	@ 0x218
 800363c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003640:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003644:	ed97 7a84 	vldr	s14, [r7, #528]	@ 0x210
 8003648:	edd7 7a84 	vldr	s15, [r7, #528]	@ 0x210
 800364c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003650:	edd7 7ab1 	vldr	s15, [r7, #708]	@ 0x2c4
 8003654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003658:	eef0 0a67 	vmov.f32	s1, s15
 800365c:	eeb0 0a66 	vmov.f32	s0, s13
 8003660:	f00c fb06 	bl	800fc70 <atan2f>
 8003664:	eef0 7a40 	vmov.f32	s15, s0
 8003668:	edc7 7aae 	vstr	s15, [r7, #696]	@ 0x2b8
    return radians * (180.0f / (float) M_PI);
 800366c:	edd7 7aae 	vldr	s15, [r7, #696]	@ 0x2b8
 8003670:	ed1f 7ac8 	vldr	s14, [pc, #-800]	@ 8003354 <getFusionAHRS_6DoF+0x450>
 8003674:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003678:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800367c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003680:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 8003684:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003688:	f5a3 721f 	sub.w	r2, r3, #636	@ 0x27c
 800368c:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8003690:	ca07      	ldmia	r2, {r0, r1, r2}
 8003692:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003696:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800369a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800369e:	461c      	mov	r4, r3
 80036a0:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 80036a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	// Write Euler Angles into data structs
	DataStruct->YAW = eulerAngles.angle.yaw;
 80036ac:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80036b0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80036ba:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	601a      	str	r2, [r3, #0]
	DataStruct->PITCH = eulerAngles.angle.pitch;
 80036c2:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80036c6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80036d0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	605a      	str	r2, [r3, #4]
	DataStruct->ROLL = eulerAngles.angle.roll;
 80036d8:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80036dc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80036e6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	609a      	str	r2, [r3, #8]
}
 80036ee:	bf00      	nop
 80036f0:	f507 7732 	add.w	r7, r7, #712	@ 0x2c8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bdb0      	pop	{r4, r5, r7, pc}

080036f8 <LPFTwoPole_Init>:
#include "LowPassFilter.h"

void LPFTwoPole_Init(LPFTwoPole_t *lpf, uint8_t type, float cutoffFrequency, float sampleTime) {
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	460b      	mov	r3, r1
 8003702:	ed87 0a01 	vstr	s0, [r7, #4]
 8003706:	edc7 0a00 	vstr	s1, [r7]
 800370a:	72fb      	strb	r3, [r7, #11]
	float wc = 6.28318530718f * cutoffFrequency;
 800370c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003710:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80037cc <LPFTwoPole_Init+0xd4>
 8003714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003718:	edc7 7a05 	vstr	s15, [r7, #20]

	if (type == LPF_TYPE_BESSEL) {
 800371c:	7afb      	ldrb	r3, [r7, #11]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d141      	bne.n	80037a6 <LPFTwoPole_Init+0xae>
		lpf->coeffNum = 1.6221f * wc * wc * sampleTime * sampleTime;
 8003722:	edd7 7a05 	vldr	s15, [r7, #20]
 8003726:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80037d0 <LPFTwoPole_Init+0xd8>
 800372a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800372e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003732:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003736:	edd7 7a00 	vldr	s15, [r7]
 800373a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800373e:	edd7 7a00 	vldr	s15, [r7]
 8003742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	edc3 7a03 	vstr	s15, [r3, #12]
		lpf->coeffDen[0] = 1.0f / (1.0f + 2.206f * wc * sampleTime + lpf->coeffNum);
 800374c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003750:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80037d4 <LPFTwoPole_Init+0xdc>
 8003754:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003758:	edd7 7a00 	vldr	s15, [r7]
 800375c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003760:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003764:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	edd3 7a03 	vldr	s15, [r3, #12]
 800376e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	edc3 7a04 	vstr	s15, [r3, #16]
		lpf->coeffDen[1] = -(2.0f + 2.206f * wc * sampleTime);
 8003780:	edd7 7a05 	vldr	s15, [r7, #20]
 8003784:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80037d4 <LPFTwoPole_Init+0xdc>
 8003788:	ee27 7a87 	vmul.f32	s14, s15, s14
 800378c:	edd7 7a00 	vldr	s15, [r7]
 8003790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003794:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003798:	ee77 7a87 	vadd.f32	s15, s15, s14
 800379c:	eef1 7a67 	vneg.f32	s15, s15
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	lpf->buf[0] = 0.0f;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	605a      	str	r2, [r3, #4]
	lpf->buf[1] = 0.0f;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	609a      	str	r2, [r3, #8]

	lpf->out = 0.0f;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40c90fdb 	.word	0x40c90fdb
 80037d0:	3fcfa0f9 	.word	0x3fcfa0f9
 80037d4:	400d2f1b 	.word	0x400d2f1b

080037d8 <LPFTwoPole_Update>:

float LPFTwoPole_Update(LPFTwoPole_t *lpf, float val) {
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	ed87 0a00 	vstr	s0, [r7]
	lpf->buf[1] = lpf->buf[0];
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	609a      	str	r2, [r3, #8]
	lpf->buf[0] = lpf->out;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	605a      	str	r2, [r3, #4]

	lpf->out = lpf->coeffDen[0] * (lpf->coeffNum * val - (lpf->coeffDen[1] * lpf->buf[0] + lpf->buf[1]));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8003800:	edd7 7a00 	vldr	s15, [r7]
 8003804:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	ed93 6a05 	vldr	s12, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	edd3 7a01 	vldr	s15, [r3, #4]
 8003814:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	edd3 7a02 	vldr	s15, [r3, #8]
 800381e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003822:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	edc3 7a00 	vstr	s15, [r3]

	return lpf->out;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	ee07 3a90 	vmov	s15, r3
}
 8003838:	eeb0 0a67 	vmov.f32	s0, s15
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <NotchFilterInit>:
#include "NotchFilter.h"

void NotchFilterInit(NotchFilter_t *filt, float centerFreHz, float notchWidth_Hz, float sampleTime_s)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	ed2d 8b02 	vpush	{d8}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	ed87 0a02 	vstr	s0, [r7, #8]
 8003858:	edc7 0a01 	vstr	s1, [r7, #4]
 800385c:	ed87 1a00 	vstr	s2, [r7]
	float w0_rps = 2.0f * M_PI * centerFreHz;
 8003860:	68b8      	ldr	r0, [r7, #8]
 8003862:	f7fc fe79 	bl	8000558 <__aeabi_f2d>
 8003866:	a33c      	add	r3, pc, #240	@ (adr r3, 8003958 <NotchFilterInit+0x110>)
 8003868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386c:	f7fc fecc 	bl	8000608 <__aeabi_dmul>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	f7fd f9be 	bl	8000bf8 <__aeabi_d2f>
 800387c:	4603      	mov	r3, r0
 800387e:	61bb      	str	r3, [r7, #24]
	float ww_rps = 2.0f * M_PI * notchWidth_Hz;
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7fc fe69 	bl	8000558 <__aeabi_f2d>
 8003886:	a334      	add	r3, pc, #208	@ (adr r3, 8003958 <NotchFilterInit+0x110>)
 8003888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388c:	f7fc febc 	bl	8000608 <__aeabi_dmul>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	f7fd f9ae 	bl	8000bf8 <__aeabi_d2f>
 800389c:	4603      	mov	r3, r0
 800389e:	617b      	str	r3, [r7, #20]
	
	float w0_pw_rps = (2.0f / sampleTime_s) * tanf(0.5f * w0_rps * sampleTime_s);
 80038a0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80038a4:	edd7 7a00 	vldr	s15, [r7]
 80038a8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80038ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80038b0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038b8:	edd7 7a00 	vldr	s15, [r7]
 80038bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c0:	eeb0 0a67 	vmov.f32	s0, s15
 80038c4:	f00c fa86 	bl	800fdd4 <tanf>
 80038c8:	eef0 7a40 	vmov.f32	s15, s0
 80038cc:	ee68 7a27 	vmul.f32	s15, s16, s15
 80038d0:	edc7 7a04 	vstr	s15, [r7, #16]
	
	filt->alpha = 4.0f + ((w0_pw_rps * w0_pw_rps) * (sampleTime_s * sampleTime_s));
 80038d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80038d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80038dc:	edd7 7a00 	vldr	s15, [r7]
 80038e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80038e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80038ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	edc3 7a00 	vstr	s15, [r3]
	filt->beta = 2.0f + (ww_rps  * sampleTime_s);
 80038f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80038fa:	edd7 7a00 	vldr	s15, [r7]
 80038fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003902:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003906:	ee77 7a87 	vadd.f32	s15, s15, s14
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	edc3 7a01 	vstr	s15, [r3, #4]
	
	for (int n = 0; n<3; n++)
 8003910:	2300      	movs	r3, #0
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	e013      	b.n	800393e <NotchFilterInit+0xf6>
	{
		filt->x[n] = 0.0f;
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	3302      	adds	r3, #2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
		filt->y[n] = 0.0f;
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	3304      	adds	r3, #4
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	3304      	adds	r3, #4
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
	for (int n = 0; n<3; n++)
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	3301      	adds	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	2b02      	cmp	r3, #2
 8003942:	dde8      	ble.n	8003916 <NotchFilterInit+0xce>
	}
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	ecbd 8b02 	vpop	{d8}
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	f3af 8000 	nop.w
 8003958:	54442d18 	.word	0x54442d18
 800395c:	401921fb 	.word	0x401921fb

08003960 <NotchFilter_Update>:

float NotchFilter_Update(NotchFilter_t *filt, float data)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	ed87 0a00 	vstr	s0, [r7]
	filt->x[2] = filt->x[1];
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	611a      	str	r2, [r3, #16]
	filt->x[1] = filt->x[0];
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]
	
	filt->y[2] = filt->y[1];
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	61da      	str	r2, [r3, #28]
	filt->y[1] = filt->y[0];
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	619a      	str	r2, [r3, #24]
	
	filt->x[0] = data;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	609a      	str	r2, [r3, #8]
	
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	ed93 7a00 	vldr	s14, [r3]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	edd3 7a02 	vldr	s15, [r3, #8]
 800399e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	edd3 7a00 	vldr	s15, [r3]
 80039a8:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80039ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80039b0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80039ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	edd3 6a00 	vldr	s13, [r3]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80039ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039d2:	ee37 7a27 	vadd.f32	s14, s14, s15
			   - (2.0f * ((filt->alpha - 8.0f)) * filt->y[1] + (filt->alpha - filt->beta) *filt->y[2]))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	edd3 7a00 	vldr	s15, [r3]
 80039dc:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80039e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80039e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80039ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	ed93 6a00 	vldr	s12, [r3]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80039fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	edd3 7a07 	vldr	s15, [r3, #28]
 8003a08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a10:	ee77 6a67 	vsub.f32	s13, s14, s15
			   / (filt->alpha + filt->beta);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	ed93 7a00 	vldr	s14, [r3]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	edc3 7a05 	vstr	s15, [r3, #20]
			   
	return filt->y[0];
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	ee07 3a90 	vmov	s15, r3
}
 8003a36:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003a48:	4b08      	ldr	r3, [pc, #32]	@ (8003a6c <DWT_Init+0x28>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4a07      	ldr	r2, [pc, #28]	@ (8003a6c <DWT_Init+0x28>)
 8003a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a52:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003a54:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <DWT_Init+0x2c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a05      	ldr	r2, [pc, #20]	@ (8003a70 <DWT_Init+0x2c>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6013      	str	r3, [r2, #0]
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000edf0 	.word	0xe000edf0
 8003a70:	e0001000 	.word	0xe0001000

08003a74 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint64_t micros(void){
 8003a74:	b4b0      	push	{r4, r5, r7}
 8003a76:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8003a78:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <micros+0x2c>)
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	4b09      	ldr	r3, [pc, #36]	@ (8003aa4 <micros+0x30>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4909      	ldr	r1, [pc, #36]	@ (8003aa8 <micros+0x34>)
 8003a82:	fba1 1303 	umull	r1, r3, r1, r3
 8003a86:	0c9b      	lsrs	r3, r3, #18
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	461c      	mov	r4, r3
 8003a90:	4615      	mov	r5, r2
 8003a92:	4622      	mov	r2, r4
 8003a94:	462b      	mov	r3, r5
}
 8003a96:	4610      	mov	r0, r2
 8003a98:	4619      	mov	r1, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bcb0      	pop	{r4, r5, r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	e0001000 	.word	0xe0001000
 8003aa4:	20000020 	.word	0x20000020
 8003aa8:	431bde83 	.word	0x431bde83

08003aac <_write>:

#define CopyDATASIZE 17
uint8_t CopyData[CopyDATASIZE];

int _write(int file, char *ptr, int len)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	4804      	ldr	r0, [pc, #16]	@ (8003ad4 <_write+0x28>)
 8003ac4:	f006 fd98 	bl	800a5f8 <HAL_UART_Transmit>
	return len;
 8003ac8:	687b      	ldr	r3, [r7, #4]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000574 	.word	0x20000574

08003ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003adc:	ed2d 8b04 	vpush	{d8-d9}
 8003ae0:	b087      	sub	sp, #28
 8003ae2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ae4:	f003 fa6e 	bl	8006fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ae8:	f000 fa82 	bl	8003ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003aec:	f000 fdae 	bl	800464c <MX_GPIO_Init>
  MX_DMA_Init();
 8003af0:	f000 fd84 	bl	80045fc <MX_DMA_Init>
  MX_TIM2_Init();
 8003af4:	f000 fb40 	bl	8004178 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003af8:	f000 fbd4 	bl	80042a4 <MX_TIM3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003afc:	f000 fd50 	bl	80045a0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8003b00:	f000 fade 	bl	80040c0 <MX_I2C2_Init>
  MX_I2C3_Init();
 8003b04:	f000 fb0a 	bl	800411c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8003b08:	f000 fd20 	bl	800454c <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8003b0c:	f000 fcfa 	bl	8004504 <MX_TIM11_Init>
  MX_TIM4_Init();
 8003b10:	f000 fc60 	bl	80043d4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8003b14:	2201      	movs	r2, #1
 8003b16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b1a:	48cb      	ldr	r0, [pc, #812]	@ (8003e48 <main+0x370>)
 8003b1c:	f004 f808 	bl	8007b30 <HAL_GPIO_WritePin>
  //Init DWT Clock for proper us time tick
  DWT_Init();
 8003b20:	f7ff ff90 	bl	8003a44 <DWT_Init>

  //Init filter with predefined settings
  LPFTwoPole_Init(&LPF_accel_x, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8003b24:	4bc9      	ldr	r3, [pc, #804]	@ (8003e4c <main+0x374>)
 8003b26:	edd3 7a00 	vldr	s15, [r3]
 8003b2a:	eef0 0a67 	vmov.f32	s1, s15
 8003b2e:	ed9f 0ac8 	vldr	s0, [pc, #800]	@ 8003e50 <main+0x378>
 8003b32:	2101      	movs	r1, #1
 8003b34:	48c7      	ldr	r0, [pc, #796]	@ (8003e54 <main+0x37c>)
 8003b36:	f7ff fddf 	bl	80036f8 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_y, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8003b3a:	4bc4      	ldr	r3, [pc, #784]	@ (8003e4c <main+0x374>)
 8003b3c:	edd3 7a00 	vldr	s15, [r3]
 8003b40:	eef0 0a67 	vmov.f32	s1, s15
 8003b44:	ed9f 0ac2 	vldr	s0, [pc, #776]	@ 8003e50 <main+0x378>
 8003b48:	2101      	movs	r1, #1
 8003b4a:	48c3      	ldr	r0, [pc, #780]	@ (8003e58 <main+0x380>)
 8003b4c:	f7ff fdd4 	bl	80036f8 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_z, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8003b50:	4bbe      	ldr	r3, [pc, #760]	@ (8003e4c <main+0x374>)
 8003b52:	edd3 7a00 	vldr	s15, [r3]
 8003b56:	eef0 0a67 	vmov.f32	s1, s15
 8003b5a:	ed9f 0abd 	vldr	s0, [pc, #756]	@ 8003e50 <main+0x378>
 8003b5e:	2101      	movs	r1, #1
 8003b60:	48be      	ldr	r0, [pc, #760]	@ (8003e5c <main+0x384>)
 8003b62:	f7ff fdc9 	bl	80036f8 <LPFTwoPole_Init>

  LPFTwoPole_Init(&LPF_gyro_x, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8003b66:	4bb9      	ldr	r3, [pc, #740]	@ (8003e4c <main+0x374>)
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	eef0 0a67 	vmov.f32	s1, s15
 8003b70:	ed9f 0abb 	vldr	s0, [pc, #748]	@ 8003e60 <main+0x388>
 8003b74:	2101      	movs	r1, #1
 8003b76:	48bb      	ldr	r0, [pc, #748]	@ (8003e64 <main+0x38c>)
 8003b78:	f7ff fdbe 	bl	80036f8 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_y, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8003b7c:	4bb3      	ldr	r3, [pc, #716]	@ (8003e4c <main+0x374>)
 8003b7e:	edd3 7a00 	vldr	s15, [r3]
 8003b82:	eef0 0a67 	vmov.f32	s1, s15
 8003b86:	ed9f 0ab6 	vldr	s0, [pc, #728]	@ 8003e60 <main+0x388>
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	48b6      	ldr	r0, [pc, #728]	@ (8003e68 <main+0x390>)
 8003b8e:	f7ff fdb3 	bl	80036f8 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_z, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8003b92:	4bae      	ldr	r3, [pc, #696]	@ (8003e4c <main+0x374>)
 8003b94:	edd3 7a00 	vldr	s15, [r3]
 8003b98:	eef0 0a67 	vmov.f32	s1, s15
 8003b9c:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 8003e60 <main+0x388>
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	48b2      	ldr	r0, [pc, #712]	@ (8003e6c <main+0x394>)
 8003ba4:	f7ff fda8 	bl	80036f8 <LPFTwoPole_Init>

  NotchFilterInit(&NF_gyro_x, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8003ba8:	4ba8      	ldr	r3, [pc, #672]	@ (8003e4c <main+0x374>)
 8003baa:	edd3 7a00 	vldr	s15, [r3]
 8003bae:	eeb0 1a67 	vmov.f32	s2, s15
 8003bb2:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8003bb6:	ed9f 0aae 	vldr	s0, [pc, #696]	@ 8003e70 <main+0x398>
 8003bba:	48ae      	ldr	r0, [pc, #696]	@ (8003e74 <main+0x39c>)
 8003bbc:	f7ff fe44 	bl	8003848 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_y, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8003bc0:	4ba2      	ldr	r3, [pc, #648]	@ (8003e4c <main+0x374>)
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	eeb0 1a67 	vmov.f32	s2, s15
 8003bca:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8003bce:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 8003e70 <main+0x398>
 8003bd2:	48a9      	ldr	r0, [pc, #676]	@ (8003e78 <main+0x3a0>)
 8003bd4:	f7ff fe38 	bl	8003848 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_z, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8003bd8:	4b9c      	ldr	r3, [pc, #624]	@ (8003e4c <main+0x374>)
 8003bda:	edd3 7a00 	vldr	s15, [r3]
 8003bde:	eeb0 1a67 	vmov.f32	s2, s15
 8003be2:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8003be6:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 8003e70 <main+0x398>
 8003bea:	48a4      	ldr	r0, [pc, #656]	@ (8003e7c <main+0x3a4>)
 8003bec:	f7ff fe2c 	bl	8003848 <NotchFilterInit>

  //Init state estimators
  quaternionInit(&quaternion_t, sample_time_us_f32);
 8003bf0:	4ba3      	ldr	r3, [pc, #652]	@ (8003e80 <main+0x3a8>)
 8003bf2:	edd3 7a00 	vldr	s15, [r3]
 8003bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfa:	48a2      	ldr	r0, [pc, #648]	@ (8003e84 <main+0x3ac>)
 8003bfc:	f002 f948 	bl	8005e90 <quaternionInit>
  initFusionAHRS(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, sample_time_sec_f32);
 8003c00:	4b92      	ldr	r3, [pc, #584]	@ (8003e4c <main+0x374>)
 8003c02:	edd3 7a00 	vldr	s15, [r3]
 8003c06:	eeb0 0a67 	vmov.f32	s0, s15
 8003c0a:	4a9f      	ldr	r2, [pc, #636]	@ (8003e88 <main+0x3b0>)
 8003c0c:	499f      	ldr	r1, [pc, #636]	@ (8003e8c <main+0x3b4>)
 8003c0e:	48a0      	ldr	r0, [pc, #640]	@ (8003e90 <main+0x3b8>)
 8003c10:	f7ff f950 	bl	8002eb4 <initFusionAHRS>

  //Init sensors
	while (MPU6050_Init(&hi2c2, &imu_t));
 8003c14:	bf00      	nop
 8003c16:	499f      	ldr	r1, [pc, #636]	@ (8003e94 <main+0x3bc>)
 8003c18:	489f      	ldr	r0, [pc, #636]	@ (8003e98 <main+0x3c0>)
 8003c1a:	f000 fda9 	bl	8004770 <MPU6050_Init>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f8      	bne.n	8003c16 <main+0x13e>

	if (imu_t.CALIBRATIN_OK_u8 == TRUE)
 8003c24:	4b9b      	ldr	r3, [pc, #620]	@ (8003e94 <main+0x3bc>)
 8003c26:	7e1b      	ldrb	r3, [r3, #24]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d105      	bne.n	8003c38 <main+0x160>
	{
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c32:	4885      	ldr	r0, [pc, #532]	@ (8003e48 <main+0x370>)
 8003c34:	f003 ff7c 	bl	8007b30 <HAL_GPIO_WritePin>
	}
	uint8_t newData_u8;

	HAL_TIM_Base_Start(&htim11);
 8003c38:	4898      	ldr	r0, [pc, #608]	@ (8003e9c <main+0x3c4>)
 8003c3a:	f005 fda1 	bl	8009780 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  baslangic = __HAL_TIM_GET_COUNTER(&htim11);
 8003c3e:	4b97      	ldr	r3, [pc, #604]	@ (8003e9c <main+0x3c4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	4a96      	ldr	r2, [pc, #600]	@ (8003ea0 <main+0x3c8>)
 8003c46:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//Get system time in us
		timer_u64 = micros();
 8003c48:	f7ff ff14 	bl	8003a74 <micros>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4994      	ldr	r1, [pc, #592]	@ (8003ea4 <main+0x3cc>)
 8003c52:	e9c1 2300 	strd	r2, r3, [r1]

		if ( ((timer_u64 - lastTime_u64) >= sample_time_us_f32) && (imu_t.CALIBRATIN_OK_u8 == TRUE) )
 8003c56:	4b93      	ldr	r3, [pc, #588]	@ (8003ea4 <main+0x3cc>)
 8003c58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c5c:	4b92      	ldr	r3, [pc, #584]	@ (8003ea8 <main+0x3d0>)
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	1a84      	subs	r4, r0, r2
 8003c64:	eb61 0503 	sbc.w	r5, r1, r3
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fd f8dc 	bl	8000e28 <__aeabi_ul2f>
 8003c70:	ee07 0a10 	vmov	s14, r0
 8003c74:	4b82      	ldr	r3, [pc, #520]	@ (8003e80 <main+0x3a8>)
 8003c76:	edd3 7a00 	vldr	s15, [r3]
 8003c7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c82:	f2c0 815f 	blt.w	8003f44 <main+0x46c>
 8003c86:	4b83      	ldr	r3, [pc, #524]	@ (8003e94 <main+0x3bc>)
 8003c88:	7e1b      	ldrb	r3, [r3, #24]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	f040 815a 	bne.w	8003f44 <main+0x46c>
		{
			lastTime_u64 = micros();
 8003c90:	f7ff fef0 	bl	8003a74 <micros>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4983      	ldr	r1, [pc, #524]	@ (8003ea8 <main+0x3d0>)
 8003c9a:	e9c1 2300 	strd	r2, r3, [r1]

			//Read MPU6050 sensor data
			readMPU6050(&hi2c2, &imu_t);
 8003c9e:	497d      	ldr	r1, [pc, #500]	@ (8003e94 <main+0x3bc>)
 8003ca0:	487d      	ldr	r0, [pc, #500]	@ (8003e98 <main+0x3c0>)
 8003ca2:	f000 fda7 	bl	80047f4 <readMPU6050>

			//Get accelerometer data in "g" and run LPF
			accelLowPassFiltered_f32[0] = (LPFTwoPole_Update(&LPF_accel_x, imu_t.MPU6050_Accel_f32[0]));
 8003ca6:	4b7b      	ldr	r3, [pc, #492]	@ (8003e94 <main+0x3bc>)
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb0:	4868      	ldr	r0, [pc, #416]	@ (8003e54 <main+0x37c>)
 8003cb2:	f7ff fd91 	bl	80037d8 <LPFTwoPole_Update>
 8003cb6:	eef0 7a40 	vmov.f32	s15, s0
 8003cba:	4b7c      	ldr	r3, [pc, #496]	@ (8003eac <main+0x3d4>)
 8003cbc:	edc3 7a00 	vstr	s15, [r3]
			accelLowPassFiltered_f32[1] = (LPFTwoPole_Update(&LPF_accel_y, imu_t.MPU6050_Accel_f32[1]));
 8003cc0:	4b74      	ldr	r3, [pc, #464]	@ (8003e94 <main+0x3bc>)
 8003cc2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cca:	4863      	ldr	r0, [pc, #396]	@ (8003e58 <main+0x380>)
 8003ccc:	f7ff fd84 	bl	80037d8 <LPFTwoPole_Update>
 8003cd0:	eef0 7a40 	vmov.f32	s15, s0
 8003cd4:	4b75      	ldr	r3, [pc, #468]	@ (8003eac <main+0x3d4>)
 8003cd6:	edc3 7a01 	vstr	s15, [r3, #4]
			accelLowPassFiltered_f32[2] = (LPFTwoPole_Update(&LPF_accel_z, imu_t.MPU6050_Accel_f32[2]));
 8003cda:	4b6e      	ldr	r3, [pc, #440]	@ (8003e94 <main+0x3bc>)
 8003cdc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce4:	485d      	ldr	r0, [pc, #372]	@ (8003e5c <main+0x384>)
 8003ce6:	f7ff fd77 	bl	80037d8 <LPFTwoPole_Update>
 8003cea:	eef0 7a40 	vmov.f32	s15, s0
 8003cee:	4b6f      	ldr	r3, [pc, #444]	@ (8003eac <main+0x3d4>)
 8003cf0:	edc3 7a02 	vstr	s15, [r3, #8]

			//Get gyro data in "deg/s" and run LPF
			gyroLowPassFiltered_f32[0] = NotchFilter_Update(&NF_gyro_x, imu_t.MPU6050_Gyro_f32[0]);
 8003cf4:	4b67      	ldr	r3, [pc, #412]	@ (8003e94 <main+0x3bc>)
 8003cf6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003cfe:	485d      	ldr	r0, [pc, #372]	@ (8003e74 <main+0x39c>)
 8003d00:	f7ff fe2e 	bl	8003960 <NotchFilter_Update>
 8003d04:	eef0 7a40 	vmov.f32	s15, s0
 8003d08:	4b69      	ldr	r3, [pc, #420]	@ (8003eb0 <main+0x3d8>)
 8003d0a:	edc3 7a00 	vstr	s15, [r3]
			gyroLowPassFiltered_f32[1] = NotchFilter_Update(&NF_gyro_y, imu_t.MPU6050_Gyro_f32[1]);
 8003d0e:	4b61      	ldr	r3, [pc, #388]	@ (8003e94 <main+0x3bc>)
 8003d10:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d14:	eeb0 0a67 	vmov.f32	s0, s15
 8003d18:	4857      	ldr	r0, [pc, #348]	@ (8003e78 <main+0x3a0>)
 8003d1a:	f7ff fe21 	bl	8003960 <NotchFilter_Update>
 8003d1e:	eef0 7a40 	vmov.f32	s15, s0
 8003d22:	4b63      	ldr	r3, [pc, #396]	@ (8003eb0 <main+0x3d8>)
 8003d24:	edc3 7a01 	vstr	s15, [r3, #4]
			gyroLowPassFiltered_f32[2] = NotchFilter_Update(&NF_gyro_z, imu_t.MPU6050_Gyro_f32[2]);
 8003d28:	4b5a      	ldr	r3, [pc, #360]	@ (8003e94 <main+0x3bc>)
 8003d2a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d32:	4852      	ldr	r0, [pc, #328]	@ (8003e7c <main+0x3a4>)
 8003d34:	f7ff fe14 	bl	8003960 <NotchFilter_Update>
 8003d38:	eef0 7a40 	vmov.f32	s15, s0
 8003d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb0 <main+0x3d8>)
 8003d3e:	edc3 7a02 	vstr	s15, [r3, #8]

			//Put gyro data into Notch Filter to flat-out any data in specific frequency band
			gyroNotchFiltered_f32[0] = (LPFTwoPole_Update(&LPF_gyro_x, gyroLowPassFiltered_f32[0]));
 8003d42:	4b5b      	ldr	r3, [pc, #364]	@ (8003eb0 <main+0x3d8>)
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	eeb0 0a67 	vmov.f32	s0, s15
 8003d4c:	4845      	ldr	r0, [pc, #276]	@ (8003e64 <main+0x38c>)
 8003d4e:	f7ff fd43 	bl	80037d8 <LPFTwoPole_Update>
 8003d52:	eef0 7a40 	vmov.f32	s15, s0
 8003d56:	4b57      	ldr	r3, [pc, #348]	@ (8003eb4 <main+0x3dc>)
 8003d58:	edc3 7a00 	vstr	s15, [r3]
			gyroNotchFiltered_f32[1] = (LPFTwoPole_Update(&LPF_gyro_y, gyroLowPassFiltered_f32[1]));
 8003d5c:	4b54      	ldr	r3, [pc, #336]	@ (8003eb0 <main+0x3d8>)
 8003d5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d62:	eeb0 0a67 	vmov.f32	s0, s15
 8003d66:	4840      	ldr	r0, [pc, #256]	@ (8003e68 <main+0x390>)
 8003d68:	f7ff fd36 	bl	80037d8 <LPFTwoPole_Update>
 8003d6c:	eef0 7a40 	vmov.f32	s15, s0
 8003d70:	4b50      	ldr	r3, [pc, #320]	@ (8003eb4 <main+0x3dc>)
 8003d72:	edc3 7a01 	vstr	s15, [r3, #4]
			gyroNotchFiltered_f32[2] = (LPFTwoPole_Update(&LPF_gyro_z, gyroLowPassFiltered_f32[2]));
 8003d76:	4b4e      	ldr	r3, [pc, #312]	@ (8003eb0 <main+0x3d8>)
 8003d78:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d80:	483a      	ldr	r0, [pc, #232]	@ (8003e6c <main+0x394>)
 8003d82:	f7ff fd29 	bl	80037d8 <LPFTwoPole_Update>
 8003d86:	eef0 7a40 	vmov.f32	s15, s0
 8003d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb4 <main+0x3dc>)
 8003d8c:	edc3 7a02 	vstr	s15, [r3, #8]

			//Get state estimations, using quaternion and fusion-quaternion based estimators
			quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8003d90:	4b46      	ldr	r3, [pc, #280]	@ (8003eac <main+0x3d4>)
 8003d92:	ed93 8a00 	vldr	s16, [r3]
 8003d96:	4b45      	ldr	r3, [pc, #276]	@ (8003eac <main+0x3d4>)
 8003d98:	edd3 8a01 	vldr	s17, [r3, #4]
 8003d9c:	4b43      	ldr	r3, [pc, #268]	@ (8003eac <main+0x3d4>)
 8003d9e:	ed93 9a02 	vldr	s18, [r3, #8]
					gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8003da2:	4b44      	ldr	r3, [pc, #272]	@ (8003eb4 <main+0x3dc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fc fbd6 	bl	8000558 <__aeabi_f2d>
 8003dac:	a324      	add	r3, pc, #144	@ (adr r3, 8003e40 <main+0x368>)
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	f7fc fc29 	bl	8000608 <__aeabi_dmul>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
			quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8003dba:	4610      	mov	r0, r2
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f7fc ff1b 	bl	8000bf8 <__aeabi_d2f>
 8003dc2:	4606      	mov	r6, r0
					gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8003dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <main+0x3dc>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fc fbc5 	bl	8000558 <__aeabi_f2d>
 8003dce:	a31c      	add	r3, pc, #112	@ (adr r3, 8003e40 <main+0x368>)
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	f7fc fc18 	bl	8000608 <__aeabi_dmul>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
			quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	f7fc ff0a 	bl	8000bf8 <__aeabi_d2f>
 8003de4:	4680      	mov	r8, r0
						gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 8003de6:	4b33      	ldr	r3, [pc, #204]	@ (8003eb4 <main+0x3dc>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fc fbb4 	bl	8000558 <__aeabi_f2d>
 8003df0:	a313      	add	r3, pc, #76	@ (adr r3, 8003e40 <main+0x368>)
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	f7fc fc07 	bl	8000608 <__aeabi_dmul>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
			quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	f7fc fef9 	bl	8000bf8 <__aeabi_d2f>
 8003e06:	4603      	mov	r3, r0
 8003e08:	ee02 3a90 	vmov	s5, r3
 8003e0c:	ee02 8a10 	vmov	s4, r8
 8003e10:	ee01 6a90 	vmov	s3, r6
 8003e14:	eeb0 1a49 	vmov.f32	s2, s18
 8003e18:	eef0 0a68 	vmov.f32	s1, s17
 8003e1c:	eeb0 0a48 	vmov.f32	s0, s16
 8003e20:	4818      	ldr	r0, [pc, #96]	@ (8003e84 <main+0x3ac>)
 8003e22:	f002 f88f 	bl	8005f44 <quaternionUpdate>

			getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8003e26:	4b21      	ldr	r3, [pc, #132]	@ (8003eac <main+0x3d4>)
 8003e28:	ed93 8a00 	vldr	s16, [r3]
 8003e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003eac <main+0x3d4>)
 8003e2e:	edd3 8a01 	vldr	s17, [r3, #4]
 8003e32:	4b1e      	ldr	r3, [pc, #120]	@ (8003eac <main+0x3d4>)
 8003e34:	ed93 9a02 	vldr	s18, [r3, #8]
 8003e38:	e03e      	b.n	8003eb8 <main+0x3e0>
 8003e3a:	bf00      	nop
 8003e3c:	f3af 8000 	nop.w
 8003e40:	a2529d39 	.word	0xa2529d39
 8003e44:	3f91df46 	.word	0x3f91df46
 8003e48:	40020800 	.word	0x40020800
 8003e4c:	20000018 	.word	0x20000018
 8003e50:	43820000 	.word	0x43820000
 8003e54:	2000031c 	.word	0x2000031c
 8003e58:	20000334 	.word	0x20000334
 8003e5c:	2000034c 	.word	0x2000034c
 8003e60:	43800000 	.word	0x43800000
 8003e64:	20000364 	.word	0x20000364
 8003e68:	2000037c 	.word	0x2000037c
 8003e6c:	20000394 	.word	0x20000394
 8003e70:	42940000 	.word	0x42940000
 8003e74:	200002bc 	.word	0x200002bc
 8003e78:	200002dc 	.word	0x200002dc
 8003e7c:	200002fc 	.word	0x200002fc
 8003e80:	2000001c 	.word	0x2000001c
 8003e84:	20000230 	.word	0x20000230
 8003e88:	200002ac 	.word	0x200002ac
 8003e8c:	2000027c 	.word	0x2000027c
 8003e90:	20000260 	.word	0x20000260
 8003e94:	20000214 	.word	0x20000214
 8003e98:	200003ac 	.word	0x200003ac
 8003e9c:	2000052c 	.word	0x2000052c
 8003ea0:	20000b98 	.word	0x20000b98
 8003ea4:	20000b88 	.word	0x20000b88
 8003ea8:	20000b90 	.word	0x20000b90
 8003eac:	20000b60 	.word	0x20000b60
 8003eb0:	20000b6c 	.word	0x20000b6c
 8003eb4:	20000b78 	.word	0x20000b78
					accelLowPassFiltered_f32[2], gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8003eb8:	4b43      	ldr	r3, [pc, #268]	@ (8003fc8 <main+0x4f0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc fb4b 	bl	8000558 <__aeabi_f2d>
 8003ec2:	a33f      	add	r3, pc, #252	@ (adr r3, 8003fc0 <main+0x4e8>)
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	f7fc fb9e 	bl	8000608 <__aeabi_dmul>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
			getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f7fc fe90 	bl	8000bf8 <__aeabi_d2f>
 8003ed8:	4606      	mov	r6, r0
					accelLowPassFiltered_f32[2], gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8003eda:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc8 <main+0x4f0>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fc fb3a 	bl	8000558 <__aeabi_f2d>
 8003ee4:	a336      	add	r3, pc, #216	@ (adr r3, 8003fc0 <main+0x4e8>)
 8003ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eea:	f7fc fb8d 	bl	8000608 <__aeabi_dmul>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
			getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	f7fc fe7f 	bl	8000bf8 <__aeabi_d2f>
 8003efa:	4680      	mov	r8, r0
						gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 8003efc:	4b32      	ldr	r3, [pc, #200]	@ (8003fc8 <main+0x4f0>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc fb29 	bl	8000558 <__aeabi_f2d>
 8003f06:	a32e      	add	r3, pc, #184	@ (adr r3, 8003fc0 <main+0x4e8>)
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f7fc fb7c 	bl	8000608 <__aeabi_dmul>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
			getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8003f14:	4610      	mov	r0, r2
 8003f16:	4619      	mov	r1, r3
 8003f18:	f7fc fe6e 	bl	8000bf8 <__aeabi_d2f>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	ee02 3a90 	vmov	s5, r3
 8003f22:	ee02 8a10 	vmov	s4, r8
 8003f26:	ee01 6a90 	vmov	s3, r6
 8003f2a:	eeb0 1a49 	vmov.f32	s2, s18
 8003f2e:	eef0 0a68 	vmov.f32	s1, s17
 8003f32:	eeb0 0a48 	vmov.f32	s0, s16
 8003f36:	4a25      	ldr	r2, [pc, #148]	@ (8003fcc <main+0x4f4>)
 8003f38:	4925      	ldr	r1, [pc, #148]	@ (8003fd0 <main+0x4f8>)
 8003f3a:	4826      	ldr	r0, [pc, #152]	@ (8003fd4 <main+0x4fc>)
 8003f3c:	f7fe ffe2 	bl	8002f04 <getFusionAHRS_6DoF>

			newData_u8 = TRUE; //Set newData to high for activate UART printer
 8003f40:	2301      	movs	r3, #1
 8003f42:	71fb      	strb	r3, [r7, #7]

		}//end of timer if

		if(newData_u8)
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01f      	beq.n	8003f8a <main+0x4b2>
		{
			printf("%f, %f, %f\r\n",
					quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8003f4a:	4b23      	ldr	r3, [pc, #140]	@ (8003fd8 <main+0x500>)
 8003f4c:	699b      	ldr	r3, [r3, #24]
			printf("%f, %f, %f\r\n",
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fc fb02 	bl	8000558 <__aeabi_f2d>
 8003f54:	4682      	mov	sl, r0
 8003f56:	468b      	mov	fp, r1
					quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8003f58:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd8 <main+0x500>)
 8003f5a:	695b      	ldr	r3, [r3, #20]
			printf("%f, %f, %f\r\n",
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fc fafb 	bl	8000558 <__aeabi_f2d>
 8003f62:	4680      	mov	r8, r0
 8003f64:	4689      	mov	r9, r1
					quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8003f66:	4b1c      	ldr	r3, [pc, #112]	@ (8003fd8 <main+0x500>)
 8003f68:	69db      	ldr	r3, [r3, #28]
			printf("%f, %f, %f\r\n",
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fc faf4 	bl	8000558 <__aeabi_f2d>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f78:	e9cd 8900 	strd	r8, r9, [sp]
 8003f7c:	4652      	mov	r2, sl
 8003f7e:	465b      	mov	r3, fp
 8003f80:	4816      	ldr	r0, [pc, #88]	@ (8003fdc <main+0x504>)
 8003f82:	f008 f919 	bl	800c1b8 <iprintf>
	//				AHRS_IMU1.YAW, AHRS_IMU1.PITCH, AHRS_IMU1.ROLL);
			newData_u8 = FALSE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	71fb      	strb	r3, [r7, #7]
		}

		bitis = Timer_GetElapsed(&htim11, baslangic);
 8003f8a:	4b15      	ldr	r3, [pc, #84]	@ (8003fe0 <main+0x508>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4814      	ldr	r0, [pc, #80]	@ (8003fe4 <main+0x50c>)
 8003f92:	f000 fbbb 	bl	800470c <Timer_GetElapsed>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4a13      	ldr	r2, [pc, #76]	@ (8003fe8 <main+0x510>)
 8003f9a:	6013      	str	r3, [r2, #0]
		HAL_Delay(2);
 8003f9c:	2002      	movs	r0, #2
 8003f9e:	f003 f853 	bl	8007048 <HAL_Delay>
		bitis2 = Timer_GetElapsed(&htim11, baslangic);
 8003fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe0 <main+0x508>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	480e      	ldr	r0, [pc, #56]	@ (8003fe4 <main+0x50c>)
 8003faa:	f000 fbaf 	bl	800470c <Timer_GetElapsed>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4a0e      	ldr	r2, [pc, #56]	@ (8003fec <main+0x514>)
 8003fb2:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim11, 0);
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe4 <main+0x50c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	625a      	str	r2, [r3, #36]	@ 0x24
	  baslangic = __HAL_TIM_GET_COUNTER(&htim11);
 8003fbc:	e63f      	b.n	8003c3e <main+0x166>
 8003fbe:	bf00      	nop
 8003fc0:	a2529d39 	.word	0xa2529d39
 8003fc4:	3f91df46 	.word	0x3f91df46
 8003fc8:	20000b78 	.word	0x20000b78
 8003fcc:	200002ac 	.word	0x200002ac
 8003fd0:	2000027c 	.word	0x2000027c
 8003fd4:	20000260 	.word	0x20000260
 8003fd8:	20000230 	.word	0x20000230
 8003fdc:	0801253c 	.word	0x0801253c
 8003fe0:	20000b98 	.word	0x20000b98
 8003fe4:	2000052c 	.word	0x2000052c
 8003fe8:	20000b9c 	.word	0x20000b9c
 8003fec:	20000ba0 	.word	0x20000ba0

08003ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b094      	sub	sp, #80	@ 0x50
 8003ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ff6:	f107 0320 	add.w	r3, r7, #32
 8003ffa:	2230      	movs	r2, #48	@ 0x30
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	f008 f951 	bl	800c2a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004004:	f107 030c 	add.w	r3, r7, #12
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004014:	2300      	movs	r3, #0
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	4b27      	ldr	r3, [pc, #156]	@ (80040b8 <SystemClock_Config+0xc8>)
 800401a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401c:	4a26      	ldr	r2, [pc, #152]	@ (80040b8 <SystemClock_Config+0xc8>)
 800401e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004022:	6413      	str	r3, [r2, #64]	@ 0x40
 8004024:	4b24      	ldr	r3, [pc, #144]	@ (80040b8 <SystemClock_Config+0xc8>)
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004030:	2300      	movs	r3, #0
 8004032:	607b      	str	r3, [r7, #4]
 8004034:	4b21      	ldr	r3, [pc, #132]	@ (80040bc <SystemClock_Config+0xcc>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a20      	ldr	r2, [pc, #128]	@ (80040bc <SystemClock_Config+0xcc>)
 800403a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	4b1e      	ldr	r3, [pc, #120]	@ (80040bc <SystemClock_Config+0xcc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800404c:	2301      	movs	r3, #1
 800404e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004050:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004056:	2302      	movs	r3, #2
 8004058:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800405a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800405e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004060:	2319      	movs	r3, #25
 8004062:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004064:	23c0      	movs	r3, #192	@ 0xc0
 8004066:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004068:	2302      	movs	r3, #2
 800406a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800406c:	2304      	movs	r3, #4
 800406e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004070:	f107 0320 	add.w	r3, r7, #32
 8004074:	4618      	mov	r0, r3
 8004076:	f004 fea9 	bl	8008dcc <HAL_RCC_OscConfig>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004080:	f000 fb70 	bl	8004764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004084:	230f      	movs	r3, #15
 8004086:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004088:	2302      	movs	r3, #2
 800408a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004094:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800409a:	f107 030c 	add.w	r3, r7, #12
 800409e:	2103      	movs	r1, #3
 80040a0:	4618      	mov	r0, r3
 80040a2:	f005 f90b 	bl	80092bc <HAL_RCC_ClockConfig>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80040ac:	f000 fb5a 	bl	8004764 <Error_Handler>
  }
}
 80040b0:	bf00      	nop
 80040b2:	3750      	adds	r7, #80	@ 0x50
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40007000 	.word	0x40007000

080040c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80040c4:	4b12      	ldr	r3, [pc, #72]	@ (8004110 <MX_I2C2_Init+0x50>)
 80040c6:	4a13      	ldr	r2, [pc, #76]	@ (8004114 <MX_I2C2_Init+0x54>)
 80040c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80040ca:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <MX_I2C2_Init+0x50>)
 80040cc:	4a12      	ldr	r2, [pc, #72]	@ (8004118 <MX_I2C2_Init+0x58>)
 80040ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80040d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004110 <MX_I2C2_Init+0x50>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80040d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004110 <MX_I2C2_Init+0x50>)
 80040d8:	2200      	movs	r2, #0
 80040da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004110 <MX_I2C2_Init+0x50>)
 80040de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80040e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004110 <MX_I2C2_Init+0x50>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80040ea:	4b09      	ldr	r3, [pc, #36]	@ (8004110 <MX_I2C2_Init+0x50>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040f0:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <MX_I2C2_Init+0x50>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040f6:	4b06      	ldr	r3, [pc, #24]	@ (8004110 <MX_I2C2_Init+0x50>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80040fc:	4804      	ldr	r0, [pc, #16]	@ (8004110 <MX_I2C2_Init+0x50>)
 80040fe:	f003 fd31 	bl	8007b64 <HAL_I2C_Init>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004108:	f000 fb2c 	bl	8004764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800410c:	bf00      	nop
 800410e:	bd80      	pop	{r7, pc}
 8004110:	200003ac 	.word	0x200003ac
 8004114:	40005800 	.word	0x40005800
 8004118:	00061a80 	.word	0x00061a80

0800411c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004120:	4b12      	ldr	r3, [pc, #72]	@ (800416c <MX_I2C3_Init+0x50>)
 8004122:	4a13      	ldr	r2, [pc, #76]	@ (8004170 <MX_I2C3_Init+0x54>)
 8004124:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8004126:	4b11      	ldr	r3, [pc, #68]	@ (800416c <MX_I2C3_Init+0x50>)
 8004128:	4a12      	ldr	r2, [pc, #72]	@ (8004174 <MX_I2C3_Init+0x58>)
 800412a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800412c:	4b0f      	ldr	r3, [pc, #60]	@ (800416c <MX_I2C3_Init+0x50>)
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004132:	4b0e      	ldr	r3, [pc, #56]	@ (800416c <MX_I2C3_Init+0x50>)
 8004134:	2200      	movs	r2, #0
 8004136:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004138:	4b0c      	ldr	r3, [pc, #48]	@ (800416c <MX_I2C3_Init+0x50>)
 800413a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800413e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004140:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <MX_I2C3_Init+0x50>)
 8004142:	2200      	movs	r2, #0
 8004144:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004146:	4b09      	ldr	r3, [pc, #36]	@ (800416c <MX_I2C3_Init+0x50>)
 8004148:	2200      	movs	r2, #0
 800414a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800414c:	4b07      	ldr	r3, [pc, #28]	@ (800416c <MX_I2C3_Init+0x50>)
 800414e:	2200      	movs	r2, #0
 8004150:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <MX_I2C3_Init+0x50>)
 8004154:	2200      	movs	r2, #0
 8004156:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004158:	4804      	ldr	r0, [pc, #16]	@ (800416c <MX_I2C3_Init+0x50>)
 800415a:	f003 fd03 	bl	8007b64 <HAL_I2C_Init>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004164:	f000 fafe 	bl	8004764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004168:	bf00      	nop
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000400 	.word	0x20000400
 8004170:	40005c00 	.word	0x40005c00
 8004174:	00061a80 	.word	0x00061a80

08004178 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	@ 0x38
 800417c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800417e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	609a      	str	r2, [r3, #8]
 800418a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800418c:	f107 0320 	add.w	r3, r7, #32
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004196:	1d3b      	adds	r3, r7, #4
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	60da      	str	r2, [r3, #12]
 80041a2:	611a      	str	r2, [r3, #16]
 80041a4:	615a      	str	r2, [r3, #20]
 80041a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041a8:	4b3d      	ldr	r3, [pc, #244]	@ (80042a0 <MX_TIM2_Init+0x128>)
 80041aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80041ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 80041b0:	4b3b      	ldr	r3, [pc, #236]	@ (80042a0 <MX_TIM2_Init+0x128>)
 80041b2:	225f      	movs	r2, #95	@ 0x5f
 80041b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b6:	4b3a      	ldr	r3, [pc, #232]	@ (80042a0 <MX_TIM2_Init+0x128>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80041bc:	4b38      	ldr	r3, [pc, #224]	@ (80042a0 <MX_TIM2_Init+0x128>)
 80041be:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80041c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041c4:	4b36      	ldr	r3, [pc, #216]	@ (80042a0 <MX_TIM2_Init+0x128>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ca:	4b35      	ldr	r3, [pc, #212]	@ (80042a0 <MX_TIM2_Init+0x128>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041d0:	4833      	ldr	r0, [pc, #204]	@ (80042a0 <MX_TIM2_Init+0x128>)
 80041d2:	f005 fa85 	bl	80096e0 <HAL_TIM_Base_Init>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80041dc:	f000 fac2 	bl	8004764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041ea:	4619      	mov	r1, r3
 80041ec:	482c      	ldr	r0, [pc, #176]	@ (80042a0 <MX_TIM2_Init+0x128>)
 80041ee:	f005 fd8f 	bl	8009d10 <HAL_TIM_ConfigClockSource>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80041f8:	f000 fab4 	bl	8004764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80041fc:	4828      	ldr	r0, [pc, #160]	@ (80042a0 <MX_TIM2_Init+0x128>)
 80041fe:	f005 fb7b 	bl	80098f8 <HAL_TIM_PWM_Init>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004208:	f000 faac 	bl	8004764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800420c:	2300      	movs	r3, #0
 800420e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004210:	2300      	movs	r3, #0
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004214:	f107 0320 	add.w	r3, r7, #32
 8004218:	4619      	mov	r1, r3
 800421a:	4821      	ldr	r0, [pc, #132]	@ (80042a0 <MX_TIM2_Init+0x128>)
 800421c:	f006 f91a 	bl	800a454 <HAL_TIMEx_MasterConfigSynchronization>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004226:	f000 fa9d 	bl	8004764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800422a:	2360      	movs	r3, #96	@ 0x60
 800422c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800423a:	1d3b      	adds	r3, r7, #4
 800423c:	2200      	movs	r2, #0
 800423e:	4619      	mov	r1, r3
 8004240:	4817      	ldr	r0, [pc, #92]	@ (80042a0 <MX_TIM2_Init+0x128>)
 8004242:	f005 fca3 	bl	8009b8c <HAL_TIM_PWM_ConfigChannel>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800424c:	f000 fa8a 	bl	8004764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004250:	1d3b      	adds	r3, r7, #4
 8004252:	2204      	movs	r2, #4
 8004254:	4619      	mov	r1, r3
 8004256:	4812      	ldr	r0, [pc, #72]	@ (80042a0 <MX_TIM2_Init+0x128>)
 8004258:	f005 fc98 	bl	8009b8c <HAL_TIM_PWM_ConfigChannel>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8004262:	f000 fa7f 	bl	8004764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004266:	1d3b      	adds	r3, r7, #4
 8004268:	2208      	movs	r2, #8
 800426a:	4619      	mov	r1, r3
 800426c:	480c      	ldr	r0, [pc, #48]	@ (80042a0 <MX_TIM2_Init+0x128>)
 800426e:	f005 fc8d 	bl	8009b8c <HAL_TIM_PWM_ConfigChannel>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8004278:	f000 fa74 	bl	8004764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800427c:	1d3b      	adds	r3, r7, #4
 800427e:	220c      	movs	r2, #12
 8004280:	4619      	mov	r1, r3
 8004282:	4807      	ldr	r0, [pc, #28]	@ (80042a0 <MX_TIM2_Init+0x128>)
 8004284:	f005 fc82 	bl	8009b8c <HAL_TIM_PWM_ConfigChannel>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800428e:	f000 fa69 	bl	8004764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004292:	4803      	ldr	r0, [pc, #12]	@ (80042a0 <MX_TIM2_Init+0x128>)
 8004294:	f002 fb50 	bl	8006938 <HAL_TIM_MspPostInit>

}
 8004298:	bf00      	nop
 800429a:	3738      	adds	r7, #56	@ 0x38
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20000454 	.word	0x20000454

080042a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08e      	sub	sp, #56	@ 0x38
 80042a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	605a      	str	r2, [r3, #4]
 80042b4:	609a      	str	r2, [r3, #8]
 80042b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042b8:	f107 0320 	add.w	r3, r7, #32
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	60da      	str	r2, [r3, #12]
 80042ce:	611a      	str	r2, [r3, #16]
 80042d0:	615a      	str	r2, [r3, #20]
 80042d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80042d4:	4b3d      	ldr	r3, [pc, #244]	@ (80043cc <MX_TIM3_Init+0x128>)
 80042d6:	4a3e      	ldr	r2, [pc, #248]	@ (80043d0 <MX_TIM3_Init+0x12c>)
 80042d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 80042da:	4b3c      	ldr	r3, [pc, #240]	@ (80043cc <MX_TIM3_Init+0x128>)
 80042dc:	225f      	movs	r2, #95	@ 0x5f
 80042de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e0:	4b3a      	ldr	r3, [pc, #232]	@ (80043cc <MX_TIM3_Init+0x128>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80042e6:	4b39      	ldr	r3, [pc, #228]	@ (80043cc <MX_TIM3_Init+0x128>)
 80042e8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80042ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042ee:	4b37      	ldr	r3, [pc, #220]	@ (80043cc <MX_TIM3_Init+0x128>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042f4:	4b35      	ldr	r3, [pc, #212]	@ (80043cc <MX_TIM3_Init+0x128>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80042fa:	4834      	ldr	r0, [pc, #208]	@ (80043cc <MX_TIM3_Init+0x128>)
 80042fc:	f005 f9f0 	bl	80096e0 <HAL_TIM_Base_Init>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004306:	f000 fa2d 	bl	8004764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800430a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800430e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004310:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004314:	4619      	mov	r1, r3
 8004316:	482d      	ldr	r0, [pc, #180]	@ (80043cc <MX_TIM3_Init+0x128>)
 8004318:	f005 fcfa 	bl	8009d10 <HAL_TIM_ConfigClockSource>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004322:	f000 fa1f 	bl	8004764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004326:	4829      	ldr	r0, [pc, #164]	@ (80043cc <MX_TIM3_Init+0x128>)
 8004328:	f005 fae6 	bl	80098f8 <HAL_TIM_PWM_Init>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004332:	f000 fa17 	bl	8004764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800433a:	2300      	movs	r3, #0
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800433e:	f107 0320 	add.w	r3, r7, #32
 8004342:	4619      	mov	r1, r3
 8004344:	4821      	ldr	r0, [pc, #132]	@ (80043cc <MX_TIM3_Init+0x128>)
 8004346:	f006 f885 	bl	800a454 <HAL_TIMEx_MasterConfigSynchronization>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004350:	f000 fa08 	bl	8004764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004354:	2360      	movs	r3, #96	@ 0x60
 8004356:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	2200      	movs	r2, #0
 8004368:	4619      	mov	r1, r3
 800436a:	4818      	ldr	r0, [pc, #96]	@ (80043cc <MX_TIM3_Init+0x128>)
 800436c:	f005 fc0e 	bl	8009b8c <HAL_TIM_PWM_ConfigChannel>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004376:	f000 f9f5 	bl	8004764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800437a:	1d3b      	adds	r3, r7, #4
 800437c:	2204      	movs	r2, #4
 800437e:	4619      	mov	r1, r3
 8004380:	4812      	ldr	r0, [pc, #72]	@ (80043cc <MX_TIM3_Init+0x128>)
 8004382:	f005 fc03 	bl	8009b8c <HAL_TIM_PWM_ConfigChannel>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800438c:	f000 f9ea 	bl	8004764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	2208      	movs	r2, #8
 8004394:	4619      	mov	r1, r3
 8004396:	480d      	ldr	r0, [pc, #52]	@ (80043cc <MX_TIM3_Init+0x128>)
 8004398:	f005 fbf8 	bl	8009b8c <HAL_TIM_PWM_ConfigChannel>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80043a2:	f000 f9df 	bl	8004764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80043a6:	1d3b      	adds	r3, r7, #4
 80043a8:	220c      	movs	r2, #12
 80043aa:	4619      	mov	r1, r3
 80043ac:	4807      	ldr	r0, [pc, #28]	@ (80043cc <MX_TIM3_Init+0x128>)
 80043ae:	f005 fbed 	bl	8009b8c <HAL_TIM_PWM_ConfigChannel>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80043b8:	f000 f9d4 	bl	8004764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80043bc:	4803      	ldr	r0, [pc, #12]	@ (80043cc <MX_TIM3_Init+0x128>)
 80043be:	f002 fabb 	bl	8006938 <HAL_TIM_MspPostInit>

}
 80043c2:	bf00      	nop
 80043c4:	3738      	adds	r7, #56	@ 0x38
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	2000049c 	.word	0x2000049c
 80043d0:	40000400 	.word	0x40000400

080043d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08e      	sub	sp, #56	@ 0x38
 80043d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043e8:	f107 0320 	add.w	r3, r7, #32
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043f2:	1d3b      	adds	r3, r7, #4
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	60da      	str	r2, [r3, #12]
 80043fe:	611a      	str	r2, [r3, #16]
 8004400:	615a      	str	r2, [r3, #20]
 8004402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004404:	4b3d      	ldr	r3, [pc, #244]	@ (80044fc <MX_TIM4_Init+0x128>)
 8004406:	4a3e      	ldr	r2, [pc, #248]	@ (8004500 <MX_TIM4_Init+0x12c>)
 8004408:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 960-1;
 800440a:	4b3c      	ldr	r3, [pc, #240]	@ (80044fc <MX_TIM4_Init+0x128>)
 800440c:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8004410:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004412:	4b3a      	ldr	r3, [pc, #232]	@ (80044fc <MX_TIM4_Init+0x128>)
 8004414:	2200      	movs	r2, #0
 8004416:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8004418:	4b38      	ldr	r3, [pc, #224]	@ (80044fc <MX_TIM4_Init+0x128>)
 800441a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800441e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004420:	4b36      	ldr	r3, [pc, #216]	@ (80044fc <MX_TIM4_Init+0x128>)
 8004422:	2200      	movs	r2, #0
 8004424:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004426:	4b35      	ldr	r3, [pc, #212]	@ (80044fc <MX_TIM4_Init+0x128>)
 8004428:	2200      	movs	r2, #0
 800442a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800442c:	4833      	ldr	r0, [pc, #204]	@ (80044fc <MX_TIM4_Init+0x128>)
 800442e:	f005 f957 	bl	80096e0 <HAL_TIM_Base_Init>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004438:	f000 f994 	bl	8004764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800443c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004440:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004442:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004446:	4619      	mov	r1, r3
 8004448:	482c      	ldr	r0, [pc, #176]	@ (80044fc <MX_TIM4_Init+0x128>)
 800444a:	f005 fc61 	bl	8009d10 <HAL_TIM_ConfigClockSource>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004454:	f000 f986 	bl	8004764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004458:	4828      	ldr	r0, [pc, #160]	@ (80044fc <MX_TIM4_Init+0x128>)
 800445a:	f005 fa4d 	bl	80098f8 <HAL_TIM_PWM_Init>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004464:	f000 f97e 	bl	8004764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004468:	2300      	movs	r3, #0
 800446a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800446c:	2300      	movs	r3, #0
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004470:	f107 0320 	add.w	r3, r7, #32
 8004474:	4619      	mov	r1, r3
 8004476:	4821      	ldr	r0, [pc, #132]	@ (80044fc <MX_TIM4_Init+0x128>)
 8004478:	f005 ffec 	bl	800a454 <HAL_TIMEx_MasterConfigSynchronization>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004482:	f000 f96f 	bl	8004764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004486:	2360      	movs	r3, #96	@ 0x60
 8004488:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004496:	1d3b      	adds	r3, r7, #4
 8004498:	2200      	movs	r2, #0
 800449a:	4619      	mov	r1, r3
 800449c:	4817      	ldr	r0, [pc, #92]	@ (80044fc <MX_TIM4_Init+0x128>)
 800449e:	f005 fb75 	bl	8009b8c <HAL_TIM_PWM_ConfigChannel>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80044a8:	f000 f95c 	bl	8004764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80044ac:	1d3b      	adds	r3, r7, #4
 80044ae:	2204      	movs	r2, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4812      	ldr	r0, [pc, #72]	@ (80044fc <MX_TIM4_Init+0x128>)
 80044b4:	f005 fb6a 	bl	8009b8c <HAL_TIM_PWM_ConfigChannel>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80044be:	f000 f951 	bl	8004764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80044c2:	1d3b      	adds	r3, r7, #4
 80044c4:	2208      	movs	r2, #8
 80044c6:	4619      	mov	r1, r3
 80044c8:	480c      	ldr	r0, [pc, #48]	@ (80044fc <MX_TIM4_Init+0x128>)
 80044ca:	f005 fb5f 	bl	8009b8c <HAL_TIM_PWM_ConfigChannel>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80044d4:	f000 f946 	bl	8004764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80044d8:	1d3b      	adds	r3, r7, #4
 80044da:	220c      	movs	r2, #12
 80044dc:	4619      	mov	r1, r3
 80044de:	4807      	ldr	r0, [pc, #28]	@ (80044fc <MX_TIM4_Init+0x128>)
 80044e0:	f005 fb54 	bl	8009b8c <HAL_TIM_PWM_ConfigChannel>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 80044ea:	f000 f93b 	bl	8004764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80044ee:	4803      	ldr	r0, [pc, #12]	@ (80044fc <MX_TIM4_Init+0x128>)
 80044f0:	f002 fa22 	bl	8006938 <HAL_TIM_MspPostInit>

}
 80044f4:	bf00      	nop
 80044f6:	3738      	adds	r7, #56	@ 0x38
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	200004e4 	.word	0x200004e4
 8004500:	40000800 	.word	0x40000800

08004504 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004508:	4b0e      	ldr	r3, [pc, #56]	@ (8004544 <MX_TIM11_Init+0x40>)
 800450a:	4a0f      	ldr	r2, [pc, #60]	@ (8004548 <MX_TIM11_Init+0x44>)
 800450c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 96-1;
 800450e:	4b0d      	ldr	r3, [pc, #52]	@ (8004544 <MX_TIM11_Init+0x40>)
 8004510:	225f      	movs	r2, #95	@ 0x5f
 8004512:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004514:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <MX_TIM11_Init+0x40>)
 8004516:	2200      	movs	r2, #0
 8004518:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 50000;
 800451a:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <MX_TIM11_Init+0x40>)
 800451c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004520:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004522:	4b08      	ldr	r3, [pc, #32]	@ (8004544 <MX_TIM11_Init+0x40>)
 8004524:	2200      	movs	r2, #0
 8004526:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004528:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <MX_TIM11_Init+0x40>)
 800452a:	2200      	movs	r2, #0
 800452c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800452e:	4805      	ldr	r0, [pc, #20]	@ (8004544 <MX_TIM11_Init+0x40>)
 8004530:	f005 f8d6 	bl	80096e0 <HAL_TIM_Base_Init>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800453a:	f000 f913 	bl	8004764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	2000052c 	.word	0x2000052c
 8004548:	40014800 	.word	0x40014800

0800454c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004550:	4b11      	ldr	r3, [pc, #68]	@ (8004598 <MX_USART1_UART_Init+0x4c>)
 8004552:	4a12      	ldr	r2, [pc, #72]	@ (800459c <MX_USART1_UART_Init+0x50>)
 8004554:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004556:	4b10      	ldr	r3, [pc, #64]	@ (8004598 <MX_USART1_UART_Init+0x4c>)
 8004558:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800455c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800455e:	4b0e      	ldr	r3, [pc, #56]	@ (8004598 <MX_USART1_UART_Init+0x4c>)
 8004560:	2200      	movs	r2, #0
 8004562:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004564:	4b0c      	ldr	r3, [pc, #48]	@ (8004598 <MX_USART1_UART_Init+0x4c>)
 8004566:	2200      	movs	r2, #0
 8004568:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800456a:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <MX_USART1_UART_Init+0x4c>)
 800456c:	2200      	movs	r2, #0
 800456e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004570:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <MX_USART1_UART_Init+0x4c>)
 8004572:	220c      	movs	r2, #12
 8004574:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004576:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <MX_USART1_UART_Init+0x4c>)
 8004578:	2200      	movs	r2, #0
 800457a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800457c:	4b06      	ldr	r3, [pc, #24]	@ (8004598 <MX_USART1_UART_Init+0x4c>)
 800457e:	2200      	movs	r2, #0
 8004580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004582:	4805      	ldr	r0, [pc, #20]	@ (8004598 <MX_USART1_UART_Init+0x4c>)
 8004584:	f005 ffe8 	bl	800a558 <HAL_UART_Init>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800458e:	f000 f8e9 	bl	8004764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004592:	bf00      	nop
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000574 	.word	0x20000574
 800459c:	40011000 	.word	0x40011000

080045a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80045a4:	4b14      	ldr	r3, [pc, #80]	@ (80045f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80045a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80045aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80045ac:	4b12      	ldr	r3, [pc, #72]	@ (80045f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80045ae:	2204      	movs	r2, #4
 80045b0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80045b2:	4b11      	ldr	r3, [pc, #68]	@ (80045f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80045b4:	2202      	movs	r2, #2
 80045b6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80045b8:	4b0f      	ldr	r3, [pc, #60]	@ (80045f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80045be:	4b0e      	ldr	r3, [pc, #56]	@ (80045f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80045c0:	2202      	movs	r2, #2
 80045c2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80045c4:	4b0c      	ldr	r3, [pc, #48]	@ (80045f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80045ca:	4b0b      	ldr	r3, [pc, #44]	@ (80045f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80045d0:	4b09      	ldr	r3, [pc, #36]	@ (80045f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80045d6:	4b08      	ldr	r3, [pc, #32]	@ (80045f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80045d8:	2200      	movs	r2, #0
 80045da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80045dc:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80045de:	2200      	movs	r2, #0
 80045e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80045e2:	4805      	ldr	r0, [pc, #20]	@ (80045f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80045e4:	f004 fae2 	bl	8008bac <HAL_PCD_Init>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80045ee:	f000 f8b9 	bl	8004764 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80045f2:	bf00      	nop
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	2000067c 	.word	0x2000067c

080045fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	4b10      	ldr	r3, [pc, #64]	@ (8004648 <MX_DMA_Init+0x4c>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	4a0f      	ldr	r2, [pc, #60]	@ (8004648 <MX_DMA_Init+0x4c>)
 800460c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004610:	6313      	str	r3, [r2, #48]	@ 0x30
 8004612:	4b0d      	ldr	r3, [pc, #52]	@ (8004648 <MX_DMA_Init+0x4c>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800461a:	607b      	str	r3, [r7, #4]
 800461c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800461e:	2200      	movs	r2, #0
 8004620:	2100      	movs	r1, #0
 8004622:	203a      	movs	r0, #58	@ 0x3a
 8004624:	f002 fdec 	bl	8007200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004628:	203a      	movs	r0, #58	@ 0x3a
 800462a:	f002 fe05 	bl	8007238 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800462e:	2200      	movs	r2, #0
 8004630:	2100      	movs	r1, #0
 8004632:	2046      	movs	r0, #70	@ 0x46
 8004634:	f002 fde4 	bl	8007200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004638:	2046      	movs	r0, #70	@ 0x46
 800463a:	f002 fdfd 	bl	8007238 <HAL_NVIC_EnableIRQ>

}
 800463e:	bf00      	nop
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40023800 	.word	0x40023800

0800464c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	@ 0x28
 8004650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004652:	f107 0314 	add.w	r3, r7, #20
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	605a      	str	r2, [r3, #4]
 800465c:	609a      	str	r2, [r3, #8]
 800465e:	60da      	str	r2, [r3, #12]
 8004660:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004662:	2300      	movs	r3, #0
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	4b27      	ldr	r3, [pc, #156]	@ (8004704 <MX_GPIO_Init+0xb8>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	4a26      	ldr	r2, [pc, #152]	@ (8004704 <MX_GPIO_Init+0xb8>)
 800466c:	f043 0304 	orr.w	r3, r3, #4
 8004670:	6313      	str	r3, [r2, #48]	@ 0x30
 8004672:	4b24      	ldr	r3, [pc, #144]	@ (8004704 <MX_GPIO_Init+0xb8>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	4b20      	ldr	r3, [pc, #128]	@ (8004704 <MX_GPIO_Init+0xb8>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004686:	4a1f      	ldr	r2, [pc, #124]	@ (8004704 <MX_GPIO_Init+0xb8>)
 8004688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800468c:	6313      	str	r3, [r2, #48]	@ 0x30
 800468e:	4b1d      	ldr	r3, [pc, #116]	@ (8004704 <MX_GPIO_Init+0xb8>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	4b19      	ldr	r3, [pc, #100]	@ (8004704 <MX_GPIO_Init+0xb8>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a2:	4a18      	ldr	r2, [pc, #96]	@ (8004704 <MX_GPIO_Init+0xb8>)
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80046aa:	4b16      	ldr	r3, [pc, #88]	@ (8004704 <MX_GPIO_Init+0xb8>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	607b      	str	r3, [r7, #4]
 80046ba:	4b12      	ldr	r3, [pc, #72]	@ (8004704 <MX_GPIO_Init+0xb8>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046be:	4a11      	ldr	r2, [pc, #68]	@ (8004704 <MX_GPIO_Init+0xb8>)
 80046c0:	f043 0302 	orr.w	r3, r3, #2
 80046c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80046c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004704 <MX_GPIO_Init+0xb8>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	607b      	str	r3, [r7, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80046d2:	2200      	movs	r2, #0
 80046d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046d8:	480b      	ldr	r0, [pc, #44]	@ (8004708 <MX_GPIO_Init+0xbc>)
 80046da:	f003 fa29 	bl	8007b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80046de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046e4:	2301      	movs	r3, #1
 80046e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ec:	2300      	movs	r3, #0
 80046ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046f0:	f107 0314 	add.w	r3, r7, #20
 80046f4:	4619      	mov	r1, r3
 80046f6:	4804      	ldr	r0, [pc, #16]	@ (8004708 <MX_GPIO_Init+0xbc>)
 80046f8:	f003 f896 	bl	8007828 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80046fc:	bf00      	nop
 80046fe:	3728      	adds	r7, #40	@ 0x28
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40023800 	.word	0x40023800
 8004708:	40020800 	.word	0x40020800

0800470c <Timer_GetElapsed>:

/* USER CODE BEGIN 4 */
uint32_t Timer_GetElapsed(TIM_HandleTypeDef *htim, uint32_t timer_start) {
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
    uint32_t timer_end = __HAL_TIM_GET_COUNTER(htim);  // Timer pointer'ı ile sayaç değeri alınır
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471c:	60fb      	str	r3, [r7, #12]

    if (timer_end >= timer_start) {
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d303      	bcc.n	800472e <Timer_GetElapsed+0x22>
        return timer_end - timer_start;
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	e002      	b.n	8004734 <Timer_GetElapsed+0x28>
    } else {
        return (0xFFFFFFFF - timer_start) + timer_end + 1;
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	1ad3      	subs	r3, r2, r3
    }
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a04      	ldr	r2, [pc, #16]	@ (8004760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d101      	bne.n	8004756 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8004752:	f002 fc59 	bl	8007008 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40010000 	.word	0x40010000

08004764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004768:	b672      	cpsid	i
}
 800476a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800476c:	bf00      	nop
 800476e:	e7fd      	b.n	800476c <Error_Handler+0x8>

08004770 <MPU6050_Init>:
float aRes_MPU6050, gRes_MPU6050;      // scale resolutions per LSB for the sensors
float gyroBias_MPU6050[3] = {0, 0, 0}, accelBias_MPU6050[3] = {0, 0, 0};      // Bias corrections for gyro and accelerometer
float SelfTest_MPU6050[12];    // holds results of gyro and accelerometer self test

// Main Init function
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct){
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af04      	add	r7, sp, #16
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]

	// Init user variables
	DataStruct->CALIBRATIN_OK_u8 = 0;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2200      	movs	r2, #0
 800477e:	761a      	strb	r2, [r3, #24]

	uint8_t readData;

	//read MPU6050 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, WHO_AM_I_MPU6050, 1, &readData, 1, i2c_timeout);
 8004780:	2364      	movs	r3, #100	@ 0x64
 8004782:	9302      	str	r3, [sp, #8]
 8004784:	2301      	movs	r3, #1
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	f107 030f 	add.w	r3, r7, #15
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	2301      	movs	r3, #1
 8004790:	2275      	movs	r2, #117	@ 0x75
 8004792:	21d0      	movs	r1, #208	@ 0xd0
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f003 fc23 	bl	8007fe0 <HAL_I2C_Mem_Read>

	if (readData == 104) {
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2b68      	cmp	r3, #104	@ 0x68
 800479e:	d11d      	bne.n	80047dc <MPU6050_Init+0x6c>

		//Start by performing self test and reporting values
		MPU6050SelfTest(I2Cx, SelfTest_MPU6050);
 80047a0:	4911      	ldr	r1, [pc, #68]	@ (80047e8 <MPU6050_Init+0x78>)
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fe90 	bl	80054c8 <MPU6050SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU6050(I2Cx, DataStruct, gyroBias_MPU6050, accelBias_MPU6050);
 80047a8:	4b10      	ldr	r3, [pc, #64]	@ (80047ec <MPU6050_Init+0x7c>)
 80047aa:	4a11      	ldr	r2, [pc, #68]	@ (80047f0 <MPU6050_Init+0x80>)
 80047ac:	6839      	ldr	r1, [r7, #0]
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fa5a 	bl	8004c68 <calibrateMPU6050>
		HAL_Delay(1000);
 80047b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80047b8:	f002 fc46 	bl	8007048 <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU6050(I2Cx);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f903 	bl	80049c8 <initMPU6050>
		HAL_Delay(1000);
 80047c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80047c6:	f002 fc3f 	bl	8007048 <HAL_Delay>

		getMPU6050Ares();
 80047ca:	f000 f899 	bl	8004900 <getMPU6050Ares>
		getMPU6050Gres();
 80047ce:	f000 f8c7 	bl	8004960 <getMPU6050Gres>

		HAL_Delay(100);
 80047d2:	2064      	movs	r0, #100	@ 0x64
 80047d4:	f002 fc38 	bl	8007048 <HAL_Delay>

		return 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	e000      	b.n	80047de <MPU6050_Init+0x6e>
	}
	return 1; // Loop forever if communication doesn't happen
 80047dc:	2301      	movs	r3, #1
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000bd8 	.word	0x20000bd8
 80047ec:	20000bcc 	.word	0x20000bcc
 80047f0:	20000bc0 	.word	0x20000bc0

080047f4 <readMPU6050>:

// Data read function
void readMPU6050(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct) {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af04      	add	r7, sp, #16
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]

	uint8_t Data;
	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 80047fe:	2364      	movs	r3, #100	@ 0x64
 8004800:	9302      	str	r3, [sp, #8]
 8004802:	2301      	movs	r3, #1
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	f107 030f 	add.w	r3, r7, #15
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	2301      	movs	r3, #1
 800480e:	223a      	movs	r2, #58	@ 0x3a
 8004810:	21d0      	movs	r1, #208	@ 0xd0
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f003 fbe4 	bl	8007fe0 <HAL_I2C_Mem_Read>

	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d061      	beq.n	80048e6 <readMPU6050+0xf2>

		readMPU6050AccelData(I2Cx, accelRaw_MPU6050);  // Read the accelerometer x/y/z adc values
 8004822:	4933      	ldr	r1, [pc, #204]	@ (80048f0 <readMPU6050+0xfc>)
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f9b3 	bl	8004b90 <readMPU6050AccelData>
		readMPU6050GyroData(I2Cx, gyroRaw_MPU6050);  // Read the gyro x/y/z adc values
 800482a:	4932      	ldr	r1, [pc, #200]	@ (80048f4 <readMPU6050+0x100>)
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f9e5 	bl	8004bfc <readMPU6050GyroData>

		// Now we'll calculate the accleration value into actual g's
		DataStruct->MPU6050_Accel_f32[0] = (float)accelRaw_MPU6050[0]*aRes_MPU6050; //- accelBias_MPU6050[0];  // get actual g value, this depends on scale being set
 8004832:	4b2f      	ldr	r3, [pc, #188]	@ (80048f0 <readMPU6050+0xfc>)
 8004834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004838:	ee07 3a90 	vmov	s15, r3
 800483c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004840:	4b2d      	ldr	r3, [pc, #180]	@ (80048f8 <readMPU6050+0x104>)
 8004842:	edd3 7a00 	vldr	s15, [r3]
 8004846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	edc3 7a00 	vstr	s15, [r3]
		DataStruct->MPU6050_Accel_f32[1] = (float)accelRaw_MPU6050[1]*aRes_MPU6050; //- accelBias_MPU6050[1];
 8004850:	4b27      	ldr	r3, [pc, #156]	@ (80048f0 <readMPU6050+0xfc>)
 8004852:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800485e:	4b26      	ldr	r3, [pc, #152]	@ (80048f8 <readMPU6050+0x104>)
 8004860:	edd3 7a00 	vldr	s15, [r3]
 8004864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	edc3 7a01 	vstr	s15, [r3, #4]
		DataStruct->MPU6050_Accel_f32[2] = (float)accelRaw_MPU6050[2]*aRes_MPU6050; //- accelBias_MPU6050[2];
 800486e:	4b20      	ldr	r3, [pc, #128]	@ (80048f0 <readMPU6050+0xfc>)
 8004870:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800487c:	4b1e      	ldr	r3, [pc, #120]	@ (80048f8 <readMPU6050+0x104>)
 800487e:	edd3 7a00 	vldr	s15, [r3]
 8004882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	edc3 7a02 	vstr	s15, [r3, #8]

		// Calculate the gyro value into actual degrees per second
		DataStruct->MPU6050_Gyro_f32[0] = (float)gyroRaw_MPU6050[0]*gRes_MPU6050; //- gyroBias_MPU6050[0]; // get actual gyro value, this depends on scale being set
 800488c:	4b19      	ldr	r3, [pc, #100]	@ (80048f4 <readMPU6050+0x100>)
 800488e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800489a:	4b18      	ldr	r3, [pc, #96]	@ (80048fc <readMPU6050+0x108>)
 800489c:	edd3 7a00 	vldr	s15, [r3]
 80048a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	edc3 7a03 	vstr	s15, [r3, #12]
		DataStruct->MPU6050_Gyro_f32[1] = (float)gyroRaw_MPU6050[1]*gRes_MPU6050; //- gyroBias_MPU6050[1];
 80048aa:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <readMPU6050+0x100>)
 80048ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80048b0:	ee07 3a90 	vmov	s15, r3
 80048b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048b8:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <readMPU6050+0x108>)
 80048ba:	edd3 7a00 	vldr	s15, [r3]
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	edc3 7a04 	vstr	s15, [r3, #16]
		DataStruct->MPU6050_Gyro_f32[2] = (float)gyroRaw_MPU6050[2]*gRes_MPU6050; //- gyroBias_MPU6050[2];
 80048c8:	4b0a      	ldr	r3, [pc, #40]	@ (80048f4 <readMPU6050+0x100>)
 80048ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048d6:	4b09      	ldr	r3, [pc, #36]	@ (80048fc <readMPU6050+0x108>)
 80048d8:	edd3 7a00 	vldr	s15, [r3]
 80048dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	edc3 7a05 	vstr	s15, [r3, #20]
	}
}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000ba8 	.word	0x20000ba8
 80048f4:	20000bb0 	.word	0x20000bb0
 80048f8:	20000bb8 	.word	0x20000bb8
 80048fc:	20000bbc 	.word	0x20000bbc

08004900 <getMPU6050Ares>:

// Accelerometer resolution scale calculator function
void getMPU6050Ares() {
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  switch (Ascale_MPU6050)
 8004904:	4b14      	ldr	r3, [pc, #80]	@ (8004958 <getMPU6050Ares+0x58>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b03      	cmp	r3, #3
 800490a:	d81f      	bhi.n	800494c <getMPU6050Ares+0x4c>
 800490c:	a201      	add	r2, pc, #4	@ (adr r2, 8004914 <getMPU6050Ares+0x14>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004925 	.word	0x08004925
 8004918:	0800492f 	.word	0x0800492f
 800491c:	08004939 	.word	0x08004939
 8004920:	08004943 	.word	0x08004943
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes_MPU6050 = 2.0/32768.0;
 8004924:	4b0d      	ldr	r3, [pc, #52]	@ (800495c <getMPU6050Ares+0x5c>)
 8004926:	f04f 5262 	mov.w	r2, #947912704	@ 0x38800000
 800492a:	601a      	str	r2, [r3, #0]
          break;
 800492c:	e00e      	b.n	800494c <getMPU6050Ares+0x4c>
    case AFS_4G:
          aRes_MPU6050 = 4.0/32768.0;
 800492e:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <getMPU6050Ares+0x5c>)
 8004930:	f04f 5264 	mov.w	r2, #956301312	@ 0x39000000
 8004934:	601a      	str	r2, [r3, #0]
          break;
 8004936:	e009      	b.n	800494c <getMPU6050Ares+0x4c>
    case AFS_8G:
          aRes_MPU6050 = 8.0/32768.0;
 8004938:	4b08      	ldr	r3, [pc, #32]	@ (800495c <getMPU6050Ares+0x5c>)
 800493a:	f04f 5266 	mov.w	r2, #964689920	@ 0x39800000
 800493e:	601a      	str	r2, [r3, #0]
          break;
 8004940:	e004      	b.n	800494c <getMPU6050Ares+0x4c>
    case AFS_16G:
          aRes_MPU6050 = 16.0/32768.0;
 8004942:	4b06      	ldr	r3, [pc, #24]	@ (800495c <getMPU6050Ares+0x5c>)
 8004944:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 8004948:	601a      	str	r2, [r3, #0]
          break;
 800494a:	bf00      	nop
  }
}
 800494c:	bf00      	nop
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000ba5 	.word	0x20000ba5
 800495c:	20000bb8 	.word	0x20000bb8

08004960 <getMPU6050Gres>:

// Gyro resolution scale calculator function
void getMPU6050Gres() {
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  switch (Gscale_MPU6050)
 8004964:	4b12      	ldr	r3, [pc, #72]	@ (80049b0 <getMPU6050Gres+0x50>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b03      	cmp	r3, #3
 800496a:	d81b      	bhi.n	80049a4 <getMPU6050Gres+0x44>
 800496c:	a201      	add	r2, pc, #4	@ (adr r2, 8004974 <getMPU6050Gres+0x14>)
 800496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004972:	bf00      	nop
 8004974:	08004985 	.word	0x08004985
 8004978:	0800498d 	.word	0x0800498d
 800497c:	08004995 	.word	0x08004995
 8004980:	0800499d 	.word	0x0800499d
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes_MPU6050 = 250.0/32768.0;
 8004984:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <getMPU6050Gres+0x54>)
 8004986:	4a0c      	ldr	r2, [pc, #48]	@ (80049b8 <getMPU6050Gres+0x58>)
 8004988:	601a      	str	r2, [r3, #0]
          break;
 800498a:	e00b      	b.n	80049a4 <getMPU6050Gres+0x44>
    case GFS_500DPS:
          gRes_MPU6050 = 500.0/32768.0;
 800498c:	4b09      	ldr	r3, [pc, #36]	@ (80049b4 <getMPU6050Gres+0x54>)
 800498e:	4a0b      	ldr	r2, [pc, #44]	@ (80049bc <getMPU6050Gres+0x5c>)
 8004990:	601a      	str	r2, [r3, #0]
          break;
 8004992:	e007      	b.n	80049a4 <getMPU6050Gres+0x44>
    case GFS_1000DPS:
          gRes_MPU6050 = 1000.0/32768.0;
 8004994:	4b07      	ldr	r3, [pc, #28]	@ (80049b4 <getMPU6050Gres+0x54>)
 8004996:	4a0a      	ldr	r2, [pc, #40]	@ (80049c0 <getMPU6050Gres+0x60>)
 8004998:	601a      	str	r2, [r3, #0]
          break;
 800499a:	e003      	b.n	80049a4 <getMPU6050Gres+0x44>
    case GFS_2000DPS:
          gRes_MPU6050 = 2000.0/32768.0;
 800499c:	4b05      	ldr	r3, [pc, #20]	@ (80049b4 <getMPU6050Gres+0x54>)
 800499e:	4a09      	ldr	r2, [pc, #36]	@ (80049c4 <getMPU6050Gres+0x64>)
 80049a0:	601a      	str	r2, [r3, #0]
          break;
 80049a2:	bf00      	nop
  }
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20000ba4 	.word	0x20000ba4
 80049b4:	20000bbc 	.word	0x20000bbc
 80049b8:	3bfa0000 	.word	0x3bfa0000
 80049bc:	3c7a0000 	.word	0x3c7a0000
 80049c0:	3cfa0000 	.word	0x3cfa0000
 80049c4:	3d7a0000 	.word	0x3d7a0000

080049c8 <initMPU6050>:

void initMPU6050(I2C_HandleTypeDef *I2Cx){
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af04      	add	r7, sp, #16
 80049ce:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 80049d0:	2300      	movs	r3, #0
 80049d2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80049d4:	2364      	movs	r3, #100	@ 0x64
 80049d6:	9302      	str	r3, [sp, #8]
 80049d8:	2301      	movs	r3, #1
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	f107 030e 	add.w	r3, r7, #14
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	2301      	movs	r3, #1
 80049e4:	226b      	movs	r2, #107	@ 0x6b
 80049e6:	21d0      	movs	r1, #208	@ 0xd0
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f003 f9ff 	bl	8007dec <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80049ee:	2064      	movs	r0, #100	@ 0x64
 80049f0:	f002 fb2a 	bl	8007048 <HAL_Delay>

	writeData = 0x01;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80049f8:	2364      	movs	r3, #100	@ 0x64
 80049fa:	9302      	str	r3, [sp, #8]
 80049fc:	2301      	movs	r3, #1
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	f107 030e 	add.w	r3, r7, #14
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	2301      	movs	r3, #1
 8004a08:	226b      	movs	r2, #107	@ 0x6b
 8004a0a:	21d0      	movs	r1, #208	@ 0xd0
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f003 f9ed 	bl	8007dec <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004a12:	2064      	movs	r0, #100	@ 0x64
 8004a14:	f002 fb18 	bl	8007048 <HAL_Delay>

	writeData = 0x03;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 8004a1c:	2364      	movs	r3, #100	@ 0x64
 8004a1e:	9302      	str	r3, [sp, #8]
 8004a20:	2301      	movs	r3, #1
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	f107 030e 	add.w	r3, r7, #14
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	221a      	movs	r2, #26
 8004a2e:	21d0      	movs	r1, #208	@ 0xd0
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f003 f9db 	bl	8007dec <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004a36:	2064      	movs	r0, #100	@ 0x64
 8004a38:	f002 fb06 	bl	8007048 <HAL_Delay>

	writeData = 0; //0x07; 0x04
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8004a40:	2364      	movs	r3, #100	@ 0x64
 8004a42:	9302      	str	r3, [sp, #8]
 8004a44:	2301      	movs	r3, #1
 8004a46:	9301      	str	r3, [sp, #4]
 8004a48:	f107 030e 	add.w	r3, r7, #14
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	2301      	movs	r3, #1
 8004a50:	2219      	movs	r2, #25
 8004a52:	21d0      	movs	r1, #208	@ 0xd0
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f003 f9c9 	bl	8007dec <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004a5a:	2064      	movs	r0, #100	@ 0x64
 8004a5c:	f002 faf4 	bl	8007048 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8004a60:	2364      	movs	r3, #100	@ 0x64
 8004a62:	9302      	str	r3, [sp, #8]
 8004a64:	2301      	movs	r3, #1
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	f107 030f 	add.w	r3, r7, #15
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	2301      	movs	r3, #1
 8004a70:	221b      	movs	r2, #27
 8004a72:	21d0      	movs	r1, #208	@ 0xd0
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f003 fab3 	bl	8007fe0 <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	f023 0303 	bic.w	r3, r3, #3
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	f023 0318 	bic.w	r3, r3, #24
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale_MPU6050 << 3; // Set full scale range for the gyro
 8004a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b88 <initMPU6050+0x1c0>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	b25b      	sxtb	r3, r3
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	b25a      	sxtb	r2, r3
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	b25b      	sxtb	r3, r3
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	b25b      	sxtb	r3, r3
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8004aa4:	2064      	movs	r0, #100	@ 0x64
 8004aa6:	f002 facf 	bl	8007048 <HAL_Delay>

	writeData = readData;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8004aae:	2364      	movs	r3, #100	@ 0x64
 8004ab0:	9302      	str	r3, [sp, #8]
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	f107 030e 	add.w	r3, r7, #14
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	2301      	movs	r3, #1
 8004abe:	221b      	movs	r2, #27
 8004ac0:	21d0      	movs	r1, #208	@ 0xd0
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f003 f992 	bl	8007dec <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004ac8:	2064      	movs	r0, #100	@ 0x64
 8004aca:	f002 fabd 	bl	8007048 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 8004ace:	2364      	movs	r3, #100	@ 0x64
 8004ad0:	9302      	str	r3, [sp, #8]
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	f107 030f 	add.w	r3, r7, #15
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	2301      	movs	r3, #1
 8004ade:	221c      	movs	r2, #28
 8004ae0:	21d0      	movs	r1, #208	@ 0xd0
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f003 fa7c 	bl	8007fe0 <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	f023 0318 	bic.w	r3, r3, #24
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale_MPU6050 << 3; // Set full scale range for the accelerometer
 8004af2:	4b26      	ldr	r3, [pc, #152]	@ (8004b8c <initMPU6050+0x1c4>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	b25b      	sxtb	r3, r3
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	b25a      	sxtb	r2, r3
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	b25b      	sxtb	r3, r3
 8004b00:	4313      	orrs	r3, r2
 8004b02:	b25b      	sxtb	r3, r3
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8004b0c:	2364      	movs	r3, #100	@ 0x64
 8004b0e:	9302      	str	r3, [sp, #8]
 8004b10:	2301      	movs	r3, #1
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	f107 030e 	add.w	r3, r7, #14
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	221c      	movs	r2, #28
 8004b1e:	21d0      	movs	r1, #208	@ 0xd0
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f003 f963 	bl	8007dec <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004b26:	2064      	movs	r0, #100	@ 0x64
 8004b28:	f002 fa8e 	bl	8007048 <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 8004b2c:	2364      	movs	r3, #100	@ 0x64
 8004b2e:	9302      	str	r3, [sp, #8]
 8004b30:	2301      	movs	r3, #1
 8004b32:	9301      	str	r3, [sp, #4]
 8004b34:	f107 030f 	add.w	r3, r7, #15
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	221d      	movs	r2, #29
 8004b3e:	21d0      	movs	r1, #208	@ 0xd0
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f003 fa4d 	bl	8007fe0 <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	f023 030f 	bic.w	r3, r3, #15
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	f043 0303 	orr.w	r3, r3, #3
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 8004b5e:	2364      	movs	r3, #100	@ 0x64
 8004b60:	9302      	str	r3, [sp, #8]
 8004b62:	2301      	movs	r3, #1
 8004b64:	9301      	str	r3, [sp, #4]
 8004b66:	f107 030e 	add.w	r3, r7, #14
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	221d      	movs	r2, #29
 8004b70:	21d0      	movs	r1, #208	@ 0xd0
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f003 f93a 	bl	8007dec <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004b78:	2064      	movs	r0, #100	@ 0x64
 8004b7a:	f002 fa65 	bl	8007048 <HAL_Delay>
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000ba4 	.word	0x20000ba4
 8004b8c:	20000ba5 	.word	0x20000ba5

08004b90 <readMPU6050AccelData>:

//read raw Accelerometer values from registers
void readMPU6050AccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af04      	add	r7, sp, #16
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 8004b9a:	2364      	movs	r3, #100	@ 0x64
 8004b9c:	9302      	str	r3, [sp, #8]
 8004b9e:	2306      	movs	r3, #6
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	f107 0308 	add.w	r3, r7, #8
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	2301      	movs	r3, #1
 8004baa:	223b      	movs	r2, #59	@ 0x3b
 8004bac:	21d0      	movs	r1, #208	@ 0xd0
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f003 fa16 	bl	8007fe0 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8004bb4:	7a3b      	ldrb	r3, [r7, #8]
 8004bb6:	b21b      	sxth	r3, r3
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	b21a      	sxth	r2, r3
 8004bbc:	7a7b      	ldrb	r3, [r7, #9]
 8004bbe:	b21b      	sxth	r3, r3
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	b21a      	sxth	r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8004bc8:	7abb      	ldrb	r3, [r7, #10]
 8004bca:	b21b      	sxth	r3, r3
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	b219      	sxth	r1, r3
 8004bd0:	7afb      	ldrb	r3, [r7, #11]
 8004bd2:	b21a      	sxth	r2, r3
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	b212      	sxth	r2, r2
 8004bdc:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 8004bde:	7b3b      	ldrb	r3, [r7, #12]
 8004be0:	b21b      	sxth	r3, r3
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	b219      	sxth	r1, r3
 8004be6:	7b7b      	ldrb	r3, [r7, #13]
 8004be8:	b21a      	sxth	r2, r3
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	3304      	adds	r3, #4
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	b212      	sxth	r2, r2
 8004bf2:	801a      	strh	r2, [r3, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <readMPU6050GyroData>:

//read raw Gyro values from registers
void readMPU6050GyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af04      	add	r7, sp, #16
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 8004c06:	2364      	movs	r3, #100	@ 0x64
 8004c08:	9302      	str	r3, [sp, #8]
 8004c0a:	2306      	movs	r3, #6
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	f107 0308 	add.w	r3, r7, #8
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	2301      	movs	r3, #1
 8004c16:	2243      	movs	r2, #67	@ 0x43
 8004c18:	21d0      	movs	r1, #208	@ 0xd0
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f003 f9e0 	bl	8007fe0 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8004c20:	7a3b      	ldrb	r3, [r7, #8]
 8004c22:	b21b      	sxth	r3, r3
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	b21a      	sxth	r2, r3
 8004c28:	7a7b      	ldrb	r3, [r7, #9]
 8004c2a:	b21b      	sxth	r3, r3
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	b21a      	sxth	r2, r3
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 8004c34:	7abb      	ldrb	r3, [r7, #10]
 8004c36:	b21b      	sxth	r3, r3
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	b219      	sxth	r1, r3
 8004c3c:	7afb      	ldrb	r3, [r7, #11]
 8004c3e:	b21a      	sxth	r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	3302      	adds	r3, #2
 8004c44:	430a      	orrs	r2, r1
 8004c46:	b212      	sxth	r2, r2
 8004c48:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 8004c4a:	7b3b      	ldrb	r3, [r7, #12]
 8004c4c:	b21b      	sxth	r3, r3
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	b219      	sxth	r1, r3
 8004c52:	7b7b      	ldrb	r3, [r7, #13]
 8004c54:	b21a      	sxth	r2, r3
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	b212      	sxth	r2, r2
 8004c5e:	801a      	strh	r2, [r3, #0]
}
 8004c60:	bf00      	nop
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <calibrateMPU6050>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU6050(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct, float * dest1, float * dest2){
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b09e      	sub	sp, #120	@ 0x78
 8004c6c:	af04      	add	r7, sp, #16
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8004c76:	2300      	movs	r3, #0
 8004c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c7e:	2300      	movs	r3, #0
 8004c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c82:	2300      	movs	r3, #0
 8004c84:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c86:	2300      	movs	r3, #0
 8004c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	63bb      	str	r3, [r7, #56]	@ 0x38

	// reset device
	writeData = 0x80;
 8004c8e:	2380      	movs	r3, #128	@ 0x80
 8004c90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 8004c94:	2364      	movs	r3, #100	@ 0x64
 8004c96:	9302      	str	r3, [sp, #8]
 8004c98:	2301      	movs	r3, #1
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	226b      	movs	r2, #107	@ 0x6b
 8004ca6:	21d0      	movs	r1, #208	@ 0xd0
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f003 f89f 	bl	8007dec <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004cae:	2064      	movs	r0, #100	@ 0x64
 8004cb0:	f002 f9ca 	bl	8007048 <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8004cba:	2364      	movs	r3, #100	@ 0x64
 8004cbc:	9302      	str	r3, [sp, #8]
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	2301      	movs	r3, #1
 8004cca:	226b      	movs	r2, #107	@ 0x6b
 8004ccc:	21d0      	movs	r1, #208	@ 0xd0
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f003 f88c 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 8004cda:	2364      	movs	r3, #100	@ 0x64
 8004cdc:	9302      	str	r3, [sp, #8]
 8004cde:	2301      	movs	r3, #1
 8004ce0:	9301      	str	r3, [sp, #4]
 8004ce2:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	2301      	movs	r3, #1
 8004cea:	226c      	movs	r2, #108	@ 0x6c
 8004cec:	21d0      	movs	r1, #208	@ 0xd0
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f003 f87c 	bl	8007dec <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8004cf4:	20c8      	movs	r0, #200	@ 0xc8
 8004cf6:	f002 f9a7 	bl	8007048 <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 8004d00:	2364      	movs	r3, #100	@ 0x64
 8004d02:	9302      	str	r3, [sp, #8]
 8004d04:	2301      	movs	r3, #1
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2301      	movs	r3, #1
 8004d10:	2238      	movs	r2, #56	@ 0x38
 8004d12:	21d0      	movs	r1, #208	@ 0xd0
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f003 f869 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8004d20:	2364      	movs	r3, #100	@ 0x64
 8004d22:	9302      	str	r3, [sp, #8]
 8004d24:	2301      	movs	r3, #1
 8004d26:	9301      	str	r3, [sp, #4]
 8004d28:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	2301      	movs	r3, #1
 8004d30:	2223      	movs	r2, #35	@ 0x23
 8004d32:	21d0      	movs	r1, #208	@ 0xd0
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f003 f859 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8004d40:	2364      	movs	r3, #100	@ 0x64
 8004d42:	9302      	str	r3, [sp, #8]
 8004d44:	2301      	movs	r3, #1
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	2301      	movs	r3, #1
 8004d50:	226b      	movs	r2, #107	@ 0x6b
 8004d52:	21d0      	movs	r1, #208	@ 0xd0
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f003 f849 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 8004d60:	2364      	movs	r3, #100	@ 0x64
 8004d62:	9302      	str	r3, [sp, #8]
 8004d64:	2301      	movs	r3, #1
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2301      	movs	r3, #1
 8004d70:	2224      	movs	r2, #36	@ 0x24
 8004d72:	21d0      	movs	r1, #208	@ 0xd0
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f003 f839 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 8004d80:	2364      	movs	r3, #100	@ 0x64
 8004d82:	9302      	str	r3, [sp, #8]
 8004d84:	2301      	movs	r3, #1
 8004d86:	9301      	str	r3, [sp, #4]
 8004d88:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	2301      	movs	r3, #1
 8004d90:	226a      	movs	r2, #106	@ 0x6a
 8004d92:	21d0      	movs	r1, #208	@ 0xd0
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f003 f829 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 8004da0:	2364      	movs	r3, #100	@ 0x64
 8004da2:	9302      	str	r3, [sp, #8]
 8004da4:	2301      	movs	r3, #1
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	2301      	movs	r3, #1
 8004db0:	226a      	movs	r2, #106	@ 0x6a
 8004db2:	21d0      	movs	r1, #208	@ 0xd0
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f003 f819 	bl	8007dec <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8004dba:	200f      	movs	r0, #15
 8004dbc:	f002 f944 	bl	8007048 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 8004dc6:	2364      	movs	r3, #100	@ 0x64
 8004dc8:	9302      	str	r3, [sp, #8]
 8004dca:	2301      	movs	r3, #1
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	221a      	movs	r2, #26
 8004dd8:	21d0      	movs	r1, #208	@ 0xd0
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f003 f806 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004de0:	2300      	movs	r3, #0
 8004de2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8004de6:	2364      	movs	r3, #100	@ 0x64
 8004de8:	9302      	str	r3, [sp, #8]
 8004dea:	2301      	movs	r3, #1
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	2301      	movs	r3, #1
 8004df6:	2219      	movs	r2, #25
 8004df8:	21d0      	movs	r1, #208	@ 0xd0
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f002 fff6 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004e00:	2300      	movs	r3, #0
 8004e02:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8004e06:	2364      	movs	r3, #100	@ 0x64
 8004e08:	9302      	str	r3, [sp, #8]
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	2301      	movs	r3, #1
 8004e16:	221b      	movs	r2, #27
 8004e18:	21d0      	movs	r1, #208	@ 0xd0
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f002 ffe6 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004e20:	2300      	movs	r3, #0
 8004e22:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8004e26:	2364      	movs	r3, #100	@ 0x64
 8004e28:	9302      	str	r3, [sp, #8]
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	2301      	movs	r3, #1
 8004e36:	221c      	movs	r2, #28
 8004e38:	21d0      	movs	r1, #208	@ 0xd0
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f002 ffd6 	bl	8007dec <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8004e40:	2383      	movs	r3, #131	@ 0x83
 8004e42:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8004e46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e4a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8004e4e:	2340      	movs	r3, #64	@ 0x40
 8004e50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 8004e54:	2364      	movs	r3, #100	@ 0x64
 8004e56:	9302      	str	r3, [sp, #8]
 8004e58:	2301      	movs	r3, #1
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	2301      	movs	r3, #1
 8004e64:	226a      	movs	r2, #106	@ 0x6a
 8004e66:	21d0      	movs	r1, #208	@ 0xd0
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f002 ffbf 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8004e6e:	2378      	movs	r3, #120	@ 0x78
 8004e70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8004e74:	2364      	movs	r3, #100	@ 0x64
 8004e76:	9302      	str	r3, [sp, #8]
 8004e78:	2301      	movs	r3, #1
 8004e7a:	9301      	str	r3, [sp, #4]
 8004e7c:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	2301      	movs	r3, #1
 8004e84:	2223      	movs	r2, #35	@ 0x23
 8004e86:	21d0      	movs	r1, #208	@ 0xd0
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f002 ffaf 	bl	8007dec <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8004e8e:	2028      	movs	r0, #40	@ 0x28
 8004e90:	f002 f8da 	bl	8007048 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8004e9a:	2364      	movs	r3, #100	@ 0x64
 8004e9c:	9302      	str	r3, [sp, #8]
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	2223      	movs	r2, #35	@ 0x23
 8004eac:	21d0      	movs	r1, #208	@ 0xd0
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f002 ff9c 	bl	8007dec <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8004eb4:	2364      	movs	r3, #100	@ 0x64
 8004eb6:	9302      	str	r3, [sp, #8]
 8004eb8:	2302      	movs	r3, #2
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	2272      	movs	r2, #114	@ 0x72
 8004ec6:	21d0      	movs	r1, #208	@ 0xd0
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f003 f889 	bl	8007fe0 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8004ece:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8004ed2:	b21b      	sxth	r3, r3
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	b21a      	sxth	r2, r3
 8004ed8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8004edc:	b21b      	sxth	r3, r3
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	b21b      	sxth	r3, r3
 8004ee2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8004ee6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8004eea:	4a5e      	ldr	r2, [pc, #376]	@ (8005064 <calibrateMPU6050+0x3fc>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	08db      	lsrs	r3, r3, #3
 8004ef2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004efc:	e07d      	b.n	8004ffa <calibrateMPU6050+0x392>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8004efe:	2300      	movs	r3, #0
 8004f00:	833b      	strh	r3, [r7, #24]
 8004f02:	2300      	movs	r3, #0
 8004f04:	837b      	strh	r3, [r7, #26]
 8004f06:	2300      	movs	r3, #0
 8004f08:	83bb      	strh	r3, [r7, #28]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	823b      	strh	r3, [r7, #16]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	827b      	strh	r3, [r7, #18]
 8004f12:	2300      	movs	r3, #0
 8004f14:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8004f16:	2364      	movs	r3, #100	@ 0x64
 8004f18:	9302      	str	r3, [sp, #8]
 8004f1a:	230c      	movs	r3, #12
 8004f1c:	9301      	str	r3, [sp, #4]
 8004f1e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	2301      	movs	r3, #1
 8004f26:	2274      	movs	r2, #116	@ 0x74
 8004f28:	21d0      	movs	r1, #208	@ 0xd0
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f003 f858 	bl	8007fe0 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8004f30:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8004f34:	b21b      	sxth	r3, r3
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	b21a      	sxth	r2, r3
 8004f3a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8004f3e:	b21b      	sxth	r3, r3
 8004f40:	4313      	orrs	r3, r2
 8004f42:	b21b      	sxth	r3, r3
 8004f44:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8004f46:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8004f4a:	b21b      	sxth	r3, r3
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	b21a      	sxth	r2, r3
 8004f50:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004f54:	b21b      	sxth	r3, r3
 8004f56:	4313      	orrs	r3, r2
 8004f58:	b21b      	sxth	r3, r3
 8004f5a:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8004f5c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004f60:	b21b      	sxth	r3, r3
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	b21a      	sxth	r2, r3
 8004f66:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004f6a:	b21b      	sxth	r3, r3
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	b21b      	sxth	r3, r3
 8004f70:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8004f72:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8004f76:	b21b      	sxth	r3, r3
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	b21a      	sxth	r2, r3
 8004f7c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004f80:	b21b      	sxth	r3, r3
 8004f82:	4313      	orrs	r3, r2
 8004f84:	b21b      	sxth	r3, r3
 8004f86:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8004f88:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8004f8c:	b21b      	sxth	r3, r3
 8004f8e:	021b      	lsls	r3, r3, #8
 8004f90:	b21a      	sxth	r2, r3
 8004f92:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8004f96:	b21b      	sxth	r3, r3
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	b21b      	sxth	r3, r3
 8004f9c:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 8004f9e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8004fa2:	b21b      	sxth	r3, r3
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	b21a      	sxth	r2, r3
 8004fa8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8004fac:	b21b      	sxth	r3, r3
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	b21b      	sxth	r3, r3
 8004fb2:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004fba:	4413      	add	r3, r2
 8004fbc:	633b      	str	r3, [r7, #48]	@ 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8004fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	637b      	str	r3, [r7, #52]	@ 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fca:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004fce:	4413      	add	r3, r2
 8004fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8004fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004fd8:	4413      	add	r3, r2
 8004fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8004fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fde:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	643b      	str	r3, [r7, #64]	@ 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8004fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fe8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004fec:	4413      	add	r3, r2
 8004fee:	647b      	str	r3, [r7, #68]	@ 0x44
	for (ii = 0; ii < packet_count; ii++) {
 8004ff0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004ffa:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8004ffe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005002:	429a      	cmp	r2, r3
 8005004:	f4ff af7b 	bcc.w	8004efe <calibrateMPU6050+0x296>

	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8005008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800500a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800500e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005012:	633b      	str	r3, [r7, #48]	@ 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8005014:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005016:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800501a:	fb92 f3f3 	sdiv	r3, r2, r3
 800501e:	637b      	str	r3, [r7, #52]	@ 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8005020:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005022:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005026:	fb92 f3f3 	sdiv	r3, r2, r3
 800502a:	63bb      	str	r3, [r7, #56]	@ 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 800502c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800502e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005032:	fb92 f3f3 	sdiv	r3, r2, r3
 8005036:	63fb      	str	r3, [r7, #60]	@ 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 8005038:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800503a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800503e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005042:	643b      	str	r3, [r7, #64]	@ 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8005044:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005046:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800504a:	fb92 f3f3 	sdiv	r3, r2, r3
 800504e:	647b      	str	r3, [r7, #68]	@ 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 8005050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005052:	2b00      	cmp	r3, #0
 8005054:	dd08      	ble.n	8005068 <calibrateMPU6050+0x400>
 8005056:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005058:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005060:	e007      	b.n	8005072 <calibrateMPU6050+0x40a>
 8005062:	bf00      	nop
 8005064:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8005068:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800506a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800506e:	4413      	add	r3, r2
 8005070:	63bb      	str	r3, [r7, #56]	@ 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8005072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005074:	425b      	negs	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	da00      	bge.n	800507c <calibrateMPU6050+0x414>
 800507a:	3303      	adds	r3, #3
 800507c:	109b      	asrs	r3, r3, #2
 800507e:	121b      	asrs	r3, r3, #8
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8005086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005088:	425b      	negs	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	da00      	bge.n	8005090 <calibrateMPU6050+0x428>
 800508e:	3303      	adds	r3, #3
 8005090:	109b      	asrs	r3, r3, #2
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8005098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800509a:	425b      	negs	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	da00      	bge.n	80050a2 <calibrateMPU6050+0x43a>
 80050a0:	3303      	adds	r3, #3
 80050a2:	109b      	asrs	r3, r3, #2
 80050a4:	121b      	asrs	r3, r3, #8
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 80050ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ae:	425b      	negs	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	da00      	bge.n	80050b6 <calibrateMPU6050+0x44e>
 80050b4:	3303      	adds	r3, #3
 80050b6:	109b      	asrs	r3, r3, #2
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80050be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050c0:	425b      	negs	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	da00      	bge.n	80050c8 <calibrateMPU6050+0x460>
 80050c6:	3303      	adds	r3, #3
 80050c8:	109b      	asrs	r3, r3, #2
 80050ca:	121b      	asrs	r3, r3, #8
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 80050d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050d4:	425b      	negs	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da00      	bge.n	80050dc <calibrateMPU6050+0x474>
 80050da:	3303      	adds	r3, #3
 80050dc:	109b      	asrs	r3, r3, #2
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 80050e4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80050e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80050ec:	2364      	movs	r3, #100	@ 0x64
 80050ee:	9302      	str	r3, [sp, #8]
 80050f0:	2301      	movs	r3, #1
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	2301      	movs	r3, #1
 80050fc:	2213      	movs	r2, #19
 80050fe:	21d0      	movs	r1, #208	@ 0xd0
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f002 fe73 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8005106:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800510a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800510e:	2364      	movs	r3, #100	@ 0x64
 8005110:	9302      	str	r3, [sp, #8]
 8005112:	2301      	movs	r3, #1
 8005114:	9301      	str	r3, [sp, #4]
 8005116:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	2301      	movs	r3, #1
 800511e:	2214      	movs	r2, #20
 8005120:	21d0      	movs	r1, #208	@ 0xd0
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f002 fe62 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8005128:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800512c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8005130:	2364      	movs	r3, #100	@ 0x64
 8005132:	9302      	str	r3, [sp, #8]
 8005134:	2301      	movs	r3, #1
 8005136:	9301      	str	r3, [sp, #4]
 8005138:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	2301      	movs	r3, #1
 8005140:	2215      	movs	r2, #21
 8005142:	21d0      	movs	r1, #208	@ 0xd0
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f002 fe51 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 800514a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800514e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8005152:	2364      	movs	r3, #100	@ 0x64
 8005154:	9302      	str	r3, [sp, #8]
 8005156:	2301      	movs	r3, #1
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	2301      	movs	r3, #1
 8005162:	2216      	movs	r2, #22
 8005164:	21d0      	movs	r1, #208	@ 0xd0
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f002 fe40 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 800516c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8005170:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8005174:	2364      	movs	r3, #100	@ 0x64
 8005176:	9302      	str	r3, [sp, #8]
 8005178:	2301      	movs	r3, #1
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	2301      	movs	r3, #1
 8005184:	2217      	movs	r2, #23
 8005186:	21d0      	movs	r1, #208	@ 0xd0
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f002 fe2f 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 800518e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005192:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8005196:	2364      	movs	r3, #100	@ 0x64
 8005198:	9302      	str	r3, [sp, #8]
 800519a:	2301      	movs	r3, #1
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	2301      	movs	r3, #1
 80051a6:	2218      	movs	r2, #24
 80051a8:	21d0      	movs	r1, #208	@ 0xd0
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f002 fe1e 	bl	8007dec <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 80051b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80051ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 80051d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80051da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3304      	adds	r3, #4
 80051ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ee:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80051f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051f4:	ee07 3a90 	vmov	s15, r3
 80051f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80051fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005200:	ee07 3a90 	vmov	s15, r3
 8005204:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3308      	adds	r3, #8
 800520c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005210:	edc3 7a00 	vstr	s15, [r3]

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 8005214:	2300      	movs	r3, #0
 8005216:	627b      	str	r3, [r7, #36]	@ 0x24
 8005218:	2300      	movs	r3, #0
 800521a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800521c:	2300      	movs	r3, #0
 800521e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 8005220:	2364      	movs	r3, #100	@ 0x64
 8005222:	9302      	str	r3, [sp, #8]
 8005224:	2302      	movs	r3, #2
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	2301      	movs	r3, #1
 8005230:	2277      	movs	r2, #119	@ 0x77
 8005232:	21d0      	movs	r1, #208	@ 0xd0
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f002 fed3 	bl	8007fe0 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 800523a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8005244:	4313      	orrs	r3, r2
 8005246:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8005248:	2364      	movs	r3, #100	@ 0x64
 800524a:	9302      	str	r3, [sp, #8]
 800524c:	2302      	movs	r3, #2
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	2301      	movs	r3, #1
 8005258:	227a      	movs	r2, #122	@ 0x7a
 800525a:	21d0      	movs	r1, #208	@ 0xd0
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f002 febf 	bl	8007fe0 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8005262:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 800526c:	4313      	orrs	r3, r2
 800526e:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8005270:	2364      	movs	r3, #100	@ 0x64
 8005272:	9302      	str	r3, [sp, #8]
 8005274:	2302      	movs	r3, #2
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	2301      	movs	r3, #1
 8005280:	227d      	movs	r2, #125	@ 0x7d
 8005282:	21d0      	movs	r1, #208	@ 0xd0
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f002 feab 	bl	8007fe0 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 800528a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8005294:	4313      	orrs	r3, r2
 8005296:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 8005298:	2301      	movs	r3, #1
 800529a:	65bb      	str	r3, [r7, #88]	@ 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 800529c:	f107 0320 	add.w	r3, r7, #32
 80052a0:	2100      	movs	r1, #0
 80052a2:	460a      	mov	r2, r1
 80052a4:	801a      	strh	r2, [r3, #0]
 80052a6:	460a      	mov	r2, r1
 80052a8:	709a      	strb	r2, [r3, #2]

	for(ii = 0; ii < 3; ii++) {
 80052aa:	2300      	movs	r3, #0
 80052ac:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80052b0:	e017      	b.n	80052e2 <calibrateMPU6050+0x67a>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 80052b2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	3368      	adds	r3, #104	@ 0x68
 80052ba:	443b      	add	r3, r7
 80052bc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80052c0:	461a      	mov	r2, r3
 80052c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d006      	beq.n	80052d8 <calibrateMPU6050+0x670>
 80052ca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80052ce:	3368      	adds	r3, #104	@ 0x68
 80052d0:	443b      	add	r3, r7
 80052d2:	2201      	movs	r2, #1
 80052d4:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 80052d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80052dc:	3301      	adds	r3, #1
 80052de:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80052e2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d9e3      	bls.n	80052b2 <calibrateMPU6050+0x64a>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80052ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	da00      	bge.n	80052f4 <calibrateMPU6050+0x68c>
 80052f2:	3307      	adds	r3, #7
 80052f4:	10db      	asrs	r3, r3, #3
 80052f6:	425b      	negs	r3, r3
 80052f8:	4413      	add	r3, r2
 80052fa:	627b      	str	r3, [r7, #36]	@ 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 80052fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005300:	2b00      	cmp	r3, #0
 8005302:	da00      	bge.n	8005306 <calibrateMPU6050+0x69e>
 8005304:	3307      	adds	r3, #7
 8005306:	10db      	asrs	r3, r3, #3
 8005308:	425b      	negs	r3, r3
 800530a:	4413      	add	r3, r2
 800530c:	62bb      	str	r3, [r7, #40]	@ 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 800530e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005312:	2b00      	cmp	r3, #0
 8005314:	da00      	bge.n	8005318 <calibrateMPU6050+0x6b0>
 8005316:	3307      	adds	r3, #7
 8005318:	10db      	asrs	r3, r3, #3
 800531a:	425b      	negs	r3, r3
 800531c:	4413      	add	r3, r2
 800531e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8005320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005322:	121b      	asrs	r3, r3, #8
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	b2db      	uxtb	r3, r3
 800532e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8005332:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8005336:	f897 3020 	ldrb.w	r3, [r7, #32]
 800533a:	4313      	orrs	r3, r2
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8005342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005344:	121b      	asrs	r3, r3, #8
 8005346:	b2db      	uxtb	r3, r3
 8005348:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8005354:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8005358:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800535c:	4313      	orrs	r3, r2
 800535e:	b2db      	uxtb	r3, r3
 8005360:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8005364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005366:	121b      	asrs	r3, r3, #8
 8005368:	b2db      	uxtb	r3, r3
 800536a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 800536e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8005376:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800537a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800537e:	4313      	orrs	r3, r2
 8005380:	b2db      	uxtb	r3, r3
 8005382:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 8005386:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800538a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800538e:	2364      	movs	r3, #100	@ 0x64
 8005390:	9302      	str	r3, [sp, #8]
 8005392:	2301      	movs	r3, #1
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	2301      	movs	r3, #1
 800539e:	2277      	movs	r2, #119	@ 0x77
 80053a0:	21d0      	movs	r1, #208	@ 0xd0
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f002 fd22 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 80053a8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80053ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80053b0:	2364      	movs	r3, #100	@ 0x64
 80053b2:	9302      	str	r3, [sp, #8]
 80053b4:	2301      	movs	r3, #1
 80053b6:	9301      	str	r3, [sp, #4]
 80053b8:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2301      	movs	r3, #1
 80053c0:	2278      	movs	r2, #120	@ 0x78
 80053c2:	21d0      	movs	r1, #208	@ 0xd0
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f002 fd11 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 80053ca:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80053ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80053d2:	2364      	movs	r3, #100	@ 0x64
 80053d4:	9302      	str	r3, [sp, #8]
 80053d6:	2301      	movs	r3, #1
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	2301      	movs	r3, #1
 80053e2:	227a      	movs	r2, #122	@ 0x7a
 80053e4:	21d0      	movs	r1, #208	@ 0xd0
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f002 fd00 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 80053ec:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80053f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80053f4:	2364      	movs	r3, #100	@ 0x64
 80053f6:	9302      	str	r3, [sp, #8]
 80053f8:	2301      	movs	r3, #1
 80053fa:	9301      	str	r3, [sp, #4]
 80053fc:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	2301      	movs	r3, #1
 8005404:	227b      	movs	r2, #123	@ 0x7b
 8005406:	21d0      	movs	r1, #208	@ 0xd0
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f002 fcef 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 800540e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8005412:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8005416:	2364      	movs	r3, #100	@ 0x64
 8005418:	9302      	str	r3, [sp, #8]
 800541a:	2301      	movs	r3, #1
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	2301      	movs	r3, #1
 8005426:	227d      	movs	r2, #125	@ 0x7d
 8005428:	21d0      	movs	r1, #208	@ 0xd0
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f002 fcde 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8005430:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005434:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8005438:	2364      	movs	r3, #100	@ 0x64
 800543a:	9302      	str	r3, [sp, #8]
 800543c:	2301      	movs	r3, #1
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	2301      	movs	r3, #1
 8005448:	227e      	movs	r2, #126	@ 0x7e
 800544a:	21d0      	movs	r1, #208	@ 0xd0
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f002 fccd 	bl	8007dec <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800545c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005460:	ee07 3a90 	vmov	s15, r3
 8005464:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 8005472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005474:	ee07 3a90 	vmov	s15, r3
 8005478:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800547c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005480:	ee07 3a90 	vmov	s15, r3
 8005484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	3304      	adds	r3, #4
 800548c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005490:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 8005494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800549e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054b2:	edc3 7a00 	vstr	s15, [r3]
	
	DataStruct->CALIBRATIN_OK_u8 = TRUE;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2201      	movs	r2, #1
 80054ba:	761a      	strb	r2, [r3, #24]
}
 80054bc:	bf00      	nop
 80054be:	3768      	adds	r7, #104	@ 0x68
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	0000      	movs	r0, r0
	...

080054c8 <MPU6050SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU6050SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 80054c8:	b5b0      	push	{r4, r5, r7, lr}
 80054ca:	b0a2      	sub	sp, #136	@ 0x88
 80054cc:	af04      	add	r7, sp, #16
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 80054d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	809a      	strh	r2, [r3, #4]
	uint8_t SelfTest_MPU6050[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80054dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	609a      	str	r2, [r3, #8]
 80054e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	605a      	str	r2, [r3, #4]
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	f107 0320 	add.w	r3, r7, #32
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	605a      	str	r2, [r3, #4]
 800550a:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	writeData = 0x00;
 8005512:	2300      	movs	r3, #0
 8005514:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 8005518:	2364      	movs	r3, #100	@ 0x64
 800551a:	9302      	str	r3, [sp, #8]
 800551c:	2301      	movs	r3, #1
 800551e:	9301      	str	r3, [sp, #4]
 8005520:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	2301      	movs	r3, #1
 8005528:	2219      	movs	r2, #25
 800552a:	21d0      	movs	r1, #208	@ 0xd0
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f002 fc5d 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8005532:	2302      	movs	r3, #2
 8005534:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8005538:	2364      	movs	r3, #100	@ 0x64
 800553a:	9302      	str	r3, [sp, #8]
 800553c:	2301      	movs	r3, #1
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	2301      	movs	r3, #1
 8005548:	221a      	movs	r2, #26
 800554a:	21d0      	movs	r1, #208	@ 0xd0
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f002 fc4d 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8005552:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 800555e:	2364      	movs	r3, #100	@ 0x64
 8005560:	9302      	str	r3, [sp, #8]
 8005562:	2301      	movs	r3, #1
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	2301      	movs	r3, #1
 800556e:	221b      	movs	r2, #27
 8005570:	21d0      	movs	r1, #208	@ 0xd0
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f002 fc3a 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8005578:	2302      	movs	r3, #2
 800557a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800557e:	2364      	movs	r3, #100	@ 0x64
 8005580:	9302      	str	r3, [sp, #8]
 8005582:	2301      	movs	r3, #1
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	2301      	movs	r3, #1
 800558e:	221d      	movs	r2, #29
 8005590:	21d0      	movs	r1, #208	@ 0xd0
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f002 fc2a 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8005598:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 80055a4:	2364      	movs	r3, #100	@ 0x64
 80055a6:	9302      	str	r3, [sp, #8]
 80055a8:	2301      	movs	r3, #1
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	2301      	movs	r3, #1
 80055b4:	221c      	movs	r2, #28
 80055b6:	21d0      	movs	r1, #208	@ 0xd0
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f002 fc17 	bl	8007dec <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 80055be:	2300      	movs	r3, #0
 80055c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80055c2:	e06a      	b.n	800569a <MPU6050SelfTest+0x1d2>

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 80055c4:	2364      	movs	r3, #100	@ 0x64
 80055c6:	9302      	str	r3, [sp, #8]
 80055c8:	2306      	movs	r3, #6
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	2301      	movs	r3, #1
 80055d4:	223b      	movs	r2, #59	@ 0x3b
 80055d6:	21d0      	movs	r1, #208	@ 0xd0
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f002 fd01 	bl	8007fe0 <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80055de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e0:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 80055e4:	b212      	sxth	r2, r2
 80055e6:	0212      	lsls	r2, r2, #8
 80055e8:	b211      	sxth	r1, r2
 80055ea:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 80055ee:	b212      	sxth	r2, r2
 80055f0:	430a      	orrs	r2, r1
 80055f2:	b212      	sxth	r2, r2
 80055f4:	4413      	add	r3, r2
 80055f6:	63bb      	str	r3, [r7, #56]	@ 0x38
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80055f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055fa:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 80055fe:	b212      	sxth	r2, r2
 8005600:	0212      	lsls	r2, r2, #8
 8005602:	b211      	sxth	r1, r2
 8005604:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005608:	b212      	sxth	r2, r2
 800560a:	430a      	orrs	r2, r1
 800560c:	b212      	sxth	r2, r2
 800560e:	4413      	add	r3, r2
 8005610:	63fb      	str	r3, [r7, #60]	@ 0x3c
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8005612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005614:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8005618:	b212      	sxth	r2, r2
 800561a:	0212      	lsls	r2, r2, #8
 800561c:	b211      	sxth	r1, r2
 800561e:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8005622:	b212      	sxth	r2, r2
 8005624:	430a      	orrs	r2, r1
 8005626:	b212      	sxth	r2, r2
 8005628:	4413      	add	r3, r2
 800562a:	643b      	str	r3, [r7, #64]	@ 0x40

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 800562c:	2364      	movs	r3, #100	@ 0x64
 800562e:	9302      	str	r3, [sp, #8]
 8005630:	2306      	movs	r3, #6
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	2301      	movs	r3, #1
 800563c:	2243      	movs	r2, #67	@ 0x43
 800563e:	21d0      	movs	r1, #208	@ 0xd0
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f002 fccd 	bl	8007fe0 <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8005646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005648:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800564c:	b212      	sxth	r2, r2
 800564e:	0212      	lsls	r2, r2, #8
 8005650:	b211      	sxth	r1, r2
 8005652:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8005656:	b212      	sxth	r2, r2
 8005658:	430a      	orrs	r2, r1
 800565a:	b212      	sxth	r2, r2
 800565c:	4413      	add	r3, r2
 800565e:	647b      	str	r3, [r7, #68]	@ 0x44
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8005660:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005662:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8005666:	b212      	sxth	r2, r2
 8005668:	0212      	lsls	r2, r2, #8
 800566a:	b211      	sxth	r1, r2
 800566c:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005670:	b212      	sxth	r2, r2
 8005672:	430a      	orrs	r2, r1
 8005674:	b212      	sxth	r2, r2
 8005676:	4413      	add	r3, r2
 8005678:	64bb      	str	r3, [r7, #72]	@ 0x48
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 800567a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800567c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8005680:	b212      	sxth	r2, r2
 8005682:	0212      	lsls	r2, r2, #8
 8005684:	b211      	sxth	r1, r2
 8005686:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800568a:	b212      	sxth	r2, r2
 800568c:	430a      	orrs	r2, r1
 800568e:	b212      	sxth	r2, r2
 8005690:	4413      	add	r3, r2
 8005692:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for( int ii = 0; ii < 200; ii++) {
 8005694:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005696:	3301      	adds	r3, #1
 8005698:	677b      	str	r3, [r7, #116]	@ 0x74
 800569a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800569c:	2bc7      	cmp	r3, #199	@ 0xc7
 800569e:	dd91      	ble.n	80055c4 <MPU6050SelfTest+0xfc>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 80056a0:	2300      	movs	r3, #0
 80056a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80056a4:	e026      	b.n	80056f4 <MPU6050SelfTest+0x22c>
		aAvg[ii] /= 200;
 80056a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	3378      	adds	r3, #120	@ 0x78
 80056ac:	443b      	add	r3, r7
 80056ae:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80056b2:	4a5d      	ldr	r2, [pc, #372]	@ (8005828 <MPU6050SelfTest+0x360>)
 80056b4:	fb82 1203 	smull	r1, r2, r2, r3
 80056b8:	1192      	asrs	r2, r2, #6
 80056ba:	17db      	asrs	r3, r3, #31
 80056bc:	1ad2      	subs	r2, r2, r3
 80056be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	3378      	adds	r3, #120	@ 0x78
 80056c4:	443b      	add	r3, r7
 80056c6:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 80056ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	3378      	adds	r3, #120	@ 0x78
 80056d0:	443b      	add	r3, r7
 80056d2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80056d6:	4a54      	ldr	r2, [pc, #336]	@ (8005828 <MPU6050SelfTest+0x360>)
 80056d8:	fb82 1203 	smull	r1, r2, r2, r3
 80056dc:	1192      	asrs	r2, r2, #6
 80056de:	17db      	asrs	r3, r3, #31
 80056e0:	1ad2      	subs	r2, r2, r3
 80056e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	3378      	adds	r3, #120	@ 0x78
 80056e8:	443b      	add	r3, r7
 80056ea:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 80056ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056f0:	3301      	adds	r3, #1
 80056f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80056f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	ddd5      	ble.n	80056a6 <MPU6050SelfTest+0x1de>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 80056fa:	23e0      	movs	r3, #224	@ 0xe0
 80056fc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8005700:	2364      	movs	r3, #100	@ 0x64
 8005702:	9302      	str	r3, [sp, #8]
 8005704:	2301      	movs	r3, #1
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	2301      	movs	r3, #1
 8005710:	221c      	movs	r2, #28
 8005712:	21d0      	movs	r1, #208	@ 0xd0
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f002 fb69 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 800571a:	23e0      	movs	r3, #224	@ 0xe0
 800571c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8005720:	2364      	movs	r3, #100	@ 0x64
 8005722:	9302      	str	r3, [sp, #8]
 8005724:	2301      	movs	r3, #1
 8005726:	9301      	str	r3, [sp, #4]
 8005728:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	2301      	movs	r3, #1
 8005730:	221b      	movs	r2, #27
 8005732:	21d0      	movs	r1, #208	@ 0xd0
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f002 fb59 	bl	8007dec <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 800573a:	2019      	movs	r0, #25
 800573c:	f001 fc84 	bl	8007048 <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8005740:	2300      	movs	r3, #0
 8005742:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005744:	e06a      	b.n	800581c <MPU6050SelfTest+0x354>

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8005746:	2364      	movs	r3, #100	@ 0x64
 8005748:	9302      	str	r3, [sp, #8]
 800574a:	2306      	movs	r3, #6
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	2301      	movs	r3, #1
 8005756:	223b      	movs	r2, #59	@ 0x3b
 8005758:	21d0      	movs	r1, #208	@ 0xd0
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f002 fc40 	bl	8007fe0 <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8005760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005762:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8005766:	b212      	sxth	r2, r2
 8005768:	0212      	lsls	r2, r2, #8
 800576a:	b211      	sxth	r1, r2
 800576c:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8005770:	b212      	sxth	r2, r2
 8005772:	430a      	orrs	r2, r1
 8005774:	b212      	sxth	r2, r2
 8005776:	4413      	add	r3, r2
 8005778:	62fb      	str	r3, [r7, #44]	@ 0x2c
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8005780:	b212      	sxth	r2, r2
 8005782:	0212      	lsls	r2, r2, #8
 8005784:	b211      	sxth	r1, r2
 8005786:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800578a:	b212      	sxth	r2, r2
 800578c:	430a      	orrs	r2, r1
 800578e:	b212      	sxth	r2, r2
 8005790:	4413      	add	r3, r2
 8005792:	633b      	str	r3, [r7, #48]	@ 0x30
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8005794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005796:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800579a:	b212      	sxth	r2, r2
 800579c:	0212      	lsls	r2, r2, #8
 800579e:	b211      	sxth	r1, r2
 80057a0:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 80057a4:	b212      	sxth	r2, r2
 80057a6:	430a      	orrs	r2, r1
 80057a8:	b212      	sxth	r2, r2
 80057aa:	4413      	add	r3, r2
 80057ac:	637b      	str	r3, [r7, #52]	@ 0x34

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 80057ae:	2364      	movs	r3, #100	@ 0x64
 80057b0:	9302      	str	r3, [sp, #8]
 80057b2:	2306      	movs	r3, #6
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	2301      	movs	r3, #1
 80057be:	2243      	movs	r2, #67	@ 0x43
 80057c0:	21d0      	movs	r1, #208	@ 0xd0
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f002 fc0c 	bl	8007fe0 <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 80057ce:	b212      	sxth	r2, r2
 80057d0:	0212      	lsls	r2, r2, #8
 80057d2:	b211      	sxth	r1, r2
 80057d4:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 80057d8:	b212      	sxth	r2, r2
 80057da:	430a      	orrs	r2, r1
 80057dc:	b212      	sxth	r2, r2
 80057de:	4413      	add	r3, r2
 80057e0:	623b      	str	r3, [r7, #32]
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80057e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e4:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 80057e8:	b212      	sxth	r2, r2
 80057ea:	0212      	lsls	r2, r2, #8
 80057ec:	b211      	sxth	r1, r2
 80057ee:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80057f2:	b212      	sxth	r2, r2
 80057f4:	430a      	orrs	r2, r1
 80057f6:	b212      	sxth	r2, r2
 80057f8:	4413      	add	r3, r2
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80057fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fe:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8005802:	b212      	sxth	r2, r2
 8005804:	0212      	lsls	r2, r2, #8
 8005806:	b211      	sxth	r1, r2
 8005808:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800580c:	b212      	sxth	r2, r2
 800580e:	430a      	orrs	r2, r1
 8005810:	b212      	sxth	r2, r2
 8005812:	4413      	add	r3, r2
 8005814:	62bb      	str	r3, [r7, #40]	@ 0x28
	for( int ii = 0; ii < 200; ii++) {
 8005816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005818:	3301      	adds	r3, #1
 800581a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800581c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800581e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005820:	dd91      	ble.n	8005746 <MPU6050SelfTest+0x27e>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 8005822:	2300      	movs	r3, #0
 8005824:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005826:	e028      	b.n	800587a <MPU6050SelfTest+0x3b2>
 8005828:	51eb851f 	.word	0x51eb851f
		aSTAvg[ii] /= 200;
 800582c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	3378      	adds	r3, #120	@ 0x78
 8005832:	443b      	add	r3, r7
 8005834:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005838:	4ae1      	ldr	r2, [pc, #900]	@ (8005bc0 <MPU6050SelfTest+0x6f8>)
 800583a:	fb82 1203 	smull	r1, r2, r2, r3
 800583e:	1192      	asrs	r2, r2, #6
 8005840:	17db      	asrs	r3, r3, #31
 8005842:	1ad2      	subs	r2, r2, r3
 8005844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	3378      	adds	r3, #120	@ 0x78
 800584a:	443b      	add	r3, r7
 800584c:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 8005850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	3378      	adds	r3, #120	@ 0x78
 8005856:	443b      	add	r3, r7
 8005858:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800585c:	4ad8      	ldr	r2, [pc, #864]	@ (8005bc0 <MPU6050SelfTest+0x6f8>)
 800585e:	fb82 1203 	smull	r1, r2, r2, r3
 8005862:	1192      	asrs	r2, r2, #6
 8005864:	17db      	asrs	r3, r3, #31
 8005866:	1ad2      	subs	r2, r2, r3
 8005868:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	3378      	adds	r3, #120	@ 0x78
 800586e:	443b      	add	r3, r7
 8005870:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 8005874:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005876:	3301      	adds	r3, #1
 8005878:	66bb      	str	r3, [r7, #104]	@ 0x68
 800587a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800587c:	2b02      	cmp	r3, #2
 800587e:	ddd5      	ble.n	800582c <MPU6050SelfTest+0x364>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 8005880:	2300      	movs	r3, #0
 8005882:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8005886:	2364      	movs	r3, #100	@ 0x64
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	2301      	movs	r3, #1
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	2301      	movs	r3, #1
 8005896:	221c      	movs	r2, #28
 8005898:	21d0      	movs	r1, #208	@ 0xd0
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f002 faa6 	bl	8007dec <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80058a0:	2300      	movs	r3, #0
 80058a2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80058a6:	2364      	movs	r3, #100	@ 0x64
 80058a8:	9302      	str	r3, [sp, #8]
 80058aa:	2301      	movs	r3, #1
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	2301      	movs	r3, #1
 80058b6:	221b      	movs	r2, #27
 80058b8:	21d0      	movs	r1, #208	@ 0xd0
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f002 fa96 	bl	8007dec <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 80058c0:	2019      	movs	r0, #25
 80058c2:	f001 fbc1 	bl	8007048 <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_X_ACCEL, 1, &SelfTest_MPU6050[0], 1, i2c_timeout);// X-axis accel self-test results
 80058c6:	2364      	movs	r3, #100	@ 0x64
 80058c8:	9302      	str	r3, [sp, #8]
 80058ca:	2301      	movs	r3, #1
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2301      	movs	r3, #1
 80058d6:	220d      	movs	r2, #13
 80058d8:	21d0      	movs	r1, #208	@ 0xd0
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f002 fb80 	bl	8007fe0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Y_ACCEL, 1, &SelfTest_MPU6050[1], 1, i2c_timeout);// Y-axis accel self-test results
 80058e0:	2364      	movs	r3, #100	@ 0x64
 80058e2:	9302      	str	r3, [sp, #8]
 80058e4:	2301      	movs	r3, #1
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80058ec:	3301      	adds	r3, #1
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	2301      	movs	r3, #1
 80058f2:	220e      	movs	r2, #14
 80058f4:	21d0      	movs	r1, #208	@ 0xd0
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f002 fb72 	bl	8007fe0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Z_ACCEL, 1, &SelfTest_MPU6050[2], 1, i2c_timeout);// Z-axis accel self-test results
 80058fc:	2364      	movs	r3, #100	@ 0x64
 80058fe:	9302      	str	r3, [sp, #8]
 8005900:	2301      	movs	r3, #1
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005908:	3302      	adds	r3, #2
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	2301      	movs	r3, #1
 800590e:	220f      	movs	r2, #15
 8005910:	21d0      	movs	r1, #208	@ 0xd0
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f002 fb64 	bl	8007fe0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_X_GYRO, 1, &SelfTest_MPU6050[3], 1, i2c_timeout);// X-axis gyro self-test results
 8005918:	2364      	movs	r3, #100	@ 0x64
 800591a:	9302      	str	r3, [sp, #8]
 800591c:	2301      	movs	r3, #1
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005924:	3303      	adds	r3, #3
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	2301      	movs	r3, #1
 800592a:	2200      	movs	r2, #0
 800592c:	21d0      	movs	r1, #208	@ 0xd0
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f002 fb56 	bl	8007fe0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Y_GYRO, 1, &SelfTest_MPU6050[4], 1, i2c_timeout);// Y-axis gyro self-test results
 8005934:	2364      	movs	r3, #100	@ 0x64
 8005936:	9302      	str	r3, [sp, #8]
 8005938:	2301      	movs	r3, #1
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005940:	3304      	adds	r3, #4
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	2301      	movs	r3, #1
 8005946:	2201      	movs	r2, #1
 8005948:	21d0      	movs	r1, #208	@ 0xd0
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f002 fb48 	bl	8007fe0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Z_GYRO, 1, &SelfTest_MPU6050[5], 1, i2c_timeout);// Z-axis gyro self-test results
 8005950:	2364      	movs	r3, #100	@ 0x64
 8005952:	9302      	str	r3, [sp, #8]
 8005954:	2301      	movs	r3, #1
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800595c:	3305      	adds	r3, #5
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2301      	movs	r3, #1
 8005962:	2202      	movs	r2, #2
 8005964:	21d0      	movs	r1, #208	@ 0xd0
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f002 fb3a 	bl	8007fe0 <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[0] - 1.0) )); // FT[Xa] factory trim calculation
 800596c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005970:	f640 223c 	movw	r2, #2620	@ 0xa3c
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	ee07 3a90 	vmov	s15, r3
 800597c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005980:	ee17 0a90 	vmov	r0, s15
 8005984:	f7fa fde8 	bl	8000558 <__aeabi_f2d>
 8005988:	4604      	mov	r4, r0
 800598a:	460d      	mov	r5, r1
 800598c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8005990:	ee07 3a90 	vmov	s15, r3
 8005994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005998:	ee17 0a90 	vmov	r0, s15
 800599c:	f7fa fddc 	bl	8000558 <__aeabi_f2d>
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	4b87      	ldr	r3, [pc, #540]	@ (8005bc4 <MPU6050SelfTest+0x6fc>)
 80059a6:	f7fa fc77 	bl	8000298 <__aeabi_dsub>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	ec43 2b17 	vmov	d7, r2, r3
 80059b2:	eeb0 1a47 	vmov.f32	s2, s14
 80059b6:	eef0 1a67 	vmov.f32	s3, s15
 80059ba:	ed9f 0b7f 	vldr	d0, [pc, #508]	@ 8005bb8 <MPU6050SelfTest+0x6f0>
 80059be:	f00a f887 	bl	800fad0 <pow>
 80059c2:	ec53 2b10 	vmov	r2, r3, d0
 80059c6:	4620      	mov	r0, r4
 80059c8:	4629      	mov	r1, r5
 80059ca:	f7fa fe1d 	bl	8000608 <__aeabi_dmul>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4610      	mov	r0, r2
 80059d4:	4619      	mov	r1, r3
 80059d6:	f7fb f90f 	bl	8000bf8 <__aeabi_d2f>
 80059da:	4603      	mov	r3, r0
 80059dc:	60bb      	str	r3, [r7, #8]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[1] - 1.0) )); // FT[Ya] factory trim calculation
 80059de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80059e2:	f640 223c 	movw	r2, #2620	@ 0xa3c
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059f2:	ee17 0a90 	vmov	r0, s15
 80059f6:	f7fa fdaf 	bl	8000558 <__aeabi_f2d>
 80059fa:	4604      	mov	r4, r0
 80059fc:	460d      	mov	r5, r1
 80059fe:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0a:	ee17 0a90 	vmov	r0, s15
 8005a0e:	f7fa fda3 	bl	8000558 <__aeabi_f2d>
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	4b6b      	ldr	r3, [pc, #428]	@ (8005bc4 <MPU6050SelfTest+0x6fc>)
 8005a18:	f7fa fc3e 	bl	8000298 <__aeabi_dsub>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	ec43 2b17 	vmov	d7, r2, r3
 8005a24:	eeb0 1a47 	vmov.f32	s2, s14
 8005a28:	eef0 1a67 	vmov.f32	s3, s15
 8005a2c:	ed9f 0b62 	vldr	d0, [pc, #392]	@ 8005bb8 <MPU6050SelfTest+0x6f0>
 8005a30:	f00a f84e 	bl	800fad0 <pow>
 8005a34:	ec53 2b10 	vmov	r2, r3, d0
 8005a38:	4620      	mov	r0, r4
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	f7fa fde4 	bl	8000608 <__aeabi_dmul>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4610      	mov	r0, r2
 8005a46:	4619      	mov	r1, r3
 8005a48:	f7fb f8d6 	bl	8000bf8 <__aeabi_d2f>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	60fb      	str	r3, [r7, #12]
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[2] - 1.0) )); // FT[Za] factory trim calculation
 8005a50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a54:	f640 223c 	movw	r2, #2620	@ 0xa3c
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	ee07 3a90 	vmov	s15, r3
 8005a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a64:	ee17 0a90 	vmov	r0, s15
 8005a68:	f7fa fd76 	bl	8000558 <__aeabi_f2d>
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	460d      	mov	r5, r1
 8005a70:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005a74:	ee07 3a90 	vmov	s15, r3
 8005a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7c:	ee17 0a90 	vmov	r0, s15
 8005a80:	f7fa fd6a 	bl	8000558 <__aeabi_f2d>
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	4b4e      	ldr	r3, [pc, #312]	@ (8005bc4 <MPU6050SelfTest+0x6fc>)
 8005a8a:	f7fa fc05 	bl	8000298 <__aeabi_dsub>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	ec43 2b17 	vmov	d7, r2, r3
 8005a96:	eeb0 1a47 	vmov.f32	s2, s14
 8005a9a:	eef0 1a67 	vmov.f32	s3, s15
 8005a9e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005bb8 <MPU6050SelfTest+0x6f0>
 8005aa2:	f00a f815 	bl	800fad0 <pow>
 8005aa6:	ec53 2b10 	vmov	r2, r3, d0
 8005aaa:	4620      	mov	r0, r4
 8005aac:	4629      	mov	r1, r5
 8005aae:	f7fa fdab 	bl	8000608 <__aeabi_dmul>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	4619      	mov	r1, r3
 8005aba:	f7fb f89d 	bl	8000bf8 <__aeabi_d2f>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	613b      	str	r3, [r7, #16]
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[3] - 1.0) )); // FT[Xg] factory trim calculation
 8005ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ac6:	f640 223c 	movw	r2, #2620	@ 0xa3c
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ad6:	ee17 0a90 	vmov	r0, s15
 8005ada:	f7fa fd3d 	bl	8000558 <__aeabi_f2d>
 8005ade:	4604      	mov	r4, r0
 8005ae0:	460d      	mov	r5, r1
 8005ae2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aee:	ee17 0a90 	vmov	r0, s15
 8005af2:	f7fa fd31 	bl	8000558 <__aeabi_f2d>
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	4b32      	ldr	r3, [pc, #200]	@ (8005bc4 <MPU6050SelfTest+0x6fc>)
 8005afc:	f7fa fbcc 	bl	8000298 <__aeabi_dsub>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	ec43 2b17 	vmov	d7, r2, r3
 8005b08:	eeb0 1a47 	vmov.f32	s2, s14
 8005b0c:	eef0 1a67 	vmov.f32	s3, s15
 8005b10:	ed9f 0b29 	vldr	d0, [pc, #164]	@ 8005bb8 <MPU6050SelfTest+0x6f0>
 8005b14:	f009 ffdc 	bl	800fad0 <pow>
 8005b18:	ec53 2b10 	vmov	r2, r3, d0
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	4629      	mov	r1, r5
 8005b20:	f7fa fd72 	bl	8000608 <__aeabi_dmul>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4610      	mov	r0, r2
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	f7fb f864 	bl	8000bf8 <__aeabi_d2f>
 8005b30:	4603      	mov	r3, r0
 8005b32:	617b      	str	r3, [r7, #20]
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[4] - 1.0) )); // FT[Yg] factory trim calculation
 8005b34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b38:	f640 223c 	movw	r2, #2620	@ 0xa3c
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	ee07 3a90 	vmov	s15, r3
 8005b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b48:	ee17 0a90 	vmov	r0, s15
 8005b4c:	f7fa fd04 	bl	8000558 <__aeabi_f2d>
 8005b50:	4604      	mov	r4, r0
 8005b52:	460d      	mov	r5, r1
 8005b54:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8005b58:	ee07 3a90 	vmov	s15, r3
 8005b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b60:	ee17 0a90 	vmov	r0, s15
 8005b64:	f7fa fcf8 	bl	8000558 <__aeabi_f2d>
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	4b15      	ldr	r3, [pc, #84]	@ (8005bc4 <MPU6050SelfTest+0x6fc>)
 8005b6e:	f7fa fb93 	bl	8000298 <__aeabi_dsub>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	ec43 2b17 	vmov	d7, r2, r3
 8005b7a:	eeb0 1a47 	vmov.f32	s2, s14
 8005b7e:	eef0 1a67 	vmov.f32	s3, s15
 8005b82:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8005bb8 <MPU6050SelfTest+0x6f0>
 8005b86:	f009 ffa3 	bl	800fad0 <pow>
 8005b8a:	ec53 2b10 	vmov	r2, r3, d0
 8005b8e:	4620      	mov	r0, r4
 8005b90:	4629      	mov	r1, r5
 8005b92:	f7fa fd39 	bl	8000608 <__aeabi_dmul>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	f7fb f82b 	bl	8000bf8 <__aeabi_d2f>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	61bb      	str	r3, [r7, #24]
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[5] - 1.0) )); // FT[Zg] factory trim calculation
 8005ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005baa:	f640 223c 	movw	r2, #2620	@ 0xa3c
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	e009      	b.n	8005bc8 <MPU6050SelfTest+0x700>
 8005bb4:	f3af 8000 	nop.w
 8005bb8:	c28f5c29 	.word	0xc28f5c29
 8005bbc:	3ff028f5 	.word	0x3ff028f5
 8005bc0:	51eb851f 	.word	0x51eb851f
 8005bc4:	3ff00000 	.word	0x3ff00000
 8005bc8:	ee07 3a90 	vmov	s15, r3
 8005bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bd0:	ee17 0a90 	vmov	r0, s15
 8005bd4:	f7fa fcc0 	bl	8000558 <__aeabi_f2d>
 8005bd8:	4604      	mov	r4, r0
 8005bda:	460d      	mov	r5, r1
 8005bdc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005be0:	ee07 3a90 	vmov	s15, r3
 8005be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be8:	ee17 0a90 	vmov	r0, s15
 8005bec:	f7fa fcb4 	bl	8000558 <__aeabi_f2d>
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	4ba4      	ldr	r3, [pc, #656]	@ (8005e88 <MPU6050SelfTest+0x9c0>)
 8005bf6:	f7fa fb4f 	bl	8000298 <__aeabi_dsub>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	ec43 2b17 	vmov	d7, r2, r3
 8005c02:	eeb0 1a47 	vmov.f32	s2, s14
 8005c06:	eef0 1a67 	vmov.f32	s3, s15
 8005c0a:	ed9f 0b9d 	vldr	d0, [pc, #628]	@ 8005e80 <MPU6050SelfTest+0x9b8>
 8005c0e:	f009 ff5f 	bl	800fad0 <pow>
 8005c12:	ec53 2b10 	vmov	r2, r3, d0
 8005c16:	4620      	mov	r0, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f7fa fcf5 	bl	8000608 <__aeabi_dmul>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	f7fa ffe7 	bl	8000bf8 <__aeabi_d2f>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	61fb      	str	r3, [r7, #28]

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8005c2e:	2300      	movs	r3, #0
 8005c30:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c32:	e088      	b.n	8005d46 <MPU6050SelfTest+0x87e>
		destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8005c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	3378      	adds	r3, #120	@ 0x78
 8005c3a:	443b      	add	r3, r7
 8005c3c:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8005c40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	3378      	adds	r3, #120	@ 0x78
 8005c46:	443b      	add	r3, r7
 8005c48:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c56:	ee17 0a90 	vmov	r0, s15
 8005c5a:	f7fa fc7d 	bl	8000558 <__aeabi_f2d>
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	4b8a      	ldr	r3, [pc, #552]	@ (8005e8c <MPU6050SelfTest+0x9c4>)
 8005c64:	f7fa fcd0 	bl	8000608 <__aeabi_dmul>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4614      	mov	r4, r2
 8005c6e:	461d      	mov	r5, r3
 8005c70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	3378      	adds	r3, #120	@ 0x78
 8005c76:	443b      	add	r3, r7
 8005c78:	3b70      	subs	r3, #112	@ 0x70
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fa fc6b 	bl	8000558 <__aeabi_f2d>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4620      	mov	r0, r4
 8005c88:	4629      	mov	r1, r5
 8005c8a:	f7fa fde7 	bl	800085c <__aeabi_ddiv>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4610      	mov	r0, r2
 8005c94:	4619      	mov	r1, r3
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8005e8c <MPU6050SelfTest+0x9c4>)
 8005c9c:	f7fa fafc 	bl	8000298 <__aeabi_dsub>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	18d4      	adds	r4, r2, r3
 8005cb0:	f7fa ffa2 	bl	8000bf8 <__aeabi_d2f>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	6023      	str	r3, [r4, #0]
		destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8005cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	3378      	adds	r3, #120	@ 0x78
 8005cbe:	443b      	add	r3, r7
 8005cc0:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8005cc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	3378      	adds	r3, #120	@ 0x78
 8005cca:	443b      	add	r3, r7
 8005ccc:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cda:	ee17 0a90 	vmov	r0, s15
 8005cde:	f7fa fc3b 	bl	8000558 <__aeabi_f2d>
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	4b69      	ldr	r3, [pc, #420]	@ (8005e8c <MPU6050SelfTest+0x9c4>)
 8005ce8:	f7fa fc8e 	bl	8000608 <__aeabi_dmul>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4614      	mov	r4, r2
 8005cf2:	461d      	mov	r5, r3
 8005cf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cf6:	3303      	adds	r3, #3
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	3378      	adds	r3, #120	@ 0x78
 8005cfc:	443b      	add	r3, r7
 8005cfe:	3b70      	subs	r3, #112	@ 0x70
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fa fc28 	bl	8000558 <__aeabi_f2d>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	4629      	mov	r1, r5
 8005d10:	f7fa fda4 	bl	800085c <__aeabi_ddiv>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	4b5a      	ldr	r3, [pc, #360]	@ (8005e8c <MPU6050SelfTest+0x9c4>)
 8005d22:	f7fa fab9 	bl	8000298 <__aeabi_dsub>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d30:	3303      	adds	r3, #3
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	18d4      	adds	r4, r2, r3
 8005d38:	f7fa ff5e 	bl	8000bf8 <__aeabi_d2f>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++) {
 8005d40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d42:	3301      	adds	r3, #1
 8005d44:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	f77f af73 	ble.w	8005c34 <MPU6050SelfTest+0x76c>
	}

   for (int i = 0; i < 3; i++) {
 8005d4e:	2300      	movs	r3, #0
 8005d50:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d52:	e089      	b.n	8005e68 <MPU6050SelfTest+0x9a0>
     destination[i+3]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8005d54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	3378      	adds	r3, #120	@ 0x78
 8005d5a:	443b      	add	r3, r7
 8005d5c:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8005d60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	3378      	adds	r3, #120	@ 0x78
 8005d66:	443b      	add	r3, r7
 8005d68:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d76:	ee17 0a90 	vmov	r0, s15
 8005d7a:	f7fa fbed 	bl	8000558 <__aeabi_f2d>
 8005d7e:	f04f 0200 	mov.w	r2, #0
 8005d82:	4b42      	ldr	r3, [pc, #264]	@ (8005e8c <MPU6050SelfTest+0x9c4>)
 8005d84:	f7fa fc40 	bl	8000608 <__aeabi_dmul>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4614      	mov	r4, r2
 8005d8e:	461d      	mov	r5, r3
 8005d90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	3378      	adds	r3, #120	@ 0x78
 8005d96:	443b      	add	r3, r7
 8005d98:	3b70      	subs	r3, #112	@ 0x70
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fa fbdb 	bl	8000558 <__aeabi_f2d>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4620      	mov	r0, r4
 8005da8:	4629      	mov	r1, r5
 8005daa:	f7fa fd57 	bl	800085c <__aeabi_ddiv>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4610      	mov	r0, r2
 8005db4:	4619      	mov	r1, r3
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	4b34      	ldr	r3, [pc, #208]	@ (8005e8c <MPU6050SelfTest+0x9c4>)
 8005dbc:	f7fa fa6c 	bl	8000298 <__aeabi_dsub>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dca:	3303      	adds	r3, #3
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	18d4      	adds	r4, r2, r3
 8005dd2:	f7fa ff11 	bl	8000bf8 <__aeabi_d2f>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	6023      	str	r3, [r4, #0]
     destination[i+6] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8005dda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	3378      	adds	r3, #120	@ 0x78
 8005de0:	443b      	add	r3, r7
 8005de2:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8005de6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	3378      	adds	r3, #120	@ 0x78
 8005dec:	443b      	add	r3, r7
 8005dee:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	ee07 3a90 	vmov	s15, r3
 8005df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dfc:	ee17 0a90 	vmov	r0, s15
 8005e00:	f7fa fbaa 	bl	8000558 <__aeabi_f2d>
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	4b20      	ldr	r3, [pc, #128]	@ (8005e8c <MPU6050SelfTest+0x9c4>)
 8005e0a:	f7fa fbfd 	bl	8000608 <__aeabi_dmul>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4614      	mov	r4, r2
 8005e14:	461d      	mov	r5, r3
 8005e16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e18:	3303      	adds	r3, #3
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	3378      	adds	r3, #120	@ 0x78
 8005e1e:	443b      	add	r3, r7
 8005e20:	3b70      	subs	r3, #112	@ 0x70
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fa fb97 	bl	8000558 <__aeabi_f2d>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4620      	mov	r0, r4
 8005e30:	4629      	mov	r1, r5
 8005e32:	f7fa fd13 	bl	800085c <__aeabi_ddiv>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	4b12      	ldr	r3, [pc, #72]	@ (8005e8c <MPU6050SelfTest+0x9c4>)
 8005e44:	f7fa fa28 	bl	8000298 <__aeabi_dsub>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e52:	3306      	adds	r3, #6
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	18d4      	adds	r4, r2, r3
 8005e5a:	f7fa fecd 	bl	8000bf8 <__aeabi_d2f>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8005e62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e64:	3301      	adds	r3, #1
 8005e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	f77f af72 	ble.w	8005d54 <MPU6050SelfTest+0x88c>
   }
}
 8005e70:	bf00      	nop
 8005e72:	bf00      	nop
 8005e74:	3778      	adds	r7, #120	@ 0x78
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bdb0      	pop	{r4, r5, r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	f3af 8000 	nop.w
 8005e80:	c28f5c29 	.word	0xc28f5c29
 8005e84:	3ff028f5 	.word	0x3ff028f5
 8005e88:	3ff00000 	.word	0x3ff00000
 8005e8c:	40590000 	.word	0x40590000

08005e90 <quaternionInit>:
#include "quaternion.h"

float a12, a22, a31, a32, a33;

void quaternionInit(Quaternion_t *DataStruct, float sampleTimeMicros)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	ed87 0a00 	vstr	s0, [r7]
	DataStruct->GyroMeasError = M_PI * (40.0f / 180.0f);		// gyroscope measurement error in rads/s (start at 60 deg/s), then reduce after ~10 s to 3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a26      	ldr	r2, [pc, #152]	@ (8005f38 <quaternionInit+0xa8>)
 8005ea0:	601a      	str	r2, [r3, #0]
	DataStruct->beta = sqrt(3.0f / 4.0f) * DataStruct->GyroMeasError;		// compute beta
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fa fb56 	bl	8000558 <__aeabi_f2d>
 8005eac:	a320      	add	r3, pc, #128	@ (adr r3, 8005f30 <quaternionInit+0xa0>)
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f7fa fba9 	bl	8000608 <__aeabi_dmul>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4610      	mov	r0, r2
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	f7fa fe9b 	bl	8000bf8 <__aeabi_d2f>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	605a      	str	r2, [r3, #4]
	DataStruct->GyroMeasDrift = M_PI * (2.0f / 180.0f);		// gyroscope measurement drift in rad/s/s (start at 0.0 deg/s/s)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a1c      	ldr	r2, [pc, #112]	@ (8005f3c <quaternionInit+0xac>)
 8005ecc:	609a      	str	r2, [r3, #8]
	DataStruct->zeta = sqrt(3.0f / 4.0f) * DataStruct->GyroMeasDrift;		// compute zeta, the other free parameter in the Madgwick scheme usually set to a small or zero value
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fa fb40 	bl	8000558 <__aeabi_f2d>
 8005ed8:	a315      	add	r3, pc, #84	@ (adr r3, 8005f30 <quaternionInit+0xa0>)
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f7fa fb93 	bl	8000608 <__aeabi_dmul>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4619      	mov	r1, r3
 8005eea:	f7fa fe85 	bl	8000bf8 <__aeabi_d2f>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60da      	str	r2, [r3, #12]

	DataStruct->deltat = sampleTimeMicros / 1000000.0f;
 8005ef4:	ed97 7a00 	vldr	s14, [r7]
 8005ef8:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8005f40 <quaternionInit+0xb0>
 8005efc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	edc3 7a04 	vstr	s15, [r3, #16]

	DataStruct->q[0] = 1.0f;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005f0c:	621a      	str	r2, [r3, #32]
	DataStruct->q[1] = 0.0f;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	625a      	str	r2, [r3, #36]	@ 0x24
	DataStruct->q[2] = 0.0f;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	629a      	str	r2, [r3, #40]	@ 0x28
	DataStruct->q[3] = 0.0f;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	e8584caa 	.word	0xe8584caa
 8005f34:	3febb67a 	.word	0x3febb67a
 8005f38:	3f32b8c2 	.word	0x3f32b8c2
 8005f3c:	3d0efa35 	.word	0x3d0efa35
 8005f40:	49742400 	.word	0x49742400

08005f44 <quaternionUpdate>:

void quaternionUpdate(Quaternion_t *DataStruct, float ax, float ay, float az, float gyrox, float gyroy, float gyroz)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b0a6      	sub	sp, #152	@ 0x98
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	61f8      	str	r0, [r7, #28]
 8005f4c:	ed87 0a06 	vstr	s0, [r7, #24]
 8005f50:	edc7 0a05 	vstr	s1, [r7, #20]
 8005f54:	ed87 1a04 	vstr	s2, [r7, #16]
 8005f58:	edc7 1a03 	vstr	s3, [r7, #12]
 8005f5c:	ed87 2a02 	vstr	s4, [r7, #8]
 8005f60:	edc7 2a01 	vstr	s5, [r7, #4]
    float q1 = DataStruct->q[0], q2 = DataStruct->q[1], q3 = DataStruct->q[2], q4 = DataStruct->q[3];         // short name local variable for readability
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; // objective function Jacobian elements
    float qDot1, qDot2, qDot3, qDot4;
    float hatDot1, hatDot2, hatDot3, hatDot4;

    // Auxiliary variables to avoid repeated arithmetic
    float _halfq1 = 0.5f * q1;
 8005f84:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8005f88:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f90:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
    float _halfq2 = 0.5f * q2;
 8005f94:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8005f98:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fa0:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
    float _halfq3 = 0.5f * q3;
 8005fa4:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8005fa8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fb0:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    float _halfq4 = 0.5f * q4;
 8005fb4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8005fb8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fc0:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    float _2q1 = 2.0f * q1;
 8005fc4:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8005fc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fcc:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float _2q2 = 2.0f * q2;
 8005fd0:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8005fd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fd8:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    float _2q3 = 2.0f * q3;
 8005fdc:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8005fe0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fe4:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    float _2q4 = 2.0f * q4;
 8005fe8:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8005fec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ff0:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

    // Normalise accelerometer measurement
    norm = sqrt(ax * ax + ay * ay + az * az);
 8005ff4:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ff8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005ffc:	edd7 7a05 	vldr	s15, [r7, #20]
 8006000:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006004:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006008:	edd7 7a04 	vldr	s15, [r7, #16]
 800600c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006014:	ee17 0a90 	vmov	r0, s15
 8006018:	f7fa fa9e 	bl	8000558 <__aeabi_f2d>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	ec43 2b10 	vmov	d0, r2, r3
 8006024:	f009 fdc4 	bl	800fbb0 <sqrt>
 8006028:	ec53 2b10 	vmov	r2, r3, d0
 800602c:	4610      	mov	r0, r2
 800602e:	4619      	mov	r1, r3
 8006030:	f7fa fde2 	bl	8000bf8 <__aeabi_d2f>
 8006034:	4603      	mov	r3, r0
 8006036:	667b      	str	r3, [r7, #100]	@ 0x64
    if (norm == 0.0f) return; // handle NaN
 8006038:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800603c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006044:	f000 821e 	beq.w	8006484 <quaternionUpdate+0x540>
    norm = 1.0f/norm;
 8006048:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800604c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8006050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006054:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    ax *= norm;
 8006058:	ed97 7a06 	vldr	s14, [r7, #24]
 800605c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006064:	edc7 7a06 	vstr	s15, [r7, #24]
    ay *= norm;
 8006068:	ed97 7a05 	vldr	s14, [r7, #20]
 800606c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006074:	edc7 7a05 	vstr	s15, [r7, #20]
    az *= norm;
 8006078:	ed97 7a04 	vldr	s14, [r7, #16]
 800607c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006084:	edc7 7a04 	vstr	s15, [r7, #16]

    // Compute the objective function and Jacobian
    f1 = _2q2 * q4 - _2q1 * q3 - ax;
 8006088:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800608c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8006090:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006094:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8006098:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800609c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80060a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ac:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    f2 = _2q1 * q2 + _2q3 * q4 - ay;
 80060b0:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80060b4:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80060b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060bc:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 80060c0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80060c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80060d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060d4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    f3 = 1.0f - _2q2 * q2 - _2q3 * q3 - az;
 80060d8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80060dc:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80060e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060ec:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 80060f0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80060f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8006100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006104:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    J_11or24 = _2q3;
 8006108:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800610a:	657b      	str	r3, [r7, #84]	@ 0x54
    J_12or23 = _2q4;
 800610c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800610e:	653b      	str	r3, [r7, #80]	@ 0x50
    J_13or22 = _2q1;
 8006110:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006112:	64fb      	str	r3, [r7, #76]	@ 0x4c
    J_14or21 = _2q2;
 8006114:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006116:	64bb      	str	r3, [r7, #72]	@ 0x48
    J_32 = 2.0f * J_14or21;
 8006118:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800611c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006120:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    J_33 = 2.0f * J_11or24;
 8006124:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8006128:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800612c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // Compute the gradient (matrix multiplication)
    hatDot1 = J_14or21 * f2 - J_11or24 * f1;
 8006130:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8006134:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8006138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800613c:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8006140:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8006144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800614c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    hatDot2 = J_12or23 * f1 + J_13or22 * f2 - J_32 * f3;
 8006150:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8006154:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8006158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800615c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8006160:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8006164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800616c:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8006170:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800617c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    hatDot3 = J_12or23 * f2 - J_33 *f3 - J_13or22 * f1;
 8006180:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8006184:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8006188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800618c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8006190:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006198:	ee37 7a67 	vsub.f32	s14, s14, s15
 800619c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80061a0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80061a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061ac:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    hatDot4 = J_14or21 * f1 + J_11or24 * f2;
 80061b0:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80061b4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80061b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061bc:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80061c0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80061c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061cc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Normalize the gradient
    norm = sqrt(hatDot1 * hatDot1 + hatDot2 * hatDot2 + hatDot3 * hatDot3 + hatDot4 * hatDot4);
 80061d0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80061d4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80061d8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80061dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061e4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80061e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061f0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80061f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061fc:	ee17 0a90 	vmov	r0, s15
 8006200:	f7fa f9aa 	bl	8000558 <__aeabi_f2d>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	ec43 2b10 	vmov	d0, r2, r3
 800620c:	f009 fcd0 	bl	800fbb0 <sqrt>
 8006210:	ec53 2b10 	vmov	r2, r3, d0
 8006214:	4610      	mov	r0, r2
 8006216:	4619      	mov	r1, r3
 8006218:	f7fa fcee 	bl	8000bf8 <__aeabi_d2f>
 800621c:	4603      	mov	r3, r0
 800621e:	667b      	str	r3, [r7, #100]	@ 0x64
    hatDot1 /= norm;
 8006220:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8006224:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8006228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800622c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    hatDot2 /= norm;
 8006230:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8006234:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8006238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800623c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    hatDot3 /= norm;
 8006240:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8006244:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8006248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800624c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    hatDot4 /= norm;
 8006250:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8006254:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8006258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800625c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Compute the quaternion derivative
    qDot1 = -_halfq2 * gyrox - _halfq3 * gyroy - _halfq4 * gyroz;
 8006260:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8006264:	eeb1 7a67 	vneg.f32	s14, s15
 8006268:	edd7 7a03 	vldr	s15, [r7, #12]
 800626c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006270:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8006274:	edd7 7a02 	vldr	s15, [r7, #8]
 8006278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800627c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006280:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8006284:	edd7 7a01 	vldr	s15, [r7, #4]
 8006288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800628c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006290:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    qDot2 =  _halfq1 * gyrox + _halfq3 * gyroz - _halfq4 * gyroy;
 8006294:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8006298:	edd7 7a03 	vldr	s15, [r7, #12]
 800629c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062a0:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 80062a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80062a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062b0:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 80062b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80062b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062c0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    qDot3 =  _halfq1 * gyroy - _halfq2 * gyroz + _halfq4 * gyrox;
 80062c4:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80062c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80062cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062d0:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 80062d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80062d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062e0:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 80062e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80062e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    qDot4 =  _halfq1 * gyroz + _halfq2 * gyroy - _halfq3 * gyrox;
 80062f4:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80062f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80062fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006300:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8006304:	edd7 7a02 	vldr	s15, [r7, #8]
 8006308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800630c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006310:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8006314:	edd7 7a03 	vldr	s15, [r7, #12]
 8006318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800631c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006320:	edc7 7a08 	vstr	s15, [r7, #32]

    // Compute then integrate estimated quaternion derivative
    q1 += (qDot1 -(DataStruct->beta * hatDot1)) * DataStruct->deltat;
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	ed93 7a01 	vldr	s14, [r3, #4]
 800632a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800632e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006332:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8006336:	ee37 7a67 	vsub.f32	s14, s14, s15
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006344:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8006348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800634c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    q2 += (qDot2 -(DataStruct->beta * hatDot2)) * DataStruct->deltat;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	ed93 7a01 	vldr	s14, [r3, #4]
 8006356:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800635a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8006362:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	edd3 7a04 	vldr	s15, [r3, #16]
 800636c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006370:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8006374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006378:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    q3 += (qDot3 -(DataStruct->beta * hatDot3)) * DataStruct->deltat;
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006382:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800638e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	edd3 7a04 	vldr	s15, [r3, #16]
 8006398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639c:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 80063a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063a4:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    q4 += (qDot4 -(DataStruct->beta * hatDot4)) * DataStruct->deltat;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80063ae:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80063b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b6:	ed97 7a08 	vldr	s14, [r7, #32]
 80063ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80063c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c8:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80063cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063d0:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    // Normalize the quaternion
    norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 80063d4:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80063d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80063dc:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80063e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063e8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80063ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063f4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80063f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006400:	ee17 0a90 	vmov	r0, s15
 8006404:	f7fa f8a8 	bl	8000558 <__aeabi_f2d>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	ec43 2b10 	vmov	d0, r2, r3
 8006410:	f009 fbce 	bl	800fbb0 <sqrt>
 8006414:	ec53 2b10 	vmov	r2, r3, d0
 8006418:	4610      	mov	r0, r2
 800641a:	4619      	mov	r1, r3
 800641c:	f7fa fbec 	bl	8000bf8 <__aeabi_d2f>
 8006420:	4603      	mov	r3, r0
 8006422:	667b      	str	r3, [r7, #100]	@ 0x64
    norm = 1.0f/norm;
 8006424:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006428:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800642c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006430:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    DataStruct->q[0] = q1 * norm;
 8006434:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8006438:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800643c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	edc3 7a08 	vstr	s15, [r3, #32]
    DataStruct->q[1] = q2 * norm;
 8006446:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 800644a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800644e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    DataStruct->q[2] = q3 * norm;
 8006458:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 800645c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    DataStruct->q[3] = q4 * norm;
 800646a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800646e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    quaternionEulerUpdate(DataStruct);
 800647c:	69f8      	ldr	r0, [r7, #28]
 800647e:	f000 f807 	bl	8006490 <quaternionEulerUpdate>
 8006482:	e000      	b.n	8006486 <quaternionUpdate+0x542>
    if (norm == 0.0f) return; // handle NaN
 8006484:	bf00      	nop
}
 8006486:	3798      	adds	r7, #152	@ 0x98
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	0000      	movs	r0, r0
	...

08006490 <quaternionEulerUpdate>:

void quaternionEulerUpdate(Quaternion_t *DataStruct)
{
 8006490:	b5b0      	push	{r4, r5, r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	DataStruct->yaw   = atan2(2.0f * (DataStruct->q[1] * DataStruct->q[2] + DataStruct->q[0] * DataStruct->q[3]),
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80064a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	edd3 6a08 	vldr	s13, [r3, #32]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80064b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064c0:	ee17 0a90 	vmov	r0, s15
 80064c4:	f7fa f848 	bl	8000558 <__aeabi_f2d>
 80064c8:	4604      	mov	r4, r0
 80064ca:	460d      	mov	r5, r1
			DataStruct->q[0] * DataStruct->q[0] + DataStruct->q[1] * DataStruct->q[1] - DataStruct->q[2] * DataStruct->q[2] - DataStruct->q[3] * DataStruct->q[3]);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	ed93 7a08 	vldr	s14, [r3, #32]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80064d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80064e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80064fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006500:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006514:	ee77 7a67 	vsub.f32	s15, s14, s15
	DataStruct->yaw   = atan2(2.0f * (DataStruct->q[1] * DataStruct->q[2] + DataStruct->q[0] * DataStruct->q[3]),
 8006518:	ee17 0a90 	vmov	r0, s15
 800651c:	f7fa f81c 	bl	8000558 <__aeabi_f2d>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	ec43 2b11 	vmov	d1, r2, r3
 8006528:	ec45 4b10 	vmov	d0, r4, r5
 800652c:	f009 face 	bl	800facc <atan2>
 8006530:	ec53 2b10 	vmov	r2, r3, d0
 8006534:	4610      	mov	r0, r2
 8006536:	4619      	mov	r1, r3
 8006538:	f7fa fb5e 	bl	8000bf8 <__aeabi_d2f>
 800653c:	4602      	mov	r2, r0
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	619a      	str	r2, [r3, #24]
	DataStruct->pitch = -asin(2.0f * (DataStruct->q[1] * DataStruct->q[3] - DataStruct->q[0] * DataStruct->q[2]));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800654e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	edd3 6a08 	vldr	s13, [r3, #32]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800655e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006562:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006566:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800656a:	ee17 0a90 	vmov	r0, s15
 800656e:	f7f9 fff3 	bl	8000558 <__aeabi_f2d>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	ec43 2b10 	vmov	d0, r2, r3
 800657a:	f009 fa73 	bl	800fa64 <asin>
 800657e:	ec53 2b10 	vmov	r2, r3, d0
 8006582:	4610      	mov	r0, r2
 8006584:	4619      	mov	r1, r3
 8006586:	f7fa fb37 	bl	8000bf8 <__aeabi_d2f>
 800658a:	4603      	mov	r3, r0
 800658c:	ee07 3a90 	vmov	s15, r3
 8006590:	eef1 7a67 	vneg.f32	s15, s15
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	edc3 7a05 	vstr	s15, [r3, #20]
	DataStruct->roll  = atan2(2.0f * (DataStruct->q[0] * DataStruct->q[1] + DataStruct->q[2] * DataStruct->q[3]),
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	ed93 7a08 	vldr	s14, [r3, #32]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80065a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80065b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80065c2:	ee17 0a90 	vmov	r0, s15
 80065c6:	f7f9 ffc7 	bl	8000558 <__aeabi_f2d>
 80065ca:	4604      	mov	r4, r0
 80065cc:	460d      	mov	r5, r1
			DataStruct->q[0] * DataStruct->q[0] - DataStruct->q[1] * DataStruct->q[1] - DataStruct->q[2] * DataStruct->q[2] + DataStruct->q[3] * DataStruct->q[3]);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	ed93 7a08 	vldr	s14, [r3, #32]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80065da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80065ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80065fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006602:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006616:	ee77 7a27 	vadd.f32	s15, s14, s15
	DataStruct->roll  = atan2(2.0f * (DataStruct->q[0] * DataStruct->q[1] + DataStruct->q[2] * DataStruct->q[3]),
 800661a:	ee17 0a90 	vmov	r0, s15
 800661e:	f7f9 ff9b 	bl	8000558 <__aeabi_f2d>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	ec43 2b11 	vmov	d1, r2, r3
 800662a:	ec45 4b10 	vmov	d0, r4, r5
 800662e:	f009 fa4d 	bl	800facc <atan2>
 8006632:	ec53 2b10 	vmov	r2, r3, d0
 8006636:	4610      	mov	r0, r2
 8006638:	4619      	mov	r1, r3
 800663a:	f7fa fadd 	bl	8000bf8 <__aeabi_d2f>
 800663e:	4602      	mov	r2, r0
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	61da      	str	r2, [r3, #28]
	DataStruct->pitch *= 180.0f / M_PI;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	4618      	mov	r0, r3
 800664a:	f7f9 ff85 	bl	8000558 <__aeabi_f2d>
 800664e:	a31c      	add	r3, pc, #112	@ (adr r3, 80066c0 <quaternionEulerUpdate+0x230>)
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	f7f9 ffd8 	bl	8000608 <__aeabi_dmul>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4610      	mov	r0, r2
 800665e:	4619      	mov	r1, r3
 8006660:	f7fa faca 	bl	8000bf8 <__aeabi_d2f>
 8006664:	4602      	mov	r2, r0
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	615a      	str	r2, [r3, #20]
	DataStruct->yaw   *= 180.0f / M_PI;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	4618      	mov	r0, r3
 8006670:	f7f9 ff72 	bl	8000558 <__aeabi_f2d>
 8006674:	a312      	add	r3, pc, #72	@ (adr r3, 80066c0 <quaternionEulerUpdate+0x230>)
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	f7f9 ffc5 	bl	8000608 <__aeabi_dmul>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4610      	mov	r0, r2
 8006684:	4619      	mov	r1, r3
 8006686:	f7fa fab7 	bl	8000bf8 <__aeabi_d2f>
 800668a:	4602      	mov	r2, r0
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	619a      	str	r2, [r3, #24]
	DataStruct->roll  *= 180.0f / M_PI;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	4618      	mov	r0, r3
 8006696:	f7f9 ff5f 	bl	8000558 <__aeabi_f2d>
 800669a:	a309      	add	r3, pc, #36	@ (adr r3, 80066c0 <quaternionEulerUpdate+0x230>)
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	f7f9 ffb2 	bl	8000608 <__aeabi_dmul>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4610      	mov	r0, r2
 80066aa:	4619      	mov	r1, r3
 80066ac:	f7fa faa4 	bl	8000bf8 <__aeabi_d2f>
 80066b0:	4602      	mov	r2, r0
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	61da      	str	r2, [r3, #28]
}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bdb0      	pop	{r4, r5, r7, pc}
 80066be:	bf00      	nop
 80066c0:	1a63c1f8 	.word	0x1a63c1f8
 80066c4:	404ca5dc 	.word	0x404ca5dc

080066c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066ce:	2300      	movs	r3, #0
 80066d0:	607b      	str	r3, [r7, #4]
 80066d2:	4b10      	ldr	r3, [pc, #64]	@ (8006714 <HAL_MspInit+0x4c>)
 80066d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006714 <HAL_MspInit+0x4c>)
 80066d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80066de:	4b0d      	ldr	r3, [pc, #52]	@ (8006714 <HAL_MspInit+0x4c>)
 80066e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066e6:	607b      	str	r3, [r7, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80066ea:	2300      	movs	r3, #0
 80066ec:	603b      	str	r3, [r7, #0]
 80066ee:	4b09      	ldr	r3, [pc, #36]	@ (8006714 <HAL_MspInit+0x4c>)
 80066f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f2:	4a08      	ldr	r2, [pc, #32]	@ (8006714 <HAL_MspInit+0x4c>)
 80066f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80066fa:	4b06      	ldr	r3, [pc, #24]	@ (8006714 <HAL_MspInit+0x4c>)
 80066fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006702:	603b      	str	r3, [r7, #0]
 8006704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	40023800 	.word	0x40023800

08006718 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08c      	sub	sp, #48	@ 0x30
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006720:	f107 031c 	add.w	r3, r7, #28
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	605a      	str	r2, [r3, #4]
 800672a:	609a      	str	r2, [r3, #8]
 800672c:	60da      	str	r2, [r3, #12]
 800672e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a4a      	ldr	r2, [pc, #296]	@ (8006860 <HAL_I2C_MspInit+0x148>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d13d      	bne.n	80067b6 <HAL_I2C_MspInit+0x9e>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800673a:	2300      	movs	r3, #0
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	4b49      	ldr	r3, [pc, #292]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 8006740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006742:	4a48      	ldr	r2, [pc, #288]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 8006744:	f043 0302 	orr.w	r3, r3, #2
 8006748:	6313      	str	r3, [r2, #48]	@ 0x30
 800674a:	4b46      	ldr	r3, [pc, #280]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 800674c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800675a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800675c:	2312      	movs	r3, #18
 800675e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006760:	2300      	movs	r3, #0
 8006762:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006764:	2303      	movs	r3, #3
 8006766:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006768:	2304      	movs	r3, #4
 800676a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800676c:	f107 031c 	add.w	r3, r7, #28
 8006770:	4619      	mov	r1, r3
 8006772:	483d      	ldr	r0, [pc, #244]	@ (8006868 <HAL_I2C_MspInit+0x150>)
 8006774:	f001 f858 	bl	8007828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006778:	2308      	movs	r3, #8
 800677a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800677c:	2312      	movs	r3, #18
 800677e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006780:	2300      	movs	r3, #0
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006784:	2303      	movs	r3, #3
 8006786:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8006788:	2309      	movs	r3, #9
 800678a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800678c:	f107 031c 	add.w	r3, r7, #28
 8006790:	4619      	mov	r1, r3
 8006792:	4835      	ldr	r0, [pc, #212]	@ (8006868 <HAL_I2C_MspInit+0x150>)
 8006794:	f001 f848 	bl	8007828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	4b31      	ldr	r3, [pc, #196]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 800679e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a0:	4a30      	ldr	r2, [pc, #192]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 80067a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80067a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80067a8:	4b2e      	ldr	r3, [pc, #184]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 80067aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80067b4:	e04f      	b.n	8006856 <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C3)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a2c      	ldr	r2, [pc, #176]	@ (800686c <HAL_I2C_MspInit+0x154>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d14a      	bne.n	8006856 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067c0:	2300      	movs	r3, #0
 80067c2:	613b      	str	r3, [r7, #16]
 80067c4:	4b27      	ldr	r3, [pc, #156]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 80067c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c8:	4a26      	ldr	r2, [pc, #152]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 80067ca:	f043 0301 	orr.w	r3, r3, #1
 80067ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80067d0:	4b24      	ldr	r3, [pc, #144]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 80067d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067dc:	2300      	movs	r3, #0
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	4b20      	ldr	r3, [pc, #128]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 80067e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 80067e6:	f043 0302 	orr.w	r3, r3, #2
 80067ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80067ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 80067ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	60fb      	str	r3, [r7, #12]
 80067f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80067f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80067fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80067fe:	2312      	movs	r3, #18
 8006800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006802:	2300      	movs	r3, #0
 8006804:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006806:	2303      	movs	r3, #3
 8006808:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800680a:	2304      	movs	r3, #4
 800680c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800680e:	f107 031c 	add.w	r3, r7, #28
 8006812:	4619      	mov	r1, r3
 8006814:	4816      	ldr	r0, [pc, #88]	@ (8006870 <HAL_I2C_MspInit+0x158>)
 8006816:	f001 f807 	bl	8007828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800681a:	2310      	movs	r3, #16
 800681c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800681e:	2312      	movs	r3, #18
 8006820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006822:	2300      	movs	r3, #0
 8006824:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006826:	2303      	movs	r3, #3
 8006828:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800682a:	2309      	movs	r3, #9
 800682c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800682e:	f107 031c 	add.w	r3, r7, #28
 8006832:	4619      	mov	r1, r3
 8006834:	480c      	ldr	r0, [pc, #48]	@ (8006868 <HAL_I2C_MspInit+0x150>)
 8006836:	f000 fff7 	bl	8007828 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800683a:	2300      	movs	r3, #0
 800683c:	60bb      	str	r3, [r7, #8]
 800683e:	4b09      	ldr	r3, [pc, #36]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 8006840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006842:	4a08      	ldr	r2, [pc, #32]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 8006844:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006848:	6413      	str	r3, [r2, #64]	@ 0x40
 800684a:	4b06      	ldr	r3, [pc, #24]	@ (8006864 <HAL_I2C_MspInit+0x14c>)
 800684c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006852:	60bb      	str	r3, [r7, #8]
 8006854:	68bb      	ldr	r3, [r7, #8]
}
 8006856:	bf00      	nop
 8006858:	3730      	adds	r7, #48	@ 0x30
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40005800 	.word	0x40005800
 8006864:	40023800 	.word	0x40023800
 8006868:	40020400 	.word	0x40020400
 800686c:	40005c00 	.word	0x40005c00
 8006870:	40020000 	.word	0x40020000

08006874 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006884:	d10e      	bne.n	80068a4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	4b27      	ldr	r3, [pc, #156]	@ (8006928 <HAL_TIM_Base_MspInit+0xb4>)
 800688c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688e:	4a26      	ldr	r2, [pc, #152]	@ (8006928 <HAL_TIM_Base_MspInit+0xb4>)
 8006890:	f043 0301 	orr.w	r3, r3, #1
 8006894:	6413      	str	r3, [r2, #64]	@ 0x40
 8006896:	4b24      	ldr	r3, [pc, #144]	@ (8006928 <HAL_TIM_Base_MspInit+0xb4>)
 8006898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 80068a2:	e03a      	b.n	800691a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a20      	ldr	r2, [pc, #128]	@ (800692c <HAL_TIM_Base_MspInit+0xb8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d10e      	bne.n	80068cc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006928 <HAL_TIM_Base_MspInit+0xb4>)
 80068b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006928 <HAL_TIM_Base_MspInit+0xb4>)
 80068b8:	f043 0302 	orr.w	r3, r3, #2
 80068bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80068be:	4b1a      	ldr	r3, [pc, #104]	@ (8006928 <HAL_TIM_Base_MspInit+0xb4>)
 80068c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	693b      	ldr	r3, [r7, #16]
}
 80068ca:	e026      	b.n	800691a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a17      	ldr	r2, [pc, #92]	@ (8006930 <HAL_TIM_Base_MspInit+0xbc>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d10e      	bne.n	80068f4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	4b13      	ldr	r3, [pc, #76]	@ (8006928 <HAL_TIM_Base_MspInit+0xb4>)
 80068dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068de:	4a12      	ldr	r2, [pc, #72]	@ (8006928 <HAL_TIM_Base_MspInit+0xb4>)
 80068e0:	f043 0304 	orr.w	r3, r3, #4
 80068e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80068e6:	4b10      	ldr	r3, [pc, #64]	@ (8006928 <HAL_TIM_Base_MspInit+0xb4>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
}
 80068f2:	e012      	b.n	800691a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006934 <HAL_TIM_Base_MspInit+0xc0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d10d      	bne.n	800691a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80068fe:	2300      	movs	r3, #0
 8006900:	60bb      	str	r3, [r7, #8]
 8006902:	4b09      	ldr	r3, [pc, #36]	@ (8006928 <HAL_TIM_Base_MspInit+0xb4>)
 8006904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006906:	4a08      	ldr	r2, [pc, #32]	@ (8006928 <HAL_TIM_Base_MspInit+0xb4>)
 8006908:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800690c:	6453      	str	r3, [r2, #68]	@ 0x44
 800690e:	4b06      	ldr	r3, [pc, #24]	@ (8006928 <HAL_TIM_Base_MspInit+0xb4>)
 8006910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006912:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006916:	60bb      	str	r3, [r7, #8]
 8006918:	68bb      	ldr	r3, [r7, #8]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40023800 	.word	0x40023800
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40014800 	.word	0x40014800

08006938 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08c      	sub	sp, #48	@ 0x30
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006940:	f107 031c 	add.w	r3, r7, #28
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	605a      	str	r2, [r3, #4]
 800694a:	609a      	str	r2, [r3, #8]
 800694c:	60da      	str	r2, [r3, #12]
 800694e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006958:	d11e      	bne.n	8006998 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800695a:	2300      	movs	r3, #0
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	4b43      	ldr	r3, [pc, #268]	@ (8006a6c <HAL_TIM_MspPostInit+0x134>)
 8006960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006962:	4a42      	ldr	r2, [pc, #264]	@ (8006a6c <HAL_TIM_MspPostInit+0x134>)
 8006964:	f043 0301 	orr.w	r3, r3, #1
 8006968:	6313      	str	r3, [r2, #48]	@ 0x30
 800696a:	4b40      	ldr	r3, [pc, #256]	@ (8006a6c <HAL_TIM_MspPostInit+0x134>)
 800696c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	61bb      	str	r3, [r7, #24]
 8006974:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006976:	230f      	movs	r3, #15
 8006978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800697a:	2302      	movs	r3, #2
 800697c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800697e:	2300      	movs	r3, #0
 8006980:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006982:	2300      	movs	r3, #0
 8006984:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006986:	2301      	movs	r3, #1
 8006988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800698a:	f107 031c 	add.w	r3, r7, #28
 800698e:	4619      	mov	r1, r3
 8006990:	4837      	ldr	r0, [pc, #220]	@ (8006a70 <HAL_TIM_MspPostInit+0x138>)
 8006992:	f000 ff49 	bl	8007828 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006996:	e065      	b.n	8006a64 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a35      	ldr	r2, [pc, #212]	@ (8006a74 <HAL_TIM_MspPostInit+0x13c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d13c      	bne.n	8006a1c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069a2:	2300      	movs	r3, #0
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	4b31      	ldr	r3, [pc, #196]	@ (8006a6c <HAL_TIM_MspPostInit+0x134>)
 80069a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069aa:	4a30      	ldr	r2, [pc, #192]	@ (8006a6c <HAL_TIM_MspPostInit+0x134>)
 80069ac:	f043 0301 	orr.w	r3, r3, #1
 80069b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80069b2:	4b2e      	ldr	r3, [pc, #184]	@ (8006a6c <HAL_TIM_MspPostInit+0x134>)
 80069b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069be:	2300      	movs	r3, #0
 80069c0:	613b      	str	r3, [r7, #16]
 80069c2:	4b2a      	ldr	r3, [pc, #168]	@ (8006a6c <HAL_TIM_MspPostInit+0x134>)
 80069c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c6:	4a29      	ldr	r2, [pc, #164]	@ (8006a6c <HAL_TIM_MspPostInit+0x134>)
 80069c8:	f043 0302 	orr.w	r3, r3, #2
 80069cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80069ce:	4b27      	ldr	r3, [pc, #156]	@ (8006a6c <HAL_TIM_MspPostInit+0x134>)
 80069d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	613b      	str	r3, [r7, #16]
 80069d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80069da:	23c0      	movs	r3, #192	@ 0xc0
 80069dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069de:	2302      	movs	r3, #2
 80069e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e2:	2300      	movs	r3, #0
 80069e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069e6:	2300      	movs	r3, #0
 80069e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80069ea:	2302      	movs	r3, #2
 80069ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069ee:	f107 031c 	add.w	r3, r7, #28
 80069f2:	4619      	mov	r1, r3
 80069f4:	481e      	ldr	r0, [pc, #120]	@ (8006a70 <HAL_TIM_MspPostInit+0x138>)
 80069f6:	f000 ff17 	bl	8007828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80069fa:	2303      	movs	r3, #3
 80069fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069fe:	2302      	movs	r3, #2
 8006a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a06:	2300      	movs	r3, #0
 8006a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a0e:	f107 031c 	add.w	r3, r7, #28
 8006a12:	4619      	mov	r1, r3
 8006a14:	4818      	ldr	r0, [pc, #96]	@ (8006a78 <HAL_TIM_MspPostInit+0x140>)
 8006a16:	f000 ff07 	bl	8007828 <HAL_GPIO_Init>
}
 8006a1a:	e023      	b.n	8006a64 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a16      	ldr	r2, [pc, #88]	@ (8006a7c <HAL_TIM_MspPostInit+0x144>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d11e      	bne.n	8006a64 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	4b10      	ldr	r3, [pc, #64]	@ (8006a6c <HAL_TIM_MspPostInit+0x134>)
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8006a6c <HAL_TIM_MspPostInit+0x134>)
 8006a30:	f043 0302 	orr.w	r3, r3, #2
 8006a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a36:	4b0d      	ldr	r3, [pc, #52]	@ (8006a6c <HAL_TIM_MspPostInit+0x134>)
 8006a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006a42:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8006a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a50:	2300      	movs	r3, #0
 8006a52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006a54:	2302      	movs	r3, #2
 8006a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a58:	f107 031c 	add.w	r3, r7, #28
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4806      	ldr	r0, [pc, #24]	@ (8006a78 <HAL_TIM_MspPostInit+0x140>)
 8006a60:	f000 fee2 	bl	8007828 <HAL_GPIO_Init>
}
 8006a64:	bf00      	nop
 8006a66:	3730      	adds	r7, #48	@ 0x30
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40023800 	.word	0x40023800
 8006a70:	40020000 	.word	0x40020000
 8006a74:	40000400 	.word	0x40000400
 8006a78:	40020400 	.word	0x40020400
 8006a7c:	40000800 	.word	0x40000800

08006a80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08a      	sub	sp, #40	@ 0x28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a88:	f107 0314 	add.w	r3, r7, #20
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	609a      	str	r2, [r3, #8]
 8006a94:	60da      	str	r2, [r3, #12]
 8006a96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a49      	ldr	r2, [pc, #292]	@ (8006bc4 <HAL_UART_MspInit+0x144>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	f040 808b 	bne.w	8006bba <HAL_UART_MspInit+0x13a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	4b47      	ldr	r3, [pc, #284]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aac:	4a46      	ldr	r2, [pc, #280]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006aae:	f043 0310 	orr.w	r3, r3, #16
 8006ab2:	6453      	str	r3, [r2, #68]	@ 0x44
 8006ab4:	4b44      	ldr	r3, [pc, #272]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab8:	f003 0310 	and.w	r3, r3, #16
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	4b40      	ldr	r3, [pc, #256]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac8:	4a3f      	ldr	r2, [pc, #252]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006aca:	f043 0301 	orr.w	r3, r3, #1
 8006ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ad0:	4b3d      	ldr	r3, [pc, #244]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006adc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aea:	2303      	movs	r3, #3
 8006aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006aee:	2307      	movs	r3, #7
 8006af0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006af2:	f107 0314 	add.w	r3, r7, #20
 8006af6:	4619      	mov	r1, r3
 8006af8:	4834      	ldr	r0, [pc, #208]	@ (8006bcc <HAL_UART_MspInit+0x14c>)
 8006afa:	f000 fe95 	bl	8007828 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006afe:	4b34      	ldr	r3, [pc, #208]	@ (8006bd0 <HAL_UART_MspInit+0x150>)
 8006b00:	4a34      	ldr	r2, [pc, #208]	@ (8006bd4 <HAL_UART_MspInit+0x154>)
 8006b02:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006b04:	4b32      	ldr	r3, [pc, #200]	@ (8006bd0 <HAL_UART_MspInit+0x150>)
 8006b06:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006b0a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b0c:	4b30      	ldr	r3, [pc, #192]	@ (8006bd0 <HAL_UART_MspInit+0x150>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b12:	4b2f      	ldr	r3, [pc, #188]	@ (8006bd0 <HAL_UART_MspInit+0x150>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b18:	4b2d      	ldr	r3, [pc, #180]	@ (8006bd0 <HAL_UART_MspInit+0x150>)
 8006b1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b20:	4b2b      	ldr	r3, [pc, #172]	@ (8006bd0 <HAL_UART_MspInit+0x150>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b26:	4b2a      	ldr	r3, [pc, #168]	@ (8006bd0 <HAL_UART_MspInit+0x150>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006b2c:	4b28      	ldr	r3, [pc, #160]	@ (8006bd0 <HAL_UART_MspInit+0x150>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006b32:	4b27      	ldr	r3, [pc, #156]	@ (8006bd0 <HAL_UART_MspInit+0x150>)
 8006b34:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006b38:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b3a:	4b25      	ldr	r3, [pc, #148]	@ (8006bd0 <HAL_UART_MspInit+0x150>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006b40:	4823      	ldr	r0, [pc, #140]	@ (8006bd0 <HAL_UART_MspInit+0x150>)
 8006b42:	f000 fb87 	bl	8007254 <HAL_DMA_Init>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8006b4c:	f7fd fe0a 	bl	8004764 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a1f      	ldr	r2, [pc, #124]	@ (8006bd0 <HAL_UART_MspInit+0x150>)
 8006b54:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006b56:	4a1e      	ldr	r2, [pc, #120]	@ (8006bd0 <HAL_UART_MspInit+0x150>)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8006bd8 <HAL_UART_MspInit+0x158>)
 8006b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8006bdc <HAL_UART_MspInit+0x15c>)
 8006b60:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8006b62:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd8 <HAL_UART_MspInit+0x158>)
 8006b64:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006b68:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006bd8 <HAL_UART_MspInit+0x158>)
 8006b6c:	2240      	movs	r2, #64	@ 0x40
 8006b6e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b70:	4b19      	ldr	r3, [pc, #100]	@ (8006bd8 <HAL_UART_MspInit+0x158>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b76:	4b18      	ldr	r3, [pc, #96]	@ (8006bd8 <HAL_UART_MspInit+0x158>)
 8006b78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b7c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b7e:	4b16      	ldr	r3, [pc, #88]	@ (8006bd8 <HAL_UART_MspInit+0x158>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b84:	4b14      	ldr	r3, [pc, #80]	@ (8006bd8 <HAL_UART_MspInit+0x158>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006b8a:	4b13      	ldr	r3, [pc, #76]	@ (8006bd8 <HAL_UART_MspInit+0x158>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006b90:	4b11      	ldr	r3, [pc, #68]	@ (8006bd8 <HAL_UART_MspInit+0x158>)
 8006b92:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006b96:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b98:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd8 <HAL_UART_MspInit+0x158>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006b9e:	480e      	ldr	r0, [pc, #56]	@ (8006bd8 <HAL_UART_MspInit+0x158>)
 8006ba0:	f000 fb58 	bl	8007254 <HAL_DMA_Init>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8006baa:	f7fd fddb 	bl	8004764 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a09      	ldr	r2, [pc, #36]	@ (8006bd8 <HAL_UART_MspInit+0x158>)
 8006bb2:	639a      	str	r2, [r3, #56]	@ 0x38
 8006bb4:	4a08      	ldr	r2, [pc, #32]	@ (8006bd8 <HAL_UART_MspInit+0x158>)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8006bba:	bf00      	nop
 8006bbc:	3728      	adds	r7, #40	@ 0x28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40011000 	.word	0x40011000
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	40020000 	.word	0x40020000
 8006bd0:	200005bc 	.word	0x200005bc
 8006bd4:	40026440 	.word	0x40026440
 8006bd8:	2000061c 	.word	0x2000061c
 8006bdc:	400264b8 	.word	0x400264b8

08006be0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08a      	sub	sp, #40	@ 0x28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006be8:	f107 0314 	add.w	r3, r7, #20
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	605a      	str	r2, [r3, #4]
 8006bf2:	609a      	str	r2, [r3, #8]
 8006bf4:	60da      	str	r2, [r3, #12]
 8006bf6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c00:	d132      	bne.n	8006c68 <HAL_PCD_MspInit+0x88>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c02:	2300      	movs	r3, #0
 8006c04:	613b      	str	r3, [r7, #16]
 8006c06:	4b1a      	ldr	r3, [pc, #104]	@ (8006c70 <HAL_PCD_MspInit+0x90>)
 8006c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0a:	4a19      	ldr	r2, [pc, #100]	@ (8006c70 <HAL_PCD_MspInit+0x90>)
 8006c0c:	f043 0301 	orr.w	r3, r3, #1
 8006c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c12:	4b17      	ldr	r3, [pc, #92]	@ (8006c70 <HAL_PCD_MspInit+0x90>)
 8006c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006c1e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c24:	2302      	movs	r3, #2
 8006c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006c30:	230a      	movs	r3, #10
 8006c32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c34:	f107 0314 	add.w	r3, r7, #20
 8006c38:	4619      	mov	r1, r3
 8006c3a:	480e      	ldr	r0, [pc, #56]	@ (8006c74 <HAL_PCD_MspInit+0x94>)
 8006c3c:	f000 fdf4 	bl	8007828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006c40:	4b0b      	ldr	r3, [pc, #44]	@ (8006c70 <HAL_PCD_MspInit+0x90>)
 8006c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c44:	4a0a      	ldr	r2, [pc, #40]	@ (8006c70 <HAL_PCD_MspInit+0x90>)
 8006c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c4a:	6353      	str	r3, [r2, #52]	@ 0x34
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	4b07      	ldr	r3, [pc, #28]	@ (8006c70 <HAL_PCD_MspInit+0x90>)
 8006c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c54:	4a06      	ldr	r2, [pc, #24]	@ (8006c70 <HAL_PCD_MspInit+0x90>)
 8006c56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c5c:	4b04      	ldr	r3, [pc, #16]	@ (8006c70 <HAL_PCD_MspInit+0x90>)
 8006c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8006c68:	bf00      	nop
 8006c6a:	3728      	adds	r7, #40	@ 0x28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	40023800 	.word	0x40023800
 8006c74:	40020000 	.word	0x40020000

08006c78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08c      	sub	sp, #48	@ 0x30
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60bb      	str	r3, [r7, #8]
 8006c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8006d48 <HAL_InitTick+0xd0>)
 8006c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c90:	4a2d      	ldr	r2, [pc, #180]	@ (8006d48 <HAL_InitTick+0xd0>)
 8006c92:	f043 0301 	orr.w	r3, r3, #1
 8006c96:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c98:	4b2b      	ldr	r3, [pc, #172]	@ (8006d48 <HAL_InitTick+0xd0>)
 8006c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	60bb      	str	r3, [r7, #8]
 8006ca2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006ca4:	f107 020c 	add.w	r2, r7, #12
 8006ca8:	f107 0310 	add.w	r3, r7, #16
 8006cac:	4611      	mov	r1, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f002 fce4 	bl	800967c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006cb4:	f002 fcce 	bl	8009654 <HAL_RCC_GetPCLK2Freq>
 8006cb8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbc:	4a23      	ldr	r2, [pc, #140]	@ (8006d4c <HAL_InitTick+0xd4>)
 8006cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc2:	0c9b      	lsrs	r3, r3, #18
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006cc8:	4b21      	ldr	r3, [pc, #132]	@ (8006d50 <HAL_InitTick+0xd8>)
 8006cca:	4a22      	ldr	r2, [pc, #136]	@ (8006d54 <HAL_InitTick+0xdc>)
 8006ccc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006cce:	4b20      	ldr	r3, [pc, #128]	@ (8006d50 <HAL_InitTick+0xd8>)
 8006cd0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006cd4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8006d50 <HAL_InitTick+0xd8>)
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8006d50 <HAL_InitTick+0xd8>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d50 <HAL_InitTick+0xd8>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ce8:	4b19      	ldr	r3, [pc, #100]	@ (8006d50 <HAL_InitTick+0xd8>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8006cee:	4818      	ldr	r0, [pc, #96]	@ (8006d50 <HAL_InitTick+0xd8>)
 8006cf0:	f002 fcf6 	bl	80096e0 <HAL_TIM_Base_Init>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8006cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d11b      	bne.n	8006d3a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8006d02:	4813      	ldr	r0, [pc, #76]	@ (8006d50 <HAL_InitTick+0xd8>)
 8006d04:	f002 fd96 	bl	8009834 <HAL_TIM_Base_Start_IT>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8006d0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d111      	bne.n	8006d3a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006d16:	2019      	movs	r0, #25
 8006d18:	f000 fa8e 	bl	8007238 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b0f      	cmp	r3, #15
 8006d20:	d808      	bhi.n	8006d34 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8006d22:	2200      	movs	r2, #0
 8006d24:	6879      	ldr	r1, [r7, #4]
 8006d26:	2019      	movs	r0, #25
 8006d28:	f000 fa6a 	bl	8007200 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d58 <HAL_InitTick+0xe0>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e002      	b.n	8006d3a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8006d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3730      	adds	r7, #48	@ 0x30
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	431bde83 	.word	0x431bde83
 8006d50:	20000c08 	.word	0x20000c08
 8006d54:	40010000 	.word	0x40010000
 8006d58:	20000024 	.word	0x20000024

08006d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006d60:	bf00      	nop
 8006d62:	e7fd      	b.n	8006d60 <NMI_Handler+0x4>

08006d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d64:	b480      	push	{r7}
 8006d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d68:	bf00      	nop
 8006d6a:	e7fd      	b.n	8006d68 <HardFault_Handler+0x4>

08006d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d70:	bf00      	nop
 8006d72:	e7fd      	b.n	8006d70 <MemManage_Handler+0x4>

08006d74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d78:	bf00      	nop
 8006d7a:	e7fd      	b.n	8006d78 <BusFault_Handler+0x4>

08006d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d80:	bf00      	nop
 8006d82:	e7fd      	b.n	8006d80 <UsageFault_Handler+0x4>

08006d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006d88:	bf00      	nop
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d92:	b480      	push	{r7}
 8006d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d96:	bf00      	nop
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006da4:	bf00      	nop
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006dae:	b480      	push	{r7}
 8006db0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006db2:	bf00      	nop
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006dc0:	4802      	ldr	r0, [pc, #8]	@ (8006dcc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006dc2:	f002 fdf2 	bl	80099aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006dc6:	bf00      	nop
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000c08 	.word	0x20000c08

08006dd0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006dd4:	4802      	ldr	r0, [pc, #8]	@ (8006de0 <DMA2_Stream2_IRQHandler+0x10>)
 8006dd6:	f000 faeb 	bl	80073b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006dda:	bf00      	nop
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	200005bc 	.word	0x200005bc

08006de4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006de8:	4802      	ldr	r0, [pc, #8]	@ (8006df4 <DMA2_Stream7_IRQHandler+0x10>)
 8006dea:	f000 fae1 	bl	80073b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8006dee:	bf00      	nop
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	2000061c 	.word	0x2000061c

08006df8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  return 1;
 8006dfc:	2301      	movs	r3, #1
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <_kill>:

int _kill(int pid, int sig)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006e12:	f005 fa9b 	bl	800c34c <__errno>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2216      	movs	r2, #22
 8006e1a:	601a      	str	r2, [r3, #0]
  return -1;
 8006e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <_exit>:

void _exit (int status)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006e30:	f04f 31ff 	mov.w	r1, #4294967295
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff ffe7 	bl	8006e08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006e3a:	bf00      	nop
 8006e3c:	e7fd      	b.n	8006e3a <_exit+0x12>

08006e3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b086      	sub	sp, #24
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	e00a      	b.n	8006e66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006e50:	f3af 8000 	nop.w
 8006e54:	4601      	mov	r1, r0
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	60ba      	str	r2, [r7, #8]
 8006e5c:	b2ca      	uxtb	r2, r1
 8006e5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	3301      	adds	r3, #1
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	dbf0      	blt.n	8006e50 <_read+0x12>
  }

  return len;
 8006e6e:	687b      	ldr	r3, [r7, #4]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <_close>:
  }
  return len;
}

int _close(int file)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006ea0:	605a      	str	r2, [r3, #4]
  return 0;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <_isatty>:

int _isatty(int file)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006eb8:	2301      	movs	r3, #1
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b085      	sub	sp, #20
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	60f8      	str	r0, [r7, #12]
 8006ece:	60b9      	str	r1, [r7, #8]
 8006ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ee8:	4a14      	ldr	r2, [pc, #80]	@ (8006f3c <_sbrk+0x5c>)
 8006eea:	4b15      	ldr	r3, [pc, #84]	@ (8006f40 <_sbrk+0x60>)
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006ef4:	4b13      	ldr	r3, [pc, #76]	@ (8006f44 <_sbrk+0x64>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006efc:	4b11      	ldr	r3, [pc, #68]	@ (8006f44 <_sbrk+0x64>)
 8006efe:	4a12      	ldr	r2, [pc, #72]	@ (8006f48 <_sbrk+0x68>)
 8006f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f02:	4b10      	ldr	r3, [pc, #64]	@ (8006f44 <_sbrk+0x64>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4413      	add	r3, r2
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d207      	bcs.n	8006f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f10:	f005 fa1c 	bl	800c34c <__errno>
 8006f14:	4603      	mov	r3, r0
 8006f16:	220c      	movs	r2, #12
 8006f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1e:	e009      	b.n	8006f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f20:	4b08      	ldr	r3, [pc, #32]	@ (8006f44 <_sbrk+0x64>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f26:	4b07      	ldr	r3, [pc, #28]	@ (8006f44 <_sbrk+0x64>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	4a05      	ldr	r2, [pc, #20]	@ (8006f44 <_sbrk+0x64>)
 8006f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006f32:	68fb      	ldr	r3, [r7, #12]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	20020000 	.word	0x20020000
 8006f40:	00000400 	.word	0x00000400
 8006f44:	20000c50 	.word	0x20000c50
 8006f48:	20000da8 	.word	0x20000da8

08006f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006f50:	4b06      	ldr	r3, [pc, #24]	@ (8006f6c <SystemInit+0x20>)
 8006f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f56:	4a05      	ldr	r2, [pc, #20]	@ (8006f6c <SystemInit+0x20>)
 8006f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006f60:	bf00      	nop
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	e000ed00 	.word	0xe000ed00

08006f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006f70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006fa8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006f74:	f7ff ffea 	bl	8006f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006f78:	480c      	ldr	r0, [pc, #48]	@ (8006fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006f7a:	490d      	ldr	r1, [pc, #52]	@ (8006fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8006fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f80:	e002      	b.n	8006f88 <LoopCopyDataInit>

08006f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f86:	3304      	adds	r3, #4

08006f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f8c:	d3f9      	bcc.n	8006f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8006fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006f90:	4c0a      	ldr	r4, [pc, #40]	@ (8006fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8006f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f94:	e001      	b.n	8006f9a <LoopFillZerobss>

08006f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f98:	3204      	adds	r2, #4

08006f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f9c:	d3fb      	bcc.n	8006f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006f9e:	f005 f9db 	bl	800c358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006fa2:	f7fc fd99 	bl	8003ad8 <main>
  bx  lr    
 8006fa6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006fb0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8006fb4:	08012ed0 	.word	0x08012ed0
  ldr r2, =_sbss
 8006fb8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8006fbc:	20000da4 	.word	0x20000da4

08006fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006fc0:	e7fe      	b.n	8006fc0 <ADC_IRQHandler>
	...

08006fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8007004 <HAL_Init+0x40>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8007004 <HAL_Init+0x40>)
 8006fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8007004 <HAL_Init+0x40>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8007004 <HAL_Init+0x40>)
 8006fda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006fe0:	4b08      	ldr	r3, [pc, #32]	@ (8007004 <HAL_Init+0x40>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a07      	ldr	r2, [pc, #28]	@ (8007004 <HAL_Init+0x40>)
 8006fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006fec:	2003      	movs	r0, #3
 8006fee:	f000 f8fc 	bl	80071ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006ff2:	200f      	movs	r0, #15
 8006ff4:	f7ff fe40 	bl	8006c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ff8:	f7ff fb66 	bl	80066c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	40023c00 	.word	0x40023c00

08007008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800700c:	4b06      	ldr	r3, [pc, #24]	@ (8007028 <HAL_IncTick+0x20>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	4b06      	ldr	r3, [pc, #24]	@ (800702c <HAL_IncTick+0x24>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4413      	add	r3, r2
 8007018:	4a04      	ldr	r2, [pc, #16]	@ (800702c <HAL_IncTick+0x24>)
 800701a:	6013      	str	r3, [r2, #0]
}
 800701c:	bf00      	nop
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	20000028 	.word	0x20000028
 800702c:	20000c54 	.word	0x20000c54

08007030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
  return uwTick;
 8007034:	4b03      	ldr	r3, [pc, #12]	@ (8007044 <HAL_GetTick+0x14>)
 8007036:	681b      	ldr	r3, [r3, #0]
}
 8007038:	4618      	mov	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20000c54 	.word	0x20000c54

08007048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007050:	f7ff ffee 	bl	8007030 <HAL_GetTick>
 8007054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007060:	d005      	beq.n	800706e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007062:	4b0a      	ldr	r3, [pc, #40]	@ (800708c <HAL_Delay+0x44>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4413      	add	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800706e:	bf00      	nop
 8007070:	f7ff ffde 	bl	8007030 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	429a      	cmp	r2, r3
 800707e:	d8f7      	bhi.n	8007070 <HAL_Delay+0x28>
  {
  }
}
 8007080:	bf00      	nop
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20000028 	.word	0x20000028

08007090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f003 0307 	and.w	r3, r3, #7
 800709e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070a0:	4b0c      	ldr	r3, [pc, #48]	@ (80070d4 <__NVIC_SetPriorityGrouping+0x44>)
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80070ac:	4013      	ands	r3, r2
 80070ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80070bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070c2:	4a04      	ldr	r2, [pc, #16]	@ (80070d4 <__NVIC_SetPriorityGrouping+0x44>)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	60d3      	str	r3, [r2, #12]
}
 80070c8:	bf00      	nop
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	e000ed00 	.word	0xe000ed00

080070d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070d8:	b480      	push	{r7}
 80070da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070dc:	4b04      	ldr	r3, [pc, #16]	@ (80070f0 <__NVIC_GetPriorityGrouping+0x18>)
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	0a1b      	lsrs	r3, r3, #8
 80070e2:	f003 0307 	and.w	r3, r3, #7
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	e000ed00 	.word	0xe000ed00

080070f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007102:	2b00      	cmp	r3, #0
 8007104:	db0b      	blt.n	800711e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	f003 021f 	and.w	r2, r3, #31
 800710c:	4907      	ldr	r1, [pc, #28]	@ (800712c <__NVIC_EnableIRQ+0x38>)
 800710e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007112:	095b      	lsrs	r3, r3, #5
 8007114:	2001      	movs	r0, #1
 8007116:	fa00 f202 	lsl.w	r2, r0, r2
 800711a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	e000e100 	.word	0xe000e100

08007130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	6039      	str	r1, [r7, #0]
 800713a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800713c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007140:	2b00      	cmp	r3, #0
 8007142:	db0a      	blt.n	800715a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	b2da      	uxtb	r2, r3
 8007148:	490c      	ldr	r1, [pc, #48]	@ (800717c <__NVIC_SetPriority+0x4c>)
 800714a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800714e:	0112      	lsls	r2, r2, #4
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	440b      	add	r3, r1
 8007154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007158:	e00a      	b.n	8007170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	b2da      	uxtb	r2, r3
 800715e:	4908      	ldr	r1, [pc, #32]	@ (8007180 <__NVIC_SetPriority+0x50>)
 8007160:	79fb      	ldrb	r3, [r7, #7]
 8007162:	f003 030f 	and.w	r3, r3, #15
 8007166:	3b04      	subs	r3, #4
 8007168:	0112      	lsls	r2, r2, #4
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	440b      	add	r3, r1
 800716e:	761a      	strb	r2, [r3, #24]
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	e000e100 	.word	0xe000e100
 8007180:	e000ed00 	.word	0xe000ed00

08007184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007184:	b480      	push	{r7}
 8007186:	b089      	sub	sp, #36	@ 0x24
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	f1c3 0307 	rsb	r3, r3, #7
 800719e:	2b04      	cmp	r3, #4
 80071a0:	bf28      	it	cs
 80071a2:	2304      	movcs	r3, #4
 80071a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	3304      	adds	r3, #4
 80071aa:	2b06      	cmp	r3, #6
 80071ac:	d902      	bls.n	80071b4 <NVIC_EncodePriority+0x30>
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	3b03      	subs	r3, #3
 80071b2:	e000      	b.n	80071b6 <NVIC_EncodePriority+0x32>
 80071b4:	2300      	movs	r3, #0
 80071b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071b8:	f04f 32ff 	mov.w	r2, #4294967295
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	fa02 f303 	lsl.w	r3, r2, r3
 80071c2:	43da      	mvns	r2, r3
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	401a      	ands	r2, r3
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071cc:	f04f 31ff 	mov.w	r1, #4294967295
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	fa01 f303 	lsl.w	r3, r1, r3
 80071d6:	43d9      	mvns	r1, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071dc:	4313      	orrs	r3, r2
         );
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3724      	adds	r7, #36	@ 0x24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7ff ff4c 	bl	8007090 <__NVIC_SetPriorityGrouping>
}
 80071f8:	bf00      	nop
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	4603      	mov	r3, r0
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800720e:	2300      	movs	r3, #0
 8007210:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007212:	f7ff ff61 	bl	80070d8 <__NVIC_GetPriorityGrouping>
 8007216:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	6978      	ldr	r0, [r7, #20]
 800721e:	f7ff ffb1 	bl	8007184 <NVIC_EncodePriority>
 8007222:	4602      	mov	r2, r0
 8007224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007228:	4611      	mov	r1, r2
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff ff80 	bl	8007130 <__NVIC_SetPriority>
}
 8007230:	bf00      	nop
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff ff54 	bl	80070f4 <__NVIC_EnableIRQ>
}
 800724c:	bf00      	nop
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007260:	f7ff fee6 	bl	8007030 <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e099      	b.n	80073a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0201 	bic.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007290:	e00f      	b.n	80072b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007292:	f7ff fecd 	bl	8007030 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2b05      	cmp	r3, #5
 800729e:	d908      	bls.n	80072b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2220      	movs	r2, #32
 80072a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2203      	movs	r2, #3
 80072aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e078      	b.n	80073a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e8      	bne.n	8007292 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	4b38      	ldr	r3, [pc, #224]	@ (80073ac <HAL_DMA_Init+0x158>)
 80072cc:	4013      	ands	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	4313      	orrs	r3, r2
 8007302:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007308:	2b04      	cmp	r3, #4
 800730a:	d107      	bne.n	800731c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007314:	4313      	orrs	r3, r2
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	4313      	orrs	r3, r2
 800731a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f023 0307 	bic.w	r3, r3, #7
 8007332:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	4313      	orrs	r3, r2
 800733c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007342:	2b04      	cmp	r3, #4
 8007344:	d117      	bne.n	8007376 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	4313      	orrs	r3, r2
 800734e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00e      	beq.n	8007376 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f9e9 	bl	8007730 <DMA_CheckFifoParam>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d008      	beq.n	8007376 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2240      	movs	r2, #64	@ 0x40
 8007368:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007372:	2301      	movs	r3, #1
 8007374:	e016      	b.n	80073a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f9a0 	bl	80076c4 <DMA_CalcBaseAndBitshift>
 8007384:	4603      	mov	r3, r0
 8007386:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800738c:	223f      	movs	r2, #63	@ 0x3f
 800738e:	409a      	lsls	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	f010803f 	.word	0xf010803f

080073b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80073bc:	4b8e      	ldr	r3, [pc, #568]	@ (80075f8 <HAL_DMA_IRQHandler+0x248>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a8e      	ldr	r2, [pc, #568]	@ (80075fc <HAL_DMA_IRQHandler+0x24c>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	0a9b      	lsrs	r3, r3, #10
 80073c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073da:	2208      	movs	r2, #8
 80073dc:	409a      	lsls	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4013      	ands	r3, r2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d01a      	beq.n	800741c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d013      	beq.n	800741c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0204 	bic.w	r2, r2, #4
 8007402:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007408:	2208      	movs	r2, #8
 800740a:	409a      	lsls	r2, r3
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007414:	f043 0201 	orr.w	r2, r3, #1
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007420:	2201      	movs	r2, #1
 8007422:	409a      	lsls	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4013      	ands	r3, r2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d012      	beq.n	8007452 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00b      	beq.n	8007452 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800743e:	2201      	movs	r2, #1
 8007440:	409a      	lsls	r2, r3
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800744a:	f043 0202 	orr.w	r2, r3, #2
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007456:	2204      	movs	r2, #4
 8007458:	409a      	lsls	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4013      	ands	r3, r2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d012      	beq.n	8007488 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00b      	beq.n	8007488 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007474:	2204      	movs	r2, #4
 8007476:	409a      	lsls	r2, r3
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007480:	f043 0204 	orr.w	r2, r3, #4
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800748c:	2210      	movs	r2, #16
 800748e:	409a      	lsls	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4013      	ands	r3, r2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d043      	beq.n	8007520 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0308 	and.w	r3, r3, #8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d03c      	beq.n	8007520 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074aa:	2210      	movs	r2, #16
 80074ac:	409a      	lsls	r2, r3
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d018      	beq.n	80074f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d108      	bne.n	80074e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d024      	beq.n	8007520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
 80074de:	e01f      	b.n	8007520 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d01b      	beq.n	8007520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	4798      	blx	r3
 80074f0:	e016      	b.n	8007520 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d107      	bne.n	8007510 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0208 	bic.w	r2, r2, #8
 800750e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007524:	2220      	movs	r2, #32
 8007526:	409a      	lsls	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4013      	ands	r3, r2
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 808f 	beq.w	8007650 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 8087 	beq.w	8007650 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007546:	2220      	movs	r2, #32
 8007548:	409a      	lsls	r2, r3
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b05      	cmp	r3, #5
 8007558:	d136      	bne.n	80075c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0216 	bic.w	r2, r2, #22
 8007568:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	695a      	ldr	r2, [r3, #20]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007578:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	d103      	bne.n	800758a <HAL_DMA_IRQHandler+0x1da>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007586:	2b00      	cmp	r3, #0
 8007588:	d007      	beq.n	800759a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0208 	bic.w	r2, r2, #8
 8007598:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800759e:	223f      	movs	r2, #63	@ 0x3f
 80075a0:	409a      	lsls	r2, r3
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d07e      	beq.n	80076bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	4798      	blx	r3
        }
        return;
 80075c6:	e079      	b.n	80076bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01d      	beq.n	8007612 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10d      	bne.n	8007600 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d031      	beq.n	8007650 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	4798      	blx	r3
 80075f4:	e02c      	b.n	8007650 <HAL_DMA_IRQHandler+0x2a0>
 80075f6:	bf00      	nop
 80075f8:	20000020 	.word	0x20000020
 80075fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d023      	beq.n	8007650 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
 8007610:	e01e      	b.n	8007650 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10f      	bne.n	8007640 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0210 	bic.w	r2, r2, #16
 800762e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007654:	2b00      	cmp	r3, #0
 8007656:	d032      	beq.n	80076be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	d022      	beq.n	80076aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2205      	movs	r2, #5
 8007668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 0201 	bic.w	r2, r2, #1
 800767a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	3301      	adds	r3, #1
 8007680:	60bb      	str	r3, [r7, #8]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	429a      	cmp	r2, r3
 8007686:	d307      	bcc.n	8007698 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1f2      	bne.n	800767c <HAL_DMA_IRQHandler+0x2cc>
 8007696:	e000      	b.n	800769a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007698:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d005      	beq.n	80076be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	4798      	blx	r3
 80076ba:	e000      	b.n	80076be <HAL_DMA_IRQHandler+0x30e>
        return;
 80076bc:	bf00      	nop
    }
  }
}
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	3b10      	subs	r3, #16
 80076d4:	4a14      	ldr	r2, [pc, #80]	@ (8007728 <DMA_CalcBaseAndBitshift+0x64>)
 80076d6:	fba2 2303 	umull	r2, r3, r2, r3
 80076da:	091b      	lsrs	r3, r3, #4
 80076dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80076de:	4a13      	ldr	r2, [pc, #76]	@ (800772c <DMA_CalcBaseAndBitshift+0x68>)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4413      	add	r3, r2
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d909      	bls.n	8007706 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80076fa:	f023 0303 	bic.w	r3, r3, #3
 80076fe:	1d1a      	adds	r2, r3, #4
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	659a      	str	r2, [r3, #88]	@ 0x58
 8007704:	e007      	b.n	8007716 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800770e:	f023 0303 	bic.w	r3, r3, #3
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	aaaaaaab 	.word	0xaaaaaaab
 800772c:	080125d4 	.word	0x080125d4

08007730 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007740:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d11f      	bne.n	800778a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b03      	cmp	r3, #3
 800774e:	d856      	bhi.n	80077fe <DMA_CheckFifoParam+0xce>
 8007750:	a201      	add	r2, pc, #4	@ (adr r2, 8007758 <DMA_CheckFifoParam+0x28>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007769 	.word	0x08007769
 800775c:	0800777b 	.word	0x0800777b
 8007760:	08007769 	.word	0x08007769
 8007764:	080077ff 	.word	0x080077ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d046      	beq.n	8007802 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007778:	e043      	b.n	8007802 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800777e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007782:	d140      	bne.n	8007806 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007788:	e03d      	b.n	8007806 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007792:	d121      	bne.n	80077d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b03      	cmp	r3, #3
 8007798:	d837      	bhi.n	800780a <DMA_CheckFifoParam+0xda>
 800779a:	a201      	add	r2, pc, #4	@ (adr r2, 80077a0 <DMA_CheckFifoParam+0x70>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077b1 	.word	0x080077b1
 80077a4:	080077b7 	.word	0x080077b7
 80077a8:	080077b1 	.word	0x080077b1
 80077ac:	080077c9 	.word	0x080077c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	73fb      	strb	r3, [r7, #15]
      break;
 80077b4:	e030      	b.n	8007818 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d025      	beq.n	800780e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077c6:	e022      	b.n	800780e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80077d0:	d11f      	bne.n	8007812 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80077d6:	e01c      	b.n	8007812 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d903      	bls.n	80077e6 <DMA_CheckFifoParam+0xb6>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d003      	beq.n	80077ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80077e4:	e018      	b.n	8007818 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	73fb      	strb	r3, [r7, #15]
      break;
 80077ea:	e015      	b.n	8007818 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00e      	beq.n	8007816 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
      break;
 80077fc:	e00b      	b.n	8007816 <DMA_CheckFifoParam+0xe6>
      break;
 80077fe:	bf00      	nop
 8007800:	e00a      	b.n	8007818 <DMA_CheckFifoParam+0xe8>
      break;
 8007802:	bf00      	nop
 8007804:	e008      	b.n	8007818 <DMA_CheckFifoParam+0xe8>
      break;
 8007806:	bf00      	nop
 8007808:	e006      	b.n	8007818 <DMA_CheckFifoParam+0xe8>
      break;
 800780a:	bf00      	nop
 800780c:	e004      	b.n	8007818 <DMA_CheckFifoParam+0xe8>
      break;
 800780e:	bf00      	nop
 8007810:	e002      	b.n	8007818 <DMA_CheckFifoParam+0xe8>
      break;   
 8007812:	bf00      	nop
 8007814:	e000      	b.n	8007818 <DMA_CheckFifoParam+0xe8>
      break;
 8007816:	bf00      	nop
    }
  } 
  
  return status; 
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop

08007828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007828:	b480      	push	{r7}
 800782a:	b089      	sub	sp, #36	@ 0x24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007832:	2300      	movs	r3, #0
 8007834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007836:	2300      	movs	r3, #0
 8007838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800783a:	2300      	movs	r3, #0
 800783c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800783e:	2300      	movs	r3, #0
 8007840:	61fb      	str	r3, [r7, #28]
 8007842:	e159      	b.n	8007af8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007844:	2201      	movs	r2, #1
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	fa02 f303 	lsl.w	r3, r2, r3
 800784c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	4013      	ands	r3, r2
 8007856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	429a      	cmp	r2, r3
 800785e:	f040 8148 	bne.w	8007af2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f003 0303 	and.w	r3, r3, #3
 800786a:	2b01      	cmp	r3, #1
 800786c:	d005      	beq.n	800787a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007876:	2b02      	cmp	r3, #2
 8007878:	d130      	bne.n	80078dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	2203      	movs	r2, #3
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	43db      	mvns	r3, r3
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	4013      	ands	r3, r2
 8007890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	fa02 f303 	lsl.w	r3, r2, r3
 800789e:	69ba      	ldr	r2, [r7, #24]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078b0:	2201      	movs	r2, #1
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	fa02 f303 	lsl.w	r3, r2, r3
 80078b8:	43db      	mvns	r3, r3
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	4013      	ands	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	091b      	lsrs	r3, r3, #4
 80078c6:	f003 0201 	and.w	r2, r3, #1
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f003 0303 	and.w	r3, r3, #3
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d017      	beq.n	8007918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	2203      	movs	r2, #3
 80078f4:	fa02 f303 	lsl.w	r3, r2, r3
 80078f8:	43db      	mvns	r3, r3
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	4013      	ands	r3, r2
 80078fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	fa02 f303 	lsl.w	r3, r2, r3
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	4313      	orrs	r3, r2
 8007910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f003 0303 	and.w	r3, r3, #3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d123      	bne.n	800796c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	08da      	lsrs	r2, r3, #3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3208      	adds	r2, #8
 800792c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	f003 0307 	and.w	r3, r3, #7
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	220f      	movs	r2, #15
 800793c:	fa02 f303 	lsl.w	r3, r2, r3
 8007940:	43db      	mvns	r3, r3
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	4013      	ands	r3, r2
 8007946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	691a      	ldr	r2, [r3, #16]
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	fa02 f303 	lsl.w	r3, r2, r3
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	4313      	orrs	r3, r2
 800795c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	08da      	lsrs	r2, r3, #3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3208      	adds	r2, #8
 8007966:	69b9      	ldr	r1, [r7, #24]
 8007968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	2203      	movs	r2, #3
 8007978:	fa02 f303 	lsl.w	r3, r2, r3
 800797c:	43db      	mvns	r3, r3
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	4013      	ands	r3, r2
 8007982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f003 0203 	and.w	r2, r3, #3
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	fa02 f303 	lsl.w	r3, r2, r3
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	4313      	orrs	r3, r2
 8007998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 80a2 	beq.w	8007af2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	4b57      	ldr	r3, [pc, #348]	@ (8007b10 <HAL_GPIO_Init+0x2e8>)
 80079b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079b6:	4a56      	ldr	r2, [pc, #344]	@ (8007b10 <HAL_GPIO_Init+0x2e8>)
 80079b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80079bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80079be:	4b54      	ldr	r3, [pc, #336]	@ (8007b10 <HAL_GPIO_Init+0x2e8>)
 80079c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079ca:	4a52      	ldr	r2, [pc, #328]	@ (8007b14 <HAL_GPIO_Init+0x2ec>)
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	089b      	lsrs	r3, r3, #2
 80079d0:	3302      	adds	r3, #2
 80079d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	220f      	movs	r2, #15
 80079e2:	fa02 f303 	lsl.w	r3, r2, r3
 80079e6:	43db      	mvns	r3, r3
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	4013      	ands	r3, r2
 80079ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a49      	ldr	r2, [pc, #292]	@ (8007b18 <HAL_GPIO_Init+0x2f0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d019      	beq.n	8007a2a <HAL_GPIO_Init+0x202>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a48      	ldr	r2, [pc, #288]	@ (8007b1c <HAL_GPIO_Init+0x2f4>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d013      	beq.n	8007a26 <HAL_GPIO_Init+0x1fe>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a47      	ldr	r2, [pc, #284]	@ (8007b20 <HAL_GPIO_Init+0x2f8>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00d      	beq.n	8007a22 <HAL_GPIO_Init+0x1fa>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a46      	ldr	r2, [pc, #280]	@ (8007b24 <HAL_GPIO_Init+0x2fc>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d007      	beq.n	8007a1e <HAL_GPIO_Init+0x1f6>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a45      	ldr	r2, [pc, #276]	@ (8007b28 <HAL_GPIO_Init+0x300>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d101      	bne.n	8007a1a <HAL_GPIO_Init+0x1f2>
 8007a16:	2304      	movs	r3, #4
 8007a18:	e008      	b.n	8007a2c <HAL_GPIO_Init+0x204>
 8007a1a:	2307      	movs	r3, #7
 8007a1c:	e006      	b.n	8007a2c <HAL_GPIO_Init+0x204>
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e004      	b.n	8007a2c <HAL_GPIO_Init+0x204>
 8007a22:	2302      	movs	r3, #2
 8007a24:	e002      	b.n	8007a2c <HAL_GPIO_Init+0x204>
 8007a26:	2301      	movs	r3, #1
 8007a28:	e000      	b.n	8007a2c <HAL_GPIO_Init+0x204>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	f002 0203 	and.w	r2, r2, #3
 8007a32:	0092      	lsls	r2, r2, #2
 8007a34:	4093      	lsls	r3, r2
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a3c:	4935      	ldr	r1, [pc, #212]	@ (8007b14 <HAL_GPIO_Init+0x2ec>)
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	089b      	lsrs	r3, r3, #2
 8007a42:	3302      	adds	r3, #2
 8007a44:	69ba      	ldr	r2, [r7, #24]
 8007a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a4a:	4b38      	ldr	r3, [pc, #224]	@ (8007b2c <HAL_GPIO_Init+0x304>)
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	43db      	mvns	r3, r3
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	4013      	ands	r3, r2
 8007a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8007b2c <HAL_GPIO_Init+0x304>)
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a74:	4b2d      	ldr	r3, [pc, #180]	@ (8007b2c <HAL_GPIO_Init+0x304>)
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	43db      	mvns	r3, r3
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	4013      	ands	r3, r2
 8007a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a98:	4a24      	ldr	r2, [pc, #144]	@ (8007b2c <HAL_GPIO_Init+0x304>)
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007a9e:	4b23      	ldr	r3, [pc, #140]	@ (8007b2c <HAL_GPIO_Init+0x304>)
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	43db      	mvns	r3, r3
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b2c <HAL_GPIO_Init+0x304>)
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ac8:	4b18      	ldr	r3, [pc, #96]	@ (8007b2c <HAL_GPIO_Init+0x304>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007aec:	4a0f      	ldr	r2, [pc, #60]	@ (8007b2c <HAL_GPIO_Init+0x304>)
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	3301      	adds	r3, #1
 8007af6:	61fb      	str	r3, [r7, #28]
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	2b0f      	cmp	r3, #15
 8007afc:	f67f aea2 	bls.w	8007844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007b00:	bf00      	nop
 8007b02:	bf00      	nop
 8007b04:	3724      	adds	r7, #36	@ 0x24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	40023800 	.word	0x40023800
 8007b14:	40013800 	.word	0x40013800
 8007b18:	40020000 	.word	0x40020000
 8007b1c:	40020400 	.word	0x40020400
 8007b20:	40020800 	.word	0x40020800
 8007b24:	40020c00 	.word	0x40020c00
 8007b28:	40021000 	.word	0x40021000
 8007b2c:	40013c00 	.word	0x40013c00

08007b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	807b      	strh	r3, [r7, #2]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b40:	787b      	ldrb	r3, [r7, #1]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b46:	887a      	ldrh	r2, [r7, #2]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007b4c:	e003      	b.n	8007b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007b4e:	887b      	ldrh	r3, [r7, #2]
 8007b50:	041a      	lsls	r2, r3, #16
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	619a      	str	r2, [r3, #24]
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
	...

08007b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e12b      	b.n	8007dce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d106      	bne.n	8007b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7fe fdc4 	bl	8006718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2224      	movs	r2, #36	@ 0x24
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0201 	bic.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007bc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007bc8:	f001 fd30 	bl	800962c <HAL_RCC_GetPCLK1Freq>
 8007bcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	4a81      	ldr	r2, [pc, #516]	@ (8007dd8 <HAL_I2C_Init+0x274>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d807      	bhi.n	8007be8 <HAL_I2C_Init+0x84>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4a80      	ldr	r2, [pc, #512]	@ (8007ddc <HAL_I2C_Init+0x278>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	bf94      	ite	ls
 8007be0:	2301      	movls	r3, #1
 8007be2:	2300      	movhi	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	e006      	b.n	8007bf6 <HAL_I2C_Init+0x92>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4a7d      	ldr	r2, [pc, #500]	@ (8007de0 <HAL_I2C_Init+0x27c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	bf94      	ite	ls
 8007bf0:	2301      	movls	r3, #1
 8007bf2:	2300      	movhi	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e0e7      	b.n	8007dce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4a78      	ldr	r2, [pc, #480]	@ (8007de4 <HAL_I2C_Init+0x280>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	0c9b      	lsrs	r3, r3, #18
 8007c08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	4a6a      	ldr	r2, [pc, #424]	@ (8007dd8 <HAL_I2C_Init+0x274>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d802      	bhi.n	8007c38 <HAL_I2C_Init+0xd4>
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	3301      	adds	r3, #1
 8007c36:	e009      	b.n	8007c4c <HAL_I2C_Init+0xe8>
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007c3e:	fb02 f303 	mul.w	r3, r2, r3
 8007c42:	4a69      	ldr	r2, [pc, #420]	@ (8007de8 <HAL_I2C_Init+0x284>)
 8007c44:	fba2 2303 	umull	r2, r3, r2, r3
 8007c48:	099b      	lsrs	r3, r3, #6
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	6812      	ldr	r2, [r2, #0]
 8007c50:	430b      	orrs	r3, r1
 8007c52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007c5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	495c      	ldr	r1, [pc, #368]	@ (8007dd8 <HAL_I2C_Init+0x274>)
 8007c68:	428b      	cmp	r3, r1
 8007c6a:	d819      	bhi.n	8007ca0 <HAL_I2C_Init+0x13c>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	1e59      	subs	r1, r3, #1
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c7a:	1c59      	adds	r1, r3, #1
 8007c7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007c80:	400b      	ands	r3, r1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <HAL_I2C_Init+0x138>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	1e59      	subs	r1, r3, #1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c94:	3301      	adds	r3, #1
 8007c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c9a:	e051      	b.n	8007d40 <HAL_I2C_Init+0x1dc>
 8007c9c:	2304      	movs	r3, #4
 8007c9e:	e04f      	b.n	8007d40 <HAL_I2C_Init+0x1dc>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d111      	bne.n	8007ccc <HAL_I2C_Init+0x168>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	1e58      	subs	r0, r3, #1
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6859      	ldr	r1, [r3, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	440b      	add	r3, r1
 8007cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cba:	3301      	adds	r3, #1
 8007cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bf0c      	ite	eq
 8007cc4:	2301      	moveq	r3, #1
 8007cc6:	2300      	movne	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	e012      	b.n	8007cf2 <HAL_I2C_Init+0x18e>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	1e58      	subs	r0, r3, #1
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6859      	ldr	r1, [r3, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	440b      	add	r3, r1
 8007cda:	0099      	lsls	r1, r3, #2
 8007cdc:	440b      	add	r3, r1
 8007cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	bf0c      	ite	eq
 8007cec:	2301      	moveq	r3, #1
 8007cee:	2300      	movne	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_I2C_Init+0x196>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e022      	b.n	8007d40 <HAL_I2C_Init+0x1dc>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10e      	bne.n	8007d20 <HAL_I2C_Init+0x1bc>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1e58      	subs	r0, r3, #1
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6859      	ldr	r1, [r3, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	440b      	add	r3, r1
 8007d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d14:	3301      	adds	r3, #1
 8007d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d1e:	e00f      	b.n	8007d40 <HAL_I2C_Init+0x1dc>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	1e58      	subs	r0, r3, #1
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6859      	ldr	r1, [r3, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	0099      	lsls	r1, r3, #2
 8007d30:	440b      	add	r3, r1
 8007d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d36:	3301      	adds	r3, #1
 8007d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d40:	6879      	ldr	r1, [r7, #4]
 8007d42:	6809      	ldr	r1, [r1, #0]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	69da      	ldr	r2, [r3, #28]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007d6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	6911      	ldr	r1, [r2, #16]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	68d2      	ldr	r2, [r2, #12]
 8007d7a:	4311      	orrs	r1, r2
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	6812      	ldr	r2, [r2, #0]
 8007d80:	430b      	orrs	r3, r1
 8007d82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	695a      	ldr	r2, [r3, #20]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f042 0201 	orr.w	r2, r2, #1
 8007dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	000186a0 	.word	0x000186a0
 8007ddc:	001e847f 	.word	0x001e847f
 8007de0:	003d08ff 	.word	0x003d08ff
 8007de4:	431bde83 	.word	0x431bde83
 8007de8:	10624dd3 	.word	0x10624dd3

08007dec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b088      	sub	sp, #32
 8007df0:	af02      	add	r7, sp, #8
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	4608      	mov	r0, r1
 8007df6:	4611      	mov	r1, r2
 8007df8:	461a      	mov	r2, r3
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	817b      	strh	r3, [r7, #10]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	813b      	strh	r3, [r7, #8]
 8007e02:	4613      	mov	r3, r2
 8007e04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e06:	f7ff f913 	bl	8007030 <HAL_GetTick>
 8007e0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b20      	cmp	r3, #32
 8007e16:	f040 80d9 	bne.w	8007fcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	2319      	movs	r3, #25
 8007e20:	2201      	movs	r2, #1
 8007e22:	496d      	ldr	r1, [pc, #436]	@ (8007fd8 <HAL_I2C_Mem_Write+0x1ec>)
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 fc8b 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007e30:	2302      	movs	r3, #2
 8007e32:	e0cc      	b.n	8007fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d101      	bne.n	8007e42 <HAL_I2C_Mem_Write+0x56>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e0c5      	b.n	8007fce <HAL_I2C_Mem_Write+0x1e2>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d007      	beq.n	8007e68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0201 	orr.w	r2, r2, #1
 8007e66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2221      	movs	r2, #33	@ 0x21
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2240      	movs	r2, #64	@ 0x40
 8007e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6a3a      	ldr	r2, [r7, #32]
 8007e92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4a4d      	ldr	r2, [pc, #308]	@ (8007fdc <HAL_I2C_Mem_Write+0x1f0>)
 8007ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007eaa:	88f8      	ldrh	r0, [r7, #6]
 8007eac:	893a      	ldrh	r2, [r7, #8]
 8007eae:	8979      	ldrh	r1, [r7, #10]
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	9301      	str	r3, [sp, #4]
 8007eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	4603      	mov	r3, r0
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 fac2 	bl	8008444 <I2C_RequestMemoryWrite>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d052      	beq.n	8007f6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e081      	b.n	8007fce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fd50 	bl	8008974 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00d      	beq.n	8007ef6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	d107      	bne.n	8007ef2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ef0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e06b      	b.n	8007fce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efa:	781a      	ldrb	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f10:	3b01      	subs	r3, #1
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d11b      	bne.n	8007f6c <HAL_I2C_Mem_Write+0x180>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d017      	beq.n	8007f6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f40:	781a      	ldrb	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f56:	3b01      	subs	r3, #1
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1aa      	bne.n	8007eca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fd43 	bl	8008a04 <I2C_WaitOnBTFFlagUntilTimeout>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00d      	beq.n	8007fa0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	d107      	bne.n	8007f9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e016      	b.n	8007fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	e000      	b.n	8007fce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007fcc:	2302      	movs	r3, #2
  }
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	00100002 	.word	0x00100002
 8007fdc:	ffff0000 	.word	0xffff0000

08007fe0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08c      	sub	sp, #48	@ 0x30
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	4608      	mov	r0, r1
 8007fea:	4611      	mov	r1, r2
 8007fec:	461a      	mov	r2, r3
 8007fee:	4603      	mov	r3, r0
 8007ff0:	817b      	strh	r3, [r7, #10]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	813b      	strh	r3, [r7, #8]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ffa:	f7ff f819 	bl	8007030 <HAL_GetTick>
 8007ffe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b20      	cmp	r3, #32
 800800a:	f040 8214 	bne.w	8008436 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	2319      	movs	r3, #25
 8008014:	2201      	movs	r2, #1
 8008016:	497b      	ldr	r1, [pc, #492]	@ (8008204 <HAL_I2C_Mem_Read+0x224>)
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 fb91 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008024:	2302      	movs	r3, #2
 8008026:	e207      	b.n	8008438 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800802e:	2b01      	cmp	r3, #1
 8008030:	d101      	bne.n	8008036 <HAL_I2C_Mem_Read+0x56>
 8008032:	2302      	movs	r3, #2
 8008034:	e200      	b.n	8008438 <HAL_I2C_Mem_Read+0x458>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b01      	cmp	r3, #1
 800804a:	d007      	beq.n	800805c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800806a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2222      	movs	r2, #34	@ 0x22
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2240      	movs	r2, #64	@ 0x40
 8008078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008086:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800808c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008092:	b29a      	uxth	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4a5b      	ldr	r2, [pc, #364]	@ (8008208 <HAL_I2C_Mem_Read+0x228>)
 800809c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800809e:	88f8      	ldrh	r0, [r7, #6]
 80080a0:	893a      	ldrh	r2, [r7, #8]
 80080a2:	8979      	ldrh	r1, [r7, #10]
 80080a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	4603      	mov	r3, r0
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 fa5e 	bl	8008570 <I2C_RequestMemoryRead>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e1bc      	b.n	8008438 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d113      	bne.n	80080ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080c6:	2300      	movs	r3, #0
 80080c8:	623b      	str	r3, [r7, #32]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	623b      	str	r3, [r7, #32]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	623b      	str	r3, [r7, #32]
 80080da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	e190      	b.n	8008410 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d11b      	bne.n	800812e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008106:	2300      	movs	r3, #0
 8008108:	61fb      	str	r3, [r7, #28]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	61fb      	str	r3, [r7, #28]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	61fb      	str	r3, [r7, #28]
 800811a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	e170      	b.n	8008410 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008132:	2b02      	cmp	r3, #2
 8008134:	d11b      	bne.n	800816e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008144:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008156:	2300      	movs	r3, #0
 8008158:	61bb      	str	r3, [r7, #24]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	61bb      	str	r3, [r7, #24]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	61bb      	str	r3, [r7, #24]
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	e150      	b.n	8008410 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800816e:	2300      	movs	r3, #0
 8008170:	617b      	str	r3, [r7, #20]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	617b      	str	r3, [r7, #20]
 8008182:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008184:	e144      	b.n	8008410 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800818a:	2b03      	cmp	r3, #3
 800818c:	f200 80f1 	bhi.w	8008372 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008194:	2b01      	cmp	r3, #1
 8008196:	d123      	bne.n	80081e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800819a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 fc79 	bl	8008a94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e145      	b.n	8008438 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	691a      	ldr	r2, [r3, #16]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b6:	b2d2      	uxtb	r2, r2
 80081b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081c8:	3b01      	subs	r3, #1
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80081de:	e117      	b.n	8008410 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d14e      	bne.n	8008286 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ee:	2200      	movs	r2, #0
 80081f0:	4906      	ldr	r1, [pc, #24]	@ (800820c <HAL_I2C_Mem_Read+0x22c>)
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 faa4 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d008      	beq.n	8008210 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e11a      	b.n	8008438 <HAL_I2C_Mem_Read+0x458>
 8008202:	bf00      	nop
 8008204:	00100002 	.word	0x00100002
 8008208:	ffff0000 	.word	0xffff0000
 800820c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800821e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	691a      	ldr	r2, [r3, #16]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800823c:	3b01      	subs	r3, #1
 800823e:	b29a      	uxth	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008248:	b29b      	uxth	r3, r3
 800824a:	3b01      	subs	r3, #1
 800824c:	b29a      	uxth	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	691a      	ldr	r2, [r3, #16]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825c:	b2d2      	uxtb	r2, r2
 800825e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800826e:	3b01      	subs	r3, #1
 8008270:	b29a      	uxth	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800827a:	b29b      	uxth	r3, r3
 800827c:	3b01      	subs	r3, #1
 800827e:	b29a      	uxth	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008284:	e0c4      	b.n	8008410 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828c:	2200      	movs	r2, #0
 800828e:	496c      	ldr	r1, [pc, #432]	@ (8008440 <HAL_I2C_Mem_Read+0x460>)
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 fa55 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d001      	beq.n	80082a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e0cb      	b.n	8008438 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	691a      	ldr	r2, [r3, #16]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ba:	b2d2      	uxtb	r2, r2
 80082bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082cc:	3b01      	subs	r3, #1
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082d8:	b29b      	uxth	r3, r3
 80082da:	3b01      	subs	r3, #1
 80082dc:	b29a      	uxth	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e8:	2200      	movs	r2, #0
 80082ea:	4955      	ldr	r1, [pc, #340]	@ (8008440 <HAL_I2C_Mem_Read+0x460>)
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 fa27 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e09d      	b.n	8008438 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800830a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	691a      	ldr	r2, [r3, #16]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008316:	b2d2      	uxtb	r2, r2
 8008318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008328:	3b01      	subs	r3, #1
 800832a:	b29a      	uxth	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008334:	b29b      	uxth	r3, r3
 8008336:	3b01      	subs	r3, #1
 8008338:	b29a      	uxth	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	691a      	ldr	r2, [r3, #16]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008348:	b2d2      	uxtb	r2, r2
 800834a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008350:	1c5a      	adds	r2, r3, #1
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800835a:	3b01      	subs	r3, #1
 800835c:	b29a      	uxth	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008366:	b29b      	uxth	r3, r3
 8008368:	3b01      	subs	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008370:	e04e      	b.n	8008410 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008374:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 fb8c 	bl	8008a94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e058      	b.n	8008438 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	691a      	ldr	r2, [r3, #16]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008390:	b2d2      	uxtb	r2, r2
 8008392:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008398:	1c5a      	adds	r2, r3, #1
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083a2:	3b01      	subs	r3, #1
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	3b01      	subs	r3, #1
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	f003 0304 	and.w	r3, r3, #4
 80083c2:	2b04      	cmp	r3, #4
 80083c4:	d124      	bne.n	8008410 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d107      	bne.n	80083de <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083dc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	691a      	ldr	r2, [r3, #16]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e8:	b2d2      	uxtb	r2, r2
 80083ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083fa:	3b01      	subs	r3, #1
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008406:	b29b      	uxth	r3, r3
 8008408:	3b01      	subs	r3, #1
 800840a:	b29a      	uxth	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008414:	2b00      	cmp	r3, #0
 8008416:	f47f aeb6 	bne.w	8008186 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2220      	movs	r2, #32
 800841e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	e000      	b.n	8008438 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008436:	2302      	movs	r3, #2
  }
}
 8008438:	4618      	mov	r0, r3
 800843a:	3728      	adds	r7, #40	@ 0x28
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	00010004 	.word	0x00010004

08008444 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af02      	add	r7, sp, #8
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	4608      	mov	r0, r1
 800844e:	4611      	mov	r1, r2
 8008450:	461a      	mov	r2, r3
 8008452:	4603      	mov	r3, r0
 8008454:	817b      	strh	r3, [r7, #10]
 8008456:	460b      	mov	r3, r1
 8008458:	813b      	strh	r3, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800846c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800846e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	2200      	movs	r2, #0
 8008476:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f000 f960 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00d      	beq.n	80084a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008494:	d103      	bne.n	800849e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800849c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e05f      	b.n	8008562 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80084a2:	897b      	ldrh	r3, [r7, #10]
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	461a      	mov	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80084b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b4:	6a3a      	ldr	r2, [r7, #32]
 80084b6:	492d      	ldr	r1, [pc, #180]	@ (800856c <I2C_RequestMemoryWrite+0x128>)
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 f9bb 	bl	8008834 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e04c      	b.n	8008562 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084c8:	2300      	movs	r3, #0
 80084ca:	617b      	str	r3, [r7, #20]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	617b      	str	r3, [r7, #20]
 80084dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084e0:	6a39      	ldr	r1, [r7, #32]
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 fa46 	bl	8008974 <I2C_WaitOnTXEFlagUntilTimeout>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00d      	beq.n	800850a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d107      	bne.n	8008506 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008504:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e02b      	b.n	8008562 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800850a:	88fb      	ldrh	r3, [r7, #6]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d105      	bne.n	800851c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008510:	893b      	ldrh	r3, [r7, #8]
 8008512:	b2da      	uxtb	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	611a      	str	r2, [r3, #16]
 800851a:	e021      	b.n	8008560 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800851c:	893b      	ldrh	r3, [r7, #8]
 800851e:	0a1b      	lsrs	r3, r3, #8
 8008520:	b29b      	uxth	r3, r3
 8008522:	b2da      	uxtb	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800852a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800852c:	6a39      	ldr	r1, [r7, #32]
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 fa20 	bl	8008974 <I2C_WaitOnTXEFlagUntilTimeout>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00d      	beq.n	8008556 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800853e:	2b04      	cmp	r3, #4
 8008540:	d107      	bne.n	8008552 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008550:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e005      	b.n	8008562 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008556:	893b      	ldrh	r3, [r7, #8]
 8008558:	b2da      	uxtb	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	00010002 	.word	0x00010002

08008570 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b088      	sub	sp, #32
 8008574:	af02      	add	r7, sp, #8
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	4608      	mov	r0, r1
 800857a:	4611      	mov	r1, r2
 800857c:	461a      	mov	r2, r3
 800857e:	4603      	mov	r3, r0
 8008580:	817b      	strh	r3, [r7, #10]
 8008582:	460b      	mov	r3, r1
 8008584:	813b      	strh	r3, [r7, #8]
 8008586:	4613      	mov	r3, r2
 8008588:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008598:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 f8c2 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00d      	beq.n	80085de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085d0:	d103      	bne.n	80085da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e0aa      	b.n	8008734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085de:	897b      	ldrh	r3, [r7, #10]
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	461a      	mov	r2, r3
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80085ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	6a3a      	ldr	r2, [r7, #32]
 80085f2:	4952      	ldr	r1, [pc, #328]	@ (800873c <I2C_RequestMemoryRead+0x1cc>)
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 f91d 	bl	8008834 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e097      	b.n	8008734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008604:	2300      	movs	r3, #0
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	617b      	str	r3, [r7, #20]
 8008618:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800861a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800861c:	6a39      	ldr	r1, [r7, #32]
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 f9a8 	bl	8008974 <I2C_WaitOnTXEFlagUntilTimeout>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00d      	beq.n	8008646 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800862e:	2b04      	cmp	r3, #4
 8008630:	d107      	bne.n	8008642 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008640:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e076      	b.n	8008734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008646:	88fb      	ldrh	r3, [r7, #6]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d105      	bne.n	8008658 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800864c:	893b      	ldrh	r3, [r7, #8]
 800864e:	b2da      	uxtb	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	611a      	str	r2, [r3, #16]
 8008656:	e021      	b.n	800869c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008658:	893b      	ldrh	r3, [r7, #8]
 800865a:	0a1b      	lsrs	r3, r3, #8
 800865c:	b29b      	uxth	r3, r3
 800865e:	b2da      	uxtb	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008668:	6a39      	ldr	r1, [r7, #32]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 f982 	bl	8008974 <I2C_WaitOnTXEFlagUntilTimeout>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00d      	beq.n	8008692 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800867a:	2b04      	cmp	r3, #4
 800867c:	d107      	bne.n	800868e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800868c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e050      	b.n	8008734 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008692:	893b      	ldrh	r3, [r7, #8]
 8008694:	b2da      	uxtb	r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800869c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800869e:	6a39      	ldr	r1, [r7, #32]
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 f967 	bl	8008974 <I2C_WaitOnTXEFlagUntilTimeout>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00d      	beq.n	80086c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	d107      	bne.n	80086c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e035      	b.n	8008734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	2200      	movs	r2, #0
 80086e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 f82b 	bl	8008740 <I2C_WaitOnFlagUntilTimeout>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00d      	beq.n	800870c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086fe:	d103      	bne.n	8008708 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008706:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e013      	b.n	8008734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800870c:	897b      	ldrh	r3, [r7, #10]
 800870e:	b2db      	uxtb	r3, r3
 8008710:	f043 0301 	orr.w	r3, r3, #1
 8008714:	b2da      	uxtb	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800871c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871e:	6a3a      	ldr	r2, [r7, #32]
 8008720:	4906      	ldr	r1, [pc, #24]	@ (800873c <I2C_RequestMemoryRead+0x1cc>)
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 f886 	bl	8008834 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e000      	b.n	8008734 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	00010002 	.word	0x00010002

08008740 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	603b      	str	r3, [r7, #0]
 800874c:	4613      	mov	r3, r2
 800874e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008750:	e048      	b.n	80087e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008758:	d044      	beq.n	80087e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800875a:	f7fe fc69 	bl	8007030 <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d302      	bcc.n	8008770 <I2C_WaitOnFlagUntilTimeout+0x30>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d139      	bne.n	80087e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	0c1b      	lsrs	r3, r3, #16
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b01      	cmp	r3, #1
 8008778:	d10d      	bne.n	8008796 <I2C_WaitOnFlagUntilTimeout+0x56>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	43da      	mvns	r2, r3
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	4013      	ands	r3, r2
 8008786:	b29b      	uxth	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	bf0c      	ite	eq
 800878c:	2301      	moveq	r3, #1
 800878e:	2300      	movne	r3, #0
 8008790:	b2db      	uxtb	r3, r3
 8008792:	461a      	mov	r2, r3
 8008794:	e00c      	b.n	80087b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	43da      	mvns	r2, r3
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4013      	ands	r3, r2
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	bf0c      	ite	eq
 80087a8:	2301      	moveq	r3, #1
 80087aa:	2300      	movne	r3, #0
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	461a      	mov	r2, r3
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d116      	bne.n	80087e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2220      	movs	r2, #32
 80087c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d0:	f043 0220 	orr.w	r2, r3, #32
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e023      	b.n	800882c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	0c1b      	lsrs	r3, r3, #16
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d10d      	bne.n	800880a <I2C_WaitOnFlagUntilTimeout+0xca>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	43da      	mvns	r2, r3
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	4013      	ands	r3, r2
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	bf0c      	ite	eq
 8008800:	2301      	moveq	r3, #1
 8008802:	2300      	movne	r3, #0
 8008804:	b2db      	uxtb	r3, r3
 8008806:	461a      	mov	r2, r3
 8008808:	e00c      	b.n	8008824 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	43da      	mvns	r2, r3
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	4013      	ands	r3, r2
 8008816:	b29b      	uxth	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	bf0c      	ite	eq
 800881c:	2301      	moveq	r3, #1
 800881e:	2300      	movne	r3, #0
 8008820:	b2db      	uxtb	r3, r3
 8008822:	461a      	mov	r2, r3
 8008824:	79fb      	ldrb	r3, [r7, #7]
 8008826:	429a      	cmp	r2, r3
 8008828:	d093      	beq.n	8008752 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008842:	e071      	b.n	8008928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800884e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008852:	d123      	bne.n	800889c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008862:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800886c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2220      	movs	r2, #32
 8008878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008888:	f043 0204 	orr.w	r2, r3, #4
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e067      	b.n	800896c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a2:	d041      	beq.n	8008928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088a4:	f7fe fbc4 	bl	8007030 <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d302      	bcc.n	80088ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d136      	bne.n	8008928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	0c1b      	lsrs	r3, r3, #16
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d10c      	bne.n	80088de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	43da      	mvns	r2, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	4013      	ands	r3, r2
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bf14      	ite	ne
 80088d6:	2301      	movne	r3, #1
 80088d8:	2300      	moveq	r3, #0
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	e00b      	b.n	80088f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	43da      	mvns	r2, r3
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	4013      	ands	r3, r2
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	bf14      	ite	ne
 80088f0:	2301      	movne	r3, #1
 80088f2:	2300      	moveq	r3, #0
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d016      	beq.n	8008928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2220      	movs	r2, #32
 8008904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008914:	f043 0220 	orr.w	r2, r3, #32
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e021      	b.n	800896c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	0c1b      	lsrs	r3, r3, #16
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b01      	cmp	r3, #1
 8008930:	d10c      	bne.n	800894c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	43da      	mvns	r2, r3
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	4013      	ands	r3, r2
 800893e:	b29b      	uxth	r3, r3
 8008940:	2b00      	cmp	r3, #0
 8008942:	bf14      	ite	ne
 8008944:	2301      	movne	r3, #1
 8008946:	2300      	moveq	r3, #0
 8008948:	b2db      	uxtb	r3, r3
 800894a:	e00b      	b.n	8008964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	43da      	mvns	r2, r3
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4013      	ands	r3, r2
 8008958:	b29b      	uxth	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	bf14      	ite	ne
 800895e:	2301      	movne	r3, #1
 8008960:	2300      	moveq	r3, #0
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	f47f af6d 	bne.w	8008844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008980:	e034      	b.n	80089ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 f8e3 	bl	8008b4e <I2C_IsAcknowledgeFailed>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e034      	b.n	80089fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008998:	d028      	beq.n	80089ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800899a:	f7fe fb49 	bl	8007030 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d302      	bcc.n	80089b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d11d      	bne.n	80089ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089ba:	2b80      	cmp	r3, #128	@ 0x80
 80089bc:	d016      	beq.n	80089ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2220      	movs	r2, #32
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d8:	f043 0220 	orr.w	r2, r3, #32
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e007      	b.n	80089fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089f6:	2b80      	cmp	r3, #128	@ 0x80
 80089f8:	d1c3      	bne.n	8008982 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a10:	e034      	b.n	8008a7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 f89b 	bl	8008b4e <I2C_IsAcknowledgeFailed>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e034      	b.n	8008a8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a28:	d028      	beq.n	8008a7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a2a:	f7fe fb01 	bl	8007030 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d302      	bcc.n	8008a40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d11d      	bne.n	8008a7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	f003 0304 	and.w	r3, r3, #4
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	d016      	beq.n	8008a7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2220      	movs	r2, #32
 8008a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a68:	f043 0220 	orr.w	r2, r3, #32
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e007      	b.n	8008a8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	f003 0304 	and.w	r3, r3, #4
 8008a86:	2b04      	cmp	r3, #4
 8008a88:	d1c3      	bne.n	8008a12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008aa0:	e049      	b.n	8008b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	f003 0310 	and.w	r3, r3, #16
 8008aac:	2b10      	cmp	r3, #16
 8008aae:	d119      	bne.n	8008ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f06f 0210 	mvn.w	r2, #16
 8008ab8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e030      	b.n	8008b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ae4:	f7fe faa4 	bl	8007030 <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d302      	bcc.n	8008afa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d11d      	bne.n	8008b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b04:	2b40      	cmp	r3, #64	@ 0x40
 8008b06:	d016      	beq.n	8008b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2220      	movs	r2, #32
 8008b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b22:	f043 0220 	orr.w	r2, r3, #32
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e007      	b.n	8008b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b40:	2b40      	cmp	r3, #64	@ 0x40
 8008b42:	d1ae      	bne.n	8008aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b64:	d11b      	bne.n	8008b9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008b6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2220      	movs	r2, #32
 8008b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8a:	f043 0204 	orr.w	r2, r3, #4
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e000      	b.n	8008ba0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af02      	add	r7, sp, #8
 8008bb2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e101      	b.n	8008dc2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d106      	bne.n	8008bde <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7fe f801 	bl	8006be0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2203      	movs	r2, #3
 8008be2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bec:	d102      	bne.n	8008bf4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f002 f91d 	bl	800ae38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	7c1a      	ldrb	r2, [r3, #16]
 8008c06:	f88d 2000 	strb.w	r2, [sp]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c0e:	f002 f8af 	bl	800ad70 <USB_CoreInit>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d005      	beq.n	8008c24 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e0ce      	b.n	8008dc2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2100      	movs	r1, #0
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f002 f915 	bl	800ae5a <USB_SetCurrentMode>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d005      	beq.n	8008c42 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2202      	movs	r2, #2
 8008c3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e0bf      	b.n	8008dc2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]
 8008c46:	e04a      	b.n	8008cde <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008c48:	7bfa      	ldrb	r2, [r7, #15]
 8008c4a:	6879      	ldr	r1, [r7, #4]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	00db      	lsls	r3, r3, #3
 8008c50:	4413      	add	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	440b      	add	r3, r1
 8008c56:	3315      	adds	r3, #21
 8008c58:	2201      	movs	r2, #1
 8008c5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008c5c:	7bfa      	ldrb	r2, [r7, #15]
 8008c5e:	6879      	ldr	r1, [r7, #4]
 8008c60:	4613      	mov	r3, r2
 8008c62:	00db      	lsls	r3, r3, #3
 8008c64:	4413      	add	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	440b      	add	r3, r1
 8008c6a:	3314      	adds	r3, #20
 8008c6c:	7bfa      	ldrb	r2, [r7, #15]
 8008c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008c70:	7bfa      	ldrb	r2, [r7, #15]
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	b298      	uxth	r0, r3
 8008c76:	6879      	ldr	r1, [r7, #4]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	00db      	lsls	r3, r3, #3
 8008c7c:	4413      	add	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	440b      	add	r3, r1
 8008c82:	332e      	adds	r3, #46	@ 0x2e
 8008c84:	4602      	mov	r2, r0
 8008c86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008c88:	7bfa      	ldrb	r2, [r7, #15]
 8008c8a:	6879      	ldr	r1, [r7, #4]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	00db      	lsls	r3, r3, #3
 8008c90:	4413      	add	r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	440b      	add	r3, r1
 8008c96:	3318      	adds	r3, #24
 8008c98:	2200      	movs	r2, #0
 8008c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008c9c:	7bfa      	ldrb	r2, [r7, #15]
 8008c9e:	6879      	ldr	r1, [r7, #4]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	00db      	lsls	r3, r3, #3
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	440b      	add	r3, r1
 8008caa:	331c      	adds	r3, #28
 8008cac:	2200      	movs	r2, #0
 8008cae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008cb0:	7bfa      	ldrb	r2, [r7, #15]
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	440b      	add	r3, r1
 8008cbe:	3320      	adds	r3, #32
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008cc4:	7bfa      	ldrb	r2, [r7, #15]
 8008cc6:	6879      	ldr	r1, [r7, #4]
 8008cc8:	4613      	mov	r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	4413      	add	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	440b      	add	r3, r1
 8008cd2:	3324      	adds	r3, #36	@ 0x24
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	73fb      	strb	r3, [r7, #15]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	791b      	ldrb	r3, [r3, #4]
 8008ce2:	7bfa      	ldrb	r2, [r7, #15]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d3af      	bcc.n	8008c48 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73fb      	strb	r3, [r7, #15]
 8008cec:	e044      	b.n	8008d78 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008cee:	7bfa      	ldrb	r2, [r7, #15]
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	00db      	lsls	r3, r3, #3
 8008cf6:	4413      	add	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	440b      	add	r3, r1
 8008cfc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008d00:	2200      	movs	r2, #0
 8008d02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008d04:	7bfa      	ldrb	r2, [r7, #15]
 8008d06:	6879      	ldr	r1, [r7, #4]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	00db      	lsls	r3, r3, #3
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	440b      	add	r3, r1
 8008d12:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008d16:	7bfa      	ldrb	r2, [r7, #15]
 8008d18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008d1a:	7bfa      	ldrb	r2, [r7, #15]
 8008d1c:	6879      	ldr	r1, [r7, #4]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	00db      	lsls	r3, r3, #3
 8008d22:	4413      	add	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	440b      	add	r3, r1
 8008d28:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008d30:	7bfa      	ldrb	r2, [r7, #15]
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	4613      	mov	r3, r2
 8008d36:	00db      	lsls	r3, r3, #3
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	440b      	add	r3, r1
 8008d3e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008d42:	2200      	movs	r2, #0
 8008d44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008d46:	7bfa      	ldrb	r2, [r7, #15]
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008d5c:	7bfa      	ldrb	r2, [r7, #15]
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	4613      	mov	r3, r2
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	4413      	add	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	440b      	add	r3, r1
 8008d6a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	3301      	adds	r3, #1
 8008d76:	73fb      	strb	r3, [r7, #15]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	791b      	ldrb	r3, [r3, #4]
 8008d7c:	7bfa      	ldrb	r2, [r7, #15]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d3b5      	bcc.n	8008cee <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6818      	ldr	r0, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	7c1a      	ldrb	r2, [r3, #16]
 8008d8a:	f88d 2000 	strb.w	r2, [sp]
 8008d8e:	3304      	adds	r3, #4
 8008d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d92:	f002 f8af 	bl	800aef4 <USB_DevInit>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d005      	beq.n	8008da8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e00c      	b.n	8008dc2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f002 fa77 	bl	800b2ae <USB_DevDisconnect>

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
	...

08008dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e267      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d075      	beq.n	8008ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008dea:	4b88      	ldr	r3, [pc, #544]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f003 030c 	and.w	r3, r3, #12
 8008df2:	2b04      	cmp	r3, #4
 8008df4:	d00c      	beq.n	8008e10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008df6:	4b85      	ldr	r3, [pc, #532]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008dfe:	2b08      	cmp	r3, #8
 8008e00:	d112      	bne.n	8008e28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e02:	4b82      	ldr	r3, [pc, #520]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e0e:	d10b      	bne.n	8008e28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e10:	4b7e      	ldr	r3, [pc, #504]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d05b      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x108>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d157      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e242      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e30:	d106      	bne.n	8008e40 <HAL_RCC_OscConfig+0x74>
 8008e32:	4b76      	ldr	r3, [pc, #472]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a75      	ldr	r2, [pc, #468]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e3c:	6013      	str	r3, [r2, #0]
 8008e3e:	e01d      	b.n	8008e7c <HAL_RCC_OscConfig+0xb0>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e48:	d10c      	bne.n	8008e64 <HAL_RCC_OscConfig+0x98>
 8008e4a:	4b70      	ldr	r3, [pc, #448]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a6f      	ldr	r2, [pc, #444]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e54:	6013      	str	r3, [r2, #0]
 8008e56:	4b6d      	ldr	r3, [pc, #436]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a6c      	ldr	r2, [pc, #432]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e60:	6013      	str	r3, [r2, #0]
 8008e62:	e00b      	b.n	8008e7c <HAL_RCC_OscConfig+0xb0>
 8008e64:	4b69      	ldr	r3, [pc, #420]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a68      	ldr	r2, [pc, #416]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	4b66      	ldr	r3, [pc, #408]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a65      	ldr	r2, [pc, #404]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d013      	beq.n	8008eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e84:	f7fe f8d4 	bl	8007030 <HAL_GetTick>
 8008e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e8a:	e008      	b.n	8008e9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e8c:	f7fe f8d0 	bl	8007030 <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	2b64      	cmp	r3, #100	@ 0x64
 8008e98:	d901      	bls.n	8008e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e207      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d0f0      	beq.n	8008e8c <HAL_RCC_OscConfig+0xc0>
 8008eaa:	e014      	b.n	8008ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eac:	f7fe f8c0 	bl	8007030 <HAL_GetTick>
 8008eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008eb2:	e008      	b.n	8008ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008eb4:	f7fe f8bc 	bl	8007030 <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	2b64      	cmp	r3, #100	@ 0x64
 8008ec0:	d901      	bls.n	8008ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e1f3      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ec6:	4b51      	ldr	r3, [pc, #324]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1f0      	bne.n	8008eb4 <HAL_RCC_OscConfig+0xe8>
 8008ed2:	e000      	b.n	8008ed6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d063      	beq.n	8008faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f003 030c 	and.w	r3, r3, #12
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00b      	beq.n	8008f06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008eee:	4b47      	ldr	r3, [pc, #284]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008ef6:	2b08      	cmp	r3, #8
 8008ef8:	d11c      	bne.n	8008f34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008efa:	4b44      	ldr	r3, [pc, #272]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d116      	bne.n	8008f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f06:	4b41      	ldr	r3, [pc, #260]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0302 	and.w	r3, r3, #2
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d005      	beq.n	8008f1e <HAL_RCC_OscConfig+0x152>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d001      	beq.n	8008f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e1c7      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	00db      	lsls	r3, r3, #3
 8008f2c:	4937      	ldr	r1, [pc, #220]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f32:	e03a      	b.n	8008faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d020      	beq.n	8008f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f3c:	4b34      	ldr	r3, [pc, #208]	@ (8009010 <HAL_RCC_OscConfig+0x244>)
 8008f3e:	2201      	movs	r2, #1
 8008f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f42:	f7fe f875 	bl	8007030 <HAL_GetTick>
 8008f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f48:	e008      	b.n	8008f5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f4a:	f7fe f871 	bl	8007030 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d901      	bls.n	8008f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e1a8      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0f0      	beq.n	8008f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f68:	4b28      	ldr	r3, [pc, #160]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	00db      	lsls	r3, r3, #3
 8008f76:	4925      	ldr	r1, [pc, #148]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	600b      	str	r3, [r1, #0]
 8008f7c:	e015      	b.n	8008faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f7e:	4b24      	ldr	r3, [pc, #144]	@ (8009010 <HAL_RCC_OscConfig+0x244>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f84:	f7fe f854 	bl	8007030 <HAL_GetTick>
 8008f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f8a:	e008      	b.n	8008f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f8c:	f7fe f850 	bl	8007030 <HAL_GetTick>
 8008f90:	4602      	mov	r2, r0
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d901      	bls.n	8008f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e187      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1f0      	bne.n	8008f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0308 	and.w	r3, r3, #8
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d036      	beq.n	8009024 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d016      	beq.n	8008fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fbe:	4b15      	ldr	r3, [pc, #84]	@ (8009014 <HAL_RCC_OscConfig+0x248>)
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fc4:	f7fe f834 	bl	8007030 <HAL_GetTick>
 8008fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fca:	e008      	b.n	8008fde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fcc:	f7fe f830 	bl	8007030 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d901      	bls.n	8008fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e167      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fde:	4b0b      	ldr	r3, [pc, #44]	@ (800900c <HAL_RCC_OscConfig+0x240>)
 8008fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0f0      	beq.n	8008fcc <HAL_RCC_OscConfig+0x200>
 8008fea:	e01b      	b.n	8009024 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fec:	4b09      	ldr	r3, [pc, #36]	@ (8009014 <HAL_RCC_OscConfig+0x248>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ff2:	f7fe f81d 	bl	8007030 <HAL_GetTick>
 8008ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ff8:	e00e      	b.n	8009018 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ffa:	f7fe f819 	bl	8007030 <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	2b02      	cmp	r3, #2
 8009006:	d907      	bls.n	8009018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	e150      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
 800900c:	40023800 	.word	0x40023800
 8009010:	42470000 	.word	0x42470000
 8009014:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009018:	4b88      	ldr	r3, [pc, #544]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 800901a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800901c:	f003 0302 	and.w	r3, r3, #2
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1ea      	bne.n	8008ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0304 	and.w	r3, r3, #4
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 8097 	beq.w	8009160 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009032:	2300      	movs	r3, #0
 8009034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009036:	4b81      	ldr	r3, [pc, #516]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 8009038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800903a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10f      	bne.n	8009062 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009042:	2300      	movs	r3, #0
 8009044:	60bb      	str	r3, [r7, #8]
 8009046:	4b7d      	ldr	r3, [pc, #500]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 8009048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800904a:	4a7c      	ldr	r2, [pc, #496]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 800904c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009050:	6413      	str	r3, [r2, #64]	@ 0x40
 8009052:	4b7a      	ldr	r3, [pc, #488]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 8009054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800905a:	60bb      	str	r3, [r7, #8]
 800905c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800905e:	2301      	movs	r3, #1
 8009060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009062:	4b77      	ldr	r3, [pc, #476]	@ (8009240 <HAL_RCC_OscConfig+0x474>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800906a:	2b00      	cmp	r3, #0
 800906c:	d118      	bne.n	80090a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800906e:	4b74      	ldr	r3, [pc, #464]	@ (8009240 <HAL_RCC_OscConfig+0x474>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a73      	ldr	r2, [pc, #460]	@ (8009240 <HAL_RCC_OscConfig+0x474>)
 8009074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800907a:	f7fd ffd9 	bl	8007030 <HAL_GetTick>
 800907e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009080:	e008      	b.n	8009094 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009082:	f7fd ffd5 	bl	8007030 <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	2b02      	cmp	r3, #2
 800908e:	d901      	bls.n	8009094 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e10c      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009094:	4b6a      	ldr	r3, [pc, #424]	@ (8009240 <HAL_RCC_OscConfig+0x474>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800909c:	2b00      	cmp	r3, #0
 800909e:	d0f0      	beq.n	8009082 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d106      	bne.n	80090b6 <HAL_RCC_OscConfig+0x2ea>
 80090a8:	4b64      	ldr	r3, [pc, #400]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 80090aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090ac:	4a63      	ldr	r2, [pc, #396]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 80090ae:	f043 0301 	orr.w	r3, r3, #1
 80090b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80090b4:	e01c      	b.n	80090f0 <HAL_RCC_OscConfig+0x324>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	2b05      	cmp	r3, #5
 80090bc:	d10c      	bne.n	80090d8 <HAL_RCC_OscConfig+0x30c>
 80090be:	4b5f      	ldr	r3, [pc, #380]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 80090c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090c2:	4a5e      	ldr	r2, [pc, #376]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 80090c4:	f043 0304 	orr.w	r3, r3, #4
 80090c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80090ca:	4b5c      	ldr	r3, [pc, #368]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 80090cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090ce:	4a5b      	ldr	r2, [pc, #364]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 80090d0:	f043 0301 	orr.w	r3, r3, #1
 80090d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80090d6:	e00b      	b.n	80090f0 <HAL_RCC_OscConfig+0x324>
 80090d8:	4b58      	ldr	r3, [pc, #352]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 80090da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090dc:	4a57      	ldr	r2, [pc, #348]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 80090de:	f023 0301 	bic.w	r3, r3, #1
 80090e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80090e4:	4b55      	ldr	r3, [pc, #340]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 80090e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090e8:	4a54      	ldr	r2, [pc, #336]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 80090ea:	f023 0304 	bic.w	r3, r3, #4
 80090ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d015      	beq.n	8009124 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f8:	f7fd ff9a 	bl	8007030 <HAL_GetTick>
 80090fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090fe:	e00a      	b.n	8009116 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009100:	f7fd ff96 	bl	8007030 <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800910e:	4293      	cmp	r3, r2
 8009110:	d901      	bls.n	8009116 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e0cb      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009116:	4b49      	ldr	r3, [pc, #292]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 8009118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800911a:	f003 0302 	and.w	r3, r3, #2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0ee      	beq.n	8009100 <HAL_RCC_OscConfig+0x334>
 8009122:	e014      	b.n	800914e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009124:	f7fd ff84 	bl	8007030 <HAL_GetTick>
 8009128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800912a:	e00a      	b.n	8009142 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800912c:	f7fd ff80 	bl	8007030 <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800913a:	4293      	cmp	r3, r2
 800913c:	d901      	bls.n	8009142 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e0b5      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009142:	4b3e      	ldr	r3, [pc, #248]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 8009144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1ee      	bne.n	800912c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800914e:	7dfb      	ldrb	r3, [r7, #23]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d105      	bne.n	8009160 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009154:	4b39      	ldr	r3, [pc, #228]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 8009156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009158:	4a38      	ldr	r2, [pc, #224]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 800915a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800915e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 80a1 	beq.w	80092ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800916a:	4b34      	ldr	r3, [pc, #208]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f003 030c 	and.w	r3, r3, #12
 8009172:	2b08      	cmp	r3, #8
 8009174:	d05c      	beq.n	8009230 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	2b02      	cmp	r3, #2
 800917c:	d141      	bne.n	8009202 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800917e:	4b31      	ldr	r3, [pc, #196]	@ (8009244 <HAL_RCC_OscConfig+0x478>)
 8009180:	2200      	movs	r2, #0
 8009182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009184:	f7fd ff54 	bl	8007030 <HAL_GetTick>
 8009188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800918a:	e008      	b.n	800919e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800918c:	f7fd ff50 	bl	8007030 <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	2b02      	cmp	r3, #2
 8009198:	d901      	bls.n	800919e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e087      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800919e:	4b27      	ldr	r3, [pc, #156]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1f0      	bne.n	800918c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	69da      	ldr	r2, [r3, #28]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	431a      	orrs	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b8:	019b      	lsls	r3, r3, #6
 80091ba:	431a      	orrs	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091c0:	085b      	lsrs	r3, r3, #1
 80091c2:	3b01      	subs	r3, #1
 80091c4:	041b      	lsls	r3, r3, #16
 80091c6:	431a      	orrs	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091cc:	061b      	lsls	r3, r3, #24
 80091ce:	491b      	ldr	r1, [pc, #108]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 80091d0:	4313      	orrs	r3, r2
 80091d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80091d4:	4b1b      	ldr	r3, [pc, #108]	@ (8009244 <HAL_RCC_OscConfig+0x478>)
 80091d6:	2201      	movs	r2, #1
 80091d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091da:	f7fd ff29 	bl	8007030 <HAL_GetTick>
 80091de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091e0:	e008      	b.n	80091f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091e2:	f7fd ff25 	bl	8007030 <HAL_GetTick>
 80091e6:	4602      	mov	r2, r0
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d901      	bls.n	80091f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e05c      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091f4:	4b11      	ldr	r3, [pc, #68]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d0f0      	beq.n	80091e2 <HAL_RCC_OscConfig+0x416>
 8009200:	e054      	b.n	80092ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009202:	4b10      	ldr	r3, [pc, #64]	@ (8009244 <HAL_RCC_OscConfig+0x478>)
 8009204:	2200      	movs	r2, #0
 8009206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009208:	f7fd ff12 	bl	8007030 <HAL_GetTick>
 800920c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800920e:	e008      	b.n	8009222 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009210:	f7fd ff0e 	bl	8007030 <HAL_GetTick>
 8009214:	4602      	mov	r2, r0
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	2b02      	cmp	r3, #2
 800921c:	d901      	bls.n	8009222 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800921e:	2303      	movs	r3, #3
 8009220:	e045      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009222:	4b06      	ldr	r3, [pc, #24]	@ (800923c <HAL_RCC_OscConfig+0x470>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1f0      	bne.n	8009210 <HAL_RCC_OscConfig+0x444>
 800922e:	e03d      	b.n	80092ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d107      	bne.n	8009248 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e038      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
 800923c:	40023800 	.word	0x40023800
 8009240:	40007000 	.word	0x40007000
 8009244:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009248:	4b1b      	ldr	r3, [pc, #108]	@ (80092b8 <HAL_RCC_OscConfig+0x4ec>)
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d028      	beq.n	80092a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009260:	429a      	cmp	r2, r3
 8009262:	d121      	bne.n	80092a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800926e:	429a      	cmp	r2, r3
 8009270:	d11a      	bne.n	80092a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009278:	4013      	ands	r3, r2
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800927e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009280:	4293      	cmp	r3, r2
 8009282:	d111      	bne.n	80092a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800928e:	085b      	lsrs	r3, r3, #1
 8009290:	3b01      	subs	r3, #1
 8009292:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009294:	429a      	cmp	r2, r3
 8009296:	d107      	bne.n	80092a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d001      	beq.n	80092ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e000      	b.n	80092ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3718      	adds	r7, #24
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	40023800 	.word	0x40023800

080092bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e0cc      	b.n	800946a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80092d0:	4b68      	ldr	r3, [pc, #416]	@ (8009474 <HAL_RCC_ClockConfig+0x1b8>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 0307 	and.w	r3, r3, #7
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d90c      	bls.n	80092f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092de:	4b65      	ldr	r3, [pc, #404]	@ (8009474 <HAL_RCC_ClockConfig+0x1b8>)
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	b2d2      	uxtb	r2, r2
 80092e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092e6:	4b63      	ldr	r3, [pc, #396]	@ (8009474 <HAL_RCC_ClockConfig+0x1b8>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 0307 	and.w	r3, r3, #7
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d001      	beq.n	80092f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e0b8      	b.n	800946a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b00      	cmp	r3, #0
 8009302:	d020      	beq.n	8009346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0304 	and.w	r3, r3, #4
 800930c:	2b00      	cmp	r3, #0
 800930e:	d005      	beq.n	800931c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009310:	4b59      	ldr	r3, [pc, #356]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	4a58      	ldr	r2, [pc, #352]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 8009316:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800931a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0308 	and.w	r3, r3, #8
 8009324:	2b00      	cmp	r3, #0
 8009326:	d005      	beq.n	8009334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009328:	4b53      	ldr	r3, [pc, #332]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	4a52      	ldr	r2, [pc, #328]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800932e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009334:	4b50      	ldr	r3, [pc, #320]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	494d      	ldr	r1, [pc, #308]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 8009342:	4313      	orrs	r3, r2
 8009344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	2b00      	cmp	r3, #0
 8009350:	d044      	beq.n	80093dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d107      	bne.n	800936a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800935a:	4b47      	ldr	r3, [pc, #284]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d119      	bne.n	800939a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e07f      	b.n	800946a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	2b02      	cmp	r3, #2
 8009370:	d003      	beq.n	800937a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009376:	2b03      	cmp	r3, #3
 8009378:	d107      	bne.n	800938a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800937a:	4b3f      	ldr	r3, [pc, #252]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d109      	bne.n	800939a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e06f      	b.n	800946a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800938a:	4b3b      	ldr	r3, [pc, #236]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e067      	b.n	800946a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800939a:	4b37      	ldr	r3, [pc, #220]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f023 0203 	bic.w	r2, r3, #3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	4934      	ldr	r1, [pc, #208]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80093ac:	f7fd fe40 	bl	8007030 <HAL_GetTick>
 80093b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093b2:	e00a      	b.n	80093ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093b4:	f7fd fe3c 	bl	8007030 <HAL_GetTick>
 80093b8:	4602      	mov	r2, r0
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d901      	bls.n	80093ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e04f      	b.n	800946a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ca:	4b2b      	ldr	r3, [pc, #172]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f003 020c 	and.w	r2, r3, #12
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	429a      	cmp	r2, r3
 80093da:	d1eb      	bne.n	80093b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80093dc:	4b25      	ldr	r3, [pc, #148]	@ (8009474 <HAL_RCC_ClockConfig+0x1b8>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0307 	and.w	r3, r3, #7
 80093e4:	683a      	ldr	r2, [r7, #0]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d20c      	bcs.n	8009404 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093ea:	4b22      	ldr	r3, [pc, #136]	@ (8009474 <HAL_RCC_ClockConfig+0x1b8>)
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	b2d2      	uxtb	r2, r2
 80093f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093f2:	4b20      	ldr	r3, [pc, #128]	@ (8009474 <HAL_RCC_ClockConfig+0x1b8>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f003 0307 	and.w	r3, r3, #7
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d001      	beq.n	8009404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e032      	b.n	800946a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0304 	and.w	r3, r3, #4
 800940c:	2b00      	cmp	r3, #0
 800940e:	d008      	beq.n	8009422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009410:	4b19      	ldr	r3, [pc, #100]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	4916      	ldr	r1, [pc, #88]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800941e:	4313      	orrs	r3, r2
 8009420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0308 	and.w	r3, r3, #8
 800942a:	2b00      	cmp	r3, #0
 800942c:	d009      	beq.n	8009442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800942e:	4b12      	ldr	r3, [pc, #72]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	490e      	ldr	r1, [pc, #56]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800943e:	4313      	orrs	r3, r2
 8009440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009442:	f000 f821 	bl	8009488 <HAL_RCC_GetSysClockFreq>
 8009446:	4602      	mov	r2, r0
 8009448:	4b0b      	ldr	r3, [pc, #44]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	091b      	lsrs	r3, r3, #4
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	490a      	ldr	r1, [pc, #40]	@ (800947c <HAL_RCC_ClockConfig+0x1c0>)
 8009454:	5ccb      	ldrb	r3, [r1, r3]
 8009456:	fa22 f303 	lsr.w	r3, r2, r3
 800945a:	4a09      	ldr	r2, [pc, #36]	@ (8009480 <HAL_RCC_ClockConfig+0x1c4>)
 800945c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800945e:	4b09      	ldr	r3, [pc, #36]	@ (8009484 <HAL_RCC_ClockConfig+0x1c8>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4618      	mov	r0, r3
 8009464:	f7fd fc08 	bl	8006c78 <HAL_InitTick>

  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	40023c00 	.word	0x40023c00
 8009478:	40023800 	.word	0x40023800
 800947c:	080125bc 	.word	0x080125bc
 8009480:	20000020 	.word	0x20000020
 8009484:	20000024 	.word	0x20000024

08009488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800948c:	b090      	sub	sp, #64	@ 0x40
 800948e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009490:	2300      	movs	r3, #0
 8009492:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009498:	2300      	movs	r3, #0
 800949a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800949c:	2300      	movs	r3, #0
 800949e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094a0:	4b59      	ldr	r3, [pc, #356]	@ (8009608 <HAL_RCC_GetSysClockFreq+0x180>)
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f003 030c 	and.w	r3, r3, #12
 80094a8:	2b08      	cmp	r3, #8
 80094aa:	d00d      	beq.n	80094c8 <HAL_RCC_GetSysClockFreq+0x40>
 80094ac:	2b08      	cmp	r3, #8
 80094ae:	f200 80a1 	bhi.w	80095f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d002      	beq.n	80094bc <HAL_RCC_GetSysClockFreq+0x34>
 80094b6:	2b04      	cmp	r3, #4
 80094b8:	d003      	beq.n	80094c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80094ba:	e09b      	b.n	80095f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094bc:	4b53      	ldr	r3, [pc, #332]	@ (800960c <HAL_RCC_GetSysClockFreq+0x184>)
 80094be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80094c0:	e09b      	b.n	80095fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80094c2:	4b53      	ldr	r3, [pc, #332]	@ (8009610 <HAL_RCC_GetSysClockFreq+0x188>)
 80094c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80094c6:	e098      	b.n	80095fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80094c8:	4b4f      	ldr	r3, [pc, #316]	@ (8009608 <HAL_RCC_GetSysClockFreq+0x180>)
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80094d2:	4b4d      	ldr	r3, [pc, #308]	@ (8009608 <HAL_RCC_GetSysClockFreq+0x180>)
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d028      	beq.n	8009530 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094de:	4b4a      	ldr	r3, [pc, #296]	@ (8009608 <HAL_RCC_GetSysClockFreq+0x180>)
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	099b      	lsrs	r3, r3, #6
 80094e4:	2200      	movs	r2, #0
 80094e6:	623b      	str	r3, [r7, #32]
 80094e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80094f0:	2100      	movs	r1, #0
 80094f2:	4b47      	ldr	r3, [pc, #284]	@ (8009610 <HAL_RCC_GetSysClockFreq+0x188>)
 80094f4:	fb03 f201 	mul.w	r2, r3, r1
 80094f8:	2300      	movs	r3, #0
 80094fa:	fb00 f303 	mul.w	r3, r0, r3
 80094fe:	4413      	add	r3, r2
 8009500:	4a43      	ldr	r2, [pc, #268]	@ (8009610 <HAL_RCC_GetSysClockFreq+0x188>)
 8009502:	fba0 1202 	umull	r1, r2, r0, r2
 8009506:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009508:	460a      	mov	r2, r1
 800950a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800950c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800950e:	4413      	add	r3, r2
 8009510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009514:	2200      	movs	r2, #0
 8009516:	61bb      	str	r3, [r7, #24]
 8009518:	61fa      	str	r2, [r7, #28]
 800951a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800951e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009522:	f7f7 fcc7 	bl	8000eb4 <__aeabi_uldivmod>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4613      	mov	r3, r2
 800952c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800952e:	e053      	b.n	80095d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009530:	4b35      	ldr	r3, [pc, #212]	@ (8009608 <HAL_RCC_GetSysClockFreq+0x180>)
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	099b      	lsrs	r3, r3, #6
 8009536:	2200      	movs	r2, #0
 8009538:	613b      	str	r3, [r7, #16]
 800953a:	617a      	str	r2, [r7, #20]
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009542:	f04f 0b00 	mov.w	fp, #0
 8009546:	4652      	mov	r2, sl
 8009548:	465b      	mov	r3, fp
 800954a:	f04f 0000 	mov.w	r0, #0
 800954e:	f04f 0100 	mov.w	r1, #0
 8009552:	0159      	lsls	r1, r3, #5
 8009554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009558:	0150      	lsls	r0, r2, #5
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	ebb2 080a 	subs.w	r8, r2, sl
 8009562:	eb63 090b 	sbc.w	r9, r3, fp
 8009566:	f04f 0200 	mov.w	r2, #0
 800956a:	f04f 0300 	mov.w	r3, #0
 800956e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009572:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009576:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800957a:	ebb2 0408 	subs.w	r4, r2, r8
 800957e:	eb63 0509 	sbc.w	r5, r3, r9
 8009582:	f04f 0200 	mov.w	r2, #0
 8009586:	f04f 0300 	mov.w	r3, #0
 800958a:	00eb      	lsls	r3, r5, #3
 800958c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009590:	00e2      	lsls	r2, r4, #3
 8009592:	4614      	mov	r4, r2
 8009594:	461d      	mov	r5, r3
 8009596:	eb14 030a 	adds.w	r3, r4, sl
 800959a:	603b      	str	r3, [r7, #0]
 800959c:	eb45 030b 	adc.w	r3, r5, fp
 80095a0:	607b      	str	r3, [r7, #4]
 80095a2:	f04f 0200 	mov.w	r2, #0
 80095a6:	f04f 0300 	mov.w	r3, #0
 80095aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80095ae:	4629      	mov	r1, r5
 80095b0:	028b      	lsls	r3, r1, #10
 80095b2:	4621      	mov	r1, r4
 80095b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80095b8:	4621      	mov	r1, r4
 80095ba:	028a      	lsls	r2, r1, #10
 80095bc:	4610      	mov	r0, r2
 80095be:	4619      	mov	r1, r3
 80095c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095c2:	2200      	movs	r2, #0
 80095c4:	60bb      	str	r3, [r7, #8]
 80095c6:	60fa      	str	r2, [r7, #12]
 80095c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095cc:	f7f7 fc72 	bl	8000eb4 <__aeabi_uldivmod>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4613      	mov	r3, r2
 80095d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80095d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009608 <HAL_RCC_GetSysClockFreq+0x180>)
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	0c1b      	lsrs	r3, r3, #16
 80095de:	f003 0303 	and.w	r3, r3, #3
 80095e2:	3301      	adds	r3, #1
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80095e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80095ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80095f2:	e002      	b.n	80095fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80095f4:	4b05      	ldr	r3, [pc, #20]	@ (800960c <HAL_RCC_GetSysClockFreq+0x184>)
 80095f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80095f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80095fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3740      	adds	r7, #64	@ 0x40
 8009600:	46bd      	mov	sp, r7
 8009602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009606:	bf00      	nop
 8009608:	40023800 	.word	0x40023800
 800960c:	00f42400 	.word	0x00f42400
 8009610:	017d7840 	.word	0x017d7840

08009614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009614:	b480      	push	{r7}
 8009616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009618:	4b03      	ldr	r3, [pc, #12]	@ (8009628 <HAL_RCC_GetHCLKFreq+0x14>)
 800961a:	681b      	ldr	r3, [r3, #0]
}
 800961c:	4618      	mov	r0, r3
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	20000020 	.word	0x20000020

0800962c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009630:	f7ff fff0 	bl	8009614 <HAL_RCC_GetHCLKFreq>
 8009634:	4602      	mov	r2, r0
 8009636:	4b05      	ldr	r3, [pc, #20]	@ (800964c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	0a9b      	lsrs	r3, r3, #10
 800963c:	f003 0307 	and.w	r3, r3, #7
 8009640:	4903      	ldr	r1, [pc, #12]	@ (8009650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009642:	5ccb      	ldrb	r3, [r1, r3]
 8009644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009648:	4618      	mov	r0, r3
 800964a:	bd80      	pop	{r7, pc}
 800964c:	40023800 	.word	0x40023800
 8009650:	080125cc 	.word	0x080125cc

08009654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009658:	f7ff ffdc 	bl	8009614 <HAL_RCC_GetHCLKFreq>
 800965c:	4602      	mov	r2, r0
 800965e:	4b05      	ldr	r3, [pc, #20]	@ (8009674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	0b5b      	lsrs	r3, r3, #13
 8009664:	f003 0307 	and.w	r3, r3, #7
 8009668:	4903      	ldr	r1, [pc, #12]	@ (8009678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800966a:	5ccb      	ldrb	r3, [r1, r3]
 800966c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009670:	4618      	mov	r0, r3
 8009672:	bd80      	pop	{r7, pc}
 8009674:	40023800 	.word	0x40023800
 8009678:	080125cc 	.word	0x080125cc

0800967c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	220f      	movs	r2, #15
 800968a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800968c:	4b12      	ldr	r3, [pc, #72]	@ (80096d8 <HAL_RCC_GetClockConfig+0x5c>)
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f003 0203 	and.w	r2, r3, #3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009698:	4b0f      	ldr	r3, [pc, #60]	@ (80096d8 <HAL_RCC_GetClockConfig+0x5c>)
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80096a4:	4b0c      	ldr	r3, [pc, #48]	@ (80096d8 <HAL_RCC_GetClockConfig+0x5c>)
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80096b0:	4b09      	ldr	r3, [pc, #36]	@ (80096d8 <HAL_RCC_GetClockConfig+0x5c>)
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	08db      	lsrs	r3, r3, #3
 80096b6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096be:	4b07      	ldr	r3, [pc, #28]	@ (80096dc <HAL_RCC_GetClockConfig+0x60>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0207 	and.w	r2, r3, #7
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	601a      	str	r2, [r3, #0]
}
 80096ca:	bf00      	nop
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	40023800 	.word	0x40023800
 80096dc:	40023c00 	.word	0x40023c00

080096e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d101      	bne.n	80096f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e041      	b.n	8009776 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d106      	bne.n	800970c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7fd f8b4 	bl	8006874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2202      	movs	r2, #2
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	3304      	adds	r3, #4
 800971c:	4619      	mov	r1, r3
 800971e:	4610      	mov	r0, r2
 8009720:	f000 fbe6 	bl	8009ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
	...

08009780 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2b01      	cmp	r3, #1
 8009792:	d001      	beq.n	8009798 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e03c      	b.n	8009812 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2202      	movs	r2, #2
 800979c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a1e      	ldr	r2, [pc, #120]	@ (8009820 <HAL_TIM_Base_Start+0xa0>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d018      	beq.n	80097dc <HAL_TIM_Base_Start+0x5c>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097b2:	d013      	beq.n	80097dc <HAL_TIM_Base_Start+0x5c>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a1a      	ldr	r2, [pc, #104]	@ (8009824 <HAL_TIM_Base_Start+0xa4>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d00e      	beq.n	80097dc <HAL_TIM_Base_Start+0x5c>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a19      	ldr	r2, [pc, #100]	@ (8009828 <HAL_TIM_Base_Start+0xa8>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d009      	beq.n	80097dc <HAL_TIM_Base_Start+0x5c>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a17      	ldr	r2, [pc, #92]	@ (800982c <HAL_TIM_Base_Start+0xac>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d004      	beq.n	80097dc <HAL_TIM_Base_Start+0x5c>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a16      	ldr	r2, [pc, #88]	@ (8009830 <HAL_TIM_Base_Start+0xb0>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d111      	bne.n	8009800 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2b06      	cmp	r3, #6
 80097ec:	d010      	beq.n	8009810 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f042 0201 	orr.w	r2, r2, #1
 80097fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097fe:	e007      	b.n	8009810 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0201 	orr.w	r2, r2, #1
 800980e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	40010000 	.word	0x40010000
 8009824:	40000400 	.word	0x40000400
 8009828:	40000800 	.word	0x40000800
 800982c:	40000c00 	.word	0x40000c00
 8009830:	40014000 	.word	0x40014000

08009834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b01      	cmp	r3, #1
 8009846:	d001      	beq.n	800984c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e044      	b.n	80098d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68da      	ldr	r2, [r3, #12]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f042 0201 	orr.w	r2, r2, #1
 8009862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a1e      	ldr	r2, [pc, #120]	@ (80098e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d018      	beq.n	80098a0 <HAL_TIM_Base_Start_IT+0x6c>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009876:	d013      	beq.n	80098a0 <HAL_TIM_Base_Start_IT+0x6c>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a1a      	ldr	r2, [pc, #104]	@ (80098e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d00e      	beq.n	80098a0 <HAL_TIM_Base_Start_IT+0x6c>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a19      	ldr	r2, [pc, #100]	@ (80098ec <HAL_TIM_Base_Start_IT+0xb8>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d009      	beq.n	80098a0 <HAL_TIM_Base_Start_IT+0x6c>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a17      	ldr	r2, [pc, #92]	@ (80098f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d004      	beq.n	80098a0 <HAL_TIM_Base_Start_IT+0x6c>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a16      	ldr	r2, [pc, #88]	@ (80098f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d111      	bne.n	80098c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	f003 0307 	and.w	r3, r3, #7
 80098aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b06      	cmp	r3, #6
 80098b0:	d010      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f042 0201 	orr.w	r2, r2, #1
 80098c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098c2:	e007      	b.n	80098d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f042 0201 	orr.w	r2, r2, #1
 80098d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	40010000 	.word	0x40010000
 80098e8:	40000400 	.word	0x40000400
 80098ec:	40000800 	.word	0x40000800
 80098f0:	40000c00 	.word	0x40000c00
 80098f4:	40014000 	.word	0x40014000

080098f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e041      	b.n	800998e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d106      	bne.n	8009924 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f839 	bl	8009996 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2202      	movs	r2, #2
 8009928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	3304      	adds	r3, #4
 8009934:	4619      	mov	r1, r3
 8009936:	4610      	mov	r0, r2
 8009938:	f000 fada 	bl	8009ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009996:	b480      	push	{r7}
 8009998:	b083      	sub	sp, #12
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800999e:	bf00      	nop
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	f003 0302 	and.w	r3, r3, #2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d020      	beq.n	8009a0e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f003 0302 	and.w	r3, r3, #2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d01b      	beq.n	8009a0e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f06f 0202 	mvn.w	r2, #2
 80099de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	f003 0303 	and.w	r3, r3, #3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d003      	beq.n	80099fc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fa5c 	bl	8009eb2 <HAL_TIM_IC_CaptureCallback>
 80099fa:	e005      	b.n	8009a08 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fa4e 	bl	8009e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fa5f 	bl	8009ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	f003 0304 	and.w	r3, r3, #4
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d020      	beq.n	8009a5a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f003 0304 	and.w	r3, r3, #4
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d01b      	beq.n	8009a5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f06f 0204 	mvn.w	r2, #4
 8009a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2202      	movs	r2, #2
 8009a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d003      	beq.n	8009a48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fa36 	bl	8009eb2 <HAL_TIM_IC_CaptureCallback>
 8009a46:	e005      	b.n	8009a54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fa28 	bl	8009e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fa39 	bl	8009ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	f003 0308 	and.w	r3, r3, #8
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d020      	beq.n	8009aa6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f003 0308 	and.w	r3, r3, #8
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d01b      	beq.n	8009aa6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f06f 0208 	mvn.w	r2, #8
 8009a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2204      	movs	r2, #4
 8009a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	f003 0303 	and.w	r3, r3, #3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d003      	beq.n	8009a94 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fa10 	bl	8009eb2 <HAL_TIM_IC_CaptureCallback>
 8009a92:	e005      	b.n	8009aa0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fa02 	bl	8009e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fa13 	bl	8009ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	f003 0310 	and.w	r3, r3, #16
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d020      	beq.n	8009af2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f003 0310 	and.w	r3, r3, #16
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d01b      	beq.n	8009af2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f06f 0210 	mvn.w	r2, #16
 8009ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2208      	movs	r2, #8
 8009ac8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	69db      	ldr	r3, [r3, #28]
 8009ad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d003      	beq.n	8009ae0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f9ea 	bl	8009eb2 <HAL_TIM_IC_CaptureCallback>
 8009ade:	e005      	b.n	8009aec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f9dc 	bl	8009e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f9ed 	bl	8009ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00c      	beq.n	8009b16 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d007      	beq.n	8009b16 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f06f 0201 	mvn.w	r2, #1
 8009b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f7fa fe15 	bl	8004740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00c      	beq.n	8009b3a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d007      	beq.n	8009b3a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fd05 	bl	800a544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00c      	beq.n	8009b5e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d007      	beq.n	8009b5e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f9be 	bl	8009eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	f003 0320 	and.w	r3, r3, #32
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00c      	beq.n	8009b82 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d007      	beq.n	8009b82 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f06f 0220 	mvn.w	r2, #32
 8009b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fcd7 	bl	800a530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b82:	bf00      	nop
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
	...

08009b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d101      	bne.n	8009baa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e0ae      	b.n	8009d08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2b0c      	cmp	r3, #12
 8009bb6:	f200 809f 	bhi.w	8009cf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009bba:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc0:	08009bf5 	.word	0x08009bf5
 8009bc4:	08009cf9 	.word	0x08009cf9
 8009bc8:	08009cf9 	.word	0x08009cf9
 8009bcc:	08009cf9 	.word	0x08009cf9
 8009bd0:	08009c35 	.word	0x08009c35
 8009bd4:	08009cf9 	.word	0x08009cf9
 8009bd8:	08009cf9 	.word	0x08009cf9
 8009bdc:	08009cf9 	.word	0x08009cf9
 8009be0:	08009c77 	.word	0x08009c77
 8009be4:	08009cf9 	.word	0x08009cf9
 8009be8:	08009cf9 	.word	0x08009cf9
 8009bec:	08009cf9 	.word	0x08009cf9
 8009bf0:	08009cb7 	.word	0x08009cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68b9      	ldr	r1, [r7, #8]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 fa04 	bl	800a008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	699a      	ldr	r2, [r3, #24]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f042 0208 	orr.w	r2, r2, #8
 8009c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 0204 	bic.w	r2, r2, #4
 8009c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6999      	ldr	r1, [r3, #24]
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	691a      	ldr	r2, [r3, #16]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	619a      	str	r2, [r3, #24]
      break;
 8009c32:	e064      	b.n	8009cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68b9      	ldr	r1, [r7, #8]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 fa4a 	bl	800a0d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	699a      	ldr	r2, [r3, #24]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	699a      	ldr	r2, [r3, #24]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6999      	ldr	r1, [r3, #24]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	021a      	lsls	r2, r3, #8
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	430a      	orrs	r2, r1
 8009c72:	619a      	str	r2, [r3, #24]
      break;
 8009c74:	e043      	b.n	8009cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68b9      	ldr	r1, [r7, #8]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 fa95 	bl	800a1ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	69da      	ldr	r2, [r3, #28]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f042 0208 	orr.w	r2, r2, #8
 8009c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	69da      	ldr	r2, [r3, #28]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f022 0204 	bic.w	r2, r2, #4
 8009ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	69d9      	ldr	r1, [r3, #28]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	691a      	ldr	r2, [r3, #16]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	61da      	str	r2, [r3, #28]
      break;
 8009cb4:	e023      	b.n	8009cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68b9      	ldr	r1, [r7, #8]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 fadf 	bl	800a280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	69da      	ldr	r2, [r3, #28]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	69da      	ldr	r2, [r3, #28]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	69d9      	ldr	r1, [r3, #28]
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	021a      	lsls	r2, r3, #8
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	61da      	str	r2, [r3, #28]
      break;
 8009cf6:	e002      	b.n	8009cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8009cfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3718      	adds	r7, #24
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d101      	bne.n	8009d2c <HAL_TIM_ConfigClockSource+0x1c>
 8009d28:	2302      	movs	r3, #2
 8009d2a:	e0b4      	b.n	8009e96 <HAL_TIM_ConfigClockSource+0x186>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2202      	movs	r2, #2
 8009d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d64:	d03e      	beq.n	8009de4 <HAL_TIM_ConfigClockSource+0xd4>
 8009d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d6a:	f200 8087 	bhi.w	8009e7c <HAL_TIM_ConfigClockSource+0x16c>
 8009d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d72:	f000 8086 	beq.w	8009e82 <HAL_TIM_ConfigClockSource+0x172>
 8009d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d7a:	d87f      	bhi.n	8009e7c <HAL_TIM_ConfigClockSource+0x16c>
 8009d7c:	2b70      	cmp	r3, #112	@ 0x70
 8009d7e:	d01a      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0xa6>
 8009d80:	2b70      	cmp	r3, #112	@ 0x70
 8009d82:	d87b      	bhi.n	8009e7c <HAL_TIM_ConfigClockSource+0x16c>
 8009d84:	2b60      	cmp	r3, #96	@ 0x60
 8009d86:	d050      	beq.n	8009e2a <HAL_TIM_ConfigClockSource+0x11a>
 8009d88:	2b60      	cmp	r3, #96	@ 0x60
 8009d8a:	d877      	bhi.n	8009e7c <HAL_TIM_ConfigClockSource+0x16c>
 8009d8c:	2b50      	cmp	r3, #80	@ 0x50
 8009d8e:	d03c      	beq.n	8009e0a <HAL_TIM_ConfigClockSource+0xfa>
 8009d90:	2b50      	cmp	r3, #80	@ 0x50
 8009d92:	d873      	bhi.n	8009e7c <HAL_TIM_ConfigClockSource+0x16c>
 8009d94:	2b40      	cmp	r3, #64	@ 0x40
 8009d96:	d058      	beq.n	8009e4a <HAL_TIM_ConfigClockSource+0x13a>
 8009d98:	2b40      	cmp	r3, #64	@ 0x40
 8009d9a:	d86f      	bhi.n	8009e7c <HAL_TIM_ConfigClockSource+0x16c>
 8009d9c:	2b30      	cmp	r3, #48	@ 0x30
 8009d9e:	d064      	beq.n	8009e6a <HAL_TIM_ConfigClockSource+0x15a>
 8009da0:	2b30      	cmp	r3, #48	@ 0x30
 8009da2:	d86b      	bhi.n	8009e7c <HAL_TIM_ConfigClockSource+0x16c>
 8009da4:	2b20      	cmp	r3, #32
 8009da6:	d060      	beq.n	8009e6a <HAL_TIM_ConfigClockSource+0x15a>
 8009da8:	2b20      	cmp	r3, #32
 8009daa:	d867      	bhi.n	8009e7c <HAL_TIM_ConfigClockSource+0x16c>
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d05c      	beq.n	8009e6a <HAL_TIM_ConfigClockSource+0x15a>
 8009db0:	2b10      	cmp	r3, #16
 8009db2:	d05a      	beq.n	8009e6a <HAL_TIM_ConfigClockSource+0x15a>
 8009db4:	e062      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009dc6:	f000 fb25 	bl	800a414 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	609a      	str	r2, [r3, #8]
      break;
 8009de2:	e04f      	b.n	8009e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009df4:	f000 fb0e 	bl	800a414 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	689a      	ldr	r2, [r3, #8]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e06:	609a      	str	r2, [r3, #8]
      break;
 8009e08:	e03c      	b.n	8009e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e16:	461a      	mov	r2, r3
 8009e18:	f000 fa82 	bl	800a320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2150      	movs	r1, #80	@ 0x50
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fadb 	bl	800a3de <TIM_ITRx_SetConfig>
      break;
 8009e28:	e02c      	b.n	8009e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e36:	461a      	mov	r2, r3
 8009e38:	f000 faa1 	bl	800a37e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2160      	movs	r1, #96	@ 0x60
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 facb 	bl	800a3de <TIM_ITRx_SetConfig>
      break;
 8009e48:	e01c      	b.n	8009e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e56:	461a      	mov	r2, r3
 8009e58:	f000 fa62 	bl	800a320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2140      	movs	r1, #64	@ 0x40
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 fabb 	bl	800a3de <TIM_ITRx_SetConfig>
      break;
 8009e68:	e00c      	b.n	8009e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4619      	mov	r1, r3
 8009e74:	4610      	mov	r0, r2
 8009e76:	f000 fab2 	bl	800a3de <TIM_ITRx_SetConfig>
      break;
 8009e7a:	e003      	b.n	8009e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e80:	e000      	b.n	8009e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ea6:	bf00      	nop
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b083      	sub	sp, #12
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009eba:	bf00      	nop
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b083      	sub	sp, #12
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ece:	bf00      	nop
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009eda:	b480      	push	{r7}
 8009edc:	b083      	sub	sp, #12
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ee2:	bf00      	nop
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
	...

08009ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a3a      	ldr	r2, [pc, #232]	@ (8009fec <TIM_Base_SetConfig+0xfc>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d00f      	beq.n	8009f28 <TIM_Base_SetConfig+0x38>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f0e:	d00b      	beq.n	8009f28 <TIM_Base_SetConfig+0x38>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a37      	ldr	r2, [pc, #220]	@ (8009ff0 <TIM_Base_SetConfig+0x100>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d007      	beq.n	8009f28 <TIM_Base_SetConfig+0x38>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a36      	ldr	r2, [pc, #216]	@ (8009ff4 <TIM_Base_SetConfig+0x104>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d003      	beq.n	8009f28 <TIM_Base_SetConfig+0x38>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a35      	ldr	r2, [pc, #212]	@ (8009ff8 <TIM_Base_SetConfig+0x108>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d108      	bne.n	8009f3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8009fec <TIM_Base_SetConfig+0xfc>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d01b      	beq.n	8009f7a <TIM_Base_SetConfig+0x8a>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f48:	d017      	beq.n	8009f7a <TIM_Base_SetConfig+0x8a>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a28      	ldr	r2, [pc, #160]	@ (8009ff0 <TIM_Base_SetConfig+0x100>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d013      	beq.n	8009f7a <TIM_Base_SetConfig+0x8a>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a27      	ldr	r2, [pc, #156]	@ (8009ff4 <TIM_Base_SetConfig+0x104>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d00f      	beq.n	8009f7a <TIM_Base_SetConfig+0x8a>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a26      	ldr	r2, [pc, #152]	@ (8009ff8 <TIM_Base_SetConfig+0x108>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d00b      	beq.n	8009f7a <TIM_Base_SetConfig+0x8a>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a25      	ldr	r2, [pc, #148]	@ (8009ffc <TIM_Base_SetConfig+0x10c>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d007      	beq.n	8009f7a <TIM_Base_SetConfig+0x8a>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a24      	ldr	r2, [pc, #144]	@ (800a000 <TIM_Base_SetConfig+0x110>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d003      	beq.n	8009f7a <TIM_Base_SetConfig+0x8a>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a23      	ldr	r2, [pc, #140]	@ (800a004 <TIM_Base_SetConfig+0x114>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d108      	bne.n	8009f8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	689a      	ldr	r2, [r3, #8]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8009fec <TIM_Base_SetConfig+0xfc>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d103      	bne.n	8009fc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	691a      	ldr	r2, [r3, #16]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d105      	bne.n	8009fde <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	f023 0201 	bic.w	r2, r3, #1
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	611a      	str	r2, [r3, #16]
  }
}
 8009fde:	bf00      	nop
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	40010000 	.word	0x40010000
 8009ff0:	40000400 	.word	0x40000400
 8009ff4:	40000800 	.word	0x40000800
 8009ff8:	40000c00 	.word	0x40000c00
 8009ffc:	40014000 	.word	0x40014000
 800a000:	40014400 	.word	0x40014400
 800a004:	40014800 	.word	0x40014800

0800a008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a008:	b480      	push	{r7}
 800a00a:	b087      	sub	sp, #28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	f023 0201 	bic.w	r2, r3, #1
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f023 0303 	bic.w	r3, r3, #3
 800a03e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	4313      	orrs	r3, r2
 800a048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f023 0302 	bic.w	r3, r3, #2
 800a050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	4313      	orrs	r3, r2
 800a05a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a1c      	ldr	r2, [pc, #112]	@ (800a0d0 <TIM_OC1_SetConfig+0xc8>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d10c      	bne.n	800a07e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	f023 0308 	bic.w	r3, r3, #8
 800a06a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	4313      	orrs	r3, r2
 800a074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f023 0304 	bic.w	r3, r3, #4
 800a07c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a13      	ldr	r2, [pc, #76]	@ (800a0d0 <TIM_OC1_SetConfig+0xc8>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d111      	bne.n	800a0aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a08c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	697a      	ldr	r2, [r7, #20]
 800a0c2:	621a      	str	r2, [r3, #32]
}
 800a0c4:	bf00      	nop
 800a0c6:	371c      	adds	r7, #28
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr
 800a0d0:	40010000 	.word	0x40010000

0800a0d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b087      	sub	sp, #28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	f023 0210 	bic.w	r2, r3, #16
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a10a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	021b      	lsls	r3, r3, #8
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	4313      	orrs	r3, r2
 800a116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f023 0320 	bic.w	r3, r3, #32
 800a11e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	011b      	lsls	r3, r3, #4
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	4313      	orrs	r3, r2
 800a12a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a1e      	ldr	r2, [pc, #120]	@ (800a1a8 <TIM_OC2_SetConfig+0xd4>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d10d      	bne.n	800a150 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a13a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	011b      	lsls	r3, r3, #4
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	4313      	orrs	r3, r2
 800a146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a14e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a15      	ldr	r2, [pc, #84]	@ (800a1a8 <TIM_OC2_SetConfig+0xd4>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d113      	bne.n	800a180 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a15e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	695b      	ldr	r3, [r3, #20]
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	4313      	orrs	r3, r2
 800a172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	693a      	ldr	r2, [r7, #16]
 800a184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	685a      	ldr	r2, [r3, #4]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	621a      	str	r2, [r3, #32]
}
 800a19a:	bf00      	nop
 800a19c:	371c      	adds	r7, #28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	40010000 	.word	0x40010000

0800a1ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a1b      	ldr	r3, [r3, #32]
 800a1c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	69db      	ldr	r3, [r3, #28]
 800a1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f023 0303 	bic.w	r3, r3, #3
 800a1e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a1f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	021b      	lsls	r3, r3, #8
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a1d      	ldr	r2, [pc, #116]	@ (800a27c <TIM_OC3_SetConfig+0xd0>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d10d      	bne.n	800a226 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	021b      	lsls	r3, r3, #8
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a14      	ldr	r2, [pc, #80]	@ (800a27c <TIM_OC3_SetConfig+0xd0>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d113      	bne.n	800a256 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a23c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	011b      	lsls	r3, r3, #4
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	4313      	orrs	r3, r2
 800a248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	4313      	orrs	r3, r2
 800a254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	621a      	str	r2, [r3, #32]
}
 800a270:	bf00      	nop
 800a272:	371c      	adds	r7, #28
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr
 800a27c:	40010000 	.word	0x40010000

0800a280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a1b      	ldr	r3, [r3, #32]
 800a294:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	69db      	ldr	r3, [r3, #28]
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	021b      	lsls	r3, r3, #8
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	031b      	lsls	r3, r3, #12
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a10      	ldr	r2, [pc, #64]	@ (800a31c <TIM_OC4_SetConfig+0x9c>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d109      	bne.n	800a2f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	019b      	lsls	r3, r3, #6
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	685a      	ldr	r2, [r3, #4]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	621a      	str	r2, [r3, #32]
}
 800a30e:	bf00      	nop
 800a310:	371c      	adds	r7, #28
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	40010000 	.word	0x40010000

0800a320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6a1b      	ldr	r3, [r3, #32]
 800a330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	f023 0201 	bic.w	r2, r3, #1
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a34a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	011b      	lsls	r3, r3, #4
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	4313      	orrs	r3, r2
 800a354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	f023 030a 	bic.w	r3, r3, #10
 800a35c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	4313      	orrs	r3, r2
 800a364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	621a      	str	r2, [r3, #32]
}
 800a372:	bf00      	nop
 800a374:	371c      	adds	r7, #28
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a37e:	b480      	push	{r7}
 800a380:	b087      	sub	sp, #28
 800a382:	af00      	add	r7, sp, #0
 800a384:	60f8      	str	r0, [r7, #12]
 800a386:	60b9      	str	r1, [r7, #8]
 800a388:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6a1b      	ldr	r3, [r3, #32]
 800a394:	f023 0210 	bic.w	r2, r3, #16
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a3a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	031b      	lsls	r3, r3, #12
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a3ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	011b      	lsls	r3, r3, #4
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	621a      	str	r2, [r3, #32]
}
 800a3d2:	bf00      	nop
 800a3d4:	371c      	adds	r7, #28
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b085      	sub	sp, #20
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	f043 0307 	orr.w	r3, r3, #7
 800a400:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	609a      	str	r2, [r3, #8]
}
 800a408:	bf00      	nop
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a42e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	021a      	lsls	r2, r3, #8
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	431a      	orrs	r2, r3
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	697a      	ldr	r2, [r7, #20]
 800a43e:	4313      	orrs	r3, r2
 800a440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	609a      	str	r2, [r3, #8]
}
 800a448:	bf00      	nop
 800a44a:	371c      	adds	r7, #28
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a464:	2b01      	cmp	r3, #1
 800a466:	d101      	bne.n	800a46c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a468:	2302      	movs	r3, #2
 800a46a:	e050      	b.n	800a50e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2202      	movs	r2, #2
 800a478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a1c      	ldr	r2, [pc, #112]	@ (800a51c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d018      	beq.n	800a4e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4b8:	d013      	beq.n	800a4e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a18      	ldr	r2, [pc, #96]	@ (800a520 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d00e      	beq.n	800a4e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a16      	ldr	r2, [pc, #88]	@ (800a524 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d009      	beq.n	800a4e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a15      	ldr	r2, [pc, #84]	@ (800a528 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d004      	beq.n	800a4e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a13      	ldr	r2, [pc, #76]	@ (800a52c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d10c      	bne.n	800a4fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	40010000 	.word	0x40010000
 800a520:	40000400 	.word	0x40000400
 800a524:	40000800 	.word	0x40000800
 800a528:	40000c00 	.word	0x40000c00
 800a52c:	40014000 	.word	0x40014000

0800a530 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a538:	bf00      	nop
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d101      	bne.n	800a56a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e042      	b.n	800a5f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	d106      	bne.n	800a584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f7fc fa7e 	bl	8006a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2224      	movs	r2, #36	@ 0x24
 800a588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68da      	ldr	r2, [r3, #12]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a59a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f973 	bl	800a888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	691a      	ldr	r2, [r3, #16]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a5b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	695a      	ldr	r2, [r3, #20]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a5c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	68da      	ldr	r2, [r3, #12]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a5d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2220      	movs	r2, #32
 800a5dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2220      	movs	r2, #32
 800a5e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b08a      	sub	sp, #40	@ 0x28
 800a5fc:	af02      	add	r7, sp, #8
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	603b      	str	r3, [r7, #0]
 800a604:	4613      	mov	r3, r2
 800a606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a608:	2300      	movs	r3, #0
 800a60a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2b20      	cmp	r3, #32
 800a616:	d175      	bne.n	800a704 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d002      	beq.n	800a624 <HAL_UART_Transmit+0x2c>
 800a61e:	88fb      	ldrh	r3, [r7, #6]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d101      	bne.n	800a628 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e06e      	b.n	800a706 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2221      	movs	r2, #33	@ 0x21
 800a632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a636:	f7fc fcfb 	bl	8007030 <HAL_GetTick>
 800a63a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	88fa      	ldrh	r2, [r7, #6]
 800a640:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	88fa      	ldrh	r2, [r7, #6]
 800a646:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a650:	d108      	bne.n	800a664 <HAL_UART_Transmit+0x6c>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d104      	bne.n	800a664 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a65a:	2300      	movs	r3, #0
 800a65c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	61bb      	str	r3, [r7, #24]
 800a662:	e003      	b.n	800a66c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a668:	2300      	movs	r3, #0
 800a66a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a66c:	e02e      	b.n	800a6cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2200      	movs	r2, #0
 800a676:	2180      	movs	r1, #128	@ 0x80
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 f848 	bl	800a70e <UART_WaitOnFlagUntilTimeout>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d005      	beq.n	800a690 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2220      	movs	r2, #32
 800a688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e03a      	b.n	800a706 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10b      	bne.n	800a6ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	881b      	ldrh	r3, [r3, #0]
 800a69a:	461a      	mov	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	3302      	adds	r3, #2
 800a6aa:	61bb      	str	r3, [r7, #24]
 800a6ac:	e007      	b.n	800a6be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	781a      	ldrb	r2, [r3, #0]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1cb      	bne.n	800a66e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	2140      	movs	r1, #64	@ 0x40
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f000 f814 	bl	800a70e <UART_WaitOnFlagUntilTimeout>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d005      	beq.n	800a6f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2220      	movs	r2, #32
 800a6f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e006      	b.n	800a706 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2220      	movs	r2, #32
 800a6fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	e000      	b.n	800a706 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a704:	2302      	movs	r3, #2
  }
}
 800a706:	4618      	mov	r0, r3
 800a708:	3720      	adds	r7, #32
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b086      	sub	sp, #24
 800a712:	af00      	add	r7, sp, #0
 800a714:	60f8      	str	r0, [r7, #12]
 800a716:	60b9      	str	r1, [r7, #8]
 800a718:	603b      	str	r3, [r7, #0]
 800a71a:	4613      	mov	r3, r2
 800a71c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a71e:	e03b      	b.n	800a798 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a720:	6a3b      	ldr	r3, [r7, #32]
 800a722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a726:	d037      	beq.n	800a798 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a728:	f7fc fc82 	bl	8007030 <HAL_GetTick>
 800a72c:	4602      	mov	r2, r0
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	6a3a      	ldr	r2, [r7, #32]
 800a734:	429a      	cmp	r2, r3
 800a736:	d302      	bcc.n	800a73e <UART_WaitOnFlagUntilTimeout+0x30>
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d101      	bne.n	800a742 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a73e:	2303      	movs	r3, #3
 800a740:	e03a      	b.n	800a7b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	f003 0304 	and.w	r3, r3, #4
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d023      	beq.n	800a798 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	2b80      	cmp	r3, #128	@ 0x80
 800a754:	d020      	beq.n	800a798 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2b40      	cmp	r3, #64	@ 0x40
 800a75a:	d01d      	beq.n	800a798 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 0308 	and.w	r3, r3, #8
 800a766:	2b08      	cmp	r3, #8
 800a768:	d116      	bne.n	800a798 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a76a:	2300      	movs	r3, #0
 800a76c:	617b      	str	r3, [r7, #20]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	617b      	str	r3, [r7, #20]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	617b      	str	r3, [r7, #20]
 800a77e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f000 f81d 	bl	800a7c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2208      	movs	r2, #8
 800a78a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e00f      	b.n	800a7b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	bf0c      	ite	eq
 800a7a8:	2301      	moveq	r3, #1
 800a7aa:	2300      	movne	r3, #0
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d0b4      	beq.n	800a720 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3718      	adds	r7, #24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b095      	sub	sp, #84	@ 0x54
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	330c      	adds	r3, #12
 800a7ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d2:	e853 3f00 	ldrex	r3, [r3]
 800a7d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	330c      	adds	r3, #12
 800a7e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a7e8:	643a      	str	r2, [r7, #64]	@ 0x40
 800a7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7f0:	e841 2300 	strex	r3, r2, [r1]
 800a7f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1e5      	bne.n	800a7c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3314      	adds	r3, #20
 800a802:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	e853 3f00 	ldrex	r3, [r3]
 800a80a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	f023 0301 	bic.w	r3, r3, #1
 800a812:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	3314      	adds	r3, #20
 800a81a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a81c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a81e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a820:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a824:	e841 2300 	strex	r3, r2, [r1]
 800a828:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1e5      	bne.n	800a7fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a834:	2b01      	cmp	r3, #1
 800a836:	d119      	bne.n	800a86c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	330c      	adds	r3, #12
 800a83e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	e853 3f00 	ldrex	r3, [r3]
 800a846:	60bb      	str	r3, [r7, #8]
   return(result);
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	f023 0310 	bic.w	r3, r3, #16
 800a84e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	330c      	adds	r3, #12
 800a856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a858:	61ba      	str	r2, [r7, #24]
 800a85a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85c:	6979      	ldr	r1, [r7, #20]
 800a85e:	69ba      	ldr	r2, [r7, #24]
 800a860:	e841 2300 	strex	r3, r2, [r1]
 800a864:	613b      	str	r3, [r7, #16]
   return(result);
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1e5      	bne.n	800a838 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2220      	movs	r2, #32
 800a870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a87a:	bf00      	nop
 800a87c:	3754      	adds	r7, #84	@ 0x54
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
	...

0800a888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a88c:	b0c0      	sub	sp, #256	@ 0x100
 800a88e:	af00      	add	r7, sp, #0
 800a890:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8a4:	68d9      	ldr	r1, [r3, #12]
 800a8a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	ea40 0301 	orr.w	r3, r0, r1
 800a8b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a8b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8b6:	689a      	ldr	r2, [r3, #8]
 800a8b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	431a      	orrs	r2, r3
 800a8c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8c4:	695b      	ldr	r3, [r3, #20]
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8cc:	69db      	ldr	r3, [r3, #28]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a8d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a8e0:	f021 010c 	bic.w	r1, r1, #12
 800a8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a8ee:	430b      	orrs	r3, r1
 800a8f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a8f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a8fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a902:	6999      	ldr	r1, [r3, #24]
 800a904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	ea40 0301 	orr.w	r3, r0, r1
 800a90e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	4b8f      	ldr	r3, [pc, #572]	@ (800ab54 <UART_SetConfig+0x2cc>)
 800a918:	429a      	cmp	r2, r3
 800a91a:	d005      	beq.n	800a928 <UART_SetConfig+0xa0>
 800a91c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	4b8d      	ldr	r3, [pc, #564]	@ (800ab58 <UART_SetConfig+0x2d0>)
 800a924:	429a      	cmp	r2, r3
 800a926:	d104      	bne.n	800a932 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a928:	f7fe fe94 	bl	8009654 <HAL_RCC_GetPCLK2Freq>
 800a92c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a930:	e003      	b.n	800a93a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a932:	f7fe fe7b 	bl	800962c <HAL_RCC_GetPCLK1Freq>
 800a936:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a93a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a93e:	69db      	ldr	r3, [r3, #28]
 800a940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a944:	f040 810c 	bne.w	800ab60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a952:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a95a:	4622      	mov	r2, r4
 800a95c:	462b      	mov	r3, r5
 800a95e:	1891      	adds	r1, r2, r2
 800a960:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a962:	415b      	adcs	r3, r3
 800a964:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a96a:	4621      	mov	r1, r4
 800a96c:	eb12 0801 	adds.w	r8, r2, r1
 800a970:	4629      	mov	r1, r5
 800a972:	eb43 0901 	adc.w	r9, r3, r1
 800a976:	f04f 0200 	mov.w	r2, #0
 800a97a:	f04f 0300 	mov.w	r3, #0
 800a97e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a98a:	4690      	mov	r8, r2
 800a98c:	4699      	mov	r9, r3
 800a98e:	4623      	mov	r3, r4
 800a990:	eb18 0303 	adds.w	r3, r8, r3
 800a994:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a998:	462b      	mov	r3, r5
 800a99a:	eb49 0303 	adc.w	r3, r9, r3
 800a99e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a9a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a9ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a9b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	18db      	adds	r3, r3, r3
 800a9ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9bc:	4613      	mov	r3, r2
 800a9be:	eb42 0303 	adc.w	r3, r2, r3
 800a9c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a9c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a9cc:	f7f6 fa72 	bl	8000eb4 <__aeabi_uldivmod>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	4b61      	ldr	r3, [pc, #388]	@ (800ab5c <UART_SetConfig+0x2d4>)
 800a9d6:	fba3 2302 	umull	r2, r3, r3, r2
 800a9da:	095b      	lsrs	r3, r3, #5
 800a9dc:	011c      	lsls	r4, r3, #4
 800a9de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a9e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a9ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	464b      	mov	r3, r9
 800a9f4:	1891      	adds	r1, r2, r2
 800a9f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a9f8:	415b      	adcs	r3, r3
 800a9fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800aa00:	4641      	mov	r1, r8
 800aa02:	eb12 0a01 	adds.w	sl, r2, r1
 800aa06:	4649      	mov	r1, r9
 800aa08:	eb43 0b01 	adc.w	fp, r3, r1
 800aa0c:	f04f 0200 	mov.w	r2, #0
 800aa10:	f04f 0300 	mov.w	r3, #0
 800aa14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa20:	4692      	mov	sl, r2
 800aa22:	469b      	mov	fp, r3
 800aa24:	4643      	mov	r3, r8
 800aa26:	eb1a 0303 	adds.w	r3, sl, r3
 800aa2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa2e:	464b      	mov	r3, r9
 800aa30:	eb4b 0303 	adc.w	r3, fp, r3
 800aa34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aa38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800aa48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	18db      	adds	r3, r3, r3
 800aa50:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa52:	4613      	mov	r3, r2
 800aa54:	eb42 0303 	adc.w	r3, r2, r3
 800aa58:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800aa5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800aa62:	f7f6 fa27 	bl	8000eb4 <__aeabi_uldivmod>
 800aa66:	4602      	mov	r2, r0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	4611      	mov	r1, r2
 800aa6c:	4b3b      	ldr	r3, [pc, #236]	@ (800ab5c <UART_SetConfig+0x2d4>)
 800aa6e:	fba3 2301 	umull	r2, r3, r3, r1
 800aa72:	095b      	lsrs	r3, r3, #5
 800aa74:	2264      	movs	r2, #100	@ 0x64
 800aa76:	fb02 f303 	mul.w	r3, r2, r3
 800aa7a:	1acb      	subs	r3, r1, r3
 800aa7c:	00db      	lsls	r3, r3, #3
 800aa7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800aa82:	4b36      	ldr	r3, [pc, #216]	@ (800ab5c <UART_SetConfig+0x2d4>)
 800aa84:	fba3 2302 	umull	r2, r3, r3, r2
 800aa88:	095b      	lsrs	r3, r3, #5
 800aa8a:	005b      	lsls	r3, r3, #1
 800aa8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800aa90:	441c      	add	r4, r3
 800aa92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa96:	2200      	movs	r2, #0
 800aa98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800aaa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800aaa4:	4642      	mov	r2, r8
 800aaa6:	464b      	mov	r3, r9
 800aaa8:	1891      	adds	r1, r2, r2
 800aaaa:	63b9      	str	r1, [r7, #56]	@ 0x38
 800aaac:	415b      	adcs	r3, r3
 800aaae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800aab4:	4641      	mov	r1, r8
 800aab6:	1851      	adds	r1, r2, r1
 800aab8:	6339      	str	r1, [r7, #48]	@ 0x30
 800aaba:	4649      	mov	r1, r9
 800aabc:	414b      	adcs	r3, r1
 800aabe:	637b      	str	r3, [r7, #52]	@ 0x34
 800aac0:	f04f 0200 	mov.w	r2, #0
 800aac4:	f04f 0300 	mov.w	r3, #0
 800aac8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800aacc:	4659      	mov	r1, fp
 800aace:	00cb      	lsls	r3, r1, #3
 800aad0:	4651      	mov	r1, sl
 800aad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aad6:	4651      	mov	r1, sl
 800aad8:	00ca      	lsls	r2, r1, #3
 800aada:	4610      	mov	r0, r2
 800aadc:	4619      	mov	r1, r3
 800aade:	4603      	mov	r3, r0
 800aae0:	4642      	mov	r2, r8
 800aae2:	189b      	adds	r3, r3, r2
 800aae4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aae8:	464b      	mov	r3, r9
 800aaea:	460a      	mov	r2, r1
 800aaec:	eb42 0303 	adc.w	r3, r2, r3
 800aaf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aaf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ab00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ab04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ab08:	460b      	mov	r3, r1
 800ab0a:	18db      	adds	r3, r3, r3
 800ab0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab0e:	4613      	mov	r3, r2
 800ab10:	eb42 0303 	adc.w	r3, r2, r3
 800ab14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ab1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ab1e:	f7f6 f9c9 	bl	8000eb4 <__aeabi_uldivmod>
 800ab22:	4602      	mov	r2, r0
 800ab24:	460b      	mov	r3, r1
 800ab26:	4b0d      	ldr	r3, [pc, #52]	@ (800ab5c <UART_SetConfig+0x2d4>)
 800ab28:	fba3 1302 	umull	r1, r3, r3, r2
 800ab2c:	095b      	lsrs	r3, r3, #5
 800ab2e:	2164      	movs	r1, #100	@ 0x64
 800ab30:	fb01 f303 	mul.w	r3, r1, r3
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	00db      	lsls	r3, r3, #3
 800ab38:	3332      	adds	r3, #50	@ 0x32
 800ab3a:	4a08      	ldr	r2, [pc, #32]	@ (800ab5c <UART_SetConfig+0x2d4>)
 800ab3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab40:	095b      	lsrs	r3, r3, #5
 800ab42:	f003 0207 	and.w	r2, r3, #7
 800ab46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4422      	add	r2, r4
 800ab4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab50:	e106      	b.n	800ad60 <UART_SetConfig+0x4d8>
 800ab52:	bf00      	nop
 800ab54:	40011000 	.word	0x40011000
 800ab58:	40011400 	.word	0x40011400
 800ab5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab64:	2200      	movs	r2, #0
 800ab66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ab6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ab6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ab72:	4642      	mov	r2, r8
 800ab74:	464b      	mov	r3, r9
 800ab76:	1891      	adds	r1, r2, r2
 800ab78:	6239      	str	r1, [r7, #32]
 800ab7a:	415b      	adcs	r3, r3
 800ab7c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ab82:	4641      	mov	r1, r8
 800ab84:	1854      	adds	r4, r2, r1
 800ab86:	4649      	mov	r1, r9
 800ab88:	eb43 0501 	adc.w	r5, r3, r1
 800ab8c:	f04f 0200 	mov.w	r2, #0
 800ab90:	f04f 0300 	mov.w	r3, #0
 800ab94:	00eb      	lsls	r3, r5, #3
 800ab96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab9a:	00e2      	lsls	r2, r4, #3
 800ab9c:	4614      	mov	r4, r2
 800ab9e:	461d      	mov	r5, r3
 800aba0:	4643      	mov	r3, r8
 800aba2:	18e3      	adds	r3, r4, r3
 800aba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aba8:	464b      	mov	r3, r9
 800abaa:	eb45 0303 	adc.w	r3, r5, r3
 800abae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800abb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800abbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800abc2:	f04f 0200 	mov.w	r2, #0
 800abc6:	f04f 0300 	mov.w	r3, #0
 800abca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800abce:	4629      	mov	r1, r5
 800abd0:	008b      	lsls	r3, r1, #2
 800abd2:	4621      	mov	r1, r4
 800abd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abd8:	4621      	mov	r1, r4
 800abda:	008a      	lsls	r2, r1, #2
 800abdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800abe0:	f7f6 f968 	bl	8000eb4 <__aeabi_uldivmod>
 800abe4:	4602      	mov	r2, r0
 800abe6:	460b      	mov	r3, r1
 800abe8:	4b60      	ldr	r3, [pc, #384]	@ (800ad6c <UART_SetConfig+0x4e4>)
 800abea:	fba3 2302 	umull	r2, r3, r3, r2
 800abee:	095b      	lsrs	r3, r3, #5
 800abf0:	011c      	lsls	r4, r3, #4
 800abf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800abf6:	2200      	movs	r2, #0
 800abf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800abfc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ac00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ac04:	4642      	mov	r2, r8
 800ac06:	464b      	mov	r3, r9
 800ac08:	1891      	adds	r1, r2, r2
 800ac0a:	61b9      	str	r1, [r7, #24]
 800ac0c:	415b      	adcs	r3, r3
 800ac0e:	61fb      	str	r3, [r7, #28]
 800ac10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac14:	4641      	mov	r1, r8
 800ac16:	1851      	adds	r1, r2, r1
 800ac18:	6139      	str	r1, [r7, #16]
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	414b      	adcs	r3, r1
 800ac1e:	617b      	str	r3, [r7, #20]
 800ac20:	f04f 0200 	mov.w	r2, #0
 800ac24:	f04f 0300 	mov.w	r3, #0
 800ac28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac2c:	4659      	mov	r1, fp
 800ac2e:	00cb      	lsls	r3, r1, #3
 800ac30:	4651      	mov	r1, sl
 800ac32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac36:	4651      	mov	r1, sl
 800ac38:	00ca      	lsls	r2, r1, #3
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	4603      	mov	r3, r0
 800ac40:	4642      	mov	r2, r8
 800ac42:	189b      	adds	r3, r3, r2
 800ac44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac48:	464b      	mov	r3, r9
 800ac4a:	460a      	mov	r2, r1
 800ac4c:	eb42 0303 	adc.w	r3, r2, r3
 800ac50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ac60:	f04f 0200 	mov.w	r2, #0
 800ac64:	f04f 0300 	mov.w	r3, #0
 800ac68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	008b      	lsls	r3, r1, #2
 800ac70:	4641      	mov	r1, r8
 800ac72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac76:	4641      	mov	r1, r8
 800ac78:	008a      	lsls	r2, r1, #2
 800ac7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ac7e:	f7f6 f919 	bl	8000eb4 <__aeabi_uldivmod>
 800ac82:	4602      	mov	r2, r0
 800ac84:	460b      	mov	r3, r1
 800ac86:	4611      	mov	r1, r2
 800ac88:	4b38      	ldr	r3, [pc, #224]	@ (800ad6c <UART_SetConfig+0x4e4>)
 800ac8a:	fba3 2301 	umull	r2, r3, r3, r1
 800ac8e:	095b      	lsrs	r3, r3, #5
 800ac90:	2264      	movs	r2, #100	@ 0x64
 800ac92:	fb02 f303 	mul.w	r3, r2, r3
 800ac96:	1acb      	subs	r3, r1, r3
 800ac98:	011b      	lsls	r3, r3, #4
 800ac9a:	3332      	adds	r3, #50	@ 0x32
 800ac9c:	4a33      	ldr	r2, [pc, #204]	@ (800ad6c <UART_SetConfig+0x4e4>)
 800ac9e:	fba2 2303 	umull	r2, r3, r2, r3
 800aca2:	095b      	lsrs	r3, r3, #5
 800aca4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aca8:	441c      	add	r4, r3
 800acaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800acae:	2200      	movs	r2, #0
 800acb0:	673b      	str	r3, [r7, #112]	@ 0x70
 800acb2:	677a      	str	r2, [r7, #116]	@ 0x74
 800acb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800acb8:	4642      	mov	r2, r8
 800acba:	464b      	mov	r3, r9
 800acbc:	1891      	adds	r1, r2, r2
 800acbe:	60b9      	str	r1, [r7, #8]
 800acc0:	415b      	adcs	r3, r3
 800acc2:	60fb      	str	r3, [r7, #12]
 800acc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800acc8:	4641      	mov	r1, r8
 800acca:	1851      	adds	r1, r2, r1
 800accc:	6039      	str	r1, [r7, #0]
 800acce:	4649      	mov	r1, r9
 800acd0:	414b      	adcs	r3, r1
 800acd2:	607b      	str	r3, [r7, #4]
 800acd4:	f04f 0200 	mov.w	r2, #0
 800acd8:	f04f 0300 	mov.w	r3, #0
 800acdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ace0:	4659      	mov	r1, fp
 800ace2:	00cb      	lsls	r3, r1, #3
 800ace4:	4651      	mov	r1, sl
 800ace6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800acea:	4651      	mov	r1, sl
 800acec:	00ca      	lsls	r2, r1, #3
 800acee:	4610      	mov	r0, r2
 800acf0:	4619      	mov	r1, r3
 800acf2:	4603      	mov	r3, r0
 800acf4:	4642      	mov	r2, r8
 800acf6:	189b      	adds	r3, r3, r2
 800acf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acfa:	464b      	mov	r3, r9
 800acfc:	460a      	mov	r2, r1
 800acfe:	eb42 0303 	adc.w	r3, r2, r3
 800ad02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ad04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad0e:	667a      	str	r2, [r7, #100]	@ 0x64
 800ad10:	f04f 0200 	mov.w	r2, #0
 800ad14:	f04f 0300 	mov.w	r3, #0
 800ad18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ad1c:	4649      	mov	r1, r9
 800ad1e:	008b      	lsls	r3, r1, #2
 800ad20:	4641      	mov	r1, r8
 800ad22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad26:	4641      	mov	r1, r8
 800ad28:	008a      	lsls	r2, r1, #2
 800ad2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ad2e:	f7f6 f8c1 	bl	8000eb4 <__aeabi_uldivmod>
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	4b0d      	ldr	r3, [pc, #52]	@ (800ad6c <UART_SetConfig+0x4e4>)
 800ad38:	fba3 1302 	umull	r1, r3, r3, r2
 800ad3c:	095b      	lsrs	r3, r3, #5
 800ad3e:	2164      	movs	r1, #100	@ 0x64
 800ad40:	fb01 f303 	mul.w	r3, r1, r3
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	011b      	lsls	r3, r3, #4
 800ad48:	3332      	adds	r3, #50	@ 0x32
 800ad4a:	4a08      	ldr	r2, [pc, #32]	@ (800ad6c <UART_SetConfig+0x4e4>)
 800ad4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad50:	095b      	lsrs	r3, r3, #5
 800ad52:	f003 020f 	and.w	r2, r3, #15
 800ad56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4422      	add	r2, r4
 800ad5e:	609a      	str	r2, [r3, #8]
}
 800ad60:	bf00      	nop
 800ad62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ad66:	46bd      	mov	sp, r7
 800ad68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad6c:	51eb851f 	.word	0x51eb851f

0800ad70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad70:	b084      	sub	sp, #16
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b084      	sub	sp, #16
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	f107 001c 	add.w	r0, r7, #28
 800ad7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d123      	bne.n	800add2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800ad9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800adb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d105      	bne.n	800adc6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 faa0 	bl	800b30c <USB_CoreReset>
 800adcc:	4603      	mov	r3, r0
 800adce:	73fb      	strb	r3, [r7, #15]
 800add0:	e01b      	b.n	800ae0a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fa94 	bl	800b30c <USB_CoreReset>
 800ade4:	4603      	mov	r3, r0
 800ade6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ade8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800adec:	2b00      	cmp	r3, #0
 800adee:	d106      	bne.n	800adfe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	639a      	str	r2, [r3, #56]	@ 0x38
 800adfc:	e005      	b.n	800ae0a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ae0a:	7fbb      	ldrb	r3, [r7, #30]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d10b      	bne.n	800ae28 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	f043 0206 	orr.w	r2, r3, #6
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f043 0220 	orr.w	r2, r3, #32
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ae28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3710      	adds	r7, #16
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae34:	b004      	add	sp, #16
 800ae36:	4770      	bx	lr

0800ae38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f023 0201 	bic.w	r2, r3, #1
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	370c      	adds	r7, #12
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr

0800ae5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b084      	sub	sp, #16
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
 800ae62:	460b      	mov	r3, r1
 800ae64:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ae66:	2300      	movs	r3, #0
 800ae68:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ae76:	78fb      	ldrb	r3, [r7, #3]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d115      	bne.n	800aea8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ae88:	200a      	movs	r0, #10
 800ae8a:	f7fc f8dd 	bl	8007048 <HAL_Delay>
      ms += 10U;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	330a      	adds	r3, #10
 800ae92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fa2b 	bl	800b2f0 <USB_GetMode>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d01e      	beq.n	800aede <USB_SetCurrentMode+0x84>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2bc7      	cmp	r3, #199	@ 0xc7
 800aea4:	d9f0      	bls.n	800ae88 <USB_SetCurrentMode+0x2e>
 800aea6:	e01a      	b.n	800aede <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aea8:	78fb      	ldrb	r3, [r7, #3]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d115      	bne.n	800aeda <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aeba:	200a      	movs	r0, #10
 800aebc:	f7fc f8c4 	bl	8007048 <HAL_Delay>
      ms += 10U;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	330a      	adds	r3, #10
 800aec4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fa12 	bl	800b2f0 <USB_GetMode>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d005      	beq.n	800aede <USB_SetCurrentMode+0x84>
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2bc7      	cmp	r3, #199	@ 0xc7
 800aed6:	d9f0      	bls.n	800aeba <USB_SetCurrentMode+0x60>
 800aed8:	e001      	b.n	800aede <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e005      	b.n	800aeea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2bc8      	cmp	r3, #200	@ 0xc8
 800aee2:	d101      	bne.n	800aee8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	e000      	b.n	800aeea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
	...

0800aef4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aef4:	b084      	sub	sp, #16
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b086      	sub	sp, #24
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
 800aefe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800af02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800af06:	2300      	movs	r3, #0
 800af08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800af0e:	2300      	movs	r3, #0
 800af10:	613b      	str	r3, [r7, #16]
 800af12:	e009      	b.n	800af28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	3340      	adds	r3, #64	@ 0x40
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	2200      	movs	r2, #0
 800af20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	3301      	adds	r3, #1
 800af26:	613b      	str	r3, [r7, #16]
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	2b0e      	cmp	r3, #14
 800af2c:	d9f2      	bls.n	800af14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800af2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800af32:	2b00      	cmp	r3, #0
 800af34:	d11c      	bne.n	800af70 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800af44:	f043 0302 	orr.w	r3, r3, #2
 800af48:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af4e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af5a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af66:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	639a      	str	r2, [r3, #56]	@ 0x38
 800af6e:	e00b      	b.n	800af88 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af74:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af80:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af8e:	461a      	mov	r2, r3
 800af90:	2300      	movs	r3, #0
 800af92:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d10d      	bne.n	800afb8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800af9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d104      	bne.n	800afae <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800afa4:	2100      	movs	r1, #0
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f968 	bl	800b27c <USB_SetDevSpeed>
 800afac:	e008      	b.n	800afc0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800afae:	2101      	movs	r1, #1
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f963 	bl	800b27c <USB_SetDevSpeed>
 800afb6:	e003      	b.n	800afc0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800afb8:	2103      	movs	r1, #3
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f95e 	bl	800b27c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800afc0:	2110      	movs	r1, #16
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f8fa 	bl	800b1bc <USB_FlushTxFifo>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d001      	beq.n	800afd2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f924 	bl	800b220 <USB_FlushRxFifo>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d001      	beq.n	800afe2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afe8:	461a      	mov	r2, r3
 800afea:	2300      	movs	r3, #0
 800afec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aff4:	461a      	mov	r2, r3
 800aff6:	2300      	movs	r3, #0
 800aff8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b000:	461a      	mov	r2, r3
 800b002:	2300      	movs	r3, #0
 800b004:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b006:	2300      	movs	r3, #0
 800b008:	613b      	str	r3, [r7, #16]
 800b00a:	e043      	b.n	800b094 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	015a      	lsls	r2, r3, #5
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	4413      	add	r3, r2
 800b014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b01e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b022:	d118      	bne.n	800b056 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10a      	bne.n	800b040 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	015a      	lsls	r2, r3, #5
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	4413      	add	r3, r2
 800b032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b036:	461a      	mov	r2, r3
 800b038:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b03c:	6013      	str	r3, [r2, #0]
 800b03e:	e013      	b.n	800b068 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	015a      	lsls	r2, r3, #5
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	4413      	add	r3, r2
 800b048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b04c:	461a      	mov	r2, r3
 800b04e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b052:	6013      	str	r3, [r2, #0]
 800b054:	e008      	b.n	800b068 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	015a      	lsls	r2, r3, #5
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	4413      	add	r3, r2
 800b05e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b062:	461a      	mov	r2, r3
 800b064:	2300      	movs	r3, #0
 800b066:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	015a      	lsls	r2, r3, #5
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4413      	add	r3, r2
 800b070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b074:	461a      	mov	r2, r3
 800b076:	2300      	movs	r3, #0
 800b078:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	015a      	lsls	r2, r3, #5
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	4413      	add	r3, r2
 800b082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b086:	461a      	mov	r2, r3
 800b088:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b08c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	3301      	adds	r3, #1
 800b092:	613b      	str	r3, [r7, #16]
 800b094:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b098:	461a      	mov	r2, r3
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d3b5      	bcc.n	800b00c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	613b      	str	r3, [r7, #16]
 800b0a4:	e043      	b.n	800b12e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	015a      	lsls	r2, r3, #5
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b0b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0bc:	d118      	bne.n	800b0f0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d10a      	bne.n	800b0da <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	015a      	lsls	r2, r3, #5
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b0d6:	6013      	str	r3, [r2, #0]
 800b0d8:	e013      	b.n	800b102 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	015a      	lsls	r2, r3, #5
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b0ec:	6013      	str	r3, [r2, #0]
 800b0ee:	e008      	b.n	800b102 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	2300      	movs	r3, #0
 800b100:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	015a      	lsls	r2, r3, #5
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	4413      	add	r3, r2
 800b10a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b10e:	461a      	mov	r2, r3
 800b110:	2300      	movs	r3, #0
 800b112:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b120:	461a      	mov	r2, r3
 800b122:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b126:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	3301      	adds	r3, #1
 800b12c:	613b      	str	r3, [r7, #16]
 800b12e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b132:	461a      	mov	r2, r3
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	4293      	cmp	r3, r2
 800b138:	d3b5      	bcc.n	800b0a6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b14c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b15a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b15c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b160:	2b00      	cmp	r3, #0
 800b162:	d105      	bne.n	800b170 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	699b      	ldr	r3, [r3, #24]
 800b168:	f043 0210 	orr.w	r2, r3, #16
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	699a      	ldr	r2, [r3, #24]
 800b174:	4b10      	ldr	r3, [pc, #64]	@ (800b1b8 <USB_DevInit+0x2c4>)
 800b176:	4313      	orrs	r3, r2
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b17c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b180:	2b00      	cmp	r3, #0
 800b182:	d005      	beq.n	800b190 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	699b      	ldr	r3, [r3, #24]
 800b188:	f043 0208 	orr.w	r2, r3, #8
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b190:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b194:	2b01      	cmp	r3, #1
 800b196:	d107      	bne.n	800b1a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	699b      	ldr	r3, [r3, #24]
 800b19c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b1a0:	f043 0304 	orr.w	r3, r3, #4
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3718      	adds	r7, #24
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b1b4:	b004      	add	sp, #16
 800b1b6:	4770      	bx	lr
 800b1b8:	803c3800 	.word	0x803c3800

0800b1bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b1d6:	d901      	bls.n	800b1dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b1d8:	2303      	movs	r3, #3
 800b1da:	e01b      	b.n	800b214 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	daf2      	bge.n	800b1ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	019b      	lsls	r3, r3, #6
 800b1ec:	f043 0220 	orr.w	r2, r3, #32
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b200:	d901      	bls.n	800b206 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b202:	2303      	movs	r3, #3
 800b204:	e006      	b.n	800b214 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	f003 0320 	and.w	r3, r3, #32
 800b20e:	2b20      	cmp	r3, #32
 800b210:	d0f0      	beq.n	800b1f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3714      	adds	r7, #20
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b228:	2300      	movs	r3, #0
 800b22a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	3301      	adds	r3, #1
 800b230:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b238:	d901      	bls.n	800b23e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b23a:	2303      	movs	r3, #3
 800b23c:	e018      	b.n	800b270 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	2b00      	cmp	r3, #0
 800b244:	daf2      	bge.n	800b22c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b246:	2300      	movs	r3, #0
 800b248:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2210      	movs	r2, #16
 800b24e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	3301      	adds	r3, #1
 800b254:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b25c:	d901      	bls.n	800b262 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b25e:	2303      	movs	r3, #3
 800b260:	e006      	b.n	800b270 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	f003 0310 	and.w	r3, r3, #16
 800b26a:	2b10      	cmp	r3, #16
 800b26c:	d0f0      	beq.n	800b250 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	78fb      	ldrb	r3, [r7, #3]
 800b296:	68f9      	ldr	r1, [r7, #12]
 800b298:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b29c:	4313      	orrs	r3, r2
 800b29e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b2c8:	f023 0303 	bic.w	r3, r3, #3
 800b2cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b2dc:	f043 0302 	orr.w	r3, r3, #2
 800b2e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3714      	adds	r7, #20
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	695b      	ldr	r3, [r3, #20]
 800b2fc:	f003 0301 	and.w	r3, r3, #1
}
 800b300:	4618      	mov	r0, r3
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b314:	2300      	movs	r3, #0
 800b316:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	3301      	adds	r3, #1
 800b31c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b324:	d901      	bls.n	800b32a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b326:	2303      	movs	r3, #3
 800b328:	e01b      	b.n	800b362 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	daf2      	bge.n	800b318 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b332:	2300      	movs	r3, #0
 800b334:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	691b      	ldr	r3, [r3, #16]
 800b33a:	f043 0201 	orr.w	r2, r3, #1
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	3301      	adds	r3, #1
 800b346:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b34e:	d901      	bls.n	800b354 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b350:	2303      	movs	r3, #3
 800b352:	e006      	b.n	800b362 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	f003 0301 	and.w	r3, r3, #1
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d0f0      	beq.n	800b342 <USB_CoreReset+0x36>

  return HAL_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3714      	adds	r7, #20
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr

0800b36e <__cvt>:
 800b36e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b372:	ec57 6b10 	vmov	r6, r7, d0
 800b376:	2f00      	cmp	r7, #0
 800b378:	460c      	mov	r4, r1
 800b37a:	4619      	mov	r1, r3
 800b37c:	463b      	mov	r3, r7
 800b37e:	bfbb      	ittet	lt
 800b380:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b384:	461f      	movlt	r7, r3
 800b386:	2300      	movge	r3, #0
 800b388:	232d      	movlt	r3, #45	@ 0x2d
 800b38a:	700b      	strb	r3, [r1, #0]
 800b38c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b38e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b392:	4691      	mov	r9, r2
 800b394:	f023 0820 	bic.w	r8, r3, #32
 800b398:	bfbc      	itt	lt
 800b39a:	4632      	movlt	r2, r6
 800b39c:	4616      	movlt	r6, r2
 800b39e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b3a2:	d005      	beq.n	800b3b0 <__cvt+0x42>
 800b3a4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b3a8:	d100      	bne.n	800b3ac <__cvt+0x3e>
 800b3aa:	3401      	adds	r4, #1
 800b3ac:	2102      	movs	r1, #2
 800b3ae:	e000      	b.n	800b3b2 <__cvt+0x44>
 800b3b0:	2103      	movs	r1, #3
 800b3b2:	ab03      	add	r3, sp, #12
 800b3b4:	9301      	str	r3, [sp, #4]
 800b3b6:	ab02      	add	r3, sp, #8
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	ec47 6b10 	vmov	d0, r6, r7
 800b3be:	4653      	mov	r3, sl
 800b3c0:	4622      	mov	r2, r4
 800b3c2:	f001 f881 	bl	800c4c8 <_dtoa_r>
 800b3c6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	d119      	bne.n	800b402 <__cvt+0x94>
 800b3ce:	f019 0f01 	tst.w	r9, #1
 800b3d2:	d00e      	beq.n	800b3f2 <__cvt+0x84>
 800b3d4:	eb00 0904 	add.w	r9, r0, r4
 800b3d8:	2200      	movs	r2, #0
 800b3da:	2300      	movs	r3, #0
 800b3dc:	4630      	mov	r0, r6
 800b3de:	4639      	mov	r1, r7
 800b3e0:	f7f5 fb7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3e4:	b108      	cbz	r0, 800b3ea <__cvt+0x7c>
 800b3e6:	f8cd 900c 	str.w	r9, [sp, #12]
 800b3ea:	2230      	movs	r2, #48	@ 0x30
 800b3ec:	9b03      	ldr	r3, [sp, #12]
 800b3ee:	454b      	cmp	r3, r9
 800b3f0:	d31e      	bcc.n	800b430 <__cvt+0xc2>
 800b3f2:	9b03      	ldr	r3, [sp, #12]
 800b3f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3f6:	1b5b      	subs	r3, r3, r5
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	6013      	str	r3, [r2, #0]
 800b3fc:	b004      	add	sp, #16
 800b3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b402:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b406:	eb00 0904 	add.w	r9, r0, r4
 800b40a:	d1e5      	bne.n	800b3d8 <__cvt+0x6a>
 800b40c:	7803      	ldrb	r3, [r0, #0]
 800b40e:	2b30      	cmp	r3, #48	@ 0x30
 800b410:	d10a      	bne.n	800b428 <__cvt+0xba>
 800b412:	2200      	movs	r2, #0
 800b414:	2300      	movs	r3, #0
 800b416:	4630      	mov	r0, r6
 800b418:	4639      	mov	r1, r7
 800b41a:	f7f5 fb5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b41e:	b918      	cbnz	r0, 800b428 <__cvt+0xba>
 800b420:	f1c4 0401 	rsb	r4, r4, #1
 800b424:	f8ca 4000 	str.w	r4, [sl]
 800b428:	f8da 3000 	ldr.w	r3, [sl]
 800b42c:	4499      	add	r9, r3
 800b42e:	e7d3      	b.n	800b3d8 <__cvt+0x6a>
 800b430:	1c59      	adds	r1, r3, #1
 800b432:	9103      	str	r1, [sp, #12]
 800b434:	701a      	strb	r2, [r3, #0]
 800b436:	e7d9      	b.n	800b3ec <__cvt+0x7e>

0800b438 <__exponent>:
 800b438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b43a:	2900      	cmp	r1, #0
 800b43c:	bfba      	itte	lt
 800b43e:	4249      	neglt	r1, r1
 800b440:	232d      	movlt	r3, #45	@ 0x2d
 800b442:	232b      	movge	r3, #43	@ 0x2b
 800b444:	2909      	cmp	r1, #9
 800b446:	7002      	strb	r2, [r0, #0]
 800b448:	7043      	strb	r3, [r0, #1]
 800b44a:	dd29      	ble.n	800b4a0 <__exponent+0x68>
 800b44c:	f10d 0307 	add.w	r3, sp, #7
 800b450:	461d      	mov	r5, r3
 800b452:	270a      	movs	r7, #10
 800b454:	461a      	mov	r2, r3
 800b456:	fbb1 f6f7 	udiv	r6, r1, r7
 800b45a:	fb07 1416 	mls	r4, r7, r6, r1
 800b45e:	3430      	adds	r4, #48	@ 0x30
 800b460:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b464:	460c      	mov	r4, r1
 800b466:	2c63      	cmp	r4, #99	@ 0x63
 800b468:	f103 33ff 	add.w	r3, r3, #4294967295
 800b46c:	4631      	mov	r1, r6
 800b46e:	dcf1      	bgt.n	800b454 <__exponent+0x1c>
 800b470:	3130      	adds	r1, #48	@ 0x30
 800b472:	1e94      	subs	r4, r2, #2
 800b474:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b478:	1c41      	adds	r1, r0, #1
 800b47a:	4623      	mov	r3, r4
 800b47c:	42ab      	cmp	r3, r5
 800b47e:	d30a      	bcc.n	800b496 <__exponent+0x5e>
 800b480:	f10d 0309 	add.w	r3, sp, #9
 800b484:	1a9b      	subs	r3, r3, r2
 800b486:	42ac      	cmp	r4, r5
 800b488:	bf88      	it	hi
 800b48a:	2300      	movhi	r3, #0
 800b48c:	3302      	adds	r3, #2
 800b48e:	4403      	add	r3, r0
 800b490:	1a18      	subs	r0, r3, r0
 800b492:	b003      	add	sp, #12
 800b494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b496:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b49a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b49e:	e7ed      	b.n	800b47c <__exponent+0x44>
 800b4a0:	2330      	movs	r3, #48	@ 0x30
 800b4a2:	3130      	adds	r1, #48	@ 0x30
 800b4a4:	7083      	strb	r3, [r0, #2]
 800b4a6:	70c1      	strb	r1, [r0, #3]
 800b4a8:	1d03      	adds	r3, r0, #4
 800b4aa:	e7f1      	b.n	800b490 <__exponent+0x58>

0800b4ac <_printf_float>:
 800b4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b0:	b08d      	sub	sp, #52	@ 0x34
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b4b8:	4616      	mov	r6, r2
 800b4ba:	461f      	mov	r7, r3
 800b4bc:	4605      	mov	r5, r0
 800b4be:	f000 fefb 	bl	800c2b8 <_localeconv_r>
 800b4c2:	6803      	ldr	r3, [r0, #0]
 800b4c4:	9304      	str	r3, [sp, #16]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7f4 feda 	bl	8000280 <strlen>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b4d4:	9005      	str	r0, [sp, #20]
 800b4d6:	3307      	adds	r3, #7
 800b4d8:	f023 0307 	bic.w	r3, r3, #7
 800b4dc:	f103 0208 	add.w	r2, r3, #8
 800b4e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b4e4:	f8d4 b000 	ldr.w	fp, [r4]
 800b4e8:	f8c8 2000 	str.w	r2, [r8]
 800b4ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b4f4:	9307      	str	r3, [sp, #28]
 800b4f6:	f8cd 8018 	str.w	r8, [sp, #24]
 800b4fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b4fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b502:	4b9c      	ldr	r3, [pc, #624]	@ (800b774 <_printf_float+0x2c8>)
 800b504:	f04f 32ff 	mov.w	r2, #4294967295
 800b508:	f7f5 fb18 	bl	8000b3c <__aeabi_dcmpun>
 800b50c:	bb70      	cbnz	r0, 800b56c <_printf_float+0xc0>
 800b50e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b512:	4b98      	ldr	r3, [pc, #608]	@ (800b774 <_printf_float+0x2c8>)
 800b514:	f04f 32ff 	mov.w	r2, #4294967295
 800b518:	f7f5 faf2 	bl	8000b00 <__aeabi_dcmple>
 800b51c:	bb30      	cbnz	r0, 800b56c <_printf_float+0xc0>
 800b51e:	2200      	movs	r2, #0
 800b520:	2300      	movs	r3, #0
 800b522:	4640      	mov	r0, r8
 800b524:	4649      	mov	r1, r9
 800b526:	f7f5 fae1 	bl	8000aec <__aeabi_dcmplt>
 800b52a:	b110      	cbz	r0, 800b532 <_printf_float+0x86>
 800b52c:	232d      	movs	r3, #45	@ 0x2d
 800b52e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b532:	4a91      	ldr	r2, [pc, #580]	@ (800b778 <_printf_float+0x2cc>)
 800b534:	4b91      	ldr	r3, [pc, #580]	@ (800b77c <_printf_float+0x2d0>)
 800b536:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b53a:	bf8c      	ite	hi
 800b53c:	4690      	movhi	r8, r2
 800b53e:	4698      	movls	r8, r3
 800b540:	2303      	movs	r3, #3
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	f02b 0304 	bic.w	r3, fp, #4
 800b548:	6023      	str	r3, [r4, #0]
 800b54a:	f04f 0900 	mov.w	r9, #0
 800b54e:	9700      	str	r7, [sp, #0]
 800b550:	4633      	mov	r3, r6
 800b552:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b554:	4621      	mov	r1, r4
 800b556:	4628      	mov	r0, r5
 800b558:	f000 f9d2 	bl	800b900 <_printf_common>
 800b55c:	3001      	adds	r0, #1
 800b55e:	f040 808d 	bne.w	800b67c <_printf_float+0x1d0>
 800b562:	f04f 30ff 	mov.w	r0, #4294967295
 800b566:	b00d      	add	sp, #52	@ 0x34
 800b568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56c:	4642      	mov	r2, r8
 800b56e:	464b      	mov	r3, r9
 800b570:	4640      	mov	r0, r8
 800b572:	4649      	mov	r1, r9
 800b574:	f7f5 fae2 	bl	8000b3c <__aeabi_dcmpun>
 800b578:	b140      	cbz	r0, 800b58c <_printf_float+0xe0>
 800b57a:	464b      	mov	r3, r9
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	bfbc      	itt	lt
 800b580:	232d      	movlt	r3, #45	@ 0x2d
 800b582:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b586:	4a7e      	ldr	r2, [pc, #504]	@ (800b780 <_printf_float+0x2d4>)
 800b588:	4b7e      	ldr	r3, [pc, #504]	@ (800b784 <_printf_float+0x2d8>)
 800b58a:	e7d4      	b.n	800b536 <_printf_float+0x8a>
 800b58c:	6863      	ldr	r3, [r4, #4]
 800b58e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b592:	9206      	str	r2, [sp, #24]
 800b594:	1c5a      	adds	r2, r3, #1
 800b596:	d13b      	bne.n	800b610 <_printf_float+0x164>
 800b598:	2306      	movs	r3, #6
 800b59a:	6063      	str	r3, [r4, #4]
 800b59c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	6022      	str	r2, [r4, #0]
 800b5a4:	9303      	str	r3, [sp, #12]
 800b5a6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b5a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b5ac:	ab09      	add	r3, sp, #36	@ 0x24
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	6861      	ldr	r1, [r4, #4]
 800b5b2:	ec49 8b10 	vmov	d0, r8, r9
 800b5b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	f7ff fed7 	bl	800b36e <__cvt>
 800b5c0:	9b06      	ldr	r3, [sp, #24]
 800b5c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b5c4:	2b47      	cmp	r3, #71	@ 0x47
 800b5c6:	4680      	mov	r8, r0
 800b5c8:	d129      	bne.n	800b61e <_printf_float+0x172>
 800b5ca:	1cc8      	adds	r0, r1, #3
 800b5cc:	db02      	blt.n	800b5d4 <_printf_float+0x128>
 800b5ce:	6863      	ldr	r3, [r4, #4]
 800b5d0:	4299      	cmp	r1, r3
 800b5d2:	dd41      	ble.n	800b658 <_printf_float+0x1ac>
 800b5d4:	f1aa 0a02 	sub.w	sl, sl, #2
 800b5d8:	fa5f fa8a 	uxtb.w	sl, sl
 800b5dc:	3901      	subs	r1, #1
 800b5de:	4652      	mov	r2, sl
 800b5e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b5e4:	9109      	str	r1, [sp, #36]	@ 0x24
 800b5e6:	f7ff ff27 	bl	800b438 <__exponent>
 800b5ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b5ec:	1813      	adds	r3, r2, r0
 800b5ee:	2a01      	cmp	r2, #1
 800b5f0:	4681      	mov	r9, r0
 800b5f2:	6123      	str	r3, [r4, #16]
 800b5f4:	dc02      	bgt.n	800b5fc <_printf_float+0x150>
 800b5f6:	6822      	ldr	r2, [r4, #0]
 800b5f8:	07d2      	lsls	r2, r2, #31
 800b5fa:	d501      	bpl.n	800b600 <_printf_float+0x154>
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	6123      	str	r3, [r4, #16]
 800b600:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b604:	2b00      	cmp	r3, #0
 800b606:	d0a2      	beq.n	800b54e <_printf_float+0xa2>
 800b608:	232d      	movs	r3, #45	@ 0x2d
 800b60a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b60e:	e79e      	b.n	800b54e <_printf_float+0xa2>
 800b610:	9a06      	ldr	r2, [sp, #24]
 800b612:	2a47      	cmp	r2, #71	@ 0x47
 800b614:	d1c2      	bne.n	800b59c <_printf_float+0xf0>
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1c0      	bne.n	800b59c <_printf_float+0xf0>
 800b61a:	2301      	movs	r3, #1
 800b61c:	e7bd      	b.n	800b59a <_printf_float+0xee>
 800b61e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b622:	d9db      	bls.n	800b5dc <_printf_float+0x130>
 800b624:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b628:	d118      	bne.n	800b65c <_printf_float+0x1b0>
 800b62a:	2900      	cmp	r1, #0
 800b62c:	6863      	ldr	r3, [r4, #4]
 800b62e:	dd0b      	ble.n	800b648 <_printf_float+0x19c>
 800b630:	6121      	str	r1, [r4, #16]
 800b632:	b913      	cbnz	r3, 800b63a <_printf_float+0x18e>
 800b634:	6822      	ldr	r2, [r4, #0]
 800b636:	07d0      	lsls	r0, r2, #31
 800b638:	d502      	bpl.n	800b640 <_printf_float+0x194>
 800b63a:	3301      	adds	r3, #1
 800b63c:	440b      	add	r3, r1
 800b63e:	6123      	str	r3, [r4, #16]
 800b640:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b642:	f04f 0900 	mov.w	r9, #0
 800b646:	e7db      	b.n	800b600 <_printf_float+0x154>
 800b648:	b913      	cbnz	r3, 800b650 <_printf_float+0x1a4>
 800b64a:	6822      	ldr	r2, [r4, #0]
 800b64c:	07d2      	lsls	r2, r2, #31
 800b64e:	d501      	bpl.n	800b654 <_printf_float+0x1a8>
 800b650:	3302      	adds	r3, #2
 800b652:	e7f4      	b.n	800b63e <_printf_float+0x192>
 800b654:	2301      	movs	r3, #1
 800b656:	e7f2      	b.n	800b63e <_printf_float+0x192>
 800b658:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b65c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b65e:	4299      	cmp	r1, r3
 800b660:	db05      	blt.n	800b66e <_printf_float+0x1c2>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	6121      	str	r1, [r4, #16]
 800b666:	07d8      	lsls	r0, r3, #31
 800b668:	d5ea      	bpl.n	800b640 <_printf_float+0x194>
 800b66a:	1c4b      	adds	r3, r1, #1
 800b66c:	e7e7      	b.n	800b63e <_printf_float+0x192>
 800b66e:	2900      	cmp	r1, #0
 800b670:	bfd4      	ite	le
 800b672:	f1c1 0202 	rsble	r2, r1, #2
 800b676:	2201      	movgt	r2, #1
 800b678:	4413      	add	r3, r2
 800b67a:	e7e0      	b.n	800b63e <_printf_float+0x192>
 800b67c:	6823      	ldr	r3, [r4, #0]
 800b67e:	055a      	lsls	r2, r3, #21
 800b680:	d407      	bmi.n	800b692 <_printf_float+0x1e6>
 800b682:	6923      	ldr	r3, [r4, #16]
 800b684:	4642      	mov	r2, r8
 800b686:	4631      	mov	r1, r6
 800b688:	4628      	mov	r0, r5
 800b68a:	47b8      	blx	r7
 800b68c:	3001      	adds	r0, #1
 800b68e:	d12b      	bne.n	800b6e8 <_printf_float+0x23c>
 800b690:	e767      	b.n	800b562 <_printf_float+0xb6>
 800b692:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b696:	f240 80dd 	bls.w	800b854 <_printf_float+0x3a8>
 800b69a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b69e:	2200      	movs	r2, #0
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	f7f5 fa19 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d033      	beq.n	800b712 <_printf_float+0x266>
 800b6aa:	4a37      	ldr	r2, [pc, #220]	@ (800b788 <_printf_float+0x2dc>)
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	4631      	mov	r1, r6
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	47b8      	blx	r7
 800b6b4:	3001      	adds	r0, #1
 800b6b6:	f43f af54 	beq.w	800b562 <_printf_float+0xb6>
 800b6ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b6be:	4543      	cmp	r3, r8
 800b6c0:	db02      	blt.n	800b6c8 <_printf_float+0x21c>
 800b6c2:	6823      	ldr	r3, [r4, #0]
 800b6c4:	07d8      	lsls	r0, r3, #31
 800b6c6:	d50f      	bpl.n	800b6e8 <_printf_float+0x23c>
 800b6c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6cc:	4631      	mov	r1, r6
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	47b8      	blx	r7
 800b6d2:	3001      	adds	r0, #1
 800b6d4:	f43f af45 	beq.w	800b562 <_printf_float+0xb6>
 800b6d8:	f04f 0900 	mov.w	r9, #0
 800b6dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6e0:	f104 0a1a 	add.w	sl, r4, #26
 800b6e4:	45c8      	cmp	r8, r9
 800b6e6:	dc09      	bgt.n	800b6fc <_printf_float+0x250>
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	079b      	lsls	r3, r3, #30
 800b6ec:	f100 8103 	bmi.w	800b8f6 <_printf_float+0x44a>
 800b6f0:	68e0      	ldr	r0, [r4, #12]
 800b6f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6f4:	4298      	cmp	r0, r3
 800b6f6:	bfb8      	it	lt
 800b6f8:	4618      	movlt	r0, r3
 800b6fa:	e734      	b.n	800b566 <_printf_float+0xba>
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	4652      	mov	r2, sl
 800b700:	4631      	mov	r1, r6
 800b702:	4628      	mov	r0, r5
 800b704:	47b8      	blx	r7
 800b706:	3001      	adds	r0, #1
 800b708:	f43f af2b 	beq.w	800b562 <_printf_float+0xb6>
 800b70c:	f109 0901 	add.w	r9, r9, #1
 800b710:	e7e8      	b.n	800b6e4 <_printf_float+0x238>
 800b712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b714:	2b00      	cmp	r3, #0
 800b716:	dc39      	bgt.n	800b78c <_printf_float+0x2e0>
 800b718:	4a1b      	ldr	r2, [pc, #108]	@ (800b788 <_printf_float+0x2dc>)
 800b71a:	2301      	movs	r3, #1
 800b71c:	4631      	mov	r1, r6
 800b71e:	4628      	mov	r0, r5
 800b720:	47b8      	blx	r7
 800b722:	3001      	adds	r0, #1
 800b724:	f43f af1d 	beq.w	800b562 <_printf_float+0xb6>
 800b728:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b72c:	ea59 0303 	orrs.w	r3, r9, r3
 800b730:	d102      	bne.n	800b738 <_printf_float+0x28c>
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	07d9      	lsls	r1, r3, #31
 800b736:	d5d7      	bpl.n	800b6e8 <_printf_float+0x23c>
 800b738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b73c:	4631      	mov	r1, r6
 800b73e:	4628      	mov	r0, r5
 800b740:	47b8      	blx	r7
 800b742:	3001      	adds	r0, #1
 800b744:	f43f af0d 	beq.w	800b562 <_printf_float+0xb6>
 800b748:	f04f 0a00 	mov.w	sl, #0
 800b74c:	f104 0b1a 	add.w	fp, r4, #26
 800b750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b752:	425b      	negs	r3, r3
 800b754:	4553      	cmp	r3, sl
 800b756:	dc01      	bgt.n	800b75c <_printf_float+0x2b0>
 800b758:	464b      	mov	r3, r9
 800b75a:	e793      	b.n	800b684 <_printf_float+0x1d8>
 800b75c:	2301      	movs	r3, #1
 800b75e:	465a      	mov	r2, fp
 800b760:	4631      	mov	r1, r6
 800b762:	4628      	mov	r0, r5
 800b764:	47b8      	blx	r7
 800b766:	3001      	adds	r0, #1
 800b768:	f43f aefb 	beq.w	800b562 <_printf_float+0xb6>
 800b76c:	f10a 0a01 	add.w	sl, sl, #1
 800b770:	e7ee      	b.n	800b750 <_printf_float+0x2a4>
 800b772:	bf00      	nop
 800b774:	7fefffff 	.word	0x7fefffff
 800b778:	080125e0 	.word	0x080125e0
 800b77c:	080125dc 	.word	0x080125dc
 800b780:	080125e8 	.word	0x080125e8
 800b784:	080125e4 	.word	0x080125e4
 800b788:	080125ec 	.word	0x080125ec
 800b78c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b78e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b792:	4553      	cmp	r3, sl
 800b794:	bfa8      	it	ge
 800b796:	4653      	movge	r3, sl
 800b798:	2b00      	cmp	r3, #0
 800b79a:	4699      	mov	r9, r3
 800b79c:	dc36      	bgt.n	800b80c <_printf_float+0x360>
 800b79e:	f04f 0b00 	mov.w	fp, #0
 800b7a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7a6:	f104 021a 	add.w	r2, r4, #26
 800b7aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b7ac:	9306      	str	r3, [sp, #24]
 800b7ae:	eba3 0309 	sub.w	r3, r3, r9
 800b7b2:	455b      	cmp	r3, fp
 800b7b4:	dc31      	bgt.n	800b81a <_printf_float+0x36e>
 800b7b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7b8:	459a      	cmp	sl, r3
 800b7ba:	dc3a      	bgt.n	800b832 <_printf_float+0x386>
 800b7bc:	6823      	ldr	r3, [r4, #0]
 800b7be:	07da      	lsls	r2, r3, #31
 800b7c0:	d437      	bmi.n	800b832 <_printf_float+0x386>
 800b7c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7c4:	ebaa 0903 	sub.w	r9, sl, r3
 800b7c8:	9b06      	ldr	r3, [sp, #24]
 800b7ca:	ebaa 0303 	sub.w	r3, sl, r3
 800b7ce:	4599      	cmp	r9, r3
 800b7d0:	bfa8      	it	ge
 800b7d2:	4699      	movge	r9, r3
 800b7d4:	f1b9 0f00 	cmp.w	r9, #0
 800b7d8:	dc33      	bgt.n	800b842 <_printf_float+0x396>
 800b7da:	f04f 0800 	mov.w	r8, #0
 800b7de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7e2:	f104 0b1a 	add.w	fp, r4, #26
 800b7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7e8:	ebaa 0303 	sub.w	r3, sl, r3
 800b7ec:	eba3 0309 	sub.w	r3, r3, r9
 800b7f0:	4543      	cmp	r3, r8
 800b7f2:	f77f af79 	ble.w	800b6e8 <_printf_float+0x23c>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	465a      	mov	r2, fp
 800b7fa:	4631      	mov	r1, r6
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	47b8      	blx	r7
 800b800:	3001      	adds	r0, #1
 800b802:	f43f aeae 	beq.w	800b562 <_printf_float+0xb6>
 800b806:	f108 0801 	add.w	r8, r8, #1
 800b80a:	e7ec      	b.n	800b7e6 <_printf_float+0x33a>
 800b80c:	4642      	mov	r2, r8
 800b80e:	4631      	mov	r1, r6
 800b810:	4628      	mov	r0, r5
 800b812:	47b8      	blx	r7
 800b814:	3001      	adds	r0, #1
 800b816:	d1c2      	bne.n	800b79e <_printf_float+0x2f2>
 800b818:	e6a3      	b.n	800b562 <_printf_float+0xb6>
 800b81a:	2301      	movs	r3, #1
 800b81c:	4631      	mov	r1, r6
 800b81e:	4628      	mov	r0, r5
 800b820:	9206      	str	r2, [sp, #24]
 800b822:	47b8      	blx	r7
 800b824:	3001      	adds	r0, #1
 800b826:	f43f ae9c 	beq.w	800b562 <_printf_float+0xb6>
 800b82a:	9a06      	ldr	r2, [sp, #24]
 800b82c:	f10b 0b01 	add.w	fp, fp, #1
 800b830:	e7bb      	b.n	800b7aa <_printf_float+0x2fe>
 800b832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b836:	4631      	mov	r1, r6
 800b838:	4628      	mov	r0, r5
 800b83a:	47b8      	blx	r7
 800b83c:	3001      	adds	r0, #1
 800b83e:	d1c0      	bne.n	800b7c2 <_printf_float+0x316>
 800b840:	e68f      	b.n	800b562 <_printf_float+0xb6>
 800b842:	9a06      	ldr	r2, [sp, #24]
 800b844:	464b      	mov	r3, r9
 800b846:	4442      	add	r2, r8
 800b848:	4631      	mov	r1, r6
 800b84a:	4628      	mov	r0, r5
 800b84c:	47b8      	blx	r7
 800b84e:	3001      	adds	r0, #1
 800b850:	d1c3      	bne.n	800b7da <_printf_float+0x32e>
 800b852:	e686      	b.n	800b562 <_printf_float+0xb6>
 800b854:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b858:	f1ba 0f01 	cmp.w	sl, #1
 800b85c:	dc01      	bgt.n	800b862 <_printf_float+0x3b6>
 800b85e:	07db      	lsls	r3, r3, #31
 800b860:	d536      	bpl.n	800b8d0 <_printf_float+0x424>
 800b862:	2301      	movs	r3, #1
 800b864:	4642      	mov	r2, r8
 800b866:	4631      	mov	r1, r6
 800b868:	4628      	mov	r0, r5
 800b86a:	47b8      	blx	r7
 800b86c:	3001      	adds	r0, #1
 800b86e:	f43f ae78 	beq.w	800b562 <_printf_float+0xb6>
 800b872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b876:	4631      	mov	r1, r6
 800b878:	4628      	mov	r0, r5
 800b87a:	47b8      	blx	r7
 800b87c:	3001      	adds	r0, #1
 800b87e:	f43f ae70 	beq.w	800b562 <_printf_float+0xb6>
 800b882:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b886:	2200      	movs	r2, #0
 800b888:	2300      	movs	r3, #0
 800b88a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b88e:	f7f5 f923 	bl	8000ad8 <__aeabi_dcmpeq>
 800b892:	b9c0      	cbnz	r0, 800b8c6 <_printf_float+0x41a>
 800b894:	4653      	mov	r3, sl
 800b896:	f108 0201 	add.w	r2, r8, #1
 800b89a:	4631      	mov	r1, r6
 800b89c:	4628      	mov	r0, r5
 800b89e:	47b8      	blx	r7
 800b8a0:	3001      	adds	r0, #1
 800b8a2:	d10c      	bne.n	800b8be <_printf_float+0x412>
 800b8a4:	e65d      	b.n	800b562 <_printf_float+0xb6>
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	465a      	mov	r2, fp
 800b8aa:	4631      	mov	r1, r6
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	47b8      	blx	r7
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	f43f ae56 	beq.w	800b562 <_printf_float+0xb6>
 800b8b6:	f108 0801 	add.w	r8, r8, #1
 800b8ba:	45d0      	cmp	r8, sl
 800b8bc:	dbf3      	blt.n	800b8a6 <_printf_float+0x3fa>
 800b8be:	464b      	mov	r3, r9
 800b8c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b8c4:	e6df      	b.n	800b686 <_printf_float+0x1da>
 800b8c6:	f04f 0800 	mov.w	r8, #0
 800b8ca:	f104 0b1a 	add.w	fp, r4, #26
 800b8ce:	e7f4      	b.n	800b8ba <_printf_float+0x40e>
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	4642      	mov	r2, r8
 800b8d4:	e7e1      	b.n	800b89a <_printf_float+0x3ee>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	464a      	mov	r2, r9
 800b8da:	4631      	mov	r1, r6
 800b8dc:	4628      	mov	r0, r5
 800b8de:	47b8      	blx	r7
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	f43f ae3e 	beq.w	800b562 <_printf_float+0xb6>
 800b8e6:	f108 0801 	add.w	r8, r8, #1
 800b8ea:	68e3      	ldr	r3, [r4, #12]
 800b8ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b8ee:	1a5b      	subs	r3, r3, r1
 800b8f0:	4543      	cmp	r3, r8
 800b8f2:	dcf0      	bgt.n	800b8d6 <_printf_float+0x42a>
 800b8f4:	e6fc      	b.n	800b6f0 <_printf_float+0x244>
 800b8f6:	f04f 0800 	mov.w	r8, #0
 800b8fa:	f104 0919 	add.w	r9, r4, #25
 800b8fe:	e7f4      	b.n	800b8ea <_printf_float+0x43e>

0800b900 <_printf_common>:
 800b900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b904:	4616      	mov	r6, r2
 800b906:	4698      	mov	r8, r3
 800b908:	688a      	ldr	r2, [r1, #8]
 800b90a:	690b      	ldr	r3, [r1, #16]
 800b90c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b910:	4293      	cmp	r3, r2
 800b912:	bfb8      	it	lt
 800b914:	4613      	movlt	r3, r2
 800b916:	6033      	str	r3, [r6, #0]
 800b918:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b91c:	4607      	mov	r7, r0
 800b91e:	460c      	mov	r4, r1
 800b920:	b10a      	cbz	r2, 800b926 <_printf_common+0x26>
 800b922:	3301      	adds	r3, #1
 800b924:	6033      	str	r3, [r6, #0]
 800b926:	6823      	ldr	r3, [r4, #0]
 800b928:	0699      	lsls	r1, r3, #26
 800b92a:	bf42      	ittt	mi
 800b92c:	6833      	ldrmi	r3, [r6, #0]
 800b92e:	3302      	addmi	r3, #2
 800b930:	6033      	strmi	r3, [r6, #0]
 800b932:	6825      	ldr	r5, [r4, #0]
 800b934:	f015 0506 	ands.w	r5, r5, #6
 800b938:	d106      	bne.n	800b948 <_printf_common+0x48>
 800b93a:	f104 0a19 	add.w	sl, r4, #25
 800b93e:	68e3      	ldr	r3, [r4, #12]
 800b940:	6832      	ldr	r2, [r6, #0]
 800b942:	1a9b      	subs	r3, r3, r2
 800b944:	42ab      	cmp	r3, r5
 800b946:	dc26      	bgt.n	800b996 <_printf_common+0x96>
 800b948:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b94c:	6822      	ldr	r2, [r4, #0]
 800b94e:	3b00      	subs	r3, #0
 800b950:	bf18      	it	ne
 800b952:	2301      	movne	r3, #1
 800b954:	0692      	lsls	r2, r2, #26
 800b956:	d42b      	bmi.n	800b9b0 <_printf_common+0xb0>
 800b958:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b95c:	4641      	mov	r1, r8
 800b95e:	4638      	mov	r0, r7
 800b960:	47c8      	blx	r9
 800b962:	3001      	adds	r0, #1
 800b964:	d01e      	beq.n	800b9a4 <_printf_common+0xa4>
 800b966:	6823      	ldr	r3, [r4, #0]
 800b968:	6922      	ldr	r2, [r4, #16]
 800b96a:	f003 0306 	and.w	r3, r3, #6
 800b96e:	2b04      	cmp	r3, #4
 800b970:	bf02      	ittt	eq
 800b972:	68e5      	ldreq	r5, [r4, #12]
 800b974:	6833      	ldreq	r3, [r6, #0]
 800b976:	1aed      	subeq	r5, r5, r3
 800b978:	68a3      	ldr	r3, [r4, #8]
 800b97a:	bf0c      	ite	eq
 800b97c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b980:	2500      	movne	r5, #0
 800b982:	4293      	cmp	r3, r2
 800b984:	bfc4      	itt	gt
 800b986:	1a9b      	subgt	r3, r3, r2
 800b988:	18ed      	addgt	r5, r5, r3
 800b98a:	2600      	movs	r6, #0
 800b98c:	341a      	adds	r4, #26
 800b98e:	42b5      	cmp	r5, r6
 800b990:	d11a      	bne.n	800b9c8 <_printf_common+0xc8>
 800b992:	2000      	movs	r0, #0
 800b994:	e008      	b.n	800b9a8 <_printf_common+0xa8>
 800b996:	2301      	movs	r3, #1
 800b998:	4652      	mov	r2, sl
 800b99a:	4641      	mov	r1, r8
 800b99c:	4638      	mov	r0, r7
 800b99e:	47c8      	blx	r9
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	d103      	bne.n	800b9ac <_printf_common+0xac>
 800b9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ac:	3501      	adds	r5, #1
 800b9ae:	e7c6      	b.n	800b93e <_printf_common+0x3e>
 800b9b0:	18e1      	adds	r1, r4, r3
 800b9b2:	1c5a      	adds	r2, r3, #1
 800b9b4:	2030      	movs	r0, #48	@ 0x30
 800b9b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b9ba:	4422      	add	r2, r4
 800b9bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b9c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b9c4:	3302      	adds	r3, #2
 800b9c6:	e7c7      	b.n	800b958 <_printf_common+0x58>
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	4622      	mov	r2, r4
 800b9cc:	4641      	mov	r1, r8
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	47c8      	blx	r9
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	d0e6      	beq.n	800b9a4 <_printf_common+0xa4>
 800b9d6:	3601      	adds	r6, #1
 800b9d8:	e7d9      	b.n	800b98e <_printf_common+0x8e>
	...

0800b9dc <_printf_i>:
 800b9dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e0:	7e0f      	ldrb	r7, [r1, #24]
 800b9e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b9e4:	2f78      	cmp	r7, #120	@ 0x78
 800b9e6:	4691      	mov	r9, r2
 800b9e8:	4680      	mov	r8, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	469a      	mov	sl, r3
 800b9ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b9f2:	d807      	bhi.n	800ba04 <_printf_i+0x28>
 800b9f4:	2f62      	cmp	r7, #98	@ 0x62
 800b9f6:	d80a      	bhi.n	800ba0e <_printf_i+0x32>
 800b9f8:	2f00      	cmp	r7, #0
 800b9fa:	f000 80d1 	beq.w	800bba0 <_printf_i+0x1c4>
 800b9fe:	2f58      	cmp	r7, #88	@ 0x58
 800ba00:	f000 80b8 	beq.w	800bb74 <_printf_i+0x198>
 800ba04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba0c:	e03a      	b.n	800ba84 <_printf_i+0xa8>
 800ba0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba12:	2b15      	cmp	r3, #21
 800ba14:	d8f6      	bhi.n	800ba04 <_printf_i+0x28>
 800ba16:	a101      	add	r1, pc, #4	@ (adr r1, 800ba1c <_printf_i+0x40>)
 800ba18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba1c:	0800ba75 	.word	0x0800ba75
 800ba20:	0800ba89 	.word	0x0800ba89
 800ba24:	0800ba05 	.word	0x0800ba05
 800ba28:	0800ba05 	.word	0x0800ba05
 800ba2c:	0800ba05 	.word	0x0800ba05
 800ba30:	0800ba05 	.word	0x0800ba05
 800ba34:	0800ba89 	.word	0x0800ba89
 800ba38:	0800ba05 	.word	0x0800ba05
 800ba3c:	0800ba05 	.word	0x0800ba05
 800ba40:	0800ba05 	.word	0x0800ba05
 800ba44:	0800ba05 	.word	0x0800ba05
 800ba48:	0800bb87 	.word	0x0800bb87
 800ba4c:	0800bab3 	.word	0x0800bab3
 800ba50:	0800bb41 	.word	0x0800bb41
 800ba54:	0800ba05 	.word	0x0800ba05
 800ba58:	0800ba05 	.word	0x0800ba05
 800ba5c:	0800bba9 	.word	0x0800bba9
 800ba60:	0800ba05 	.word	0x0800ba05
 800ba64:	0800bab3 	.word	0x0800bab3
 800ba68:	0800ba05 	.word	0x0800ba05
 800ba6c:	0800ba05 	.word	0x0800ba05
 800ba70:	0800bb49 	.word	0x0800bb49
 800ba74:	6833      	ldr	r3, [r6, #0]
 800ba76:	1d1a      	adds	r2, r3, #4
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	6032      	str	r2, [r6, #0]
 800ba7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba84:	2301      	movs	r3, #1
 800ba86:	e09c      	b.n	800bbc2 <_printf_i+0x1e6>
 800ba88:	6833      	ldr	r3, [r6, #0]
 800ba8a:	6820      	ldr	r0, [r4, #0]
 800ba8c:	1d19      	adds	r1, r3, #4
 800ba8e:	6031      	str	r1, [r6, #0]
 800ba90:	0606      	lsls	r6, r0, #24
 800ba92:	d501      	bpl.n	800ba98 <_printf_i+0xbc>
 800ba94:	681d      	ldr	r5, [r3, #0]
 800ba96:	e003      	b.n	800baa0 <_printf_i+0xc4>
 800ba98:	0645      	lsls	r5, r0, #25
 800ba9a:	d5fb      	bpl.n	800ba94 <_printf_i+0xb8>
 800ba9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800baa0:	2d00      	cmp	r5, #0
 800baa2:	da03      	bge.n	800baac <_printf_i+0xd0>
 800baa4:	232d      	movs	r3, #45	@ 0x2d
 800baa6:	426d      	negs	r5, r5
 800baa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baac:	4858      	ldr	r0, [pc, #352]	@ (800bc10 <_printf_i+0x234>)
 800baae:	230a      	movs	r3, #10
 800bab0:	e011      	b.n	800bad6 <_printf_i+0xfa>
 800bab2:	6821      	ldr	r1, [r4, #0]
 800bab4:	6833      	ldr	r3, [r6, #0]
 800bab6:	0608      	lsls	r0, r1, #24
 800bab8:	f853 5b04 	ldr.w	r5, [r3], #4
 800babc:	d402      	bmi.n	800bac4 <_printf_i+0xe8>
 800babe:	0649      	lsls	r1, r1, #25
 800bac0:	bf48      	it	mi
 800bac2:	b2ad      	uxthmi	r5, r5
 800bac4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bac6:	4852      	ldr	r0, [pc, #328]	@ (800bc10 <_printf_i+0x234>)
 800bac8:	6033      	str	r3, [r6, #0]
 800baca:	bf14      	ite	ne
 800bacc:	230a      	movne	r3, #10
 800bace:	2308      	moveq	r3, #8
 800bad0:	2100      	movs	r1, #0
 800bad2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bad6:	6866      	ldr	r6, [r4, #4]
 800bad8:	60a6      	str	r6, [r4, #8]
 800bada:	2e00      	cmp	r6, #0
 800badc:	db05      	blt.n	800baea <_printf_i+0x10e>
 800bade:	6821      	ldr	r1, [r4, #0]
 800bae0:	432e      	orrs	r6, r5
 800bae2:	f021 0104 	bic.w	r1, r1, #4
 800bae6:	6021      	str	r1, [r4, #0]
 800bae8:	d04b      	beq.n	800bb82 <_printf_i+0x1a6>
 800baea:	4616      	mov	r6, r2
 800baec:	fbb5 f1f3 	udiv	r1, r5, r3
 800baf0:	fb03 5711 	mls	r7, r3, r1, r5
 800baf4:	5dc7      	ldrb	r7, [r0, r7]
 800baf6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bafa:	462f      	mov	r7, r5
 800bafc:	42bb      	cmp	r3, r7
 800bafe:	460d      	mov	r5, r1
 800bb00:	d9f4      	bls.n	800baec <_printf_i+0x110>
 800bb02:	2b08      	cmp	r3, #8
 800bb04:	d10b      	bne.n	800bb1e <_printf_i+0x142>
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	07df      	lsls	r7, r3, #31
 800bb0a:	d508      	bpl.n	800bb1e <_printf_i+0x142>
 800bb0c:	6923      	ldr	r3, [r4, #16]
 800bb0e:	6861      	ldr	r1, [r4, #4]
 800bb10:	4299      	cmp	r1, r3
 800bb12:	bfde      	ittt	le
 800bb14:	2330      	movle	r3, #48	@ 0x30
 800bb16:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb1e:	1b92      	subs	r2, r2, r6
 800bb20:	6122      	str	r2, [r4, #16]
 800bb22:	f8cd a000 	str.w	sl, [sp]
 800bb26:	464b      	mov	r3, r9
 800bb28:	aa03      	add	r2, sp, #12
 800bb2a:	4621      	mov	r1, r4
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	f7ff fee7 	bl	800b900 <_printf_common>
 800bb32:	3001      	adds	r0, #1
 800bb34:	d14a      	bne.n	800bbcc <_printf_i+0x1f0>
 800bb36:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3a:	b004      	add	sp, #16
 800bb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	f043 0320 	orr.w	r3, r3, #32
 800bb46:	6023      	str	r3, [r4, #0]
 800bb48:	4832      	ldr	r0, [pc, #200]	@ (800bc14 <_printf_i+0x238>)
 800bb4a:	2778      	movs	r7, #120	@ 0x78
 800bb4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb50:	6823      	ldr	r3, [r4, #0]
 800bb52:	6831      	ldr	r1, [r6, #0]
 800bb54:	061f      	lsls	r7, r3, #24
 800bb56:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb5a:	d402      	bmi.n	800bb62 <_printf_i+0x186>
 800bb5c:	065f      	lsls	r7, r3, #25
 800bb5e:	bf48      	it	mi
 800bb60:	b2ad      	uxthmi	r5, r5
 800bb62:	6031      	str	r1, [r6, #0]
 800bb64:	07d9      	lsls	r1, r3, #31
 800bb66:	bf44      	itt	mi
 800bb68:	f043 0320 	orrmi.w	r3, r3, #32
 800bb6c:	6023      	strmi	r3, [r4, #0]
 800bb6e:	b11d      	cbz	r5, 800bb78 <_printf_i+0x19c>
 800bb70:	2310      	movs	r3, #16
 800bb72:	e7ad      	b.n	800bad0 <_printf_i+0xf4>
 800bb74:	4826      	ldr	r0, [pc, #152]	@ (800bc10 <_printf_i+0x234>)
 800bb76:	e7e9      	b.n	800bb4c <_printf_i+0x170>
 800bb78:	6823      	ldr	r3, [r4, #0]
 800bb7a:	f023 0320 	bic.w	r3, r3, #32
 800bb7e:	6023      	str	r3, [r4, #0]
 800bb80:	e7f6      	b.n	800bb70 <_printf_i+0x194>
 800bb82:	4616      	mov	r6, r2
 800bb84:	e7bd      	b.n	800bb02 <_printf_i+0x126>
 800bb86:	6833      	ldr	r3, [r6, #0]
 800bb88:	6825      	ldr	r5, [r4, #0]
 800bb8a:	6961      	ldr	r1, [r4, #20]
 800bb8c:	1d18      	adds	r0, r3, #4
 800bb8e:	6030      	str	r0, [r6, #0]
 800bb90:	062e      	lsls	r6, r5, #24
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	d501      	bpl.n	800bb9a <_printf_i+0x1be>
 800bb96:	6019      	str	r1, [r3, #0]
 800bb98:	e002      	b.n	800bba0 <_printf_i+0x1c4>
 800bb9a:	0668      	lsls	r0, r5, #25
 800bb9c:	d5fb      	bpl.n	800bb96 <_printf_i+0x1ba>
 800bb9e:	8019      	strh	r1, [r3, #0]
 800bba0:	2300      	movs	r3, #0
 800bba2:	6123      	str	r3, [r4, #16]
 800bba4:	4616      	mov	r6, r2
 800bba6:	e7bc      	b.n	800bb22 <_printf_i+0x146>
 800bba8:	6833      	ldr	r3, [r6, #0]
 800bbaa:	1d1a      	adds	r2, r3, #4
 800bbac:	6032      	str	r2, [r6, #0]
 800bbae:	681e      	ldr	r6, [r3, #0]
 800bbb0:	6862      	ldr	r2, [r4, #4]
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	f7f4 fb13 	bl	80001e0 <memchr>
 800bbba:	b108      	cbz	r0, 800bbc0 <_printf_i+0x1e4>
 800bbbc:	1b80      	subs	r0, r0, r6
 800bbbe:	6060      	str	r0, [r4, #4]
 800bbc0:	6863      	ldr	r3, [r4, #4]
 800bbc2:	6123      	str	r3, [r4, #16]
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbca:	e7aa      	b.n	800bb22 <_printf_i+0x146>
 800bbcc:	6923      	ldr	r3, [r4, #16]
 800bbce:	4632      	mov	r2, r6
 800bbd0:	4649      	mov	r1, r9
 800bbd2:	4640      	mov	r0, r8
 800bbd4:	47d0      	blx	sl
 800bbd6:	3001      	adds	r0, #1
 800bbd8:	d0ad      	beq.n	800bb36 <_printf_i+0x15a>
 800bbda:	6823      	ldr	r3, [r4, #0]
 800bbdc:	079b      	lsls	r3, r3, #30
 800bbde:	d413      	bmi.n	800bc08 <_printf_i+0x22c>
 800bbe0:	68e0      	ldr	r0, [r4, #12]
 800bbe2:	9b03      	ldr	r3, [sp, #12]
 800bbe4:	4298      	cmp	r0, r3
 800bbe6:	bfb8      	it	lt
 800bbe8:	4618      	movlt	r0, r3
 800bbea:	e7a6      	b.n	800bb3a <_printf_i+0x15e>
 800bbec:	2301      	movs	r3, #1
 800bbee:	4632      	mov	r2, r6
 800bbf0:	4649      	mov	r1, r9
 800bbf2:	4640      	mov	r0, r8
 800bbf4:	47d0      	blx	sl
 800bbf6:	3001      	adds	r0, #1
 800bbf8:	d09d      	beq.n	800bb36 <_printf_i+0x15a>
 800bbfa:	3501      	adds	r5, #1
 800bbfc:	68e3      	ldr	r3, [r4, #12]
 800bbfe:	9903      	ldr	r1, [sp, #12]
 800bc00:	1a5b      	subs	r3, r3, r1
 800bc02:	42ab      	cmp	r3, r5
 800bc04:	dcf2      	bgt.n	800bbec <_printf_i+0x210>
 800bc06:	e7eb      	b.n	800bbe0 <_printf_i+0x204>
 800bc08:	2500      	movs	r5, #0
 800bc0a:	f104 0619 	add.w	r6, r4, #25
 800bc0e:	e7f5      	b.n	800bbfc <_printf_i+0x220>
 800bc10:	080125ee 	.word	0x080125ee
 800bc14:	080125ff 	.word	0x080125ff

0800bc18 <_scanf_float>:
 800bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	b087      	sub	sp, #28
 800bc1e:	4691      	mov	r9, r2
 800bc20:	9303      	str	r3, [sp, #12]
 800bc22:	688b      	ldr	r3, [r1, #8]
 800bc24:	1e5a      	subs	r2, r3, #1
 800bc26:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bc2a:	bf81      	itttt	hi
 800bc2c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bc30:	eb03 0b05 	addhi.w	fp, r3, r5
 800bc34:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bc38:	608b      	strhi	r3, [r1, #8]
 800bc3a:	680b      	ldr	r3, [r1, #0]
 800bc3c:	460a      	mov	r2, r1
 800bc3e:	f04f 0500 	mov.w	r5, #0
 800bc42:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bc46:	f842 3b1c 	str.w	r3, [r2], #28
 800bc4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bc4e:	4680      	mov	r8, r0
 800bc50:	460c      	mov	r4, r1
 800bc52:	bf98      	it	ls
 800bc54:	f04f 0b00 	movls.w	fp, #0
 800bc58:	9201      	str	r2, [sp, #4]
 800bc5a:	4616      	mov	r6, r2
 800bc5c:	46aa      	mov	sl, r5
 800bc5e:	462f      	mov	r7, r5
 800bc60:	9502      	str	r5, [sp, #8]
 800bc62:	68a2      	ldr	r2, [r4, #8]
 800bc64:	b15a      	cbz	r2, 800bc7e <_scanf_float+0x66>
 800bc66:	f8d9 3000 	ldr.w	r3, [r9]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	2b4e      	cmp	r3, #78	@ 0x4e
 800bc6e:	d863      	bhi.n	800bd38 <_scanf_float+0x120>
 800bc70:	2b40      	cmp	r3, #64	@ 0x40
 800bc72:	d83b      	bhi.n	800bcec <_scanf_float+0xd4>
 800bc74:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bc78:	b2c8      	uxtb	r0, r1
 800bc7a:	280e      	cmp	r0, #14
 800bc7c:	d939      	bls.n	800bcf2 <_scanf_float+0xda>
 800bc7e:	b11f      	cbz	r7, 800bc88 <_scanf_float+0x70>
 800bc80:	6823      	ldr	r3, [r4, #0]
 800bc82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc86:	6023      	str	r3, [r4, #0]
 800bc88:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc8c:	f1ba 0f01 	cmp.w	sl, #1
 800bc90:	f200 8114 	bhi.w	800bebc <_scanf_float+0x2a4>
 800bc94:	9b01      	ldr	r3, [sp, #4]
 800bc96:	429e      	cmp	r6, r3
 800bc98:	f200 8105 	bhi.w	800bea6 <_scanf_float+0x28e>
 800bc9c:	2001      	movs	r0, #1
 800bc9e:	b007      	add	sp, #28
 800bca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bca8:	2a0d      	cmp	r2, #13
 800bcaa:	d8e8      	bhi.n	800bc7e <_scanf_float+0x66>
 800bcac:	a101      	add	r1, pc, #4	@ (adr r1, 800bcb4 <_scanf_float+0x9c>)
 800bcae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bcb2:	bf00      	nop
 800bcb4:	0800bdfd 	.word	0x0800bdfd
 800bcb8:	0800bc7f 	.word	0x0800bc7f
 800bcbc:	0800bc7f 	.word	0x0800bc7f
 800bcc0:	0800bc7f 	.word	0x0800bc7f
 800bcc4:	0800be59 	.word	0x0800be59
 800bcc8:	0800be33 	.word	0x0800be33
 800bccc:	0800bc7f 	.word	0x0800bc7f
 800bcd0:	0800bc7f 	.word	0x0800bc7f
 800bcd4:	0800be0b 	.word	0x0800be0b
 800bcd8:	0800bc7f 	.word	0x0800bc7f
 800bcdc:	0800bc7f 	.word	0x0800bc7f
 800bce0:	0800bc7f 	.word	0x0800bc7f
 800bce4:	0800bc7f 	.word	0x0800bc7f
 800bce8:	0800bdc7 	.word	0x0800bdc7
 800bcec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bcf0:	e7da      	b.n	800bca8 <_scanf_float+0x90>
 800bcf2:	290e      	cmp	r1, #14
 800bcf4:	d8c3      	bhi.n	800bc7e <_scanf_float+0x66>
 800bcf6:	a001      	add	r0, pc, #4	@ (adr r0, 800bcfc <_scanf_float+0xe4>)
 800bcf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bcfc:	0800bdb7 	.word	0x0800bdb7
 800bd00:	0800bc7f 	.word	0x0800bc7f
 800bd04:	0800bdb7 	.word	0x0800bdb7
 800bd08:	0800be47 	.word	0x0800be47
 800bd0c:	0800bc7f 	.word	0x0800bc7f
 800bd10:	0800bd59 	.word	0x0800bd59
 800bd14:	0800bd9d 	.word	0x0800bd9d
 800bd18:	0800bd9d 	.word	0x0800bd9d
 800bd1c:	0800bd9d 	.word	0x0800bd9d
 800bd20:	0800bd9d 	.word	0x0800bd9d
 800bd24:	0800bd9d 	.word	0x0800bd9d
 800bd28:	0800bd9d 	.word	0x0800bd9d
 800bd2c:	0800bd9d 	.word	0x0800bd9d
 800bd30:	0800bd9d 	.word	0x0800bd9d
 800bd34:	0800bd9d 	.word	0x0800bd9d
 800bd38:	2b6e      	cmp	r3, #110	@ 0x6e
 800bd3a:	d809      	bhi.n	800bd50 <_scanf_float+0x138>
 800bd3c:	2b60      	cmp	r3, #96	@ 0x60
 800bd3e:	d8b1      	bhi.n	800bca4 <_scanf_float+0x8c>
 800bd40:	2b54      	cmp	r3, #84	@ 0x54
 800bd42:	d07b      	beq.n	800be3c <_scanf_float+0x224>
 800bd44:	2b59      	cmp	r3, #89	@ 0x59
 800bd46:	d19a      	bne.n	800bc7e <_scanf_float+0x66>
 800bd48:	2d07      	cmp	r5, #7
 800bd4a:	d198      	bne.n	800bc7e <_scanf_float+0x66>
 800bd4c:	2508      	movs	r5, #8
 800bd4e:	e02f      	b.n	800bdb0 <_scanf_float+0x198>
 800bd50:	2b74      	cmp	r3, #116	@ 0x74
 800bd52:	d073      	beq.n	800be3c <_scanf_float+0x224>
 800bd54:	2b79      	cmp	r3, #121	@ 0x79
 800bd56:	e7f6      	b.n	800bd46 <_scanf_float+0x12e>
 800bd58:	6821      	ldr	r1, [r4, #0]
 800bd5a:	05c8      	lsls	r0, r1, #23
 800bd5c:	d51e      	bpl.n	800bd9c <_scanf_float+0x184>
 800bd5e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bd62:	6021      	str	r1, [r4, #0]
 800bd64:	3701      	adds	r7, #1
 800bd66:	f1bb 0f00 	cmp.w	fp, #0
 800bd6a:	d003      	beq.n	800bd74 <_scanf_float+0x15c>
 800bd6c:	3201      	adds	r2, #1
 800bd6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd72:	60a2      	str	r2, [r4, #8]
 800bd74:	68a3      	ldr	r3, [r4, #8]
 800bd76:	3b01      	subs	r3, #1
 800bd78:	60a3      	str	r3, [r4, #8]
 800bd7a:	6923      	ldr	r3, [r4, #16]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	6123      	str	r3, [r4, #16]
 800bd80:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f8c9 3004 	str.w	r3, [r9, #4]
 800bd8c:	f340 8082 	ble.w	800be94 <_scanf_float+0x27c>
 800bd90:	f8d9 3000 	ldr.w	r3, [r9]
 800bd94:	3301      	adds	r3, #1
 800bd96:	f8c9 3000 	str.w	r3, [r9]
 800bd9a:	e762      	b.n	800bc62 <_scanf_float+0x4a>
 800bd9c:	eb1a 0105 	adds.w	r1, sl, r5
 800bda0:	f47f af6d 	bne.w	800bc7e <_scanf_float+0x66>
 800bda4:	6822      	ldr	r2, [r4, #0]
 800bda6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bdaa:	6022      	str	r2, [r4, #0]
 800bdac:	460d      	mov	r5, r1
 800bdae:	468a      	mov	sl, r1
 800bdb0:	f806 3b01 	strb.w	r3, [r6], #1
 800bdb4:	e7de      	b.n	800bd74 <_scanf_float+0x15c>
 800bdb6:	6822      	ldr	r2, [r4, #0]
 800bdb8:	0610      	lsls	r0, r2, #24
 800bdba:	f57f af60 	bpl.w	800bc7e <_scanf_float+0x66>
 800bdbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bdc2:	6022      	str	r2, [r4, #0]
 800bdc4:	e7f4      	b.n	800bdb0 <_scanf_float+0x198>
 800bdc6:	f1ba 0f00 	cmp.w	sl, #0
 800bdca:	d10c      	bne.n	800bde6 <_scanf_float+0x1ce>
 800bdcc:	b977      	cbnz	r7, 800bdec <_scanf_float+0x1d4>
 800bdce:	6822      	ldr	r2, [r4, #0]
 800bdd0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bdd4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bdd8:	d108      	bne.n	800bdec <_scanf_float+0x1d4>
 800bdda:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bdde:	6022      	str	r2, [r4, #0]
 800bde0:	f04f 0a01 	mov.w	sl, #1
 800bde4:	e7e4      	b.n	800bdb0 <_scanf_float+0x198>
 800bde6:	f1ba 0f02 	cmp.w	sl, #2
 800bdea:	d050      	beq.n	800be8e <_scanf_float+0x276>
 800bdec:	2d01      	cmp	r5, #1
 800bdee:	d002      	beq.n	800bdf6 <_scanf_float+0x1de>
 800bdf0:	2d04      	cmp	r5, #4
 800bdf2:	f47f af44 	bne.w	800bc7e <_scanf_float+0x66>
 800bdf6:	3501      	adds	r5, #1
 800bdf8:	b2ed      	uxtb	r5, r5
 800bdfa:	e7d9      	b.n	800bdb0 <_scanf_float+0x198>
 800bdfc:	f1ba 0f01 	cmp.w	sl, #1
 800be00:	f47f af3d 	bne.w	800bc7e <_scanf_float+0x66>
 800be04:	f04f 0a02 	mov.w	sl, #2
 800be08:	e7d2      	b.n	800bdb0 <_scanf_float+0x198>
 800be0a:	b975      	cbnz	r5, 800be2a <_scanf_float+0x212>
 800be0c:	2f00      	cmp	r7, #0
 800be0e:	f47f af37 	bne.w	800bc80 <_scanf_float+0x68>
 800be12:	6822      	ldr	r2, [r4, #0]
 800be14:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800be18:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800be1c:	f040 8103 	bne.w	800c026 <_scanf_float+0x40e>
 800be20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800be24:	6022      	str	r2, [r4, #0]
 800be26:	2501      	movs	r5, #1
 800be28:	e7c2      	b.n	800bdb0 <_scanf_float+0x198>
 800be2a:	2d03      	cmp	r5, #3
 800be2c:	d0e3      	beq.n	800bdf6 <_scanf_float+0x1de>
 800be2e:	2d05      	cmp	r5, #5
 800be30:	e7df      	b.n	800bdf2 <_scanf_float+0x1da>
 800be32:	2d02      	cmp	r5, #2
 800be34:	f47f af23 	bne.w	800bc7e <_scanf_float+0x66>
 800be38:	2503      	movs	r5, #3
 800be3a:	e7b9      	b.n	800bdb0 <_scanf_float+0x198>
 800be3c:	2d06      	cmp	r5, #6
 800be3e:	f47f af1e 	bne.w	800bc7e <_scanf_float+0x66>
 800be42:	2507      	movs	r5, #7
 800be44:	e7b4      	b.n	800bdb0 <_scanf_float+0x198>
 800be46:	6822      	ldr	r2, [r4, #0]
 800be48:	0591      	lsls	r1, r2, #22
 800be4a:	f57f af18 	bpl.w	800bc7e <_scanf_float+0x66>
 800be4e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800be52:	6022      	str	r2, [r4, #0]
 800be54:	9702      	str	r7, [sp, #8]
 800be56:	e7ab      	b.n	800bdb0 <_scanf_float+0x198>
 800be58:	6822      	ldr	r2, [r4, #0]
 800be5a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800be5e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800be62:	d005      	beq.n	800be70 <_scanf_float+0x258>
 800be64:	0550      	lsls	r0, r2, #21
 800be66:	f57f af0a 	bpl.w	800bc7e <_scanf_float+0x66>
 800be6a:	2f00      	cmp	r7, #0
 800be6c:	f000 80db 	beq.w	800c026 <_scanf_float+0x40e>
 800be70:	0591      	lsls	r1, r2, #22
 800be72:	bf58      	it	pl
 800be74:	9902      	ldrpl	r1, [sp, #8]
 800be76:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800be7a:	bf58      	it	pl
 800be7c:	1a79      	subpl	r1, r7, r1
 800be7e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800be82:	bf58      	it	pl
 800be84:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800be88:	6022      	str	r2, [r4, #0]
 800be8a:	2700      	movs	r7, #0
 800be8c:	e790      	b.n	800bdb0 <_scanf_float+0x198>
 800be8e:	f04f 0a03 	mov.w	sl, #3
 800be92:	e78d      	b.n	800bdb0 <_scanf_float+0x198>
 800be94:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800be98:	4649      	mov	r1, r9
 800be9a:	4640      	mov	r0, r8
 800be9c:	4798      	blx	r3
 800be9e:	2800      	cmp	r0, #0
 800bea0:	f43f aedf 	beq.w	800bc62 <_scanf_float+0x4a>
 800bea4:	e6eb      	b.n	800bc7e <_scanf_float+0x66>
 800bea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800beaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800beae:	464a      	mov	r2, r9
 800beb0:	4640      	mov	r0, r8
 800beb2:	4798      	blx	r3
 800beb4:	6923      	ldr	r3, [r4, #16]
 800beb6:	3b01      	subs	r3, #1
 800beb8:	6123      	str	r3, [r4, #16]
 800beba:	e6eb      	b.n	800bc94 <_scanf_float+0x7c>
 800bebc:	1e6b      	subs	r3, r5, #1
 800bebe:	2b06      	cmp	r3, #6
 800bec0:	d824      	bhi.n	800bf0c <_scanf_float+0x2f4>
 800bec2:	2d02      	cmp	r5, #2
 800bec4:	d836      	bhi.n	800bf34 <_scanf_float+0x31c>
 800bec6:	9b01      	ldr	r3, [sp, #4]
 800bec8:	429e      	cmp	r6, r3
 800beca:	f67f aee7 	bls.w	800bc9c <_scanf_float+0x84>
 800bece:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bed2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bed6:	464a      	mov	r2, r9
 800bed8:	4640      	mov	r0, r8
 800beda:	4798      	blx	r3
 800bedc:	6923      	ldr	r3, [r4, #16]
 800bede:	3b01      	subs	r3, #1
 800bee0:	6123      	str	r3, [r4, #16]
 800bee2:	e7f0      	b.n	800bec6 <_scanf_float+0x2ae>
 800bee4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bee8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800beec:	464a      	mov	r2, r9
 800beee:	4640      	mov	r0, r8
 800bef0:	4798      	blx	r3
 800bef2:	6923      	ldr	r3, [r4, #16]
 800bef4:	3b01      	subs	r3, #1
 800bef6:	6123      	str	r3, [r4, #16]
 800bef8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800befc:	fa5f fa8a 	uxtb.w	sl, sl
 800bf00:	f1ba 0f02 	cmp.w	sl, #2
 800bf04:	d1ee      	bne.n	800bee4 <_scanf_float+0x2cc>
 800bf06:	3d03      	subs	r5, #3
 800bf08:	b2ed      	uxtb	r5, r5
 800bf0a:	1b76      	subs	r6, r6, r5
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	05da      	lsls	r2, r3, #23
 800bf10:	d530      	bpl.n	800bf74 <_scanf_float+0x35c>
 800bf12:	055b      	lsls	r3, r3, #21
 800bf14:	d511      	bpl.n	800bf3a <_scanf_float+0x322>
 800bf16:	9b01      	ldr	r3, [sp, #4]
 800bf18:	429e      	cmp	r6, r3
 800bf1a:	f67f aebf 	bls.w	800bc9c <_scanf_float+0x84>
 800bf1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bf22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bf26:	464a      	mov	r2, r9
 800bf28:	4640      	mov	r0, r8
 800bf2a:	4798      	blx	r3
 800bf2c:	6923      	ldr	r3, [r4, #16]
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	6123      	str	r3, [r4, #16]
 800bf32:	e7f0      	b.n	800bf16 <_scanf_float+0x2fe>
 800bf34:	46aa      	mov	sl, r5
 800bf36:	46b3      	mov	fp, r6
 800bf38:	e7de      	b.n	800bef8 <_scanf_float+0x2e0>
 800bf3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bf3e:	6923      	ldr	r3, [r4, #16]
 800bf40:	2965      	cmp	r1, #101	@ 0x65
 800bf42:	f103 33ff 	add.w	r3, r3, #4294967295
 800bf46:	f106 35ff 	add.w	r5, r6, #4294967295
 800bf4a:	6123      	str	r3, [r4, #16]
 800bf4c:	d00c      	beq.n	800bf68 <_scanf_float+0x350>
 800bf4e:	2945      	cmp	r1, #69	@ 0x45
 800bf50:	d00a      	beq.n	800bf68 <_scanf_float+0x350>
 800bf52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bf56:	464a      	mov	r2, r9
 800bf58:	4640      	mov	r0, r8
 800bf5a:	4798      	blx	r3
 800bf5c:	6923      	ldr	r3, [r4, #16]
 800bf5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bf62:	3b01      	subs	r3, #1
 800bf64:	1eb5      	subs	r5, r6, #2
 800bf66:	6123      	str	r3, [r4, #16]
 800bf68:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bf6c:	464a      	mov	r2, r9
 800bf6e:	4640      	mov	r0, r8
 800bf70:	4798      	blx	r3
 800bf72:	462e      	mov	r6, r5
 800bf74:	6822      	ldr	r2, [r4, #0]
 800bf76:	f012 0210 	ands.w	r2, r2, #16
 800bf7a:	d001      	beq.n	800bf80 <_scanf_float+0x368>
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	e68e      	b.n	800bc9e <_scanf_float+0x86>
 800bf80:	7032      	strb	r2, [r6, #0]
 800bf82:	6823      	ldr	r3, [r4, #0]
 800bf84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bf88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf8c:	d125      	bne.n	800bfda <_scanf_float+0x3c2>
 800bf8e:	9b02      	ldr	r3, [sp, #8]
 800bf90:	429f      	cmp	r7, r3
 800bf92:	d00a      	beq.n	800bfaa <_scanf_float+0x392>
 800bf94:	1bda      	subs	r2, r3, r7
 800bf96:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bf9a:	429e      	cmp	r6, r3
 800bf9c:	bf28      	it	cs
 800bf9e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bfa2:	4922      	ldr	r1, [pc, #136]	@ (800c02c <_scanf_float+0x414>)
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f000 f919 	bl	800c1dc <siprintf>
 800bfaa:	9901      	ldr	r1, [sp, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	4640      	mov	r0, r8
 800bfb0:	f002 fc06 	bl	800e7c0 <_strtod_r>
 800bfb4:	9b03      	ldr	r3, [sp, #12]
 800bfb6:	6821      	ldr	r1, [r4, #0]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f011 0f02 	tst.w	r1, #2
 800bfbe:	ec57 6b10 	vmov	r6, r7, d0
 800bfc2:	f103 0204 	add.w	r2, r3, #4
 800bfc6:	d015      	beq.n	800bff4 <_scanf_float+0x3dc>
 800bfc8:	9903      	ldr	r1, [sp, #12]
 800bfca:	600a      	str	r2, [r1, #0]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	e9c3 6700 	strd	r6, r7, [r3]
 800bfd2:	68e3      	ldr	r3, [r4, #12]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	60e3      	str	r3, [r4, #12]
 800bfd8:	e7d0      	b.n	800bf7c <_scanf_float+0x364>
 800bfda:	9b04      	ldr	r3, [sp, #16]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d0e4      	beq.n	800bfaa <_scanf_float+0x392>
 800bfe0:	9905      	ldr	r1, [sp, #20]
 800bfe2:	230a      	movs	r3, #10
 800bfe4:	3101      	adds	r1, #1
 800bfe6:	4640      	mov	r0, r8
 800bfe8:	f002 fc6a 	bl	800e8c0 <_strtol_r>
 800bfec:	9b04      	ldr	r3, [sp, #16]
 800bfee:	9e05      	ldr	r6, [sp, #20]
 800bff0:	1ac2      	subs	r2, r0, r3
 800bff2:	e7d0      	b.n	800bf96 <_scanf_float+0x37e>
 800bff4:	f011 0f04 	tst.w	r1, #4
 800bff8:	9903      	ldr	r1, [sp, #12]
 800bffa:	600a      	str	r2, [r1, #0]
 800bffc:	d1e6      	bne.n	800bfcc <_scanf_float+0x3b4>
 800bffe:	681d      	ldr	r5, [r3, #0]
 800c000:	4632      	mov	r2, r6
 800c002:	463b      	mov	r3, r7
 800c004:	4630      	mov	r0, r6
 800c006:	4639      	mov	r1, r7
 800c008:	f7f4 fd98 	bl	8000b3c <__aeabi_dcmpun>
 800c00c:	b128      	cbz	r0, 800c01a <_scanf_float+0x402>
 800c00e:	4808      	ldr	r0, [pc, #32]	@ (800c030 <_scanf_float+0x418>)
 800c010:	f000 f9ca 	bl	800c3a8 <nanf>
 800c014:	ed85 0a00 	vstr	s0, [r5]
 800c018:	e7db      	b.n	800bfd2 <_scanf_float+0x3ba>
 800c01a:	4630      	mov	r0, r6
 800c01c:	4639      	mov	r1, r7
 800c01e:	f7f4 fdeb 	bl	8000bf8 <__aeabi_d2f>
 800c022:	6028      	str	r0, [r5, #0]
 800c024:	e7d5      	b.n	800bfd2 <_scanf_float+0x3ba>
 800c026:	2700      	movs	r7, #0
 800c028:	e62e      	b.n	800bc88 <_scanf_float+0x70>
 800c02a:	bf00      	nop
 800c02c:	08012610 	.word	0x08012610
 800c030:	08012751 	.word	0x08012751

0800c034 <std>:
 800c034:	2300      	movs	r3, #0
 800c036:	b510      	push	{r4, lr}
 800c038:	4604      	mov	r4, r0
 800c03a:	e9c0 3300 	strd	r3, r3, [r0]
 800c03e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c042:	6083      	str	r3, [r0, #8]
 800c044:	8181      	strh	r1, [r0, #12]
 800c046:	6643      	str	r3, [r0, #100]	@ 0x64
 800c048:	81c2      	strh	r2, [r0, #14]
 800c04a:	6183      	str	r3, [r0, #24]
 800c04c:	4619      	mov	r1, r3
 800c04e:	2208      	movs	r2, #8
 800c050:	305c      	adds	r0, #92	@ 0x5c
 800c052:	f000 f928 	bl	800c2a6 <memset>
 800c056:	4b0d      	ldr	r3, [pc, #52]	@ (800c08c <std+0x58>)
 800c058:	6263      	str	r3, [r4, #36]	@ 0x24
 800c05a:	4b0d      	ldr	r3, [pc, #52]	@ (800c090 <std+0x5c>)
 800c05c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c05e:	4b0d      	ldr	r3, [pc, #52]	@ (800c094 <std+0x60>)
 800c060:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c062:	4b0d      	ldr	r3, [pc, #52]	@ (800c098 <std+0x64>)
 800c064:	6323      	str	r3, [r4, #48]	@ 0x30
 800c066:	4b0d      	ldr	r3, [pc, #52]	@ (800c09c <std+0x68>)
 800c068:	6224      	str	r4, [r4, #32]
 800c06a:	429c      	cmp	r4, r3
 800c06c:	d006      	beq.n	800c07c <std+0x48>
 800c06e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c072:	4294      	cmp	r4, r2
 800c074:	d002      	beq.n	800c07c <std+0x48>
 800c076:	33d0      	adds	r3, #208	@ 0xd0
 800c078:	429c      	cmp	r4, r3
 800c07a:	d105      	bne.n	800c088 <std+0x54>
 800c07c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c084:	f000 b98c 	b.w	800c3a0 <__retarget_lock_init_recursive>
 800c088:	bd10      	pop	{r4, pc}
 800c08a:	bf00      	nop
 800c08c:	0800c221 	.word	0x0800c221
 800c090:	0800c243 	.word	0x0800c243
 800c094:	0800c27b 	.word	0x0800c27b
 800c098:	0800c29f 	.word	0x0800c29f
 800c09c:	20000c58 	.word	0x20000c58

0800c0a0 <stdio_exit_handler>:
 800c0a0:	4a02      	ldr	r2, [pc, #8]	@ (800c0ac <stdio_exit_handler+0xc>)
 800c0a2:	4903      	ldr	r1, [pc, #12]	@ (800c0b0 <stdio_exit_handler+0x10>)
 800c0a4:	4803      	ldr	r0, [pc, #12]	@ (800c0b4 <stdio_exit_handler+0x14>)
 800c0a6:	f000 b869 	b.w	800c17c <_fwalk_sglue>
 800c0aa:	bf00      	nop
 800c0ac:	2000002c 	.word	0x2000002c
 800c0b0:	0800ef01 	.word	0x0800ef01
 800c0b4:	2000003c 	.word	0x2000003c

0800c0b8 <cleanup_stdio>:
 800c0b8:	6841      	ldr	r1, [r0, #4]
 800c0ba:	4b0c      	ldr	r3, [pc, #48]	@ (800c0ec <cleanup_stdio+0x34>)
 800c0bc:	4299      	cmp	r1, r3
 800c0be:	b510      	push	{r4, lr}
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	d001      	beq.n	800c0c8 <cleanup_stdio+0x10>
 800c0c4:	f002 ff1c 	bl	800ef00 <_fflush_r>
 800c0c8:	68a1      	ldr	r1, [r4, #8]
 800c0ca:	4b09      	ldr	r3, [pc, #36]	@ (800c0f0 <cleanup_stdio+0x38>)
 800c0cc:	4299      	cmp	r1, r3
 800c0ce:	d002      	beq.n	800c0d6 <cleanup_stdio+0x1e>
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f002 ff15 	bl	800ef00 <_fflush_r>
 800c0d6:	68e1      	ldr	r1, [r4, #12]
 800c0d8:	4b06      	ldr	r3, [pc, #24]	@ (800c0f4 <cleanup_stdio+0x3c>)
 800c0da:	4299      	cmp	r1, r3
 800c0dc:	d004      	beq.n	800c0e8 <cleanup_stdio+0x30>
 800c0de:	4620      	mov	r0, r4
 800c0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0e4:	f002 bf0c 	b.w	800ef00 <_fflush_r>
 800c0e8:	bd10      	pop	{r4, pc}
 800c0ea:	bf00      	nop
 800c0ec:	20000c58 	.word	0x20000c58
 800c0f0:	20000cc0 	.word	0x20000cc0
 800c0f4:	20000d28 	.word	0x20000d28

0800c0f8 <global_stdio_init.part.0>:
 800c0f8:	b510      	push	{r4, lr}
 800c0fa:	4b0b      	ldr	r3, [pc, #44]	@ (800c128 <global_stdio_init.part.0+0x30>)
 800c0fc:	4c0b      	ldr	r4, [pc, #44]	@ (800c12c <global_stdio_init.part.0+0x34>)
 800c0fe:	4a0c      	ldr	r2, [pc, #48]	@ (800c130 <global_stdio_init.part.0+0x38>)
 800c100:	601a      	str	r2, [r3, #0]
 800c102:	4620      	mov	r0, r4
 800c104:	2200      	movs	r2, #0
 800c106:	2104      	movs	r1, #4
 800c108:	f7ff ff94 	bl	800c034 <std>
 800c10c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c110:	2201      	movs	r2, #1
 800c112:	2109      	movs	r1, #9
 800c114:	f7ff ff8e 	bl	800c034 <std>
 800c118:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c11c:	2202      	movs	r2, #2
 800c11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c122:	2112      	movs	r1, #18
 800c124:	f7ff bf86 	b.w	800c034 <std>
 800c128:	20000d90 	.word	0x20000d90
 800c12c:	20000c58 	.word	0x20000c58
 800c130:	0800c0a1 	.word	0x0800c0a1

0800c134 <__sfp_lock_acquire>:
 800c134:	4801      	ldr	r0, [pc, #4]	@ (800c13c <__sfp_lock_acquire+0x8>)
 800c136:	f000 b934 	b.w	800c3a2 <__retarget_lock_acquire_recursive>
 800c13a:	bf00      	nop
 800c13c:	20000d99 	.word	0x20000d99

0800c140 <__sfp_lock_release>:
 800c140:	4801      	ldr	r0, [pc, #4]	@ (800c148 <__sfp_lock_release+0x8>)
 800c142:	f000 b92f 	b.w	800c3a4 <__retarget_lock_release_recursive>
 800c146:	bf00      	nop
 800c148:	20000d99 	.word	0x20000d99

0800c14c <__sinit>:
 800c14c:	b510      	push	{r4, lr}
 800c14e:	4604      	mov	r4, r0
 800c150:	f7ff fff0 	bl	800c134 <__sfp_lock_acquire>
 800c154:	6a23      	ldr	r3, [r4, #32]
 800c156:	b11b      	cbz	r3, 800c160 <__sinit+0x14>
 800c158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c15c:	f7ff bff0 	b.w	800c140 <__sfp_lock_release>
 800c160:	4b04      	ldr	r3, [pc, #16]	@ (800c174 <__sinit+0x28>)
 800c162:	6223      	str	r3, [r4, #32]
 800c164:	4b04      	ldr	r3, [pc, #16]	@ (800c178 <__sinit+0x2c>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1f5      	bne.n	800c158 <__sinit+0xc>
 800c16c:	f7ff ffc4 	bl	800c0f8 <global_stdio_init.part.0>
 800c170:	e7f2      	b.n	800c158 <__sinit+0xc>
 800c172:	bf00      	nop
 800c174:	0800c0b9 	.word	0x0800c0b9
 800c178:	20000d90 	.word	0x20000d90

0800c17c <_fwalk_sglue>:
 800c17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c180:	4607      	mov	r7, r0
 800c182:	4688      	mov	r8, r1
 800c184:	4614      	mov	r4, r2
 800c186:	2600      	movs	r6, #0
 800c188:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c18c:	f1b9 0901 	subs.w	r9, r9, #1
 800c190:	d505      	bpl.n	800c19e <_fwalk_sglue+0x22>
 800c192:	6824      	ldr	r4, [r4, #0]
 800c194:	2c00      	cmp	r4, #0
 800c196:	d1f7      	bne.n	800c188 <_fwalk_sglue+0xc>
 800c198:	4630      	mov	r0, r6
 800c19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c19e:	89ab      	ldrh	r3, [r5, #12]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d907      	bls.n	800c1b4 <_fwalk_sglue+0x38>
 800c1a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	d003      	beq.n	800c1b4 <_fwalk_sglue+0x38>
 800c1ac:	4629      	mov	r1, r5
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	47c0      	blx	r8
 800c1b2:	4306      	orrs	r6, r0
 800c1b4:	3568      	adds	r5, #104	@ 0x68
 800c1b6:	e7e9      	b.n	800c18c <_fwalk_sglue+0x10>

0800c1b8 <iprintf>:
 800c1b8:	b40f      	push	{r0, r1, r2, r3}
 800c1ba:	b507      	push	{r0, r1, r2, lr}
 800c1bc:	4906      	ldr	r1, [pc, #24]	@ (800c1d8 <iprintf+0x20>)
 800c1be:	ab04      	add	r3, sp, #16
 800c1c0:	6808      	ldr	r0, [r1, #0]
 800c1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1c6:	6881      	ldr	r1, [r0, #8]
 800c1c8:	9301      	str	r3, [sp, #4]
 800c1ca:	f002 fcfd 	bl	800ebc8 <_vfiprintf_r>
 800c1ce:	b003      	add	sp, #12
 800c1d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1d4:	b004      	add	sp, #16
 800c1d6:	4770      	bx	lr
 800c1d8:	20000038 	.word	0x20000038

0800c1dc <siprintf>:
 800c1dc:	b40e      	push	{r1, r2, r3}
 800c1de:	b510      	push	{r4, lr}
 800c1e0:	b09d      	sub	sp, #116	@ 0x74
 800c1e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c1e4:	9002      	str	r0, [sp, #8]
 800c1e6:	9006      	str	r0, [sp, #24]
 800c1e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c1ec:	480a      	ldr	r0, [pc, #40]	@ (800c218 <siprintf+0x3c>)
 800c1ee:	9107      	str	r1, [sp, #28]
 800c1f0:	9104      	str	r1, [sp, #16]
 800c1f2:	490a      	ldr	r1, [pc, #40]	@ (800c21c <siprintf+0x40>)
 800c1f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1f8:	9105      	str	r1, [sp, #20]
 800c1fa:	2400      	movs	r4, #0
 800c1fc:	a902      	add	r1, sp, #8
 800c1fe:	6800      	ldr	r0, [r0, #0]
 800c200:	9301      	str	r3, [sp, #4]
 800c202:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c204:	f002 fbba 	bl	800e97c <_svfiprintf_r>
 800c208:	9b02      	ldr	r3, [sp, #8]
 800c20a:	701c      	strb	r4, [r3, #0]
 800c20c:	b01d      	add	sp, #116	@ 0x74
 800c20e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c212:	b003      	add	sp, #12
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	20000038 	.word	0x20000038
 800c21c:	ffff0208 	.word	0xffff0208

0800c220 <__sread>:
 800c220:	b510      	push	{r4, lr}
 800c222:	460c      	mov	r4, r1
 800c224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c228:	f000 f86c 	bl	800c304 <_read_r>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	bfab      	itete	ge
 800c230:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c232:	89a3      	ldrhlt	r3, [r4, #12]
 800c234:	181b      	addge	r3, r3, r0
 800c236:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c23a:	bfac      	ite	ge
 800c23c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c23e:	81a3      	strhlt	r3, [r4, #12]
 800c240:	bd10      	pop	{r4, pc}

0800c242 <__swrite>:
 800c242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c246:	461f      	mov	r7, r3
 800c248:	898b      	ldrh	r3, [r1, #12]
 800c24a:	05db      	lsls	r3, r3, #23
 800c24c:	4605      	mov	r5, r0
 800c24e:	460c      	mov	r4, r1
 800c250:	4616      	mov	r6, r2
 800c252:	d505      	bpl.n	800c260 <__swrite+0x1e>
 800c254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c258:	2302      	movs	r3, #2
 800c25a:	2200      	movs	r2, #0
 800c25c:	f000 f840 	bl	800c2e0 <_lseek_r>
 800c260:	89a3      	ldrh	r3, [r4, #12]
 800c262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c26a:	81a3      	strh	r3, [r4, #12]
 800c26c:	4632      	mov	r2, r6
 800c26e:	463b      	mov	r3, r7
 800c270:	4628      	mov	r0, r5
 800c272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c276:	f000 b857 	b.w	800c328 <_write_r>

0800c27a <__sseek>:
 800c27a:	b510      	push	{r4, lr}
 800c27c:	460c      	mov	r4, r1
 800c27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c282:	f000 f82d 	bl	800c2e0 <_lseek_r>
 800c286:	1c43      	adds	r3, r0, #1
 800c288:	89a3      	ldrh	r3, [r4, #12]
 800c28a:	bf15      	itete	ne
 800c28c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c28e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c292:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c296:	81a3      	strheq	r3, [r4, #12]
 800c298:	bf18      	it	ne
 800c29a:	81a3      	strhne	r3, [r4, #12]
 800c29c:	bd10      	pop	{r4, pc}

0800c29e <__sclose>:
 800c29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2a2:	f000 b80d 	b.w	800c2c0 <_close_r>

0800c2a6 <memset>:
 800c2a6:	4402      	add	r2, r0
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d100      	bne.n	800c2b0 <memset+0xa>
 800c2ae:	4770      	bx	lr
 800c2b0:	f803 1b01 	strb.w	r1, [r3], #1
 800c2b4:	e7f9      	b.n	800c2aa <memset+0x4>
	...

0800c2b8 <_localeconv_r>:
 800c2b8:	4800      	ldr	r0, [pc, #0]	@ (800c2bc <_localeconv_r+0x4>)
 800c2ba:	4770      	bx	lr
 800c2bc:	20000178 	.word	0x20000178

0800c2c0 <_close_r>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4d06      	ldr	r5, [pc, #24]	@ (800c2dc <_close_r+0x1c>)
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	4608      	mov	r0, r1
 800c2ca:	602b      	str	r3, [r5, #0]
 800c2cc:	f7fa fdd4 	bl	8006e78 <_close>
 800c2d0:	1c43      	adds	r3, r0, #1
 800c2d2:	d102      	bne.n	800c2da <_close_r+0x1a>
 800c2d4:	682b      	ldr	r3, [r5, #0]
 800c2d6:	b103      	cbz	r3, 800c2da <_close_r+0x1a>
 800c2d8:	6023      	str	r3, [r4, #0]
 800c2da:	bd38      	pop	{r3, r4, r5, pc}
 800c2dc:	20000d94 	.word	0x20000d94

0800c2e0 <_lseek_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	4d07      	ldr	r5, [pc, #28]	@ (800c300 <_lseek_r+0x20>)
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	4608      	mov	r0, r1
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	602a      	str	r2, [r5, #0]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	f7fa fde9 	bl	8006ec6 <_lseek>
 800c2f4:	1c43      	adds	r3, r0, #1
 800c2f6:	d102      	bne.n	800c2fe <_lseek_r+0x1e>
 800c2f8:	682b      	ldr	r3, [r5, #0]
 800c2fa:	b103      	cbz	r3, 800c2fe <_lseek_r+0x1e>
 800c2fc:	6023      	str	r3, [r4, #0]
 800c2fe:	bd38      	pop	{r3, r4, r5, pc}
 800c300:	20000d94 	.word	0x20000d94

0800c304 <_read_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	4d07      	ldr	r5, [pc, #28]	@ (800c324 <_read_r+0x20>)
 800c308:	4604      	mov	r4, r0
 800c30a:	4608      	mov	r0, r1
 800c30c:	4611      	mov	r1, r2
 800c30e:	2200      	movs	r2, #0
 800c310:	602a      	str	r2, [r5, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	f7fa fd93 	bl	8006e3e <_read>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d102      	bne.n	800c322 <_read_r+0x1e>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	b103      	cbz	r3, 800c322 <_read_r+0x1e>
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	20000d94 	.word	0x20000d94

0800c328 <_write_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	4d07      	ldr	r5, [pc, #28]	@ (800c348 <_write_r+0x20>)
 800c32c:	4604      	mov	r4, r0
 800c32e:	4608      	mov	r0, r1
 800c330:	4611      	mov	r1, r2
 800c332:	2200      	movs	r2, #0
 800c334:	602a      	str	r2, [r5, #0]
 800c336:	461a      	mov	r2, r3
 800c338:	f7f7 fbb8 	bl	8003aac <_write>
 800c33c:	1c43      	adds	r3, r0, #1
 800c33e:	d102      	bne.n	800c346 <_write_r+0x1e>
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	b103      	cbz	r3, 800c346 <_write_r+0x1e>
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	bd38      	pop	{r3, r4, r5, pc}
 800c348:	20000d94 	.word	0x20000d94

0800c34c <__errno>:
 800c34c:	4b01      	ldr	r3, [pc, #4]	@ (800c354 <__errno+0x8>)
 800c34e:	6818      	ldr	r0, [r3, #0]
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	20000038 	.word	0x20000038

0800c358 <__libc_init_array>:
 800c358:	b570      	push	{r4, r5, r6, lr}
 800c35a:	4d0d      	ldr	r5, [pc, #52]	@ (800c390 <__libc_init_array+0x38>)
 800c35c:	4c0d      	ldr	r4, [pc, #52]	@ (800c394 <__libc_init_array+0x3c>)
 800c35e:	1b64      	subs	r4, r4, r5
 800c360:	10a4      	asrs	r4, r4, #2
 800c362:	2600      	movs	r6, #0
 800c364:	42a6      	cmp	r6, r4
 800c366:	d109      	bne.n	800c37c <__libc_init_array+0x24>
 800c368:	4d0b      	ldr	r5, [pc, #44]	@ (800c398 <__libc_init_array+0x40>)
 800c36a:	4c0c      	ldr	r4, [pc, #48]	@ (800c39c <__libc_init_array+0x44>)
 800c36c:	f006 f8c6 	bl	80124fc <_init>
 800c370:	1b64      	subs	r4, r4, r5
 800c372:	10a4      	asrs	r4, r4, #2
 800c374:	2600      	movs	r6, #0
 800c376:	42a6      	cmp	r6, r4
 800c378:	d105      	bne.n	800c386 <__libc_init_array+0x2e>
 800c37a:	bd70      	pop	{r4, r5, r6, pc}
 800c37c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c380:	4798      	blx	r3
 800c382:	3601      	adds	r6, #1
 800c384:	e7ee      	b.n	800c364 <__libc_init_array+0xc>
 800c386:	f855 3b04 	ldr.w	r3, [r5], #4
 800c38a:	4798      	blx	r3
 800c38c:	3601      	adds	r6, #1
 800c38e:	e7f2      	b.n	800c376 <__libc_init_array+0x1e>
 800c390:	08012ec8 	.word	0x08012ec8
 800c394:	08012ec8 	.word	0x08012ec8
 800c398:	08012ec8 	.word	0x08012ec8
 800c39c:	08012ecc 	.word	0x08012ecc

0800c3a0 <__retarget_lock_init_recursive>:
 800c3a0:	4770      	bx	lr

0800c3a2 <__retarget_lock_acquire_recursive>:
 800c3a2:	4770      	bx	lr

0800c3a4 <__retarget_lock_release_recursive>:
 800c3a4:	4770      	bx	lr
	...

0800c3a8 <nanf>:
 800c3a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c3b0 <nanf+0x8>
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	7fc00000 	.word	0x7fc00000

0800c3b4 <quorem>:
 800c3b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b8:	6903      	ldr	r3, [r0, #16]
 800c3ba:	690c      	ldr	r4, [r1, #16]
 800c3bc:	42a3      	cmp	r3, r4
 800c3be:	4607      	mov	r7, r0
 800c3c0:	db7e      	blt.n	800c4c0 <quorem+0x10c>
 800c3c2:	3c01      	subs	r4, #1
 800c3c4:	f101 0814 	add.w	r8, r1, #20
 800c3c8:	00a3      	lsls	r3, r4, #2
 800c3ca:	f100 0514 	add.w	r5, r0, #20
 800c3ce:	9300      	str	r3, [sp, #0]
 800c3d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3d4:	9301      	str	r3, [sp, #4]
 800c3d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c3da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c3e6:	fbb2 f6f3 	udiv	r6, r2, r3
 800c3ea:	d32e      	bcc.n	800c44a <quorem+0x96>
 800c3ec:	f04f 0a00 	mov.w	sl, #0
 800c3f0:	46c4      	mov	ip, r8
 800c3f2:	46ae      	mov	lr, r5
 800c3f4:	46d3      	mov	fp, sl
 800c3f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c3fa:	b298      	uxth	r0, r3
 800c3fc:	fb06 a000 	mla	r0, r6, r0, sl
 800c400:	0c02      	lsrs	r2, r0, #16
 800c402:	0c1b      	lsrs	r3, r3, #16
 800c404:	fb06 2303 	mla	r3, r6, r3, r2
 800c408:	f8de 2000 	ldr.w	r2, [lr]
 800c40c:	b280      	uxth	r0, r0
 800c40e:	b292      	uxth	r2, r2
 800c410:	1a12      	subs	r2, r2, r0
 800c412:	445a      	add	r2, fp
 800c414:	f8de 0000 	ldr.w	r0, [lr]
 800c418:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c422:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c426:	b292      	uxth	r2, r2
 800c428:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c42c:	45e1      	cmp	r9, ip
 800c42e:	f84e 2b04 	str.w	r2, [lr], #4
 800c432:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c436:	d2de      	bcs.n	800c3f6 <quorem+0x42>
 800c438:	9b00      	ldr	r3, [sp, #0]
 800c43a:	58eb      	ldr	r3, [r5, r3]
 800c43c:	b92b      	cbnz	r3, 800c44a <quorem+0x96>
 800c43e:	9b01      	ldr	r3, [sp, #4]
 800c440:	3b04      	subs	r3, #4
 800c442:	429d      	cmp	r5, r3
 800c444:	461a      	mov	r2, r3
 800c446:	d32f      	bcc.n	800c4a8 <quorem+0xf4>
 800c448:	613c      	str	r4, [r7, #16]
 800c44a:	4638      	mov	r0, r7
 800c44c:	f001 f9c8 	bl	800d7e0 <__mcmp>
 800c450:	2800      	cmp	r0, #0
 800c452:	db25      	blt.n	800c4a0 <quorem+0xec>
 800c454:	4629      	mov	r1, r5
 800c456:	2000      	movs	r0, #0
 800c458:	f858 2b04 	ldr.w	r2, [r8], #4
 800c45c:	f8d1 c000 	ldr.w	ip, [r1]
 800c460:	fa1f fe82 	uxth.w	lr, r2
 800c464:	fa1f f38c 	uxth.w	r3, ip
 800c468:	eba3 030e 	sub.w	r3, r3, lr
 800c46c:	4403      	add	r3, r0
 800c46e:	0c12      	lsrs	r2, r2, #16
 800c470:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c474:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c478:	b29b      	uxth	r3, r3
 800c47a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c47e:	45c1      	cmp	r9, r8
 800c480:	f841 3b04 	str.w	r3, [r1], #4
 800c484:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c488:	d2e6      	bcs.n	800c458 <quorem+0xa4>
 800c48a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c48e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c492:	b922      	cbnz	r2, 800c49e <quorem+0xea>
 800c494:	3b04      	subs	r3, #4
 800c496:	429d      	cmp	r5, r3
 800c498:	461a      	mov	r2, r3
 800c49a:	d30b      	bcc.n	800c4b4 <quorem+0x100>
 800c49c:	613c      	str	r4, [r7, #16]
 800c49e:	3601      	adds	r6, #1
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	b003      	add	sp, #12
 800c4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a8:	6812      	ldr	r2, [r2, #0]
 800c4aa:	3b04      	subs	r3, #4
 800c4ac:	2a00      	cmp	r2, #0
 800c4ae:	d1cb      	bne.n	800c448 <quorem+0x94>
 800c4b0:	3c01      	subs	r4, #1
 800c4b2:	e7c6      	b.n	800c442 <quorem+0x8e>
 800c4b4:	6812      	ldr	r2, [r2, #0]
 800c4b6:	3b04      	subs	r3, #4
 800c4b8:	2a00      	cmp	r2, #0
 800c4ba:	d1ef      	bne.n	800c49c <quorem+0xe8>
 800c4bc:	3c01      	subs	r4, #1
 800c4be:	e7ea      	b.n	800c496 <quorem+0xe2>
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	e7ee      	b.n	800c4a2 <quorem+0xee>
 800c4c4:	0000      	movs	r0, r0
	...

0800c4c8 <_dtoa_r>:
 800c4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4cc:	69c7      	ldr	r7, [r0, #28]
 800c4ce:	b097      	sub	sp, #92	@ 0x5c
 800c4d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c4d4:	ec55 4b10 	vmov	r4, r5, d0
 800c4d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c4da:	9107      	str	r1, [sp, #28]
 800c4dc:	4681      	mov	r9, r0
 800c4de:	920c      	str	r2, [sp, #48]	@ 0x30
 800c4e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c4e2:	b97f      	cbnz	r7, 800c504 <_dtoa_r+0x3c>
 800c4e4:	2010      	movs	r0, #16
 800c4e6:	f000 fe09 	bl	800d0fc <malloc>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	f8c9 001c 	str.w	r0, [r9, #28]
 800c4f0:	b920      	cbnz	r0, 800c4fc <_dtoa_r+0x34>
 800c4f2:	4ba9      	ldr	r3, [pc, #676]	@ (800c798 <_dtoa_r+0x2d0>)
 800c4f4:	21ef      	movs	r1, #239	@ 0xef
 800c4f6:	48a9      	ldr	r0, [pc, #676]	@ (800c79c <_dtoa_r+0x2d4>)
 800c4f8:	f002 fe12 	bl	800f120 <__assert_func>
 800c4fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c500:	6007      	str	r7, [r0, #0]
 800c502:	60c7      	str	r7, [r0, #12]
 800c504:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c508:	6819      	ldr	r1, [r3, #0]
 800c50a:	b159      	cbz	r1, 800c524 <_dtoa_r+0x5c>
 800c50c:	685a      	ldr	r2, [r3, #4]
 800c50e:	604a      	str	r2, [r1, #4]
 800c510:	2301      	movs	r3, #1
 800c512:	4093      	lsls	r3, r2
 800c514:	608b      	str	r3, [r1, #8]
 800c516:	4648      	mov	r0, r9
 800c518:	f000 fee6 	bl	800d2e8 <_Bfree>
 800c51c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c520:	2200      	movs	r2, #0
 800c522:	601a      	str	r2, [r3, #0]
 800c524:	1e2b      	subs	r3, r5, #0
 800c526:	bfb9      	ittee	lt
 800c528:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c52c:	9305      	strlt	r3, [sp, #20]
 800c52e:	2300      	movge	r3, #0
 800c530:	6033      	strge	r3, [r6, #0]
 800c532:	9f05      	ldr	r7, [sp, #20]
 800c534:	4b9a      	ldr	r3, [pc, #616]	@ (800c7a0 <_dtoa_r+0x2d8>)
 800c536:	bfbc      	itt	lt
 800c538:	2201      	movlt	r2, #1
 800c53a:	6032      	strlt	r2, [r6, #0]
 800c53c:	43bb      	bics	r3, r7
 800c53e:	d112      	bne.n	800c566 <_dtoa_r+0x9e>
 800c540:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c542:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c546:	6013      	str	r3, [r2, #0]
 800c548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c54c:	4323      	orrs	r3, r4
 800c54e:	f000 855a 	beq.w	800d006 <_dtoa_r+0xb3e>
 800c552:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c554:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c7b4 <_dtoa_r+0x2ec>
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f000 855c 	beq.w	800d016 <_dtoa_r+0xb4e>
 800c55e:	f10a 0303 	add.w	r3, sl, #3
 800c562:	f000 bd56 	b.w	800d012 <_dtoa_r+0xb4a>
 800c566:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c56a:	2200      	movs	r2, #0
 800c56c:	ec51 0b17 	vmov	r0, r1, d7
 800c570:	2300      	movs	r3, #0
 800c572:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c576:	f7f4 faaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800c57a:	4680      	mov	r8, r0
 800c57c:	b158      	cbz	r0, 800c596 <_dtoa_r+0xce>
 800c57e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c580:	2301      	movs	r3, #1
 800c582:	6013      	str	r3, [r2, #0]
 800c584:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c586:	b113      	cbz	r3, 800c58e <_dtoa_r+0xc6>
 800c588:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c58a:	4b86      	ldr	r3, [pc, #536]	@ (800c7a4 <_dtoa_r+0x2dc>)
 800c58c:	6013      	str	r3, [r2, #0]
 800c58e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c7b8 <_dtoa_r+0x2f0>
 800c592:	f000 bd40 	b.w	800d016 <_dtoa_r+0xb4e>
 800c596:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c59a:	aa14      	add	r2, sp, #80	@ 0x50
 800c59c:	a915      	add	r1, sp, #84	@ 0x54
 800c59e:	4648      	mov	r0, r9
 800c5a0:	f001 fa3e 	bl	800da20 <__d2b>
 800c5a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c5a8:	9002      	str	r0, [sp, #8]
 800c5aa:	2e00      	cmp	r6, #0
 800c5ac:	d078      	beq.n	800c6a0 <_dtoa_r+0x1d8>
 800c5ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c5b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c5bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c5c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c5c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	4b76      	ldr	r3, [pc, #472]	@ (800c7a8 <_dtoa_r+0x2e0>)
 800c5ce:	f7f3 fe63 	bl	8000298 <__aeabi_dsub>
 800c5d2:	a36b      	add	r3, pc, #428	@ (adr r3, 800c780 <_dtoa_r+0x2b8>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	f7f4 f816 	bl	8000608 <__aeabi_dmul>
 800c5dc:	a36a      	add	r3, pc, #424	@ (adr r3, 800c788 <_dtoa_r+0x2c0>)
 800c5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e2:	f7f3 fe5b 	bl	800029c <__adddf3>
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	460d      	mov	r5, r1
 800c5ec:	f7f3 ffa2 	bl	8000534 <__aeabi_i2d>
 800c5f0:	a367      	add	r3, pc, #412	@ (adr r3, 800c790 <_dtoa_r+0x2c8>)
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	f7f4 f807 	bl	8000608 <__aeabi_dmul>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4620      	mov	r0, r4
 800c600:	4629      	mov	r1, r5
 800c602:	f7f3 fe4b 	bl	800029c <__adddf3>
 800c606:	4604      	mov	r4, r0
 800c608:	460d      	mov	r5, r1
 800c60a:	f7f4 faad 	bl	8000b68 <__aeabi_d2iz>
 800c60e:	2200      	movs	r2, #0
 800c610:	4607      	mov	r7, r0
 800c612:	2300      	movs	r3, #0
 800c614:	4620      	mov	r0, r4
 800c616:	4629      	mov	r1, r5
 800c618:	f7f4 fa68 	bl	8000aec <__aeabi_dcmplt>
 800c61c:	b140      	cbz	r0, 800c630 <_dtoa_r+0x168>
 800c61e:	4638      	mov	r0, r7
 800c620:	f7f3 ff88 	bl	8000534 <__aeabi_i2d>
 800c624:	4622      	mov	r2, r4
 800c626:	462b      	mov	r3, r5
 800c628:	f7f4 fa56 	bl	8000ad8 <__aeabi_dcmpeq>
 800c62c:	b900      	cbnz	r0, 800c630 <_dtoa_r+0x168>
 800c62e:	3f01      	subs	r7, #1
 800c630:	2f16      	cmp	r7, #22
 800c632:	d852      	bhi.n	800c6da <_dtoa_r+0x212>
 800c634:	4b5d      	ldr	r3, [pc, #372]	@ (800c7ac <_dtoa_r+0x2e4>)
 800c636:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c642:	f7f4 fa53 	bl	8000aec <__aeabi_dcmplt>
 800c646:	2800      	cmp	r0, #0
 800c648:	d049      	beq.n	800c6de <_dtoa_r+0x216>
 800c64a:	3f01      	subs	r7, #1
 800c64c:	2300      	movs	r3, #0
 800c64e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c650:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c652:	1b9b      	subs	r3, r3, r6
 800c654:	1e5a      	subs	r2, r3, #1
 800c656:	bf45      	ittet	mi
 800c658:	f1c3 0301 	rsbmi	r3, r3, #1
 800c65c:	9300      	strmi	r3, [sp, #0]
 800c65e:	2300      	movpl	r3, #0
 800c660:	2300      	movmi	r3, #0
 800c662:	9206      	str	r2, [sp, #24]
 800c664:	bf54      	ite	pl
 800c666:	9300      	strpl	r3, [sp, #0]
 800c668:	9306      	strmi	r3, [sp, #24]
 800c66a:	2f00      	cmp	r7, #0
 800c66c:	db39      	blt.n	800c6e2 <_dtoa_r+0x21a>
 800c66e:	9b06      	ldr	r3, [sp, #24]
 800c670:	970d      	str	r7, [sp, #52]	@ 0x34
 800c672:	443b      	add	r3, r7
 800c674:	9306      	str	r3, [sp, #24]
 800c676:	2300      	movs	r3, #0
 800c678:	9308      	str	r3, [sp, #32]
 800c67a:	9b07      	ldr	r3, [sp, #28]
 800c67c:	2b09      	cmp	r3, #9
 800c67e:	d863      	bhi.n	800c748 <_dtoa_r+0x280>
 800c680:	2b05      	cmp	r3, #5
 800c682:	bfc4      	itt	gt
 800c684:	3b04      	subgt	r3, #4
 800c686:	9307      	strgt	r3, [sp, #28]
 800c688:	9b07      	ldr	r3, [sp, #28]
 800c68a:	f1a3 0302 	sub.w	r3, r3, #2
 800c68e:	bfcc      	ite	gt
 800c690:	2400      	movgt	r4, #0
 800c692:	2401      	movle	r4, #1
 800c694:	2b03      	cmp	r3, #3
 800c696:	d863      	bhi.n	800c760 <_dtoa_r+0x298>
 800c698:	e8df f003 	tbb	[pc, r3]
 800c69c:	2b375452 	.word	0x2b375452
 800c6a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c6a4:	441e      	add	r6, r3
 800c6a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c6aa:	2b20      	cmp	r3, #32
 800c6ac:	bfc1      	itttt	gt
 800c6ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c6b2:	409f      	lslgt	r7, r3
 800c6b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c6b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c6bc:	bfd6      	itet	le
 800c6be:	f1c3 0320 	rsble	r3, r3, #32
 800c6c2:	ea47 0003 	orrgt.w	r0, r7, r3
 800c6c6:	fa04 f003 	lslle.w	r0, r4, r3
 800c6ca:	f7f3 ff23 	bl	8000514 <__aeabi_ui2d>
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c6d4:	3e01      	subs	r6, #1
 800c6d6:	9212      	str	r2, [sp, #72]	@ 0x48
 800c6d8:	e776      	b.n	800c5c8 <_dtoa_r+0x100>
 800c6da:	2301      	movs	r3, #1
 800c6dc:	e7b7      	b.n	800c64e <_dtoa_r+0x186>
 800c6de:	9010      	str	r0, [sp, #64]	@ 0x40
 800c6e0:	e7b6      	b.n	800c650 <_dtoa_r+0x188>
 800c6e2:	9b00      	ldr	r3, [sp, #0]
 800c6e4:	1bdb      	subs	r3, r3, r7
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	427b      	negs	r3, r7
 800c6ea:	9308      	str	r3, [sp, #32]
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	930d      	str	r3, [sp, #52]	@ 0x34
 800c6f0:	e7c3      	b.n	800c67a <_dtoa_r+0x1b2>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c6f8:	eb07 0b03 	add.w	fp, r7, r3
 800c6fc:	f10b 0301 	add.w	r3, fp, #1
 800c700:	2b01      	cmp	r3, #1
 800c702:	9303      	str	r3, [sp, #12]
 800c704:	bfb8      	it	lt
 800c706:	2301      	movlt	r3, #1
 800c708:	e006      	b.n	800c718 <_dtoa_r+0x250>
 800c70a:	2301      	movs	r3, #1
 800c70c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c70e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c710:	2b00      	cmp	r3, #0
 800c712:	dd28      	ble.n	800c766 <_dtoa_r+0x29e>
 800c714:	469b      	mov	fp, r3
 800c716:	9303      	str	r3, [sp, #12]
 800c718:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c71c:	2100      	movs	r1, #0
 800c71e:	2204      	movs	r2, #4
 800c720:	f102 0514 	add.w	r5, r2, #20
 800c724:	429d      	cmp	r5, r3
 800c726:	d926      	bls.n	800c776 <_dtoa_r+0x2ae>
 800c728:	6041      	str	r1, [r0, #4]
 800c72a:	4648      	mov	r0, r9
 800c72c:	f000 fd9c 	bl	800d268 <_Balloc>
 800c730:	4682      	mov	sl, r0
 800c732:	2800      	cmp	r0, #0
 800c734:	d142      	bne.n	800c7bc <_dtoa_r+0x2f4>
 800c736:	4b1e      	ldr	r3, [pc, #120]	@ (800c7b0 <_dtoa_r+0x2e8>)
 800c738:	4602      	mov	r2, r0
 800c73a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c73e:	e6da      	b.n	800c4f6 <_dtoa_r+0x2e>
 800c740:	2300      	movs	r3, #0
 800c742:	e7e3      	b.n	800c70c <_dtoa_r+0x244>
 800c744:	2300      	movs	r3, #0
 800c746:	e7d5      	b.n	800c6f4 <_dtoa_r+0x22c>
 800c748:	2401      	movs	r4, #1
 800c74a:	2300      	movs	r3, #0
 800c74c:	9307      	str	r3, [sp, #28]
 800c74e:	9409      	str	r4, [sp, #36]	@ 0x24
 800c750:	f04f 3bff 	mov.w	fp, #4294967295
 800c754:	2200      	movs	r2, #0
 800c756:	f8cd b00c 	str.w	fp, [sp, #12]
 800c75a:	2312      	movs	r3, #18
 800c75c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c75e:	e7db      	b.n	800c718 <_dtoa_r+0x250>
 800c760:	2301      	movs	r3, #1
 800c762:	9309      	str	r3, [sp, #36]	@ 0x24
 800c764:	e7f4      	b.n	800c750 <_dtoa_r+0x288>
 800c766:	f04f 0b01 	mov.w	fp, #1
 800c76a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c76e:	465b      	mov	r3, fp
 800c770:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c774:	e7d0      	b.n	800c718 <_dtoa_r+0x250>
 800c776:	3101      	adds	r1, #1
 800c778:	0052      	lsls	r2, r2, #1
 800c77a:	e7d1      	b.n	800c720 <_dtoa_r+0x258>
 800c77c:	f3af 8000 	nop.w
 800c780:	636f4361 	.word	0x636f4361
 800c784:	3fd287a7 	.word	0x3fd287a7
 800c788:	8b60c8b3 	.word	0x8b60c8b3
 800c78c:	3fc68a28 	.word	0x3fc68a28
 800c790:	509f79fb 	.word	0x509f79fb
 800c794:	3fd34413 	.word	0x3fd34413
 800c798:	08012622 	.word	0x08012622
 800c79c:	08012639 	.word	0x08012639
 800c7a0:	7ff00000 	.word	0x7ff00000
 800c7a4:	080125ed 	.word	0x080125ed
 800c7a8:	3ff80000 	.word	0x3ff80000
 800c7ac:	080127e8 	.word	0x080127e8
 800c7b0:	08012691 	.word	0x08012691
 800c7b4:	0801261e 	.word	0x0801261e
 800c7b8:	080125ec 	.word	0x080125ec
 800c7bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c7c0:	6018      	str	r0, [r3, #0]
 800c7c2:	9b03      	ldr	r3, [sp, #12]
 800c7c4:	2b0e      	cmp	r3, #14
 800c7c6:	f200 80a1 	bhi.w	800c90c <_dtoa_r+0x444>
 800c7ca:	2c00      	cmp	r4, #0
 800c7cc:	f000 809e 	beq.w	800c90c <_dtoa_r+0x444>
 800c7d0:	2f00      	cmp	r7, #0
 800c7d2:	dd33      	ble.n	800c83c <_dtoa_r+0x374>
 800c7d4:	4b9c      	ldr	r3, [pc, #624]	@ (800ca48 <_dtoa_r+0x580>)
 800c7d6:	f007 020f 	and.w	r2, r7, #15
 800c7da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7de:	ed93 7b00 	vldr	d7, [r3]
 800c7e2:	05f8      	lsls	r0, r7, #23
 800c7e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c7e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c7ec:	d516      	bpl.n	800c81c <_dtoa_r+0x354>
 800c7ee:	4b97      	ldr	r3, [pc, #604]	@ (800ca4c <_dtoa_r+0x584>)
 800c7f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c7f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c7f8:	f7f4 f830 	bl	800085c <__aeabi_ddiv>
 800c7fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c800:	f004 040f 	and.w	r4, r4, #15
 800c804:	2603      	movs	r6, #3
 800c806:	4d91      	ldr	r5, [pc, #580]	@ (800ca4c <_dtoa_r+0x584>)
 800c808:	b954      	cbnz	r4, 800c820 <_dtoa_r+0x358>
 800c80a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c80e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c812:	f7f4 f823 	bl	800085c <__aeabi_ddiv>
 800c816:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c81a:	e028      	b.n	800c86e <_dtoa_r+0x3a6>
 800c81c:	2602      	movs	r6, #2
 800c81e:	e7f2      	b.n	800c806 <_dtoa_r+0x33e>
 800c820:	07e1      	lsls	r1, r4, #31
 800c822:	d508      	bpl.n	800c836 <_dtoa_r+0x36e>
 800c824:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c828:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c82c:	f7f3 feec 	bl	8000608 <__aeabi_dmul>
 800c830:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c834:	3601      	adds	r6, #1
 800c836:	1064      	asrs	r4, r4, #1
 800c838:	3508      	adds	r5, #8
 800c83a:	e7e5      	b.n	800c808 <_dtoa_r+0x340>
 800c83c:	f000 80af 	beq.w	800c99e <_dtoa_r+0x4d6>
 800c840:	427c      	negs	r4, r7
 800c842:	4b81      	ldr	r3, [pc, #516]	@ (800ca48 <_dtoa_r+0x580>)
 800c844:	4d81      	ldr	r5, [pc, #516]	@ (800ca4c <_dtoa_r+0x584>)
 800c846:	f004 020f 	and.w	r2, r4, #15
 800c84a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c852:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c856:	f7f3 fed7 	bl	8000608 <__aeabi_dmul>
 800c85a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c85e:	1124      	asrs	r4, r4, #4
 800c860:	2300      	movs	r3, #0
 800c862:	2602      	movs	r6, #2
 800c864:	2c00      	cmp	r4, #0
 800c866:	f040 808f 	bne.w	800c988 <_dtoa_r+0x4c0>
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1d3      	bne.n	800c816 <_dtoa_r+0x34e>
 800c86e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c870:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c874:	2b00      	cmp	r3, #0
 800c876:	f000 8094 	beq.w	800c9a2 <_dtoa_r+0x4da>
 800c87a:	4b75      	ldr	r3, [pc, #468]	@ (800ca50 <_dtoa_r+0x588>)
 800c87c:	2200      	movs	r2, #0
 800c87e:	4620      	mov	r0, r4
 800c880:	4629      	mov	r1, r5
 800c882:	f7f4 f933 	bl	8000aec <__aeabi_dcmplt>
 800c886:	2800      	cmp	r0, #0
 800c888:	f000 808b 	beq.w	800c9a2 <_dtoa_r+0x4da>
 800c88c:	9b03      	ldr	r3, [sp, #12]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	f000 8087 	beq.w	800c9a2 <_dtoa_r+0x4da>
 800c894:	f1bb 0f00 	cmp.w	fp, #0
 800c898:	dd34      	ble.n	800c904 <_dtoa_r+0x43c>
 800c89a:	4620      	mov	r0, r4
 800c89c:	4b6d      	ldr	r3, [pc, #436]	@ (800ca54 <_dtoa_r+0x58c>)
 800c89e:	2200      	movs	r2, #0
 800c8a0:	4629      	mov	r1, r5
 800c8a2:	f7f3 feb1 	bl	8000608 <__aeabi_dmul>
 800c8a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8aa:	f107 38ff 	add.w	r8, r7, #4294967295
 800c8ae:	3601      	adds	r6, #1
 800c8b0:	465c      	mov	r4, fp
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	f7f3 fe3e 	bl	8000534 <__aeabi_i2d>
 800c8b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8bc:	f7f3 fea4 	bl	8000608 <__aeabi_dmul>
 800c8c0:	4b65      	ldr	r3, [pc, #404]	@ (800ca58 <_dtoa_r+0x590>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f7f3 fcea 	bl	800029c <__adddf3>
 800c8c8:	4605      	mov	r5, r0
 800c8ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c8ce:	2c00      	cmp	r4, #0
 800c8d0:	d16a      	bne.n	800c9a8 <_dtoa_r+0x4e0>
 800c8d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8d6:	4b61      	ldr	r3, [pc, #388]	@ (800ca5c <_dtoa_r+0x594>)
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f7f3 fcdd 	bl	8000298 <__aeabi_dsub>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c8e6:	462a      	mov	r2, r5
 800c8e8:	4633      	mov	r3, r6
 800c8ea:	f7f4 f91d 	bl	8000b28 <__aeabi_dcmpgt>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	f040 8298 	bne.w	800ce24 <_dtoa_r+0x95c>
 800c8f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8f8:	462a      	mov	r2, r5
 800c8fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c8fe:	f7f4 f8f5 	bl	8000aec <__aeabi_dcmplt>
 800c902:	bb38      	cbnz	r0, 800c954 <_dtoa_r+0x48c>
 800c904:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c908:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c90c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f2c0 8157 	blt.w	800cbc2 <_dtoa_r+0x6fa>
 800c914:	2f0e      	cmp	r7, #14
 800c916:	f300 8154 	bgt.w	800cbc2 <_dtoa_r+0x6fa>
 800c91a:	4b4b      	ldr	r3, [pc, #300]	@ (800ca48 <_dtoa_r+0x580>)
 800c91c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c920:	ed93 7b00 	vldr	d7, [r3]
 800c924:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c926:	2b00      	cmp	r3, #0
 800c928:	ed8d 7b00 	vstr	d7, [sp]
 800c92c:	f280 80e5 	bge.w	800cafa <_dtoa_r+0x632>
 800c930:	9b03      	ldr	r3, [sp, #12]
 800c932:	2b00      	cmp	r3, #0
 800c934:	f300 80e1 	bgt.w	800cafa <_dtoa_r+0x632>
 800c938:	d10c      	bne.n	800c954 <_dtoa_r+0x48c>
 800c93a:	4b48      	ldr	r3, [pc, #288]	@ (800ca5c <_dtoa_r+0x594>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	ec51 0b17 	vmov	r0, r1, d7
 800c942:	f7f3 fe61 	bl	8000608 <__aeabi_dmul>
 800c946:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c94a:	f7f4 f8e3 	bl	8000b14 <__aeabi_dcmpge>
 800c94e:	2800      	cmp	r0, #0
 800c950:	f000 8266 	beq.w	800ce20 <_dtoa_r+0x958>
 800c954:	2400      	movs	r4, #0
 800c956:	4625      	mov	r5, r4
 800c958:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c95a:	4656      	mov	r6, sl
 800c95c:	ea6f 0803 	mvn.w	r8, r3
 800c960:	2700      	movs	r7, #0
 800c962:	4621      	mov	r1, r4
 800c964:	4648      	mov	r0, r9
 800c966:	f000 fcbf 	bl	800d2e8 <_Bfree>
 800c96a:	2d00      	cmp	r5, #0
 800c96c:	f000 80bd 	beq.w	800caea <_dtoa_r+0x622>
 800c970:	b12f      	cbz	r7, 800c97e <_dtoa_r+0x4b6>
 800c972:	42af      	cmp	r7, r5
 800c974:	d003      	beq.n	800c97e <_dtoa_r+0x4b6>
 800c976:	4639      	mov	r1, r7
 800c978:	4648      	mov	r0, r9
 800c97a:	f000 fcb5 	bl	800d2e8 <_Bfree>
 800c97e:	4629      	mov	r1, r5
 800c980:	4648      	mov	r0, r9
 800c982:	f000 fcb1 	bl	800d2e8 <_Bfree>
 800c986:	e0b0      	b.n	800caea <_dtoa_r+0x622>
 800c988:	07e2      	lsls	r2, r4, #31
 800c98a:	d505      	bpl.n	800c998 <_dtoa_r+0x4d0>
 800c98c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c990:	f7f3 fe3a 	bl	8000608 <__aeabi_dmul>
 800c994:	3601      	adds	r6, #1
 800c996:	2301      	movs	r3, #1
 800c998:	1064      	asrs	r4, r4, #1
 800c99a:	3508      	adds	r5, #8
 800c99c:	e762      	b.n	800c864 <_dtoa_r+0x39c>
 800c99e:	2602      	movs	r6, #2
 800c9a0:	e765      	b.n	800c86e <_dtoa_r+0x3a6>
 800c9a2:	9c03      	ldr	r4, [sp, #12]
 800c9a4:	46b8      	mov	r8, r7
 800c9a6:	e784      	b.n	800c8b2 <_dtoa_r+0x3ea>
 800c9a8:	4b27      	ldr	r3, [pc, #156]	@ (800ca48 <_dtoa_r+0x580>)
 800c9aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c9ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c9b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c9b4:	4454      	add	r4, sl
 800c9b6:	2900      	cmp	r1, #0
 800c9b8:	d054      	beq.n	800ca64 <_dtoa_r+0x59c>
 800c9ba:	4929      	ldr	r1, [pc, #164]	@ (800ca60 <_dtoa_r+0x598>)
 800c9bc:	2000      	movs	r0, #0
 800c9be:	f7f3 ff4d 	bl	800085c <__aeabi_ddiv>
 800c9c2:	4633      	mov	r3, r6
 800c9c4:	462a      	mov	r2, r5
 800c9c6:	f7f3 fc67 	bl	8000298 <__aeabi_dsub>
 800c9ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c9ce:	4656      	mov	r6, sl
 800c9d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9d4:	f7f4 f8c8 	bl	8000b68 <__aeabi_d2iz>
 800c9d8:	4605      	mov	r5, r0
 800c9da:	f7f3 fdab 	bl	8000534 <__aeabi_i2d>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9e6:	f7f3 fc57 	bl	8000298 <__aeabi_dsub>
 800c9ea:	3530      	adds	r5, #48	@ 0x30
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c9f4:	f806 5b01 	strb.w	r5, [r6], #1
 800c9f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c9fc:	f7f4 f876 	bl	8000aec <__aeabi_dcmplt>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d172      	bne.n	800caea <_dtoa_r+0x622>
 800ca04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca08:	4911      	ldr	r1, [pc, #68]	@ (800ca50 <_dtoa_r+0x588>)
 800ca0a:	2000      	movs	r0, #0
 800ca0c:	f7f3 fc44 	bl	8000298 <__aeabi_dsub>
 800ca10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ca14:	f7f4 f86a 	bl	8000aec <__aeabi_dcmplt>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	f040 80b4 	bne.w	800cb86 <_dtoa_r+0x6be>
 800ca1e:	42a6      	cmp	r6, r4
 800ca20:	f43f af70 	beq.w	800c904 <_dtoa_r+0x43c>
 800ca24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ca28:	4b0a      	ldr	r3, [pc, #40]	@ (800ca54 <_dtoa_r+0x58c>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f7f3 fdec 	bl	8000608 <__aeabi_dmul>
 800ca30:	4b08      	ldr	r3, [pc, #32]	@ (800ca54 <_dtoa_r+0x58c>)
 800ca32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ca36:	2200      	movs	r2, #0
 800ca38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca3c:	f7f3 fde4 	bl	8000608 <__aeabi_dmul>
 800ca40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca44:	e7c4      	b.n	800c9d0 <_dtoa_r+0x508>
 800ca46:	bf00      	nop
 800ca48:	080127e8 	.word	0x080127e8
 800ca4c:	080127c0 	.word	0x080127c0
 800ca50:	3ff00000 	.word	0x3ff00000
 800ca54:	40240000 	.word	0x40240000
 800ca58:	401c0000 	.word	0x401c0000
 800ca5c:	40140000 	.word	0x40140000
 800ca60:	3fe00000 	.word	0x3fe00000
 800ca64:	4631      	mov	r1, r6
 800ca66:	4628      	mov	r0, r5
 800ca68:	f7f3 fdce 	bl	8000608 <__aeabi_dmul>
 800ca6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ca70:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ca72:	4656      	mov	r6, sl
 800ca74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca78:	f7f4 f876 	bl	8000b68 <__aeabi_d2iz>
 800ca7c:	4605      	mov	r5, r0
 800ca7e:	f7f3 fd59 	bl	8000534 <__aeabi_i2d>
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca8a:	f7f3 fc05 	bl	8000298 <__aeabi_dsub>
 800ca8e:	3530      	adds	r5, #48	@ 0x30
 800ca90:	f806 5b01 	strb.w	r5, [r6], #1
 800ca94:	4602      	mov	r2, r0
 800ca96:	460b      	mov	r3, r1
 800ca98:	42a6      	cmp	r6, r4
 800ca9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca9e:	f04f 0200 	mov.w	r2, #0
 800caa2:	d124      	bne.n	800caee <_dtoa_r+0x626>
 800caa4:	4baf      	ldr	r3, [pc, #700]	@ (800cd64 <_dtoa_r+0x89c>)
 800caa6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800caaa:	f7f3 fbf7 	bl	800029c <__adddf3>
 800caae:	4602      	mov	r2, r0
 800cab0:	460b      	mov	r3, r1
 800cab2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cab6:	f7f4 f837 	bl	8000b28 <__aeabi_dcmpgt>
 800caba:	2800      	cmp	r0, #0
 800cabc:	d163      	bne.n	800cb86 <_dtoa_r+0x6be>
 800cabe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cac2:	49a8      	ldr	r1, [pc, #672]	@ (800cd64 <_dtoa_r+0x89c>)
 800cac4:	2000      	movs	r0, #0
 800cac6:	f7f3 fbe7 	bl	8000298 <__aeabi_dsub>
 800caca:	4602      	mov	r2, r0
 800cacc:	460b      	mov	r3, r1
 800cace:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cad2:	f7f4 f80b 	bl	8000aec <__aeabi_dcmplt>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	f43f af14 	beq.w	800c904 <_dtoa_r+0x43c>
 800cadc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cade:	1e73      	subs	r3, r6, #1
 800cae0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cae2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cae6:	2b30      	cmp	r3, #48	@ 0x30
 800cae8:	d0f8      	beq.n	800cadc <_dtoa_r+0x614>
 800caea:	4647      	mov	r7, r8
 800caec:	e03b      	b.n	800cb66 <_dtoa_r+0x69e>
 800caee:	4b9e      	ldr	r3, [pc, #632]	@ (800cd68 <_dtoa_r+0x8a0>)
 800caf0:	f7f3 fd8a 	bl	8000608 <__aeabi_dmul>
 800caf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800caf8:	e7bc      	b.n	800ca74 <_dtoa_r+0x5ac>
 800cafa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cafe:	4656      	mov	r6, sl
 800cb00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb04:	4620      	mov	r0, r4
 800cb06:	4629      	mov	r1, r5
 800cb08:	f7f3 fea8 	bl	800085c <__aeabi_ddiv>
 800cb0c:	f7f4 f82c 	bl	8000b68 <__aeabi_d2iz>
 800cb10:	4680      	mov	r8, r0
 800cb12:	f7f3 fd0f 	bl	8000534 <__aeabi_i2d>
 800cb16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb1a:	f7f3 fd75 	bl	8000608 <__aeabi_dmul>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	460b      	mov	r3, r1
 800cb22:	4620      	mov	r0, r4
 800cb24:	4629      	mov	r1, r5
 800cb26:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cb2a:	f7f3 fbb5 	bl	8000298 <__aeabi_dsub>
 800cb2e:	f806 4b01 	strb.w	r4, [r6], #1
 800cb32:	9d03      	ldr	r5, [sp, #12]
 800cb34:	eba6 040a 	sub.w	r4, r6, sl
 800cb38:	42a5      	cmp	r5, r4
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	d133      	bne.n	800cba8 <_dtoa_r+0x6e0>
 800cb40:	f7f3 fbac 	bl	800029c <__adddf3>
 800cb44:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb48:	4604      	mov	r4, r0
 800cb4a:	460d      	mov	r5, r1
 800cb4c:	f7f3 ffec 	bl	8000b28 <__aeabi_dcmpgt>
 800cb50:	b9c0      	cbnz	r0, 800cb84 <_dtoa_r+0x6bc>
 800cb52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb56:	4620      	mov	r0, r4
 800cb58:	4629      	mov	r1, r5
 800cb5a:	f7f3 ffbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb5e:	b110      	cbz	r0, 800cb66 <_dtoa_r+0x69e>
 800cb60:	f018 0f01 	tst.w	r8, #1
 800cb64:	d10e      	bne.n	800cb84 <_dtoa_r+0x6bc>
 800cb66:	9902      	ldr	r1, [sp, #8]
 800cb68:	4648      	mov	r0, r9
 800cb6a:	f000 fbbd 	bl	800d2e8 <_Bfree>
 800cb6e:	2300      	movs	r3, #0
 800cb70:	7033      	strb	r3, [r6, #0]
 800cb72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cb74:	3701      	adds	r7, #1
 800cb76:	601f      	str	r7, [r3, #0]
 800cb78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f000 824b 	beq.w	800d016 <_dtoa_r+0xb4e>
 800cb80:	601e      	str	r6, [r3, #0]
 800cb82:	e248      	b.n	800d016 <_dtoa_r+0xb4e>
 800cb84:	46b8      	mov	r8, r7
 800cb86:	4633      	mov	r3, r6
 800cb88:	461e      	mov	r6, r3
 800cb8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb8e:	2a39      	cmp	r2, #57	@ 0x39
 800cb90:	d106      	bne.n	800cba0 <_dtoa_r+0x6d8>
 800cb92:	459a      	cmp	sl, r3
 800cb94:	d1f8      	bne.n	800cb88 <_dtoa_r+0x6c0>
 800cb96:	2230      	movs	r2, #48	@ 0x30
 800cb98:	f108 0801 	add.w	r8, r8, #1
 800cb9c:	f88a 2000 	strb.w	r2, [sl]
 800cba0:	781a      	ldrb	r2, [r3, #0]
 800cba2:	3201      	adds	r2, #1
 800cba4:	701a      	strb	r2, [r3, #0]
 800cba6:	e7a0      	b.n	800caea <_dtoa_r+0x622>
 800cba8:	4b6f      	ldr	r3, [pc, #444]	@ (800cd68 <_dtoa_r+0x8a0>)
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f7f3 fd2c 	bl	8000608 <__aeabi_dmul>
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	460d      	mov	r5, r1
 800cbb8:	f7f3 ff8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d09f      	beq.n	800cb00 <_dtoa_r+0x638>
 800cbc0:	e7d1      	b.n	800cb66 <_dtoa_r+0x69e>
 800cbc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbc4:	2a00      	cmp	r2, #0
 800cbc6:	f000 80ea 	beq.w	800cd9e <_dtoa_r+0x8d6>
 800cbca:	9a07      	ldr	r2, [sp, #28]
 800cbcc:	2a01      	cmp	r2, #1
 800cbce:	f300 80cd 	bgt.w	800cd6c <_dtoa_r+0x8a4>
 800cbd2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cbd4:	2a00      	cmp	r2, #0
 800cbd6:	f000 80c1 	beq.w	800cd5c <_dtoa_r+0x894>
 800cbda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cbde:	9c08      	ldr	r4, [sp, #32]
 800cbe0:	9e00      	ldr	r6, [sp, #0]
 800cbe2:	9a00      	ldr	r2, [sp, #0]
 800cbe4:	441a      	add	r2, r3
 800cbe6:	9200      	str	r2, [sp, #0]
 800cbe8:	9a06      	ldr	r2, [sp, #24]
 800cbea:	2101      	movs	r1, #1
 800cbec:	441a      	add	r2, r3
 800cbee:	4648      	mov	r0, r9
 800cbf0:	9206      	str	r2, [sp, #24]
 800cbf2:	f000 fc77 	bl	800d4e4 <__i2b>
 800cbf6:	4605      	mov	r5, r0
 800cbf8:	b166      	cbz	r6, 800cc14 <_dtoa_r+0x74c>
 800cbfa:	9b06      	ldr	r3, [sp, #24]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	dd09      	ble.n	800cc14 <_dtoa_r+0x74c>
 800cc00:	42b3      	cmp	r3, r6
 800cc02:	9a00      	ldr	r2, [sp, #0]
 800cc04:	bfa8      	it	ge
 800cc06:	4633      	movge	r3, r6
 800cc08:	1ad2      	subs	r2, r2, r3
 800cc0a:	9200      	str	r2, [sp, #0]
 800cc0c:	9a06      	ldr	r2, [sp, #24]
 800cc0e:	1af6      	subs	r6, r6, r3
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	9306      	str	r3, [sp, #24]
 800cc14:	9b08      	ldr	r3, [sp, #32]
 800cc16:	b30b      	cbz	r3, 800cc5c <_dtoa_r+0x794>
 800cc18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f000 80c6 	beq.w	800cdac <_dtoa_r+0x8e4>
 800cc20:	2c00      	cmp	r4, #0
 800cc22:	f000 80c0 	beq.w	800cda6 <_dtoa_r+0x8de>
 800cc26:	4629      	mov	r1, r5
 800cc28:	4622      	mov	r2, r4
 800cc2a:	4648      	mov	r0, r9
 800cc2c:	f000 fd12 	bl	800d654 <__pow5mult>
 800cc30:	9a02      	ldr	r2, [sp, #8]
 800cc32:	4601      	mov	r1, r0
 800cc34:	4605      	mov	r5, r0
 800cc36:	4648      	mov	r0, r9
 800cc38:	f000 fc6a 	bl	800d510 <__multiply>
 800cc3c:	9902      	ldr	r1, [sp, #8]
 800cc3e:	4680      	mov	r8, r0
 800cc40:	4648      	mov	r0, r9
 800cc42:	f000 fb51 	bl	800d2e8 <_Bfree>
 800cc46:	9b08      	ldr	r3, [sp, #32]
 800cc48:	1b1b      	subs	r3, r3, r4
 800cc4a:	9308      	str	r3, [sp, #32]
 800cc4c:	f000 80b1 	beq.w	800cdb2 <_dtoa_r+0x8ea>
 800cc50:	9a08      	ldr	r2, [sp, #32]
 800cc52:	4641      	mov	r1, r8
 800cc54:	4648      	mov	r0, r9
 800cc56:	f000 fcfd 	bl	800d654 <__pow5mult>
 800cc5a:	9002      	str	r0, [sp, #8]
 800cc5c:	2101      	movs	r1, #1
 800cc5e:	4648      	mov	r0, r9
 800cc60:	f000 fc40 	bl	800d4e4 <__i2b>
 800cc64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc66:	4604      	mov	r4, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f000 81d8 	beq.w	800d01e <_dtoa_r+0xb56>
 800cc6e:	461a      	mov	r2, r3
 800cc70:	4601      	mov	r1, r0
 800cc72:	4648      	mov	r0, r9
 800cc74:	f000 fcee 	bl	800d654 <__pow5mult>
 800cc78:	9b07      	ldr	r3, [sp, #28]
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	f300 809f 	bgt.w	800cdc0 <_dtoa_r+0x8f8>
 800cc82:	9b04      	ldr	r3, [sp, #16]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	f040 8097 	bne.w	800cdb8 <_dtoa_r+0x8f0>
 800cc8a:	9b05      	ldr	r3, [sp, #20]
 800cc8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f040 8093 	bne.w	800cdbc <_dtoa_r+0x8f4>
 800cc96:	9b05      	ldr	r3, [sp, #20]
 800cc98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cc9c:	0d1b      	lsrs	r3, r3, #20
 800cc9e:	051b      	lsls	r3, r3, #20
 800cca0:	b133      	cbz	r3, 800ccb0 <_dtoa_r+0x7e8>
 800cca2:	9b00      	ldr	r3, [sp, #0]
 800cca4:	3301      	adds	r3, #1
 800cca6:	9300      	str	r3, [sp, #0]
 800cca8:	9b06      	ldr	r3, [sp, #24]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	9306      	str	r3, [sp, #24]
 800ccae:	2301      	movs	r3, #1
 800ccb0:	9308      	str	r3, [sp, #32]
 800ccb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f000 81b8 	beq.w	800d02a <_dtoa_r+0xb62>
 800ccba:	6923      	ldr	r3, [r4, #16]
 800ccbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ccc0:	6918      	ldr	r0, [r3, #16]
 800ccc2:	f000 fbc3 	bl	800d44c <__hi0bits>
 800ccc6:	f1c0 0020 	rsb	r0, r0, #32
 800ccca:	9b06      	ldr	r3, [sp, #24]
 800cccc:	4418      	add	r0, r3
 800ccce:	f010 001f 	ands.w	r0, r0, #31
 800ccd2:	f000 8082 	beq.w	800cdda <_dtoa_r+0x912>
 800ccd6:	f1c0 0320 	rsb	r3, r0, #32
 800ccda:	2b04      	cmp	r3, #4
 800ccdc:	dd73      	ble.n	800cdc6 <_dtoa_r+0x8fe>
 800ccde:	9b00      	ldr	r3, [sp, #0]
 800cce0:	f1c0 001c 	rsb	r0, r0, #28
 800cce4:	4403      	add	r3, r0
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	9b06      	ldr	r3, [sp, #24]
 800ccea:	4403      	add	r3, r0
 800ccec:	4406      	add	r6, r0
 800ccee:	9306      	str	r3, [sp, #24]
 800ccf0:	9b00      	ldr	r3, [sp, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	dd05      	ble.n	800cd02 <_dtoa_r+0x83a>
 800ccf6:	9902      	ldr	r1, [sp, #8]
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	4648      	mov	r0, r9
 800ccfc:	f000 fd04 	bl	800d708 <__lshift>
 800cd00:	9002      	str	r0, [sp, #8]
 800cd02:	9b06      	ldr	r3, [sp, #24]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	dd05      	ble.n	800cd14 <_dtoa_r+0x84c>
 800cd08:	4621      	mov	r1, r4
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	4648      	mov	r0, r9
 800cd0e:	f000 fcfb 	bl	800d708 <__lshift>
 800cd12:	4604      	mov	r4, r0
 800cd14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d061      	beq.n	800cdde <_dtoa_r+0x916>
 800cd1a:	9802      	ldr	r0, [sp, #8]
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	f000 fd5f 	bl	800d7e0 <__mcmp>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	da5b      	bge.n	800cdde <_dtoa_r+0x916>
 800cd26:	2300      	movs	r3, #0
 800cd28:	9902      	ldr	r1, [sp, #8]
 800cd2a:	220a      	movs	r2, #10
 800cd2c:	4648      	mov	r0, r9
 800cd2e:	f000 fafd 	bl	800d32c <__multadd>
 800cd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd34:	9002      	str	r0, [sp, #8]
 800cd36:	f107 38ff 	add.w	r8, r7, #4294967295
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f000 8177 	beq.w	800d02e <_dtoa_r+0xb66>
 800cd40:	4629      	mov	r1, r5
 800cd42:	2300      	movs	r3, #0
 800cd44:	220a      	movs	r2, #10
 800cd46:	4648      	mov	r0, r9
 800cd48:	f000 faf0 	bl	800d32c <__multadd>
 800cd4c:	f1bb 0f00 	cmp.w	fp, #0
 800cd50:	4605      	mov	r5, r0
 800cd52:	dc6f      	bgt.n	800ce34 <_dtoa_r+0x96c>
 800cd54:	9b07      	ldr	r3, [sp, #28]
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	dc49      	bgt.n	800cdee <_dtoa_r+0x926>
 800cd5a:	e06b      	b.n	800ce34 <_dtoa_r+0x96c>
 800cd5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cd5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cd62:	e73c      	b.n	800cbde <_dtoa_r+0x716>
 800cd64:	3fe00000 	.word	0x3fe00000
 800cd68:	40240000 	.word	0x40240000
 800cd6c:	9b03      	ldr	r3, [sp, #12]
 800cd6e:	1e5c      	subs	r4, r3, #1
 800cd70:	9b08      	ldr	r3, [sp, #32]
 800cd72:	42a3      	cmp	r3, r4
 800cd74:	db09      	blt.n	800cd8a <_dtoa_r+0x8c2>
 800cd76:	1b1c      	subs	r4, r3, r4
 800cd78:	9b03      	ldr	r3, [sp, #12]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	f6bf af30 	bge.w	800cbe0 <_dtoa_r+0x718>
 800cd80:	9b00      	ldr	r3, [sp, #0]
 800cd82:	9a03      	ldr	r2, [sp, #12]
 800cd84:	1a9e      	subs	r6, r3, r2
 800cd86:	2300      	movs	r3, #0
 800cd88:	e72b      	b.n	800cbe2 <_dtoa_r+0x71a>
 800cd8a:	9b08      	ldr	r3, [sp, #32]
 800cd8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cd8e:	9408      	str	r4, [sp, #32]
 800cd90:	1ae3      	subs	r3, r4, r3
 800cd92:	441a      	add	r2, r3
 800cd94:	9e00      	ldr	r6, [sp, #0]
 800cd96:	9b03      	ldr	r3, [sp, #12]
 800cd98:	920d      	str	r2, [sp, #52]	@ 0x34
 800cd9a:	2400      	movs	r4, #0
 800cd9c:	e721      	b.n	800cbe2 <_dtoa_r+0x71a>
 800cd9e:	9c08      	ldr	r4, [sp, #32]
 800cda0:	9e00      	ldr	r6, [sp, #0]
 800cda2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cda4:	e728      	b.n	800cbf8 <_dtoa_r+0x730>
 800cda6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cdaa:	e751      	b.n	800cc50 <_dtoa_r+0x788>
 800cdac:	9a08      	ldr	r2, [sp, #32]
 800cdae:	9902      	ldr	r1, [sp, #8]
 800cdb0:	e750      	b.n	800cc54 <_dtoa_r+0x78c>
 800cdb2:	f8cd 8008 	str.w	r8, [sp, #8]
 800cdb6:	e751      	b.n	800cc5c <_dtoa_r+0x794>
 800cdb8:	2300      	movs	r3, #0
 800cdba:	e779      	b.n	800ccb0 <_dtoa_r+0x7e8>
 800cdbc:	9b04      	ldr	r3, [sp, #16]
 800cdbe:	e777      	b.n	800ccb0 <_dtoa_r+0x7e8>
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	9308      	str	r3, [sp, #32]
 800cdc4:	e779      	b.n	800ccba <_dtoa_r+0x7f2>
 800cdc6:	d093      	beq.n	800ccf0 <_dtoa_r+0x828>
 800cdc8:	9a00      	ldr	r2, [sp, #0]
 800cdca:	331c      	adds	r3, #28
 800cdcc:	441a      	add	r2, r3
 800cdce:	9200      	str	r2, [sp, #0]
 800cdd0:	9a06      	ldr	r2, [sp, #24]
 800cdd2:	441a      	add	r2, r3
 800cdd4:	441e      	add	r6, r3
 800cdd6:	9206      	str	r2, [sp, #24]
 800cdd8:	e78a      	b.n	800ccf0 <_dtoa_r+0x828>
 800cdda:	4603      	mov	r3, r0
 800cddc:	e7f4      	b.n	800cdc8 <_dtoa_r+0x900>
 800cdde:	9b03      	ldr	r3, [sp, #12]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	46b8      	mov	r8, r7
 800cde4:	dc20      	bgt.n	800ce28 <_dtoa_r+0x960>
 800cde6:	469b      	mov	fp, r3
 800cde8:	9b07      	ldr	r3, [sp, #28]
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	dd1e      	ble.n	800ce2c <_dtoa_r+0x964>
 800cdee:	f1bb 0f00 	cmp.w	fp, #0
 800cdf2:	f47f adb1 	bne.w	800c958 <_dtoa_r+0x490>
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	465b      	mov	r3, fp
 800cdfa:	2205      	movs	r2, #5
 800cdfc:	4648      	mov	r0, r9
 800cdfe:	f000 fa95 	bl	800d32c <__multadd>
 800ce02:	4601      	mov	r1, r0
 800ce04:	4604      	mov	r4, r0
 800ce06:	9802      	ldr	r0, [sp, #8]
 800ce08:	f000 fcea 	bl	800d7e0 <__mcmp>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	f77f ada3 	ble.w	800c958 <_dtoa_r+0x490>
 800ce12:	4656      	mov	r6, sl
 800ce14:	2331      	movs	r3, #49	@ 0x31
 800ce16:	f806 3b01 	strb.w	r3, [r6], #1
 800ce1a:	f108 0801 	add.w	r8, r8, #1
 800ce1e:	e59f      	b.n	800c960 <_dtoa_r+0x498>
 800ce20:	9c03      	ldr	r4, [sp, #12]
 800ce22:	46b8      	mov	r8, r7
 800ce24:	4625      	mov	r5, r4
 800ce26:	e7f4      	b.n	800ce12 <_dtoa_r+0x94a>
 800ce28:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ce2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	f000 8101 	beq.w	800d036 <_dtoa_r+0xb6e>
 800ce34:	2e00      	cmp	r6, #0
 800ce36:	dd05      	ble.n	800ce44 <_dtoa_r+0x97c>
 800ce38:	4629      	mov	r1, r5
 800ce3a:	4632      	mov	r2, r6
 800ce3c:	4648      	mov	r0, r9
 800ce3e:	f000 fc63 	bl	800d708 <__lshift>
 800ce42:	4605      	mov	r5, r0
 800ce44:	9b08      	ldr	r3, [sp, #32]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d05c      	beq.n	800cf04 <_dtoa_r+0xa3c>
 800ce4a:	6869      	ldr	r1, [r5, #4]
 800ce4c:	4648      	mov	r0, r9
 800ce4e:	f000 fa0b 	bl	800d268 <_Balloc>
 800ce52:	4606      	mov	r6, r0
 800ce54:	b928      	cbnz	r0, 800ce62 <_dtoa_r+0x99a>
 800ce56:	4b82      	ldr	r3, [pc, #520]	@ (800d060 <_dtoa_r+0xb98>)
 800ce58:	4602      	mov	r2, r0
 800ce5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ce5e:	f7ff bb4a 	b.w	800c4f6 <_dtoa_r+0x2e>
 800ce62:	692a      	ldr	r2, [r5, #16]
 800ce64:	3202      	adds	r2, #2
 800ce66:	0092      	lsls	r2, r2, #2
 800ce68:	f105 010c 	add.w	r1, r5, #12
 800ce6c:	300c      	adds	r0, #12
 800ce6e:	f002 f93f 	bl	800f0f0 <memcpy>
 800ce72:	2201      	movs	r2, #1
 800ce74:	4631      	mov	r1, r6
 800ce76:	4648      	mov	r0, r9
 800ce78:	f000 fc46 	bl	800d708 <__lshift>
 800ce7c:	f10a 0301 	add.w	r3, sl, #1
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	eb0a 030b 	add.w	r3, sl, fp
 800ce86:	9308      	str	r3, [sp, #32]
 800ce88:	9b04      	ldr	r3, [sp, #16]
 800ce8a:	f003 0301 	and.w	r3, r3, #1
 800ce8e:	462f      	mov	r7, r5
 800ce90:	9306      	str	r3, [sp, #24]
 800ce92:	4605      	mov	r5, r0
 800ce94:	9b00      	ldr	r3, [sp, #0]
 800ce96:	9802      	ldr	r0, [sp, #8]
 800ce98:	4621      	mov	r1, r4
 800ce9a:	f103 3bff 	add.w	fp, r3, #4294967295
 800ce9e:	f7ff fa89 	bl	800c3b4 <quorem>
 800cea2:	4603      	mov	r3, r0
 800cea4:	3330      	adds	r3, #48	@ 0x30
 800cea6:	9003      	str	r0, [sp, #12]
 800cea8:	4639      	mov	r1, r7
 800ceaa:	9802      	ldr	r0, [sp, #8]
 800ceac:	9309      	str	r3, [sp, #36]	@ 0x24
 800ceae:	f000 fc97 	bl	800d7e0 <__mcmp>
 800ceb2:	462a      	mov	r2, r5
 800ceb4:	9004      	str	r0, [sp, #16]
 800ceb6:	4621      	mov	r1, r4
 800ceb8:	4648      	mov	r0, r9
 800ceba:	f000 fcad 	bl	800d818 <__mdiff>
 800cebe:	68c2      	ldr	r2, [r0, #12]
 800cec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec2:	4606      	mov	r6, r0
 800cec4:	bb02      	cbnz	r2, 800cf08 <_dtoa_r+0xa40>
 800cec6:	4601      	mov	r1, r0
 800cec8:	9802      	ldr	r0, [sp, #8]
 800ceca:	f000 fc89 	bl	800d7e0 <__mcmp>
 800cece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced0:	4602      	mov	r2, r0
 800ced2:	4631      	mov	r1, r6
 800ced4:	4648      	mov	r0, r9
 800ced6:	920c      	str	r2, [sp, #48]	@ 0x30
 800ced8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ceda:	f000 fa05 	bl	800d2e8 <_Bfree>
 800cede:	9b07      	ldr	r3, [sp, #28]
 800cee0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cee2:	9e00      	ldr	r6, [sp, #0]
 800cee4:	ea42 0103 	orr.w	r1, r2, r3
 800cee8:	9b06      	ldr	r3, [sp, #24]
 800ceea:	4319      	orrs	r1, r3
 800ceec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceee:	d10d      	bne.n	800cf0c <_dtoa_r+0xa44>
 800cef0:	2b39      	cmp	r3, #57	@ 0x39
 800cef2:	d027      	beq.n	800cf44 <_dtoa_r+0xa7c>
 800cef4:	9a04      	ldr	r2, [sp, #16]
 800cef6:	2a00      	cmp	r2, #0
 800cef8:	dd01      	ble.n	800cefe <_dtoa_r+0xa36>
 800cefa:	9b03      	ldr	r3, [sp, #12]
 800cefc:	3331      	adds	r3, #49	@ 0x31
 800cefe:	f88b 3000 	strb.w	r3, [fp]
 800cf02:	e52e      	b.n	800c962 <_dtoa_r+0x49a>
 800cf04:	4628      	mov	r0, r5
 800cf06:	e7b9      	b.n	800ce7c <_dtoa_r+0x9b4>
 800cf08:	2201      	movs	r2, #1
 800cf0a:	e7e2      	b.n	800ced2 <_dtoa_r+0xa0a>
 800cf0c:	9904      	ldr	r1, [sp, #16]
 800cf0e:	2900      	cmp	r1, #0
 800cf10:	db04      	blt.n	800cf1c <_dtoa_r+0xa54>
 800cf12:	9807      	ldr	r0, [sp, #28]
 800cf14:	4301      	orrs	r1, r0
 800cf16:	9806      	ldr	r0, [sp, #24]
 800cf18:	4301      	orrs	r1, r0
 800cf1a:	d120      	bne.n	800cf5e <_dtoa_r+0xa96>
 800cf1c:	2a00      	cmp	r2, #0
 800cf1e:	ddee      	ble.n	800cefe <_dtoa_r+0xa36>
 800cf20:	9902      	ldr	r1, [sp, #8]
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	2201      	movs	r2, #1
 800cf26:	4648      	mov	r0, r9
 800cf28:	f000 fbee 	bl	800d708 <__lshift>
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	9002      	str	r0, [sp, #8]
 800cf30:	f000 fc56 	bl	800d7e0 <__mcmp>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	9b00      	ldr	r3, [sp, #0]
 800cf38:	dc02      	bgt.n	800cf40 <_dtoa_r+0xa78>
 800cf3a:	d1e0      	bne.n	800cefe <_dtoa_r+0xa36>
 800cf3c:	07da      	lsls	r2, r3, #31
 800cf3e:	d5de      	bpl.n	800cefe <_dtoa_r+0xa36>
 800cf40:	2b39      	cmp	r3, #57	@ 0x39
 800cf42:	d1da      	bne.n	800cefa <_dtoa_r+0xa32>
 800cf44:	2339      	movs	r3, #57	@ 0x39
 800cf46:	f88b 3000 	strb.w	r3, [fp]
 800cf4a:	4633      	mov	r3, r6
 800cf4c:	461e      	mov	r6, r3
 800cf4e:	3b01      	subs	r3, #1
 800cf50:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cf54:	2a39      	cmp	r2, #57	@ 0x39
 800cf56:	d04e      	beq.n	800cff6 <_dtoa_r+0xb2e>
 800cf58:	3201      	adds	r2, #1
 800cf5a:	701a      	strb	r2, [r3, #0]
 800cf5c:	e501      	b.n	800c962 <_dtoa_r+0x49a>
 800cf5e:	2a00      	cmp	r2, #0
 800cf60:	dd03      	ble.n	800cf6a <_dtoa_r+0xaa2>
 800cf62:	2b39      	cmp	r3, #57	@ 0x39
 800cf64:	d0ee      	beq.n	800cf44 <_dtoa_r+0xa7c>
 800cf66:	3301      	adds	r3, #1
 800cf68:	e7c9      	b.n	800cefe <_dtoa_r+0xa36>
 800cf6a:	9a00      	ldr	r2, [sp, #0]
 800cf6c:	9908      	ldr	r1, [sp, #32]
 800cf6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cf72:	428a      	cmp	r2, r1
 800cf74:	d028      	beq.n	800cfc8 <_dtoa_r+0xb00>
 800cf76:	9902      	ldr	r1, [sp, #8]
 800cf78:	2300      	movs	r3, #0
 800cf7a:	220a      	movs	r2, #10
 800cf7c:	4648      	mov	r0, r9
 800cf7e:	f000 f9d5 	bl	800d32c <__multadd>
 800cf82:	42af      	cmp	r7, r5
 800cf84:	9002      	str	r0, [sp, #8]
 800cf86:	f04f 0300 	mov.w	r3, #0
 800cf8a:	f04f 020a 	mov.w	r2, #10
 800cf8e:	4639      	mov	r1, r7
 800cf90:	4648      	mov	r0, r9
 800cf92:	d107      	bne.n	800cfa4 <_dtoa_r+0xadc>
 800cf94:	f000 f9ca 	bl	800d32c <__multadd>
 800cf98:	4607      	mov	r7, r0
 800cf9a:	4605      	mov	r5, r0
 800cf9c:	9b00      	ldr	r3, [sp, #0]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	9300      	str	r3, [sp, #0]
 800cfa2:	e777      	b.n	800ce94 <_dtoa_r+0x9cc>
 800cfa4:	f000 f9c2 	bl	800d32c <__multadd>
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	4607      	mov	r7, r0
 800cfac:	2300      	movs	r3, #0
 800cfae:	220a      	movs	r2, #10
 800cfb0:	4648      	mov	r0, r9
 800cfb2:	f000 f9bb 	bl	800d32c <__multadd>
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	e7f0      	b.n	800cf9c <_dtoa_r+0xad4>
 800cfba:	f1bb 0f00 	cmp.w	fp, #0
 800cfbe:	bfcc      	ite	gt
 800cfc0:	465e      	movgt	r6, fp
 800cfc2:	2601      	movle	r6, #1
 800cfc4:	4456      	add	r6, sl
 800cfc6:	2700      	movs	r7, #0
 800cfc8:	9902      	ldr	r1, [sp, #8]
 800cfca:	9300      	str	r3, [sp, #0]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	4648      	mov	r0, r9
 800cfd0:	f000 fb9a 	bl	800d708 <__lshift>
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	9002      	str	r0, [sp, #8]
 800cfd8:	f000 fc02 	bl	800d7e0 <__mcmp>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	dcb4      	bgt.n	800cf4a <_dtoa_r+0xa82>
 800cfe0:	d102      	bne.n	800cfe8 <_dtoa_r+0xb20>
 800cfe2:	9b00      	ldr	r3, [sp, #0]
 800cfe4:	07db      	lsls	r3, r3, #31
 800cfe6:	d4b0      	bmi.n	800cf4a <_dtoa_r+0xa82>
 800cfe8:	4633      	mov	r3, r6
 800cfea:	461e      	mov	r6, r3
 800cfec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cff0:	2a30      	cmp	r2, #48	@ 0x30
 800cff2:	d0fa      	beq.n	800cfea <_dtoa_r+0xb22>
 800cff4:	e4b5      	b.n	800c962 <_dtoa_r+0x49a>
 800cff6:	459a      	cmp	sl, r3
 800cff8:	d1a8      	bne.n	800cf4c <_dtoa_r+0xa84>
 800cffa:	2331      	movs	r3, #49	@ 0x31
 800cffc:	f108 0801 	add.w	r8, r8, #1
 800d000:	f88a 3000 	strb.w	r3, [sl]
 800d004:	e4ad      	b.n	800c962 <_dtoa_r+0x49a>
 800d006:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d008:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d064 <_dtoa_r+0xb9c>
 800d00c:	b11b      	cbz	r3, 800d016 <_dtoa_r+0xb4e>
 800d00e:	f10a 0308 	add.w	r3, sl, #8
 800d012:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d014:	6013      	str	r3, [r2, #0]
 800d016:	4650      	mov	r0, sl
 800d018:	b017      	add	sp, #92	@ 0x5c
 800d01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d01e:	9b07      	ldr	r3, [sp, #28]
 800d020:	2b01      	cmp	r3, #1
 800d022:	f77f ae2e 	ble.w	800cc82 <_dtoa_r+0x7ba>
 800d026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d028:	9308      	str	r3, [sp, #32]
 800d02a:	2001      	movs	r0, #1
 800d02c:	e64d      	b.n	800ccca <_dtoa_r+0x802>
 800d02e:	f1bb 0f00 	cmp.w	fp, #0
 800d032:	f77f aed9 	ble.w	800cde8 <_dtoa_r+0x920>
 800d036:	4656      	mov	r6, sl
 800d038:	9802      	ldr	r0, [sp, #8]
 800d03a:	4621      	mov	r1, r4
 800d03c:	f7ff f9ba 	bl	800c3b4 <quorem>
 800d040:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d044:	f806 3b01 	strb.w	r3, [r6], #1
 800d048:	eba6 020a 	sub.w	r2, r6, sl
 800d04c:	4593      	cmp	fp, r2
 800d04e:	ddb4      	ble.n	800cfba <_dtoa_r+0xaf2>
 800d050:	9902      	ldr	r1, [sp, #8]
 800d052:	2300      	movs	r3, #0
 800d054:	220a      	movs	r2, #10
 800d056:	4648      	mov	r0, r9
 800d058:	f000 f968 	bl	800d32c <__multadd>
 800d05c:	9002      	str	r0, [sp, #8]
 800d05e:	e7eb      	b.n	800d038 <_dtoa_r+0xb70>
 800d060:	08012691 	.word	0x08012691
 800d064:	08012615 	.word	0x08012615

0800d068 <_free_r>:
 800d068:	b538      	push	{r3, r4, r5, lr}
 800d06a:	4605      	mov	r5, r0
 800d06c:	2900      	cmp	r1, #0
 800d06e:	d041      	beq.n	800d0f4 <_free_r+0x8c>
 800d070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d074:	1f0c      	subs	r4, r1, #4
 800d076:	2b00      	cmp	r3, #0
 800d078:	bfb8      	it	lt
 800d07a:	18e4      	addlt	r4, r4, r3
 800d07c:	f000 f8e8 	bl	800d250 <__malloc_lock>
 800d080:	4a1d      	ldr	r2, [pc, #116]	@ (800d0f8 <_free_r+0x90>)
 800d082:	6813      	ldr	r3, [r2, #0]
 800d084:	b933      	cbnz	r3, 800d094 <_free_r+0x2c>
 800d086:	6063      	str	r3, [r4, #4]
 800d088:	6014      	str	r4, [r2, #0]
 800d08a:	4628      	mov	r0, r5
 800d08c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d090:	f000 b8e4 	b.w	800d25c <__malloc_unlock>
 800d094:	42a3      	cmp	r3, r4
 800d096:	d908      	bls.n	800d0aa <_free_r+0x42>
 800d098:	6820      	ldr	r0, [r4, #0]
 800d09a:	1821      	adds	r1, r4, r0
 800d09c:	428b      	cmp	r3, r1
 800d09e:	bf01      	itttt	eq
 800d0a0:	6819      	ldreq	r1, [r3, #0]
 800d0a2:	685b      	ldreq	r3, [r3, #4]
 800d0a4:	1809      	addeq	r1, r1, r0
 800d0a6:	6021      	streq	r1, [r4, #0]
 800d0a8:	e7ed      	b.n	800d086 <_free_r+0x1e>
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	b10b      	cbz	r3, 800d0b4 <_free_r+0x4c>
 800d0b0:	42a3      	cmp	r3, r4
 800d0b2:	d9fa      	bls.n	800d0aa <_free_r+0x42>
 800d0b4:	6811      	ldr	r1, [r2, #0]
 800d0b6:	1850      	adds	r0, r2, r1
 800d0b8:	42a0      	cmp	r0, r4
 800d0ba:	d10b      	bne.n	800d0d4 <_free_r+0x6c>
 800d0bc:	6820      	ldr	r0, [r4, #0]
 800d0be:	4401      	add	r1, r0
 800d0c0:	1850      	adds	r0, r2, r1
 800d0c2:	4283      	cmp	r3, r0
 800d0c4:	6011      	str	r1, [r2, #0]
 800d0c6:	d1e0      	bne.n	800d08a <_free_r+0x22>
 800d0c8:	6818      	ldr	r0, [r3, #0]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	6053      	str	r3, [r2, #4]
 800d0ce:	4408      	add	r0, r1
 800d0d0:	6010      	str	r0, [r2, #0]
 800d0d2:	e7da      	b.n	800d08a <_free_r+0x22>
 800d0d4:	d902      	bls.n	800d0dc <_free_r+0x74>
 800d0d6:	230c      	movs	r3, #12
 800d0d8:	602b      	str	r3, [r5, #0]
 800d0da:	e7d6      	b.n	800d08a <_free_r+0x22>
 800d0dc:	6820      	ldr	r0, [r4, #0]
 800d0de:	1821      	adds	r1, r4, r0
 800d0e0:	428b      	cmp	r3, r1
 800d0e2:	bf04      	itt	eq
 800d0e4:	6819      	ldreq	r1, [r3, #0]
 800d0e6:	685b      	ldreq	r3, [r3, #4]
 800d0e8:	6063      	str	r3, [r4, #4]
 800d0ea:	bf04      	itt	eq
 800d0ec:	1809      	addeq	r1, r1, r0
 800d0ee:	6021      	streq	r1, [r4, #0]
 800d0f0:	6054      	str	r4, [r2, #4]
 800d0f2:	e7ca      	b.n	800d08a <_free_r+0x22>
 800d0f4:	bd38      	pop	{r3, r4, r5, pc}
 800d0f6:	bf00      	nop
 800d0f8:	20000da0 	.word	0x20000da0

0800d0fc <malloc>:
 800d0fc:	4b02      	ldr	r3, [pc, #8]	@ (800d108 <malloc+0xc>)
 800d0fe:	4601      	mov	r1, r0
 800d100:	6818      	ldr	r0, [r3, #0]
 800d102:	f000 b825 	b.w	800d150 <_malloc_r>
 800d106:	bf00      	nop
 800d108:	20000038 	.word	0x20000038

0800d10c <sbrk_aligned>:
 800d10c:	b570      	push	{r4, r5, r6, lr}
 800d10e:	4e0f      	ldr	r6, [pc, #60]	@ (800d14c <sbrk_aligned+0x40>)
 800d110:	460c      	mov	r4, r1
 800d112:	6831      	ldr	r1, [r6, #0]
 800d114:	4605      	mov	r5, r0
 800d116:	b911      	cbnz	r1, 800d11e <sbrk_aligned+0x12>
 800d118:	f001 ffda 	bl	800f0d0 <_sbrk_r>
 800d11c:	6030      	str	r0, [r6, #0]
 800d11e:	4621      	mov	r1, r4
 800d120:	4628      	mov	r0, r5
 800d122:	f001 ffd5 	bl	800f0d0 <_sbrk_r>
 800d126:	1c43      	adds	r3, r0, #1
 800d128:	d103      	bne.n	800d132 <sbrk_aligned+0x26>
 800d12a:	f04f 34ff 	mov.w	r4, #4294967295
 800d12e:	4620      	mov	r0, r4
 800d130:	bd70      	pop	{r4, r5, r6, pc}
 800d132:	1cc4      	adds	r4, r0, #3
 800d134:	f024 0403 	bic.w	r4, r4, #3
 800d138:	42a0      	cmp	r0, r4
 800d13a:	d0f8      	beq.n	800d12e <sbrk_aligned+0x22>
 800d13c:	1a21      	subs	r1, r4, r0
 800d13e:	4628      	mov	r0, r5
 800d140:	f001 ffc6 	bl	800f0d0 <_sbrk_r>
 800d144:	3001      	adds	r0, #1
 800d146:	d1f2      	bne.n	800d12e <sbrk_aligned+0x22>
 800d148:	e7ef      	b.n	800d12a <sbrk_aligned+0x1e>
 800d14a:	bf00      	nop
 800d14c:	20000d9c 	.word	0x20000d9c

0800d150 <_malloc_r>:
 800d150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d154:	1ccd      	adds	r5, r1, #3
 800d156:	f025 0503 	bic.w	r5, r5, #3
 800d15a:	3508      	adds	r5, #8
 800d15c:	2d0c      	cmp	r5, #12
 800d15e:	bf38      	it	cc
 800d160:	250c      	movcc	r5, #12
 800d162:	2d00      	cmp	r5, #0
 800d164:	4606      	mov	r6, r0
 800d166:	db01      	blt.n	800d16c <_malloc_r+0x1c>
 800d168:	42a9      	cmp	r1, r5
 800d16a:	d904      	bls.n	800d176 <_malloc_r+0x26>
 800d16c:	230c      	movs	r3, #12
 800d16e:	6033      	str	r3, [r6, #0]
 800d170:	2000      	movs	r0, #0
 800d172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d24c <_malloc_r+0xfc>
 800d17a:	f000 f869 	bl	800d250 <__malloc_lock>
 800d17e:	f8d8 3000 	ldr.w	r3, [r8]
 800d182:	461c      	mov	r4, r3
 800d184:	bb44      	cbnz	r4, 800d1d8 <_malloc_r+0x88>
 800d186:	4629      	mov	r1, r5
 800d188:	4630      	mov	r0, r6
 800d18a:	f7ff ffbf 	bl	800d10c <sbrk_aligned>
 800d18e:	1c43      	adds	r3, r0, #1
 800d190:	4604      	mov	r4, r0
 800d192:	d158      	bne.n	800d246 <_malloc_r+0xf6>
 800d194:	f8d8 4000 	ldr.w	r4, [r8]
 800d198:	4627      	mov	r7, r4
 800d19a:	2f00      	cmp	r7, #0
 800d19c:	d143      	bne.n	800d226 <_malloc_r+0xd6>
 800d19e:	2c00      	cmp	r4, #0
 800d1a0:	d04b      	beq.n	800d23a <_malloc_r+0xea>
 800d1a2:	6823      	ldr	r3, [r4, #0]
 800d1a4:	4639      	mov	r1, r7
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	eb04 0903 	add.w	r9, r4, r3
 800d1ac:	f001 ff90 	bl	800f0d0 <_sbrk_r>
 800d1b0:	4581      	cmp	r9, r0
 800d1b2:	d142      	bne.n	800d23a <_malloc_r+0xea>
 800d1b4:	6821      	ldr	r1, [r4, #0]
 800d1b6:	1a6d      	subs	r5, r5, r1
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	f7ff ffa6 	bl	800d10c <sbrk_aligned>
 800d1c0:	3001      	adds	r0, #1
 800d1c2:	d03a      	beq.n	800d23a <_malloc_r+0xea>
 800d1c4:	6823      	ldr	r3, [r4, #0]
 800d1c6:	442b      	add	r3, r5
 800d1c8:	6023      	str	r3, [r4, #0]
 800d1ca:	f8d8 3000 	ldr.w	r3, [r8]
 800d1ce:	685a      	ldr	r2, [r3, #4]
 800d1d0:	bb62      	cbnz	r2, 800d22c <_malloc_r+0xdc>
 800d1d2:	f8c8 7000 	str.w	r7, [r8]
 800d1d6:	e00f      	b.n	800d1f8 <_malloc_r+0xa8>
 800d1d8:	6822      	ldr	r2, [r4, #0]
 800d1da:	1b52      	subs	r2, r2, r5
 800d1dc:	d420      	bmi.n	800d220 <_malloc_r+0xd0>
 800d1de:	2a0b      	cmp	r2, #11
 800d1e0:	d917      	bls.n	800d212 <_malloc_r+0xc2>
 800d1e2:	1961      	adds	r1, r4, r5
 800d1e4:	42a3      	cmp	r3, r4
 800d1e6:	6025      	str	r5, [r4, #0]
 800d1e8:	bf18      	it	ne
 800d1ea:	6059      	strne	r1, [r3, #4]
 800d1ec:	6863      	ldr	r3, [r4, #4]
 800d1ee:	bf08      	it	eq
 800d1f0:	f8c8 1000 	streq.w	r1, [r8]
 800d1f4:	5162      	str	r2, [r4, r5]
 800d1f6:	604b      	str	r3, [r1, #4]
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	f000 f82f 	bl	800d25c <__malloc_unlock>
 800d1fe:	f104 000b 	add.w	r0, r4, #11
 800d202:	1d23      	adds	r3, r4, #4
 800d204:	f020 0007 	bic.w	r0, r0, #7
 800d208:	1ac2      	subs	r2, r0, r3
 800d20a:	bf1c      	itt	ne
 800d20c:	1a1b      	subne	r3, r3, r0
 800d20e:	50a3      	strne	r3, [r4, r2]
 800d210:	e7af      	b.n	800d172 <_malloc_r+0x22>
 800d212:	6862      	ldr	r2, [r4, #4]
 800d214:	42a3      	cmp	r3, r4
 800d216:	bf0c      	ite	eq
 800d218:	f8c8 2000 	streq.w	r2, [r8]
 800d21c:	605a      	strne	r2, [r3, #4]
 800d21e:	e7eb      	b.n	800d1f8 <_malloc_r+0xa8>
 800d220:	4623      	mov	r3, r4
 800d222:	6864      	ldr	r4, [r4, #4]
 800d224:	e7ae      	b.n	800d184 <_malloc_r+0x34>
 800d226:	463c      	mov	r4, r7
 800d228:	687f      	ldr	r7, [r7, #4]
 800d22a:	e7b6      	b.n	800d19a <_malloc_r+0x4a>
 800d22c:	461a      	mov	r2, r3
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	42a3      	cmp	r3, r4
 800d232:	d1fb      	bne.n	800d22c <_malloc_r+0xdc>
 800d234:	2300      	movs	r3, #0
 800d236:	6053      	str	r3, [r2, #4]
 800d238:	e7de      	b.n	800d1f8 <_malloc_r+0xa8>
 800d23a:	230c      	movs	r3, #12
 800d23c:	6033      	str	r3, [r6, #0]
 800d23e:	4630      	mov	r0, r6
 800d240:	f000 f80c 	bl	800d25c <__malloc_unlock>
 800d244:	e794      	b.n	800d170 <_malloc_r+0x20>
 800d246:	6005      	str	r5, [r0, #0]
 800d248:	e7d6      	b.n	800d1f8 <_malloc_r+0xa8>
 800d24a:	bf00      	nop
 800d24c:	20000da0 	.word	0x20000da0

0800d250 <__malloc_lock>:
 800d250:	4801      	ldr	r0, [pc, #4]	@ (800d258 <__malloc_lock+0x8>)
 800d252:	f7ff b8a6 	b.w	800c3a2 <__retarget_lock_acquire_recursive>
 800d256:	bf00      	nop
 800d258:	20000d98 	.word	0x20000d98

0800d25c <__malloc_unlock>:
 800d25c:	4801      	ldr	r0, [pc, #4]	@ (800d264 <__malloc_unlock+0x8>)
 800d25e:	f7ff b8a1 	b.w	800c3a4 <__retarget_lock_release_recursive>
 800d262:	bf00      	nop
 800d264:	20000d98 	.word	0x20000d98

0800d268 <_Balloc>:
 800d268:	b570      	push	{r4, r5, r6, lr}
 800d26a:	69c6      	ldr	r6, [r0, #28]
 800d26c:	4604      	mov	r4, r0
 800d26e:	460d      	mov	r5, r1
 800d270:	b976      	cbnz	r6, 800d290 <_Balloc+0x28>
 800d272:	2010      	movs	r0, #16
 800d274:	f7ff ff42 	bl	800d0fc <malloc>
 800d278:	4602      	mov	r2, r0
 800d27a:	61e0      	str	r0, [r4, #28]
 800d27c:	b920      	cbnz	r0, 800d288 <_Balloc+0x20>
 800d27e:	4b18      	ldr	r3, [pc, #96]	@ (800d2e0 <_Balloc+0x78>)
 800d280:	4818      	ldr	r0, [pc, #96]	@ (800d2e4 <_Balloc+0x7c>)
 800d282:	216b      	movs	r1, #107	@ 0x6b
 800d284:	f001 ff4c 	bl	800f120 <__assert_func>
 800d288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d28c:	6006      	str	r6, [r0, #0]
 800d28e:	60c6      	str	r6, [r0, #12]
 800d290:	69e6      	ldr	r6, [r4, #28]
 800d292:	68f3      	ldr	r3, [r6, #12]
 800d294:	b183      	cbz	r3, 800d2b8 <_Balloc+0x50>
 800d296:	69e3      	ldr	r3, [r4, #28]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d29e:	b9b8      	cbnz	r0, 800d2d0 <_Balloc+0x68>
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	fa01 f605 	lsl.w	r6, r1, r5
 800d2a6:	1d72      	adds	r2, r6, #5
 800d2a8:	0092      	lsls	r2, r2, #2
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	f001 ff56 	bl	800f15c <_calloc_r>
 800d2b0:	b160      	cbz	r0, 800d2cc <_Balloc+0x64>
 800d2b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2b6:	e00e      	b.n	800d2d6 <_Balloc+0x6e>
 800d2b8:	2221      	movs	r2, #33	@ 0x21
 800d2ba:	2104      	movs	r1, #4
 800d2bc:	4620      	mov	r0, r4
 800d2be:	f001 ff4d 	bl	800f15c <_calloc_r>
 800d2c2:	69e3      	ldr	r3, [r4, #28]
 800d2c4:	60f0      	str	r0, [r6, #12]
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d1e4      	bne.n	800d296 <_Balloc+0x2e>
 800d2cc:	2000      	movs	r0, #0
 800d2ce:	bd70      	pop	{r4, r5, r6, pc}
 800d2d0:	6802      	ldr	r2, [r0, #0]
 800d2d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d2dc:	e7f7      	b.n	800d2ce <_Balloc+0x66>
 800d2de:	bf00      	nop
 800d2e0:	08012622 	.word	0x08012622
 800d2e4:	080126a2 	.word	0x080126a2

0800d2e8 <_Bfree>:
 800d2e8:	b570      	push	{r4, r5, r6, lr}
 800d2ea:	69c6      	ldr	r6, [r0, #28]
 800d2ec:	4605      	mov	r5, r0
 800d2ee:	460c      	mov	r4, r1
 800d2f0:	b976      	cbnz	r6, 800d310 <_Bfree+0x28>
 800d2f2:	2010      	movs	r0, #16
 800d2f4:	f7ff ff02 	bl	800d0fc <malloc>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	61e8      	str	r0, [r5, #28]
 800d2fc:	b920      	cbnz	r0, 800d308 <_Bfree+0x20>
 800d2fe:	4b09      	ldr	r3, [pc, #36]	@ (800d324 <_Bfree+0x3c>)
 800d300:	4809      	ldr	r0, [pc, #36]	@ (800d328 <_Bfree+0x40>)
 800d302:	218f      	movs	r1, #143	@ 0x8f
 800d304:	f001 ff0c 	bl	800f120 <__assert_func>
 800d308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d30c:	6006      	str	r6, [r0, #0]
 800d30e:	60c6      	str	r6, [r0, #12]
 800d310:	b13c      	cbz	r4, 800d322 <_Bfree+0x3a>
 800d312:	69eb      	ldr	r3, [r5, #28]
 800d314:	6862      	ldr	r2, [r4, #4]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d31c:	6021      	str	r1, [r4, #0]
 800d31e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d322:	bd70      	pop	{r4, r5, r6, pc}
 800d324:	08012622 	.word	0x08012622
 800d328:	080126a2 	.word	0x080126a2

0800d32c <__multadd>:
 800d32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d330:	690d      	ldr	r5, [r1, #16]
 800d332:	4607      	mov	r7, r0
 800d334:	460c      	mov	r4, r1
 800d336:	461e      	mov	r6, r3
 800d338:	f101 0c14 	add.w	ip, r1, #20
 800d33c:	2000      	movs	r0, #0
 800d33e:	f8dc 3000 	ldr.w	r3, [ip]
 800d342:	b299      	uxth	r1, r3
 800d344:	fb02 6101 	mla	r1, r2, r1, r6
 800d348:	0c1e      	lsrs	r6, r3, #16
 800d34a:	0c0b      	lsrs	r3, r1, #16
 800d34c:	fb02 3306 	mla	r3, r2, r6, r3
 800d350:	b289      	uxth	r1, r1
 800d352:	3001      	adds	r0, #1
 800d354:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d358:	4285      	cmp	r5, r0
 800d35a:	f84c 1b04 	str.w	r1, [ip], #4
 800d35e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d362:	dcec      	bgt.n	800d33e <__multadd+0x12>
 800d364:	b30e      	cbz	r6, 800d3aa <__multadd+0x7e>
 800d366:	68a3      	ldr	r3, [r4, #8]
 800d368:	42ab      	cmp	r3, r5
 800d36a:	dc19      	bgt.n	800d3a0 <__multadd+0x74>
 800d36c:	6861      	ldr	r1, [r4, #4]
 800d36e:	4638      	mov	r0, r7
 800d370:	3101      	adds	r1, #1
 800d372:	f7ff ff79 	bl	800d268 <_Balloc>
 800d376:	4680      	mov	r8, r0
 800d378:	b928      	cbnz	r0, 800d386 <__multadd+0x5a>
 800d37a:	4602      	mov	r2, r0
 800d37c:	4b0c      	ldr	r3, [pc, #48]	@ (800d3b0 <__multadd+0x84>)
 800d37e:	480d      	ldr	r0, [pc, #52]	@ (800d3b4 <__multadd+0x88>)
 800d380:	21ba      	movs	r1, #186	@ 0xba
 800d382:	f001 fecd 	bl	800f120 <__assert_func>
 800d386:	6922      	ldr	r2, [r4, #16]
 800d388:	3202      	adds	r2, #2
 800d38a:	f104 010c 	add.w	r1, r4, #12
 800d38e:	0092      	lsls	r2, r2, #2
 800d390:	300c      	adds	r0, #12
 800d392:	f001 fead 	bl	800f0f0 <memcpy>
 800d396:	4621      	mov	r1, r4
 800d398:	4638      	mov	r0, r7
 800d39a:	f7ff ffa5 	bl	800d2e8 <_Bfree>
 800d39e:	4644      	mov	r4, r8
 800d3a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d3a4:	3501      	adds	r5, #1
 800d3a6:	615e      	str	r6, [r3, #20]
 800d3a8:	6125      	str	r5, [r4, #16]
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b0:	08012691 	.word	0x08012691
 800d3b4:	080126a2 	.word	0x080126a2

0800d3b8 <__s2b>:
 800d3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3bc:	460c      	mov	r4, r1
 800d3be:	4615      	mov	r5, r2
 800d3c0:	461f      	mov	r7, r3
 800d3c2:	2209      	movs	r2, #9
 800d3c4:	3308      	adds	r3, #8
 800d3c6:	4606      	mov	r6, r0
 800d3c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	db09      	blt.n	800d3e8 <__s2b+0x30>
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	f7ff ff47 	bl	800d268 <_Balloc>
 800d3da:	b940      	cbnz	r0, 800d3ee <__s2b+0x36>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	4b19      	ldr	r3, [pc, #100]	@ (800d444 <__s2b+0x8c>)
 800d3e0:	4819      	ldr	r0, [pc, #100]	@ (800d448 <__s2b+0x90>)
 800d3e2:	21d3      	movs	r1, #211	@ 0xd3
 800d3e4:	f001 fe9c 	bl	800f120 <__assert_func>
 800d3e8:	0052      	lsls	r2, r2, #1
 800d3ea:	3101      	adds	r1, #1
 800d3ec:	e7f0      	b.n	800d3d0 <__s2b+0x18>
 800d3ee:	9b08      	ldr	r3, [sp, #32]
 800d3f0:	6143      	str	r3, [r0, #20]
 800d3f2:	2d09      	cmp	r5, #9
 800d3f4:	f04f 0301 	mov.w	r3, #1
 800d3f8:	6103      	str	r3, [r0, #16]
 800d3fa:	dd16      	ble.n	800d42a <__s2b+0x72>
 800d3fc:	f104 0909 	add.w	r9, r4, #9
 800d400:	46c8      	mov	r8, r9
 800d402:	442c      	add	r4, r5
 800d404:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d408:	4601      	mov	r1, r0
 800d40a:	3b30      	subs	r3, #48	@ 0x30
 800d40c:	220a      	movs	r2, #10
 800d40e:	4630      	mov	r0, r6
 800d410:	f7ff ff8c 	bl	800d32c <__multadd>
 800d414:	45a0      	cmp	r8, r4
 800d416:	d1f5      	bne.n	800d404 <__s2b+0x4c>
 800d418:	f1a5 0408 	sub.w	r4, r5, #8
 800d41c:	444c      	add	r4, r9
 800d41e:	1b2d      	subs	r5, r5, r4
 800d420:	1963      	adds	r3, r4, r5
 800d422:	42bb      	cmp	r3, r7
 800d424:	db04      	blt.n	800d430 <__s2b+0x78>
 800d426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d42a:	340a      	adds	r4, #10
 800d42c:	2509      	movs	r5, #9
 800d42e:	e7f6      	b.n	800d41e <__s2b+0x66>
 800d430:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d434:	4601      	mov	r1, r0
 800d436:	3b30      	subs	r3, #48	@ 0x30
 800d438:	220a      	movs	r2, #10
 800d43a:	4630      	mov	r0, r6
 800d43c:	f7ff ff76 	bl	800d32c <__multadd>
 800d440:	e7ee      	b.n	800d420 <__s2b+0x68>
 800d442:	bf00      	nop
 800d444:	08012691 	.word	0x08012691
 800d448:	080126a2 	.word	0x080126a2

0800d44c <__hi0bits>:
 800d44c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d450:	4603      	mov	r3, r0
 800d452:	bf36      	itet	cc
 800d454:	0403      	lslcc	r3, r0, #16
 800d456:	2000      	movcs	r0, #0
 800d458:	2010      	movcc	r0, #16
 800d45a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d45e:	bf3c      	itt	cc
 800d460:	021b      	lslcc	r3, r3, #8
 800d462:	3008      	addcc	r0, #8
 800d464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d468:	bf3c      	itt	cc
 800d46a:	011b      	lslcc	r3, r3, #4
 800d46c:	3004      	addcc	r0, #4
 800d46e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d472:	bf3c      	itt	cc
 800d474:	009b      	lslcc	r3, r3, #2
 800d476:	3002      	addcc	r0, #2
 800d478:	2b00      	cmp	r3, #0
 800d47a:	db05      	blt.n	800d488 <__hi0bits+0x3c>
 800d47c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d480:	f100 0001 	add.w	r0, r0, #1
 800d484:	bf08      	it	eq
 800d486:	2020      	moveq	r0, #32
 800d488:	4770      	bx	lr

0800d48a <__lo0bits>:
 800d48a:	6803      	ldr	r3, [r0, #0]
 800d48c:	4602      	mov	r2, r0
 800d48e:	f013 0007 	ands.w	r0, r3, #7
 800d492:	d00b      	beq.n	800d4ac <__lo0bits+0x22>
 800d494:	07d9      	lsls	r1, r3, #31
 800d496:	d421      	bmi.n	800d4dc <__lo0bits+0x52>
 800d498:	0798      	lsls	r0, r3, #30
 800d49a:	bf49      	itett	mi
 800d49c:	085b      	lsrmi	r3, r3, #1
 800d49e:	089b      	lsrpl	r3, r3, #2
 800d4a0:	2001      	movmi	r0, #1
 800d4a2:	6013      	strmi	r3, [r2, #0]
 800d4a4:	bf5c      	itt	pl
 800d4a6:	6013      	strpl	r3, [r2, #0]
 800d4a8:	2002      	movpl	r0, #2
 800d4aa:	4770      	bx	lr
 800d4ac:	b299      	uxth	r1, r3
 800d4ae:	b909      	cbnz	r1, 800d4b4 <__lo0bits+0x2a>
 800d4b0:	0c1b      	lsrs	r3, r3, #16
 800d4b2:	2010      	movs	r0, #16
 800d4b4:	b2d9      	uxtb	r1, r3
 800d4b6:	b909      	cbnz	r1, 800d4bc <__lo0bits+0x32>
 800d4b8:	3008      	adds	r0, #8
 800d4ba:	0a1b      	lsrs	r3, r3, #8
 800d4bc:	0719      	lsls	r1, r3, #28
 800d4be:	bf04      	itt	eq
 800d4c0:	091b      	lsreq	r3, r3, #4
 800d4c2:	3004      	addeq	r0, #4
 800d4c4:	0799      	lsls	r1, r3, #30
 800d4c6:	bf04      	itt	eq
 800d4c8:	089b      	lsreq	r3, r3, #2
 800d4ca:	3002      	addeq	r0, #2
 800d4cc:	07d9      	lsls	r1, r3, #31
 800d4ce:	d403      	bmi.n	800d4d8 <__lo0bits+0x4e>
 800d4d0:	085b      	lsrs	r3, r3, #1
 800d4d2:	f100 0001 	add.w	r0, r0, #1
 800d4d6:	d003      	beq.n	800d4e0 <__lo0bits+0x56>
 800d4d8:	6013      	str	r3, [r2, #0]
 800d4da:	4770      	bx	lr
 800d4dc:	2000      	movs	r0, #0
 800d4de:	4770      	bx	lr
 800d4e0:	2020      	movs	r0, #32
 800d4e2:	4770      	bx	lr

0800d4e4 <__i2b>:
 800d4e4:	b510      	push	{r4, lr}
 800d4e6:	460c      	mov	r4, r1
 800d4e8:	2101      	movs	r1, #1
 800d4ea:	f7ff febd 	bl	800d268 <_Balloc>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	b928      	cbnz	r0, 800d4fe <__i2b+0x1a>
 800d4f2:	4b05      	ldr	r3, [pc, #20]	@ (800d508 <__i2b+0x24>)
 800d4f4:	4805      	ldr	r0, [pc, #20]	@ (800d50c <__i2b+0x28>)
 800d4f6:	f240 1145 	movw	r1, #325	@ 0x145
 800d4fa:	f001 fe11 	bl	800f120 <__assert_func>
 800d4fe:	2301      	movs	r3, #1
 800d500:	6144      	str	r4, [r0, #20]
 800d502:	6103      	str	r3, [r0, #16]
 800d504:	bd10      	pop	{r4, pc}
 800d506:	bf00      	nop
 800d508:	08012691 	.word	0x08012691
 800d50c:	080126a2 	.word	0x080126a2

0800d510 <__multiply>:
 800d510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	4617      	mov	r7, r2
 800d516:	690a      	ldr	r2, [r1, #16]
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	bfa8      	it	ge
 800d51e:	463b      	movge	r3, r7
 800d520:	4689      	mov	r9, r1
 800d522:	bfa4      	itt	ge
 800d524:	460f      	movge	r7, r1
 800d526:	4699      	movge	r9, r3
 800d528:	693d      	ldr	r5, [r7, #16]
 800d52a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	eb05 060a 	add.w	r6, r5, sl
 800d536:	42b3      	cmp	r3, r6
 800d538:	b085      	sub	sp, #20
 800d53a:	bfb8      	it	lt
 800d53c:	3101      	addlt	r1, #1
 800d53e:	f7ff fe93 	bl	800d268 <_Balloc>
 800d542:	b930      	cbnz	r0, 800d552 <__multiply+0x42>
 800d544:	4602      	mov	r2, r0
 800d546:	4b41      	ldr	r3, [pc, #260]	@ (800d64c <__multiply+0x13c>)
 800d548:	4841      	ldr	r0, [pc, #260]	@ (800d650 <__multiply+0x140>)
 800d54a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d54e:	f001 fde7 	bl	800f120 <__assert_func>
 800d552:	f100 0414 	add.w	r4, r0, #20
 800d556:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d55a:	4623      	mov	r3, r4
 800d55c:	2200      	movs	r2, #0
 800d55e:	4573      	cmp	r3, lr
 800d560:	d320      	bcc.n	800d5a4 <__multiply+0x94>
 800d562:	f107 0814 	add.w	r8, r7, #20
 800d566:	f109 0114 	add.w	r1, r9, #20
 800d56a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d56e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d572:	9302      	str	r3, [sp, #8]
 800d574:	1beb      	subs	r3, r5, r7
 800d576:	3b15      	subs	r3, #21
 800d578:	f023 0303 	bic.w	r3, r3, #3
 800d57c:	3304      	adds	r3, #4
 800d57e:	3715      	adds	r7, #21
 800d580:	42bd      	cmp	r5, r7
 800d582:	bf38      	it	cc
 800d584:	2304      	movcc	r3, #4
 800d586:	9301      	str	r3, [sp, #4]
 800d588:	9b02      	ldr	r3, [sp, #8]
 800d58a:	9103      	str	r1, [sp, #12]
 800d58c:	428b      	cmp	r3, r1
 800d58e:	d80c      	bhi.n	800d5aa <__multiply+0x9a>
 800d590:	2e00      	cmp	r6, #0
 800d592:	dd03      	ble.n	800d59c <__multiply+0x8c>
 800d594:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d055      	beq.n	800d648 <__multiply+0x138>
 800d59c:	6106      	str	r6, [r0, #16]
 800d59e:	b005      	add	sp, #20
 800d5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a4:	f843 2b04 	str.w	r2, [r3], #4
 800d5a8:	e7d9      	b.n	800d55e <__multiply+0x4e>
 800d5aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800d5ae:	f1ba 0f00 	cmp.w	sl, #0
 800d5b2:	d01f      	beq.n	800d5f4 <__multiply+0xe4>
 800d5b4:	46c4      	mov	ip, r8
 800d5b6:	46a1      	mov	r9, r4
 800d5b8:	2700      	movs	r7, #0
 800d5ba:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d5be:	f8d9 3000 	ldr.w	r3, [r9]
 800d5c2:	fa1f fb82 	uxth.w	fp, r2
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800d5cc:	443b      	add	r3, r7
 800d5ce:	f8d9 7000 	ldr.w	r7, [r9]
 800d5d2:	0c12      	lsrs	r2, r2, #16
 800d5d4:	0c3f      	lsrs	r7, r7, #16
 800d5d6:	fb0a 7202 	mla	r2, sl, r2, r7
 800d5da:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5e4:	4565      	cmp	r5, ip
 800d5e6:	f849 3b04 	str.w	r3, [r9], #4
 800d5ea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d5ee:	d8e4      	bhi.n	800d5ba <__multiply+0xaa>
 800d5f0:	9b01      	ldr	r3, [sp, #4]
 800d5f2:	50e7      	str	r7, [r4, r3]
 800d5f4:	9b03      	ldr	r3, [sp, #12]
 800d5f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d5fa:	3104      	adds	r1, #4
 800d5fc:	f1b9 0f00 	cmp.w	r9, #0
 800d600:	d020      	beq.n	800d644 <__multiply+0x134>
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	4647      	mov	r7, r8
 800d606:	46a4      	mov	ip, r4
 800d608:	f04f 0a00 	mov.w	sl, #0
 800d60c:	f8b7 b000 	ldrh.w	fp, [r7]
 800d610:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d614:	fb09 220b 	mla	r2, r9, fp, r2
 800d618:	4452      	add	r2, sl
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d620:	f84c 3b04 	str.w	r3, [ip], #4
 800d624:	f857 3b04 	ldr.w	r3, [r7], #4
 800d628:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d62c:	f8bc 3000 	ldrh.w	r3, [ip]
 800d630:	fb09 330a 	mla	r3, r9, sl, r3
 800d634:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d638:	42bd      	cmp	r5, r7
 800d63a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d63e:	d8e5      	bhi.n	800d60c <__multiply+0xfc>
 800d640:	9a01      	ldr	r2, [sp, #4]
 800d642:	50a3      	str	r3, [r4, r2]
 800d644:	3404      	adds	r4, #4
 800d646:	e79f      	b.n	800d588 <__multiply+0x78>
 800d648:	3e01      	subs	r6, #1
 800d64a:	e7a1      	b.n	800d590 <__multiply+0x80>
 800d64c:	08012691 	.word	0x08012691
 800d650:	080126a2 	.word	0x080126a2

0800d654 <__pow5mult>:
 800d654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d658:	4615      	mov	r5, r2
 800d65a:	f012 0203 	ands.w	r2, r2, #3
 800d65e:	4607      	mov	r7, r0
 800d660:	460e      	mov	r6, r1
 800d662:	d007      	beq.n	800d674 <__pow5mult+0x20>
 800d664:	4c25      	ldr	r4, [pc, #148]	@ (800d6fc <__pow5mult+0xa8>)
 800d666:	3a01      	subs	r2, #1
 800d668:	2300      	movs	r3, #0
 800d66a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d66e:	f7ff fe5d 	bl	800d32c <__multadd>
 800d672:	4606      	mov	r6, r0
 800d674:	10ad      	asrs	r5, r5, #2
 800d676:	d03d      	beq.n	800d6f4 <__pow5mult+0xa0>
 800d678:	69fc      	ldr	r4, [r7, #28]
 800d67a:	b97c      	cbnz	r4, 800d69c <__pow5mult+0x48>
 800d67c:	2010      	movs	r0, #16
 800d67e:	f7ff fd3d 	bl	800d0fc <malloc>
 800d682:	4602      	mov	r2, r0
 800d684:	61f8      	str	r0, [r7, #28]
 800d686:	b928      	cbnz	r0, 800d694 <__pow5mult+0x40>
 800d688:	4b1d      	ldr	r3, [pc, #116]	@ (800d700 <__pow5mult+0xac>)
 800d68a:	481e      	ldr	r0, [pc, #120]	@ (800d704 <__pow5mult+0xb0>)
 800d68c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d690:	f001 fd46 	bl	800f120 <__assert_func>
 800d694:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d698:	6004      	str	r4, [r0, #0]
 800d69a:	60c4      	str	r4, [r0, #12]
 800d69c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d6a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6a4:	b94c      	cbnz	r4, 800d6ba <__pow5mult+0x66>
 800d6a6:	f240 2171 	movw	r1, #625	@ 0x271
 800d6aa:	4638      	mov	r0, r7
 800d6ac:	f7ff ff1a 	bl	800d4e4 <__i2b>
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	6003      	str	r3, [r0, #0]
 800d6ba:	f04f 0900 	mov.w	r9, #0
 800d6be:	07eb      	lsls	r3, r5, #31
 800d6c0:	d50a      	bpl.n	800d6d8 <__pow5mult+0x84>
 800d6c2:	4631      	mov	r1, r6
 800d6c4:	4622      	mov	r2, r4
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	f7ff ff22 	bl	800d510 <__multiply>
 800d6cc:	4631      	mov	r1, r6
 800d6ce:	4680      	mov	r8, r0
 800d6d0:	4638      	mov	r0, r7
 800d6d2:	f7ff fe09 	bl	800d2e8 <_Bfree>
 800d6d6:	4646      	mov	r6, r8
 800d6d8:	106d      	asrs	r5, r5, #1
 800d6da:	d00b      	beq.n	800d6f4 <__pow5mult+0xa0>
 800d6dc:	6820      	ldr	r0, [r4, #0]
 800d6de:	b938      	cbnz	r0, 800d6f0 <__pow5mult+0x9c>
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	4638      	mov	r0, r7
 800d6e6:	f7ff ff13 	bl	800d510 <__multiply>
 800d6ea:	6020      	str	r0, [r4, #0]
 800d6ec:	f8c0 9000 	str.w	r9, [r0]
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	e7e4      	b.n	800d6be <__pow5mult+0x6a>
 800d6f4:	4630      	mov	r0, r6
 800d6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6fa:	bf00      	nop
 800d6fc:	080127b4 	.word	0x080127b4
 800d700:	08012622 	.word	0x08012622
 800d704:	080126a2 	.word	0x080126a2

0800d708 <__lshift>:
 800d708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d70c:	460c      	mov	r4, r1
 800d70e:	6849      	ldr	r1, [r1, #4]
 800d710:	6923      	ldr	r3, [r4, #16]
 800d712:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d716:	68a3      	ldr	r3, [r4, #8]
 800d718:	4607      	mov	r7, r0
 800d71a:	4691      	mov	r9, r2
 800d71c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d720:	f108 0601 	add.w	r6, r8, #1
 800d724:	42b3      	cmp	r3, r6
 800d726:	db0b      	blt.n	800d740 <__lshift+0x38>
 800d728:	4638      	mov	r0, r7
 800d72a:	f7ff fd9d 	bl	800d268 <_Balloc>
 800d72e:	4605      	mov	r5, r0
 800d730:	b948      	cbnz	r0, 800d746 <__lshift+0x3e>
 800d732:	4602      	mov	r2, r0
 800d734:	4b28      	ldr	r3, [pc, #160]	@ (800d7d8 <__lshift+0xd0>)
 800d736:	4829      	ldr	r0, [pc, #164]	@ (800d7dc <__lshift+0xd4>)
 800d738:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d73c:	f001 fcf0 	bl	800f120 <__assert_func>
 800d740:	3101      	adds	r1, #1
 800d742:	005b      	lsls	r3, r3, #1
 800d744:	e7ee      	b.n	800d724 <__lshift+0x1c>
 800d746:	2300      	movs	r3, #0
 800d748:	f100 0114 	add.w	r1, r0, #20
 800d74c:	f100 0210 	add.w	r2, r0, #16
 800d750:	4618      	mov	r0, r3
 800d752:	4553      	cmp	r3, sl
 800d754:	db33      	blt.n	800d7be <__lshift+0xb6>
 800d756:	6920      	ldr	r0, [r4, #16]
 800d758:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d75c:	f104 0314 	add.w	r3, r4, #20
 800d760:	f019 091f 	ands.w	r9, r9, #31
 800d764:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d768:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d76c:	d02b      	beq.n	800d7c6 <__lshift+0xbe>
 800d76e:	f1c9 0e20 	rsb	lr, r9, #32
 800d772:	468a      	mov	sl, r1
 800d774:	2200      	movs	r2, #0
 800d776:	6818      	ldr	r0, [r3, #0]
 800d778:	fa00 f009 	lsl.w	r0, r0, r9
 800d77c:	4310      	orrs	r0, r2
 800d77e:	f84a 0b04 	str.w	r0, [sl], #4
 800d782:	f853 2b04 	ldr.w	r2, [r3], #4
 800d786:	459c      	cmp	ip, r3
 800d788:	fa22 f20e 	lsr.w	r2, r2, lr
 800d78c:	d8f3      	bhi.n	800d776 <__lshift+0x6e>
 800d78e:	ebac 0304 	sub.w	r3, ip, r4
 800d792:	3b15      	subs	r3, #21
 800d794:	f023 0303 	bic.w	r3, r3, #3
 800d798:	3304      	adds	r3, #4
 800d79a:	f104 0015 	add.w	r0, r4, #21
 800d79e:	4560      	cmp	r0, ip
 800d7a0:	bf88      	it	hi
 800d7a2:	2304      	movhi	r3, #4
 800d7a4:	50ca      	str	r2, [r1, r3]
 800d7a6:	b10a      	cbz	r2, 800d7ac <__lshift+0xa4>
 800d7a8:	f108 0602 	add.w	r6, r8, #2
 800d7ac:	3e01      	subs	r6, #1
 800d7ae:	4638      	mov	r0, r7
 800d7b0:	612e      	str	r6, [r5, #16]
 800d7b2:	4621      	mov	r1, r4
 800d7b4:	f7ff fd98 	bl	800d2e8 <_Bfree>
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7be:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	e7c5      	b.n	800d752 <__lshift+0x4a>
 800d7c6:	3904      	subs	r1, #4
 800d7c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7d0:	459c      	cmp	ip, r3
 800d7d2:	d8f9      	bhi.n	800d7c8 <__lshift+0xc0>
 800d7d4:	e7ea      	b.n	800d7ac <__lshift+0xa4>
 800d7d6:	bf00      	nop
 800d7d8:	08012691 	.word	0x08012691
 800d7dc:	080126a2 	.word	0x080126a2

0800d7e0 <__mcmp>:
 800d7e0:	690a      	ldr	r2, [r1, #16]
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	6900      	ldr	r0, [r0, #16]
 800d7e6:	1a80      	subs	r0, r0, r2
 800d7e8:	b530      	push	{r4, r5, lr}
 800d7ea:	d10e      	bne.n	800d80a <__mcmp+0x2a>
 800d7ec:	3314      	adds	r3, #20
 800d7ee:	3114      	adds	r1, #20
 800d7f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d7f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d7f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d7fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d800:	4295      	cmp	r5, r2
 800d802:	d003      	beq.n	800d80c <__mcmp+0x2c>
 800d804:	d205      	bcs.n	800d812 <__mcmp+0x32>
 800d806:	f04f 30ff 	mov.w	r0, #4294967295
 800d80a:	bd30      	pop	{r4, r5, pc}
 800d80c:	42a3      	cmp	r3, r4
 800d80e:	d3f3      	bcc.n	800d7f8 <__mcmp+0x18>
 800d810:	e7fb      	b.n	800d80a <__mcmp+0x2a>
 800d812:	2001      	movs	r0, #1
 800d814:	e7f9      	b.n	800d80a <__mcmp+0x2a>
	...

0800d818 <__mdiff>:
 800d818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d81c:	4689      	mov	r9, r1
 800d81e:	4606      	mov	r6, r0
 800d820:	4611      	mov	r1, r2
 800d822:	4648      	mov	r0, r9
 800d824:	4614      	mov	r4, r2
 800d826:	f7ff ffdb 	bl	800d7e0 <__mcmp>
 800d82a:	1e05      	subs	r5, r0, #0
 800d82c:	d112      	bne.n	800d854 <__mdiff+0x3c>
 800d82e:	4629      	mov	r1, r5
 800d830:	4630      	mov	r0, r6
 800d832:	f7ff fd19 	bl	800d268 <_Balloc>
 800d836:	4602      	mov	r2, r0
 800d838:	b928      	cbnz	r0, 800d846 <__mdiff+0x2e>
 800d83a:	4b3f      	ldr	r3, [pc, #252]	@ (800d938 <__mdiff+0x120>)
 800d83c:	f240 2137 	movw	r1, #567	@ 0x237
 800d840:	483e      	ldr	r0, [pc, #248]	@ (800d93c <__mdiff+0x124>)
 800d842:	f001 fc6d 	bl	800f120 <__assert_func>
 800d846:	2301      	movs	r3, #1
 800d848:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d84c:	4610      	mov	r0, r2
 800d84e:	b003      	add	sp, #12
 800d850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d854:	bfbc      	itt	lt
 800d856:	464b      	movlt	r3, r9
 800d858:	46a1      	movlt	r9, r4
 800d85a:	4630      	mov	r0, r6
 800d85c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d860:	bfba      	itte	lt
 800d862:	461c      	movlt	r4, r3
 800d864:	2501      	movlt	r5, #1
 800d866:	2500      	movge	r5, #0
 800d868:	f7ff fcfe 	bl	800d268 <_Balloc>
 800d86c:	4602      	mov	r2, r0
 800d86e:	b918      	cbnz	r0, 800d878 <__mdiff+0x60>
 800d870:	4b31      	ldr	r3, [pc, #196]	@ (800d938 <__mdiff+0x120>)
 800d872:	f240 2145 	movw	r1, #581	@ 0x245
 800d876:	e7e3      	b.n	800d840 <__mdiff+0x28>
 800d878:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d87c:	6926      	ldr	r6, [r4, #16]
 800d87e:	60c5      	str	r5, [r0, #12]
 800d880:	f109 0310 	add.w	r3, r9, #16
 800d884:	f109 0514 	add.w	r5, r9, #20
 800d888:	f104 0e14 	add.w	lr, r4, #20
 800d88c:	f100 0b14 	add.w	fp, r0, #20
 800d890:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d894:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d898:	9301      	str	r3, [sp, #4]
 800d89a:	46d9      	mov	r9, fp
 800d89c:	f04f 0c00 	mov.w	ip, #0
 800d8a0:	9b01      	ldr	r3, [sp, #4]
 800d8a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d8a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d8aa:	9301      	str	r3, [sp, #4]
 800d8ac:	fa1f f38a 	uxth.w	r3, sl
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	b283      	uxth	r3, r0
 800d8b4:	1acb      	subs	r3, r1, r3
 800d8b6:	0c00      	lsrs	r0, r0, #16
 800d8b8:	4463      	add	r3, ip
 800d8ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d8be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d8c8:	4576      	cmp	r6, lr
 800d8ca:	f849 3b04 	str.w	r3, [r9], #4
 800d8ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d8d2:	d8e5      	bhi.n	800d8a0 <__mdiff+0x88>
 800d8d4:	1b33      	subs	r3, r6, r4
 800d8d6:	3b15      	subs	r3, #21
 800d8d8:	f023 0303 	bic.w	r3, r3, #3
 800d8dc:	3415      	adds	r4, #21
 800d8de:	3304      	adds	r3, #4
 800d8e0:	42a6      	cmp	r6, r4
 800d8e2:	bf38      	it	cc
 800d8e4:	2304      	movcc	r3, #4
 800d8e6:	441d      	add	r5, r3
 800d8e8:	445b      	add	r3, fp
 800d8ea:	461e      	mov	r6, r3
 800d8ec:	462c      	mov	r4, r5
 800d8ee:	4544      	cmp	r4, r8
 800d8f0:	d30e      	bcc.n	800d910 <__mdiff+0xf8>
 800d8f2:	f108 0103 	add.w	r1, r8, #3
 800d8f6:	1b49      	subs	r1, r1, r5
 800d8f8:	f021 0103 	bic.w	r1, r1, #3
 800d8fc:	3d03      	subs	r5, #3
 800d8fe:	45a8      	cmp	r8, r5
 800d900:	bf38      	it	cc
 800d902:	2100      	movcc	r1, #0
 800d904:	440b      	add	r3, r1
 800d906:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d90a:	b191      	cbz	r1, 800d932 <__mdiff+0x11a>
 800d90c:	6117      	str	r7, [r2, #16]
 800d90e:	e79d      	b.n	800d84c <__mdiff+0x34>
 800d910:	f854 1b04 	ldr.w	r1, [r4], #4
 800d914:	46e6      	mov	lr, ip
 800d916:	0c08      	lsrs	r0, r1, #16
 800d918:	fa1c fc81 	uxtah	ip, ip, r1
 800d91c:	4471      	add	r1, lr
 800d91e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d922:	b289      	uxth	r1, r1
 800d924:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d928:	f846 1b04 	str.w	r1, [r6], #4
 800d92c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d930:	e7dd      	b.n	800d8ee <__mdiff+0xd6>
 800d932:	3f01      	subs	r7, #1
 800d934:	e7e7      	b.n	800d906 <__mdiff+0xee>
 800d936:	bf00      	nop
 800d938:	08012691 	.word	0x08012691
 800d93c:	080126a2 	.word	0x080126a2

0800d940 <__ulp>:
 800d940:	b082      	sub	sp, #8
 800d942:	ed8d 0b00 	vstr	d0, [sp]
 800d946:	9a01      	ldr	r2, [sp, #4]
 800d948:	4b0f      	ldr	r3, [pc, #60]	@ (800d988 <__ulp+0x48>)
 800d94a:	4013      	ands	r3, r2
 800d94c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d950:	2b00      	cmp	r3, #0
 800d952:	dc08      	bgt.n	800d966 <__ulp+0x26>
 800d954:	425b      	negs	r3, r3
 800d956:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d95a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d95e:	da04      	bge.n	800d96a <__ulp+0x2a>
 800d960:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d964:	4113      	asrs	r3, r2
 800d966:	2200      	movs	r2, #0
 800d968:	e008      	b.n	800d97c <__ulp+0x3c>
 800d96a:	f1a2 0314 	sub.w	r3, r2, #20
 800d96e:	2b1e      	cmp	r3, #30
 800d970:	bfda      	itte	le
 800d972:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d976:	40da      	lsrle	r2, r3
 800d978:	2201      	movgt	r2, #1
 800d97a:	2300      	movs	r3, #0
 800d97c:	4619      	mov	r1, r3
 800d97e:	4610      	mov	r0, r2
 800d980:	ec41 0b10 	vmov	d0, r0, r1
 800d984:	b002      	add	sp, #8
 800d986:	4770      	bx	lr
 800d988:	7ff00000 	.word	0x7ff00000

0800d98c <__b2d>:
 800d98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d990:	6906      	ldr	r6, [r0, #16]
 800d992:	f100 0814 	add.w	r8, r0, #20
 800d996:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d99a:	1f37      	subs	r7, r6, #4
 800d99c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	f7ff fd53 	bl	800d44c <__hi0bits>
 800d9a6:	f1c0 0320 	rsb	r3, r0, #32
 800d9aa:	280a      	cmp	r0, #10
 800d9ac:	600b      	str	r3, [r1, #0]
 800d9ae:	491b      	ldr	r1, [pc, #108]	@ (800da1c <__b2d+0x90>)
 800d9b0:	dc15      	bgt.n	800d9de <__b2d+0x52>
 800d9b2:	f1c0 0c0b 	rsb	ip, r0, #11
 800d9b6:	fa22 f30c 	lsr.w	r3, r2, ip
 800d9ba:	45b8      	cmp	r8, r7
 800d9bc:	ea43 0501 	orr.w	r5, r3, r1
 800d9c0:	bf34      	ite	cc
 800d9c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d9c6:	2300      	movcs	r3, #0
 800d9c8:	3015      	adds	r0, #21
 800d9ca:	fa02 f000 	lsl.w	r0, r2, r0
 800d9ce:	fa23 f30c 	lsr.w	r3, r3, ip
 800d9d2:	4303      	orrs	r3, r0
 800d9d4:	461c      	mov	r4, r3
 800d9d6:	ec45 4b10 	vmov	d0, r4, r5
 800d9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9de:	45b8      	cmp	r8, r7
 800d9e0:	bf3a      	itte	cc
 800d9e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d9e6:	f1a6 0708 	subcc.w	r7, r6, #8
 800d9ea:	2300      	movcs	r3, #0
 800d9ec:	380b      	subs	r0, #11
 800d9ee:	d012      	beq.n	800da16 <__b2d+0x8a>
 800d9f0:	f1c0 0120 	rsb	r1, r0, #32
 800d9f4:	fa23 f401 	lsr.w	r4, r3, r1
 800d9f8:	4082      	lsls	r2, r0
 800d9fa:	4322      	orrs	r2, r4
 800d9fc:	4547      	cmp	r7, r8
 800d9fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800da02:	bf8c      	ite	hi
 800da04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800da08:	2200      	movls	r2, #0
 800da0a:	4083      	lsls	r3, r0
 800da0c:	40ca      	lsrs	r2, r1
 800da0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800da12:	4313      	orrs	r3, r2
 800da14:	e7de      	b.n	800d9d4 <__b2d+0x48>
 800da16:	ea42 0501 	orr.w	r5, r2, r1
 800da1a:	e7db      	b.n	800d9d4 <__b2d+0x48>
 800da1c:	3ff00000 	.word	0x3ff00000

0800da20 <__d2b>:
 800da20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da24:	460f      	mov	r7, r1
 800da26:	2101      	movs	r1, #1
 800da28:	ec59 8b10 	vmov	r8, r9, d0
 800da2c:	4616      	mov	r6, r2
 800da2e:	f7ff fc1b 	bl	800d268 <_Balloc>
 800da32:	4604      	mov	r4, r0
 800da34:	b930      	cbnz	r0, 800da44 <__d2b+0x24>
 800da36:	4602      	mov	r2, r0
 800da38:	4b23      	ldr	r3, [pc, #140]	@ (800dac8 <__d2b+0xa8>)
 800da3a:	4824      	ldr	r0, [pc, #144]	@ (800dacc <__d2b+0xac>)
 800da3c:	f240 310f 	movw	r1, #783	@ 0x30f
 800da40:	f001 fb6e 	bl	800f120 <__assert_func>
 800da44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800da48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da4c:	b10d      	cbz	r5, 800da52 <__d2b+0x32>
 800da4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da52:	9301      	str	r3, [sp, #4]
 800da54:	f1b8 0300 	subs.w	r3, r8, #0
 800da58:	d023      	beq.n	800daa2 <__d2b+0x82>
 800da5a:	4668      	mov	r0, sp
 800da5c:	9300      	str	r3, [sp, #0]
 800da5e:	f7ff fd14 	bl	800d48a <__lo0bits>
 800da62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800da66:	b1d0      	cbz	r0, 800da9e <__d2b+0x7e>
 800da68:	f1c0 0320 	rsb	r3, r0, #32
 800da6c:	fa02 f303 	lsl.w	r3, r2, r3
 800da70:	430b      	orrs	r3, r1
 800da72:	40c2      	lsrs	r2, r0
 800da74:	6163      	str	r3, [r4, #20]
 800da76:	9201      	str	r2, [sp, #4]
 800da78:	9b01      	ldr	r3, [sp, #4]
 800da7a:	61a3      	str	r3, [r4, #24]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	bf0c      	ite	eq
 800da80:	2201      	moveq	r2, #1
 800da82:	2202      	movne	r2, #2
 800da84:	6122      	str	r2, [r4, #16]
 800da86:	b1a5      	cbz	r5, 800dab2 <__d2b+0x92>
 800da88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800da8c:	4405      	add	r5, r0
 800da8e:	603d      	str	r5, [r7, #0]
 800da90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800da94:	6030      	str	r0, [r6, #0]
 800da96:	4620      	mov	r0, r4
 800da98:	b003      	add	sp, #12
 800da9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da9e:	6161      	str	r1, [r4, #20]
 800daa0:	e7ea      	b.n	800da78 <__d2b+0x58>
 800daa2:	a801      	add	r0, sp, #4
 800daa4:	f7ff fcf1 	bl	800d48a <__lo0bits>
 800daa8:	9b01      	ldr	r3, [sp, #4]
 800daaa:	6163      	str	r3, [r4, #20]
 800daac:	3020      	adds	r0, #32
 800daae:	2201      	movs	r2, #1
 800dab0:	e7e8      	b.n	800da84 <__d2b+0x64>
 800dab2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dab6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800daba:	6038      	str	r0, [r7, #0]
 800dabc:	6918      	ldr	r0, [r3, #16]
 800dabe:	f7ff fcc5 	bl	800d44c <__hi0bits>
 800dac2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dac6:	e7e5      	b.n	800da94 <__d2b+0x74>
 800dac8:	08012691 	.word	0x08012691
 800dacc:	080126a2 	.word	0x080126a2

0800dad0 <__ratio>:
 800dad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad4:	b085      	sub	sp, #20
 800dad6:	e9cd 1000 	strd	r1, r0, [sp]
 800dada:	a902      	add	r1, sp, #8
 800dadc:	f7ff ff56 	bl	800d98c <__b2d>
 800dae0:	9800      	ldr	r0, [sp, #0]
 800dae2:	a903      	add	r1, sp, #12
 800dae4:	ec55 4b10 	vmov	r4, r5, d0
 800dae8:	f7ff ff50 	bl	800d98c <__b2d>
 800daec:	9b01      	ldr	r3, [sp, #4]
 800daee:	6919      	ldr	r1, [r3, #16]
 800daf0:	9b00      	ldr	r3, [sp, #0]
 800daf2:	691b      	ldr	r3, [r3, #16]
 800daf4:	1ac9      	subs	r1, r1, r3
 800daf6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800dafa:	1a9b      	subs	r3, r3, r2
 800dafc:	ec5b ab10 	vmov	sl, fp, d0
 800db00:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800db04:	2b00      	cmp	r3, #0
 800db06:	bfce      	itee	gt
 800db08:	462a      	movgt	r2, r5
 800db0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800db0e:	465a      	movle	r2, fp
 800db10:	462f      	mov	r7, r5
 800db12:	46d9      	mov	r9, fp
 800db14:	bfcc      	ite	gt
 800db16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800db1a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800db1e:	464b      	mov	r3, r9
 800db20:	4652      	mov	r2, sl
 800db22:	4620      	mov	r0, r4
 800db24:	4639      	mov	r1, r7
 800db26:	f7f2 fe99 	bl	800085c <__aeabi_ddiv>
 800db2a:	ec41 0b10 	vmov	d0, r0, r1
 800db2e:	b005      	add	sp, #20
 800db30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db34 <__copybits>:
 800db34:	3901      	subs	r1, #1
 800db36:	b570      	push	{r4, r5, r6, lr}
 800db38:	1149      	asrs	r1, r1, #5
 800db3a:	6914      	ldr	r4, [r2, #16]
 800db3c:	3101      	adds	r1, #1
 800db3e:	f102 0314 	add.w	r3, r2, #20
 800db42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800db46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800db4a:	1f05      	subs	r5, r0, #4
 800db4c:	42a3      	cmp	r3, r4
 800db4e:	d30c      	bcc.n	800db6a <__copybits+0x36>
 800db50:	1aa3      	subs	r3, r4, r2
 800db52:	3b11      	subs	r3, #17
 800db54:	f023 0303 	bic.w	r3, r3, #3
 800db58:	3211      	adds	r2, #17
 800db5a:	42a2      	cmp	r2, r4
 800db5c:	bf88      	it	hi
 800db5e:	2300      	movhi	r3, #0
 800db60:	4418      	add	r0, r3
 800db62:	2300      	movs	r3, #0
 800db64:	4288      	cmp	r0, r1
 800db66:	d305      	bcc.n	800db74 <__copybits+0x40>
 800db68:	bd70      	pop	{r4, r5, r6, pc}
 800db6a:	f853 6b04 	ldr.w	r6, [r3], #4
 800db6e:	f845 6f04 	str.w	r6, [r5, #4]!
 800db72:	e7eb      	b.n	800db4c <__copybits+0x18>
 800db74:	f840 3b04 	str.w	r3, [r0], #4
 800db78:	e7f4      	b.n	800db64 <__copybits+0x30>

0800db7a <__any_on>:
 800db7a:	f100 0214 	add.w	r2, r0, #20
 800db7e:	6900      	ldr	r0, [r0, #16]
 800db80:	114b      	asrs	r3, r1, #5
 800db82:	4298      	cmp	r0, r3
 800db84:	b510      	push	{r4, lr}
 800db86:	db11      	blt.n	800dbac <__any_on+0x32>
 800db88:	dd0a      	ble.n	800dba0 <__any_on+0x26>
 800db8a:	f011 011f 	ands.w	r1, r1, #31
 800db8e:	d007      	beq.n	800dba0 <__any_on+0x26>
 800db90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800db94:	fa24 f001 	lsr.w	r0, r4, r1
 800db98:	fa00 f101 	lsl.w	r1, r0, r1
 800db9c:	428c      	cmp	r4, r1
 800db9e:	d10b      	bne.n	800dbb8 <__any_on+0x3e>
 800dba0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d803      	bhi.n	800dbb0 <__any_on+0x36>
 800dba8:	2000      	movs	r0, #0
 800dbaa:	bd10      	pop	{r4, pc}
 800dbac:	4603      	mov	r3, r0
 800dbae:	e7f7      	b.n	800dba0 <__any_on+0x26>
 800dbb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dbb4:	2900      	cmp	r1, #0
 800dbb6:	d0f5      	beq.n	800dba4 <__any_on+0x2a>
 800dbb8:	2001      	movs	r0, #1
 800dbba:	e7f6      	b.n	800dbaa <__any_on+0x30>

0800dbbc <sulp>:
 800dbbc:	b570      	push	{r4, r5, r6, lr}
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	460d      	mov	r5, r1
 800dbc2:	ec45 4b10 	vmov	d0, r4, r5
 800dbc6:	4616      	mov	r6, r2
 800dbc8:	f7ff feba 	bl	800d940 <__ulp>
 800dbcc:	ec51 0b10 	vmov	r0, r1, d0
 800dbd0:	b17e      	cbz	r6, 800dbf2 <sulp+0x36>
 800dbd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dbd6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	dd09      	ble.n	800dbf2 <sulp+0x36>
 800dbde:	051b      	lsls	r3, r3, #20
 800dbe0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dbe4:	2400      	movs	r4, #0
 800dbe6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dbea:	4622      	mov	r2, r4
 800dbec:	462b      	mov	r3, r5
 800dbee:	f7f2 fd0b 	bl	8000608 <__aeabi_dmul>
 800dbf2:	ec41 0b10 	vmov	d0, r0, r1
 800dbf6:	bd70      	pop	{r4, r5, r6, pc}

0800dbf8 <_strtod_l>:
 800dbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbfc:	b09f      	sub	sp, #124	@ 0x7c
 800dbfe:	460c      	mov	r4, r1
 800dc00:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dc02:	2200      	movs	r2, #0
 800dc04:	921a      	str	r2, [sp, #104]	@ 0x68
 800dc06:	9005      	str	r0, [sp, #20]
 800dc08:	f04f 0a00 	mov.w	sl, #0
 800dc0c:	f04f 0b00 	mov.w	fp, #0
 800dc10:	460a      	mov	r2, r1
 800dc12:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc14:	7811      	ldrb	r1, [r2, #0]
 800dc16:	292b      	cmp	r1, #43	@ 0x2b
 800dc18:	d04a      	beq.n	800dcb0 <_strtod_l+0xb8>
 800dc1a:	d838      	bhi.n	800dc8e <_strtod_l+0x96>
 800dc1c:	290d      	cmp	r1, #13
 800dc1e:	d832      	bhi.n	800dc86 <_strtod_l+0x8e>
 800dc20:	2908      	cmp	r1, #8
 800dc22:	d832      	bhi.n	800dc8a <_strtod_l+0x92>
 800dc24:	2900      	cmp	r1, #0
 800dc26:	d03b      	beq.n	800dca0 <_strtod_l+0xa8>
 800dc28:	2200      	movs	r2, #0
 800dc2a:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dc2e:	782a      	ldrb	r2, [r5, #0]
 800dc30:	2a30      	cmp	r2, #48	@ 0x30
 800dc32:	f040 80b2 	bne.w	800dd9a <_strtod_l+0x1a2>
 800dc36:	786a      	ldrb	r2, [r5, #1]
 800dc38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dc3c:	2a58      	cmp	r2, #88	@ 0x58
 800dc3e:	d16e      	bne.n	800dd1e <_strtod_l+0x126>
 800dc40:	9302      	str	r3, [sp, #8]
 800dc42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc44:	9301      	str	r3, [sp, #4]
 800dc46:	ab1a      	add	r3, sp, #104	@ 0x68
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	4a8f      	ldr	r2, [pc, #572]	@ (800de88 <_strtod_l+0x290>)
 800dc4c:	9805      	ldr	r0, [sp, #20]
 800dc4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dc50:	a919      	add	r1, sp, #100	@ 0x64
 800dc52:	f001 faff 	bl	800f254 <__gethex>
 800dc56:	f010 060f 	ands.w	r6, r0, #15
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	d005      	beq.n	800dc6a <_strtod_l+0x72>
 800dc5e:	2e06      	cmp	r6, #6
 800dc60:	d128      	bne.n	800dcb4 <_strtod_l+0xbc>
 800dc62:	3501      	adds	r5, #1
 800dc64:	2300      	movs	r3, #0
 800dc66:	9519      	str	r5, [sp, #100]	@ 0x64
 800dc68:	930e      	str	r3, [sp, #56]	@ 0x38
 800dc6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	f040 858e 	bne.w	800e78e <_strtod_l+0xb96>
 800dc72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc74:	b1cb      	cbz	r3, 800dcaa <_strtod_l+0xb2>
 800dc76:	4652      	mov	r2, sl
 800dc78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dc7c:	ec43 2b10 	vmov	d0, r2, r3
 800dc80:	b01f      	add	sp, #124	@ 0x7c
 800dc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc86:	2920      	cmp	r1, #32
 800dc88:	d1ce      	bne.n	800dc28 <_strtod_l+0x30>
 800dc8a:	3201      	adds	r2, #1
 800dc8c:	e7c1      	b.n	800dc12 <_strtod_l+0x1a>
 800dc8e:	292d      	cmp	r1, #45	@ 0x2d
 800dc90:	d1ca      	bne.n	800dc28 <_strtod_l+0x30>
 800dc92:	2101      	movs	r1, #1
 800dc94:	910e      	str	r1, [sp, #56]	@ 0x38
 800dc96:	1c51      	adds	r1, r2, #1
 800dc98:	9119      	str	r1, [sp, #100]	@ 0x64
 800dc9a:	7852      	ldrb	r2, [r2, #1]
 800dc9c:	2a00      	cmp	r2, #0
 800dc9e:	d1c5      	bne.n	800dc2c <_strtod_l+0x34>
 800dca0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dca2:	9419      	str	r4, [sp, #100]	@ 0x64
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	f040 8570 	bne.w	800e78a <_strtod_l+0xb92>
 800dcaa:	4652      	mov	r2, sl
 800dcac:	465b      	mov	r3, fp
 800dcae:	e7e5      	b.n	800dc7c <_strtod_l+0x84>
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	e7ef      	b.n	800dc94 <_strtod_l+0x9c>
 800dcb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dcb6:	b13a      	cbz	r2, 800dcc8 <_strtod_l+0xd0>
 800dcb8:	2135      	movs	r1, #53	@ 0x35
 800dcba:	a81c      	add	r0, sp, #112	@ 0x70
 800dcbc:	f7ff ff3a 	bl	800db34 <__copybits>
 800dcc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dcc2:	9805      	ldr	r0, [sp, #20]
 800dcc4:	f7ff fb10 	bl	800d2e8 <_Bfree>
 800dcc8:	3e01      	subs	r6, #1
 800dcca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800dccc:	2e04      	cmp	r6, #4
 800dcce:	d806      	bhi.n	800dcde <_strtod_l+0xe6>
 800dcd0:	e8df f006 	tbb	[pc, r6]
 800dcd4:	201d0314 	.word	0x201d0314
 800dcd8:	14          	.byte	0x14
 800dcd9:	00          	.byte	0x00
 800dcda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800dcde:	05e1      	lsls	r1, r4, #23
 800dce0:	bf48      	it	mi
 800dce2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800dce6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dcea:	0d1b      	lsrs	r3, r3, #20
 800dcec:	051b      	lsls	r3, r3, #20
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1bb      	bne.n	800dc6a <_strtod_l+0x72>
 800dcf2:	f7fe fb2b 	bl	800c34c <__errno>
 800dcf6:	2322      	movs	r3, #34	@ 0x22
 800dcf8:	6003      	str	r3, [r0, #0]
 800dcfa:	e7b6      	b.n	800dc6a <_strtod_l+0x72>
 800dcfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800dd00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dd04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800dd08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dd0c:	e7e7      	b.n	800dcde <_strtod_l+0xe6>
 800dd0e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800de90 <_strtod_l+0x298>
 800dd12:	e7e4      	b.n	800dcde <_strtod_l+0xe6>
 800dd14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dd18:	f04f 3aff 	mov.w	sl, #4294967295
 800dd1c:	e7df      	b.n	800dcde <_strtod_l+0xe6>
 800dd1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd20:	1c5a      	adds	r2, r3, #1
 800dd22:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd24:	785b      	ldrb	r3, [r3, #1]
 800dd26:	2b30      	cmp	r3, #48	@ 0x30
 800dd28:	d0f9      	beq.n	800dd1e <_strtod_l+0x126>
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d09d      	beq.n	800dc6a <_strtod_l+0x72>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	2700      	movs	r7, #0
 800dd32:	9308      	str	r3, [sp, #32]
 800dd34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd36:	930c      	str	r3, [sp, #48]	@ 0x30
 800dd38:	970b      	str	r7, [sp, #44]	@ 0x2c
 800dd3a:	46b9      	mov	r9, r7
 800dd3c:	220a      	movs	r2, #10
 800dd3e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dd40:	7805      	ldrb	r5, [r0, #0]
 800dd42:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800dd46:	b2d9      	uxtb	r1, r3
 800dd48:	2909      	cmp	r1, #9
 800dd4a:	d928      	bls.n	800dd9e <_strtod_l+0x1a6>
 800dd4c:	494f      	ldr	r1, [pc, #316]	@ (800de8c <_strtod_l+0x294>)
 800dd4e:	2201      	movs	r2, #1
 800dd50:	f001 f9ac 	bl	800f0ac <strncmp>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	d032      	beq.n	800ddbe <_strtod_l+0x1c6>
 800dd58:	2000      	movs	r0, #0
 800dd5a:	462a      	mov	r2, r5
 800dd5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800dd5e:	464d      	mov	r5, r9
 800dd60:	4603      	mov	r3, r0
 800dd62:	2a65      	cmp	r2, #101	@ 0x65
 800dd64:	d001      	beq.n	800dd6a <_strtod_l+0x172>
 800dd66:	2a45      	cmp	r2, #69	@ 0x45
 800dd68:	d114      	bne.n	800dd94 <_strtod_l+0x19c>
 800dd6a:	b91d      	cbnz	r5, 800dd74 <_strtod_l+0x17c>
 800dd6c:	9a08      	ldr	r2, [sp, #32]
 800dd6e:	4302      	orrs	r2, r0
 800dd70:	d096      	beq.n	800dca0 <_strtod_l+0xa8>
 800dd72:	2500      	movs	r5, #0
 800dd74:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dd76:	1c62      	adds	r2, r4, #1
 800dd78:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd7a:	7862      	ldrb	r2, [r4, #1]
 800dd7c:	2a2b      	cmp	r2, #43	@ 0x2b
 800dd7e:	d07a      	beq.n	800de76 <_strtod_l+0x27e>
 800dd80:	2a2d      	cmp	r2, #45	@ 0x2d
 800dd82:	d07e      	beq.n	800de82 <_strtod_l+0x28a>
 800dd84:	f04f 0c00 	mov.w	ip, #0
 800dd88:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dd8c:	2909      	cmp	r1, #9
 800dd8e:	f240 8085 	bls.w	800de9c <_strtod_l+0x2a4>
 800dd92:	9419      	str	r4, [sp, #100]	@ 0x64
 800dd94:	f04f 0800 	mov.w	r8, #0
 800dd98:	e0a5      	b.n	800dee6 <_strtod_l+0x2ee>
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	e7c8      	b.n	800dd30 <_strtod_l+0x138>
 800dd9e:	f1b9 0f08 	cmp.w	r9, #8
 800dda2:	bfd8      	it	le
 800dda4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800dda6:	f100 0001 	add.w	r0, r0, #1
 800ddaa:	bfda      	itte	le
 800ddac:	fb02 3301 	mlale	r3, r2, r1, r3
 800ddb0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ddb2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ddb6:	f109 0901 	add.w	r9, r9, #1
 800ddba:	9019      	str	r0, [sp, #100]	@ 0x64
 800ddbc:	e7bf      	b.n	800dd3e <_strtod_l+0x146>
 800ddbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddc0:	1c5a      	adds	r2, r3, #1
 800ddc2:	9219      	str	r2, [sp, #100]	@ 0x64
 800ddc4:	785a      	ldrb	r2, [r3, #1]
 800ddc6:	f1b9 0f00 	cmp.w	r9, #0
 800ddca:	d03b      	beq.n	800de44 <_strtod_l+0x24c>
 800ddcc:	900a      	str	r0, [sp, #40]	@ 0x28
 800ddce:	464d      	mov	r5, r9
 800ddd0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ddd4:	2b09      	cmp	r3, #9
 800ddd6:	d912      	bls.n	800ddfe <_strtod_l+0x206>
 800ddd8:	2301      	movs	r3, #1
 800ddda:	e7c2      	b.n	800dd62 <_strtod_l+0x16a>
 800dddc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddde:	1c5a      	adds	r2, r3, #1
 800dde0:	9219      	str	r2, [sp, #100]	@ 0x64
 800dde2:	785a      	ldrb	r2, [r3, #1]
 800dde4:	3001      	adds	r0, #1
 800dde6:	2a30      	cmp	r2, #48	@ 0x30
 800dde8:	d0f8      	beq.n	800dddc <_strtod_l+0x1e4>
 800ddea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ddee:	2b08      	cmp	r3, #8
 800ddf0:	f200 84d2 	bhi.w	800e798 <_strtod_l+0xba0>
 800ddf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddf6:	900a      	str	r0, [sp, #40]	@ 0x28
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	930c      	str	r3, [sp, #48]	@ 0x30
 800ddfc:	4605      	mov	r5, r0
 800ddfe:	3a30      	subs	r2, #48	@ 0x30
 800de00:	f100 0301 	add.w	r3, r0, #1
 800de04:	d018      	beq.n	800de38 <_strtod_l+0x240>
 800de06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800de08:	4419      	add	r1, r3
 800de0a:	910a      	str	r1, [sp, #40]	@ 0x28
 800de0c:	462e      	mov	r6, r5
 800de0e:	f04f 0e0a 	mov.w	lr, #10
 800de12:	1c71      	adds	r1, r6, #1
 800de14:	eba1 0c05 	sub.w	ip, r1, r5
 800de18:	4563      	cmp	r3, ip
 800de1a:	dc15      	bgt.n	800de48 <_strtod_l+0x250>
 800de1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800de20:	182b      	adds	r3, r5, r0
 800de22:	2b08      	cmp	r3, #8
 800de24:	f105 0501 	add.w	r5, r5, #1
 800de28:	4405      	add	r5, r0
 800de2a:	dc1a      	bgt.n	800de62 <_strtod_l+0x26a>
 800de2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800de2e:	230a      	movs	r3, #10
 800de30:	fb03 2301 	mla	r3, r3, r1, r2
 800de34:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de36:	2300      	movs	r3, #0
 800de38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800de3a:	1c51      	adds	r1, r2, #1
 800de3c:	9119      	str	r1, [sp, #100]	@ 0x64
 800de3e:	7852      	ldrb	r2, [r2, #1]
 800de40:	4618      	mov	r0, r3
 800de42:	e7c5      	b.n	800ddd0 <_strtod_l+0x1d8>
 800de44:	4648      	mov	r0, r9
 800de46:	e7ce      	b.n	800dde6 <_strtod_l+0x1ee>
 800de48:	2e08      	cmp	r6, #8
 800de4a:	dc05      	bgt.n	800de58 <_strtod_l+0x260>
 800de4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800de4e:	fb0e f606 	mul.w	r6, lr, r6
 800de52:	960b      	str	r6, [sp, #44]	@ 0x2c
 800de54:	460e      	mov	r6, r1
 800de56:	e7dc      	b.n	800de12 <_strtod_l+0x21a>
 800de58:	2910      	cmp	r1, #16
 800de5a:	bfd8      	it	le
 800de5c:	fb0e f707 	mulle.w	r7, lr, r7
 800de60:	e7f8      	b.n	800de54 <_strtod_l+0x25c>
 800de62:	2b0f      	cmp	r3, #15
 800de64:	bfdc      	itt	le
 800de66:	230a      	movle	r3, #10
 800de68:	fb03 2707 	mlale	r7, r3, r7, r2
 800de6c:	e7e3      	b.n	800de36 <_strtod_l+0x23e>
 800de6e:	2300      	movs	r3, #0
 800de70:	930a      	str	r3, [sp, #40]	@ 0x28
 800de72:	2301      	movs	r3, #1
 800de74:	e77a      	b.n	800dd6c <_strtod_l+0x174>
 800de76:	f04f 0c00 	mov.w	ip, #0
 800de7a:	1ca2      	adds	r2, r4, #2
 800de7c:	9219      	str	r2, [sp, #100]	@ 0x64
 800de7e:	78a2      	ldrb	r2, [r4, #2]
 800de80:	e782      	b.n	800dd88 <_strtod_l+0x190>
 800de82:	f04f 0c01 	mov.w	ip, #1
 800de86:	e7f8      	b.n	800de7a <_strtod_l+0x282>
 800de88:	080128c4 	.word	0x080128c4
 800de8c:	080126fb 	.word	0x080126fb
 800de90:	7ff00000 	.word	0x7ff00000
 800de94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800de96:	1c51      	adds	r1, r2, #1
 800de98:	9119      	str	r1, [sp, #100]	@ 0x64
 800de9a:	7852      	ldrb	r2, [r2, #1]
 800de9c:	2a30      	cmp	r2, #48	@ 0x30
 800de9e:	d0f9      	beq.n	800de94 <_strtod_l+0x29c>
 800dea0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dea4:	2908      	cmp	r1, #8
 800dea6:	f63f af75 	bhi.w	800dd94 <_strtod_l+0x19c>
 800deaa:	3a30      	subs	r2, #48	@ 0x30
 800deac:	9209      	str	r2, [sp, #36]	@ 0x24
 800deae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800deb0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800deb2:	f04f 080a 	mov.w	r8, #10
 800deb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800deb8:	1c56      	adds	r6, r2, #1
 800deba:	9619      	str	r6, [sp, #100]	@ 0x64
 800debc:	7852      	ldrb	r2, [r2, #1]
 800debe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dec2:	f1be 0f09 	cmp.w	lr, #9
 800dec6:	d939      	bls.n	800df3c <_strtod_l+0x344>
 800dec8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800deca:	1a76      	subs	r6, r6, r1
 800decc:	2e08      	cmp	r6, #8
 800dece:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ded2:	dc03      	bgt.n	800dedc <_strtod_l+0x2e4>
 800ded4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ded6:	4588      	cmp	r8, r1
 800ded8:	bfa8      	it	ge
 800deda:	4688      	movge	r8, r1
 800dedc:	f1bc 0f00 	cmp.w	ip, #0
 800dee0:	d001      	beq.n	800dee6 <_strtod_l+0x2ee>
 800dee2:	f1c8 0800 	rsb	r8, r8, #0
 800dee6:	2d00      	cmp	r5, #0
 800dee8:	d14e      	bne.n	800df88 <_strtod_l+0x390>
 800deea:	9908      	ldr	r1, [sp, #32]
 800deec:	4308      	orrs	r0, r1
 800deee:	f47f aebc 	bne.w	800dc6a <_strtod_l+0x72>
 800def2:	2b00      	cmp	r3, #0
 800def4:	f47f aed4 	bne.w	800dca0 <_strtod_l+0xa8>
 800def8:	2a69      	cmp	r2, #105	@ 0x69
 800defa:	d028      	beq.n	800df4e <_strtod_l+0x356>
 800defc:	dc25      	bgt.n	800df4a <_strtod_l+0x352>
 800defe:	2a49      	cmp	r2, #73	@ 0x49
 800df00:	d025      	beq.n	800df4e <_strtod_l+0x356>
 800df02:	2a4e      	cmp	r2, #78	@ 0x4e
 800df04:	f47f aecc 	bne.w	800dca0 <_strtod_l+0xa8>
 800df08:	499a      	ldr	r1, [pc, #616]	@ (800e174 <_strtod_l+0x57c>)
 800df0a:	a819      	add	r0, sp, #100	@ 0x64
 800df0c:	f001 fbc4 	bl	800f698 <__match>
 800df10:	2800      	cmp	r0, #0
 800df12:	f43f aec5 	beq.w	800dca0 <_strtod_l+0xa8>
 800df16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	2b28      	cmp	r3, #40	@ 0x28
 800df1c:	d12e      	bne.n	800df7c <_strtod_l+0x384>
 800df1e:	4996      	ldr	r1, [pc, #600]	@ (800e178 <_strtod_l+0x580>)
 800df20:	aa1c      	add	r2, sp, #112	@ 0x70
 800df22:	a819      	add	r0, sp, #100	@ 0x64
 800df24:	f001 fbcc 	bl	800f6c0 <__hexnan>
 800df28:	2805      	cmp	r0, #5
 800df2a:	d127      	bne.n	800df7c <_strtod_l+0x384>
 800df2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800df2e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800df32:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800df36:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800df3a:	e696      	b.n	800dc6a <_strtod_l+0x72>
 800df3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800df3e:	fb08 2101 	mla	r1, r8, r1, r2
 800df42:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800df46:	9209      	str	r2, [sp, #36]	@ 0x24
 800df48:	e7b5      	b.n	800deb6 <_strtod_l+0x2be>
 800df4a:	2a6e      	cmp	r2, #110	@ 0x6e
 800df4c:	e7da      	b.n	800df04 <_strtod_l+0x30c>
 800df4e:	498b      	ldr	r1, [pc, #556]	@ (800e17c <_strtod_l+0x584>)
 800df50:	a819      	add	r0, sp, #100	@ 0x64
 800df52:	f001 fba1 	bl	800f698 <__match>
 800df56:	2800      	cmp	r0, #0
 800df58:	f43f aea2 	beq.w	800dca0 <_strtod_l+0xa8>
 800df5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df5e:	4988      	ldr	r1, [pc, #544]	@ (800e180 <_strtod_l+0x588>)
 800df60:	3b01      	subs	r3, #1
 800df62:	a819      	add	r0, sp, #100	@ 0x64
 800df64:	9319      	str	r3, [sp, #100]	@ 0x64
 800df66:	f001 fb97 	bl	800f698 <__match>
 800df6a:	b910      	cbnz	r0, 800df72 <_strtod_l+0x37a>
 800df6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df6e:	3301      	adds	r3, #1
 800df70:	9319      	str	r3, [sp, #100]	@ 0x64
 800df72:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800e190 <_strtod_l+0x598>
 800df76:	f04f 0a00 	mov.w	sl, #0
 800df7a:	e676      	b.n	800dc6a <_strtod_l+0x72>
 800df7c:	4881      	ldr	r0, [pc, #516]	@ (800e184 <_strtod_l+0x58c>)
 800df7e:	f001 f8c7 	bl	800f110 <nan>
 800df82:	ec5b ab10 	vmov	sl, fp, d0
 800df86:	e670      	b.n	800dc6a <_strtod_l+0x72>
 800df88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df8a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800df8c:	eba8 0303 	sub.w	r3, r8, r3
 800df90:	f1b9 0f00 	cmp.w	r9, #0
 800df94:	bf08      	it	eq
 800df96:	46a9      	moveq	r9, r5
 800df98:	2d10      	cmp	r5, #16
 800df9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800df9c:	462c      	mov	r4, r5
 800df9e:	bfa8      	it	ge
 800dfa0:	2410      	movge	r4, #16
 800dfa2:	f7f2 fab7 	bl	8000514 <__aeabi_ui2d>
 800dfa6:	2d09      	cmp	r5, #9
 800dfa8:	4682      	mov	sl, r0
 800dfaa:	468b      	mov	fp, r1
 800dfac:	dc13      	bgt.n	800dfd6 <_strtod_l+0x3de>
 800dfae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f43f ae5a 	beq.w	800dc6a <_strtod_l+0x72>
 800dfb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfb8:	dd78      	ble.n	800e0ac <_strtod_l+0x4b4>
 800dfba:	2b16      	cmp	r3, #22
 800dfbc:	dc5f      	bgt.n	800e07e <_strtod_l+0x486>
 800dfbe:	4972      	ldr	r1, [pc, #456]	@ (800e188 <_strtod_l+0x590>)
 800dfc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dfc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfc8:	4652      	mov	r2, sl
 800dfca:	465b      	mov	r3, fp
 800dfcc:	f7f2 fb1c 	bl	8000608 <__aeabi_dmul>
 800dfd0:	4682      	mov	sl, r0
 800dfd2:	468b      	mov	fp, r1
 800dfd4:	e649      	b.n	800dc6a <_strtod_l+0x72>
 800dfd6:	4b6c      	ldr	r3, [pc, #432]	@ (800e188 <_strtod_l+0x590>)
 800dfd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dfdc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dfe0:	f7f2 fb12 	bl	8000608 <__aeabi_dmul>
 800dfe4:	4682      	mov	sl, r0
 800dfe6:	4638      	mov	r0, r7
 800dfe8:	468b      	mov	fp, r1
 800dfea:	f7f2 fa93 	bl	8000514 <__aeabi_ui2d>
 800dfee:	4602      	mov	r2, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	4650      	mov	r0, sl
 800dff4:	4659      	mov	r1, fp
 800dff6:	f7f2 f951 	bl	800029c <__adddf3>
 800dffa:	2d0f      	cmp	r5, #15
 800dffc:	4682      	mov	sl, r0
 800dffe:	468b      	mov	fp, r1
 800e000:	ddd5      	ble.n	800dfae <_strtod_l+0x3b6>
 800e002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e004:	1b2c      	subs	r4, r5, r4
 800e006:	441c      	add	r4, r3
 800e008:	2c00      	cmp	r4, #0
 800e00a:	f340 8093 	ble.w	800e134 <_strtod_l+0x53c>
 800e00e:	f014 030f 	ands.w	r3, r4, #15
 800e012:	d00a      	beq.n	800e02a <_strtod_l+0x432>
 800e014:	495c      	ldr	r1, [pc, #368]	@ (800e188 <_strtod_l+0x590>)
 800e016:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e01a:	4652      	mov	r2, sl
 800e01c:	465b      	mov	r3, fp
 800e01e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e022:	f7f2 faf1 	bl	8000608 <__aeabi_dmul>
 800e026:	4682      	mov	sl, r0
 800e028:	468b      	mov	fp, r1
 800e02a:	f034 040f 	bics.w	r4, r4, #15
 800e02e:	d073      	beq.n	800e118 <_strtod_l+0x520>
 800e030:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e034:	dd49      	ble.n	800e0ca <_strtod_l+0x4d2>
 800e036:	2400      	movs	r4, #0
 800e038:	46a0      	mov	r8, r4
 800e03a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e03c:	46a1      	mov	r9, r4
 800e03e:	9a05      	ldr	r2, [sp, #20]
 800e040:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800e190 <_strtod_l+0x598>
 800e044:	2322      	movs	r3, #34	@ 0x22
 800e046:	6013      	str	r3, [r2, #0]
 800e048:	f04f 0a00 	mov.w	sl, #0
 800e04c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e04e:	2b00      	cmp	r3, #0
 800e050:	f43f ae0b 	beq.w	800dc6a <_strtod_l+0x72>
 800e054:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e056:	9805      	ldr	r0, [sp, #20]
 800e058:	f7ff f946 	bl	800d2e8 <_Bfree>
 800e05c:	9805      	ldr	r0, [sp, #20]
 800e05e:	4649      	mov	r1, r9
 800e060:	f7ff f942 	bl	800d2e8 <_Bfree>
 800e064:	9805      	ldr	r0, [sp, #20]
 800e066:	4641      	mov	r1, r8
 800e068:	f7ff f93e 	bl	800d2e8 <_Bfree>
 800e06c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e06e:	9805      	ldr	r0, [sp, #20]
 800e070:	f7ff f93a 	bl	800d2e8 <_Bfree>
 800e074:	9805      	ldr	r0, [sp, #20]
 800e076:	4621      	mov	r1, r4
 800e078:	f7ff f936 	bl	800d2e8 <_Bfree>
 800e07c:	e5f5      	b.n	800dc6a <_strtod_l+0x72>
 800e07e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e080:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e084:	4293      	cmp	r3, r2
 800e086:	dbbc      	blt.n	800e002 <_strtod_l+0x40a>
 800e088:	4c3f      	ldr	r4, [pc, #252]	@ (800e188 <_strtod_l+0x590>)
 800e08a:	f1c5 050f 	rsb	r5, r5, #15
 800e08e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e092:	4652      	mov	r2, sl
 800e094:	465b      	mov	r3, fp
 800e096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e09a:	f7f2 fab5 	bl	8000608 <__aeabi_dmul>
 800e09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0a0:	1b5d      	subs	r5, r3, r5
 800e0a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e0a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e0aa:	e78f      	b.n	800dfcc <_strtod_l+0x3d4>
 800e0ac:	3316      	adds	r3, #22
 800e0ae:	dba8      	blt.n	800e002 <_strtod_l+0x40a>
 800e0b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0b2:	eba3 0808 	sub.w	r8, r3, r8
 800e0b6:	4b34      	ldr	r3, [pc, #208]	@ (800e188 <_strtod_l+0x590>)
 800e0b8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e0bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e0c0:	4650      	mov	r0, sl
 800e0c2:	4659      	mov	r1, fp
 800e0c4:	f7f2 fbca 	bl	800085c <__aeabi_ddiv>
 800e0c8:	e782      	b.n	800dfd0 <_strtod_l+0x3d8>
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	4f2f      	ldr	r7, [pc, #188]	@ (800e18c <_strtod_l+0x594>)
 800e0ce:	1124      	asrs	r4, r4, #4
 800e0d0:	4650      	mov	r0, sl
 800e0d2:	4659      	mov	r1, fp
 800e0d4:	461e      	mov	r6, r3
 800e0d6:	2c01      	cmp	r4, #1
 800e0d8:	dc21      	bgt.n	800e11e <_strtod_l+0x526>
 800e0da:	b10b      	cbz	r3, 800e0e0 <_strtod_l+0x4e8>
 800e0dc:	4682      	mov	sl, r0
 800e0de:	468b      	mov	fp, r1
 800e0e0:	492a      	ldr	r1, [pc, #168]	@ (800e18c <_strtod_l+0x594>)
 800e0e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e0e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e0ea:	4652      	mov	r2, sl
 800e0ec:	465b      	mov	r3, fp
 800e0ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0f2:	f7f2 fa89 	bl	8000608 <__aeabi_dmul>
 800e0f6:	4b26      	ldr	r3, [pc, #152]	@ (800e190 <_strtod_l+0x598>)
 800e0f8:	460a      	mov	r2, r1
 800e0fa:	400b      	ands	r3, r1
 800e0fc:	4925      	ldr	r1, [pc, #148]	@ (800e194 <_strtod_l+0x59c>)
 800e0fe:	428b      	cmp	r3, r1
 800e100:	4682      	mov	sl, r0
 800e102:	d898      	bhi.n	800e036 <_strtod_l+0x43e>
 800e104:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e108:	428b      	cmp	r3, r1
 800e10a:	bf86      	itte	hi
 800e10c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800e198 <_strtod_l+0x5a0>
 800e110:	f04f 3aff 	movhi.w	sl, #4294967295
 800e114:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e118:	2300      	movs	r3, #0
 800e11a:	9308      	str	r3, [sp, #32]
 800e11c:	e076      	b.n	800e20c <_strtod_l+0x614>
 800e11e:	07e2      	lsls	r2, r4, #31
 800e120:	d504      	bpl.n	800e12c <_strtod_l+0x534>
 800e122:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e126:	f7f2 fa6f 	bl	8000608 <__aeabi_dmul>
 800e12a:	2301      	movs	r3, #1
 800e12c:	3601      	adds	r6, #1
 800e12e:	1064      	asrs	r4, r4, #1
 800e130:	3708      	adds	r7, #8
 800e132:	e7d0      	b.n	800e0d6 <_strtod_l+0x4de>
 800e134:	d0f0      	beq.n	800e118 <_strtod_l+0x520>
 800e136:	4264      	negs	r4, r4
 800e138:	f014 020f 	ands.w	r2, r4, #15
 800e13c:	d00a      	beq.n	800e154 <_strtod_l+0x55c>
 800e13e:	4b12      	ldr	r3, [pc, #72]	@ (800e188 <_strtod_l+0x590>)
 800e140:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e144:	4650      	mov	r0, sl
 800e146:	4659      	mov	r1, fp
 800e148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14c:	f7f2 fb86 	bl	800085c <__aeabi_ddiv>
 800e150:	4682      	mov	sl, r0
 800e152:	468b      	mov	fp, r1
 800e154:	1124      	asrs	r4, r4, #4
 800e156:	d0df      	beq.n	800e118 <_strtod_l+0x520>
 800e158:	2c1f      	cmp	r4, #31
 800e15a:	dd1f      	ble.n	800e19c <_strtod_l+0x5a4>
 800e15c:	2400      	movs	r4, #0
 800e15e:	46a0      	mov	r8, r4
 800e160:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e162:	46a1      	mov	r9, r4
 800e164:	9a05      	ldr	r2, [sp, #20]
 800e166:	2322      	movs	r3, #34	@ 0x22
 800e168:	f04f 0a00 	mov.w	sl, #0
 800e16c:	f04f 0b00 	mov.w	fp, #0
 800e170:	6013      	str	r3, [r2, #0]
 800e172:	e76b      	b.n	800e04c <_strtod_l+0x454>
 800e174:	080125e9 	.word	0x080125e9
 800e178:	080128b0 	.word	0x080128b0
 800e17c:	080125e1 	.word	0x080125e1
 800e180:	08012618 	.word	0x08012618
 800e184:	08012751 	.word	0x08012751
 800e188:	080127e8 	.word	0x080127e8
 800e18c:	080127c0 	.word	0x080127c0
 800e190:	7ff00000 	.word	0x7ff00000
 800e194:	7ca00000 	.word	0x7ca00000
 800e198:	7fefffff 	.word	0x7fefffff
 800e19c:	f014 0310 	ands.w	r3, r4, #16
 800e1a0:	bf18      	it	ne
 800e1a2:	236a      	movne	r3, #106	@ 0x6a
 800e1a4:	4ea9      	ldr	r6, [pc, #676]	@ (800e44c <_strtod_l+0x854>)
 800e1a6:	9308      	str	r3, [sp, #32]
 800e1a8:	4650      	mov	r0, sl
 800e1aa:	4659      	mov	r1, fp
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	07e7      	lsls	r7, r4, #31
 800e1b0:	d504      	bpl.n	800e1bc <_strtod_l+0x5c4>
 800e1b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e1b6:	f7f2 fa27 	bl	8000608 <__aeabi_dmul>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	1064      	asrs	r4, r4, #1
 800e1be:	f106 0608 	add.w	r6, r6, #8
 800e1c2:	d1f4      	bne.n	800e1ae <_strtod_l+0x5b6>
 800e1c4:	b10b      	cbz	r3, 800e1ca <_strtod_l+0x5d2>
 800e1c6:	4682      	mov	sl, r0
 800e1c8:	468b      	mov	fp, r1
 800e1ca:	9b08      	ldr	r3, [sp, #32]
 800e1cc:	b1b3      	cbz	r3, 800e1fc <_strtod_l+0x604>
 800e1ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e1d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	4659      	mov	r1, fp
 800e1da:	dd0f      	ble.n	800e1fc <_strtod_l+0x604>
 800e1dc:	2b1f      	cmp	r3, #31
 800e1de:	dd56      	ble.n	800e28e <_strtod_l+0x696>
 800e1e0:	2b34      	cmp	r3, #52	@ 0x34
 800e1e2:	bfde      	ittt	le
 800e1e4:	f04f 33ff 	movle.w	r3, #4294967295
 800e1e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e1ec:	4093      	lslle	r3, r2
 800e1ee:	f04f 0a00 	mov.w	sl, #0
 800e1f2:	bfcc      	ite	gt
 800e1f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e1f8:	ea03 0b01 	andle.w	fp, r3, r1
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	2300      	movs	r3, #0
 800e200:	4650      	mov	r0, sl
 800e202:	4659      	mov	r1, fp
 800e204:	f7f2 fc68 	bl	8000ad8 <__aeabi_dcmpeq>
 800e208:	2800      	cmp	r0, #0
 800e20a:	d1a7      	bne.n	800e15c <_strtod_l+0x564>
 800e20c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e212:	9805      	ldr	r0, [sp, #20]
 800e214:	462b      	mov	r3, r5
 800e216:	464a      	mov	r2, r9
 800e218:	f7ff f8ce 	bl	800d3b8 <__s2b>
 800e21c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e21e:	2800      	cmp	r0, #0
 800e220:	f43f af09 	beq.w	800e036 <_strtod_l+0x43e>
 800e224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e226:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e228:	2a00      	cmp	r2, #0
 800e22a:	eba3 0308 	sub.w	r3, r3, r8
 800e22e:	bfa8      	it	ge
 800e230:	2300      	movge	r3, #0
 800e232:	9312      	str	r3, [sp, #72]	@ 0x48
 800e234:	2400      	movs	r4, #0
 800e236:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e23a:	9316      	str	r3, [sp, #88]	@ 0x58
 800e23c:	46a0      	mov	r8, r4
 800e23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e240:	9805      	ldr	r0, [sp, #20]
 800e242:	6859      	ldr	r1, [r3, #4]
 800e244:	f7ff f810 	bl	800d268 <_Balloc>
 800e248:	4681      	mov	r9, r0
 800e24a:	2800      	cmp	r0, #0
 800e24c:	f43f aef7 	beq.w	800e03e <_strtod_l+0x446>
 800e250:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e252:	691a      	ldr	r2, [r3, #16]
 800e254:	3202      	adds	r2, #2
 800e256:	f103 010c 	add.w	r1, r3, #12
 800e25a:	0092      	lsls	r2, r2, #2
 800e25c:	300c      	adds	r0, #12
 800e25e:	f000 ff47 	bl	800f0f0 <memcpy>
 800e262:	ec4b ab10 	vmov	d0, sl, fp
 800e266:	9805      	ldr	r0, [sp, #20]
 800e268:	aa1c      	add	r2, sp, #112	@ 0x70
 800e26a:	a91b      	add	r1, sp, #108	@ 0x6c
 800e26c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e270:	f7ff fbd6 	bl	800da20 <__d2b>
 800e274:	901a      	str	r0, [sp, #104]	@ 0x68
 800e276:	2800      	cmp	r0, #0
 800e278:	f43f aee1 	beq.w	800e03e <_strtod_l+0x446>
 800e27c:	9805      	ldr	r0, [sp, #20]
 800e27e:	2101      	movs	r1, #1
 800e280:	f7ff f930 	bl	800d4e4 <__i2b>
 800e284:	4680      	mov	r8, r0
 800e286:	b948      	cbnz	r0, 800e29c <_strtod_l+0x6a4>
 800e288:	f04f 0800 	mov.w	r8, #0
 800e28c:	e6d7      	b.n	800e03e <_strtod_l+0x446>
 800e28e:	f04f 32ff 	mov.w	r2, #4294967295
 800e292:	fa02 f303 	lsl.w	r3, r2, r3
 800e296:	ea03 0a0a 	and.w	sl, r3, sl
 800e29a:	e7af      	b.n	800e1fc <_strtod_l+0x604>
 800e29c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e29e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e2a0:	2d00      	cmp	r5, #0
 800e2a2:	bfab      	itete	ge
 800e2a4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e2a6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e2a8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e2aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e2ac:	bfac      	ite	ge
 800e2ae:	18ef      	addge	r7, r5, r3
 800e2b0:	1b5e      	sublt	r6, r3, r5
 800e2b2:	9b08      	ldr	r3, [sp, #32]
 800e2b4:	1aed      	subs	r5, r5, r3
 800e2b6:	4415      	add	r5, r2
 800e2b8:	4b65      	ldr	r3, [pc, #404]	@ (800e450 <_strtod_l+0x858>)
 800e2ba:	3d01      	subs	r5, #1
 800e2bc:	429d      	cmp	r5, r3
 800e2be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e2c2:	da50      	bge.n	800e366 <_strtod_l+0x76e>
 800e2c4:	1b5b      	subs	r3, r3, r5
 800e2c6:	2b1f      	cmp	r3, #31
 800e2c8:	eba2 0203 	sub.w	r2, r2, r3
 800e2cc:	f04f 0101 	mov.w	r1, #1
 800e2d0:	dc3d      	bgt.n	800e34e <_strtod_l+0x756>
 800e2d2:	fa01 f303 	lsl.w	r3, r1, r3
 800e2d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e2d8:	2300      	movs	r3, #0
 800e2da:	9310      	str	r3, [sp, #64]	@ 0x40
 800e2dc:	18bd      	adds	r5, r7, r2
 800e2de:	9b08      	ldr	r3, [sp, #32]
 800e2e0:	42af      	cmp	r7, r5
 800e2e2:	4416      	add	r6, r2
 800e2e4:	441e      	add	r6, r3
 800e2e6:	463b      	mov	r3, r7
 800e2e8:	bfa8      	it	ge
 800e2ea:	462b      	movge	r3, r5
 800e2ec:	42b3      	cmp	r3, r6
 800e2ee:	bfa8      	it	ge
 800e2f0:	4633      	movge	r3, r6
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	bfc2      	ittt	gt
 800e2f6:	1aed      	subgt	r5, r5, r3
 800e2f8:	1af6      	subgt	r6, r6, r3
 800e2fa:	1aff      	subgt	r7, r7, r3
 800e2fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	dd16      	ble.n	800e330 <_strtod_l+0x738>
 800e302:	4641      	mov	r1, r8
 800e304:	9805      	ldr	r0, [sp, #20]
 800e306:	461a      	mov	r2, r3
 800e308:	f7ff f9a4 	bl	800d654 <__pow5mult>
 800e30c:	4680      	mov	r8, r0
 800e30e:	2800      	cmp	r0, #0
 800e310:	d0ba      	beq.n	800e288 <_strtod_l+0x690>
 800e312:	4601      	mov	r1, r0
 800e314:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e316:	9805      	ldr	r0, [sp, #20]
 800e318:	f7ff f8fa 	bl	800d510 <__multiply>
 800e31c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e31e:	2800      	cmp	r0, #0
 800e320:	f43f ae8d 	beq.w	800e03e <_strtod_l+0x446>
 800e324:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e326:	9805      	ldr	r0, [sp, #20]
 800e328:	f7fe ffde 	bl	800d2e8 <_Bfree>
 800e32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e32e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e330:	2d00      	cmp	r5, #0
 800e332:	dc1d      	bgt.n	800e370 <_strtod_l+0x778>
 800e334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e336:	2b00      	cmp	r3, #0
 800e338:	dd23      	ble.n	800e382 <_strtod_l+0x78a>
 800e33a:	4649      	mov	r1, r9
 800e33c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e33e:	9805      	ldr	r0, [sp, #20]
 800e340:	f7ff f988 	bl	800d654 <__pow5mult>
 800e344:	4681      	mov	r9, r0
 800e346:	b9e0      	cbnz	r0, 800e382 <_strtod_l+0x78a>
 800e348:	f04f 0900 	mov.w	r9, #0
 800e34c:	e677      	b.n	800e03e <_strtod_l+0x446>
 800e34e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e352:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e356:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e35a:	35e2      	adds	r5, #226	@ 0xe2
 800e35c:	fa01 f305 	lsl.w	r3, r1, r5
 800e360:	9310      	str	r3, [sp, #64]	@ 0x40
 800e362:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e364:	e7ba      	b.n	800e2dc <_strtod_l+0x6e4>
 800e366:	2300      	movs	r3, #0
 800e368:	9310      	str	r3, [sp, #64]	@ 0x40
 800e36a:	2301      	movs	r3, #1
 800e36c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e36e:	e7b5      	b.n	800e2dc <_strtod_l+0x6e4>
 800e370:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e372:	9805      	ldr	r0, [sp, #20]
 800e374:	462a      	mov	r2, r5
 800e376:	f7ff f9c7 	bl	800d708 <__lshift>
 800e37a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e37c:	2800      	cmp	r0, #0
 800e37e:	d1d9      	bne.n	800e334 <_strtod_l+0x73c>
 800e380:	e65d      	b.n	800e03e <_strtod_l+0x446>
 800e382:	2e00      	cmp	r6, #0
 800e384:	dd07      	ble.n	800e396 <_strtod_l+0x79e>
 800e386:	4649      	mov	r1, r9
 800e388:	9805      	ldr	r0, [sp, #20]
 800e38a:	4632      	mov	r2, r6
 800e38c:	f7ff f9bc 	bl	800d708 <__lshift>
 800e390:	4681      	mov	r9, r0
 800e392:	2800      	cmp	r0, #0
 800e394:	d0d8      	beq.n	800e348 <_strtod_l+0x750>
 800e396:	2f00      	cmp	r7, #0
 800e398:	dd08      	ble.n	800e3ac <_strtod_l+0x7b4>
 800e39a:	4641      	mov	r1, r8
 800e39c:	9805      	ldr	r0, [sp, #20]
 800e39e:	463a      	mov	r2, r7
 800e3a0:	f7ff f9b2 	bl	800d708 <__lshift>
 800e3a4:	4680      	mov	r8, r0
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	f43f ae49 	beq.w	800e03e <_strtod_l+0x446>
 800e3ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e3ae:	9805      	ldr	r0, [sp, #20]
 800e3b0:	464a      	mov	r2, r9
 800e3b2:	f7ff fa31 	bl	800d818 <__mdiff>
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	f43f ae40 	beq.w	800e03e <_strtod_l+0x446>
 800e3be:	68c3      	ldr	r3, [r0, #12]
 800e3c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	60c3      	str	r3, [r0, #12]
 800e3c6:	4641      	mov	r1, r8
 800e3c8:	f7ff fa0a 	bl	800d7e0 <__mcmp>
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	da45      	bge.n	800e45c <_strtod_l+0x864>
 800e3d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3d2:	ea53 030a 	orrs.w	r3, r3, sl
 800e3d6:	d16b      	bne.n	800e4b0 <_strtod_l+0x8b8>
 800e3d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d167      	bne.n	800e4b0 <_strtod_l+0x8b8>
 800e3e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e3e4:	0d1b      	lsrs	r3, r3, #20
 800e3e6:	051b      	lsls	r3, r3, #20
 800e3e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e3ec:	d960      	bls.n	800e4b0 <_strtod_l+0x8b8>
 800e3ee:	6963      	ldr	r3, [r4, #20]
 800e3f0:	b913      	cbnz	r3, 800e3f8 <_strtod_l+0x800>
 800e3f2:	6923      	ldr	r3, [r4, #16]
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	dd5b      	ble.n	800e4b0 <_strtod_l+0x8b8>
 800e3f8:	4621      	mov	r1, r4
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	9805      	ldr	r0, [sp, #20]
 800e3fe:	f7ff f983 	bl	800d708 <__lshift>
 800e402:	4641      	mov	r1, r8
 800e404:	4604      	mov	r4, r0
 800e406:	f7ff f9eb 	bl	800d7e0 <__mcmp>
 800e40a:	2800      	cmp	r0, #0
 800e40c:	dd50      	ble.n	800e4b0 <_strtod_l+0x8b8>
 800e40e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e412:	9a08      	ldr	r2, [sp, #32]
 800e414:	0d1b      	lsrs	r3, r3, #20
 800e416:	051b      	lsls	r3, r3, #20
 800e418:	2a00      	cmp	r2, #0
 800e41a:	d06a      	beq.n	800e4f2 <_strtod_l+0x8fa>
 800e41c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e420:	d867      	bhi.n	800e4f2 <_strtod_l+0x8fa>
 800e422:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e426:	f67f ae9d 	bls.w	800e164 <_strtod_l+0x56c>
 800e42a:	4b0a      	ldr	r3, [pc, #40]	@ (800e454 <_strtod_l+0x85c>)
 800e42c:	4650      	mov	r0, sl
 800e42e:	4659      	mov	r1, fp
 800e430:	2200      	movs	r2, #0
 800e432:	f7f2 f8e9 	bl	8000608 <__aeabi_dmul>
 800e436:	4b08      	ldr	r3, [pc, #32]	@ (800e458 <_strtod_l+0x860>)
 800e438:	400b      	ands	r3, r1
 800e43a:	4682      	mov	sl, r0
 800e43c:	468b      	mov	fp, r1
 800e43e:	2b00      	cmp	r3, #0
 800e440:	f47f ae08 	bne.w	800e054 <_strtod_l+0x45c>
 800e444:	9a05      	ldr	r2, [sp, #20]
 800e446:	2322      	movs	r3, #34	@ 0x22
 800e448:	6013      	str	r3, [r2, #0]
 800e44a:	e603      	b.n	800e054 <_strtod_l+0x45c>
 800e44c:	080128d8 	.word	0x080128d8
 800e450:	fffffc02 	.word	0xfffffc02
 800e454:	39500000 	.word	0x39500000
 800e458:	7ff00000 	.word	0x7ff00000
 800e45c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e460:	d165      	bne.n	800e52e <_strtod_l+0x936>
 800e462:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e468:	b35a      	cbz	r2, 800e4c2 <_strtod_l+0x8ca>
 800e46a:	4a9f      	ldr	r2, [pc, #636]	@ (800e6e8 <_strtod_l+0xaf0>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d12b      	bne.n	800e4c8 <_strtod_l+0x8d0>
 800e470:	9b08      	ldr	r3, [sp, #32]
 800e472:	4651      	mov	r1, sl
 800e474:	b303      	cbz	r3, 800e4b8 <_strtod_l+0x8c0>
 800e476:	4b9d      	ldr	r3, [pc, #628]	@ (800e6ec <_strtod_l+0xaf4>)
 800e478:	465a      	mov	r2, fp
 800e47a:	4013      	ands	r3, r2
 800e47c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e480:	f04f 32ff 	mov.w	r2, #4294967295
 800e484:	d81b      	bhi.n	800e4be <_strtod_l+0x8c6>
 800e486:	0d1b      	lsrs	r3, r3, #20
 800e488:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e48c:	fa02 f303 	lsl.w	r3, r2, r3
 800e490:	4299      	cmp	r1, r3
 800e492:	d119      	bne.n	800e4c8 <_strtod_l+0x8d0>
 800e494:	4b96      	ldr	r3, [pc, #600]	@ (800e6f0 <_strtod_l+0xaf8>)
 800e496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e498:	429a      	cmp	r2, r3
 800e49a:	d102      	bne.n	800e4a2 <_strtod_l+0x8aa>
 800e49c:	3101      	adds	r1, #1
 800e49e:	f43f adce 	beq.w	800e03e <_strtod_l+0x446>
 800e4a2:	4b92      	ldr	r3, [pc, #584]	@ (800e6ec <_strtod_l+0xaf4>)
 800e4a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4a6:	401a      	ands	r2, r3
 800e4a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e4ac:	f04f 0a00 	mov.w	sl, #0
 800e4b0:	9b08      	ldr	r3, [sp, #32]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d1b9      	bne.n	800e42a <_strtod_l+0x832>
 800e4b6:	e5cd      	b.n	800e054 <_strtod_l+0x45c>
 800e4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4bc:	e7e8      	b.n	800e490 <_strtod_l+0x898>
 800e4be:	4613      	mov	r3, r2
 800e4c0:	e7e6      	b.n	800e490 <_strtod_l+0x898>
 800e4c2:	ea53 030a 	orrs.w	r3, r3, sl
 800e4c6:	d0a2      	beq.n	800e40e <_strtod_l+0x816>
 800e4c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e4ca:	b1db      	cbz	r3, 800e504 <_strtod_l+0x90c>
 800e4cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4ce:	4213      	tst	r3, r2
 800e4d0:	d0ee      	beq.n	800e4b0 <_strtod_l+0x8b8>
 800e4d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4d4:	9a08      	ldr	r2, [sp, #32]
 800e4d6:	4650      	mov	r0, sl
 800e4d8:	4659      	mov	r1, fp
 800e4da:	b1bb      	cbz	r3, 800e50c <_strtod_l+0x914>
 800e4dc:	f7ff fb6e 	bl	800dbbc <sulp>
 800e4e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4e4:	ec53 2b10 	vmov	r2, r3, d0
 800e4e8:	f7f1 fed8 	bl	800029c <__adddf3>
 800e4ec:	4682      	mov	sl, r0
 800e4ee:	468b      	mov	fp, r1
 800e4f0:	e7de      	b.n	800e4b0 <_strtod_l+0x8b8>
 800e4f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e4f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e4fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e4fe:	f04f 3aff 	mov.w	sl, #4294967295
 800e502:	e7d5      	b.n	800e4b0 <_strtod_l+0x8b8>
 800e504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e506:	ea13 0f0a 	tst.w	r3, sl
 800e50a:	e7e1      	b.n	800e4d0 <_strtod_l+0x8d8>
 800e50c:	f7ff fb56 	bl	800dbbc <sulp>
 800e510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e514:	ec53 2b10 	vmov	r2, r3, d0
 800e518:	f7f1 febe 	bl	8000298 <__aeabi_dsub>
 800e51c:	2200      	movs	r2, #0
 800e51e:	2300      	movs	r3, #0
 800e520:	4682      	mov	sl, r0
 800e522:	468b      	mov	fp, r1
 800e524:	f7f2 fad8 	bl	8000ad8 <__aeabi_dcmpeq>
 800e528:	2800      	cmp	r0, #0
 800e52a:	d0c1      	beq.n	800e4b0 <_strtod_l+0x8b8>
 800e52c:	e61a      	b.n	800e164 <_strtod_l+0x56c>
 800e52e:	4641      	mov	r1, r8
 800e530:	4620      	mov	r0, r4
 800e532:	f7ff facd 	bl	800dad0 <__ratio>
 800e536:	ec57 6b10 	vmov	r6, r7, d0
 800e53a:	2200      	movs	r2, #0
 800e53c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e540:	4630      	mov	r0, r6
 800e542:	4639      	mov	r1, r7
 800e544:	f7f2 fadc 	bl	8000b00 <__aeabi_dcmple>
 800e548:	2800      	cmp	r0, #0
 800e54a:	d06f      	beq.n	800e62c <_strtod_l+0xa34>
 800e54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d17a      	bne.n	800e648 <_strtod_l+0xa50>
 800e552:	f1ba 0f00 	cmp.w	sl, #0
 800e556:	d158      	bne.n	800e60a <_strtod_l+0xa12>
 800e558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e55a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d15a      	bne.n	800e618 <_strtod_l+0xa20>
 800e562:	4b64      	ldr	r3, [pc, #400]	@ (800e6f4 <_strtod_l+0xafc>)
 800e564:	2200      	movs	r2, #0
 800e566:	4630      	mov	r0, r6
 800e568:	4639      	mov	r1, r7
 800e56a:	f7f2 fabf 	bl	8000aec <__aeabi_dcmplt>
 800e56e:	2800      	cmp	r0, #0
 800e570:	d159      	bne.n	800e626 <_strtod_l+0xa2e>
 800e572:	4630      	mov	r0, r6
 800e574:	4639      	mov	r1, r7
 800e576:	4b60      	ldr	r3, [pc, #384]	@ (800e6f8 <_strtod_l+0xb00>)
 800e578:	2200      	movs	r2, #0
 800e57a:	f7f2 f845 	bl	8000608 <__aeabi_dmul>
 800e57e:	4606      	mov	r6, r0
 800e580:	460f      	mov	r7, r1
 800e582:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e586:	9606      	str	r6, [sp, #24]
 800e588:	9307      	str	r3, [sp, #28]
 800e58a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e58e:	4d57      	ldr	r5, [pc, #348]	@ (800e6ec <_strtod_l+0xaf4>)
 800e590:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e596:	401d      	ands	r5, r3
 800e598:	4b58      	ldr	r3, [pc, #352]	@ (800e6fc <_strtod_l+0xb04>)
 800e59a:	429d      	cmp	r5, r3
 800e59c:	f040 80b2 	bne.w	800e704 <_strtod_l+0xb0c>
 800e5a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e5a6:	ec4b ab10 	vmov	d0, sl, fp
 800e5aa:	f7ff f9c9 	bl	800d940 <__ulp>
 800e5ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e5b2:	ec51 0b10 	vmov	r0, r1, d0
 800e5b6:	f7f2 f827 	bl	8000608 <__aeabi_dmul>
 800e5ba:	4652      	mov	r2, sl
 800e5bc:	465b      	mov	r3, fp
 800e5be:	f7f1 fe6d 	bl	800029c <__adddf3>
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	4949      	ldr	r1, [pc, #292]	@ (800e6ec <_strtod_l+0xaf4>)
 800e5c6:	4a4e      	ldr	r2, [pc, #312]	@ (800e700 <_strtod_l+0xb08>)
 800e5c8:	4019      	ands	r1, r3
 800e5ca:	4291      	cmp	r1, r2
 800e5cc:	4682      	mov	sl, r0
 800e5ce:	d942      	bls.n	800e656 <_strtod_l+0xa5e>
 800e5d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e5d2:	4b47      	ldr	r3, [pc, #284]	@ (800e6f0 <_strtod_l+0xaf8>)
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d103      	bne.n	800e5e0 <_strtod_l+0x9e8>
 800e5d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e5da:	3301      	adds	r3, #1
 800e5dc:	f43f ad2f 	beq.w	800e03e <_strtod_l+0x446>
 800e5e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e6f0 <_strtod_l+0xaf8>
 800e5e4:	f04f 3aff 	mov.w	sl, #4294967295
 800e5e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e5ea:	9805      	ldr	r0, [sp, #20]
 800e5ec:	f7fe fe7c 	bl	800d2e8 <_Bfree>
 800e5f0:	9805      	ldr	r0, [sp, #20]
 800e5f2:	4649      	mov	r1, r9
 800e5f4:	f7fe fe78 	bl	800d2e8 <_Bfree>
 800e5f8:	9805      	ldr	r0, [sp, #20]
 800e5fa:	4641      	mov	r1, r8
 800e5fc:	f7fe fe74 	bl	800d2e8 <_Bfree>
 800e600:	9805      	ldr	r0, [sp, #20]
 800e602:	4621      	mov	r1, r4
 800e604:	f7fe fe70 	bl	800d2e8 <_Bfree>
 800e608:	e619      	b.n	800e23e <_strtod_l+0x646>
 800e60a:	f1ba 0f01 	cmp.w	sl, #1
 800e60e:	d103      	bne.n	800e618 <_strtod_l+0xa20>
 800e610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e612:	2b00      	cmp	r3, #0
 800e614:	f43f ada6 	beq.w	800e164 <_strtod_l+0x56c>
 800e618:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e6c8 <_strtod_l+0xad0>
 800e61c:	4f35      	ldr	r7, [pc, #212]	@ (800e6f4 <_strtod_l+0xafc>)
 800e61e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e622:	2600      	movs	r6, #0
 800e624:	e7b1      	b.n	800e58a <_strtod_l+0x992>
 800e626:	4f34      	ldr	r7, [pc, #208]	@ (800e6f8 <_strtod_l+0xb00>)
 800e628:	2600      	movs	r6, #0
 800e62a:	e7aa      	b.n	800e582 <_strtod_l+0x98a>
 800e62c:	4b32      	ldr	r3, [pc, #200]	@ (800e6f8 <_strtod_l+0xb00>)
 800e62e:	4630      	mov	r0, r6
 800e630:	4639      	mov	r1, r7
 800e632:	2200      	movs	r2, #0
 800e634:	f7f1 ffe8 	bl	8000608 <__aeabi_dmul>
 800e638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e63a:	4606      	mov	r6, r0
 800e63c:	460f      	mov	r7, r1
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d09f      	beq.n	800e582 <_strtod_l+0x98a>
 800e642:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e646:	e7a0      	b.n	800e58a <_strtod_l+0x992>
 800e648:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e6d0 <_strtod_l+0xad8>
 800e64c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e650:	ec57 6b17 	vmov	r6, r7, d7
 800e654:	e799      	b.n	800e58a <_strtod_l+0x992>
 800e656:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e65a:	9b08      	ldr	r3, [sp, #32]
 800e65c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1c1      	bne.n	800e5e8 <_strtod_l+0x9f0>
 800e664:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e668:	0d1b      	lsrs	r3, r3, #20
 800e66a:	051b      	lsls	r3, r3, #20
 800e66c:	429d      	cmp	r5, r3
 800e66e:	d1bb      	bne.n	800e5e8 <_strtod_l+0x9f0>
 800e670:	4630      	mov	r0, r6
 800e672:	4639      	mov	r1, r7
 800e674:	f7f2 fc36 	bl	8000ee4 <__aeabi_d2lz>
 800e678:	f7f1 ff98 	bl	80005ac <__aeabi_l2d>
 800e67c:	4602      	mov	r2, r0
 800e67e:	460b      	mov	r3, r1
 800e680:	4630      	mov	r0, r6
 800e682:	4639      	mov	r1, r7
 800e684:	f7f1 fe08 	bl	8000298 <__aeabi_dsub>
 800e688:	460b      	mov	r3, r1
 800e68a:	4602      	mov	r2, r0
 800e68c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e690:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e696:	ea46 060a 	orr.w	r6, r6, sl
 800e69a:	431e      	orrs	r6, r3
 800e69c:	d06f      	beq.n	800e77e <_strtod_l+0xb86>
 800e69e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e6d8 <_strtod_l+0xae0>)
 800e6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a4:	f7f2 fa22 	bl	8000aec <__aeabi_dcmplt>
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	f47f acd3 	bne.w	800e054 <_strtod_l+0x45c>
 800e6ae:	a30c      	add	r3, pc, #48	@ (adr r3, 800e6e0 <_strtod_l+0xae8>)
 800e6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6b8:	f7f2 fa36 	bl	8000b28 <__aeabi_dcmpgt>
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	d093      	beq.n	800e5e8 <_strtod_l+0x9f0>
 800e6c0:	e4c8      	b.n	800e054 <_strtod_l+0x45c>
 800e6c2:	bf00      	nop
 800e6c4:	f3af 8000 	nop.w
 800e6c8:	00000000 	.word	0x00000000
 800e6cc:	bff00000 	.word	0xbff00000
 800e6d0:	00000000 	.word	0x00000000
 800e6d4:	3ff00000 	.word	0x3ff00000
 800e6d8:	94a03595 	.word	0x94a03595
 800e6dc:	3fdfffff 	.word	0x3fdfffff
 800e6e0:	35afe535 	.word	0x35afe535
 800e6e4:	3fe00000 	.word	0x3fe00000
 800e6e8:	000fffff 	.word	0x000fffff
 800e6ec:	7ff00000 	.word	0x7ff00000
 800e6f0:	7fefffff 	.word	0x7fefffff
 800e6f4:	3ff00000 	.word	0x3ff00000
 800e6f8:	3fe00000 	.word	0x3fe00000
 800e6fc:	7fe00000 	.word	0x7fe00000
 800e700:	7c9fffff 	.word	0x7c9fffff
 800e704:	9b08      	ldr	r3, [sp, #32]
 800e706:	b323      	cbz	r3, 800e752 <_strtod_l+0xb5a>
 800e708:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e70c:	d821      	bhi.n	800e752 <_strtod_l+0xb5a>
 800e70e:	a328      	add	r3, pc, #160	@ (adr r3, 800e7b0 <_strtod_l+0xbb8>)
 800e710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e714:	4630      	mov	r0, r6
 800e716:	4639      	mov	r1, r7
 800e718:	f7f2 f9f2 	bl	8000b00 <__aeabi_dcmple>
 800e71c:	b1a0      	cbz	r0, 800e748 <_strtod_l+0xb50>
 800e71e:	4639      	mov	r1, r7
 800e720:	4630      	mov	r0, r6
 800e722:	f7f2 fa49 	bl	8000bb8 <__aeabi_d2uiz>
 800e726:	2801      	cmp	r0, #1
 800e728:	bf38      	it	cc
 800e72a:	2001      	movcc	r0, #1
 800e72c:	f7f1 fef2 	bl	8000514 <__aeabi_ui2d>
 800e730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e732:	4606      	mov	r6, r0
 800e734:	460f      	mov	r7, r1
 800e736:	b9fb      	cbnz	r3, 800e778 <_strtod_l+0xb80>
 800e738:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e73c:	9014      	str	r0, [sp, #80]	@ 0x50
 800e73e:	9315      	str	r3, [sp, #84]	@ 0x54
 800e740:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e744:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e748:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e74a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e74e:	1b5b      	subs	r3, r3, r5
 800e750:	9311      	str	r3, [sp, #68]	@ 0x44
 800e752:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e756:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e75a:	f7ff f8f1 	bl	800d940 <__ulp>
 800e75e:	4650      	mov	r0, sl
 800e760:	ec53 2b10 	vmov	r2, r3, d0
 800e764:	4659      	mov	r1, fp
 800e766:	f7f1 ff4f 	bl	8000608 <__aeabi_dmul>
 800e76a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e76e:	f7f1 fd95 	bl	800029c <__adddf3>
 800e772:	4682      	mov	sl, r0
 800e774:	468b      	mov	fp, r1
 800e776:	e770      	b.n	800e65a <_strtod_l+0xa62>
 800e778:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e77c:	e7e0      	b.n	800e740 <_strtod_l+0xb48>
 800e77e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e7b8 <_strtod_l+0xbc0>)
 800e780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e784:	f7f2 f9b2 	bl	8000aec <__aeabi_dcmplt>
 800e788:	e798      	b.n	800e6bc <_strtod_l+0xac4>
 800e78a:	2300      	movs	r3, #0
 800e78c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e78e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e790:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e792:	6013      	str	r3, [r2, #0]
 800e794:	f7ff ba6d 	b.w	800dc72 <_strtod_l+0x7a>
 800e798:	2a65      	cmp	r2, #101	@ 0x65
 800e79a:	f43f ab68 	beq.w	800de6e <_strtod_l+0x276>
 800e79e:	2a45      	cmp	r2, #69	@ 0x45
 800e7a0:	f43f ab65 	beq.w	800de6e <_strtod_l+0x276>
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	f7ff bba0 	b.w	800deea <_strtod_l+0x2f2>
 800e7aa:	bf00      	nop
 800e7ac:	f3af 8000 	nop.w
 800e7b0:	ffc00000 	.word	0xffc00000
 800e7b4:	41dfffff 	.word	0x41dfffff
 800e7b8:	94a03595 	.word	0x94a03595
 800e7bc:	3fcfffff 	.word	0x3fcfffff

0800e7c0 <_strtod_r>:
 800e7c0:	4b01      	ldr	r3, [pc, #4]	@ (800e7c8 <_strtod_r+0x8>)
 800e7c2:	f7ff ba19 	b.w	800dbf8 <_strtod_l>
 800e7c6:	bf00      	nop
 800e7c8:	20000088 	.word	0x20000088

0800e7cc <_strtol_l.isra.0>:
 800e7cc:	2b24      	cmp	r3, #36	@ 0x24
 800e7ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7d2:	4686      	mov	lr, r0
 800e7d4:	4690      	mov	r8, r2
 800e7d6:	d801      	bhi.n	800e7dc <_strtol_l.isra.0+0x10>
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	d106      	bne.n	800e7ea <_strtol_l.isra.0+0x1e>
 800e7dc:	f7fd fdb6 	bl	800c34c <__errno>
 800e7e0:	2316      	movs	r3, #22
 800e7e2:	6003      	str	r3, [r0, #0]
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ea:	4834      	ldr	r0, [pc, #208]	@ (800e8bc <_strtol_l.isra.0+0xf0>)
 800e7ec:	460d      	mov	r5, r1
 800e7ee:	462a      	mov	r2, r5
 800e7f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e7f4:	5d06      	ldrb	r6, [r0, r4]
 800e7f6:	f016 0608 	ands.w	r6, r6, #8
 800e7fa:	d1f8      	bne.n	800e7ee <_strtol_l.isra.0+0x22>
 800e7fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800e7fe:	d110      	bne.n	800e822 <_strtol_l.isra.0+0x56>
 800e800:	782c      	ldrb	r4, [r5, #0]
 800e802:	2601      	movs	r6, #1
 800e804:	1c95      	adds	r5, r2, #2
 800e806:	f033 0210 	bics.w	r2, r3, #16
 800e80a:	d115      	bne.n	800e838 <_strtol_l.isra.0+0x6c>
 800e80c:	2c30      	cmp	r4, #48	@ 0x30
 800e80e:	d10d      	bne.n	800e82c <_strtol_l.isra.0+0x60>
 800e810:	782a      	ldrb	r2, [r5, #0]
 800e812:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e816:	2a58      	cmp	r2, #88	@ 0x58
 800e818:	d108      	bne.n	800e82c <_strtol_l.isra.0+0x60>
 800e81a:	786c      	ldrb	r4, [r5, #1]
 800e81c:	3502      	adds	r5, #2
 800e81e:	2310      	movs	r3, #16
 800e820:	e00a      	b.n	800e838 <_strtol_l.isra.0+0x6c>
 800e822:	2c2b      	cmp	r4, #43	@ 0x2b
 800e824:	bf04      	itt	eq
 800e826:	782c      	ldrbeq	r4, [r5, #0]
 800e828:	1c95      	addeq	r5, r2, #2
 800e82a:	e7ec      	b.n	800e806 <_strtol_l.isra.0+0x3a>
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d1f6      	bne.n	800e81e <_strtol_l.isra.0+0x52>
 800e830:	2c30      	cmp	r4, #48	@ 0x30
 800e832:	bf14      	ite	ne
 800e834:	230a      	movne	r3, #10
 800e836:	2308      	moveq	r3, #8
 800e838:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e83c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e840:	2200      	movs	r2, #0
 800e842:	fbbc f9f3 	udiv	r9, ip, r3
 800e846:	4610      	mov	r0, r2
 800e848:	fb03 ca19 	mls	sl, r3, r9, ip
 800e84c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e850:	2f09      	cmp	r7, #9
 800e852:	d80f      	bhi.n	800e874 <_strtol_l.isra.0+0xa8>
 800e854:	463c      	mov	r4, r7
 800e856:	42a3      	cmp	r3, r4
 800e858:	dd1b      	ble.n	800e892 <_strtol_l.isra.0+0xc6>
 800e85a:	1c57      	adds	r7, r2, #1
 800e85c:	d007      	beq.n	800e86e <_strtol_l.isra.0+0xa2>
 800e85e:	4581      	cmp	r9, r0
 800e860:	d314      	bcc.n	800e88c <_strtol_l.isra.0+0xc0>
 800e862:	d101      	bne.n	800e868 <_strtol_l.isra.0+0x9c>
 800e864:	45a2      	cmp	sl, r4
 800e866:	db11      	blt.n	800e88c <_strtol_l.isra.0+0xc0>
 800e868:	fb00 4003 	mla	r0, r0, r3, r4
 800e86c:	2201      	movs	r2, #1
 800e86e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e872:	e7eb      	b.n	800e84c <_strtol_l.isra.0+0x80>
 800e874:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e878:	2f19      	cmp	r7, #25
 800e87a:	d801      	bhi.n	800e880 <_strtol_l.isra.0+0xb4>
 800e87c:	3c37      	subs	r4, #55	@ 0x37
 800e87e:	e7ea      	b.n	800e856 <_strtol_l.isra.0+0x8a>
 800e880:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e884:	2f19      	cmp	r7, #25
 800e886:	d804      	bhi.n	800e892 <_strtol_l.isra.0+0xc6>
 800e888:	3c57      	subs	r4, #87	@ 0x57
 800e88a:	e7e4      	b.n	800e856 <_strtol_l.isra.0+0x8a>
 800e88c:	f04f 32ff 	mov.w	r2, #4294967295
 800e890:	e7ed      	b.n	800e86e <_strtol_l.isra.0+0xa2>
 800e892:	1c53      	adds	r3, r2, #1
 800e894:	d108      	bne.n	800e8a8 <_strtol_l.isra.0+0xdc>
 800e896:	2322      	movs	r3, #34	@ 0x22
 800e898:	f8ce 3000 	str.w	r3, [lr]
 800e89c:	4660      	mov	r0, ip
 800e89e:	f1b8 0f00 	cmp.w	r8, #0
 800e8a2:	d0a0      	beq.n	800e7e6 <_strtol_l.isra.0+0x1a>
 800e8a4:	1e69      	subs	r1, r5, #1
 800e8a6:	e006      	b.n	800e8b6 <_strtol_l.isra.0+0xea>
 800e8a8:	b106      	cbz	r6, 800e8ac <_strtol_l.isra.0+0xe0>
 800e8aa:	4240      	negs	r0, r0
 800e8ac:	f1b8 0f00 	cmp.w	r8, #0
 800e8b0:	d099      	beq.n	800e7e6 <_strtol_l.isra.0+0x1a>
 800e8b2:	2a00      	cmp	r2, #0
 800e8b4:	d1f6      	bne.n	800e8a4 <_strtol_l.isra.0+0xd8>
 800e8b6:	f8c8 1000 	str.w	r1, [r8]
 800e8ba:	e794      	b.n	800e7e6 <_strtol_l.isra.0+0x1a>
 800e8bc:	08012901 	.word	0x08012901

0800e8c0 <_strtol_r>:
 800e8c0:	f7ff bf84 	b.w	800e7cc <_strtol_l.isra.0>

0800e8c4 <__ssputs_r>:
 800e8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8c8:	688e      	ldr	r6, [r1, #8]
 800e8ca:	461f      	mov	r7, r3
 800e8cc:	42be      	cmp	r6, r7
 800e8ce:	680b      	ldr	r3, [r1, #0]
 800e8d0:	4682      	mov	sl, r0
 800e8d2:	460c      	mov	r4, r1
 800e8d4:	4690      	mov	r8, r2
 800e8d6:	d82d      	bhi.n	800e934 <__ssputs_r+0x70>
 800e8d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e8dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e8e0:	d026      	beq.n	800e930 <__ssputs_r+0x6c>
 800e8e2:	6965      	ldr	r5, [r4, #20]
 800e8e4:	6909      	ldr	r1, [r1, #16]
 800e8e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8ea:	eba3 0901 	sub.w	r9, r3, r1
 800e8ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8f2:	1c7b      	adds	r3, r7, #1
 800e8f4:	444b      	add	r3, r9
 800e8f6:	106d      	asrs	r5, r5, #1
 800e8f8:	429d      	cmp	r5, r3
 800e8fa:	bf38      	it	cc
 800e8fc:	461d      	movcc	r5, r3
 800e8fe:	0553      	lsls	r3, r2, #21
 800e900:	d527      	bpl.n	800e952 <__ssputs_r+0x8e>
 800e902:	4629      	mov	r1, r5
 800e904:	f7fe fc24 	bl	800d150 <_malloc_r>
 800e908:	4606      	mov	r6, r0
 800e90a:	b360      	cbz	r0, 800e966 <__ssputs_r+0xa2>
 800e90c:	6921      	ldr	r1, [r4, #16]
 800e90e:	464a      	mov	r2, r9
 800e910:	f000 fbee 	bl	800f0f0 <memcpy>
 800e914:	89a3      	ldrh	r3, [r4, #12]
 800e916:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e91a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e91e:	81a3      	strh	r3, [r4, #12]
 800e920:	6126      	str	r6, [r4, #16]
 800e922:	6165      	str	r5, [r4, #20]
 800e924:	444e      	add	r6, r9
 800e926:	eba5 0509 	sub.w	r5, r5, r9
 800e92a:	6026      	str	r6, [r4, #0]
 800e92c:	60a5      	str	r5, [r4, #8]
 800e92e:	463e      	mov	r6, r7
 800e930:	42be      	cmp	r6, r7
 800e932:	d900      	bls.n	800e936 <__ssputs_r+0x72>
 800e934:	463e      	mov	r6, r7
 800e936:	6820      	ldr	r0, [r4, #0]
 800e938:	4632      	mov	r2, r6
 800e93a:	4641      	mov	r1, r8
 800e93c:	f000 fb9c 	bl	800f078 <memmove>
 800e940:	68a3      	ldr	r3, [r4, #8]
 800e942:	1b9b      	subs	r3, r3, r6
 800e944:	60a3      	str	r3, [r4, #8]
 800e946:	6823      	ldr	r3, [r4, #0]
 800e948:	4433      	add	r3, r6
 800e94a:	6023      	str	r3, [r4, #0]
 800e94c:	2000      	movs	r0, #0
 800e94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e952:	462a      	mov	r2, r5
 800e954:	f000 ff61 	bl	800f81a <_realloc_r>
 800e958:	4606      	mov	r6, r0
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d1e0      	bne.n	800e920 <__ssputs_r+0x5c>
 800e95e:	6921      	ldr	r1, [r4, #16]
 800e960:	4650      	mov	r0, sl
 800e962:	f7fe fb81 	bl	800d068 <_free_r>
 800e966:	230c      	movs	r3, #12
 800e968:	f8ca 3000 	str.w	r3, [sl]
 800e96c:	89a3      	ldrh	r3, [r4, #12]
 800e96e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e972:	81a3      	strh	r3, [r4, #12]
 800e974:	f04f 30ff 	mov.w	r0, #4294967295
 800e978:	e7e9      	b.n	800e94e <__ssputs_r+0x8a>
	...

0800e97c <_svfiprintf_r>:
 800e97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e980:	4698      	mov	r8, r3
 800e982:	898b      	ldrh	r3, [r1, #12]
 800e984:	061b      	lsls	r3, r3, #24
 800e986:	b09d      	sub	sp, #116	@ 0x74
 800e988:	4607      	mov	r7, r0
 800e98a:	460d      	mov	r5, r1
 800e98c:	4614      	mov	r4, r2
 800e98e:	d510      	bpl.n	800e9b2 <_svfiprintf_r+0x36>
 800e990:	690b      	ldr	r3, [r1, #16]
 800e992:	b973      	cbnz	r3, 800e9b2 <_svfiprintf_r+0x36>
 800e994:	2140      	movs	r1, #64	@ 0x40
 800e996:	f7fe fbdb 	bl	800d150 <_malloc_r>
 800e99a:	6028      	str	r0, [r5, #0]
 800e99c:	6128      	str	r0, [r5, #16]
 800e99e:	b930      	cbnz	r0, 800e9ae <_svfiprintf_r+0x32>
 800e9a0:	230c      	movs	r3, #12
 800e9a2:	603b      	str	r3, [r7, #0]
 800e9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a8:	b01d      	add	sp, #116	@ 0x74
 800e9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ae:	2340      	movs	r3, #64	@ 0x40
 800e9b0:	616b      	str	r3, [r5, #20]
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9b6:	2320      	movs	r3, #32
 800e9b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e9bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9c0:	2330      	movs	r3, #48	@ 0x30
 800e9c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eb60 <_svfiprintf_r+0x1e4>
 800e9c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e9ca:	f04f 0901 	mov.w	r9, #1
 800e9ce:	4623      	mov	r3, r4
 800e9d0:	469a      	mov	sl, r3
 800e9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9d6:	b10a      	cbz	r2, 800e9dc <_svfiprintf_r+0x60>
 800e9d8:	2a25      	cmp	r2, #37	@ 0x25
 800e9da:	d1f9      	bne.n	800e9d0 <_svfiprintf_r+0x54>
 800e9dc:	ebba 0b04 	subs.w	fp, sl, r4
 800e9e0:	d00b      	beq.n	800e9fa <_svfiprintf_r+0x7e>
 800e9e2:	465b      	mov	r3, fp
 800e9e4:	4622      	mov	r2, r4
 800e9e6:	4629      	mov	r1, r5
 800e9e8:	4638      	mov	r0, r7
 800e9ea:	f7ff ff6b 	bl	800e8c4 <__ssputs_r>
 800e9ee:	3001      	adds	r0, #1
 800e9f0:	f000 80a7 	beq.w	800eb42 <_svfiprintf_r+0x1c6>
 800e9f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9f6:	445a      	add	r2, fp
 800e9f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	f000 809f 	beq.w	800eb42 <_svfiprintf_r+0x1c6>
 800ea04:	2300      	movs	r3, #0
 800ea06:	f04f 32ff 	mov.w	r2, #4294967295
 800ea0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea0e:	f10a 0a01 	add.w	sl, sl, #1
 800ea12:	9304      	str	r3, [sp, #16]
 800ea14:	9307      	str	r3, [sp, #28]
 800ea16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea1c:	4654      	mov	r4, sl
 800ea1e:	2205      	movs	r2, #5
 800ea20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea24:	484e      	ldr	r0, [pc, #312]	@ (800eb60 <_svfiprintf_r+0x1e4>)
 800ea26:	f7f1 fbdb 	bl	80001e0 <memchr>
 800ea2a:	9a04      	ldr	r2, [sp, #16]
 800ea2c:	b9d8      	cbnz	r0, 800ea66 <_svfiprintf_r+0xea>
 800ea2e:	06d0      	lsls	r0, r2, #27
 800ea30:	bf44      	itt	mi
 800ea32:	2320      	movmi	r3, #32
 800ea34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea38:	0711      	lsls	r1, r2, #28
 800ea3a:	bf44      	itt	mi
 800ea3c:	232b      	movmi	r3, #43	@ 0x2b
 800ea3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea42:	f89a 3000 	ldrb.w	r3, [sl]
 800ea46:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea48:	d015      	beq.n	800ea76 <_svfiprintf_r+0xfa>
 800ea4a:	9a07      	ldr	r2, [sp, #28]
 800ea4c:	4654      	mov	r4, sl
 800ea4e:	2000      	movs	r0, #0
 800ea50:	f04f 0c0a 	mov.w	ip, #10
 800ea54:	4621      	mov	r1, r4
 800ea56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea5a:	3b30      	subs	r3, #48	@ 0x30
 800ea5c:	2b09      	cmp	r3, #9
 800ea5e:	d94b      	bls.n	800eaf8 <_svfiprintf_r+0x17c>
 800ea60:	b1b0      	cbz	r0, 800ea90 <_svfiprintf_r+0x114>
 800ea62:	9207      	str	r2, [sp, #28]
 800ea64:	e014      	b.n	800ea90 <_svfiprintf_r+0x114>
 800ea66:	eba0 0308 	sub.w	r3, r0, r8
 800ea6a:	fa09 f303 	lsl.w	r3, r9, r3
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	9304      	str	r3, [sp, #16]
 800ea72:	46a2      	mov	sl, r4
 800ea74:	e7d2      	b.n	800ea1c <_svfiprintf_r+0xa0>
 800ea76:	9b03      	ldr	r3, [sp, #12]
 800ea78:	1d19      	adds	r1, r3, #4
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	9103      	str	r1, [sp, #12]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	bfbb      	ittet	lt
 800ea82:	425b      	neglt	r3, r3
 800ea84:	f042 0202 	orrlt.w	r2, r2, #2
 800ea88:	9307      	strge	r3, [sp, #28]
 800ea8a:	9307      	strlt	r3, [sp, #28]
 800ea8c:	bfb8      	it	lt
 800ea8e:	9204      	strlt	r2, [sp, #16]
 800ea90:	7823      	ldrb	r3, [r4, #0]
 800ea92:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea94:	d10a      	bne.n	800eaac <_svfiprintf_r+0x130>
 800ea96:	7863      	ldrb	r3, [r4, #1]
 800ea98:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea9a:	d132      	bne.n	800eb02 <_svfiprintf_r+0x186>
 800ea9c:	9b03      	ldr	r3, [sp, #12]
 800ea9e:	1d1a      	adds	r2, r3, #4
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	9203      	str	r2, [sp, #12]
 800eaa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eaa8:	3402      	adds	r4, #2
 800eaaa:	9305      	str	r3, [sp, #20]
 800eaac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eb70 <_svfiprintf_r+0x1f4>
 800eab0:	7821      	ldrb	r1, [r4, #0]
 800eab2:	2203      	movs	r2, #3
 800eab4:	4650      	mov	r0, sl
 800eab6:	f7f1 fb93 	bl	80001e0 <memchr>
 800eaba:	b138      	cbz	r0, 800eacc <_svfiprintf_r+0x150>
 800eabc:	9b04      	ldr	r3, [sp, #16]
 800eabe:	eba0 000a 	sub.w	r0, r0, sl
 800eac2:	2240      	movs	r2, #64	@ 0x40
 800eac4:	4082      	lsls	r2, r0
 800eac6:	4313      	orrs	r3, r2
 800eac8:	3401      	adds	r4, #1
 800eaca:	9304      	str	r3, [sp, #16]
 800eacc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ead0:	4824      	ldr	r0, [pc, #144]	@ (800eb64 <_svfiprintf_r+0x1e8>)
 800ead2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ead6:	2206      	movs	r2, #6
 800ead8:	f7f1 fb82 	bl	80001e0 <memchr>
 800eadc:	2800      	cmp	r0, #0
 800eade:	d036      	beq.n	800eb4e <_svfiprintf_r+0x1d2>
 800eae0:	4b21      	ldr	r3, [pc, #132]	@ (800eb68 <_svfiprintf_r+0x1ec>)
 800eae2:	bb1b      	cbnz	r3, 800eb2c <_svfiprintf_r+0x1b0>
 800eae4:	9b03      	ldr	r3, [sp, #12]
 800eae6:	3307      	adds	r3, #7
 800eae8:	f023 0307 	bic.w	r3, r3, #7
 800eaec:	3308      	adds	r3, #8
 800eaee:	9303      	str	r3, [sp, #12]
 800eaf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaf2:	4433      	add	r3, r6
 800eaf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eaf6:	e76a      	b.n	800e9ce <_svfiprintf_r+0x52>
 800eaf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800eafc:	460c      	mov	r4, r1
 800eafe:	2001      	movs	r0, #1
 800eb00:	e7a8      	b.n	800ea54 <_svfiprintf_r+0xd8>
 800eb02:	2300      	movs	r3, #0
 800eb04:	3401      	adds	r4, #1
 800eb06:	9305      	str	r3, [sp, #20]
 800eb08:	4619      	mov	r1, r3
 800eb0a:	f04f 0c0a 	mov.w	ip, #10
 800eb0e:	4620      	mov	r0, r4
 800eb10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb14:	3a30      	subs	r2, #48	@ 0x30
 800eb16:	2a09      	cmp	r2, #9
 800eb18:	d903      	bls.n	800eb22 <_svfiprintf_r+0x1a6>
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d0c6      	beq.n	800eaac <_svfiprintf_r+0x130>
 800eb1e:	9105      	str	r1, [sp, #20]
 800eb20:	e7c4      	b.n	800eaac <_svfiprintf_r+0x130>
 800eb22:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb26:	4604      	mov	r4, r0
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e7f0      	b.n	800eb0e <_svfiprintf_r+0x192>
 800eb2c:	ab03      	add	r3, sp, #12
 800eb2e:	9300      	str	r3, [sp, #0]
 800eb30:	462a      	mov	r2, r5
 800eb32:	4b0e      	ldr	r3, [pc, #56]	@ (800eb6c <_svfiprintf_r+0x1f0>)
 800eb34:	a904      	add	r1, sp, #16
 800eb36:	4638      	mov	r0, r7
 800eb38:	f7fc fcb8 	bl	800b4ac <_printf_float>
 800eb3c:	1c42      	adds	r2, r0, #1
 800eb3e:	4606      	mov	r6, r0
 800eb40:	d1d6      	bne.n	800eaf0 <_svfiprintf_r+0x174>
 800eb42:	89ab      	ldrh	r3, [r5, #12]
 800eb44:	065b      	lsls	r3, r3, #25
 800eb46:	f53f af2d 	bmi.w	800e9a4 <_svfiprintf_r+0x28>
 800eb4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb4c:	e72c      	b.n	800e9a8 <_svfiprintf_r+0x2c>
 800eb4e:	ab03      	add	r3, sp, #12
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	462a      	mov	r2, r5
 800eb54:	4b05      	ldr	r3, [pc, #20]	@ (800eb6c <_svfiprintf_r+0x1f0>)
 800eb56:	a904      	add	r1, sp, #16
 800eb58:	4638      	mov	r0, r7
 800eb5a:	f7fc ff3f 	bl	800b9dc <_printf_i>
 800eb5e:	e7ed      	b.n	800eb3c <_svfiprintf_r+0x1c0>
 800eb60:	080126fd 	.word	0x080126fd
 800eb64:	08012707 	.word	0x08012707
 800eb68:	0800b4ad 	.word	0x0800b4ad
 800eb6c:	0800e8c5 	.word	0x0800e8c5
 800eb70:	08012703 	.word	0x08012703

0800eb74 <__sfputc_r>:
 800eb74:	6893      	ldr	r3, [r2, #8]
 800eb76:	3b01      	subs	r3, #1
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	b410      	push	{r4}
 800eb7c:	6093      	str	r3, [r2, #8]
 800eb7e:	da08      	bge.n	800eb92 <__sfputc_r+0x1e>
 800eb80:	6994      	ldr	r4, [r2, #24]
 800eb82:	42a3      	cmp	r3, r4
 800eb84:	db01      	blt.n	800eb8a <__sfputc_r+0x16>
 800eb86:	290a      	cmp	r1, #10
 800eb88:	d103      	bne.n	800eb92 <__sfputc_r+0x1e>
 800eb8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb8e:	f000 b9df 	b.w	800ef50 <__swbuf_r>
 800eb92:	6813      	ldr	r3, [r2, #0]
 800eb94:	1c58      	adds	r0, r3, #1
 800eb96:	6010      	str	r0, [r2, #0]
 800eb98:	7019      	strb	r1, [r3, #0]
 800eb9a:	4608      	mov	r0, r1
 800eb9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eba0:	4770      	bx	lr

0800eba2 <__sfputs_r>:
 800eba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba4:	4606      	mov	r6, r0
 800eba6:	460f      	mov	r7, r1
 800eba8:	4614      	mov	r4, r2
 800ebaa:	18d5      	adds	r5, r2, r3
 800ebac:	42ac      	cmp	r4, r5
 800ebae:	d101      	bne.n	800ebb4 <__sfputs_r+0x12>
 800ebb0:	2000      	movs	r0, #0
 800ebb2:	e007      	b.n	800ebc4 <__sfputs_r+0x22>
 800ebb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebb8:	463a      	mov	r2, r7
 800ebba:	4630      	mov	r0, r6
 800ebbc:	f7ff ffda 	bl	800eb74 <__sfputc_r>
 800ebc0:	1c43      	adds	r3, r0, #1
 800ebc2:	d1f3      	bne.n	800ebac <__sfputs_r+0xa>
 800ebc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ebc8 <_vfiprintf_r>:
 800ebc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebcc:	460d      	mov	r5, r1
 800ebce:	b09d      	sub	sp, #116	@ 0x74
 800ebd0:	4614      	mov	r4, r2
 800ebd2:	4698      	mov	r8, r3
 800ebd4:	4606      	mov	r6, r0
 800ebd6:	b118      	cbz	r0, 800ebe0 <_vfiprintf_r+0x18>
 800ebd8:	6a03      	ldr	r3, [r0, #32]
 800ebda:	b90b      	cbnz	r3, 800ebe0 <_vfiprintf_r+0x18>
 800ebdc:	f7fd fab6 	bl	800c14c <__sinit>
 800ebe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ebe2:	07d9      	lsls	r1, r3, #31
 800ebe4:	d405      	bmi.n	800ebf2 <_vfiprintf_r+0x2a>
 800ebe6:	89ab      	ldrh	r3, [r5, #12]
 800ebe8:	059a      	lsls	r2, r3, #22
 800ebea:	d402      	bmi.n	800ebf2 <_vfiprintf_r+0x2a>
 800ebec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebee:	f7fd fbd8 	bl	800c3a2 <__retarget_lock_acquire_recursive>
 800ebf2:	89ab      	ldrh	r3, [r5, #12]
 800ebf4:	071b      	lsls	r3, r3, #28
 800ebf6:	d501      	bpl.n	800ebfc <_vfiprintf_r+0x34>
 800ebf8:	692b      	ldr	r3, [r5, #16]
 800ebfa:	b99b      	cbnz	r3, 800ec24 <_vfiprintf_r+0x5c>
 800ebfc:	4629      	mov	r1, r5
 800ebfe:	4630      	mov	r0, r6
 800ec00:	f000 f9e4 	bl	800efcc <__swsetup_r>
 800ec04:	b170      	cbz	r0, 800ec24 <_vfiprintf_r+0x5c>
 800ec06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec08:	07dc      	lsls	r4, r3, #31
 800ec0a:	d504      	bpl.n	800ec16 <_vfiprintf_r+0x4e>
 800ec0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec10:	b01d      	add	sp, #116	@ 0x74
 800ec12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec16:	89ab      	ldrh	r3, [r5, #12]
 800ec18:	0598      	lsls	r0, r3, #22
 800ec1a:	d4f7      	bmi.n	800ec0c <_vfiprintf_r+0x44>
 800ec1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec1e:	f7fd fbc1 	bl	800c3a4 <__retarget_lock_release_recursive>
 800ec22:	e7f3      	b.n	800ec0c <_vfiprintf_r+0x44>
 800ec24:	2300      	movs	r3, #0
 800ec26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec28:	2320      	movs	r3, #32
 800ec2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec32:	2330      	movs	r3, #48	@ 0x30
 800ec34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ede4 <_vfiprintf_r+0x21c>
 800ec38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec3c:	f04f 0901 	mov.w	r9, #1
 800ec40:	4623      	mov	r3, r4
 800ec42:	469a      	mov	sl, r3
 800ec44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec48:	b10a      	cbz	r2, 800ec4e <_vfiprintf_r+0x86>
 800ec4a:	2a25      	cmp	r2, #37	@ 0x25
 800ec4c:	d1f9      	bne.n	800ec42 <_vfiprintf_r+0x7a>
 800ec4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ec52:	d00b      	beq.n	800ec6c <_vfiprintf_r+0xa4>
 800ec54:	465b      	mov	r3, fp
 800ec56:	4622      	mov	r2, r4
 800ec58:	4629      	mov	r1, r5
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	f7ff ffa1 	bl	800eba2 <__sfputs_r>
 800ec60:	3001      	adds	r0, #1
 800ec62:	f000 80a7 	beq.w	800edb4 <_vfiprintf_r+0x1ec>
 800ec66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec68:	445a      	add	r2, fp
 800ec6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	f000 809f 	beq.w	800edb4 <_vfiprintf_r+0x1ec>
 800ec76:	2300      	movs	r3, #0
 800ec78:	f04f 32ff 	mov.w	r2, #4294967295
 800ec7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec80:	f10a 0a01 	add.w	sl, sl, #1
 800ec84:	9304      	str	r3, [sp, #16]
 800ec86:	9307      	str	r3, [sp, #28]
 800ec88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec8e:	4654      	mov	r4, sl
 800ec90:	2205      	movs	r2, #5
 800ec92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec96:	4853      	ldr	r0, [pc, #332]	@ (800ede4 <_vfiprintf_r+0x21c>)
 800ec98:	f7f1 faa2 	bl	80001e0 <memchr>
 800ec9c:	9a04      	ldr	r2, [sp, #16]
 800ec9e:	b9d8      	cbnz	r0, 800ecd8 <_vfiprintf_r+0x110>
 800eca0:	06d1      	lsls	r1, r2, #27
 800eca2:	bf44      	itt	mi
 800eca4:	2320      	movmi	r3, #32
 800eca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecaa:	0713      	lsls	r3, r2, #28
 800ecac:	bf44      	itt	mi
 800ecae:	232b      	movmi	r3, #43	@ 0x2b
 800ecb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecb4:	f89a 3000 	ldrb.w	r3, [sl]
 800ecb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecba:	d015      	beq.n	800ece8 <_vfiprintf_r+0x120>
 800ecbc:	9a07      	ldr	r2, [sp, #28]
 800ecbe:	4654      	mov	r4, sl
 800ecc0:	2000      	movs	r0, #0
 800ecc2:	f04f 0c0a 	mov.w	ip, #10
 800ecc6:	4621      	mov	r1, r4
 800ecc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eccc:	3b30      	subs	r3, #48	@ 0x30
 800ecce:	2b09      	cmp	r3, #9
 800ecd0:	d94b      	bls.n	800ed6a <_vfiprintf_r+0x1a2>
 800ecd2:	b1b0      	cbz	r0, 800ed02 <_vfiprintf_r+0x13a>
 800ecd4:	9207      	str	r2, [sp, #28]
 800ecd6:	e014      	b.n	800ed02 <_vfiprintf_r+0x13a>
 800ecd8:	eba0 0308 	sub.w	r3, r0, r8
 800ecdc:	fa09 f303 	lsl.w	r3, r9, r3
 800ece0:	4313      	orrs	r3, r2
 800ece2:	9304      	str	r3, [sp, #16]
 800ece4:	46a2      	mov	sl, r4
 800ece6:	e7d2      	b.n	800ec8e <_vfiprintf_r+0xc6>
 800ece8:	9b03      	ldr	r3, [sp, #12]
 800ecea:	1d19      	adds	r1, r3, #4
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	9103      	str	r1, [sp, #12]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	bfbb      	ittet	lt
 800ecf4:	425b      	neglt	r3, r3
 800ecf6:	f042 0202 	orrlt.w	r2, r2, #2
 800ecfa:	9307      	strge	r3, [sp, #28]
 800ecfc:	9307      	strlt	r3, [sp, #28]
 800ecfe:	bfb8      	it	lt
 800ed00:	9204      	strlt	r2, [sp, #16]
 800ed02:	7823      	ldrb	r3, [r4, #0]
 800ed04:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed06:	d10a      	bne.n	800ed1e <_vfiprintf_r+0x156>
 800ed08:	7863      	ldrb	r3, [r4, #1]
 800ed0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed0c:	d132      	bne.n	800ed74 <_vfiprintf_r+0x1ac>
 800ed0e:	9b03      	ldr	r3, [sp, #12]
 800ed10:	1d1a      	adds	r2, r3, #4
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	9203      	str	r2, [sp, #12]
 800ed16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed1a:	3402      	adds	r4, #2
 800ed1c:	9305      	str	r3, [sp, #20]
 800ed1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800edf4 <_vfiprintf_r+0x22c>
 800ed22:	7821      	ldrb	r1, [r4, #0]
 800ed24:	2203      	movs	r2, #3
 800ed26:	4650      	mov	r0, sl
 800ed28:	f7f1 fa5a 	bl	80001e0 <memchr>
 800ed2c:	b138      	cbz	r0, 800ed3e <_vfiprintf_r+0x176>
 800ed2e:	9b04      	ldr	r3, [sp, #16]
 800ed30:	eba0 000a 	sub.w	r0, r0, sl
 800ed34:	2240      	movs	r2, #64	@ 0x40
 800ed36:	4082      	lsls	r2, r0
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	3401      	adds	r4, #1
 800ed3c:	9304      	str	r3, [sp, #16]
 800ed3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed42:	4829      	ldr	r0, [pc, #164]	@ (800ede8 <_vfiprintf_r+0x220>)
 800ed44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed48:	2206      	movs	r2, #6
 800ed4a:	f7f1 fa49 	bl	80001e0 <memchr>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d03f      	beq.n	800edd2 <_vfiprintf_r+0x20a>
 800ed52:	4b26      	ldr	r3, [pc, #152]	@ (800edec <_vfiprintf_r+0x224>)
 800ed54:	bb1b      	cbnz	r3, 800ed9e <_vfiprintf_r+0x1d6>
 800ed56:	9b03      	ldr	r3, [sp, #12]
 800ed58:	3307      	adds	r3, #7
 800ed5a:	f023 0307 	bic.w	r3, r3, #7
 800ed5e:	3308      	adds	r3, #8
 800ed60:	9303      	str	r3, [sp, #12]
 800ed62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed64:	443b      	add	r3, r7
 800ed66:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed68:	e76a      	b.n	800ec40 <_vfiprintf_r+0x78>
 800ed6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed6e:	460c      	mov	r4, r1
 800ed70:	2001      	movs	r0, #1
 800ed72:	e7a8      	b.n	800ecc6 <_vfiprintf_r+0xfe>
 800ed74:	2300      	movs	r3, #0
 800ed76:	3401      	adds	r4, #1
 800ed78:	9305      	str	r3, [sp, #20]
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	f04f 0c0a 	mov.w	ip, #10
 800ed80:	4620      	mov	r0, r4
 800ed82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed86:	3a30      	subs	r2, #48	@ 0x30
 800ed88:	2a09      	cmp	r2, #9
 800ed8a:	d903      	bls.n	800ed94 <_vfiprintf_r+0x1cc>
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d0c6      	beq.n	800ed1e <_vfiprintf_r+0x156>
 800ed90:	9105      	str	r1, [sp, #20]
 800ed92:	e7c4      	b.n	800ed1e <_vfiprintf_r+0x156>
 800ed94:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed98:	4604      	mov	r4, r0
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e7f0      	b.n	800ed80 <_vfiprintf_r+0x1b8>
 800ed9e:	ab03      	add	r3, sp, #12
 800eda0:	9300      	str	r3, [sp, #0]
 800eda2:	462a      	mov	r2, r5
 800eda4:	4b12      	ldr	r3, [pc, #72]	@ (800edf0 <_vfiprintf_r+0x228>)
 800eda6:	a904      	add	r1, sp, #16
 800eda8:	4630      	mov	r0, r6
 800edaa:	f7fc fb7f 	bl	800b4ac <_printf_float>
 800edae:	4607      	mov	r7, r0
 800edb0:	1c78      	adds	r0, r7, #1
 800edb2:	d1d6      	bne.n	800ed62 <_vfiprintf_r+0x19a>
 800edb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edb6:	07d9      	lsls	r1, r3, #31
 800edb8:	d405      	bmi.n	800edc6 <_vfiprintf_r+0x1fe>
 800edba:	89ab      	ldrh	r3, [r5, #12]
 800edbc:	059a      	lsls	r2, r3, #22
 800edbe:	d402      	bmi.n	800edc6 <_vfiprintf_r+0x1fe>
 800edc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edc2:	f7fd faef 	bl	800c3a4 <__retarget_lock_release_recursive>
 800edc6:	89ab      	ldrh	r3, [r5, #12]
 800edc8:	065b      	lsls	r3, r3, #25
 800edca:	f53f af1f 	bmi.w	800ec0c <_vfiprintf_r+0x44>
 800edce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800edd0:	e71e      	b.n	800ec10 <_vfiprintf_r+0x48>
 800edd2:	ab03      	add	r3, sp, #12
 800edd4:	9300      	str	r3, [sp, #0]
 800edd6:	462a      	mov	r2, r5
 800edd8:	4b05      	ldr	r3, [pc, #20]	@ (800edf0 <_vfiprintf_r+0x228>)
 800edda:	a904      	add	r1, sp, #16
 800eddc:	4630      	mov	r0, r6
 800edde:	f7fc fdfd 	bl	800b9dc <_printf_i>
 800ede2:	e7e4      	b.n	800edae <_vfiprintf_r+0x1e6>
 800ede4:	080126fd 	.word	0x080126fd
 800ede8:	08012707 	.word	0x08012707
 800edec:	0800b4ad 	.word	0x0800b4ad
 800edf0:	0800eba3 	.word	0x0800eba3
 800edf4:	08012703 	.word	0x08012703

0800edf8 <__sflush_r>:
 800edf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800edfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee00:	0716      	lsls	r6, r2, #28
 800ee02:	4605      	mov	r5, r0
 800ee04:	460c      	mov	r4, r1
 800ee06:	d454      	bmi.n	800eeb2 <__sflush_r+0xba>
 800ee08:	684b      	ldr	r3, [r1, #4]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	dc02      	bgt.n	800ee14 <__sflush_r+0x1c>
 800ee0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	dd48      	ble.n	800eea6 <__sflush_r+0xae>
 800ee14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee16:	2e00      	cmp	r6, #0
 800ee18:	d045      	beq.n	800eea6 <__sflush_r+0xae>
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ee20:	682f      	ldr	r7, [r5, #0]
 800ee22:	6a21      	ldr	r1, [r4, #32]
 800ee24:	602b      	str	r3, [r5, #0]
 800ee26:	d030      	beq.n	800ee8a <__sflush_r+0x92>
 800ee28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ee2a:	89a3      	ldrh	r3, [r4, #12]
 800ee2c:	0759      	lsls	r1, r3, #29
 800ee2e:	d505      	bpl.n	800ee3c <__sflush_r+0x44>
 800ee30:	6863      	ldr	r3, [r4, #4]
 800ee32:	1ad2      	subs	r2, r2, r3
 800ee34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ee36:	b10b      	cbz	r3, 800ee3c <__sflush_r+0x44>
 800ee38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ee3a:	1ad2      	subs	r2, r2, r3
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee40:	6a21      	ldr	r1, [r4, #32]
 800ee42:	4628      	mov	r0, r5
 800ee44:	47b0      	blx	r6
 800ee46:	1c43      	adds	r3, r0, #1
 800ee48:	89a3      	ldrh	r3, [r4, #12]
 800ee4a:	d106      	bne.n	800ee5a <__sflush_r+0x62>
 800ee4c:	6829      	ldr	r1, [r5, #0]
 800ee4e:	291d      	cmp	r1, #29
 800ee50:	d82b      	bhi.n	800eeaa <__sflush_r+0xb2>
 800ee52:	4a2a      	ldr	r2, [pc, #168]	@ (800eefc <__sflush_r+0x104>)
 800ee54:	40ca      	lsrs	r2, r1
 800ee56:	07d6      	lsls	r6, r2, #31
 800ee58:	d527      	bpl.n	800eeaa <__sflush_r+0xb2>
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	6062      	str	r2, [r4, #4]
 800ee5e:	04d9      	lsls	r1, r3, #19
 800ee60:	6922      	ldr	r2, [r4, #16]
 800ee62:	6022      	str	r2, [r4, #0]
 800ee64:	d504      	bpl.n	800ee70 <__sflush_r+0x78>
 800ee66:	1c42      	adds	r2, r0, #1
 800ee68:	d101      	bne.n	800ee6e <__sflush_r+0x76>
 800ee6a:	682b      	ldr	r3, [r5, #0]
 800ee6c:	b903      	cbnz	r3, 800ee70 <__sflush_r+0x78>
 800ee6e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ee70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee72:	602f      	str	r7, [r5, #0]
 800ee74:	b1b9      	cbz	r1, 800eea6 <__sflush_r+0xae>
 800ee76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee7a:	4299      	cmp	r1, r3
 800ee7c:	d002      	beq.n	800ee84 <__sflush_r+0x8c>
 800ee7e:	4628      	mov	r0, r5
 800ee80:	f7fe f8f2 	bl	800d068 <_free_r>
 800ee84:	2300      	movs	r3, #0
 800ee86:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee88:	e00d      	b.n	800eea6 <__sflush_r+0xae>
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	4628      	mov	r0, r5
 800ee8e:	47b0      	blx	r6
 800ee90:	4602      	mov	r2, r0
 800ee92:	1c50      	adds	r0, r2, #1
 800ee94:	d1c9      	bne.n	800ee2a <__sflush_r+0x32>
 800ee96:	682b      	ldr	r3, [r5, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d0c6      	beq.n	800ee2a <__sflush_r+0x32>
 800ee9c:	2b1d      	cmp	r3, #29
 800ee9e:	d001      	beq.n	800eea4 <__sflush_r+0xac>
 800eea0:	2b16      	cmp	r3, #22
 800eea2:	d11e      	bne.n	800eee2 <__sflush_r+0xea>
 800eea4:	602f      	str	r7, [r5, #0]
 800eea6:	2000      	movs	r0, #0
 800eea8:	e022      	b.n	800eef0 <__sflush_r+0xf8>
 800eeaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eeae:	b21b      	sxth	r3, r3
 800eeb0:	e01b      	b.n	800eeea <__sflush_r+0xf2>
 800eeb2:	690f      	ldr	r7, [r1, #16]
 800eeb4:	2f00      	cmp	r7, #0
 800eeb6:	d0f6      	beq.n	800eea6 <__sflush_r+0xae>
 800eeb8:	0793      	lsls	r3, r2, #30
 800eeba:	680e      	ldr	r6, [r1, #0]
 800eebc:	bf08      	it	eq
 800eebe:	694b      	ldreq	r3, [r1, #20]
 800eec0:	600f      	str	r7, [r1, #0]
 800eec2:	bf18      	it	ne
 800eec4:	2300      	movne	r3, #0
 800eec6:	eba6 0807 	sub.w	r8, r6, r7
 800eeca:	608b      	str	r3, [r1, #8]
 800eecc:	f1b8 0f00 	cmp.w	r8, #0
 800eed0:	dde9      	ble.n	800eea6 <__sflush_r+0xae>
 800eed2:	6a21      	ldr	r1, [r4, #32]
 800eed4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eed6:	4643      	mov	r3, r8
 800eed8:	463a      	mov	r2, r7
 800eeda:	4628      	mov	r0, r5
 800eedc:	47b0      	blx	r6
 800eede:	2800      	cmp	r0, #0
 800eee0:	dc08      	bgt.n	800eef4 <__sflush_r+0xfc>
 800eee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eeea:	81a3      	strh	r3, [r4, #12]
 800eeec:	f04f 30ff 	mov.w	r0, #4294967295
 800eef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eef4:	4407      	add	r7, r0
 800eef6:	eba8 0800 	sub.w	r8, r8, r0
 800eefa:	e7e7      	b.n	800eecc <__sflush_r+0xd4>
 800eefc:	20400001 	.word	0x20400001

0800ef00 <_fflush_r>:
 800ef00:	b538      	push	{r3, r4, r5, lr}
 800ef02:	690b      	ldr	r3, [r1, #16]
 800ef04:	4605      	mov	r5, r0
 800ef06:	460c      	mov	r4, r1
 800ef08:	b913      	cbnz	r3, 800ef10 <_fflush_r+0x10>
 800ef0a:	2500      	movs	r5, #0
 800ef0c:	4628      	mov	r0, r5
 800ef0e:	bd38      	pop	{r3, r4, r5, pc}
 800ef10:	b118      	cbz	r0, 800ef1a <_fflush_r+0x1a>
 800ef12:	6a03      	ldr	r3, [r0, #32]
 800ef14:	b90b      	cbnz	r3, 800ef1a <_fflush_r+0x1a>
 800ef16:	f7fd f919 	bl	800c14c <__sinit>
 800ef1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d0f3      	beq.n	800ef0a <_fflush_r+0xa>
 800ef22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ef24:	07d0      	lsls	r0, r2, #31
 800ef26:	d404      	bmi.n	800ef32 <_fflush_r+0x32>
 800ef28:	0599      	lsls	r1, r3, #22
 800ef2a:	d402      	bmi.n	800ef32 <_fflush_r+0x32>
 800ef2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef2e:	f7fd fa38 	bl	800c3a2 <__retarget_lock_acquire_recursive>
 800ef32:	4628      	mov	r0, r5
 800ef34:	4621      	mov	r1, r4
 800ef36:	f7ff ff5f 	bl	800edf8 <__sflush_r>
 800ef3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef3c:	07da      	lsls	r2, r3, #31
 800ef3e:	4605      	mov	r5, r0
 800ef40:	d4e4      	bmi.n	800ef0c <_fflush_r+0xc>
 800ef42:	89a3      	ldrh	r3, [r4, #12]
 800ef44:	059b      	lsls	r3, r3, #22
 800ef46:	d4e1      	bmi.n	800ef0c <_fflush_r+0xc>
 800ef48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef4a:	f7fd fa2b 	bl	800c3a4 <__retarget_lock_release_recursive>
 800ef4e:	e7dd      	b.n	800ef0c <_fflush_r+0xc>

0800ef50 <__swbuf_r>:
 800ef50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef52:	460e      	mov	r6, r1
 800ef54:	4614      	mov	r4, r2
 800ef56:	4605      	mov	r5, r0
 800ef58:	b118      	cbz	r0, 800ef62 <__swbuf_r+0x12>
 800ef5a:	6a03      	ldr	r3, [r0, #32]
 800ef5c:	b90b      	cbnz	r3, 800ef62 <__swbuf_r+0x12>
 800ef5e:	f7fd f8f5 	bl	800c14c <__sinit>
 800ef62:	69a3      	ldr	r3, [r4, #24]
 800ef64:	60a3      	str	r3, [r4, #8]
 800ef66:	89a3      	ldrh	r3, [r4, #12]
 800ef68:	071a      	lsls	r2, r3, #28
 800ef6a:	d501      	bpl.n	800ef70 <__swbuf_r+0x20>
 800ef6c:	6923      	ldr	r3, [r4, #16]
 800ef6e:	b943      	cbnz	r3, 800ef82 <__swbuf_r+0x32>
 800ef70:	4621      	mov	r1, r4
 800ef72:	4628      	mov	r0, r5
 800ef74:	f000 f82a 	bl	800efcc <__swsetup_r>
 800ef78:	b118      	cbz	r0, 800ef82 <__swbuf_r+0x32>
 800ef7a:	f04f 37ff 	mov.w	r7, #4294967295
 800ef7e:	4638      	mov	r0, r7
 800ef80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef82:	6823      	ldr	r3, [r4, #0]
 800ef84:	6922      	ldr	r2, [r4, #16]
 800ef86:	1a98      	subs	r0, r3, r2
 800ef88:	6963      	ldr	r3, [r4, #20]
 800ef8a:	b2f6      	uxtb	r6, r6
 800ef8c:	4283      	cmp	r3, r0
 800ef8e:	4637      	mov	r7, r6
 800ef90:	dc05      	bgt.n	800ef9e <__swbuf_r+0x4e>
 800ef92:	4621      	mov	r1, r4
 800ef94:	4628      	mov	r0, r5
 800ef96:	f7ff ffb3 	bl	800ef00 <_fflush_r>
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	d1ed      	bne.n	800ef7a <__swbuf_r+0x2a>
 800ef9e:	68a3      	ldr	r3, [r4, #8]
 800efa0:	3b01      	subs	r3, #1
 800efa2:	60a3      	str	r3, [r4, #8]
 800efa4:	6823      	ldr	r3, [r4, #0]
 800efa6:	1c5a      	adds	r2, r3, #1
 800efa8:	6022      	str	r2, [r4, #0]
 800efaa:	701e      	strb	r6, [r3, #0]
 800efac:	6962      	ldr	r2, [r4, #20]
 800efae:	1c43      	adds	r3, r0, #1
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d004      	beq.n	800efbe <__swbuf_r+0x6e>
 800efb4:	89a3      	ldrh	r3, [r4, #12]
 800efb6:	07db      	lsls	r3, r3, #31
 800efb8:	d5e1      	bpl.n	800ef7e <__swbuf_r+0x2e>
 800efba:	2e0a      	cmp	r6, #10
 800efbc:	d1df      	bne.n	800ef7e <__swbuf_r+0x2e>
 800efbe:	4621      	mov	r1, r4
 800efc0:	4628      	mov	r0, r5
 800efc2:	f7ff ff9d 	bl	800ef00 <_fflush_r>
 800efc6:	2800      	cmp	r0, #0
 800efc8:	d0d9      	beq.n	800ef7e <__swbuf_r+0x2e>
 800efca:	e7d6      	b.n	800ef7a <__swbuf_r+0x2a>

0800efcc <__swsetup_r>:
 800efcc:	b538      	push	{r3, r4, r5, lr}
 800efce:	4b29      	ldr	r3, [pc, #164]	@ (800f074 <__swsetup_r+0xa8>)
 800efd0:	4605      	mov	r5, r0
 800efd2:	6818      	ldr	r0, [r3, #0]
 800efd4:	460c      	mov	r4, r1
 800efd6:	b118      	cbz	r0, 800efe0 <__swsetup_r+0x14>
 800efd8:	6a03      	ldr	r3, [r0, #32]
 800efda:	b90b      	cbnz	r3, 800efe0 <__swsetup_r+0x14>
 800efdc:	f7fd f8b6 	bl	800c14c <__sinit>
 800efe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efe4:	0719      	lsls	r1, r3, #28
 800efe6:	d422      	bmi.n	800f02e <__swsetup_r+0x62>
 800efe8:	06da      	lsls	r2, r3, #27
 800efea:	d407      	bmi.n	800effc <__swsetup_r+0x30>
 800efec:	2209      	movs	r2, #9
 800efee:	602a      	str	r2, [r5, #0]
 800eff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eff4:	81a3      	strh	r3, [r4, #12]
 800eff6:	f04f 30ff 	mov.w	r0, #4294967295
 800effa:	e033      	b.n	800f064 <__swsetup_r+0x98>
 800effc:	0758      	lsls	r0, r3, #29
 800effe:	d512      	bpl.n	800f026 <__swsetup_r+0x5a>
 800f000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f002:	b141      	cbz	r1, 800f016 <__swsetup_r+0x4a>
 800f004:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f008:	4299      	cmp	r1, r3
 800f00a:	d002      	beq.n	800f012 <__swsetup_r+0x46>
 800f00c:	4628      	mov	r0, r5
 800f00e:	f7fe f82b 	bl	800d068 <_free_r>
 800f012:	2300      	movs	r3, #0
 800f014:	6363      	str	r3, [r4, #52]	@ 0x34
 800f016:	89a3      	ldrh	r3, [r4, #12]
 800f018:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f01c:	81a3      	strh	r3, [r4, #12]
 800f01e:	2300      	movs	r3, #0
 800f020:	6063      	str	r3, [r4, #4]
 800f022:	6923      	ldr	r3, [r4, #16]
 800f024:	6023      	str	r3, [r4, #0]
 800f026:	89a3      	ldrh	r3, [r4, #12]
 800f028:	f043 0308 	orr.w	r3, r3, #8
 800f02c:	81a3      	strh	r3, [r4, #12]
 800f02e:	6923      	ldr	r3, [r4, #16]
 800f030:	b94b      	cbnz	r3, 800f046 <__swsetup_r+0x7a>
 800f032:	89a3      	ldrh	r3, [r4, #12]
 800f034:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f03c:	d003      	beq.n	800f046 <__swsetup_r+0x7a>
 800f03e:	4621      	mov	r1, r4
 800f040:	4628      	mov	r0, r5
 800f042:	f000 fc5d 	bl	800f900 <__smakebuf_r>
 800f046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f04a:	f013 0201 	ands.w	r2, r3, #1
 800f04e:	d00a      	beq.n	800f066 <__swsetup_r+0x9a>
 800f050:	2200      	movs	r2, #0
 800f052:	60a2      	str	r2, [r4, #8]
 800f054:	6962      	ldr	r2, [r4, #20]
 800f056:	4252      	negs	r2, r2
 800f058:	61a2      	str	r2, [r4, #24]
 800f05a:	6922      	ldr	r2, [r4, #16]
 800f05c:	b942      	cbnz	r2, 800f070 <__swsetup_r+0xa4>
 800f05e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f062:	d1c5      	bne.n	800eff0 <__swsetup_r+0x24>
 800f064:	bd38      	pop	{r3, r4, r5, pc}
 800f066:	0799      	lsls	r1, r3, #30
 800f068:	bf58      	it	pl
 800f06a:	6962      	ldrpl	r2, [r4, #20]
 800f06c:	60a2      	str	r2, [r4, #8]
 800f06e:	e7f4      	b.n	800f05a <__swsetup_r+0x8e>
 800f070:	2000      	movs	r0, #0
 800f072:	e7f7      	b.n	800f064 <__swsetup_r+0x98>
 800f074:	20000038 	.word	0x20000038

0800f078 <memmove>:
 800f078:	4288      	cmp	r0, r1
 800f07a:	b510      	push	{r4, lr}
 800f07c:	eb01 0402 	add.w	r4, r1, r2
 800f080:	d902      	bls.n	800f088 <memmove+0x10>
 800f082:	4284      	cmp	r4, r0
 800f084:	4623      	mov	r3, r4
 800f086:	d807      	bhi.n	800f098 <memmove+0x20>
 800f088:	1e43      	subs	r3, r0, #1
 800f08a:	42a1      	cmp	r1, r4
 800f08c:	d008      	beq.n	800f0a0 <memmove+0x28>
 800f08e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f092:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f096:	e7f8      	b.n	800f08a <memmove+0x12>
 800f098:	4402      	add	r2, r0
 800f09a:	4601      	mov	r1, r0
 800f09c:	428a      	cmp	r2, r1
 800f09e:	d100      	bne.n	800f0a2 <memmove+0x2a>
 800f0a0:	bd10      	pop	{r4, pc}
 800f0a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f0aa:	e7f7      	b.n	800f09c <memmove+0x24>

0800f0ac <strncmp>:
 800f0ac:	b510      	push	{r4, lr}
 800f0ae:	b16a      	cbz	r2, 800f0cc <strncmp+0x20>
 800f0b0:	3901      	subs	r1, #1
 800f0b2:	1884      	adds	r4, r0, r2
 800f0b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d103      	bne.n	800f0c8 <strncmp+0x1c>
 800f0c0:	42a0      	cmp	r0, r4
 800f0c2:	d001      	beq.n	800f0c8 <strncmp+0x1c>
 800f0c4:	2a00      	cmp	r2, #0
 800f0c6:	d1f5      	bne.n	800f0b4 <strncmp+0x8>
 800f0c8:	1ad0      	subs	r0, r2, r3
 800f0ca:	bd10      	pop	{r4, pc}
 800f0cc:	4610      	mov	r0, r2
 800f0ce:	e7fc      	b.n	800f0ca <strncmp+0x1e>

0800f0d0 <_sbrk_r>:
 800f0d0:	b538      	push	{r3, r4, r5, lr}
 800f0d2:	4d06      	ldr	r5, [pc, #24]	@ (800f0ec <_sbrk_r+0x1c>)
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	4608      	mov	r0, r1
 800f0da:	602b      	str	r3, [r5, #0]
 800f0dc:	f7f7 ff00 	bl	8006ee0 <_sbrk>
 800f0e0:	1c43      	adds	r3, r0, #1
 800f0e2:	d102      	bne.n	800f0ea <_sbrk_r+0x1a>
 800f0e4:	682b      	ldr	r3, [r5, #0]
 800f0e6:	b103      	cbz	r3, 800f0ea <_sbrk_r+0x1a>
 800f0e8:	6023      	str	r3, [r4, #0]
 800f0ea:	bd38      	pop	{r3, r4, r5, pc}
 800f0ec:	20000d94 	.word	0x20000d94

0800f0f0 <memcpy>:
 800f0f0:	440a      	add	r2, r1
 800f0f2:	4291      	cmp	r1, r2
 800f0f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f0f8:	d100      	bne.n	800f0fc <memcpy+0xc>
 800f0fa:	4770      	bx	lr
 800f0fc:	b510      	push	{r4, lr}
 800f0fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f102:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f106:	4291      	cmp	r1, r2
 800f108:	d1f9      	bne.n	800f0fe <memcpy+0xe>
 800f10a:	bd10      	pop	{r4, pc}
 800f10c:	0000      	movs	r0, r0
	...

0800f110 <nan>:
 800f110:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f118 <nan+0x8>
 800f114:	4770      	bx	lr
 800f116:	bf00      	nop
 800f118:	00000000 	.word	0x00000000
 800f11c:	7ff80000 	.word	0x7ff80000

0800f120 <__assert_func>:
 800f120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f122:	4614      	mov	r4, r2
 800f124:	461a      	mov	r2, r3
 800f126:	4b09      	ldr	r3, [pc, #36]	@ (800f14c <__assert_func+0x2c>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	4605      	mov	r5, r0
 800f12c:	68d8      	ldr	r0, [r3, #12]
 800f12e:	b14c      	cbz	r4, 800f144 <__assert_func+0x24>
 800f130:	4b07      	ldr	r3, [pc, #28]	@ (800f150 <__assert_func+0x30>)
 800f132:	9100      	str	r1, [sp, #0]
 800f134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f138:	4906      	ldr	r1, [pc, #24]	@ (800f154 <__assert_func+0x34>)
 800f13a:	462b      	mov	r3, r5
 800f13c:	f000 fba8 	bl	800f890 <fiprintf>
 800f140:	f000 fc3c 	bl	800f9bc <abort>
 800f144:	4b04      	ldr	r3, [pc, #16]	@ (800f158 <__assert_func+0x38>)
 800f146:	461c      	mov	r4, r3
 800f148:	e7f3      	b.n	800f132 <__assert_func+0x12>
 800f14a:	bf00      	nop
 800f14c:	20000038 	.word	0x20000038
 800f150:	08012716 	.word	0x08012716
 800f154:	08012723 	.word	0x08012723
 800f158:	08012751 	.word	0x08012751

0800f15c <_calloc_r>:
 800f15c:	b570      	push	{r4, r5, r6, lr}
 800f15e:	fba1 5402 	umull	r5, r4, r1, r2
 800f162:	b934      	cbnz	r4, 800f172 <_calloc_r+0x16>
 800f164:	4629      	mov	r1, r5
 800f166:	f7fd fff3 	bl	800d150 <_malloc_r>
 800f16a:	4606      	mov	r6, r0
 800f16c:	b928      	cbnz	r0, 800f17a <_calloc_r+0x1e>
 800f16e:	4630      	mov	r0, r6
 800f170:	bd70      	pop	{r4, r5, r6, pc}
 800f172:	220c      	movs	r2, #12
 800f174:	6002      	str	r2, [r0, #0]
 800f176:	2600      	movs	r6, #0
 800f178:	e7f9      	b.n	800f16e <_calloc_r+0x12>
 800f17a:	462a      	mov	r2, r5
 800f17c:	4621      	mov	r1, r4
 800f17e:	f7fd f892 	bl	800c2a6 <memset>
 800f182:	e7f4      	b.n	800f16e <_calloc_r+0x12>

0800f184 <rshift>:
 800f184:	6903      	ldr	r3, [r0, #16]
 800f186:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f18a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f18e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f192:	f100 0414 	add.w	r4, r0, #20
 800f196:	dd45      	ble.n	800f224 <rshift+0xa0>
 800f198:	f011 011f 	ands.w	r1, r1, #31
 800f19c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f1a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f1a4:	d10c      	bne.n	800f1c0 <rshift+0x3c>
 800f1a6:	f100 0710 	add.w	r7, r0, #16
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	42b1      	cmp	r1, r6
 800f1ae:	d334      	bcc.n	800f21a <rshift+0x96>
 800f1b0:	1a9b      	subs	r3, r3, r2
 800f1b2:	009b      	lsls	r3, r3, #2
 800f1b4:	1eea      	subs	r2, r5, #3
 800f1b6:	4296      	cmp	r6, r2
 800f1b8:	bf38      	it	cc
 800f1ba:	2300      	movcc	r3, #0
 800f1bc:	4423      	add	r3, r4
 800f1be:	e015      	b.n	800f1ec <rshift+0x68>
 800f1c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f1c4:	f1c1 0820 	rsb	r8, r1, #32
 800f1c8:	40cf      	lsrs	r7, r1
 800f1ca:	f105 0e04 	add.w	lr, r5, #4
 800f1ce:	46a1      	mov	r9, r4
 800f1d0:	4576      	cmp	r6, lr
 800f1d2:	46f4      	mov	ip, lr
 800f1d4:	d815      	bhi.n	800f202 <rshift+0x7e>
 800f1d6:	1a9a      	subs	r2, r3, r2
 800f1d8:	0092      	lsls	r2, r2, #2
 800f1da:	3a04      	subs	r2, #4
 800f1dc:	3501      	adds	r5, #1
 800f1de:	42ae      	cmp	r6, r5
 800f1e0:	bf38      	it	cc
 800f1e2:	2200      	movcc	r2, #0
 800f1e4:	18a3      	adds	r3, r4, r2
 800f1e6:	50a7      	str	r7, [r4, r2]
 800f1e8:	b107      	cbz	r7, 800f1ec <rshift+0x68>
 800f1ea:	3304      	adds	r3, #4
 800f1ec:	1b1a      	subs	r2, r3, r4
 800f1ee:	42a3      	cmp	r3, r4
 800f1f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f1f4:	bf08      	it	eq
 800f1f6:	2300      	moveq	r3, #0
 800f1f8:	6102      	str	r2, [r0, #16]
 800f1fa:	bf08      	it	eq
 800f1fc:	6143      	streq	r3, [r0, #20]
 800f1fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f202:	f8dc c000 	ldr.w	ip, [ip]
 800f206:	fa0c fc08 	lsl.w	ip, ip, r8
 800f20a:	ea4c 0707 	orr.w	r7, ip, r7
 800f20e:	f849 7b04 	str.w	r7, [r9], #4
 800f212:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f216:	40cf      	lsrs	r7, r1
 800f218:	e7da      	b.n	800f1d0 <rshift+0x4c>
 800f21a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f21e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f222:	e7c3      	b.n	800f1ac <rshift+0x28>
 800f224:	4623      	mov	r3, r4
 800f226:	e7e1      	b.n	800f1ec <rshift+0x68>

0800f228 <__hexdig_fun>:
 800f228:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f22c:	2b09      	cmp	r3, #9
 800f22e:	d802      	bhi.n	800f236 <__hexdig_fun+0xe>
 800f230:	3820      	subs	r0, #32
 800f232:	b2c0      	uxtb	r0, r0
 800f234:	4770      	bx	lr
 800f236:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f23a:	2b05      	cmp	r3, #5
 800f23c:	d801      	bhi.n	800f242 <__hexdig_fun+0x1a>
 800f23e:	3847      	subs	r0, #71	@ 0x47
 800f240:	e7f7      	b.n	800f232 <__hexdig_fun+0xa>
 800f242:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f246:	2b05      	cmp	r3, #5
 800f248:	d801      	bhi.n	800f24e <__hexdig_fun+0x26>
 800f24a:	3827      	subs	r0, #39	@ 0x27
 800f24c:	e7f1      	b.n	800f232 <__hexdig_fun+0xa>
 800f24e:	2000      	movs	r0, #0
 800f250:	4770      	bx	lr
	...

0800f254 <__gethex>:
 800f254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f258:	b085      	sub	sp, #20
 800f25a:	468a      	mov	sl, r1
 800f25c:	9302      	str	r3, [sp, #8]
 800f25e:	680b      	ldr	r3, [r1, #0]
 800f260:	9001      	str	r0, [sp, #4]
 800f262:	4690      	mov	r8, r2
 800f264:	1c9c      	adds	r4, r3, #2
 800f266:	46a1      	mov	r9, r4
 800f268:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f26c:	2830      	cmp	r0, #48	@ 0x30
 800f26e:	d0fa      	beq.n	800f266 <__gethex+0x12>
 800f270:	eba9 0303 	sub.w	r3, r9, r3
 800f274:	f1a3 0b02 	sub.w	fp, r3, #2
 800f278:	f7ff ffd6 	bl	800f228 <__hexdig_fun>
 800f27c:	4605      	mov	r5, r0
 800f27e:	2800      	cmp	r0, #0
 800f280:	d168      	bne.n	800f354 <__gethex+0x100>
 800f282:	49a0      	ldr	r1, [pc, #640]	@ (800f504 <__gethex+0x2b0>)
 800f284:	2201      	movs	r2, #1
 800f286:	4648      	mov	r0, r9
 800f288:	f7ff ff10 	bl	800f0ac <strncmp>
 800f28c:	4607      	mov	r7, r0
 800f28e:	2800      	cmp	r0, #0
 800f290:	d167      	bne.n	800f362 <__gethex+0x10e>
 800f292:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f296:	4626      	mov	r6, r4
 800f298:	f7ff ffc6 	bl	800f228 <__hexdig_fun>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	d062      	beq.n	800f366 <__gethex+0x112>
 800f2a0:	4623      	mov	r3, r4
 800f2a2:	7818      	ldrb	r0, [r3, #0]
 800f2a4:	2830      	cmp	r0, #48	@ 0x30
 800f2a6:	4699      	mov	r9, r3
 800f2a8:	f103 0301 	add.w	r3, r3, #1
 800f2ac:	d0f9      	beq.n	800f2a2 <__gethex+0x4e>
 800f2ae:	f7ff ffbb 	bl	800f228 <__hexdig_fun>
 800f2b2:	fab0 f580 	clz	r5, r0
 800f2b6:	096d      	lsrs	r5, r5, #5
 800f2b8:	f04f 0b01 	mov.w	fp, #1
 800f2bc:	464a      	mov	r2, r9
 800f2be:	4616      	mov	r6, r2
 800f2c0:	3201      	adds	r2, #1
 800f2c2:	7830      	ldrb	r0, [r6, #0]
 800f2c4:	f7ff ffb0 	bl	800f228 <__hexdig_fun>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	d1f8      	bne.n	800f2be <__gethex+0x6a>
 800f2cc:	498d      	ldr	r1, [pc, #564]	@ (800f504 <__gethex+0x2b0>)
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	4630      	mov	r0, r6
 800f2d2:	f7ff feeb 	bl	800f0ac <strncmp>
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	d13f      	bne.n	800f35a <__gethex+0x106>
 800f2da:	b944      	cbnz	r4, 800f2ee <__gethex+0x9a>
 800f2dc:	1c74      	adds	r4, r6, #1
 800f2de:	4622      	mov	r2, r4
 800f2e0:	4616      	mov	r6, r2
 800f2e2:	3201      	adds	r2, #1
 800f2e4:	7830      	ldrb	r0, [r6, #0]
 800f2e6:	f7ff ff9f 	bl	800f228 <__hexdig_fun>
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	d1f8      	bne.n	800f2e0 <__gethex+0x8c>
 800f2ee:	1ba4      	subs	r4, r4, r6
 800f2f0:	00a7      	lsls	r7, r4, #2
 800f2f2:	7833      	ldrb	r3, [r6, #0]
 800f2f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f2f8:	2b50      	cmp	r3, #80	@ 0x50
 800f2fa:	d13e      	bne.n	800f37a <__gethex+0x126>
 800f2fc:	7873      	ldrb	r3, [r6, #1]
 800f2fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800f300:	d033      	beq.n	800f36a <__gethex+0x116>
 800f302:	2b2d      	cmp	r3, #45	@ 0x2d
 800f304:	d034      	beq.n	800f370 <__gethex+0x11c>
 800f306:	1c71      	adds	r1, r6, #1
 800f308:	2400      	movs	r4, #0
 800f30a:	7808      	ldrb	r0, [r1, #0]
 800f30c:	f7ff ff8c 	bl	800f228 <__hexdig_fun>
 800f310:	1e43      	subs	r3, r0, #1
 800f312:	b2db      	uxtb	r3, r3
 800f314:	2b18      	cmp	r3, #24
 800f316:	d830      	bhi.n	800f37a <__gethex+0x126>
 800f318:	f1a0 0210 	sub.w	r2, r0, #16
 800f31c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f320:	f7ff ff82 	bl	800f228 <__hexdig_fun>
 800f324:	f100 3cff 	add.w	ip, r0, #4294967295
 800f328:	fa5f fc8c 	uxtb.w	ip, ip
 800f32c:	f1bc 0f18 	cmp.w	ip, #24
 800f330:	f04f 030a 	mov.w	r3, #10
 800f334:	d91e      	bls.n	800f374 <__gethex+0x120>
 800f336:	b104      	cbz	r4, 800f33a <__gethex+0xe6>
 800f338:	4252      	negs	r2, r2
 800f33a:	4417      	add	r7, r2
 800f33c:	f8ca 1000 	str.w	r1, [sl]
 800f340:	b1ed      	cbz	r5, 800f37e <__gethex+0x12a>
 800f342:	f1bb 0f00 	cmp.w	fp, #0
 800f346:	bf0c      	ite	eq
 800f348:	2506      	moveq	r5, #6
 800f34a:	2500      	movne	r5, #0
 800f34c:	4628      	mov	r0, r5
 800f34e:	b005      	add	sp, #20
 800f350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f354:	2500      	movs	r5, #0
 800f356:	462c      	mov	r4, r5
 800f358:	e7b0      	b.n	800f2bc <__gethex+0x68>
 800f35a:	2c00      	cmp	r4, #0
 800f35c:	d1c7      	bne.n	800f2ee <__gethex+0x9a>
 800f35e:	4627      	mov	r7, r4
 800f360:	e7c7      	b.n	800f2f2 <__gethex+0x9e>
 800f362:	464e      	mov	r6, r9
 800f364:	462f      	mov	r7, r5
 800f366:	2501      	movs	r5, #1
 800f368:	e7c3      	b.n	800f2f2 <__gethex+0x9e>
 800f36a:	2400      	movs	r4, #0
 800f36c:	1cb1      	adds	r1, r6, #2
 800f36e:	e7cc      	b.n	800f30a <__gethex+0xb6>
 800f370:	2401      	movs	r4, #1
 800f372:	e7fb      	b.n	800f36c <__gethex+0x118>
 800f374:	fb03 0002 	mla	r0, r3, r2, r0
 800f378:	e7ce      	b.n	800f318 <__gethex+0xc4>
 800f37a:	4631      	mov	r1, r6
 800f37c:	e7de      	b.n	800f33c <__gethex+0xe8>
 800f37e:	eba6 0309 	sub.w	r3, r6, r9
 800f382:	3b01      	subs	r3, #1
 800f384:	4629      	mov	r1, r5
 800f386:	2b07      	cmp	r3, #7
 800f388:	dc0a      	bgt.n	800f3a0 <__gethex+0x14c>
 800f38a:	9801      	ldr	r0, [sp, #4]
 800f38c:	f7fd ff6c 	bl	800d268 <_Balloc>
 800f390:	4604      	mov	r4, r0
 800f392:	b940      	cbnz	r0, 800f3a6 <__gethex+0x152>
 800f394:	4b5c      	ldr	r3, [pc, #368]	@ (800f508 <__gethex+0x2b4>)
 800f396:	4602      	mov	r2, r0
 800f398:	21e4      	movs	r1, #228	@ 0xe4
 800f39a:	485c      	ldr	r0, [pc, #368]	@ (800f50c <__gethex+0x2b8>)
 800f39c:	f7ff fec0 	bl	800f120 <__assert_func>
 800f3a0:	3101      	adds	r1, #1
 800f3a2:	105b      	asrs	r3, r3, #1
 800f3a4:	e7ef      	b.n	800f386 <__gethex+0x132>
 800f3a6:	f100 0a14 	add.w	sl, r0, #20
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	4655      	mov	r5, sl
 800f3ae:	469b      	mov	fp, r3
 800f3b0:	45b1      	cmp	r9, r6
 800f3b2:	d337      	bcc.n	800f424 <__gethex+0x1d0>
 800f3b4:	f845 bb04 	str.w	fp, [r5], #4
 800f3b8:	eba5 050a 	sub.w	r5, r5, sl
 800f3bc:	10ad      	asrs	r5, r5, #2
 800f3be:	6125      	str	r5, [r4, #16]
 800f3c0:	4658      	mov	r0, fp
 800f3c2:	f7fe f843 	bl	800d44c <__hi0bits>
 800f3c6:	016d      	lsls	r5, r5, #5
 800f3c8:	f8d8 6000 	ldr.w	r6, [r8]
 800f3cc:	1a2d      	subs	r5, r5, r0
 800f3ce:	42b5      	cmp	r5, r6
 800f3d0:	dd54      	ble.n	800f47c <__gethex+0x228>
 800f3d2:	1bad      	subs	r5, r5, r6
 800f3d4:	4629      	mov	r1, r5
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	f7fe fbcf 	bl	800db7a <__any_on>
 800f3dc:	4681      	mov	r9, r0
 800f3de:	b178      	cbz	r0, 800f400 <__gethex+0x1ac>
 800f3e0:	1e6b      	subs	r3, r5, #1
 800f3e2:	1159      	asrs	r1, r3, #5
 800f3e4:	f003 021f 	and.w	r2, r3, #31
 800f3e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f3ec:	f04f 0901 	mov.w	r9, #1
 800f3f0:	fa09 f202 	lsl.w	r2, r9, r2
 800f3f4:	420a      	tst	r2, r1
 800f3f6:	d003      	beq.n	800f400 <__gethex+0x1ac>
 800f3f8:	454b      	cmp	r3, r9
 800f3fa:	dc36      	bgt.n	800f46a <__gethex+0x216>
 800f3fc:	f04f 0902 	mov.w	r9, #2
 800f400:	4629      	mov	r1, r5
 800f402:	4620      	mov	r0, r4
 800f404:	f7ff febe 	bl	800f184 <rshift>
 800f408:	442f      	add	r7, r5
 800f40a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f40e:	42bb      	cmp	r3, r7
 800f410:	da42      	bge.n	800f498 <__gethex+0x244>
 800f412:	9801      	ldr	r0, [sp, #4]
 800f414:	4621      	mov	r1, r4
 800f416:	f7fd ff67 	bl	800d2e8 <_Bfree>
 800f41a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f41c:	2300      	movs	r3, #0
 800f41e:	6013      	str	r3, [r2, #0]
 800f420:	25a3      	movs	r5, #163	@ 0xa3
 800f422:	e793      	b.n	800f34c <__gethex+0xf8>
 800f424:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f428:	2a2e      	cmp	r2, #46	@ 0x2e
 800f42a:	d012      	beq.n	800f452 <__gethex+0x1fe>
 800f42c:	2b20      	cmp	r3, #32
 800f42e:	d104      	bne.n	800f43a <__gethex+0x1e6>
 800f430:	f845 bb04 	str.w	fp, [r5], #4
 800f434:	f04f 0b00 	mov.w	fp, #0
 800f438:	465b      	mov	r3, fp
 800f43a:	7830      	ldrb	r0, [r6, #0]
 800f43c:	9303      	str	r3, [sp, #12]
 800f43e:	f7ff fef3 	bl	800f228 <__hexdig_fun>
 800f442:	9b03      	ldr	r3, [sp, #12]
 800f444:	f000 000f 	and.w	r0, r0, #15
 800f448:	4098      	lsls	r0, r3
 800f44a:	ea4b 0b00 	orr.w	fp, fp, r0
 800f44e:	3304      	adds	r3, #4
 800f450:	e7ae      	b.n	800f3b0 <__gethex+0x15c>
 800f452:	45b1      	cmp	r9, r6
 800f454:	d8ea      	bhi.n	800f42c <__gethex+0x1d8>
 800f456:	492b      	ldr	r1, [pc, #172]	@ (800f504 <__gethex+0x2b0>)
 800f458:	9303      	str	r3, [sp, #12]
 800f45a:	2201      	movs	r2, #1
 800f45c:	4630      	mov	r0, r6
 800f45e:	f7ff fe25 	bl	800f0ac <strncmp>
 800f462:	9b03      	ldr	r3, [sp, #12]
 800f464:	2800      	cmp	r0, #0
 800f466:	d1e1      	bne.n	800f42c <__gethex+0x1d8>
 800f468:	e7a2      	b.n	800f3b0 <__gethex+0x15c>
 800f46a:	1ea9      	subs	r1, r5, #2
 800f46c:	4620      	mov	r0, r4
 800f46e:	f7fe fb84 	bl	800db7a <__any_on>
 800f472:	2800      	cmp	r0, #0
 800f474:	d0c2      	beq.n	800f3fc <__gethex+0x1a8>
 800f476:	f04f 0903 	mov.w	r9, #3
 800f47a:	e7c1      	b.n	800f400 <__gethex+0x1ac>
 800f47c:	da09      	bge.n	800f492 <__gethex+0x23e>
 800f47e:	1b75      	subs	r5, r6, r5
 800f480:	4621      	mov	r1, r4
 800f482:	9801      	ldr	r0, [sp, #4]
 800f484:	462a      	mov	r2, r5
 800f486:	f7fe f93f 	bl	800d708 <__lshift>
 800f48a:	1b7f      	subs	r7, r7, r5
 800f48c:	4604      	mov	r4, r0
 800f48e:	f100 0a14 	add.w	sl, r0, #20
 800f492:	f04f 0900 	mov.w	r9, #0
 800f496:	e7b8      	b.n	800f40a <__gethex+0x1b6>
 800f498:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f49c:	42bd      	cmp	r5, r7
 800f49e:	dd6f      	ble.n	800f580 <__gethex+0x32c>
 800f4a0:	1bed      	subs	r5, r5, r7
 800f4a2:	42ae      	cmp	r6, r5
 800f4a4:	dc34      	bgt.n	800f510 <__gethex+0x2bc>
 800f4a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f4aa:	2b02      	cmp	r3, #2
 800f4ac:	d022      	beq.n	800f4f4 <__gethex+0x2a0>
 800f4ae:	2b03      	cmp	r3, #3
 800f4b0:	d024      	beq.n	800f4fc <__gethex+0x2a8>
 800f4b2:	2b01      	cmp	r3, #1
 800f4b4:	d115      	bne.n	800f4e2 <__gethex+0x28e>
 800f4b6:	42ae      	cmp	r6, r5
 800f4b8:	d113      	bne.n	800f4e2 <__gethex+0x28e>
 800f4ba:	2e01      	cmp	r6, #1
 800f4bc:	d10b      	bne.n	800f4d6 <__gethex+0x282>
 800f4be:	9a02      	ldr	r2, [sp, #8]
 800f4c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f4c4:	6013      	str	r3, [r2, #0]
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	6123      	str	r3, [r4, #16]
 800f4ca:	f8ca 3000 	str.w	r3, [sl]
 800f4ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4d0:	2562      	movs	r5, #98	@ 0x62
 800f4d2:	601c      	str	r4, [r3, #0]
 800f4d4:	e73a      	b.n	800f34c <__gethex+0xf8>
 800f4d6:	1e71      	subs	r1, r6, #1
 800f4d8:	4620      	mov	r0, r4
 800f4da:	f7fe fb4e 	bl	800db7a <__any_on>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	d1ed      	bne.n	800f4be <__gethex+0x26a>
 800f4e2:	9801      	ldr	r0, [sp, #4]
 800f4e4:	4621      	mov	r1, r4
 800f4e6:	f7fd feff 	bl	800d2e8 <_Bfree>
 800f4ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	6013      	str	r3, [r2, #0]
 800f4f0:	2550      	movs	r5, #80	@ 0x50
 800f4f2:	e72b      	b.n	800f34c <__gethex+0xf8>
 800f4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d1f3      	bne.n	800f4e2 <__gethex+0x28e>
 800f4fa:	e7e0      	b.n	800f4be <__gethex+0x26a>
 800f4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1dd      	bne.n	800f4be <__gethex+0x26a>
 800f502:	e7ee      	b.n	800f4e2 <__gethex+0x28e>
 800f504:	080126fb 	.word	0x080126fb
 800f508:	08012691 	.word	0x08012691
 800f50c:	08012752 	.word	0x08012752
 800f510:	1e6f      	subs	r7, r5, #1
 800f512:	f1b9 0f00 	cmp.w	r9, #0
 800f516:	d130      	bne.n	800f57a <__gethex+0x326>
 800f518:	b127      	cbz	r7, 800f524 <__gethex+0x2d0>
 800f51a:	4639      	mov	r1, r7
 800f51c:	4620      	mov	r0, r4
 800f51e:	f7fe fb2c 	bl	800db7a <__any_on>
 800f522:	4681      	mov	r9, r0
 800f524:	117a      	asrs	r2, r7, #5
 800f526:	2301      	movs	r3, #1
 800f528:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f52c:	f007 071f 	and.w	r7, r7, #31
 800f530:	40bb      	lsls	r3, r7
 800f532:	4213      	tst	r3, r2
 800f534:	4629      	mov	r1, r5
 800f536:	4620      	mov	r0, r4
 800f538:	bf18      	it	ne
 800f53a:	f049 0902 	orrne.w	r9, r9, #2
 800f53e:	f7ff fe21 	bl	800f184 <rshift>
 800f542:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f546:	1b76      	subs	r6, r6, r5
 800f548:	2502      	movs	r5, #2
 800f54a:	f1b9 0f00 	cmp.w	r9, #0
 800f54e:	d047      	beq.n	800f5e0 <__gethex+0x38c>
 800f550:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f554:	2b02      	cmp	r3, #2
 800f556:	d015      	beq.n	800f584 <__gethex+0x330>
 800f558:	2b03      	cmp	r3, #3
 800f55a:	d017      	beq.n	800f58c <__gethex+0x338>
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d109      	bne.n	800f574 <__gethex+0x320>
 800f560:	f019 0f02 	tst.w	r9, #2
 800f564:	d006      	beq.n	800f574 <__gethex+0x320>
 800f566:	f8da 3000 	ldr.w	r3, [sl]
 800f56a:	ea49 0903 	orr.w	r9, r9, r3
 800f56e:	f019 0f01 	tst.w	r9, #1
 800f572:	d10e      	bne.n	800f592 <__gethex+0x33e>
 800f574:	f045 0510 	orr.w	r5, r5, #16
 800f578:	e032      	b.n	800f5e0 <__gethex+0x38c>
 800f57a:	f04f 0901 	mov.w	r9, #1
 800f57e:	e7d1      	b.n	800f524 <__gethex+0x2d0>
 800f580:	2501      	movs	r5, #1
 800f582:	e7e2      	b.n	800f54a <__gethex+0x2f6>
 800f584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f586:	f1c3 0301 	rsb	r3, r3, #1
 800f58a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d0f0      	beq.n	800f574 <__gethex+0x320>
 800f592:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f596:	f104 0314 	add.w	r3, r4, #20
 800f59a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f59e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f5a2:	f04f 0c00 	mov.w	ip, #0
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f5b0:	d01b      	beq.n	800f5ea <__gethex+0x396>
 800f5b2:	3201      	adds	r2, #1
 800f5b4:	6002      	str	r2, [r0, #0]
 800f5b6:	2d02      	cmp	r5, #2
 800f5b8:	f104 0314 	add.w	r3, r4, #20
 800f5bc:	d13c      	bne.n	800f638 <__gethex+0x3e4>
 800f5be:	f8d8 2000 	ldr.w	r2, [r8]
 800f5c2:	3a01      	subs	r2, #1
 800f5c4:	42b2      	cmp	r2, r6
 800f5c6:	d109      	bne.n	800f5dc <__gethex+0x388>
 800f5c8:	1171      	asrs	r1, r6, #5
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f5d0:	f006 061f 	and.w	r6, r6, #31
 800f5d4:	fa02 f606 	lsl.w	r6, r2, r6
 800f5d8:	421e      	tst	r6, r3
 800f5da:	d13a      	bne.n	800f652 <__gethex+0x3fe>
 800f5dc:	f045 0520 	orr.w	r5, r5, #32
 800f5e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5e2:	601c      	str	r4, [r3, #0]
 800f5e4:	9b02      	ldr	r3, [sp, #8]
 800f5e6:	601f      	str	r7, [r3, #0]
 800f5e8:	e6b0      	b.n	800f34c <__gethex+0xf8>
 800f5ea:	4299      	cmp	r1, r3
 800f5ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800f5f0:	d8d9      	bhi.n	800f5a6 <__gethex+0x352>
 800f5f2:	68a3      	ldr	r3, [r4, #8]
 800f5f4:	459b      	cmp	fp, r3
 800f5f6:	db17      	blt.n	800f628 <__gethex+0x3d4>
 800f5f8:	6861      	ldr	r1, [r4, #4]
 800f5fa:	9801      	ldr	r0, [sp, #4]
 800f5fc:	3101      	adds	r1, #1
 800f5fe:	f7fd fe33 	bl	800d268 <_Balloc>
 800f602:	4681      	mov	r9, r0
 800f604:	b918      	cbnz	r0, 800f60e <__gethex+0x3ba>
 800f606:	4b1a      	ldr	r3, [pc, #104]	@ (800f670 <__gethex+0x41c>)
 800f608:	4602      	mov	r2, r0
 800f60a:	2184      	movs	r1, #132	@ 0x84
 800f60c:	e6c5      	b.n	800f39a <__gethex+0x146>
 800f60e:	6922      	ldr	r2, [r4, #16]
 800f610:	3202      	adds	r2, #2
 800f612:	f104 010c 	add.w	r1, r4, #12
 800f616:	0092      	lsls	r2, r2, #2
 800f618:	300c      	adds	r0, #12
 800f61a:	f7ff fd69 	bl	800f0f0 <memcpy>
 800f61e:	4621      	mov	r1, r4
 800f620:	9801      	ldr	r0, [sp, #4]
 800f622:	f7fd fe61 	bl	800d2e8 <_Bfree>
 800f626:	464c      	mov	r4, r9
 800f628:	6923      	ldr	r3, [r4, #16]
 800f62a:	1c5a      	adds	r2, r3, #1
 800f62c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f630:	6122      	str	r2, [r4, #16]
 800f632:	2201      	movs	r2, #1
 800f634:	615a      	str	r2, [r3, #20]
 800f636:	e7be      	b.n	800f5b6 <__gethex+0x362>
 800f638:	6922      	ldr	r2, [r4, #16]
 800f63a:	455a      	cmp	r2, fp
 800f63c:	dd0b      	ble.n	800f656 <__gethex+0x402>
 800f63e:	2101      	movs	r1, #1
 800f640:	4620      	mov	r0, r4
 800f642:	f7ff fd9f 	bl	800f184 <rshift>
 800f646:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f64a:	3701      	adds	r7, #1
 800f64c:	42bb      	cmp	r3, r7
 800f64e:	f6ff aee0 	blt.w	800f412 <__gethex+0x1be>
 800f652:	2501      	movs	r5, #1
 800f654:	e7c2      	b.n	800f5dc <__gethex+0x388>
 800f656:	f016 061f 	ands.w	r6, r6, #31
 800f65a:	d0fa      	beq.n	800f652 <__gethex+0x3fe>
 800f65c:	4453      	add	r3, sl
 800f65e:	f1c6 0620 	rsb	r6, r6, #32
 800f662:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f666:	f7fd fef1 	bl	800d44c <__hi0bits>
 800f66a:	42b0      	cmp	r0, r6
 800f66c:	dbe7      	blt.n	800f63e <__gethex+0x3ea>
 800f66e:	e7f0      	b.n	800f652 <__gethex+0x3fe>
 800f670:	08012691 	.word	0x08012691

0800f674 <L_shift>:
 800f674:	f1c2 0208 	rsb	r2, r2, #8
 800f678:	0092      	lsls	r2, r2, #2
 800f67a:	b570      	push	{r4, r5, r6, lr}
 800f67c:	f1c2 0620 	rsb	r6, r2, #32
 800f680:	6843      	ldr	r3, [r0, #4]
 800f682:	6804      	ldr	r4, [r0, #0]
 800f684:	fa03 f506 	lsl.w	r5, r3, r6
 800f688:	432c      	orrs	r4, r5
 800f68a:	40d3      	lsrs	r3, r2
 800f68c:	6004      	str	r4, [r0, #0]
 800f68e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f692:	4288      	cmp	r0, r1
 800f694:	d3f4      	bcc.n	800f680 <L_shift+0xc>
 800f696:	bd70      	pop	{r4, r5, r6, pc}

0800f698 <__match>:
 800f698:	b530      	push	{r4, r5, lr}
 800f69a:	6803      	ldr	r3, [r0, #0]
 800f69c:	3301      	adds	r3, #1
 800f69e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6a2:	b914      	cbnz	r4, 800f6aa <__match+0x12>
 800f6a4:	6003      	str	r3, [r0, #0]
 800f6a6:	2001      	movs	r0, #1
 800f6a8:	bd30      	pop	{r4, r5, pc}
 800f6aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f6b2:	2d19      	cmp	r5, #25
 800f6b4:	bf98      	it	ls
 800f6b6:	3220      	addls	r2, #32
 800f6b8:	42a2      	cmp	r2, r4
 800f6ba:	d0f0      	beq.n	800f69e <__match+0x6>
 800f6bc:	2000      	movs	r0, #0
 800f6be:	e7f3      	b.n	800f6a8 <__match+0x10>

0800f6c0 <__hexnan>:
 800f6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c4:	680b      	ldr	r3, [r1, #0]
 800f6c6:	6801      	ldr	r1, [r0, #0]
 800f6c8:	115e      	asrs	r6, r3, #5
 800f6ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f6ce:	f013 031f 	ands.w	r3, r3, #31
 800f6d2:	b087      	sub	sp, #28
 800f6d4:	bf18      	it	ne
 800f6d6:	3604      	addne	r6, #4
 800f6d8:	2500      	movs	r5, #0
 800f6da:	1f37      	subs	r7, r6, #4
 800f6dc:	4682      	mov	sl, r0
 800f6de:	4690      	mov	r8, r2
 800f6e0:	9301      	str	r3, [sp, #4]
 800f6e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f6e6:	46b9      	mov	r9, r7
 800f6e8:	463c      	mov	r4, r7
 800f6ea:	9502      	str	r5, [sp, #8]
 800f6ec:	46ab      	mov	fp, r5
 800f6ee:	784a      	ldrb	r2, [r1, #1]
 800f6f0:	1c4b      	adds	r3, r1, #1
 800f6f2:	9303      	str	r3, [sp, #12]
 800f6f4:	b342      	cbz	r2, 800f748 <__hexnan+0x88>
 800f6f6:	4610      	mov	r0, r2
 800f6f8:	9105      	str	r1, [sp, #20]
 800f6fa:	9204      	str	r2, [sp, #16]
 800f6fc:	f7ff fd94 	bl	800f228 <__hexdig_fun>
 800f700:	2800      	cmp	r0, #0
 800f702:	d151      	bne.n	800f7a8 <__hexnan+0xe8>
 800f704:	9a04      	ldr	r2, [sp, #16]
 800f706:	9905      	ldr	r1, [sp, #20]
 800f708:	2a20      	cmp	r2, #32
 800f70a:	d818      	bhi.n	800f73e <__hexnan+0x7e>
 800f70c:	9b02      	ldr	r3, [sp, #8]
 800f70e:	459b      	cmp	fp, r3
 800f710:	dd13      	ble.n	800f73a <__hexnan+0x7a>
 800f712:	454c      	cmp	r4, r9
 800f714:	d206      	bcs.n	800f724 <__hexnan+0x64>
 800f716:	2d07      	cmp	r5, #7
 800f718:	dc04      	bgt.n	800f724 <__hexnan+0x64>
 800f71a:	462a      	mov	r2, r5
 800f71c:	4649      	mov	r1, r9
 800f71e:	4620      	mov	r0, r4
 800f720:	f7ff ffa8 	bl	800f674 <L_shift>
 800f724:	4544      	cmp	r4, r8
 800f726:	d952      	bls.n	800f7ce <__hexnan+0x10e>
 800f728:	2300      	movs	r3, #0
 800f72a:	f1a4 0904 	sub.w	r9, r4, #4
 800f72e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f732:	f8cd b008 	str.w	fp, [sp, #8]
 800f736:	464c      	mov	r4, r9
 800f738:	461d      	mov	r5, r3
 800f73a:	9903      	ldr	r1, [sp, #12]
 800f73c:	e7d7      	b.n	800f6ee <__hexnan+0x2e>
 800f73e:	2a29      	cmp	r2, #41	@ 0x29
 800f740:	d157      	bne.n	800f7f2 <__hexnan+0x132>
 800f742:	3102      	adds	r1, #2
 800f744:	f8ca 1000 	str.w	r1, [sl]
 800f748:	f1bb 0f00 	cmp.w	fp, #0
 800f74c:	d051      	beq.n	800f7f2 <__hexnan+0x132>
 800f74e:	454c      	cmp	r4, r9
 800f750:	d206      	bcs.n	800f760 <__hexnan+0xa0>
 800f752:	2d07      	cmp	r5, #7
 800f754:	dc04      	bgt.n	800f760 <__hexnan+0xa0>
 800f756:	462a      	mov	r2, r5
 800f758:	4649      	mov	r1, r9
 800f75a:	4620      	mov	r0, r4
 800f75c:	f7ff ff8a 	bl	800f674 <L_shift>
 800f760:	4544      	cmp	r4, r8
 800f762:	d936      	bls.n	800f7d2 <__hexnan+0x112>
 800f764:	f1a8 0204 	sub.w	r2, r8, #4
 800f768:	4623      	mov	r3, r4
 800f76a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f76e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f772:	429f      	cmp	r7, r3
 800f774:	d2f9      	bcs.n	800f76a <__hexnan+0xaa>
 800f776:	1b3b      	subs	r3, r7, r4
 800f778:	f023 0303 	bic.w	r3, r3, #3
 800f77c:	3304      	adds	r3, #4
 800f77e:	3401      	adds	r4, #1
 800f780:	3e03      	subs	r6, #3
 800f782:	42b4      	cmp	r4, r6
 800f784:	bf88      	it	hi
 800f786:	2304      	movhi	r3, #4
 800f788:	4443      	add	r3, r8
 800f78a:	2200      	movs	r2, #0
 800f78c:	f843 2b04 	str.w	r2, [r3], #4
 800f790:	429f      	cmp	r7, r3
 800f792:	d2fb      	bcs.n	800f78c <__hexnan+0xcc>
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	b91b      	cbnz	r3, 800f7a0 <__hexnan+0xe0>
 800f798:	4547      	cmp	r7, r8
 800f79a:	d128      	bne.n	800f7ee <__hexnan+0x12e>
 800f79c:	2301      	movs	r3, #1
 800f79e:	603b      	str	r3, [r7, #0]
 800f7a0:	2005      	movs	r0, #5
 800f7a2:	b007      	add	sp, #28
 800f7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a8:	3501      	adds	r5, #1
 800f7aa:	2d08      	cmp	r5, #8
 800f7ac:	f10b 0b01 	add.w	fp, fp, #1
 800f7b0:	dd06      	ble.n	800f7c0 <__hexnan+0x100>
 800f7b2:	4544      	cmp	r4, r8
 800f7b4:	d9c1      	bls.n	800f73a <__hexnan+0x7a>
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800f7bc:	2501      	movs	r5, #1
 800f7be:	3c04      	subs	r4, #4
 800f7c0:	6822      	ldr	r2, [r4, #0]
 800f7c2:	f000 000f 	and.w	r0, r0, #15
 800f7c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f7ca:	6020      	str	r0, [r4, #0]
 800f7cc:	e7b5      	b.n	800f73a <__hexnan+0x7a>
 800f7ce:	2508      	movs	r5, #8
 800f7d0:	e7b3      	b.n	800f73a <__hexnan+0x7a>
 800f7d2:	9b01      	ldr	r3, [sp, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d0dd      	beq.n	800f794 <__hexnan+0xd4>
 800f7d8:	f1c3 0320 	rsb	r3, r3, #32
 800f7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f7e0:	40da      	lsrs	r2, r3
 800f7e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f7e6:	4013      	ands	r3, r2
 800f7e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800f7ec:	e7d2      	b.n	800f794 <__hexnan+0xd4>
 800f7ee:	3f04      	subs	r7, #4
 800f7f0:	e7d0      	b.n	800f794 <__hexnan+0xd4>
 800f7f2:	2004      	movs	r0, #4
 800f7f4:	e7d5      	b.n	800f7a2 <__hexnan+0xe2>

0800f7f6 <__ascii_mbtowc>:
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	b901      	cbnz	r1, 800f7fc <__ascii_mbtowc+0x6>
 800f7fa:	a901      	add	r1, sp, #4
 800f7fc:	b142      	cbz	r2, 800f810 <__ascii_mbtowc+0x1a>
 800f7fe:	b14b      	cbz	r3, 800f814 <__ascii_mbtowc+0x1e>
 800f800:	7813      	ldrb	r3, [r2, #0]
 800f802:	600b      	str	r3, [r1, #0]
 800f804:	7812      	ldrb	r2, [r2, #0]
 800f806:	1e10      	subs	r0, r2, #0
 800f808:	bf18      	it	ne
 800f80a:	2001      	movne	r0, #1
 800f80c:	b002      	add	sp, #8
 800f80e:	4770      	bx	lr
 800f810:	4610      	mov	r0, r2
 800f812:	e7fb      	b.n	800f80c <__ascii_mbtowc+0x16>
 800f814:	f06f 0001 	mvn.w	r0, #1
 800f818:	e7f8      	b.n	800f80c <__ascii_mbtowc+0x16>

0800f81a <_realloc_r>:
 800f81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f81e:	4607      	mov	r7, r0
 800f820:	4614      	mov	r4, r2
 800f822:	460d      	mov	r5, r1
 800f824:	b921      	cbnz	r1, 800f830 <_realloc_r+0x16>
 800f826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f82a:	4611      	mov	r1, r2
 800f82c:	f7fd bc90 	b.w	800d150 <_malloc_r>
 800f830:	b92a      	cbnz	r2, 800f83e <_realloc_r+0x24>
 800f832:	f7fd fc19 	bl	800d068 <_free_r>
 800f836:	4625      	mov	r5, r4
 800f838:	4628      	mov	r0, r5
 800f83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f83e:	f000 f8c4 	bl	800f9ca <_malloc_usable_size_r>
 800f842:	4284      	cmp	r4, r0
 800f844:	4606      	mov	r6, r0
 800f846:	d802      	bhi.n	800f84e <_realloc_r+0x34>
 800f848:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f84c:	d8f4      	bhi.n	800f838 <_realloc_r+0x1e>
 800f84e:	4621      	mov	r1, r4
 800f850:	4638      	mov	r0, r7
 800f852:	f7fd fc7d 	bl	800d150 <_malloc_r>
 800f856:	4680      	mov	r8, r0
 800f858:	b908      	cbnz	r0, 800f85e <_realloc_r+0x44>
 800f85a:	4645      	mov	r5, r8
 800f85c:	e7ec      	b.n	800f838 <_realloc_r+0x1e>
 800f85e:	42b4      	cmp	r4, r6
 800f860:	4622      	mov	r2, r4
 800f862:	4629      	mov	r1, r5
 800f864:	bf28      	it	cs
 800f866:	4632      	movcs	r2, r6
 800f868:	f7ff fc42 	bl	800f0f0 <memcpy>
 800f86c:	4629      	mov	r1, r5
 800f86e:	4638      	mov	r0, r7
 800f870:	f7fd fbfa 	bl	800d068 <_free_r>
 800f874:	e7f1      	b.n	800f85a <_realloc_r+0x40>

0800f876 <__ascii_wctomb>:
 800f876:	4603      	mov	r3, r0
 800f878:	4608      	mov	r0, r1
 800f87a:	b141      	cbz	r1, 800f88e <__ascii_wctomb+0x18>
 800f87c:	2aff      	cmp	r2, #255	@ 0xff
 800f87e:	d904      	bls.n	800f88a <__ascii_wctomb+0x14>
 800f880:	228a      	movs	r2, #138	@ 0x8a
 800f882:	601a      	str	r2, [r3, #0]
 800f884:	f04f 30ff 	mov.w	r0, #4294967295
 800f888:	4770      	bx	lr
 800f88a:	700a      	strb	r2, [r1, #0]
 800f88c:	2001      	movs	r0, #1
 800f88e:	4770      	bx	lr

0800f890 <fiprintf>:
 800f890:	b40e      	push	{r1, r2, r3}
 800f892:	b503      	push	{r0, r1, lr}
 800f894:	4601      	mov	r1, r0
 800f896:	ab03      	add	r3, sp, #12
 800f898:	4805      	ldr	r0, [pc, #20]	@ (800f8b0 <fiprintf+0x20>)
 800f89a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f89e:	6800      	ldr	r0, [r0, #0]
 800f8a0:	9301      	str	r3, [sp, #4]
 800f8a2:	f7ff f991 	bl	800ebc8 <_vfiprintf_r>
 800f8a6:	b002      	add	sp, #8
 800f8a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8ac:	b003      	add	sp, #12
 800f8ae:	4770      	bx	lr
 800f8b0:	20000038 	.word	0x20000038

0800f8b4 <__swhatbuf_r>:
 800f8b4:	b570      	push	{r4, r5, r6, lr}
 800f8b6:	460c      	mov	r4, r1
 800f8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8bc:	2900      	cmp	r1, #0
 800f8be:	b096      	sub	sp, #88	@ 0x58
 800f8c0:	4615      	mov	r5, r2
 800f8c2:	461e      	mov	r6, r3
 800f8c4:	da0d      	bge.n	800f8e2 <__swhatbuf_r+0x2e>
 800f8c6:	89a3      	ldrh	r3, [r4, #12]
 800f8c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f8cc:	f04f 0100 	mov.w	r1, #0
 800f8d0:	bf14      	ite	ne
 800f8d2:	2340      	movne	r3, #64	@ 0x40
 800f8d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f8d8:	2000      	movs	r0, #0
 800f8da:	6031      	str	r1, [r6, #0]
 800f8dc:	602b      	str	r3, [r5, #0]
 800f8de:	b016      	add	sp, #88	@ 0x58
 800f8e0:	bd70      	pop	{r4, r5, r6, pc}
 800f8e2:	466a      	mov	r2, sp
 800f8e4:	f000 f848 	bl	800f978 <_fstat_r>
 800f8e8:	2800      	cmp	r0, #0
 800f8ea:	dbec      	blt.n	800f8c6 <__swhatbuf_r+0x12>
 800f8ec:	9901      	ldr	r1, [sp, #4]
 800f8ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f8f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f8f6:	4259      	negs	r1, r3
 800f8f8:	4159      	adcs	r1, r3
 800f8fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f8fe:	e7eb      	b.n	800f8d8 <__swhatbuf_r+0x24>

0800f900 <__smakebuf_r>:
 800f900:	898b      	ldrh	r3, [r1, #12]
 800f902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f904:	079d      	lsls	r5, r3, #30
 800f906:	4606      	mov	r6, r0
 800f908:	460c      	mov	r4, r1
 800f90a:	d507      	bpl.n	800f91c <__smakebuf_r+0x1c>
 800f90c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f910:	6023      	str	r3, [r4, #0]
 800f912:	6123      	str	r3, [r4, #16]
 800f914:	2301      	movs	r3, #1
 800f916:	6163      	str	r3, [r4, #20]
 800f918:	b003      	add	sp, #12
 800f91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f91c:	ab01      	add	r3, sp, #4
 800f91e:	466a      	mov	r2, sp
 800f920:	f7ff ffc8 	bl	800f8b4 <__swhatbuf_r>
 800f924:	9f00      	ldr	r7, [sp, #0]
 800f926:	4605      	mov	r5, r0
 800f928:	4639      	mov	r1, r7
 800f92a:	4630      	mov	r0, r6
 800f92c:	f7fd fc10 	bl	800d150 <_malloc_r>
 800f930:	b948      	cbnz	r0, 800f946 <__smakebuf_r+0x46>
 800f932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f936:	059a      	lsls	r2, r3, #22
 800f938:	d4ee      	bmi.n	800f918 <__smakebuf_r+0x18>
 800f93a:	f023 0303 	bic.w	r3, r3, #3
 800f93e:	f043 0302 	orr.w	r3, r3, #2
 800f942:	81a3      	strh	r3, [r4, #12]
 800f944:	e7e2      	b.n	800f90c <__smakebuf_r+0xc>
 800f946:	89a3      	ldrh	r3, [r4, #12]
 800f948:	6020      	str	r0, [r4, #0]
 800f94a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f94e:	81a3      	strh	r3, [r4, #12]
 800f950:	9b01      	ldr	r3, [sp, #4]
 800f952:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f956:	b15b      	cbz	r3, 800f970 <__smakebuf_r+0x70>
 800f958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f95c:	4630      	mov	r0, r6
 800f95e:	f000 f81d 	bl	800f99c <_isatty_r>
 800f962:	b128      	cbz	r0, 800f970 <__smakebuf_r+0x70>
 800f964:	89a3      	ldrh	r3, [r4, #12]
 800f966:	f023 0303 	bic.w	r3, r3, #3
 800f96a:	f043 0301 	orr.w	r3, r3, #1
 800f96e:	81a3      	strh	r3, [r4, #12]
 800f970:	89a3      	ldrh	r3, [r4, #12]
 800f972:	431d      	orrs	r5, r3
 800f974:	81a5      	strh	r5, [r4, #12]
 800f976:	e7cf      	b.n	800f918 <__smakebuf_r+0x18>

0800f978 <_fstat_r>:
 800f978:	b538      	push	{r3, r4, r5, lr}
 800f97a:	4d07      	ldr	r5, [pc, #28]	@ (800f998 <_fstat_r+0x20>)
 800f97c:	2300      	movs	r3, #0
 800f97e:	4604      	mov	r4, r0
 800f980:	4608      	mov	r0, r1
 800f982:	4611      	mov	r1, r2
 800f984:	602b      	str	r3, [r5, #0]
 800f986:	f7f7 fa83 	bl	8006e90 <_fstat>
 800f98a:	1c43      	adds	r3, r0, #1
 800f98c:	d102      	bne.n	800f994 <_fstat_r+0x1c>
 800f98e:	682b      	ldr	r3, [r5, #0]
 800f990:	b103      	cbz	r3, 800f994 <_fstat_r+0x1c>
 800f992:	6023      	str	r3, [r4, #0]
 800f994:	bd38      	pop	{r3, r4, r5, pc}
 800f996:	bf00      	nop
 800f998:	20000d94 	.word	0x20000d94

0800f99c <_isatty_r>:
 800f99c:	b538      	push	{r3, r4, r5, lr}
 800f99e:	4d06      	ldr	r5, [pc, #24]	@ (800f9b8 <_isatty_r+0x1c>)
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	4604      	mov	r4, r0
 800f9a4:	4608      	mov	r0, r1
 800f9a6:	602b      	str	r3, [r5, #0]
 800f9a8:	f7f7 fa82 	bl	8006eb0 <_isatty>
 800f9ac:	1c43      	adds	r3, r0, #1
 800f9ae:	d102      	bne.n	800f9b6 <_isatty_r+0x1a>
 800f9b0:	682b      	ldr	r3, [r5, #0]
 800f9b2:	b103      	cbz	r3, 800f9b6 <_isatty_r+0x1a>
 800f9b4:	6023      	str	r3, [r4, #0]
 800f9b6:	bd38      	pop	{r3, r4, r5, pc}
 800f9b8:	20000d94 	.word	0x20000d94

0800f9bc <abort>:
 800f9bc:	b508      	push	{r3, lr}
 800f9be:	2006      	movs	r0, #6
 800f9c0:	f000 f834 	bl	800fa2c <raise>
 800f9c4:	2001      	movs	r0, #1
 800f9c6:	f7f7 fa2f 	bl	8006e28 <_exit>

0800f9ca <_malloc_usable_size_r>:
 800f9ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9ce:	1f18      	subs	r0, r3, #4
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	bfbc      	itt	lt
 800f9d4:	580b      	ldrlt	r3, [r1, r0]
 800f9d6:	18c0      	addlt	r0, r0, r3
 800f9d8:	4770      	bx	lr

0800f9da <_raise_r>:
 800f9da:	291f      	cmp	r1, #31
 800f9dc:	b538      	push	{r3, r4, r5, lr}
 800f9de:	4605      	mov	r5, r0
 800f9e0:	460c      	mov	r4, r1
 800f9e2:	d904      	bls.n	800f9ee <_raise_r+0x14>
 800f9e4:	2316      	movs	r3, #22
 800f9e6:	6003      	str	r3, [r0, #0]
 800f9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ec:	bd38      	pop	{r3, r4, r5, pc}
 800f9ee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f9f0:	b112      	cbz	r2, 800f9f8 <_raise_r+0x1e>
 800f9f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f9f6:	b94b      	cbnz	r3, 800fa0c <_raise_r+0x32>
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	f000 f831 	bl	800fa60 <_getpid_r>
 800f9fe:	4622      	mov	r2, r4
 800fa00:	4601      	mov	r1, r0
 800fa02:	4628      	mov	r0, r5
 800fa04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa08:	f000 b818 	b.w	800fa3c <_kill_r>
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d00a      	beq.n	800fa26 <_raise_r+0x4c>
 800fa10:	1c59      	adds	r1, r3, #1
 800fa12:	d103      	bne.n	800fa1c <_raise_r+0x42>
 800fa14:	2316      	movs	r3, #22
 800fa16:	6003      	str	r3, [r0, #0]
 800fa18:	2001      	movs	r0, #1
 800fa1a:	e7e7      	b.n	800f9ec <_raise_r+0x12>
 800fa1c:	2100      	movs	r1, #0
 800fa1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa22:	4620      	mov	r0, r4
 800fa24:	4798      	blx	r3
 800fa26:	2000      	movs	r0, #0
 800fa28:	e7e0      	b.n	800f9ec <_raise_r+0x12>
	...

0800fa2c <raise>:
 800fa2c:	4b02      	ldr	r3, [pc, #8]	@ (800fa38 <raise+0xc>)
 800fa2e:	4601      	mov	r1, r0
 800fa30:	6818      	ldr	r0, [r3, #0]
 800fa32:	f7ff bfd2 	b.w	800f9da <_raise_r>
 800fa36:	bf00      	nop
 800fa38:	20000038 	.word	0x20000038

0800fa3c <_kill_r>:
 800fa3c:	b538      	push	{r3, r4, r5, lr}
 800fa3e:	4d07      	ldr	r5, [pc, #28]	@ (800fa5c <_kill_r+0x20>)
 800fa40:	2300      	movs	r3, #0
 800fa42:	4604      	mov	r4, r0
 800fa44:	4608      	mov	r0, r1
 800fa46:	4611      	mov	r1, r2
 800fa48:	602b      	str	r3, [r5, #0]
 800fa4a:	f7f7 f9dd 	bl	8006e08 <_kill>
 800fa4e:	1c43      	adds	r3, r0, #1
 800fa50:	d102      	bne.n	800fa58 <_kill_r+0x1c>
 800fa52:	682b      	ldr	r3, [r5, #0]
 800fa54:	b103      	cbz	r3, 800fa58 <_kill_r+0x1c>
 800fa56:	6023      	str	r3, [r4, #0]
 800fa58:	bd38      	pop	{r3, r4, r5, pc}
 800fa5a:	bf00      	nop
 800fa5c:	20000d94 	.word	0x20000d94

0800fa60 <_getpid_r>:
 800fa60:	f7f7 b9ca 	b.w	8006df8 <_getpid>

0800fa64 <asin>:
 800fa64:	b538      	push	{r3, r4, r5, lr}
 800fa66:	ed2d 8b02 	vpush	{d8}
 800fa6a:	ec55 4b10 	vmov	r4, r5, d0
 800fa6e:	f000 fac3 	bl	800fff8 <__ieee754_asin>
 800fa72:	4622      	mov	r2, r4
 800fa74:	462b      	mov	r3, r5
 800fa76:	4620      	mov	r0, r4
 800fa78:	4629      	mov	r1, r5
 800fa7a:	eeb0 8a40 	vmov.f32	s16, s0
 800fa7e:	eef0 8a60 	vmov.f32	s17, s1
 800fa82:	f7f1 f85b 	bl	8000b3c <__aeabi_dcmpun>
 800fa86:	b9a8      	cbnz	r0, 800fab4 <asin+0x50>
 800fa88:	ec45 4b10 	vmov	d0, r4, r5
 800fa8c:	f000 f8bc 	bl	800fc08 <fabs>
 800fa90:	4b0c      	ldr	r3, [pc, #48]	@ (800fac4 <asin+0x60>)
 800fa92:	ec51 0b10 	vmov	r0, r1, d0
 800fa96:	2200      	movs	r2, #0
 800fa98:	f7f1 f846 	bl	8000b28 <__aeabi_dcmpgt>
 800fa9c:	b150      	cbz	r0, 800fab4 <asin+0x50>
 800fa9e:	f7fc fc55 	bl	800c34c <__errno>
 800faa2:	ecbd 8b02 	vpop	{d8}
 800faa6:	2321      	movs	r3, #33	@ 0x21
 800faa8:	6003      	str	r3, [r0, #0]
 800faaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800faae:	4806      	ldr	r0, [pc, #24]	@ (800fac8 <asin+0x64>)
 800fab0:	f7ff bb2e 	b.w	800f110 <nan>
 800fab4:	eeb0 0a48 	vmov.f32	s0, s16
 800fab8:	eef0 0a68 	vmov.f32	s1, s17
 800fabc:	ecbd 8b02 	vpop	{d8}
 800fac0:	bd38      	pop	{r3, r4, r5, pc}
 800fac2:	bf00      	nop
 800fac4:	3ff00000 	.word	0x3ff00000
 800fac8:	08012751 	.word	0x08012751

0800facc <atan2>:
 800facc:	f000 bc98 	b.w	8010400 <__ieee754_atan2>

0800fad0 <pow>:
 800fad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fad2:	ed2d 8b02 	vpush	{d8}
 800fad6:	eeb0 8a40 	vmov.f32	s16, s0
 800fada:	eef0 8a60 	vmov.f32	s17, s1
 800fade:	ec55 4b11 	vmov	r4, r5, d1
 800fae2:	f000 fd55 	bl	8010590 <__ieee754_pow>
 800fae6:	4622      	mov	r2, r4
 800fae8:	462b      	mov	r3, r5
 800faea:	4620      	mov	r0, r4
 800faec:	4629      	mov	r1, r5
 800faee:	ec57 6b10 	vmov	r6, r7, d0
 800faf2:	f7f1 f823 	bl	8000b3c <__aeabi_dcmpun>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	d13b      	bne.n	800fb72 <pow+0xa2>
 800fafa:	ec51 0b18 	vmov	r0, r1, d8
 800fafe:	2200      	movs	r2, #0
 800fb00:	2300      	movs	r3, #0
 800fb02:	f7f0 ffe9 	bl	8000ad8 <__aeabi_dcmpeq>
 800fb06:	b1b8      	cbz	r0, 800fb38 <pow+0x68>
 800fb08:	2200      	movs	r2, #0
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	4629      	mov	r1, r5
 800fb10:	f7f0 ffe2 	bl	8000ad8 <__aeabi_dcmpeq>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	d146      	bne.n	800fba6 <pow+0xd6>
 800fb18:	ec45 4b10 	vmov	d0, r4, r5
 800fb1c:	f000 f986 	bl	800fe2c <finite>
 800fb20:	b338      	cbz	r0, 800fb72 <pow+0xa2>
 800fb22:	2200      	movs	r2, #0
 800fb24:	2300      	movs	r3, #0
 800fb26:	4620      	mov	r0, r4
 800fb28:	4629      	mov	r1, r5
 800fb2a:	f7f0 ffdf 	bl	8000aec <__aeabi_dcmplt>
 800fb2e:	b300      	cbz	r0, 800fb72 <pow+0xa2>
 800fb30:	f7fc fc0c 	bl	800c34c <__errno>
 800fb34:	2322      	movs	r3, #34	@ 0x22
 800fb36:	e01b      	b.n	800fb70 <pow+0xa0>
 800fb38:	ec47 6b10 	vmov	d0, r6, r7
 800fb3c:	f000 f976 	bl	800fe2c <finite>
 800fb40:	b9e0      	cbnz	r0, 800fb7c <pow+0xac>
 800fb42:	eeb0 0a48 	vmov.f32	s0, s16
 800fb46:	eef0 0a68 	vmov.f32	s1, s17
 800fb4a:	f000 f96f 	bl	800fe2c <finite>
 800fb4e:	b1a8      	cbz	r0, 800fb7c <pow+0xac>
 800fb50:	ec45 4b10 	vmov	d0, r4, r5
 800fb54:	f000 f96a 	bl	800fe2c <finite>
 800fb58:	b180      	cbz	r0, 800fb7c <pow+0xac>
 800fb5a:	4632      	mov	r2, r6
 800fb5c:	463b      	mov	r3, r7
 800fb5e:	4630      	mov	r0, r6
 800fb60:	4639      	mov	r1, r7
 800fb62:	f7f0 ffeb 	bl	8000b3c <__aeabi_dcmpun>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	d0e2      	beq.n	800fb30 <pow+0x60>
 800fb6a:	f7fc fbef 	bl	800c34c <__errno>
 800fb6e:	2321      	movs	r3, #33	@ 0x21
 800fb70:	6003      	str	r3, [r0, #0]
 800fb72:	ecbd 8b02 	vpop	{d8}
 800fb76:	ec47 6b10 	vmov	d0, r6, r7
 800fb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	2300      	movs	r3, #0
 800fb80:	4630      	mov	r0, r6
 800fb82:	4639      	mov	r1, r7
 800fb84:	f7f0 ffa8 	bl	8000ad8 <__aeabi_dcmpeq>
 800fb88:	2800      	cmp	r0, #0
 800fb8a:	d0f2      	beq.n	800fb72 <pow+0xa2>
 800fb8c:	eeb0 0a48 	vmov.f32	s0, s16
 800fb90:	eef0 0a68 	vmov.f32	s1, s17
 800fb94:	f000 f94a 	bl	800fe2c <finite>
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	d0ea      	beq.n	800fb72 <pow+0xa2>
 800fb9c:	ec45 4b10 	vmov	d0, r4, r5
 800fba0:	f000 f944 	bl	800fe2c <finite>
 800fba4:	e7c3      	b.n	800fb2e <pow+0x5e>
 800fba6:	4f01      	ldr	r7, [pc, #4]	@ (800fbac <pow+0xdc>)
 800fba8:	2600      	movs	r6, #0
 800fbaa:	e7e2      	b.n	800fb72 <pow+0xa2>
 800fbac:	3ff00000 	.word	0x3ff00000

0800fbb0 <sqrt>:
 800fbb0:	b538      	push	{r3, r4, r5, lr}
 800fbb2:	ed2d 8b02 	vpush	{d8}
 800fbb6:	ec55 4b10 	vmov	r4, r5, d0
 800fbba:	f000 f943 	bl	800fe44 <__ieee754_sqrt>
 800fbbe:	4622      	mov	r2, r4
 800fbc0:	462b      	mov	r3, r5
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	4629      	mov	r1, r5
 800fbc6:	eeb0 8a40 	vmov.f32	s16, s0
 800fbca:	eef0 8a60 	vmov.f32	s17, s1
 800fbce:	f7f0 ffb5 	bl	8000b3c <__aeabi_dcmpun>
 800fbd2:	b990      	cbnz	r0, 800fbfa <sqrt+0x4a>
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	4620      	mov	r0, r4
 800fbda:	4629      	mov	r1, r5
 800fbdc:	f7f0 ff86 	bl	8000aec <__aeabi_dcmplt>
 800fbe0:	b158      	cbz	r0, 800fbfa <sqrt+0x4a>
 800fbe2:	f7fc fbb3 	bl	800c34c <__errno>
 800fbe6:	2321      	movs	r3, #33	@ 0x21
 800fbe8:	6003      	str	r3, [r0, #0]
 800fbea:	2200      	movs	r2, #0
 800fbec:	2300      	movs	r3, #0
 800fbee:	4610      	mov	r0, r2
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	f7f0 fe33 	bl	800085c <__aeabi_ddiv>
 800fbf6:	ec41 0b18 	vmov	d8, r0, r1
 800fbfa:	eeb0 0a48 	vmov.f32	s0, s16
 800fbfe:	eef0 0a68 	vmov.f32	s1, s17
 800fc02:	ecbd 8b02 	vpop	{d8}
 800fc06:	bd38      	pop	{r3, r4, r5, pc}

0800fc08 <fabs>:
 800fc08:	ec51 0b10 	vmov	r0, r1, d0
 800fc0c:	4602      	mov	r2, r0
 800fc0e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fc12:	ec43 2b10 	vmov	d0, r2, r3
 800fc16:	4770      	bx	lr

0800fc18 <asinf>:
 800fc18:	b508      	push	{r3, lr}
 800fc1a:	ed2d 8b02 	vpush	{d8}
 800fc1e:	eeb0 8a40 	vmov.f32	s16, s0
 800fc22:	f001 fd19 	bl	8011658 <__ieee754_asinf>
 800fc26:	eeb4 8a48 	vcmp.f32	s16, s16
 800fc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2e:	eef0 8a40 	vmov.f32	s17, s0
 800fc32:	d615      	bvs.n	800fc60 <asinf+0x48>
 800fc34:	eeb0 0a48 	vmov.f32	s0, s16
 800fc38:	f000 f87e 	bl	800fd38 <fabsf>
 800fc3c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fc40:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc48:	dd0a      	ble.n	800fc60 <asinf+0x48>
 800fc4a:	f7fc fb7f 	bl	800c34c <__errno>
 800fc4e:	ecbd 8b02 	vpop	{d8}
 800fc52:	2321      	movs	r3, #33	@ 0x21
 800fc54:	6003      	str	r3, [r0, #0]
 800fc56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fc5a:	4804      	ldr	r0, [pc, #16]	@ (800fc6c <asinf+0x54>)
 800fc5c:	f7fc bba4 	b.w	800c3a8 <nanf>
 800fc60:	eeb0 0a68 	vmov.f32	s0, s17
 800fc64:	ecbd 8b02 	vpop	{d8}
 800fc68:	bd08      	pop	{r3, pc}
 800fc6a:	bf00      	nop
 800fc6c:	08012751 	.word	0x08012751

0800fc70 <atan2f>:
 800fc70:	f001 bdd6 	b.w	8011820 <__ieee754_atan2f>

0800fc74 <sqrtf>:
 800fc74:	b508      	push	{r3, lr}
 800fc76:	ed2d 8b02 	vpush	{d8}
 800fc7a:	eeb0 8a40 	vmov.f32	s16, s0
 800fc7e:	f000 f9b7 	bl	800fff0 <__ieee754_sqrtf>
 800fc82:	eeb4 8a48 	vcmp.f32	s16, s16
 800fc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc8a:	d60c      	bvs.n	800fca6 <sqrtf+0x32>
 800fc8c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800fcac <sqrtf+0x38>
 800fc90:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fc94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc98:	d505      	bpl.n	800fca6 <sqrtf+0x32>
 800fc9a:	f7fc fb57 	bl	800c34c <__errno>
 800fc9e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800fca2:	2321      	movs	r3, #33	@ 0x21
 800fca4:	6003      	str	r3, [r0, #0]
 800fca6:	ecbd 8b02 	vpop	{d8}
 800fcaa:	bd08      	pop	{r3, pc}
 800fcac:	00000000 	.word	0x00000000

0800fcb0 <cosf>:
 800fcb0:	ee10 3a10 	vmov	r3, s0
 800fcb4:	b507      	push	{r0, r1, r2, lr}
 800fcb6:	4a1e      	ldr	r2, [pc, #120]	@ (800fd30 <cosf+0x80>)
 800fcb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d806      	bhi.n	800fcce <cosf+0x1e>
 800fcc0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800fd34 <cosf+0x84>
 800fcc4:	b003      	add	sp, #12
 800fcc6:	f85d eb04 	ldr.w	lr, [sp], #4
 800fcca:	f001 bb45 	b.w	8011358 <__kernel_cosf>
 800fcce:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fcd2:	d304      	bcc.n	800fcde <cosf+0x2e>
 800fcd4:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fcd8:	b003      	add	sp, #12
 800fcda:	f85d fb04 	ldr.w	pc, [sp], #4
 800fcde:	4668      	mov	r0, sp
 800fce0:	f001 fe3e 	bl	8011960 <__ieee754_rem_pio2f>
 800fce4:	f000 0003 	and.w	r0, r0, #3
 800fce8:	2801      	cmp	r0, #1
 800fcea:	d009      	beq.n	800fd00 <cosf+0x50>
 800fcec:	2802      	cmp	r0, #2
 800fcee:	d010      	beq.n	800fd12 <cosf+0x62>
 800fcf0:	b9b0      	cbnz	r0, 800fd20 <cosf+0x70>
 800fcf2:	eddd 0a01 	vldr	s1, [sp, #4]
 800fcf6:	ed9d 0a00 	vldr	s0, [sp]
 800fcfa:	f001 fb2d 	bl	8011358 <__kernel_cosf>
 800fcfe:	e7eb      	b.n	800fcd8 <cosf+0x28>
 800fd00:	eddd 0a01 	vldr	s1, [sp, #4]
 800fd04:	ed9d 0a00 	vldr	s0, [sp]
 800fd08:	f001 fb7e 	bl	8011408 <__kernel_sinf>
 800fd0c:	eeb1 0a40 	vneg.f32	s0, s0
 800fd10:	e7e2      	b.n	800fcd8 <cosf+0x28>
 800fd12:	eddd 0a01 	vldr	s1, [sp, #4]
 800fd16:	ed9d 0a00 	vldr	s0, [sp]
 800fd1a:	f001 fb1d 	bl	8011358 <__kernel_cosf>
 800fd1e:	e7f5      	b.n	800fd0c <cosf+0x5c>
 800fd20:	eddd 0a01 	vldr	s1, [sp, #4]
 800fd24:	ed9d 0a00 	vldr	s0, [sp]
 800fd28:	2001      	movs	r0, #1
 800fd2a:	f001 fb6d 	bl	8011408 <__kernel_sinf>
 800fd2e:	e7d3      	b.n	800fcd8 <cosf+0x28>
 800fd30:	3f490fd8 	.word	0x3f490fd8
 800fd34:	00000000 	.word	0x00000000

0800fd38 <fabsf>:
 800fd38:	ee10 3a10 	vmov	r3, s0
 800fd3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fd40:	ee00 3a10 	vmov	s0, r3
 800fd44:	4770      	bx	lr
	...

0800fd48 <sinf>:
 800fd48:	ee10 3a10 	vmov	r3, s0
 800fd4c:	b507      	push	{r0, r1, r2, lr}
 800fd4e:	4a1f      	ldr	r2, [pc, #124]	@ (800fdcc <sinf+0x84>)
 800fd50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d807      	bhi.n	800fd68 <sinf+0x20>
 800fd58:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800fdd0 <sinf+0x88>
 800fd5c:	2000      	movs	r0, #0
 800fd5e:	b003      	add	sp, #12
 800fd60:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd64:	f001 bb50 	b.w	8011408 <__kernel_sinf>
 800fd68:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fd6c:	d304      	bcc.n	800fd78 <sinf+0x30>
 800fd6e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fd72:	b003      	add	sp, #12
 800fd74:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd78:	4668      	mov	r0, sp
 800fd7a:	f001 fdf1 	bl	8011960 <__ieee754_rem_pio2f>
 800fd7e:	f000 0003 	and.w	r0, r0, #3
 800fd82:	2801      	cmp	r0, #1
 800fd84:	d00a      	beq.n	800fd9c <sinf+0x54>
 800fd86:	2802      	cmp	r0, #2
 800fd88:	d00f      	beq.n	800fdaa <sinf+0x62>
 800fd8a:	b9c0      	cbnz	r0, 800fdbe <sinf+0x76>
 800fd8c:	eddd 0a01 	vldr	s1, [sp, #4]
 800fd90:	ed9d 0a00 	vldr	s0, [sp]
 800fd94:	2001      	movs	r0, #1
 800fd96:	f001 fb37 	bl	8011408 <__kernel_sinf>
 800fd9a:	e7ea      	b.n	800fd72 <sinf+0x2a>
 800fd9c:	eddd 0a01 	vldr	s1, [sp, #4]
 800fda0:	ed9d 0a00 	vldr	s0, [sp]
 800fda4:	f001 fad8 	bl	8011358 <__kernel_cosf>
 800fda8:	e7e3      	b.n	800fd72 <sinf+0x2a>
 800fdaa:	eddd 0a01 	vldr	s1, [sp, #4]
 800fdae:	ed9d 0a00 	vldr	s0, [sp]
 800fdb2:	2001      	movs	r0, #1
 800fdb4:	f001 fb28 	bl	8011408 <__kernel_sinf>
 800fdb8:	eeb1 0a40 	vneg.f32	s0, s0
 800fdbc:	e7d9      	b.n	800fd72 <sinf+0x2a>
 800fdbe:	eddd 0a01 	vldr	s1, [sp, #4]
 800fdc2:	ed9d 0a00 	vldr	s0, [sp]
 800fdc6:	f001 fac7 	bl	8011358 <__kernel_cosf>
 800fdca:	e7f5      	b.n	800fdb8 <sinf+0x70>
 800fdcc:	3f490fd8 	.word	0x3f490fd8
 800fdd0:	00000000 	.word	0x00000000

0800fdd4 <tanf>:
 800fdd4:	ee10 3a10 	vmov	r3, s0
 800fdd8:	b507      	push	{r0, r1, r2, lr}
 800fdda:	4a12      	ldr	r2, [pc, #72]	@ (800fe24 <tanf+0x50>)
 800fddc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d807      	bhi.n	800fdf4 <tanf+0x20>
 800fde4:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800fe28 <tanf+0x54>
 800fde8:	2001      	movs	r0, #1
 800fdea:	b003      	add	sp, #12
 800fdec:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdf0:	f001 bb52 	b.w	8011498 <__kernel_tanf>
 800fdf4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fdf8:	d304      	bcc.n	800fe04 <tanf+0x30>
 800fdfa:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fdfe:	b003      	add	sp, #12
 800fe00:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe04:	4668      	mov	r0, sp
 800fe06:	f001 fdab 	bl	8011960 <__ieee754_rem_pio2f>
 800fe0a:	0040      	lsls	r0, r0, #1
 800fe0c:	f000 0002 	and.w	r0, r0, #2
 800fe10:	eddd 0a01 	vldr	s1, [sp, #4]
 800fe14:	ed9d 0a00 	vldr	s0, [sp]
 800fe18:	f1c0 0001 	rsb	r0, r0, #1
 800fe1c:	f001 fb3c 	bl	8011498 <__kernel_tanf>
 800fe20:	e7ed      	b.n	800fdfe <tanf+0x2a>
 800fe22:	bf00      	nop
 800fe24:	3f490fda 	.word	0x3f490fda
 800fe28:	00000000 	.word	0x00000000

0800fe2c <finite>:
 800fe2c:	b082      	sub	sp, #8
 800fe2e:	ed8d 0b00 	vstr	d0, [sp]
 800fe32:	9801      	ldr	r0, [sp, #4]
 800fe34:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800fe38:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800fe3c:	0fc0      	lsrs	r0, r0, #31
 800fe3e:	b002      	add	sp, #8
 800fe40:	4770      	bx	lr
	...

0800fe44 <__ieee754_sqrt>:
 800fe44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe48:	4a66      	ldr	r2, [pc, #408]	@ (800ffe4 <__ieee754_sqrt+0x1a0>)
 800fe4a:	ec55 4b10 	vmov	r4, r5, d0
 800fe4e:	43aa      	bics	r2, r5
 800fe50:	462b      	mov	r3, r5
 800fe52:	4621      	mov	r1, r4
 800fe54:	d110      	bne.n	800fe78 <__ieee754_sqrt+0x34>
 800fe56:	4622      	mov	r2, r4
 800fe58:	4620      	mov	r0, r4
 800fe5a:	4629      	mov	r1, r5
 800fe5c:	f7f0 fbd4 	bl	8000608 <__aeabi_dmul>
 800fe60:	4602      	mov	r2, r0
 800fe62:	460b      	mov	r3, r1
 800fe64:	4620      	mov	r0, r4
 800fe66:	4629      	mov	r1, r5
 800fe68:	f7f0 fa18 	bl	800029c <__adddf3>
 800fe6c:	4604      	mov	r4, r0
 800fe6e:	460d      	mov	r5, r1
 800fe70:	ec45 4b10 	vmov	d0, r4, r5
 800fe74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe78:	2d00      	cmp	r5, #0
 800fe7a:	dc0e      	bgt.n	800fe9a <__ieee754_sqrt+0x56>
 800fe7c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fe80:	4322      	orrs	r2, r4
 800fe82:	d0f5      	beq.n	800fe70 <__ieee754_sqrt+0x2c>
 800fe84:	b19d      	cbz	r5, 800feae <__ieee754_sqrt+0x6a>
 800fe86:	4622      	mov	r2, r4
 800fe88:	4620      	mov	r0, r4
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	f7f0 fa04 	bl	8000298 <__aeabi_dsub>
 800fe90:	4602      	mov	r2, r0
 800fe92:	460b      	mov	r3, r1
 800fe94:	f7f0 fce2 	bl	800085c <__aeabi_ddiv>
 800fe98:	e7e8      	b.n	800fe6c <__ieee754_sqrt+0x28>
 800fe9a:	152a      	asrs	r2, r5, #20
 800fe9c:	d115      	bne.n	800feca <__ieee754_sqrt+0x86>
 800fe9e:	2000      	movs	r0, #0
 800fea0:	e009      	b.n	800feb6 <__ieee754_sqrt+0x72>
 800fea2:	0acb      	lsrs	r3, r1, #11
 800fea4:	3a15      	subs	r2, #21
 800fea6:	0549      	lsls	r1, r1, #21
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d0fa      	beq.n	800fea2 <__ieee754_sqrt+0x5e>
 800feac:	e7f7      	b.n	800fe9e <__ieee754_sqrt+0x5a>
 800feae:	462a      	mov	r2, r5
 800feb0:	e7fa      	b.n	800fea8 <__ieee754_sqrt+0x64>
 800feb2:	005b      	lsls	r3, r3, #1
 800feb4:	3001      	adds	r0, #1
 800feb6:	02dc      	lsls	r4, r3, #11
 800feb8:	d5fb      	bpl.n	800feb2 <__ieee754_sqrt+0x6e>
 800feba:	1e44      	subs	r4, r0, #1
 800febc:	1b12      	subs	r2, r2, r4
 800febe:	f1c0 0420 	rsb	r4, r0, #32
 800fec2:	fa21 f404 	lsr.w	r4, r1, r4
 800fec6:	4323      	orrs	r3, r4
 800fec8:	4081      	lsls	r1, r0
 800feca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fece:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800fed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fed6:	07d2      	lsls	r2, r2, #31
 800fed8:	bf5c      	itt	pl
 800feda:	005b      	lslpl	r3, r3, #1
 800fedc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fee0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fee4:	bf58      	it	pl
 800fee6:	0049      	lslpl	r1, r1, #1
 800fee8:	2600      	movs	r6, #0
 800feea:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800feee:	107f      	asrs	r7, r7, #1
 800fef0:	0049      	lsls	r1, r1, #1
 800fef2:	2016      	movs	r0, #22
 800fef4:	4632      	mov	r2, r6
 800fef6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fefa:	1915      	adds	r5, r2, r4
 800fefc:	429d      	cmp	r5, r3
 800fefe:	bfde      	ittt	le
 800ff00:	192a      	addle	r2, r5, r4
 800ff02:	1b5b      	suble	r3, r3, r5
 800ff04:	1936      	addle	r6, r6, r4
 800ff06:	0fcd      	lsrs	r5, r1, #31
 800ff08:	3801      	subs	r0, #1
 800ff0a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ff0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ff12:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ff16:	d1f0      	bne.n	800fefa <__ieee754_sqrt+0xb6>
 800ff18:	4605      	mov	r5, r0
 800ff1a:	2420      	movs	r4, #32
 800ff1c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ff20:	4293      	cmp	r3, r2
 800ff22:	eb0c 0e00 	add.w	lr, ip, r0
 800ff26:	dc02      	bgt.n	800ff2e <__ieee754_sqrt+0xea>
 800ff28:	d113      	bne.n	800ff52 <__ieee754_sqrt+0x10e>
 800ff2a:	458e      	cmp	lr, r1
 800ff2c:	d811      	bhi.n	800ff52 <__ieee754_sqrt+0x10e>
 800ff2e:	f1be 0f00 	cmp.w	lr, #0
 800ff32:	eb0e 000c 	add.w	r0, lr, ip
 800ff36:	da3f      	bge.n	800ffb8 <__ieee754_sqrt+0x174>
 800ff38:	2800      	cmp	r0, #0
 800ff3a:	db3d      	blt.n	800ffb8 <__ieee754_sqrt+0x174>
 800ff3c:	f102 0801 	add.w	r8, r2, #1
 800ff40:	1a9b      	subs	r3, r3, r2
 800ff42:	458e      	cmp	lr, r1
 800ff44:	bf88      	it	hi
 800ff46:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ff4a:	eba1 010e 	sub.w	r1, r1, lr
 800ff4e:	4465      	add	r5, ip
 800ff50:	4642      	mov	r2, r8
 800ff52:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ff56:	3c01      	subs	r4, #1
 800ff58:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ff5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ff60:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ff64:	d1dc      	bne.n	800ff20 <__ieee754_sqrt+0xdc>
 800ff66:	4319      	orrs	r1, r3
 800ff68:	d01b      	beq.n	800ffa2 <__ieee754_sqrt+0x15e>
 800ff6a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800ffe8 <__ieee754_sqrt+0x1a4>
 800ff6e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800ffec <__ieee754_sqrt+0x1a8>
 800ff72:	e9da 0100 	ldrd	r0, r1, [sl]
 800ff76:	e9db 2300 	ldrd	r2, r3, [fp]
 800ff7a:	f7f0 f98d 	bl	8000298 <__aeabi_dsub>
 800ff7e:	e9da 8900 	ldrd	r8, r9, [sl]
 800ff82:	4602      	mov	r2, r0
 800ff84:	460b      	mov	r3, r1
 800ff86:	4640      	mov	r0, r8
 800ff88:	4649      	mov	r1, r9
 800ff8a:	f7f0 fdb9 	bl	8000b00 <__aeabi_dcmple>
 800ff8e:	b140      	cbz	r0, 800ffa2 <__ieee754_sqrt+0x15e>
 800ff90:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ff94:	e9da 0100 	ldrd	r0, r1, [sl]
 800ff98:	e9db 2300 	ldrd	r2, r3, [fp]
 800ff9c:	d10e      	bne.n	800ffbc <__ieee754_sqrt+0x178>
 800ff9e:	3601      	adds	r6, #1
 800ffa0:	4625      	mov	r5, r4
 800ffa2:	1073      	asrs	r3, r6, #1
 800ffa4:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800ffa8:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800ffac:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800ffb0:	086b      	lsrs	r3, r5, #1
 800ffb2:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800ffb6:	e759      	b.n	800fe6c <__ieee754_sqrt+0x28>
 800ffb8:	4690      	mov	r8, r2
 800ffba:	e7c1      	b.n	800ff40 <__ieee754_sqrt+0xfc>
 800ffbc:	f7f0 f96e 	bl	800029c <__adddf3>
 800ffc0:	e9da 8900 	ldrd	r8, r9, [sl]
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	460b      	mov	r3, r1
 800ffc8:	4640      	mov	r0, r8
 800ffca:	4649      	mov	r1, r9
 800ffcc:	f7f0 fd8e 	bl	8000aec <__aeabi_dcmplt>
 800ffd0:	b120      	cbz	r0, 800ffdc <__ieee754_sqrt+0x198>
 800ffd2:	1cab      	adds	r3, r5, #2
 800ffd4:	bf08      	it	eq
 800ffd6:	3601      	addeq	r6, #1
 800ffd8:	3502      	adds	r5, #2
 800ffda:	e7e2      	b.n	800ffa2 <__ieee754_sqrt+0x15e>
 800ffdc:	1c6b      	adds	r3, r5, #1
 800ffde:	f023 0501 	bic.w	r5, r3, #1
 800ffe2:	e7de      	b.n	800ffa2 <__ieee754_sqrt+0x15e>
 800ffe4:	7ff00000 	.word	0x7ff00000
 800ffe8:	08012a10 	.word	0x08012a10
 800ffec:	08012a08 	.word	0x08012a08

0800fff0 <__ieee754_sqrtf>:
 800fff0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fff4:	4770      	bx	lr
	...

0800fff8 <__ieee754_asin>:
 800fff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fffc:	ec55 4b10 	vmov	r4, r5, d0
 8010000:	4bc7      	ldr	r3, [pc, #796]	@ (8010320 <__ieee754_asin+0x328>)
 8010002:	b087      	sub	sp, #28
 8010004:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8010008:	429e      	cmp	r6, r3
 801000a:	9501      	str	r5, [sp, #4]
 801000c:	d92d      	bls.n	801006a <__ieee754_asin+0x72>
 801000e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8010012:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8010016:	4326      	orrs	r6, r4
 8010018:	d116      	bne.n	8010048 <__ieee754_asin+0x50>
 801001a:	a3a7      	add	r3, pc, #668	@ (adr r3, 80102b8 <__ieee754_asin+0x2c0>)
 801001c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010020:	4620      	mov	r0, r4
 8010022:	4629      	mov	r1, r5
 8010024:	f7f0 faf0 	bl	8000608 <__aeabi_dmul>
 8010028:	a3a5      	add	r3, pc, #660	@ (adr r3, 80102c0 <__ieee754_asin+0x2c8>)
 801002a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002e:	4606      	mov	r6, r0
 8010030:	460f      	mov	r7, r1
 8010032:	4620      	mov	r0, r4
 8010034:	4629      	mov	r1, r5
 8010036:	f7f0 fae7 	bl	8000608 <__aeabi_dmul>
 801003a:	4602      	mov	r2, r0
 801003c:	460b      	mov	r3, r1
 801003e:	4630      	mov	r0, r6
 8010040:	4639      	mov	r1, r7
 8010042:	f7f0 f92b 	bl	800029c <__adddf3>
 8010046:	e009      	b.n	801005c <__ieee754_asin+0x64>
 8010048:	4622      	mov	r2, r4
 801004a:	462b      	mov	r3, r5
 801004c:	4620      	mov	r0, r4
 801004e:	4629      	mov	r1, r5
 8010050:	f7f0 f922 	bl	8000298 <__aeabi_dsub>
 8010054:	4602      	mov	r2, r0
 8010056:	460b      	mov	r3, r1
 8010058:	f7f0 fc00 	bl	800085c <__aeabi_ddiv>
 801005c:	4604      	mov	r4, r0
 801005e:	460d      	mov	r5, r1
 8010060:	ec45 4b10 	vmov	d0, r4, r5
 8010064:	b007      	add	sp, #28
 8010066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801006a:	4bae      	ldr	r3, [pc, #696]	@ (8010324 <__ieee754_asin+0x32c>)
 801006c:	429e      	cmp	r6, r3
 801006e:	d810      	bhi.n	8010092 <__ieee754_asin+0x9a>
 8010070:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8010074:	f080 80ad 	bcs.w	80101d2 <__ieee754_asin+0x1da>
 8010078:	a393      	add	r3, pc, #588	@ (adr r3, 80102c8 <__ieee754_asin+0x2d0>)
 801007a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007e:	4620      	mov	r0, r4
 8010080:	4629      	mov	r1, r5
 8010082:	f7f0 f90b 	bl	800029c <__adddf3>
 8010086:	4ba8      	ldr	r3, [pc, #672]	@ (8010328 <__ieee754_asin+0x330>)
 8010088:	2200      	movs	r2, #0
 801008a:	f7f0 fd4d 	bl	8000b28 <__aeabi_dcmpgt>
 801008e:	2800      	cmp	r0, #0
 8010090:	d1e6      	bne.n	8010060 <__ieee754_asin+0x68>
 8010092:	ec45 4b10 	vmov	d0, r4, r5
 8010096:	f7ff fdb7 	bl	800fc08 <fabs>
 801009a:	49a3      	ldr	r1, [pc, #652]	@ (8010328 <__ieee754_asin+0x330>)
 801009c:	ec53 2b10 	vmov	r2, r3, d0
 80100a0:	2000      	movs	r0, #0
 80100a2:	f7f0 f8f9 	bl	8000298 <__aeabi_dsub>
 80100a6:	4ba1      	ldr	r3, [pc, #644]	@ (801032c <__ieee754_asin+0x334>)
 80100a8:	2200      	movs	r2, #0
 80100aa:	f7f0 faad 	bl	8000608 <__aeabi_dmul>
 80100ae:	a388      	add	r3, pc, #544	@ (adr r3, 80102d0 <__ieee754_asin+0x2d8>)
 80100b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b4:	4604      	mov	r4, r0
 80100b6:	460d      	mov	r5, r1
 80100b8:	f7f0 faa6 	bl	8000608 <__aeabi_dmul>
 80100bc:	a386      	add	r3, pc, #536	@ (adr r3, 80102d8 <__ieee754_asin+0x2e0>)
 80100be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c2:	f7f0 f8eb 	bl	800029c <__adddf3>
 80100c6:	4622      	mov	r2, r4
 80100c8:	462b      	mov	r3, r5
 80100ca:	f7f0 fa9d 	bl	8000608 <__aeabi_dmul>
 80100ce:	a384      	add	r3, pc, #528	@ (adr r3, 80102e0 <__ieee754_asin+0x2e8>)
 80100d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d4:	f7f0 f8e0 	bl	8000298 <__aeabi_dsub>
 80100d8:	4622      	mov	r2, r4
 80100da:	462b      	mov	r3, r5
 80100dc:	f7f0 fa94 	bl	8000608 <__aeabi_dmul>
 80100e0:	a381      	add	r3, pc, #516	@ (adr r3, 80102e8 <__ieee754_asin+0x2f0>)
 80100e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e6:	f7f0 f8d9 	bl	800029c <__adddf3>
 80100ea:	4622      	mov	r2, r4
 80100ec:	462b      	mov	r3, r5
 80100ee:	f7f0 fa8b 	bl	8000608 <__aeabi_dmul>
 80100f2:	a37f      	add	r3, pc, #508	@ (adr r3, 80102f0 <__ieee754_asin+0x2f8>)
 80100f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f8:	f7f0 f8ce 	bl	8000298 <__aeabi_dsub>
 80100fc:	4622      	mov	r2, r4
 80100fe:	462b      	mov	r3, r5
 8010100:	f7f0 fa82 	bl	8000608 <__aeabi_dmul>
 8010104:	a37c      	add	r3, pc, #496	@ (adr r3, 80102f8 <__ieee754_asin+0x300>)
 8010106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010a:	f7f0 f8c7 	bl	800029c <__adddf3>
 801010e:	4622      	mov	r2, r4
 8010110:	462b      	mov	r3, r5
 8010112:	f7f0 fa79 	bl	8000608 <__aeabi_dmul>
 8010116:	a37a      	add	r3, pc, #488	@ (adr r3, 8010300 <__ieee754_asin+0x308>)
 8010118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010120:	4620      	mov	r0, r4
 8010122:	4629      	mov	r1, r5
 8010124:	f7f0 fa70 	bl	8000608 <__aeabi_dmul>
 8010128:	a377      	add	r3, pc, #476	@ (adr r3, 8010308 <__ieee754_asin+0x310>)
 801012a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012e:	f7f0 f8b3 	bl	8000298 <__aeabi_dsub>
 8010132:	4622      	mov	r2, r4
 8010134:	462b      	mov	r3, r5
 8010136:	f7f0 fa67 	bl	8000608 <__aeabi_dmul>
 801013a:	a375      	add	r3, pc, #468	@ (adr r3, 8010310 <__ieee754_asin+0x318>)
 801013c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010140:	f7f0 f8ac 	bl	800029c <__adddf3>
 8010144:	4622      	mov	r2, r4
 8010146:	462b      	mov	r3, r5
 8010148:	f7f0 fa5e 	bl	8000608 <__aeabi_dmul>
 801014c:	a372      	add	r3, pc, #456	@ (adr r3, 8010318 <__ieee754_asin+0x320>)
 801014e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010152:	f7f0 f8a1 	bl	8000298 <__aeabi_dsub>
 8010156:	4622      	mov	r2, r4
 8010158:	462b      	mov	r3, r5
 801015a:	f7f0 fa55 	bl	8000608 <__aeabi_dmul>
 801015e:	4b72      	ldr	r3, [pc, #456]	@ (8010328 <__ieee754_asin+0x330>)
 8010160:	2200      	movs	r2, #0
 8010162:	f7f0 f89b 	bl	800029c <__adddf3>
 8010166:	ec45 4b10 	vmov	d0, r4, r5
 801016a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801016e:	f7ff fe69 	bl	800fe44 <__ieee754_sqrt>
 8010172:	4b6f      	ldr	r3, [pc, #444]	@ (8010330 <__ieee754_asin+0x338>)
 8010174:	429e      	cmp	r6, r3
 8010176:	ec5b ab10 	vmov	sl, fp, d0
 801017a:	f240 80db 	bls.w	8010334 <__ieee754_asin+0x33c>
 801017e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010186:	f7f0 fb69 	bl	800085c <__aeabi_ddiv>
 801018a:	4652      	mov	r2, sl
 801018c:	465b      	mov	r3, fp
 801018e:	f7f0 fa3b 	bl	8000608 <__aeabi_dmul>
 8010192:	4652      	mov	r2, sl
 8010194:	465b      	mov	r3, fp
 8010196:	f7f0 f881 	bl	800029c <__adddf3>
 801019a:	4602      	mov	r2, r0
 801019c:	460b      	mov	r3, r1
 801019e:	f7f0 f87d 	bl	800029c <__adddf3>
 80101a2:	a347      	add	r3, pc, #284	@ (adr r3, 80102c0 <__ieee754_asin+0x2c8>)
 80101a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a8:	f7f0 f876 	bl	8000298 <__aeabi_dsub>
 80101ac:	4602      	mov	r2, r0
 80101ae:	460b      	mov	r3, r1
 80101b0:	a141      	add	r1, pc, #260	@ (adr r1, 80102b8 <__ieee754_asin+0x2c0>)
 80101b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101b6:	f7f0 f86f 	bl	8000298 <__aeabi_dsub>
 80101ba:	9b01      	ldr	r3, [sp, #4]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	bfdc      	itt	le
 80101c0:	4602      	movle	r2, r0
 80101c2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 80101c6:	4604      	mov	r4, r0
 80101c8:	460d      	mov	r5, r1
 80101ca:	bfdc      	itt	le
 80101cc:	4614      	movle	r4, r2
 80101ce:	461d      	movle	r5, r3
 80101d0:	e746      	b.n	8010060 <__ieee754_asin+0x68>
 80101d2:	4622      	mov	r2, r4
 80101d4:	462b      	mov	r3, r5
 80101d6:	4620      	mov	r0, r4
 80101d8:	4629      	mov	r1, r5
 80101da:	f7f0 fa15 	bl	8000608 <__aeabi_dmul>
 80101de:	a33c      	add	r3, pc, #240	@ (adr r3, 80102d0 <__ieee754_asin+0x2d8>)
 80101e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e4:	4606      	mov	r6, r0
 80101e6:	460f      	mov	r7, r1
 80101e8:	f7f0 fa0e 	bl	8000608 <__aeabi_dmul>
 80101ec:	a33a      	add	r3, pc, #232	@ (adr r3, 80102d8 <__ieee754_asin+0x2e0>)
 80101ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f2:	f7f0 f853 	bl	800029c <__adddf3>
 80101f6:	4632      	mov	r2, r6
 80101f8:	463b      	mov	r3, r7
 80101fa:	f7f0 fa05 	bl	8000608 <__aeabi_dmul>
 80101fe:	a338      	add	r3, pc, #224	@ (adr r3, 80102e0 <__ieee754_asin+0x2e8>)
 8010200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010204:	f7f0 f848 	bl	8000298 <__aeabi_dsub>
 8010208:	4632      	mov	r2, r6
 801020a:	463b      	mov	r3, r7
 801020c:	f7f0 f9fc 	bl	8000608 <__aeabi_dmul>
 8010210:	a335      	add	r3, pc, #212	@ (adr r3, 80102e8 <__ieee754_asin+0x2f0>)
 8010212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010216:	f7f0 f841 	bl	800029c <__adddf3>
 801021a:	4632      	mov	r2, r6
 801021c:	463b      	mov	r3, r7
 801021e:	f7f0 f9f3 	bl	8000608 <__aeabi_dmul>
 8010222:	a333      	add	r3, pc, #204	@ (adr r3, 80102f0 <__ieee754_asin+0x2f8>)
 8010224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010228:	f7f0 f836 	bl	8000298 <__aeabi_dsub>
 801022c:	4632      	mov	r2, r6
 801022e:	463b      	mov	r3, r7
 8010230:	f7f0 f9ea 	bl	8000608 <__aeabi_dmul>
 8010234:	a330      	add	r3, pc, #192	@ (adr r3, 80102f8 <__ieee754_asin+0x300>)
 8010236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023a:	f7f0 f82f 	bl	800029c <__adddf3>
 801023e:	4632      	mov	r2, r6
 8010240:	463b      	mov	r3, r7
 8010242:	f7f0 f9e1 	bl	8000608 <__aeabi_dmul>
 8010246:	a32e      	add	r3, pc, #184	@ (adr r3, 8010300 <__ieee754_asin+0x308>)
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	4680      	mov	r8, r0
 801024e:	4689      	mov	r9, r1
 8010250:	4630      	mov	r0, r6
 8010252:	4639      	mov	r1, r7
 8010254:	f7f0 f9d8 	bl	8000608 <__aeabi_dmul>
 8010258:	a32b      	add	r3, pc, #172	@ (adr r3, 8010308 <__ieee754_asin+0x310>)
 801025a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025e:	f7f0 f81b 	bl	8000298 <__aeabi_dsub>
 8010262:	4632      	mov	r2, r6
 8010264:	463b      	mov	r3, r7
 8010266:	f7f0 f9cf 	bl	8000608 <__aeabi_dmul>
 801026a:	a329      	add	r3, pc, #164	@ (adr r3, 8010310 <__ieee754_asin+0x318>)
 801026c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010270:	f7f0 f814 	bl	800029c <__adddf3>
 8010274:	4632      	mov	r2, r6
 8010276:	463b      	mov	r3, r7
 8010278:	f7f0 f9c6 	bl	8000608 <__aeabi_dmul>
 801027c:	a326      	add	r3, pc, #152	@ (adr r3, 8010318 <__ieee754_asin+0x320>)
 801027e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010282:	f7f0 f809 	bl	8000298 <__aeabi_dsub>
 8010286:	4632      	mov	r2, r6
 8010288:	463b      	mov	r3, r7
 801028a:	f7f0 f9bd 	bl	8000608 <__aeabi_dmul>
 801028e:	4b26      	ldr	r3, [pc, #152]	@ (8010328 <__ieee754_asin+0x330>)
 8010290:	2200      	movs	r2, #0
 8010292:	f7f0 f803 	bl	800029c <__adddf3>
 8010296:	4602      	mov	r2, r0
 8010298:	460b      	mov	r3, r1
 801029a:	4640      	mov	r0, r8
 801029c:	4649      	mov	r1, r9
 801029e:	f7f0 fadd 	bl	800085c <__aeabi_ddiv>
 80102a2:	4622      	mov	r2, r4
 80102a4:	462b      	mov	r3, r5
 80102a6:	f7f0 f9af 	bl	8000608 <__aeabi_dmul>
 80102aa:	4602      	mov	r2, r0
 80102ac:	460b      	mov	r3, r1
 80102ae:	4620      	mov	r0, r4
 80102b0:	4629      	mov	r1, r5
 80102b2:	e6c6      	b.n	8010042 <__ieee754_asin+0x4a>
 80102b4:	f3af 8000 	nop.w
 80102b8:	54442d18 	.word	0x54442d18
 80102bc:	3ff921fb 	.word	0x3ff921fb
 80102c0:	33145c07 	.word	0x33145c07
 80102c4:	3c91a626 	.word	0x3c91a626
 80102c8:	8800759c 	.word	0x8800759c
 80102cc:	7e37e43c 	.word	0x7e37e43c
 80102d0:	0dfdf709 	.word	0x0dfdf709
 80102d4:	3f023de1 	.word	0x3f023de1
 80102d8:	7501b288 	.word	0x7501b288
 80102dc:	3f49efe0 	.word	0x3f49efe0
 80102e0:	b5688f3b 	.word	0xb5688f3b
 80102e4:	3fa48228 	.word	0x3fa48228
 80102e8:	0e884455 	.word	0x0e884455
 80102ec:	3fc9c155 	.word	0x3fc9c155
 80102f0:	03eb6f7d 	.word	0x03eb6f7d
 80102f4:	3fd4d612 	.word	0x3fd4d612
 80102f8:	55555555 	.word	0x55555555
 80102fc:	3fc55555 	.word	0x3fc55555
 8010300:	b12e9282 	.word	0xb12e9282
 8010304:	3fb3b8c5 	.word	0x3fb3b8c5
 8010308:	1b8d0159 	.word	0x1b8d0159
 801030c:	3fe6066c 	.word	0x3fe6066c
 8010310:	9c598ac8 	.word	0x9c598ac8
 8010314:	40002ae5 	.word	0x40002ae5
 8010318:	1c8a2d4b 	.word	0x1c8a2d4b
 801031c:	40033a27 	.word	0x40033a27
 8010320:	3fefffff 	.word	0x3fefffff
 8010324:	3fdfffff 	.word	0x3fdfffff
 8010328:	3ff00000 	.word	0x3ff00000
 801032c:	3fe00000 	.word	0x3fe00000
 8010330:	3fef3332 	.word	0x3fef3332
 8010334:	4652      	mov	r2, sl
 8010336:	465b      	mov	r3, fp
 8010338:	4650      	mov	r0, sl
 801033a:	4659      	mov	r1, fp
 801033c:	f7ef ffae 	bl	800029c <__adddf3>
 8010340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010344:	4606      	mov	r6, r0
 8010346:	460f      	mov	r7, r1
 8010348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801034c:	f7f0 fa86 	bl	800085c <__aeabi_ddiv>
 8010350:	4602      	mov	r2, r0
 8010352:	460b      	mov	r3, r1
 8010354:	4630      	mov	r0, r6
 8010356:	4639      	mov	r1, r7
 8010358:	f7f0 f956 	bl	8000608 <__aeabi_dmul>
 801035c:	f04f 0800 	mov.w	r8, #0
 8010360:	4606      	mov	r6, r0
 8010362:	460f      	mov	r7, r1
 8010364:	4642      	mov	r2, r8
 8010366:	465b      	mov	r3, fp
 8010368:	4640      	mov	r0, r8
 801036a:	4659      	mov	r1, fp
 801036c:	f7f0 f94c 	bl	8000608 <__aeabi_dmul>
 8010370:	4602      	mov	r2, r0
 8010372:	460b      	mov	r3, r1
 8010374:	4620      	mov	r0, r4
 8010376:	4629      	mov	r1, r5
 8010378:	f7ef ff8e 	bl	8000298 <__aeabi_dsub>
 801037c:	4642      	mov	r2, r8
 801037e:	4604      	mov	r4, r0
 8010380:	460d      	mov	r5, r1
 8010382:	465b      	mov	r3, fp
 8010384:	4650      	mov	r0, sl
 8010386:	4659      	mov	r1, fp
 8010388:	f7ef ff88 	bl	800029c <__adddf3>
 801038c:	4602      	mov	r2, r0
 801038e:	460b      	mov	r3, r1
 8010390:	4620      	mov	r0, r4
 8010392:	4629      	mov	r1, r5
 8010394:	f7f0 fa62 	bl	800085c <__aeabi_ddiv>
 8010398:	4602      	mov	r2, r0
 801039a:	460b      	mov	r3, r1
 801039c:	f7ef ff7e 	bl	800029c <__adddf3>
 80103a0:	4602      	mov	r2, r0
 80103a2:	460b      	mov	r3, r1
 80103a4:	a112      	add	r1, pc, #72	@ (adr r1, 80103f0 <__ieee754_asin+0x3f8>)
 80103a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103aa:	f7ef ff75 	bl	8000298 <__aeabi_dsub>
 80103ae:	4602      	mov	r2, r0
 80103b0:	460b      	mov	r3, r1
 80103b2:	4630      	mov	r0, r6
 80103b4:	4639      	mov	r1, r7
 80103b6:	f7ef ff6f 	bl	8000298 <__aeabi_dsub>
 80103ba:	4642      	mov	r2, r8
 80103bc:	4604      	mov	r4, r0
 80103be:	460d      	mov	r5, r1
 80103c0:	465b      	mov	r3, fp
 80103c2:	4640      	mov	r0, r8
 80103c4:	4659      	mov	r1, fp
 80103c6:	f7ef ff69 	bl	800029c <__adddf3>
 80103ca:	4602      	mov	r2, r0
 80103cc:	460b      	mov	r3, r1
 80103ce:	a10a      	add	r1, pc, #40	@ (adr r1, 80103f8 <__ieee754_asin+0x400>)
 80103d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103d4:	f7ef ff60 	bl	8000298 <__aeabi_dsub>
 80103d8:	4602      	mov	r2, r0
 80103da:	460b      	mov	r3, r1
 80103dc:	4620      	mov	r0, r4
 80103de:	4629      	mov	r1, r5
 80103e0:	f7ef ff5a 	bl	8000298 <__aeabi_dsub>
 80103e4:	4602      	mov	r2, r0
 80103e6:	460b      	mov	r3, r1
 80103e8:	a103      	add	r1, pc, #12	@ (adr r1, 80103f8 <__ieee754_asin+0x400>)
 80103ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103ee:	e6e2      	b.n	80101b6 <__ieee754_asin+0x1be>
 80103f0:	33145c07 	.word	0x33145c07
 80103f4:	3c91a626 	.word	0x3c91a626
 80103f8:	54442d18 	.word	0x54442d18
 80103fc:	3fe921fb 	.word	0x3fe921fb

08010400 <__ieee754_atan2>:
 8010400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010404:	ec57 6b11 	vmov	r6, r7, d1
 8010408:	4273      	negs	r3, r6
 801040a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8010588 <__ieee754_atan2+0x188>
 801040e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8010412:	4333      	orrs	r3, r6
 8010414:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010418:	4543      	cmp	r3, r8
 801041a:	ec51 0b10 	vmov	r0, r1, d0
 801041e:	4635      	mov	r5, r6
 8010420:	d809      	bhi.n	8010436 <__ieee754_atan2+0x36>
 8010422:	4244      	negs	r4, r0
 8010424:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010428:	4304      	orrs	r4, r0
 801042a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801042e:	4544      	cmp	r4, r8
 8010430:	468e      	mov	lr, r1
 8010432:	4681      	mov	r9, r0
 8010434:	d907      	bls.n	8010446 <__ieee754_atan2+0x46>
 8010436:	4632      	mov	r2, r6
 8010438:	463b      	mov	r3, r7
 801043a:	f7ef ff2f 	bl	800029c <__adddf3>
 801043e:	ec41 0b10 	vmov	d0, r0, r1
 8010442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010446:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801044a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801044e:	4334      	orrs	r4, r6
 8010450:	d103      	bne.n	801045a <__ieee754_atan2+0x5a>
 8010452:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010456:	f000 bde7 	b.w	8011028 <atan>
 801045a:	17bc      	asrs	r4, r7, #30
 801045c:	f004 0402 	and.w	r4, r4, #2
 8010460:	ea53 0909 	orrs.w	r9, r3, r9
 8010464:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010468:	d107      	bne.n	801047a <__ieee754_atan2+0x7a>
 801046a:	2c02      	cmp	r4, #2
 801046c:	d05f      	beq.n	801052e <__ieee754_atan2+0x12e>
 801046e:	2c03      	cmp	r4, #3
 8010470:	d1e5      	bne.n	801043e <__ieee754_atan2+0x3e>
 8010472:	a143      	add	r1, pc, #268	@ (adr r1, 8010580 <__ieee754_atan2+0x180>)
 8010474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010478:	e7e1      	b.n	801043e <__ieee754_atan2+0x3e>
 801047a:	4315      	orrs	r5, r2
 801047c:	d106      	bne.n	801048c <__ieee754_atan2+0x8c>
 801047e:	f1be 0f00 	cmp.w	lr, #0
 8010482:	db5f      	blt.n	8010544 <__ieee754_atan2+0x144>
 8010484:	a136      	add	r1, pc, #216	@ (adr r1, 8010560 <__ieee754_atan2+0x160>)
 8010486:	e9d1 0100 	ldrd	r0, r1, [r1]
 801048a:	e7d8      	b.n	801043e <__ieee754_atan2+0x3e>
 801048c:	4542      	cmp	r2, r8
 801048e:	d10f      	bne.n	80104b0 <__ieee754_atan2+0xb0>
 8010490:	4293      	cmp	r3, r2
 8010492:	f104 34ff 	add.w	r4, r4, #4294967295
 8010496:	d107      	bne.n	80104a8 <__ieee754_atan2+0xa8>
 8010498:	2c02      	cmp	r4, #2
 801049a:	d84c      	bhi.n	8010536 <__ieee754_atan2+0x136>
 801049c:	4b36      	ldr	r3, [pc, #216]	@ (8010578 <__ieee754_atan2+0x178>)
 801049e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80104a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80104a6:	e7ca      	b.n	801043e <__ieee754_atan2+0x3e>
 80104a8:	2c02      	cmp	r4, #2
 80104aa:	d848      	bhi.n	801053e <__ieee754_atan2+0x13e>
 80104ac:	4b33      	ldr	r3, [pc, #204]	@ (801057c <__ieee754_atan2+0x17c>)
 80104ae:	e7f6      	b.n	801049e <__ieee754_atan2+0x9e>
 80104b0:	4543      	cmp	r3, r8
 80104b2:	d0e4      	beq.n	801047e <__ieee754_atan2+0x7e>
 80104b4:	1a9b      	subs	r3, r3, r2
 80104b6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80104ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80104be:	da1e      	bge.n	80104fe <__ieee754_atan2+0xfe>
 80104c0:	2f00      	cmp	r7, #0
 80104c2:	da01      	bge.n	80104c8 <__ieee754_atan2+0xc8>
 80104c4:	323c      	adds	r2, #60	@ 0x3c
 80104c6:	db1e      	blt.n	8010506 <__ieee754_atan2+0x106>
 80104c8:	4632      	mov	r2, r6
 80104ca:	463b      	mov	r3, r7
 80104cc:	f7f0 f9c6 	bl	800085c <__aeabi_ddiv>
 80104d0:	ec41 0b10 	vmov	d0, r0, r1
 80104d4:	f7ff fb98 	bl	800fc08 <fabs>
 80104d8:	f000 fda6 	bl	8011028 <atan>
 80104dc:	ec51 0b10 	vmov	r0, r1, d0
 80104e0:	2c01      	cmp	r4, #1
 80104e2:	d013      	beq.n	801050c <__ieee754_atan2+0x10c>
 80104e4:	2c02      	cmp	r4, #2
 80104e6:	d015      	beq.n	8010514 <__ieee754_atan2+0x114>
 80104e8:	2c00      	cmp	r4, #0
 80104ea:	d0a8      	beq.n	801043e <__ieee754_atan2+0x3e>
 80104ec:	a318      	add	r3, pc, #96	@ (adr r3, 8010550 <__ieee754_atan2+0x150>)
 80104ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f2:	f7ef fed1 	bl	8000298 <__aeabi_dsub>
 80104f6:	a318      	add	r3, pc, #96	@ (adr r3, 8010558 <__ieee754_atan2+0x158>)
 80104f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104fc:	e014      	b.n	8010528 <__ieee754_atan2+0x128>
 80104fe:	a118      	add	r1, pc, #96	@ (adr r1, 8010560 <__ieee754_atan2+0x160>)
 8010500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010504:	e7ec      	b.n	80104e0 <__ieee754_atan2+0xe0>
 8010506:	2000      	movs	r0, #0
 8010508:	2100      	movs	r1, #0
 801050a:	e7e9      	b.n	80104e0 <__ieee754_atan2+0xe0>
 801050c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010510:	4619      	mov	r1, r3
 8010512:	e794      	b.n	801043e <__ieee754_atan2+0x3e>
 8010514:	a30e      	add	r3, pc, #56	@ (adr r3, 8010550 <__ieee754_atan2+0x150>)
 8010516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051a:	f7ef febd 	bl	8000298 <__aeabi_dsub>
 801051e:	4602      	mov	r2, r0
 8010520:	460b      	mov	r3, r1
 8010522:	a10d      	add	r1, pc, #52	@ (adr r1, 8010558 <__ieee754_atan2+0x158>)
 8010524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010528:	f7ef feb6 	bl	8000298 <__aeabi_dsub>
 801052c:	e787      	b.n	801043e <__ieee754_atan2+0x3e>
 801052e:	a10a      	add	r1, pc, #40	@ (adr r1, 8010558 <__ieee754_atan2+0x158>)
 8010530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010534:	e783      	b.n	801043e <__ieee754_atan2+0x3e>
 8010536:	a10c      	add	r1, pc, #48	@ (adr r1, 8010568 <__ieee754_atan2+0x168>)
 8010538:	e9d1 0100 	ldrd	r0, r1, [r1]
 801053c:	e77f      	b.n	801043e <__ieee754_atan2+0x3e>
 801053e:	2000      	movs	r0, #0
 8010540:	2100      	movs	r1, #0
 8010542:	e77c      	b.n	801043e <__ieee754_atan2+0x3e>
 8010544:	a10a      	add	r1, pc, #40	@ (adr r1, 8010570 <__ieee754_atan2+0x170>)
 8010546:	e9d1 0100 	ldrd	r0, r1, [r1]
 801054a:	e778      	b.n	801043e <__ieee754_atan2+0x3e>
 801054c:	f3af 8000 	nop.w
 8010550:	33145c07 	.word	0x33145c07
 8010554:	3ca1a626 	.word	0x3ca1a626
 8010558:	54442d18 	.word	0x54442d18
 801055c:	400921fb 	.word	0x400921fb
 8010560:	54442d18 	.word	0x54442d18
 8010564:	3ff921fb 	.word	0x3ff921fb
 8010568:	54442d18 	.word	0x54442d18
 801056c:	3fe921fb 	.word	0x3fe921fb
 8010570:	54442d18 	.word	0x54442d18
 8010574:	bff921fb 	.word	0xbff921fb
 8010578:	08012a30 	.word	0x08012a30
 801057c:	08012a18 	.word	0x08012a18
 8010580:	54442d18 	.word	0x54442d18
 8010584:	c00921fb 	.word	0xc00921fb
 8010588:	7ff00000 	.word	0x7ff00000
 801058c:	00000000 	.word	0x00000000

08010590 <__ieee754_pow>:
 8010590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010594:	b091      	sub	sp, #68	@ 0x44
 8010596:	ed8d 1b00 	vstr	d1, [sp]
 801059a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801059e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80105a2:	ea5a 0001 	orrs.w	r0, sl, r1
 80105a6:	ec57 6b10 	vmov	r6, r7, d0
 80105aa:	d113      	bne.n	80105d4 <__ieee754_pow+0x44>
 80105ac:	19b3      	adds	r3, r6, r6
 80105ae:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80105b2:	4152      	adcs	r2, r2
 80105b4:	4298      	cmp	r0, r3
 80105b6:	4b9a      	ldr	r3, [pc, #616]	@ (8010820 <__ieee754_pow+0x290>)
 80105b8:	4193      	sbcs	r3, r2
 80105ba:	f080 84ee 	bcs.w	8010f9a <__ieee754_pow+0xa0a>
 80105be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105c2:	4630      	mov	r0, r6
 80105c4:	4639      	mov	r1, r7
 80105c6:	f7ef fe69 	bl	800029c <__adddf3>
 80105ca:	ec41 0b10 	vmov	d0, r0, r1
 80105ce:	b011      	add	sp, #68	@ 0x44
 80105d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d4:	4a93      	ldr	r2, [pc, #588]	@ (8010824 <__ieee754_pow+0x294>)
 80105d6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80105da:	4295      	cmp	r5, r2
 80105dc:	46b8      	mov	r8, r7
 80105de:	4633      	mov	r3, r6
 80105e0:	d80a      	bhi.n	80105f8 <__ieee754_pow+0x68>
 80105e2:	d104      	bne.n	80105ee <__ieee754_pow+0x5e>
 80105e4:	2e00      	cmp	r6, #0
 80105e6:	d1ea      	bne.n	80105be <__ieee754_pow+0x2e>
 80105e8:	45aa      	cmp	sl, r5
 80105ea:	d8e8      	bhi.n	80105be <__ieee754_pow+0x2e>
 80105ec:	e001      	b.n	80105f2 <__ieee754_pow+0x62>
 80105ee:	4592      	cmp	sl, r2
 80105f0:	d802      	bhi.n	80105f8 <__ieee754_pow+0x68>
 80105f2:	4592      	cmp	sl, r2
 80105f4:	d10f      	bne.n	8010616 <__ieee754_pow+0x86>
 80105f6:	b171      	cbz	r1, 8010616 <__ieee754_pow+0x86>
 80105f8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80105fc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8010600:	ea58 0803 	orrs.w	r8, r8, r3
 8010604:	d1db      	bne.n	80105be <__ieee754_pow+0x2e>
 8010606:	e9dd 3200 	ldrd	r3, r2, [sp]
 801060a:	18db      	adds	r3, r3, r3
 801060c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8010610:	4152      	adcs	r2, r2
 8010612:	4598      	cmp	r8, r3
 8010614:	e7cf      	b.n	80105b6 <__ieee754_pow+0x26>
 8010616:	f1b8 0f00 	cmp.w	r8, #0
 801061a:	46ab      	mov	fp, r5
 801061c:	da43      	bge.n	80106a6 <__ieee754_pow+0x116>
 801061e:	4a82      	ldr	r2, [pc, #520]	@ (8010828 <__ieee754_pow+0x298>)
 8010620:	4592      	cmp	sl, r2
 8010622:	d856      	bhi.n	80106d2 <__ieee754_pow+0x142>
 8010624:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8010628:	4592      	cmp	sl, r2
 801062a:	f240 84c5 	bls.w	8010fb8 <__ieee754_pow+0xa28>
 801062e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8010632:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010636:	2a14      	cmp	r2, #20
 8010638:	dd18      	ble.n	801066c <__ieee754_pow+0xdc>
 801063a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801063e:	fa21 f402 	lsr.w	r4, r1, r2
 8010642:	fa04 f202 	lsl.w	r2, r4, r2
 8010646:	428a      	cmp	r2, r1
 8010648:	f040 84b6 	bne.w	8010fb8 <__ieee754_pow+0xa28>
 801064c:	f004 0401 	and.w	r4, r4, #1
 8010650:	f1c4 0402 	rsb	r4, r4, #2
 8010654:	2900      	cmp	r1, #0
 8010656:	d159      	bne.n	801070c <__ieee754_pow+0x17c>
 8010658:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801065c:	d148      	bne.n	80106f0 <__ieee754_pow+0x160>
 801065e:	4632      	mov	r2, r6
 8010660:	463b      	mov	r3, r7
 8010662:	4630      	mov	r0, r6
 8010664:	4639      	mov	r1, r7
 8010666:	f7ef ffcf 	bl	8000608 <__aeabi_dmul>
 801066a:	e7ae      	b.n	80105ca <__ieee754_pow+0x3a>
 801066c:	2900      	cmp	r1, #0
 801066e:	d14c      	bne.n	801070a <__ieee754_pow+0x17a>
 8010670:	f1c2 0214 	rsb	r2, r2, #20
 8010674:	fa4a f402 	asr.w	r4, sl, r2
 8010678:	fa04 f202 	lsl.w	r2, r4, r2
 801067c:	4552      	cmp	r2, sl
 801067e:	f040 8498 	bne.w	8010fb2 <__ieee754_pow+0xa22>
 8010682:	f004 0401 	and.w	r4, r4, #1
 8010686:	f1c4 0402 	rsb	r4, r4, #2
 801068a:	4a68      	ldr	r2, [pc, #416]	@ (801082c <__ieee754_pow+0x29c>)
 801068c:	4592      	cmp	sl, r2
 801068e:	d1e3      	bne.n	8010658 <__ieee754_pow+0xc8>
 8010690:	f1b9 0f00 	cmp.w	r9, #0
 8010694:	f280 8489 	bge.w	8010faa <__ieee754_pow+0xa1a>
 8010698:	4964      	ldr	r1, [pc, #400]	@ (801082c <__ieee754_pow+0x29c>)
 801069a:	4632      	mov	r2, r6
 801069c:	463b      	mov	r3, r7
 801069e:	2000      	movs	r0, #0
 80106a0:	f7f0 f8dc 	bl	800085c <__aeabi_ddiv>
 80106a4:	e791      	b.n	80105ca <__ieee754_pow+0x3a>
 80106a6:	2400      	movs	r4, #0
 80106a8:	bb81      	cbnz	r1, 801070c <__ieee754_pow+0x17c>
 80106aa:	4a5e      	ldr	r2, [pc, #376]	@ (8010824 <__ieee754_pow+0x294>)
 80106ac:	4592      	cmp	sl, r2
 80106ae:	d1ec      	bne.n	801068a <__ieee754_pow+0xfa>
 80106b0:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80106b4:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80106b8:	431a      	orrs	r2, r3
 80106ba:	f000 846e 	beq.w	8010f9a <__ieee754_pow+0xa0a>
 80106be:	4b5c      	ldr	r3, [pc, #368]	@ (8010830 <__ieee754_pow+0x2a0>)
 80106c0:	429d      	cmp	r5, r3
 80106c2:	d908      	bls.n	80106d6 <__ieee754_pow+0x146>
 80106c4:	f1b9 0f00 	cmp.w	r9, #0
 80106c8:	f280 846b 	bge.w	8010fa2 <__ieee754_pow+0xa12>
 80106cc:	2000      	movs	r0, #0
 80106ce:	2100      	movs	r1, #0
 80106d0:	e77b      	b.n	80105ca <__ieee754_pow+0x3a>
 80106d2:	2402      	movs	r4, #2
 80106d4:	e7e8      	b.n	80106a8 <__ieee754_pow+0x118>
 80106d6:	f1b9 0f00 	cmp.w	r9, #0
 80106da:	f04f 0000 	mov.w	r0, #0
 80106de:	f04f 0100 	mov.w	r1, #0
 80106e2:	f6bf af72 	bge.w	80105ca <__ieee754_pow+0x3a>
 80106e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80106ea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80106ee:	e76c      	b.n	80105ca <__ieee754_pow+0x3a>
 80106f0:	4a50      	ldr	r2, [pc, #320]	@ (8010834 <__ieee754_pow+0x2a4>)
 80106f2:	4591      	cmp	r9, r2
 80106f4:	d10a      	bne.n	801070c <__ieee754_pow+0x17c>
 80106f6:	f1b8 0f00 	cmp.w	r8, #0
 80106fa:	db07      	blt.n	801070c <__ieee754_pow+0x17c>
 80106fc:	ec47 6b10 	vmov	d0, r6, r7
 8010700:	b011      	add	sp, #68	@ 0x44
 8010702:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010706:	f7ff bb9d 	b.w	800fe44 <__ieee754_sqrt>
 801070a:	2400      	movs	r4, #0
 801070c:	ec47 6b10 	vmov	d0, r6, r7
 8010710:	9302      	str	r3, [sp, #8]
 8010712:	f7ff fa79 	bl	800fc08 <fabs>
 8010716:	9b02      	ldr	r3, [sp, #8]
 8010718:	ec51 0b10 	vmov	r0, r1, d0
 801071c:	bb43      	cbnz	r3, 8010770 <__ieee754_pow+0x1e0>
 801071e:	4b43      	ldr	r3, [pc, #268]	@ (801082c <__ieee754_pow+0x29c>)
 8010720:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8010724:	429a      	cmp	r2, r3
 8010726:	d000      	beq.n	801072a <__ieee754_pow+0x19a>
 8010728:	bb15      	cbnz	r5, 8010770 <__ieee754_pow+0x1e0>
 801072a:	f1b9 0f00 	cmp.w	r9, #0
 801072e:	da05      	bge.n	801073c <__ieee754_pow+0x1ac>
 8010730:	4602      	mov	r2, r0
 8010732:	460b      	mov	r3, r1
 8010734:	2000      	movs	r0, #0
 8010736:	493d      	ldr	r1, [pc, #244]	@ (801082c <__ieee754_pow+0x29c>)
 8010738:	f7f0 f890 	bl	800085c <__aeabi_ddiv>
 801073c:	f1b8 0f00 	cmp.w	r8, #0
 8010740:	f6bf af43 	bge.w	80105ca <__ieee754_pow+0x3a>
 8010744:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8010748:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801074c:	4325      	orrs	r5, r4
 801074e:	d108      	bne.n	8010762 <__ieee754_pow+0x1d2>
 8010750:	4602      	mov	r2, r0
 8010752:	460b      	mov	r3, r1
 8010754:	4610      	mov	r0, r2
 8010756:	4619      	mov	r1, r3
 8010758:	f7ef fd9e 	bl	8000298 <__aeabi_dsub>
 801075c:	4602      	mov	r2, r0
 801075e:	460b      	mov	r3, r1
 8010760:	e79e      	b.n	80106a0 <__ieee754_pow+0x110>
 8010762:	2c01      	cmp	r4, #1
 8010764:	f47f af31 	bne.w	80105ca <__ieee754_pow+0x3a>
 8010768:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801076c:	4619      	mov	r1, r3
 801076e:	e72c      	b.n	80105ca <__ieee754_pow+0x3a>
 8010770:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8010774:	3b01      	subs	r3, #1
 8010776:	ea53 0204 	orrs.w	r2, r3, r4
 801077a:	d102      	bne.n	8010782 <__ieee754_pow+0x1f2>
 801077c:	4632      	mov	r2, r6
 801077e:	463b      	mov	r3, r7
 8010780:	e7e8      	b.n	8010754 <__ieee754_pow+0x1c4>
 8010782:	3c01      	subs	r4, #1
 8010784:	431c      	orrs	r4, r3
 8010786:	d016      	beq.n	80107b6 <__ieee754_pow+0x226>
 8010788:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010810 <__ieee754_pow+0x280>
 801078c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8010790:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010794:	f240 8110 	bls.w	80109b8 <__ieee754_pow+0x428>
 8010798:	4b27      	ldr	r3, [pc, #156]	@ (8010838 <__ieee754_pow+0x2a8>)
 801079a:	459a      	cmp	sl, r3
 801079c:	4b24      	ldr	r3, [pc, #144]	@ (8010830 <__ieee754_pow+0x2a0>)
 801079e:	d916      	bls.n	80107ce <__ieee754_pow+0x23e>
 80107a0:	429d      	cmp	r5, r3
 80107a2:	d80b      	bhi.n	80107bc <__ieee754_pow+0x22c>
 80107a4:	f1b9 0f00 	cmp.w	r9, #0
 80107a8:	da0b      	bge.n	80107c2 <__ieee754_pow+0x232>
 80107aa:	2000      	movs	r0, #0
 80107ac:	b011      	add	sp, #68	@ 0x44
 80107ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b2:	f001 bb89 	b.w	8011ec8 <__math_oflow>
 80107b6:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8010818 <__ieee754_pow+0x288>
 80107ba:	e7e7      	b.n	801078c <__ieee754_pow+0x1fc>
 80107bc:	f1b9 0f00 	cmp.w	r9, #0
 80107c0:	dcf3      	bgt.n	80107aa <__ieee754_pow+0x21a>
 80107c2:	2000      	movs	r0, #0
 80107c4:	b011      	add	sp, #68	@ 0x44
 80107c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ca:	f001 bb75 	b.w	8011eb8 <__math_uflow>
 80107ce:	429d      	cmp	r5, r3
 80107d0:	d20c      	bcs.n	80107ec <__ieee754_pow+0x25c>
 80107d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107d6:	2200      	movs	r2, #0
 80107d8:	2300      	movs	r3, #0
 80107da:	f7f0 f987 	bl	8000aec <__aeabi_dcmplt>
 80107de:	3800      	subs	r0, #0
 80107e0:	bf18      	it	ne
 80107e2:	2001      	movne	r0, #1
 80107e4:	f1b9 0f00 	cmp.w	r9, #0
 80107e8:	daec      	bge.n	80107c4 <__ieee754_pow+0x234>
 80107ea:	e7df      	b.n	80107ac <__ieee754_pow+0x21c>
 80107ec:	4b0f      	ldr	r3, [pc, #60]	@ (801082c <__ieee754_pow+0x29c>)
 80107ee:	429d      	cmp	r5, r3
 80107f0:	f04f 0200 	mov.w	r2, #0
 80107f4:	d922      	bls.n	801083c <__ieee754_pow+0x2ac>
 80107f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107fa:	2300      	movs	r3, #0
 80107fc:	f7f0 f976 	bl	8000aec <__aeabi_dcmplt>
 8010800:	3800      	subs	r0, #0
 8010802:	bf18      	it	ne
 8010804:	2001      	movne	r0, #1
 8010806:	f1b9 0f00 	cmp.w	r9, #0
 801080a:	dccf      	bgt.n	80107ac <__ieee754_pow+0x21c>
 801080c:	e7da      	b.n	80107c4 <__ieee754_pow+0x234>
 801080e:	bf00      	nop
 8010810:	00000000 	.word	0x00000000
 8010814:	3ff00000 	.word	0x3ff00000
 8010818:	00000000 	.word	0x00000000
 801081c:	bff00000 	.word	0xbff00000
 8010820:	fff00000 	.word	0xfff00000
 8010824:	7ff00000 	.word	0x7ff00000
 8010828:	433fffff 	.word	0x433fffff
 801082c:	3ff00000 	.word	0x3ff00000
 8010830:	3fefffff 	.word	0x3fefffff
 8010834:	3fe00000 	.word	0x3fe00000
 8010838:	43f00000 	.word	0x43f00000
 801083c:	4b5a      	ldr	r3, [pc, #360]	@ (80109a8 <__ieee754_pow+0x418>)
 801083e:	f7ef fd2b 	bl	8000298 <__aeabi_dsub>
 8010842:	a351      	add	r3, pc, #324	@ (adr r3, 8010988 <__ieee754_pow+0x3f8>)
 8010844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010848:	4604      	mov	r4, r0
 801084a:	460d      	mov	r5, r1
 801084c:	f7ef fedc 	bl	8000608 <__aeabi_dmul>
 8010850:	a34f      	add	r3, pc, #316	@ (adr r3, 8010990 <__ieee754_pow+0x400>)
 8010852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010856:	4606      	mov	r6, r0
 8010858:	460f      	mov	r7, r1
 801085a:	4620      	mov	r0, r4
 801085c:	4629      	mov	r1, r5
 801085e:	f7ef fed3 	bl	8000608 <__aeabi_dmul>
 8010862:	4b52      	ldr	r3, [pc, #328]	@ (80109ac <__ieee754_pow+0x41c>)
 8010864:	4682      	mov	sl, r0
 8010866:	468b      	mov	fp, r1
 8010868:	2200      	movs	r2, #0
 801086a:	4620      	mov	r0, r4
 801086c:	4629      	mov	r1, r5
 801086e:	f7ef fecb 	bl	8000608 <__aeabi_dmul>
 8010872:	4602      	mov	r2, r0
 8010874:	460b      	mov	r3, r1
 8010876:	a148      	add	r1, pc, #288	@ (adr r1, 8010998 <__ieee754_pow+0x408>)
 8010878:	e9d1 0100 	ldrd	r0, r1, [r1]
 801087c:	f7ef fd0c 	bl	8000298 <__aeabi_dsub>
 8010880:	4622      	mov	r2, r4
 8010882:	462b      	mov	r3, r5
 8010884:	f7ef fec0 	bl	8000608 <__aeabi_dmul>
 8010888:	4602      	mov	r2, r0
 801088a:	460b      	mov	r3, r1
 801088c:	2000      	movs	r0, #0
 801088e:	4948      	ldr	r1, [pc, #288]	@ (80109b0 <__ieee754_pow+0x420>)
 8010890:	f7ef fd02 	bl	8000298 <__aeabi_dsub>
 8010894:	4622      	mov	r2, r4
 8010896:	4680      	mov	r8, r0
 8010898:	4689      	mov	r9, r1
 801089a:	462b      	mov	r3, r5
 801089c:	4620      	mov	r0, r4
 801089e:	4629      	mov	r1, r5
 80108a0:	f7ef feb2 	bl	8000608 <__aeabi_dmul>
 80108a4:	4602      	mov	r2, r0
 80108a6:	460b      	mov	r3, r1
 80108a8:	4640      	mov	r0, r8
 80108aa:	4649      	mov	r1, r9
 80108ac:	f7ef feac 	bl	8000608 <__aeabi_dmul>
 80108b0:	a33b      	add	r3, pc, #236	@ (adr r3, 80109a0 <__ieee754_pow+0x410>)
 80108b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b6:	f7ef fea7 	bl	8000608 <__aeabi_dmul>
 80108ba:	4602      	mov	r2, r0
 80108bc:	460b      	mov	r3, r1
 80108be:	4650      	mov	r0, sl
 80108c0:	4659      	mov	r1, fp
 80108c2:	f7ef fce9 	bl	8000298 <__aeabi_dsub>
 80108c6:	4602      	mov	r2, r0
 80108c8:	460b      	mov	r3, r1
 80108ca:	4680      	mov	r8, r0
 80108cc:	4689      	mov	r9, r1
 80108ce:	4630      	mov	r0, r6
 80108d0:	4639      	mov	r1, r7
 80108d2:	f7ef fce3 	bl	800029c <__adddf3>
 80108d6:	2400      	movs	r4, #0
 80108d8:	4632      	mov	r2, r6
 80108da:	463b      	mov	r3, r7
 80108dc:	4620      	mov	r0, r4
 80108de:	460d      	mov	r5, r1
 80108e0:	f7ef fcda 	bl	8000298 <__aeabi_dsub>
 80108e4:	4602      	mov	r2, r0
 80108e6:	460b      	mov	r3, r1
 80108e8:	4640      	mov	r0, r8
 80108ea:	4649      	mov	r1, r9
 80108ec:	f7ef fcd4 	bl	8000298 <__aeabi_dsub>
 80108f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80108f8:	2300      	movs	r3, #0
 80108fa:	9304      	str	r3, [sp, #16]
 80108fc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010900:	4606      	mov	r6, r0
 8010902:	460f      	mov	r7, r1
 8010904:	465b      	mov	r3, fp
 8010906:	4652      	mov	r2, sl
 8010908:	e9dd 0100 	ldrd	r0, r1, [sp]
 801090c:	f7ef fcc4 	bl	8000298 <__aeabi_dsub>
 8010910:	4622      	mov	r2, r4
 8010912:	462b      	mov	r3, r5
 8010914:	f7ef fe78 	bl	8000608 <__aeabi_dmul>
 8010918:	e9dd 2300 	ldrd	r2, r3, [sp]
 801091c:	4680      	mov	r8, r0
 801091e:	4689      	mov	r9, r1
 8010920:	4630      	mov	r0, r6
 8010922:	4639      	mov	r1, r7
 8010924:	f7ef fe70 	bl	8000608 <__aeabi_dmul>
 8010928:	4602      	mov	r2, r0
 801092a:	460b      	mov	r3, r1
 801092c:	4640      	mov	r0, r8
 801092e:	4649      	mov	r1, r9
 8010930:	f7ef fcb4 	bl	800029c <__adddf3>
 8010934:	465b      	mov	r3, fp
 8010936:	4606      	mov	r6, r0
 8010938:	460f      	mov	r7, r1
 801093a:	4652      	mov	r2, sl
 801093c:	4620      	mov	r0, r4
 801093e:	4629      	mov	r1, r5
 8010940:	f7ef fe62 	bl	8000608 <__aeabi_dmul>
 8010944:	460b      	mov	r3, r1
 8010946:	4602      	mov	r2, r0
 8010948:	4680      	mov	r8, r0
 801094a:	4689      	mov	r9, r1
 801094c:	4630      	mov	r0, r6
 801094e:	4639      	mov	r1, r7
 8010950:	f7ef fca4 	bl	800029c <__adddf3>
 8010954:	4b17      	ldr	r3, [pc, #92]	@ (80109b4 <__ieee754_pow+0x424>)
 8010956:	4299      	cmp	r1, r3
 8010958:	4604      	mov	r4, r0
 801095a:	460d      	mov	r5, r1
 801095c:	468b      	mov	fp, r1
 801095e:	f340 820b 	ble.w	8010d78 <__ieee754_pow+0x7e8>
 8010962:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010966:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801096a:	4303      	orrs	r3, r0
 801096c:	f000 81ea 	beq.w	8010d44 <__ieee754_pow+0x7b4>
 8010970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010974:	2200      	movs	r2, #0
 8010976:	2300      	movs	r3, #0
 8010978:	f7f0 f8b8 	bl	8000aec <__aeabi_dcmplt>
 801097c:	3800      	subs	r0, #0
 801097e:	bf18      	it	ne
 8010980:	2001      	movne	r0, #1
 8010982:	e713      	b.n	80107ac <__ieee754_pow+0x21c>
 8010984:	f3af 8000 	nop.w
 8010988:	60000000 	.word	0x60000000
 801098c:	3ff71547 	.word	0x3ff71547
 8010990:	f85ddf44 	.word	0xf85ddf44
 8010994:	3e54ae0b 	.word	0x3e54ae0b
 8010998:	55555555 	.word	0x55555555
 801099c:	3fd55555 	.word	0x3fd55555
 80109a0:	652b82fe 	.word	0x652b82fe
 80109a4:	3ff71547 	.word	0x3ff71547
 80109a8:	3ff00000 	.word	0x3ff00000
 80109ac:	3fd00000 	.word	0x3fd00000
 80109b0:	3fe00000 	.word	0x3fe00000
 80109b4:	408fffff 	.word	0x408fffff
 80109b8:	4bd5      	ldr	r3, [pc, #852]	@ (8010d10 <__ieee754_pow+0x780>)
 80109ba:	ea08 0303 	and.w	r3, r8, r3
 80109be:	2200      	movs	r2, #0
 80109c0:	b92b      	cbnz	r3, 80109ce <__ieee754_pow+0x43e>
 80109c2:	4bd4      	ldr	r3, [pc, #848]	@ (8010d14 <__ieee754_pow+0x784>)
 80109c4:	f7ef fe20 	bl	8000608 <__aeabi_dmul>
 80109c8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80109cc:	468b      	mov	fp, r1
 80109ce:	ea4f 532b 	mov.w	r3, fp, asr #20
 80109d2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80109d6:	4413      	add	r3, r2
 80109d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80109da:	4bcf      	ldr	r3, [pc, #828]	@ (8010d18 <__ieee754_pow+0x788>)
 80109dc:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80109e0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80109e4:	459b      	cmp	fp, r3
 80109e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80109ea:	dd08      	ble.n	80109fe <__ieee754_pow+0x46e>
 80109ec:	4bcb      	ldr	r3, [pc, #812]	@ (8010d1c <__ieee754_pow+0x78c>)
 80109ee:	459b      	cmp	fp, r3
 80109f0:	f340 81a5 	ble.w	8010d3e <__ieee754_pow+0x7ae>
 80109f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109f6:	3301      	adds	r3, #1
 80109f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80109fa:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80109fe:	f04f 0a00 	mov.w	sl, #0
 8010a02:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010a06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a08:	4bc5      	ldr	r3, [pc, #788]	@ (8010d20 <__ieee754_pow+0x790>)
 8010a0a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010a0e:	ed93 7b00 	vldr	d7, [r3]
 8010a12:	4629      	mov	r1, r5
 8010a14:	ec53 2b17 	vmov	r2, r3, d7
 8010a18:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010a1c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010a20:	f7ef fc3a 	bl	8000298 <__aeabi_dsub>
 8010a24:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010a28:	4606      	mov	r6, r0
 8010a2a:	460f      	mov	r7, r1
 8010a2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a30:	f7ef fc34 	bl	800029c <__adddf3>
 8010a34:	4602      	mov	r2, r0
 8010a36:	460b      	mov	r3, r1
 8010a38:	2000      	movs	r0, #0
 8010a3a:	49ba      	ldr	r1, [pc, #744]	@ (8010d24 <__ieee754_pow+0x794>)
 8010a3c:	f7ef ff0e 	bl	800085c <__aeabi_ddiv>
 8010a40:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8010a44:	4602      	mov	r2, r0
 8010a46:	460b      	mov	r3, r1
 8010a48:	4630      	mov	r0, r6
 8010a4a:	4639      	mov	r1, r7
 8010a4c:	f7ef fddc 	bl	8000608 <__aeabi_dmul>
 8010a50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a54:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010a58:	106d      	asrs	r5, r5, #1
 8010a5a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8010a5e:	f04f 0b00 	mov.w	fp, #0
 8010a62:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8010a66:	4661      	mov	r1, ip
 8010a68:	2200      	movs	r2, #0
 8010a6a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010a6e:	4658      	mov	r0, fp
 8010a70:	46e1      	mov	r9, ip
 8010a72:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8010a76:	4614      	mov	r4, r2
 8010a78:	461d      	mov	r5, r3
 8010a7a:	f7ef fdc5 	bl	8000608 <__aeabi_dmul>
 8010a7e:	4602      	mov	r2, r0
 8010a80:	460b      	mov	r3, r1
 8010a82:	4630      	mov	r0, r6
 8010a84:	4639      	mov	r1, r7
 8010a86:	f7ef fc07 	bl	8000298 <__aeabi_dsub>
 8010a8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010a8e:	4606      	mov	r6, r0
 8010a90:	460f      	mov	r7, r1
 8010a92:	4620      	mov	r0, r4
 8010a94:	4629      	mov	r1, r5
 8010a96:	f7ef fbff 	bl	8000298 <__aeabi_dsub>
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010aa2:	f7ef fbf9 	bl	8000298 <__aeabi_dsub>
 8010aa6:	465a      	mov	r2, fp
 8010aa8:	464b      	mov	r3, r9
 8010aaa:	f7ef fdad 	bl	8000608 <__aeabi_dmul>
 8010aae:	4602      	mov	r2, r0
 8010ab0:	460b      	mov	r3, r1
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	4639      	mov	r1, r7
 8010ab6:	f7ef fbef 	bl	8000298 <__aeabi_dsub>
 8010aba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010abe:	f7ef fda3 	bl	8000608 <__aeabi_dmul>
 8010ac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ac6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010aca:	4610      	mov	r0, r2
 8010acc:	4619      	mov	r1, r3
 8010ace:	f7ef fd9b 	bl	8000608 <__aeabi_dmul>
 8010ad2:	a37d      	add	r3, pc, #500	@ (adr r3, 8010cc8 <__ieee754_pow+0x738>)
 8010ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad8:	4604      	mov	r4, r0
 8010ada:	460d      	mov	r5, r1
 8010adc:	f7ef fd94 	bl	8000608 <__aeabi_dmul>
 8010ae0:	a37b      	add	r3, pc, #492	@ (adr r3, 8010cd0 <__ieee754_pow+0x740>)
 8010ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae6:	f7ef fbd9 	bl	800029c <__adddf3>
 8010aea:	4622      	mov	r2, r4
 8010aec:	462b      	mov	r3, r5
 8010aee:	f7ef fd8b 	bl	8000608 <__aeabi_dmul>
 8010af2:	a379      	add	r3, pc, #484	@ (adr r3, 8010cd8 <__ieee754_pow+0x748>)
 8010af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af8:	f7ef fbd0 	bl	800029c <__adddf3>
 8010afc:	4622      	mov	r2, r4
 8010afe:	462b      	mov	r3, r5
 8010b00:	f7ef fd82 	bl	8000608 <__aeabi_dmul>
 8010b04:	a376      	add	r3, pc, #472	@ (adr r3, 8010ce0 <__ieee754_pow+0x750>)
 8010b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b0a:	f7ef fbc7 	bl	800029c <__adddf3>
 8010b0e:	4622      	mov	r2, r4
 8010b10:	462b      	mov	r3, r5
 8010b12:	f7ef fd79 	bl	8000608 <__aeabi_dmul>
 8010b16:	a374      	add	r3, pc, #464	@ (adr r3, 8010ce8 <__ieee754_pow+0x758>)
 8010b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b1c:	f7ef fbbe 	bl	800029c <__adddf3>
 8010b20:	4622      	mov	r2, r4
 8010b22:	462b      	mov	r3, r5
 8010b24:	f7ef fd70 	bl	8000608 <__aeabi_dmul>
 8010b28:	a371      	add	r3, pc, #452	@ (adr r3, 8010cf0 <__ieee754_pow+0x760>)
 8010b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b2e:	f7ef fbb5 	bl	800029c <__adddf3>
 8010b32:	4622      	mov	r2, r4
 8010b34:	4606      	mov	r6, r0
 8010b36:	460f      	mov	r7, r1
 8010b38:	462b      	mov	r3, r5
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	4629      	mov	r1, r5
 8010b3e:	f7ef fd63 	bl	8000608 <__aeabi_dmul>
 8010b42:	4602      	mov	r2, r0
 8010b44:	460b      	mov	r3, r1
 8010b46:	4630      	mov	r0, r6
 8010b48:	4639      	mov	r1, r7
 8010b4a:	f7ef fd5d 	bl	8000608 <__aeabi_dmul>
 8010b4e:	465a      	mov	r2, fp
 8010b50:	4604      	mov	r4, r0
 8010b52:	460d      	mov	r5, r1
 8010b54:	464b      	mov	r3, r9
 8010b56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b5a:	f7ef fb9f 	bl	800029c <__adddf3>
 8010b5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010b62:	f7ef fd51 	bl	8000608 <__aeabi_dmul>
 8010b66:	4622      	mov	r2, r4
 8010b68:	462b      	mov	r3, r5
 8010b6a:	f7ef fb97 	bl	800029c <__adddf3>
 8010b6e:	465a      	mov	r2, fp
 8010b70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010b74:	464b      	mov	r3, r9
 8010b76:	4658      	mov	r0, fp
 8010b78:	4649      	mov	r1, r9
 8010b7a:	f7ef fd45 	bl	8000608 <__aeabi_dmul>
 8010b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8010d28 <__ieee754_pow+0x798>)
 8010b80:	2200      	movs	r2, #0
 8010b82:	4606      	mov	r6, r0
 8010b84:	460f      	mov	r7, r1
 8010b86:	f7ef fb89 	bl	800029c <__adddf3>
 8010b8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010b8e:	f7ef fb85 	bl	800029c <__adddf3>
 8010b92:	46d8      	mov	r8, fp
 8010b94:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8010b98:	460d      	mov	r5, r1
 8010b9a:	465a      	mov	r2, fp
 8010b9c:	460b      	mov	r3, r1
 8010b9e:	4640      	mov	r0, r8
 8010ba0:	4649      	mov	r1, r9
 8010ba2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8010ba6:	f7ef fd2f 	bl	8000608 <__aeabi_dmul>
 8010baa:	465c      	mov	r4, fp
 8010bac:	4680      	mov	r8, r0
 8010bae:	4689      	mov	r9, r1
 8010bb0:	4b5d      	ldr	r3, [pc, #372]	@ (8010d28 <__ieee754_pow+0x798>)
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	4629      	mov	r1, r5
 8010bb8:	f7ef fb6e 	bl	8000298 <__aeabi_dsub>
 8010bbc:	4632      	mov	r2, r6
 8010bbe:	463b      	mov	r3, r7
 8010bc0:	f7ef fb6a 	bl	8000298 <__aeabi_dsub>
 8010bc4:	4602      	mov	r2, r0
 8010bc6:	460b      	mov	r3, r1
 8010bc8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010bcc:	f7ef fb64 	bl	8000298 <__aeabi_dsub>
 8010bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010bd4:	f7ef fd18 	bl	8000608 <__aeabi_dmul>
 8010bd8:	4622      	mov	r2, r4
 8010bda:	4606      	mov	r6, r0
 8010bdc:	460f      	mov	r7, r1
 8010bde:	462b      	mov	r3, r5
 8010be0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010be4:	f7ef fd10 	bl	8000608 <__aeabi_dmul>
 8010be8:	4602      	mov	r2, r0
 8010bea:	460b      	mov	r3, r1
 8010bec:	4630      	mov	r0, r6
 8010bee:	4639      	mov	r1, r7
 8010bf0:	f7ef fb54 	bl	800029c <__adddf3>
 8010bf4:	4606      	mov	r6, r0
 8010bf6:	460f      	mov	r7, r1
 8010bf8:	4602      	mov	r2, r0
 8010bfa:	460b      	mov	r3, r1
 8010bfc:	4640      	mov	r0, r8
 8010bfe:	4649      	mov	r1, r9
 8010c00:	f7ef fb4c 	bl	800029c <__adddf3>
 8010c04:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8010c08:	a33b      	add	r3, pc, #236	@ (adr r3, 8010cf8 <__ieee754_pow+0x768>)
 8010c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0e:	4658      	mov	r0, fp
 8010c10:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8010c14:	460d      	mov	r5, r1
 8010c16:	f7ef fcf7 	bl	8000608 <__aeabi_dmul>
 8010c1a:	465c      	mov	r4, fp
 8010c1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c20:	4642      	mov	r2, r8
 8010c22:	464b      	mov	r3, r9
 8010c24:	4620      	mov	r0, r4
 8010c26:	4629      	mov	r1, r5
 8010c28:	f7ef fb36 	bl	8000298 <__aeabi_dsub>
 8010c2c:	4602      	mov	r2, r0
 8010c2e:	460b      	mov	r3, r1
 8010c30:	4630      	mov	r0, r6
 8010c32:	4639      	mov	r1, r7
 8010c34:	f7ef fb30 	bl	8000298 <__aeabi_dsub>
 8010c38:	a331      	add	r3, pc, #196	@ (adr r3, 8010d00 <__ieee754_pow+0x770>)
 8010c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3e:	f7ef fce3 	bl	8000608 <__aeabi_dmul>
 8010c42:	a331      	add	r3, pc, #196	@ (adr r3, 8010d08 <__ieee754_pow+0x778>)
 8010c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c48:	4606      	mov	r6, r0
 8010c4a:	460f      	mov	r7, r1
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	4629      	mov	r1, r5
 8010c50:	f7ef fcda 	bl	8000608 <__aeabi_dmul>
 8010c54:	4602      	mov	r2, r0
 8010c56:	460b      	mov	r3, r1
 8010c58:	4630      	mov	r0, r6
 8010c5a:	4639      	mov	r1, r7
 8010c5c:	f7ef fb1e 	bl	800029c <__adddf3>
 8010c60:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010c62:	4b32      	ldr	r3, [pc, #200]	@ (8010d2c <__ieee754_pow+0x79c>)
 8010c64:	4413      	add	r3, r2
 8010c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6a:	f7ef fb17 	bl	800029c <__adddf3>
 8010c6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010c72:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010c74:	f7ef fc5e 	bl	8000534 <__aeabi_i2d>
 8010c78:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8010d30 <__ieee754_pow+0x7a0>)
 8010c7c:	4413      	add	r3, r2
 8010c7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010c82:	4606      	mov	r6, r0
 8010c84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c88:	460f      	mov	r7, r1
 8010c8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c8e:	f7ef fb05 	bl	800029c <__adddf3>
 8010c92:	4642      	mov	r2, r8
 8010c94:	464b      	mov	r3, r9
 8010c96:	f7ef fb01 	bl	800029c <__adddf3>
 8010c9a:	4632      	mov	r2, r6
 8010c9c:	463b      	mov	r3, r7
 8010c9e:	f7ef fafd 	bl	800029c <__adddf3>
 8010ca2:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8010ca6:	4632      	mov	r2, r6
 8010ca8:	463b      	mov	r3, r7
 8010caa:	4658      	mov	r0, fp
 8010cac:	460d      	mov	r5, r1
 8010cae:	f7ef faf3 	bl	8000298 <__aeabi_dsub>
 8010cb2:	4642      	mov	r2, r8
 8010cb4:	464b      	mov	r3, r9
 8010cb6:	f7ef faef 	bl	8000298 <__aeabi_dsub>
 8010cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010cbe:	f7ef faeb 	bl	8000298 <__aeabi_dsub>
 8010cc2:	465c      	mov	r4, fp
 8010cc4:	e036      	b.n	8010d34 <__ieee754_pow+0x7a4>
 8010cc6:	bf00      	nop
 8010cc8:	4a454eef 	.word	0x4a454eef
 8010ccc:	3fca7e28 	.word	0x3fca7e28
 8010cd0:	93c9db65 	.word	0x93c9db65
 8010cd4:	3fcd864a 	.word	0x3fcd864a
 8010cd8:	a91d4101 	.word	0xa91d4101
 8010cdc:	3fd17460 	.word	0x3fd17460
 8010ce0:	518f264d 	.word	0x518f264d
 8010ce4:	3fd55555 	.word	0x3fd55555
 8010ce8:	db6fabff 	.word	0xdb6fabff
 8010cec:	3fdb6db6 	.word	0x3fdb6db6
 8010cf0:	33333303 	.word	0x33333303
 8010cf4:	3fe33333 	.word	0x3fe33333
 8010cf8:	e0000000 	.word	0xe0000000
 8010cfc:	3feec709 	.word	0x3feec709
 8010d00:	dc3a03fd 	.word	0xdc3a03fd
 8010d04:	3feec709 	.word	0x3feec709
 8010d08:	145b01f5 	.word	0x145b01f5
 8010d0c:	be3e2fe0 	.word	0xbe3e2fe0
 8010d10:	7ff00000 	.word	0x7ff00000
 8010d14:	43400000 	.word	0x43400000
 8010d18:	0003988e 	.word	0x0003988e
 8010d1c:	000bb679 	.word	0x000bb679
 8010d20:	08012a68 	.word	0x08012a68
 8010d24:	3ff00000 	.word	0x3ff00000
 8010d28:	40080000 	.word	0x40080000
 8010d2c:	08012a48 	.word	0x08012a48
 8010d30:	08012a58 	.word	0x08012a58
 8010d34:	4602      	mov	r2, r0
 8010d36:	460b      	mov	r3, r1
 8010d38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d3c:	e5d6      	b.n	80108ec <__ieee754_pow+0x35c>
 8010d3e:	f04f 0a01 	mov.w	sl, #1
 8010d42:	e65e      	b.n	8010a02 <__ieee754_pow+0x472>
 8010d44:	a3b5      	add	r3, pc, #724	@ (adr r3, 801101c <__ieee754_pow+0xa8c>)
 8010d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	4639      	mov	r1, r7
 8010d4e:	f7ef faa5 	bl	800029c <__adddf3>
 8010d52:	4642      	mov	r2, r8
 8010d54:	e9cd 0100 	strd	r0, r1, [sp]
 8010d58:	464b      	mov	r3, r9
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	4629      	mov	r1, r5
 8010d5e:	f7ef fa9b 	bl	8000298 <__aeabi_dsub>
 8010d62:	4602      	mov	r2, r0
 8010d64:	460b      	mov	r3, r1
 8010d66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d6a:	f7ef fedd 	bl	8000b28 <__aeabi_dcmpgt>
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	f47f adfe 	bne.w	8010970 <__ieee754_pow+0x3e0>
 8010d74:	4ba2      	ldr	r3, [pc, #648]	@ (8011000 <__ieee754_pow+0xa70>)
 8010d76:	e022      	b.n	8010dbe <__ieee754_pow+0x82e>
 8010d78:	4ca2      	ldr	r4, [pc, #648]	@ (8011004 <__ieee754_pow+0xa74>)
 8010d7a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010d7e:	42a3      	cmp	r3, r4
 8010d80:	d919      	bls.n	8010db6 <__ieee754_pow+0x826>
 8010d82:	4ba1      	ldr	r3, [pc, #644]	@ (8011008 <__ieee754_pow+0xa78>)
 8010d84:	440b      	add	r3, r1
 8010d86:	4303      	orrs	r3, r0
 8010d88:	d009      	beq.n	8010d9e <__ieee754_pow+0x80e>
 8010d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	2300      	movs	r3, #0
 8010d92:	f7ef feab 	bl	8000aec <__aeabi_dcmplt>
 8010d96:	3800      	subs	r0, #0
 8010d98:	bf18      	it	ne
 8010d9a:	2001      	movne	r0, #1
 8010d9c:	e512      	b.n	80107c4 <__ieee754_pow+0x234>
 8010d9e:	4642      	mov	r2, r8
 8010da0:	464b      	mov	r3, r9
 8010da2:	f7ef fa79 	bl	8000298 <__aeabi_dsub>
 8010da6:	4632      	mov	r2, r6
 8010da8:	463b      	mov	r3, r7
 8010daa:	f7ef feb3 	bl	8000b14 <__aeabi_dcmpge>
 8010dae:	2800      	cmp	r0, #0
 8010db0:	d1eb      	bne.n	8010d8a <__ieee754_pow+0x7fa>
 8010db2:	4b96      	ldr	r3, [pc, #600]	@ (801100c <__ieee754_pow+0xa7c>)
 8010db4:	e003      	b.n	8010dbe <__ieee754_pow+0x82e>
 8010db6:	4a96      	ldr	r2, [pc, #600]	@ (8011010 <__ieee754_pow+0xa80>)
 8010db8:	4293      	cmp	r3, r2
 8010dba:	f240 80e7 	bls.w	8010f8c <__ieee754_pow+0x9fc>
 8010dbe:	151b      	asrs	r3, r3, #20
 8010dc0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8010dc4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8010dc8:	fa4a fa03 	asr.w	sl, sl, r3
 8010dcc:	44da      	add	sl, fp
 8010dce:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010dd2:	4890      	ldr	r0, [pc, #576]	@ (8011014 <__ieee754_pow+0xa84>)
 8010dd4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010dd8:	4108      	asrs	r0, r1
 8010dda:	ea00 030a 	and.w	r3, r0, sl
 8010dde:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010de2:	f1c1 0114 	rsb	r1, r1, #20
 8010de6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8010dea:	fa4a fa01 	asr.w	sl, sl, r1
 8010dee:	f1bb 0f00 	cmp.w	fp, #0
 8010df2:	4640      	mov	r0, r8
 8010df4:	4649      	mov	r1, r9
 8010df6:	f04f 0200 	mov.w	r2, #0
 8010dfa:	bfb8      	it	lt
 8010dfc:	f1ca 0a00 	rsblt	sl, sl, #0
 8010e00:	f7ef fa4a 	bl	8000298 <__aeabi_dsub>
 8010e04:	4680      	mov	r8, r0
 8010e06:	4689      	mov	r9, r1
 8010e08:	4632      	mov	r2, r6
 8010e0a:	463b      	mov	r3, r7
 8010e0c:	4640      	mov	r0, r8
 8010e0e:	4649      	mov	r1, r9
 8010e10:	f7ef fa44 	bl	800029c <__adddf3>
 8010e14:	2400      	movs	r4, #0
 8010e16:	a36a      	add	r3, pc, #424	@ (adr r3, 8010fc0 <__ieee754_pow+0xa30>)
 8010e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	460d      	mov	r5, r1
 8010e20:	f7ef fbf2 	bl	8000608 <__aeabi_dmul>
 8010e24:	4642      	mov	r2, r8
 8010e26:	e9cd 0100 	strd	r0, r1, [sp]
 8010e2a:	464b      	mov	r3, r9
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	4629      	mov	r1, r5
 8010e30:	f7ef fa32 	bl	8000298 <__aeabi_dsub>
 8010e34:	4602      	mov	r2, r0
 8010e36:	460b      	mov	r3, r1
 8010e38:	4630      	mov	r0, r6
 8010e3a:	4639      	mov	r1, r7
 8010e3c:	f7ef fa2c 	bl	8000298 <__aeabi_dsub>
 8010e40:	a361      	add	r3, pc, #388	@ (adr r3, 8010fc8 <__ieee754_pow+0xa38>)
 8010e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e46:	f7ef fbdf 	bl	8000608 <__aeabi_dmul>
 8010e4a:	a361      	add	r3, pc, #388	@ (adr r3, 8010fd0 <__ieee754_pow+0xa40>)
 8010e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e50:	4680      	mov	r8, r0
 8010e52:	4689      	mov	r9, r1
 8010e54:	4620      	mov	r0, r4
 8010e56:	4629      	mov	r1, r5
 8010e58:	f7ef fbd6 	bl	8000608 <__aeabi_dmul>
 8010e5c:	4602      	mov	r2, r0
 8010e5e:	460b      	mov	r3, r1
 8010e60:	4640      	mov	r0, r8
 8010e62:	4649      	mov	r1, r9
 8010e64:	f7ef fa1a 	bl	800029c <__adddf3>
 8010e68:	4604      	mov	r4, r0
 8010e6a:	460d      	mov	r5, r1
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	460b      	mov	r3, r1
 8010e70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e74:	f7ef fa12 	bl	800029c <__adddf3>
 8010e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e7c:	4680      	mov	r8, r0
 8010e7e:	4689      	mov	r9, r1
 8010e80:	f7ef fa0a 	bl	8000298 <__aeabi_dsub>
 8010e84:	4602      	mov	r2, r0
 8010e86:	460b      	mov	r3, r1
 8010e88:	4620      	mov	r0, r4
 8010e8a:	4629      	mov	r1, r5
 8010e8c:	f7ef fa04 	bl	8000298 <__aeabi_dsub>
 8010e90:	4642      	mov	r2, r8
 8010e92:	4606      	mov	r6, r0
 8010e94:	460f      	mov	r7, r1
 8010e96:	464b      	mov	r3, r9
 8010e98:	4640      	mov	r0, r8
 8010e9a:	4649      	mov	r1, r9
 8010e9c:	f7ef fbb4 	bl	8000608 <__aeabi_dmul>
 8010ea0:	a34d      	add	r3, pc, #308	@ (adr r3, 8010fd8 <__ieee754_pow+0xa48>)
 8010ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea6:	4604      	mov	r4, r0
 8010ea8:	460d      	mov	r5, r1
 8010eaa:	f7ef fbad 	bl	8000608 <__aeabi_dmul>
 8010eae:	a34c      	add	r3, pc, #304	@ (adr r3, 8010fe0 <__ieee754_pow+0xa50>)
 8010eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb4:	f7ef f9f0 	bl	8000298 <__aeabi_dsub>
 8010eb8:	4622      	mov	r2, r4
 8010eba:	462b      	mov	r3, r5
 8010ebc:	f7ef fba4 	bl	8000608 <__aeabi_dmul>
 8010ec0:	a349      	add	r3, pc, #292	@ (adr r3, 8010fe8 <__ieee754_pow+0xa58>)
 8010ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec6:	f7ef f9e9 	bl	800029c <__adddf3>
 8010eca:	4622      	mov	r2, r4
 8010ecc:	462b      	mov	r3, r5
 8010ece:	f7ef fb9b 	bl	8000608 <__aeabi_dmul>
 8010ed2:	a347      	add	r3, pc, #284	@ (adr r3, 8010ff0 <__ieee754_pow+0xa60>)
 8010ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed8:	f7ef f9de 	bl	8000298 <__aeabi_dsub>
 8010edc:	4622      	mov	r2, r4
 8010ede:	462b      	mov	r3, r5
 8010ee0:	f7ef fb92 	bl	8000608 <__aeabi_dmul>
 8010ee4:	a344      	add	r3, pc, #272	@ (adr r3, 8010ff8 <__ieee754_pow+0xa68>)
 8010ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eea:	f7ef f9d7 	bl	800029c <__adddf3>
 8010eee:	4622      	mov	r2, r4
 8010ef0:	462b      	mov	r3, r5
 8010ef2:	f7ef fb89 	bl	8000608 <__aeabi_dmul>
 8010ef6:	4602      	mov	r2, r0
 8010ef8:	460b      	mov	r3, r1
 8010efa:	4640      	mov	r0, r8
 8010efc:	4649      	mov	r1, r9
 8010efe:	f7ef f9cb 	bl	8000298 <__aeabi_dsub>
 8010f02:	4604      	mov	r4, r0
 8010f04:	460d      	mov	r5, r1
 8010f06:	4602      	mov	r2, r0
 8010f08:	460b      	mov	r3, r1
 8010f0a:	4640      	mov	r0, r8
 8010f0c:	4649      	mov	r1, r9
 8010f0e:	f7ef fb7b 	bl	8000608 <__aeabi_dmul>
 8010f12:	2200      	movs	r2, #0
 8010f14:	e9cd 0100 	strd	r0, r1, [sp]
 8010f18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	4629      	mov	r1, r5
 8010f20:	f7ef f9ba 	bl	8000298 <__aeabi_dsub>
 8010f24:	4602      	mov	r2, r0
 8010f26:	460b      	mov	r3, r1
 8010f28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f2c:	f7ef fc96 	bl	800085c <__aeabi_ddiv>
 8010f30:	4632      	mov	r2, r6
 8010f32:	4604      	mov	r4, r0
 8010f34:	460d      	mov	r5, r1
 8010f36:	463b      	mov	r3, r7
 8010f38:	4640      	mov	r0, r8
 8010f3a:	4649      	mov	r1, r9
 8010f3c:	f7ef fb64 	bl	8000608 <__aeabi_dmul>
 8010f40:	4632      	mov	r2, r6
 8010f42:	463b      	mov	r3, r7
 8010f44:	f7ef f9aa 	bl	800029c <__adddf3>
 8010f48:	4602      	mov	r2, r0
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	4629      	mov	r1, r5
 8010f50:	f7ef f9a2 	bl	8000298 <__aeabi_dsub>
 8010f54:	4642      	mov	r2, r8
 8010f56:	464b      	mov	r3, r9
 8010f58:	f7ef f99e 	bl	8000298 <__aeabi_dsub>
 8010f5c:	460b      	mov	r3, r1
 8010f5e:	4602      	mov	r2, r0
 8010f60:	492d      	ldr	r1, [pc, #180]	@ (8011018 <__ieee754_pow+0xa88>)
 8010f62:	2000      	movs	r0, #0
 8010f64:	f7ef f998 	bl	8000298 <__aeabi_dsub>
 8010f68:	ec41 0b10 	vmov	d0, r0, r1
 8010f6c:	ee10 3a90 	vmov	r3, s1
 8010f70:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010f74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010f78:	da0b      	bge.n	8010f92 <__ieee754_pow+0xa02>
 8010f7a:	4650      	mov	r0, sl
 8010f7c:	f000 fef4 	bl	8011d68 <scalbn>
 8010f80:	ec51 0b10 	vmov	r0, r1, d0
 8010f84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010f88:	f7ff bb6d 	b.w	8010666 <__ieee754_pow+0xd6>
 8010f8c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010f90:	e73a      	b.n	8010e08 <__ieee754_pow+0x878>
 8010f92:	ec51 0b10 	vmov	r0, r1, d0
 8010f96:	4619      	mov	r1, r3
 8010f98:	e7f4      	b.n	8010f84 <__ieee754_pow+0x9f4>
 8010f9a:	491f      	ldr	r1, [pc, #124]	@ (8011018 <__ieee754_pow+0xa88>)
 8010f9c:	2000      	movs	r0, #0
 8010f9e:	f7ff bb14 	b.w	80105ca <__ieee754_pow+0x3a>
 8010fa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fa6:	f7ff bb10 	b.w	80105ca <__ieee754_pow+0x3a>
 8010faa:	4630      	mov	r0, r6
 8010fac:	4639      	mov	r1, r7
 8010fae:	f7ff bb0c 	b.w	80105ca <__ieee754_pow+0x3a>
 8010fb2:	460c      	mov	r4, r1
 8010fb4:	f7ff bb69 	b.w	801068a <__ieee754_pow+0xfa>
 8010fb8:	2400      	movs	r4, #0
 8010fba:	f7ff bb4b 	b.w	8010654 <__ieee754_pow+0xc4>
 8010fbe:	bf00      	nop
 8010fc0:	00000000 	.word	0x00000000
 8010fc4:	3fe62e43 	.word	0x3fe62e43
 8010fc8:	fefa39ef 	.word	0xfefa39ef
 8010fcc:	3fe62e42 	.word	0x3fe62e42
 8010fd0:	0ca86c39 	.word	0x0ca86c39
 8010fd4:	be205c61 	.word	0xbe205c61
 8010fd8:	72bea4d0 	.word	0x72bea4d0
 8010fdc:	3e663769 	.word	0x3e663769
 8010fe0:	c5d26bf1 	.word	0xc5d26bf1
 8010fe4:	3ebbbd41 	.word	0x3ebbbd41
 8010fe8:	af25de2c 	.word	0xaf25de2c
 8010fec:	3f11566a 	.word	0x3f11566a
 8010ff0:	16bebd93 	.word	0x16bebd93
 8010ff4:	3f66c16c 	.word	0x3f66c16c
 8010ff8:	5555553e 	.word	0x5555553e
 8010ffc:	3fc55555 	.word	0x3fc55555
 8011000:	40900000 	.word	0x40900000
 8011004:	4090cbff 	.word	0x4090cbff
 8011008:	3f6f3400 	.word	0x3f6f3400
 801100c:	4090cc00 	.word	0x4090cc00
 8011010:	3fe00000 	.word	0x3fe00000
 8011014:	fff00000 	.word	0xfff00000
 8011018:	3ff00000 	.word	0x3ff00000
 801101c:	652b82fe 	.word	0x652b82fe
 8011020:	3c971547 	.word	0x3c971547
 8011024:	00000000 	.word	0x00000000

08011028 <atan>:
 8011028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801102c:	ec55 4b10 	vmov	r4, r5, d0
 8011030:	4bbf      	ldr	r3, [pc, #764]	@ (8011330 <atan+0x308>)
 8011032:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8011036:	429e      	cmp	r6, r3
 8011038:	46ab      	mov	fp, r5
 801103a:	d918      	bls.n	801106e <atan+0x46>
 801103c:	4bbd      	ldr	r3, [pc, #756]	@ (8011334 <atan+0x30c>)
 801103e:	429e      	cmp	r6, r3
 8011040:	d801      	bhi.n	8011046 <atan+0x1e>
 8011042:	d109      	bne.n	8011058 <atan+0x30>
 8011044:	b144      	cbz	r4, 8011058 <atan+0x30>
 8011046:	4622      	mov	r2, r4
 8011048:	462b      	mov	r3, r5
 801104a:	4620      	mov	r0, r4
 801104c:	4629      	mov	r1, r5
 801104e:	f7ef f925 	bl	800029c <__adddf3>
 8011052:	4604      	mov	r4, r0
 8011054:	460d      	mov	r5, r1
 8011056:	e006      	b.n	8011066 <atan+0x3e>
 8011058:	f1bb 0f00 	cmp.w	fp, #0
 801105c:	f340 812b 	ble.w	80112b6 <atan+0x28e>
 8011060:	a597      	add	r5, pc, #604	@ (adr r5, 80112c0 <atan+0x298>)
 8011062:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011066:	ec45 4b10 	vmov	d0, r4, r5
 801106a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801106e:	4bb2      	ldr	r3, [pc, #712]	@ (8011338 <atan+0x310>)
 8011070:	429e      	cmp	r6, r3
 8011072:	d813      	bhi.n	801109c <atan+0x74>
 8011074:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8011078:	429e      	cmp	r6, r3
 801107a:	d80c      	bhi.n	8011096 <atan+0x6e>
 801107c:	a392      	add	r3, pc, #584	@ (adr r3, 80112c8 <atan+0x2a0>)
 801107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011082:	4620      	mov	r0, r4
 8011084:	4629      	mov	r1, r5
 8011086:	f7ef f909 	bl	800029c <__adddf3>
 801108a:	4bac      	ldr	r3, [pc, #688]	@ (801133c <atan+0x314>)
 801108c:	2200      	movs	r2, #0
 801108e:	f7ef fd4b 	bl	8000b28 <__aeabi_dcmpgt>
 8011092:	2800      	cmp	r0, #0
 8011094:	d1e7      	bne.n	8011066 <atan+0x3e>
 8011096:	f04f 3aff 	mov.w	sl, #4294967295
 801109a:	e029      	b.n	80110f0 <atan+0xc8>
 801109c:	f7fe fdb4 	bl	800fc08 <fabs>
 80110a0:	4ba7      	ldr	r3, [pc, #668]	@ (8011340 <atan+0x318>)
 80110a2:	429e      	cmp	r6, r3
 80110a4:	ec55 4b10 	vmov	r4, r5, d0
 80110a8:	f200 80bc 	bhi.w	8011224 <atan+0x1fc>
 80110ac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80110b0:	429e      	cmp	r6, r3
 80110b2:	f200 809e 	bhi.w	80111f2 <atan+0x1ca>
 80110b6:	4622      	mov	r2, r4
 80110b8:	462b      	mov	r3, r5
 80110ba:	4620      	mov	r0, r4
 80110bc:	4629      	mov	r1, r5
 80110be:	f7ef f8ed 	bl	800029c <__adddf3>
 80110c2:	4b9e      	ldr	r3, [pc, #632]	@ (801133c <atan+0x314>)
 80110c4:	2200      	movs	r2, #0
 80110c6:	f7ef f8e7 	bl	8000298 <__aeabi_dsub>
 80110ca:	2200      	movs	r2, #0
 80110cc:	4606      	mov	r6, r0
 80110ce:	460f      	mov	r7, r1
 80110d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80110d4:	4620      	mov	r0, r4
 80110d6:	4629      	mov	r1, r5
 80110d8:	f7ef f8e0 	bl	800029c <__adddf3>
 80110dc:	4602      	mov	r2, r0
 80110de:	460b      	mov	r3, r1
 80110e0:	4630      	mov	r0, r6
 80110e2:	4639      	mov	r1, r7
 80110e4:	f7ef fbba 	bl	800085c <__aeabi_ddiv>
 80110e8:	f04f 0a00 	mov.w	sl, #0
 80110ec:	4604      	mov	r4, r0
 80110ee:	460d      	mov	r5, r1
 80110f0:	4622      	mov	r2, r4
 80110f2:	462b      	mov	r3, r5
 80110f4:	4620      	mov	r0, r4
 80110f6:	4629      	mov	r1, r5
 80110f8:	f7ef fa86 	bl	8000608 <__aeabi_dmul>
 80110fc:	4602      	mov	r2, r0
 80110fe:	460b      	mov	r3, r1
 8011100:	4680      	mov	r8, r0
 8011102:	4689      	mov	r9, r1
 8011104:	f7ef fa80 	bl	8000608 <__aeabi_dmul>
 8011108:	a371      	add	r3, pc, #452	@ (adr r3, 80112d0 <atan+0x2a8>)
 801110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110e:	4606      	mov	r6, r0
 8011110:	460f      	mov	r7, r1
 8011112:	f7ef fa79 	bl	8000608 <__aeabi_dmul>
 8011116:	a370      	add	r3, pc, #448	@ (adr r3, 80112d8 <atan+0x2b0>)
 8011118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111c:	f7ef f8be 	bl	800029c <__adddf3>
 8011120:	4632      	mov	r2, r6
 8011122:	463b      	mov	r3, r7
 8011124:	f7ef fa70 	bl	8000608 <__aeabi_dmul>
 8011128:	a36d      	add	r3, pc, #436	@ (adr r3, 80112e0 <atan+0x2b8>)
 801112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112e:	f7ef f8b5 	bl	800029c <__adddf3>
 8011132:	4632      	mov	r2, r6
 8011134:	463b      	mov	r3, r7
 8011136:	f7ef fa67 	bl	8000608 <__aeabi_dmul>
 801113a:	a36b      	add	r3, pc, #428	@ (adr r3, 80112e8 <atan+0x2c0>)
 801113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011140:	f7ef f8ac 	bl	800029c <__adddf3>
 8011144:	4632      	mov	r2, r6
 8011146:	463b      	mov	r3, r7
 8011148:	f7ef fa5e 	bl	8000608 <__aeabi_dmul>
 801114c:	a368      	add	r3, pc, #416	@ (adr r3, 80112f0 <atan+0x2c8>)
 801114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011152:	f7ef f8a3 	bl	800029c <__adddf3>
 8011156:	4632      	mov	r2, r6
 8011158:	463b      	mov	r3, r7
 801115a:	f7ef fa55 	bl	8000608 <__aeabi_dmul>
 801115e:	a366      	add	r3, pc, #408	@ (adr r3, 80112f8 <atan+0x2d0>)
 8011160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011164:	f7ef f89a 	bl	800029c <__adddf3>
 8011168:	4642      	mov	r2, r8
 801116a:	464b      	mov	r3, r9
 801116c:	f7ef fa4c 	bl	8000608 <__aeabi_dmul>
 8011170:	a363      	add	r3, pc, #396	@ (adr r3, 8011300 <atan+0x2d8>)
 8011172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011176:	4680      	mov	r8, r0
 8011178:	4689      	mov	r9, r1
 801117a:	4630      	mov	r0, r6
 801117c:	4639      	mov	r1, r7
 801117e:	f7ef fa43 	bl	8000608 <__aeabi_dmul>
 8011182:	a361      	add	r3, pc, #388	@ (adr r3, 8011308 <atan+0x2e0>)
 8011184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011188:	f7ef f886 	bl	8000298 <__aeabi_dsub>
 801118c:	4632      	mov	r2, r6
 801118e:	463b      	mov	r3, r7
 8011190:	f7ef fa3a 	bl	8000608 <__aeabi_dmul>
 8011194:	a35e      	add	r3, pc, #376	@ (adr r3, 8011310 <atan+0x2e8>)
 8011196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119a:	f7ef f87d 	bl	8000298 <__aeabi_dsub>
 801119e:	4632      	mov	r2, r6
 80111a0:	463b      	mov	r3, r7
 80111a2:	f7ef fa31 	bl	8000608 <__aeabi_dmul>
 80111a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8011318 <atan+0x2f0>)
 80111a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ac:	f7ef f874 	bl	8000298 <__aeabi_dsub>
 80111b0:	4632      	mov	r2, r6
 80111b2:	463b      	mov	r3, r7
 80111b4:	f7ef fa28 	bl	8000608 <__aeabi_dmul>
 80111b8:	a359      	add	r3, pc, #356	@ (adr r3, 8011320 <atan+0x2f8>)
 80111ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111be:	f7ef f86b 	bl	8000298 <__aeabi_dsub>
 80111c2:	4632      	mov	r2, r6
 80111c4:	463b      	mov	r3, r7
 80111c6:	f7ef fa1f 	bl	8000608 <__aeabi_dmul>
 80111ca:	4602      	mov	r2, r0
 80111cc:	460b      	mov	r3, r1
 80111ce:	4640      	mov	r0, r8
 80111d0:	4649      	mov	r1, r9
 80111d2:	f7ef f863 	bl	800029c <__adddf3>
 80111d6:	4622      	mov	r2, r4
 80111d8:	462b      	mov	r3, r5
 80111da:	f7ef fa15 	bl	8000608 <__aeabi_dmul>
 80111de:	f1ba 3fff 	cmp.w	sl, #4294967295
 80111e2:	4602      	mov	r2, r0
 80111e4:	460b      	mov	r3, r1
 80111e6:	d148      	bne.n	801127a <atan+0x252>
 80111e8:	4620      	mov	r0, r4
 80111ea:	4629      	mov	r1, r5
 80111ec:	f7ef f854 	bl	8000298 <__aeabi_dsub>
 80111f0:	e72f      	b.n	8011052 <atan+0x2a>
 80111f2:	4b52      	ldr	r3, [pc, #328]	@ (801133c <atan+0x314>)
 80111f4:	2200      	movs	r2, #0
 80111f6:	4620      	mov	r0, r4
 80111f8:	4629      	mov	r1, r5
 80111fa:	f7ef f84d 	bl	8000298 <__aeabi_dsub>
 80111fe:	4b4f      	ldr	r3, [pc, #316]	@ (801133c <atan+0x314>)
 8011200:	4606      	mov	r6, r0
 8011202:	460f      	mov	r7, r1
 8011204:	2200      	movs	r2, #0
 8011206:	4620      	mov	r0, r4
 8011208:	4629      	mov	r1, r5
 801120a:	f7ef f847 	bl	800029c <__adddf3>
 801120e:	4602      	mov	r2, r0
 8011210:	460b      	mov	r3, r1
 8011212:	4630      	mov	r0, r6
 8011214:	4639      	mov	r1, r7
 8011216:	f7ef fb21 	bl	800085c <__aeabi_ddiv>
 801121a:	f04f 0a01 	mov.w	sl, #1
 801121e:	4604      	mov	r4, r0
 8011220:	460d      	mov	r5, r1
 8011222:	e765      	b.n	80110f0 <atan+0xc8>
 8011224:	4b47      	ldr	r3, [pc, #284]	@ (8011344 <atan+0x31c>)
 8011226:	429e      	cmp	r6, r3
 8011228:	d21c      	bcs.n	8011264 <atan+0x23c>
 801122a:	4b47      	ldr	r3, [pc, #284]	@ (8011348 <atan+0x320>)
 801122c:	2200      	movs	r2, #0
 801122e:	4620      	mov	r0, r4
 8011230:	4629      	mov	r1, r5
 8011232:	f7ef f831 	bl	8000298 <__aeabi_dsub>
 8011236:	4b44      	ldr	r3, [pc, #272]	@ (8011348 <atan+0x320>)
 8011238:	4606      	mov	r6, r0
 801123a:	460f      	mov	r7, r1
 801123c:	2200      	movs	r2, #0
 801123e:	4620      	mov	r0, r4
 8011240:	4629      	mov	r1, r5
 8011242:	f7ef f9e1 	bl	8000608 <__aeabi_dmul>
 8011246:	4b3d      	ldr	r3, [pc, #244]	@ (801133c <atan+0x314>)
 8011248:	2200      	movs	r2, #0
 801124a:	f7ef f827 	bl	800029c <__adddf3>
 801124e:	4602      	mov	r2, r0
 8011250:	460b      	mov	r3, r1
 8011252:	4630      	mov	r0, r6
 8011254:	4639      	mov	r1, r7
 8011256:	f7ef fb01 	bl	800085c <__aeabi_ddiv>
 801125a:	f04f 0a02 	mov.w	sl, #2
 801125e:	4604      	mov	r4, r0
 8011260:	460d      	mov	r5, r1
 8011262:	e745      	b.n	80110f0 <atan+0xc8>
 8011264:	4622      	mov	r2, r4
 8011266:	462b      	mov	r3, r5
 8011268:	4938      	ldr	r1, [pc, #224]	@ (801134c <atan+0x324>)
 801126a:	2000      	movs	r0, #0
 801126c:	f7ef faf6 	bl	800085c <__aeabi_ddiv>
 8011270:	f04f 0a03 	mov.w	sl, #3
 8011274:	4604      	mov	r4, r0
 8011276:	460d      	mov	r5, r1
 8011278:	e73a      	b.n	80110f0 <atan+0xc8>
 801127a:	4b35      	ldr	r3, [pc, #212]	@ (8011350 <atan+0x328>)
 801127c:	4e35      	ldr	r6, [pc, #212]	@ (8011354 <atan+0x32c>)
 801127e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011286:	f7ef f807 	bl	8000298 <__aeabi_dsub>
 801128a:	4622      	mov	r2, r4
 801128c:	462b      	mov	r3, r5
 801128e:	f7ef f803 	bl	8000298 <__aeabi_dsub>
 8011292:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8011296:	4602      	mov	r2, r0
 8011298:	460b      	mov	r3, r1
 801129a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801129e:	f7ee fffb 	bl	8000298 <__aeabi_dsub>
 80112a2:	f1bb 0f00 	cmp.w	fp, #0
 80112a6:	4604      	mov	r4, r0
 80112a8:	460d      	mov	r5, r1
 80112aa:	f6bf aedc 	bge.w	8011066 <atan+0x3e>
 80112ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80112b2:	461d      	mov	r5, r3
 80112b4:	e6d7      	b.n	8011066 <atan+0x3e>
 80112b6:	a51c      	add	r5, pc, #112	@ (adr r5, 8011328 <atan+0x300>)
 80112b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80112bc:	e6d3      	b.n	8011066 <atan+0x3e>
 80112be:	bf00      	nop
 80112c0:	54442d18 	.word	0x54442d18
 80112c4:	3ff921fb 	.word	0x3ff921fb
 80112c8:	8800759c 	.word	0x8800759c
 80112cc:	7e37e43c 	.word	0x7e37e43c
 80112d0:	e322da11 	.word	0xe322da11
 80112d4:	3f90ad3a 	.word	0x3f90ad3a
 80112d8:	24760deb 	.word	0x24760deb
 80112dc:	3fa97b4b 	.word	0x3fa97b4b
 80112e0:	a0d03d51 	.word	0xa0d03d51
 80112e4:	3fb10d66 	.word	0x3fb10d66
 80112e8:	c54c206e 	.word	0xc54c206e
 80112ec:	3fb745cd 	.word	0x3fb745cd
 80112f0:	920083ff 	.word	0x920083ff
 80112f4:	3fc24924 	.word	0x3fc24924
 80112f8:	5555550d 	.word	0x5555550d
 80112fc:	3fd55555 	.word	0x3fd55555
 8011300:	2c6a6c2f 	.word	0x2c6a6c2f
 8011304:	bfa2b444 	.word	0xbfa2b444
 8011308:	52defd9a 	.word	0x52defd9a
 801130c:	3fadde2d 	.word	0x3fadde2d
 8011310:	af749a6d 	.word	0xaf749a6d
 8011314:	3fb3b0f2 	.word	0x3fb3b0f2
 8011318:	fe231671 	.word	0xfe231671
 801131c:	3fbc71c6 	.word	0x3fbc71c6
 8011320:	9998ebc4 	.word	0x9998ebc4
 8011324:	3fc99999 	.word	0x3fc99999
 8011328:	54442d18 	.word	0x54442d18
 801132c:	bff921fb 	.word	0xbff921fb
 8011330:	440fffff 	.word	0x440fffff
 8011334:	7ff00000 	.word	0x7ff00000
 8011338:	3fdbffff 	.word	0x3fdbffff
 801133c:	3ff00000 	.word	0x3ff00000
 8011340:	3ff2ffff 	.word	0x3ff2ffff
 8011344:	40038000 	.word	0x40038000
 8011348:	3ff80000 	.word	0x3ff80000
 801134c:	bff00000 	.word	0xbff00000
 8011350:	08012a78 	.word	0x08012a78
 8011354:	08012a98 	.word	0x08012a98

08011358 <__kernel_cosf>:
 8011358:	ee10 3a10 	vmov	r3, s0
 801135c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011360:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011364:	eef0 6a40 	vmov.f32	s13, s0
 8011368:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801136c:	d204      	bcs.n	8011378 <__kernel_cosf+0x20>
 801136e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8011372:	ee17 2a90 	vmov	r2, s15
 8011376:	b342      	cbz	r2, 80113ca <__kernel_cosf+0x72>
 8011378:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801137c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80113e8 <__kernel_cosf+0x90>
 8011380:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80113ec <__kernel_cosf+0x94>
 8011384:	4a1a      	ldr	r2, [pc, #104]	@ (80113f0 <__kernel_cosf+0x98>)
 8011386:	eea7 6a27 	vfma.f32	s12, s14, s15
 801138a:	4293      	cmp	r3, r2
 801138c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80113f4 <__kernel_cosf+0x9c>
 8011390:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011394:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80113f8 <__kernel_cosf+0xa0>
 8011398:	eea7 6a87 	vfma.f32	s12, s15, s14
 801139c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80113fc <__kernel_cosf+0xa4>
 80113a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80113a4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8011400 <__kernel_cosf+0xa8>
 80113a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80113ac:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80113b0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80113b4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80113b8:	eee7 0a06 	vfma.f32	s1, s14, s12
 80113bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113c0:	d804      	bhi.n	80113cc <__kernel_cosf+0x74>
 80113c2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80113c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80113ca:	4770      	bx	lr
 80113cc:	4a0d      	ldr	r2, [pc, #52]	@ (8011404 <__kernel_cosf+0xac>)
 80113ce:	4293      	cmp	r3, r2
 80113d0:	bf9a      	itte	ls
 80113d2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80113d6:	ee07 3a10 	vmovls	s14, r3
 80113da:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80113de:	ee30 0a47 	vsub.f32	s0, s0, s14
 80113e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80113e6:	e7ec      	b.n	80113c2 <__kernel_cosf+0x6a>
 80113e8:	ad47d74e 	.word	0xad47d74e
 80113ec:	310f74f6 	.word	0x310f74f6
 80113f0:	3e999999 	.word	0x3e999999
 80113f4:	b493f27c 	.word	0xb493f27c
 80113f8:	37d00d01 	.word	0x37d00d01
 80113fc:	bab60b61 	.word	0xbab60b61
 8011400:	3d2aaaab 	.word	0x3d2aaaab
 8011404:	3f480000 	.word	0x3f480000

08011408 <__kernel_sinf>:
 8011408:	ee10 3a10 	vmov	r3, s0
 801140c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011410:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011414:	d204      	bcs.n	8011420 <__kernel_sinf+0x18>
 8011416:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801141a:	ee17 3a90 	vmov	r3, s15
 801141e:	b35b      	cbz	r3, 8011478 <__kernel_sinf+0x70>
 8011420:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011424:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801147c <__kernel_sinf+0x74>
 8011428:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8011480 <__kernel_sinf+0x78>
 801142c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011430:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8011484 <__kernel_sinf+0x7c>
 8011434:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011438:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8011488 <__kernel_sinf+0x80>
 801143c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011440:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801148c <__kernel_sinf+0x84>
 8011444:	ee60 6a07 	vmul.f32	s13, s0, s14
 8011448:	eee6 7a07 	vfma.f32	s15, s12, s14
 801144c:	b930      	cbnz	r0, 801145c <__kernel_sinf+0x54>
 801144e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8011490 <__kernel_sinf+0x88>
 8011452:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011456:	eea6 0a26 	vfma.f32	s0, s12, s13
 801145a:	4770      	bx	lr
 801145c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011460:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8011464:	eee0 7a86 	vfma.f32	s15, s1, s12
 8011468:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801146c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8011494 <__kernel_sinf+0x8c>
 8011470:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8011474:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011478:	4770      	bx	lr
 801147a:	bf00      	nop
 801147c:	2f2ec9d3 	.word	0x2f2ec9d3
 8011480:	b2d72f34 	.word	0xb2d72f34
 8011484:	3638ef1b 	.word	0x3638ef1b
 8011488:	b9500d01 	.word	0xb9500d01
 801148c:	3c088889 	.word	0x3c088889
 8011490:	be2aaaab 	.word	0xbe2aaaab
 8011494:	3e2aaaab 	.word	0x3e2aaaab

08011498 <__kernel_tanf>:
 8011498:	b508      	push	{r3, lr}
 801149a:	ee10 3a10 	vmov	r3, s0
 801149e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80114a2:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 80114a6:	eef0 7a40 	vmov.f32	s15, s0
 80114aa:	d217      	bcs.n	80114dc <__kernel_tanf+0x44>
 80114ac:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80114b0:	ee17 1a10 	vmov	r1, s14
 80114b4:	bb41      	cbnz	r1, 8011508 <__kernel_tanf+0x70>
 80114b6:	1c43      	adds	r3, r0, #1
 80114b8:	4313      	orrs	r3, r2
 80114ba:	d108      	bne.n	80114ce <__kernel_tanf+0x36>
 80114bc:	f7fe fc3c 	bl	800fd38 <fabsf>
 80114c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80114c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80114c8:	eeb0 0a67 	vmov.f32	s0, s15
 80114cc:	bd08      	pop	{r3, pc}
 80114ce:	2801      	cmp	r0, #1
 80114d0:	d0fa      	beq.n	80114c8 <__kernel_tanf+0x30>
 80114d2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80114d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80114da:	e7f5      	b.n	80114c8 <__kernel_tanf+0x30>
 80114dc:	494c      	ldr	r1, [pc, #304]	@ (8011610 <__kernel_tanf+0x178>)
 80114de:	428a      	cmp	r2, r1
 80114e0:	d312      	bcc.n	8011508 <__kernel_tanf+0x70>
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8011614 <__kernel_tanf+0x17c>
 80114e8:	bfb8      	it	lt
 80114ea:	eef1 7a40 	vneglt.f32	s15, s0
 80114ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80114f2:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8011618 <__kernel_tanf+0x180>
 80114f6:	bfb8      	it	lt
 80114f8:	eef1 0a60 	vneglt.f32	s1, s1
 80114fc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011500:	eddf 0a46 	vldr	s1, [pc, #280]	@ 801161c <__kernel_tanf+0x184>
 8011504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011508:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801150c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8011620 <__kernel_tanf+0x188>
 8011510:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8011624 <__kernel_tanf+0x18c>
 8011514:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8011628 <__kernel_tanf+0x190>
 8011518:	493d      	ldr	r1, [pc, #244]	@ (8011610 <__kernel_tanf+0x178>)
 801151a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801151e:	428a      	cmp	r2, r1
 8011520:	eea7 6a25 	vfma.f32	s12, s14, s11
 8011524:	eddf 5a41 	vldr	s11, [pc, #260]	@ 801162c <__kernel_tanf+0x194>
 8011528:	eee6 5a07 	vfma.f32	s11, s12, s14
 801152c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8011630 <__kernel_tanf+0x198>
 8011530:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011534:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011634 <__kernel_tanf+0x19c>
 8011538:	eee6 5a07 	vfma.f32	s11, s12, s14
 801153c:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8011638 <__kernel_tanf+0x1a0>
 8011540:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011544:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 801163c <__kernel_tanf+0x1a4>
 8011548:	eee7 5a05 	vfma.f32	s11, s14, s10
 801154c:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8011640 <__kernel_tanf+0x1a8>
 8011550:	eea5 5a87 	vfma.f32	s10, s11, s14
 8011554:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8011644 <__kernel_tanf+0x1ac>
 8011558:	eee5 5a07 	vfma.f32	s11, s10, s14
 801155c:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8011648 <__kernel_tanf+0x1b0>
 8011560:	eea5 5a87 	vfma.f32	s10, s11, s14
 8011564:	eddf 5a39 	vldr	s11, [pc, #228]	@ 801164c <__kernel_tanf+0x1b4>
 8011568:	eee5 5a07 	vfma.f32	s11, s10, s14
 801156c:	eeb0 7a46 	vmov.f32	s14, s12
 8011570:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011574:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8011578:	eeb0 6a60 	vmov.f32	s12, s1
 801157c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8011580:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8011650 <__kernel_tanf+0x1b8>
 8011584:	eee6 0a26 	vfma.f32	s1, s12, s13
 8011588:	eee5 0a07 	vfma.f32	s1, s10, s14
 801158c:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8011590:	d31d      	bcc.n	80115ce <__kernel_tanf+0x136>
 8011592:	ee07 0a10 	vmov	s14, r0
 8011596:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801159a:	ee26 5a06 	vmul.f32	s10, s12, s12
 801159e:	ee36 6a07 	vadd.f32	s12, s12, s14
 80115a2:	179b      	asrs	r3, r3, #30
 80115a4:	eec5 5a06 	vdiv.f32	s11, s10, s12
 80115a8:	f003 0302 	and.w	r3, r3, #2
 80115ac:	f1c3 0301 	rsb	r3, r3, #1
 80115b0:	ee06 3a90 	vmov	s13, r3
 80115b4:	ee35 6ae0 	vsub.f32	s12, s11, s1
 80115b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80115bc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80115c0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80115c4:	eea7 7ac6 	vfms.f32	s14, s15, s12
 80115c8:	ee66 7a87 	vmul.f32	s15, s13, s14
 80115cc:	e77c      	b.n	80114c8 <__kernel_tanf+0x30>
 80115ce:	2801      	cmp	r0, #1
 80115d0:	d01b      	beq.n	801160a <__kernel_tanf+0x172>
 80115d2:	4b20      	ldr	r3, [pc, #128]	@ (8011654 <__kernel_tanf+0x1bc>)
 80115d4:	ee16 2a10 	vmov	r2, s12
 80115d8:	401a      	ands	r2, r3
 80115da:	ee05 2a90 	vmov	s11, r2
 80115de:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80115e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80115e6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80115ea:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80115ee:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80115f2:	ee16 2a90 	vmov	r2, s13
 80115f6:	4013      	ands	r3, r2
 80115f8:	ee07 3a90 	vmov	s15, r3
 80115fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011600:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8011604:	eee7 7a26 	vfma.f32	s15, s14, s13
 8011608:	e75e      	b.n	80114c8 <__kernel_tanf+0x30>
 801160a:	eef0 7a46 	vmov.f32	s15, s12
 801160e:	e75b      	b.n	80114c8 <__kernel_tanf+0x30>
 8011610:	3f2ca140 	.word	0x3f2ca140
 8011614:	3f490fda 	.word	0x3f490fda
 8011618:	33222168 	.word	0x33222168
 801161c:	00000000 	.word	0x00000000
 8011620:	b79bae5f 	.word	0xb79bae5f
 8011624:	38a3f445 	.word	0x38a3f445
 8011628:	37d95384 	.word	0x37d95384
 801162c:	3a1a26c8 	.word	0x3a1a26c8
 8011630:	3b6b6916 	.word	0x3b6b6916
 8011634:	3cb327a4 	.word	0x3cb327a4
 8011638:	3e088889 	.word	0x3e088889
 801163c:	3895c07a 	.word	0x3895c07a
 8011640:	398137b9 	.word	0x398137b9
 8011644:	3abede48 	.word	0x3abede48
 8011648:	3c11371f 	.word	0x3c11371f
 801164c:	3d5d0dd1 	.word	0x3d5d0dd1
 8011650:	3eaaaaab 	.word	0x3eaaaaab
 8011654:	fffff000 	.word	0xfffff000

08011658 <__ieee754_asinf>:
 8011658:	b538      	push	{r3, r4, r5, lr}
 801165a:	ee10 5a10 	vmov	r5, s0
 801165e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011662:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8011666:	ed2d 8b04 	vpush	{d8-d9}
 801166a:	d10c      	bne.n	8011686 <__ieee754_asinf+0x2e>
 801166c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80117e0 <__ieee754_asinf+0x188>
 8011670:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80117e4 <__ieee754_asinf+0x18c>
 8011674:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011678:	eee0 7a07 	vfma.f32	s15, s0, s14
 801167c:	eeb0 0a67 	vmov.f32	s0, s15
 8011680:	ecbd 8b04 	vpop	{d8-d9}
 8011684:	bd38      	pop	{r3, r4, r5, pc}
 8011686:	d904      	bls.n	8011692 <__ieee754_asinf+0x3a>
 8011688:	ee70 7a40 	vsub.f32	s15, s0, s0
 801168c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011690:	e7f6      	b.n	8011680 <__ieee754_asinf+0x28>
 8011692:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8011696:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801169a:	d20b      	bcs.n	80116b4 <__ieee754_asinf+0x5c>
 801169c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 80116a0:	d252      	bcs.n	8011748 <__ieee754_asinf+0xf0>
 80116a2:	eddf 7a51 	vldr	s15, [pc, #324]	@ 80117e8 <__ieee754_asinf+0x190>
 80116a6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80116aa:	eef4 7ae8 	vcmpe.f32	s15, s17
 80116ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b2:	dce5      	bgt.n	8011680 <__ieee754_asinf+0x28>
 80116b4:	f7fe fb40 	bl	800fd38 <fabsf>
 80116b8:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80116bc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80116c0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80116c4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80117ec <__ieee754_asinf+0x194>
 80116c8:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80117f0 <__ieee754_asinf+0x198>
 80116cc:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 80117f4 <__ieee754_asinf+0x19c>
 80116d0:	eea8 7a27 	vfma.f32	s14, s16, s15
 80116d4:	eddf 7a48 	vldr	s15, [pc, #288]	@ 80117f8 <__ieee754_asinf+0x1a0>
 80116d8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80116dc:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80117fc <__ieee754_asinf+0x1a4>
 80116e0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80116e4:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8011800 <__ieee754_asinf+0x1a8>
 80116e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80116ec:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8011804 <__ieee754_asinf+0x1ac>
 80116f0:	eea7 9a88 	vfma.f32	s18, s15, s16
 80116f4:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8011808 <__ieee754_asinf+0x1b0>
 80116f8:	eee8 7a07 	vfma.f32	s15, s16, s14
 80116fc:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 801180c <__ieee754_asinf+0x1b4>
 8011700:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011704:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8011810 <__ieee754_asinf+0x1b8>
 8011708:	eee7 7a08 	vfma.f32	s15, s14, s16
 801170c:	eeb0 0a48 	vmov.f32	s0, s16
 8011710:	eee7 8a88 	vfma.f32	s17, s15, s16
 8011714:	f7fe fc6c 	bl	800fff0 <__ieee754_sqrtf>
 8011718:	4b3e      	ldr	r3, [pc, #248]	@ (8011814 <__ieee754_asinf+0x1bc>)
 801171a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801171e:	429c      	cmp	r4, r3
 8011720:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8011724:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011728:	d93d      	bls.n	80117a6 <__ieee754_asinf+0x14e>
 801172a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801172e:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8011818 <__ieee754_asinf+0x1c0>
 8011732:	eee0 7a26 	vfma.f32	s15, s0, s13
 8011736:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 80117e4 <__ieee754_asinf+0x18c>
 801173a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801173e:	2d00      	cmp	r5, #0
 8011740:	bfd8      	it	le
 8011742:	eeb1 0a40 	vnegle.f32	s0, s0
 8011746:	e79b      	b.n	8011680 <__ieee754_asinf+0x28>
 8011748:	ee60 7a00 	vmul.f32	s15, s0, s0
 801174c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80117f0 <__ieee754_asinf+0x198>
 8011750:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80117ec <__ieee754_asinf+0x194>
 8011754:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8011804 <__ieee754_asinf+0x1ac>
 8011758:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801175c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80117f8 <__ieee754_asinf+0x1a0>
 8011760:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011764:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80117fc <__ieee754_asinf+0x1a4>
 8011768:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801176c:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8011800 <__ieee754_asinf+0x1a8>
 8011770:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011774:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80117f4 <__ieee754_asinf+0x19c>
 8011778:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801177c:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8011808 <__ieee754_asinf+0x1b0>
 8011780:	eee7 6a86 	vfma.f32	s13, s15, s12
 8011784:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 801180c <__ieee754_asinf+0x1b4>
 8011788:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801178c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8011810 <__ieee754_asinf+0x1b8>
 8011790:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011798:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801179c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80117a0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80117a4:	e76c      	b.n	8011680 <__ieee754_asinf+0x28>
 80117a6:	ee10 3a10 	vmov	r3, s0
 80117aa:	f36f 030b 	bfc	r3, #0, #12
 80117ae:	ee07 3a10 	vmov	s14, r3
 80117b2:	eea7 8a47 	vfms.f32	s16, s14, s14
 80117b6:	ee70 5a00 	vadd.f32	s11, s0, s0
 80117ba:	ee30 0a07 	vadd.f32	s0, s0, s14
 80117be:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80117e0 <__ieee754_asinf+0x188>
 80117c2:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80117c6:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801181c <__ieee754_asinf+0x1c4>
 80117ca:	eee5 7a66 	vfms.f32	s15, s10, s13
 80117ce:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80117d2:	eeb0 6a40 	vmov.f32	s12, s0
 80117d6:	eea7 6a66 	vfms.f32	s12, s14, s13
 80117da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80117de:	e7ac      	b.n	801173a <__ieee754_asinf+0xe2>
 80117e0:	b33bbd2e 	.word	0xb33bbd2e
 80117e4:	3fc90fdb 	.word	0x3fc90fdb
 80117e8:	7149f2ca 	.word	0x7149f2ca
 80117ec:	3a4f7f04 	.word	0x3a4f7f04
 80117f0:	3811ef08 	.word	0x3811ef08
 80117f4:	3e2aaaab 	.word	0x3e2aaaab
 80117f8:	bd241146 	.word	0xbd241146
 80117fc:	3e4e0aa8 	.word	0x3e4e0aa8
 8011800:	bea6b090 	.word	0xbea6b090
 8011804:	3d9dc62e 	.word	0x3d9dc62e
 8011808:	bf303361 	.word	0xbf303361
 801180c:	4001572d 	.word	0x4001572d
 8011810:	c019d139 	.word	0xc019d139
 8011814:	3f799999 	.word	0x3f799999
 8011818:	333bbd2e 	.word	0x333bbd2e
 801181c:	3f490fdb 	.word	0x3f490fdb

08011820 <__ieee754_atan2f>:
 8011820:	ee10 2a90 	vmov	r2, s1
 8011824:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8011828:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801182c:	b510      	push	{r4, lr}
 801182e:	eef0 7a40 	vmov.f32	s15, s0
 8011832:	d806      	bhi.n	8011842 <__ieee754_atan2f+0x22>
 8011834:	ee10 0a10 	vmov	r0, s0
 8011838:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801183c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011840:	d904      	bls.n	801184c <__ieee754_atan2f+0x2c>
 8011842:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011846:	eeb0 0a67 	vmov.f32	s0, s15
 801184a:	bd10      	pop	{r4, pc}
 801184c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8011850:	d103      	bne.n	801185a <__ieee754_atan2f+0x3a>
 8011852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011856:	f000 b9b3 	b.w	8011bc0 <atanf>
 801185a:	1794      	asrs	r4, r2, #30
 801185c:	f004 0402 	and.w	r4, r4, #2
 8011860:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011864:	b943      	cbnz	r3, 8011878 <__ieee754_atan2f+0x58>
 8011866:	2c02      	cmp	r4, #2
 8011868:	d05e      	beq.n	8011928 <__ieee754_atan2f+0x108>
 801186a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801193c <__ieee754_atan2f+0x11c>
 801186e:	2c03      	cmp	r4, #3
 8011870:	bf08      	it	eq
 8011872:	eef0 7a47 	vmoveq.f32	s15, s14
 8011876:	e7e6      	b.n	8011846 <__ieee754_atan2f+0x26>
 8011878:	b941      	cbnz	r1, 801188c <__ieee754_atan2f+0x6c>
 801187a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8011940 <__ieee754_atan2f+0x120>
 801187e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011944 <__ieee754_atan2f+0x124>
 8011882:	2800      	cmp	r0, #0
 8011884:	bfa8      	it	ge
 8011886:	eef0 7a47 	vmovge.f32	s15, s14
 801188a:	e7dc      	b.n	8011846 <__ieee754_atan2f+0x26>
 801188c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011890:	d110      	bne.n	80118b4 <__ieee754_atan2f+0x94>
 8011892:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011896:	f104 34ff 	add.w	r4, r4, #4294967295
 801189a:	d107      	bne.n	80118ac <__ieee754_atan2f+0x8c>
 801189c:	2c02      	cmp	r4, #2
 801189e:	d846      	bhi.n	801192e <__ieee754_atan2f+0x10e>
 80118a0:	4b29      	ldr	r3, [pc, #164]	@ (8011948 <__ieee754_atan2f+0x128>)
 80118a2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80118a6:	edd3 7a00 	vldr	s15, [r3]
 80118aa:	e7cc      	b.n	8011846 <__ieee754_atan2f+0x26>
 80118ac:	2c02      	cmp	r4, #2
 80118ae:	d841      	bhi.n	8011934 <__ieee754_atan2f+0x114>
 80118b0:	4b26      	ldr	r3, [pc, #152]	@ (801194c <__ieee754_atan2f+0x12c>)
 80118b2:	e7f6      	b.n	80118a2 <__ieee754_atan2f+0x82>
 80118b4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80118b8:	d0df      	beq.n	801187a <__ieee754_atan2f+0x5a>
 80118ba:	1a5b      	subs	r3, r3, r1
 80118bc:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80118c0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80118c4:	da1a      	bge.n	80118fc <__ieee754_atan2f+0xdc>
 80118c6:	2a00      	cmp	r2, #0
 80118c8:	da01      	bge.n	80118ce <__ieee754_atan2f+0xae>
 80118ca:	313c      	adds	r1, #60	@ 0x3c
 80118cc:	db19      	blt.n	8011902 <__ieee754_atan2f+0xe2>
 80118ce:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80118d2:	f7fe fa31 	bl	800fd38 <fabsf>
 80118d6:	f000 f973 	bl	8011bc0 <atanf>
 80118da:	eef0 7a40 	vmov.f32	s15, s0
 80118de:	2c01      	cmp	r4, #1
 80118e0:	d012      	beq.n	8011908 <__ieee754_atan2f+0xe8>
 80118e2:	2c02      	cmp	r4, #2
 80118e4:	d017      	beq.n	8011916 <__ieee754_atan2f+0xf6>
 80118e6:	2c00      	cmp	r4, #0
 80118e8:	d0ad      	beq.n	8011846 <__ieee754_atan2f+0x26>
 80118ea:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8011950 <__ieee754_atan2f+0x130>
 80118ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80118f2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011954 <__ieee754_atan2f+0x134>
 80118f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80118fa:	e7a4      	b.n	8011846 <__ieee754_atan2f+0x26>
 80118fc:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8011944 <__ieee754_atan2f+0x124>
 8011900:	e7ed      	b.n	80118de <__ieee754_atan2f+0xbe>
 8011902:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011958 <__ieee754_atan2f+0x138>
 8011906:	e7ea      	b.n	80118de <__ieee754_atan2f+0xbe>
 8011908:	ee17 3a90 	vmov	r3, s15
 801190c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011910:	ee07 3a90 	vmov	s15, r3
 8011914:	e797      	b.n	8011846 <__ieee754_atan2f+0x26>
 8011916:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011950 <__ieee754_atan2f+0x130>
 801191a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801191e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011954 <__ieee754_atan2f+0x134>
 8011922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011926:	e78e      	b.n	8011846 <__ieee754_atan2f+0x26>
 8011928:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8011954 <__ieee754_atan2f+0x134>
 801192c:	e78b      	b.n	8011846 <__ieee754_atan2f+0x26>
 801192e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801195c <__ieee754_atan2f+0x13c>
 8011932:	e788      	b.n	8011846 <__ieee754_atan2f+0x26>
 8011934:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011958 <__ieee754_atan2f+0x138>
 8011938:	e785      	b.n	8011846 <__ieee754_atan2f+0x26>
 801193a:	bf00      	nop
 801193c:	c0490fdb 	.word	0xc0490fdb
 8011940:	bfc90fdb 	.word	0xbfc90fdb
 8011944:	3fc90fdb 	.word	0x3fc90fdb
 8011948:	08012ac4 	.word	0x08012ac4
 801194c:	08012ab8 	.word	0x08012ab8
 8011950:	33bbbd2e 	.word	0x33bbbd2e
 8011954:	40490fdb 	.word	0x40490fdb
 8011958:	00000000 	.word	0x00000000
 801195c:	3f490fdb 	.word	0x3f490fdb

08011960 <__ieee754_rem_pio2f>:
 8011960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011962:	ee10 6a10 	vmov	r6, s0
 8011966:	4b88      	ldr	r3, [pc, #544]	@ (8011b88 <__ieee754_rem_pio2f+0x228>)
 8011968:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801196c:	429d      	cmp	r5, r3
 801196e:	b087      	sub	sp, #28
 8011970:	4604      	mov	r4, r0
 8011972:	d805      	bhi.n	8011980 <__ieee754_rem_pio2f+0x20>
 8011974:	2300      	movs	r3, #0
 8011976:	ed80 0a00 	vstr	s0, [r0]
 801197a:	6043      	str	r3, [r0, #4]
 801197c:	2000      	movs	r0, #0
 801197e:	e022      	b.n	80119c6 <__ieee754_rem_pio2f+0x66>
 8011980:	4b82      	ldr	r3, [pc, #520]	@ (8011b8c <__ieee754_rem_pio2f+0x22c>)
 8011982:	429d      	cmp	r5, r3
 8011984:	d83a      	bhi.n	80119fc <__ieee754_rem_pio2f+0x9c>
 8011986:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801198a:	2e00      	cmp	r6, #0
 801198c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011b90 <__ieee754_rem_pio2f+0x230>
 8011990:	4a80      	ldr	r2, [pc, #512]	@ (8011b94 <__ieee754_rem_pio2f+0x234>)
 8011992:	f023 030f 	bic.w	r3, r3, #15
 8011996:	dd18      	ble.n	80119ca <__ieee754_rem_pio2f+0x6a>
 8011998:	4293      	cmp	r3, r2
 801199a:	ee70 7a47 	vsub.f32	s15, s0, s14
 801199e:	bf09      	itett	eq
 80119a0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011b98 <__ieee754_rem_pio2f+0x238>
 80119a4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011b9c <__ieee754_rem_pio2f+0x23c>
 80119a8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011ba0 <__ieee754_rem_pio2f+0x240>
 80119ac:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80119b0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80119b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80119b8:	ed80 7a00 	vstr	s14, [r0]
 80119bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80119c0:	edc0 7a01 	vstr	s15, [r0, #4]
 80119c4:	2001      	movs	r0, #1
 80119c6:	b007      	add	sp, #28
 80119c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119ca:	4293      	cmp	r3, r2
 80119cc:	ee70 7a07 	vadd.f32	s15, s0, s14
 80119d0:	bf09      	itett	eq
 80119d2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011b98 <__ieee754_rem_pio2f+0x238>
 80119d6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011b9c <__ieee754_rem_pio2f+0x23c>
 80119da:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011ba0 <__ieee754_rem_pio2f+0x240>
 80119de:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80119e2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80119e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80119ea:	ed80 7a00 	vstr	s14, [r0]
 80119ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80119f2:	edc0 7a01 	vstr	s15, [r0, #4]
 80119f6:	f04f 30ff 	mov.w	r0, #4294967295
 80119fa:	e7e4      	b.n	80119c6 <__ieee754_rem_pio2f+0x66>
 80119fc:	4b69      	ldr	r3, [pc, #420]	@ (8011ba4 <__ieee754_rem_pio2f+0x244>)
 80119fe:	429d      	cmp	r5, r3
 8011a00:	d873      	bhi.n	8011aea <__ieee754_rem_pio2f+0x18a>
 8011a02:	f7fe f999 	bl	800fd38 <fabsf>
 8011a06:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011ba8 <__ieee754_rem_pio2f+0x248>
 8011a0a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011a0e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011a1a:	ee17 0a90 	vmov	r0, s15
 8011a1e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011b90 <__ieee754_rem_pio2f+0x230>
 8011a22:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011a26:	281f      	cmp	r0, #31
 8011a28:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011b9c <__ieee754_rem_pio2f+0x23c>
 8011a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a30:	eeb1 6a47 	vneg.f32	s12, s14
 8011a34:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011a38:	ee16 1a90 	vmov	r1, s13
 8011a3c:	dc09      	bgt.n	8011a52 <__ieee754_rem_pio2f+0xf2>
 8011a3e:	4a5b      	ldr	r2, [pc, #364]	@ (8011bac <__ieee754_rem_pio2f+0x24c>)
 8011a40:	1e47      	subs	r7, r0, #1
 8011a42:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011a46:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8011a4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d107      	bne.n	8011a62 <__ieee754_rem_pio2f+0x102>
 8011a52:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8011a56:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8011a5a:	2a08      	cmp	r2, #8
 8011a5c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8011a60:	dc14      	bgt.n	8011a8c <__ieee754_rem_pio2f+0x12c>
 8011a62:	6021      	str	r1, [r4, #0]
 8011a64:	ed94 7a00 	vldr	s14, [r4]
 8011a68:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011a6c:	2e00      	cmp	r6, #0
 8011a6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011a72:	ed84 0a01 	vstr	s0, [r4, #4]
 8011a76:	daa6      	bge.n	80119c6 <__ieee754_rem_pio2f+0x66>
 8011a78:	eeb1 7a47 	vneg.f32	s14, s14
 8011a7c:	eeb1 0a40 	vneg.f32	s0, s0
 8011a80:	ed84 7a00 	vstr	s14, [r4]
 8011a84:	ed84 0a01 	vstr	s0, [r4, #4]
 8011a88:	4240      	negs	r0, r0
 8011a8a:	e79c      	b.n	80119c6 <__ieee754_rem_pio2f+0x66>
 8011a8c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011b98 <__ieee754_rem_pio2f+0x238>
 8011a90:	eef0 6a40 	vmov.f32	s13, s0
 8011a94:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011a98:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011a9c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011aa0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011ba0 <__ieee754_rem_pio2f+0x240>
 8011aa4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011aa8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011aac:	ee15 2a90 	vmov	r2, s11
 8011ab0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011ab4:	1a5b      	subs	r3, r3, r1
 8011ab6:	2b19      	cmp	r3, #25
 8011ab8:	dc04      	bgt.n	8011ac4 <__ieee754_rem_pio2f+0x164>
 8011aba:	edc4 5a00 	vstr	s11, [r4]
 8011abe:	eeb0 0a66 	vmov.f32	s0, s13
 8011ac2:	e7cf      	b.n	8011a64 <__ieee754_rem_pio2f+0x104>
 8011ac4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011bb0 <__ieee754_rem_pio2f+0x250>
 8011ac8:	eeb0 0a66 	vmov.f32	s0, s13
 8011acc:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011ad0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011ad4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011bb4 <__ieee754_rem_pio2f+0x254>
 8011ad8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011adc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011ae0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011ae4:	ed84 7a00 	vstr	s14, [r4]
 8011ae8:	e7bc      	b.n	8011a64 <__ieee754_rem_pio2f+0x104>
 8011aea:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8011aee:	d306      	bcc.n	8011afe <__ieee754_rem_pio2f+0x19e>
 8011af0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011af4:	edc0 7a01 	vstr	s15, [r0, #4]
 8011af8:	edc0 7a00 	vstr	s15, [r0]
 8011afc:	e73e      	b.n	801197c <__ieee754_rem_pio2f+0x1c>
 8011afe:	15ea      	asrs	r2, r5, #23
 8011b00:	3a86      	subs	r2, #134	@ 0x86
 8011b02:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011b06:	ee07 3a90 	vmov	s15, r3
 8011b0a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011b0e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011bb8 <__ieee754_rem_pio2f+0x258>
 8011b12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011b16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b1a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011b1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011b22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011b26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011b2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b2e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011b32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011b36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b3e:	edcd 7a05 	vstr	s15, [sp, #20]
 8011b42:	d11e      	bne.n	8011b82 <__ieee754_rem_pio2f+0x222>
 8011b44:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b4c:	bf0c      	ite	eq
 8011b4e:	2301      	moveq	r3, #1
 8011b50:	2302      	movne	r3, #2
 8011b52:	491a      	ldr	r1, [pc, #104]	@ (8011bbc <__ieee754_rem_pio2f+0x25c>)
 8011b54:	9101      	str	r1, [sp, #4]
 8011b56:	2102      	movs	r1, #2
 8011b58:	9100      	str	r1, [sp, #0]
 8011b5a:	a803      	add	r0, sp, #12
 8011b5c:	4621      	mov	r1, r4
 8011b5e:	f000 f9bb 	bl	8011ed8 <__kernel_rem_pio2f>
 8011b62:	2e00      	cmp	r6, #0
 8011b64:	f6bf af2f 	bge.w	80119c6 <__ieee754_rem_pio2f+0x66>
 8011b68:	edd4 7a00 	vldr	s15, [r4]
 8011b6c:	eef1 7a67 	vneg.f32	s15, s15
 8011b70:	edc4 7a00 	vstr	s15, [r4]
 8011b74:	edd4 7a01 	vldr	s15, [r4, #4]
 8011b78:	eef1 7a67 	vneg.f32	s15, s15
 8011b7c:	edc4 7a01 	vstr	s15, [r4, #4]
 8011b80:	e782      	b.n	8011a88 <__ieee754_rem_pio2f+0x128>
 8011b82:	2303      	movs	r3, #3
 8011b84:	e7e5      	b.n	8011b52 <__ieee754_rem_pio2f+0x1f2>
 8011b86:	bf00      	nop
 8011b88:	3f490fd8 	.word	0x3f490fd8
 8011b8c:	4016cbe3 	.word	0x4016cbe3
 8011b90:	3fc90f80 	.word	0x3fc90f80
 8011b94:	3fc90fd0 	.word	0x3fc90fd0
 8011b98:	37354400 	.word	0x37354400
 8011b9c:	37354443 	.word	0x37354443
 8011ba0:	2e85a308 	.word	0x2e85a308
 8011ba4:	43490f80 	.word	0x43490f80
 8011ba8:	3f22f984 	.word	0x3f22f984
 8011bac:	08012ad0 	.word	0x08012ad0
 8011bb0:	2e85a300 	.word	0x2e85a300
 8011bb4:	248d3132 	.word	0x248d3132
 8011bb8:	43800000 	.word	0x43800000
 8011bbc:	08012b50 	.word	0x08012b50

08011bc0 <atanf>:
 8011bc0:	b538      	push	{r3, r4, r5, lr}
 8011bc2:	ee10 5a10 	vmov	r5, s0
 8011bc6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011bca:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8011bce:	eef0 7a40 	vmov.f32	s15, s0
 8011bd2:	d310      	bcc.n	8011bf6 <atanf+0x36>
 8011bd4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8011bd8:	d904      	bls.n	8011be4 <atanf+0x24>
 8011bda:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011bde:	eeb0 0a67 	vmov.f32	s0, s15
 8011be2:	bd38      	pop	{r3, r4, r5, pc}
 8011be4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011d1c <atanf+0x15c>
 8011be8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8011d20 <atanf+0x160>
 8011bec:	2d00      	cmp	r5, #0
 8011bee:	bfc8      	it	gt
 8011bf0:	eef0 7a47 	vmovgt.f32	s15, s14
 8011bf4:	e7f3      	b.n	8011bde <atanf+0x1e>
 8011bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8011d24 <atanf+0x164>)
 8011bf8:	429c      	cmp	r4, r3
 8011bfa:	d810      	bhi.n	8011c1e <atanf+0x5e>
 8011bfc:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011c00:	d20a      	bcs.n	8011c18 <atanf+0x58>
 8011c02:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011d28 <atanf+0x168>
 8011c06:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c0e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c16:	dce2      	bgt.n	8011bde <atanf+0x1e>
 8011c18:	f04f 33ff 	mov.w	r3, #4294967295
 8011c1c:	e013      	b.n	8011c46 <atanf+0x86>
 8011c1e:	f7fe f88b 	bl	800fd38 <fabsf>
 8011c22:	4b42      	ldr	r3, [pc, #264]	@ (8011d2c <atanf+0x16c>)
 8011c24:	429c      	cmp	r4, r3
 8011c26:	d84f      	bhi.n	8011cc8 <atanf+0x108>
 8011c28:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011c2c:	429c      	cmp	r4, r3
 8011c2e:	d841      	bhi.n	8011cb4 <atanf+0xf4>
 8011c30:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011c34:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011c38:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011c42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011c46:	1c5a      	adds	r2, r3, #1
 8011c48:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011c4c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011d30 <atanf+0x170>
 8011c50:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8011d34 <atanf+0x174>
 8011c54:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011d38 <atanf+0x178>
 8011c58:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011c5c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011c60:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8011d3c <atanf+0x17c>
 8011c64:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011c68:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8011d40 <atanf+0x180>
 8011c6c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011c70:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011d44 <atanf+0x184>
 8011c74:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011c78:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011d48 <atanf+0x188>
 8011c7c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011c80:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011d4c <atanf+0x18c>
 8011c84:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011c88:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011d50 <atanf+0x190>
 8011c8c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011c90:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8011d54 <atanf+0x194>
 8011c94:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011c98:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8011d58 <atanf+0x198>
 8011c9c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011ca0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011ca4:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011ca8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011cac:	d121      	bne.n	8011cf2 <atanf+0x132>
 8011cae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011cb2:	e794      	b.n	8011bde <atanf+0x1e>
 8011cb4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011cb8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011cbc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011cc6:	e7be      	b.n	8011c46 <atanf+0x86>
 8011cc8:	4b24      	ldr	r3, [pc, #144]	@ (8011d5c <atanf+0x19c>)
 8011cca:	429c      	cmp	r4, r3
 8011ccc:	d80b      	bhi.n	8011ce6 <atanf+0x126>
 8011cce:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8011cd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011cd6:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011cda:	2302      	movs	r3, #2
 8011cdc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011ce4:	e7af      	b.n	8011c46 <atanf+0x86>
 8011ce6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011cea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011cee:	2303      	movs	r3, #3
 8011cf0:	e7a9      	b.n	8011c46 <atanf+0x86>
 8011cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8011d60 <atanf+0x1a0>)
 8011cf4:	491b      	ldr	r1, [pc, #108]	@ (8011d64 <atanf+0x1a4>)
 8011cf6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011cfa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011cfe:	edd3 6a00 	vldr	s13, [r3]
 8011d02:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011d06:	2d00      	cmp	r5, #0
 8011d08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011d0c:	edd2 7a00 	vldr	s15, [r2]
 8011d10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d14:	bfb8      	it	lt
 8011d16:	eef1 7a67 	vneglt.f32	s15, s15
 8011d1a:	e760      	b.n	8011bde <atanf+0x1e>
 8011d1c:	bfc90fdb 	.word	0xbfc90fdb
 8011d20:	3fc90fdb 	.word	0x3fc90fdb
 8011d24:	3edfffff 	.word	0x3edfffff
 8011d28:	7149f2ca 	.word	0x7149f2ca
 8011d2c:	3f97ffff 	.word	0x3f97ffff
 8011d30:	3c8569d7 	.word	0x3c8569d7
 8011d34:	3d4bda59 	.word	0x3d4bda59
 8011d38:	bd6ef16b 	.word	0xbd6ef16b
 8011d3c:	3d886b35 	.word	0x3d886b35
 8011d40:	3dba2e6e 	.word	0x3dba2e6e
 8011d44:	3e124925 	.word	0x3e124925
 8011d48:	3eaaaaab 	.word	0x3eaaaaab
 8011d4c:	bd15a221 	.word	0xbd15a221
 8011d50:	bd9d8795 	.word	0xbd9d8795
 8011d54:	bde38e38 	.word	0xbde38e38
 8011d58:	be4ccccd 	.word	0xbe4ccccd
 8011d5c:	401bffff 	.word	0x401bffff
 8011d60:	08012e78 	.word	0x08012e78
 8011d64:	08012e68 	.word	0x08012e68

08011d68 <scalbn>:
 8011d68:	b570      	push	{r4, r5, r6, lr}
 8011d6a:	ec55 4b10 	vmov	r4, r5, d0
 8011d6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011d72:	4606      	mov	r6, r0
 8011d74:	462b      	mov	r3, r5
 8011d76:	b991      	cbnz	r1, 8011d9e <scalbn+0x36>
 8011d78:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011d7c:	4323      	orrs	r3, r4
 8011d7e:	d03b      	beq.n	8011df8 <scalbn+0x90>
 8011d80:	4b33      	ldr	r3, [pc, #204]	@ (8011e50 <scalbn+0xe8>)
 8011d82:	4620      	mov	r0, r4
 8011d84:	4629      	mov	r1, r5
 8011d86:	2200      	movs	r2, #0
 8011d88:	f7ee fc3e 	bl	8000608 <__aeabi_dmul>
 8011d8c:	4b31      	ldr	r3, [pc, #196]	@ (8011e54 <scalbn+0xec>)
 8011d8e:	429e      	cmp	r6, r3
 8011d90:	4604      	mov	r4, r0
 8011d92:	460d      	mov	r5, r1
 8011d94:	da0f      	bge.n	8011db6 <scalbn+0x4e>
 8011d96:	a326      	add	r3, pc, #152	@ (adr r3, 8011e30 <scalbn+0xc8>)
 8011d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9c:	e01e      	b.n	8011ddc <scalbn+0x74>
 8011d9e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011da2:	4291      	cmp	r1, r2
 8011da4:	d10b      	bne.n	8011dbe <scalbn+0x56>
 8011da6:	4622      	mov	r2, r4
 8011da8:	4620      	mov	r0, r4
 8011daa:	4629      	mov	r1, r5
 8011dac:	f7ee fa76 	bl	800029c <__adddf3>
 8011db0:	4604      	mov	r4, r0
 8011db2:	460d      	mov	r5, r1
 8011db4:	e020      	b.n	8011df8 <scalbn+0x90>
 8011db6:	460b      	mov	r3, r1
 8011db8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011dbc:	3936      	subs	r1, #54	@ 0x36
 8011dbe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011dc2:	4296      	cmp	r6, r2
 8011dc4:	dd0d      	ble.n	8011de2 <scalbn+0x7a>
 8011dc6:	2d00      	cmp	r5, #0
 8011dc8:	a11b      	add	r1, pc, #108	@ (adr r1, 8011e38 <scalbn+0xd0>)
 8011dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dce:	da02      	bge.n	8011dd6 <scalbn+0x6e>
 8011dd0:	a11b      	add	r1, pc, #108	@ (adr r1, 8011e40 <scalbn+0xd8>)
 8011dd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dd6:	a318      	add	r3, pc, #96	@ (adr r3, 8011e38 <scalbn+0xd0>)
 8011dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ddc:	f7ee fc14 	bl	8000608 <__aeabi_dmul>
 8011de0:	e7e6      	b.n	8011db0 <scalbn+0x48>
 8011de2:	1872      	adds	r2, r6, r1
 8011de4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011de8:	428a      	cmp	r2, r1
 8011dea:	dcec      	bgt.n	8011dc6 <scalbn+0x5e>
 8011dec:	2a00      	cmp	r2, #0
 8011dee:	dd06      	ble.n	8011dfe <scalbn+0x96>
 8011df0:	f36f 531e 	bfc	r3, #20, #11
 8011df4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011df8:	ec45 4b10 	vmov	d0, r4, r5
 8011dfc:	bd70      	pop	{r4, r5, r6, pc}
 8011dfe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011e02:	da08      	bge.n	8011e16 <scalbn+0xae>
 8011e04:	2d00      	cmp	r5, #0
 8011e06:	a10a      	add	r1, pc, #40	@ (adr r1, 8011e30 <scalbn+0xc8>)
 8011e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e0c:	dac3      	bge.n	8011d96 <scalbn+0x2e>
 8011e0e:	a10e      	add	r1, pc, #56	@ (adr r1, 8011e48 <scalbn+0xe0>)
 8011e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e14:	e7bf      	b.n	8011d96 <scalbn+0x2e>
 8011e16:	3236      	adds	r2, #54	@ 0x36
 8011e18:	f36f 531e 	bfc	r3, #20, #11
 8011e1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011e20:	4620      	mov	r0, r4
 8011e22:	4b0d      	ldr	r3, [pc, #52]	@ (8011e58 <scalbn+0xf0>)
 8011e24:	4629      	mov	r1, r5
 8011e26:	2200      	movs	r2, #0
 8011e28:	e7d8      	b.n	8011ddc <scalbn+0x74>
 8011e2a:	bf00      	nop
 8011e2c:	f3af 8000 	nop.w
 8011e30:	c2f8f359 	.word	0xc2f8f359
 8011e34:	01a56e1f 	.word	0x01a56e1f
 8011e38:	8800759c 	.word	0x8800759c
 8011e3c:	7e37e43c 	.word	0x7e37e43c
 8011e40:	8800759c 	.word	0x8800759c
 8011e44:	fe37e43c 	.word	0xfe37e43c
 8011e48:	c2f8f359 	.word	0xc2f8f359
 8011e4c:	81a56e1f 	.word	0x81a56e1f
 8011e50:	43500000 	.word	0x43500000
 8011e54:	ffff3cb0 	.word	0xffff3cb0
 8011e58:	3c900000 	.word	0x3c900000

08011e5c <with_errno>:
 8011e5c:	b510      	push	{r4, lr}
 8011e5e:	ed2d 8b02 	vpush	{d8}
 8011e62:	eeb0 8a40 	vmov.f32	s16, s0
 8011e66:	eef0 8a60 	vmov.f32	s17, s1
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	f7fa fa6e 	bl	800c34c <__errno>
 8011e70:	eeb0 0a48 	vmov.f32	s0, s16
 8011e74:	eef0 0a68 	vmov.f32	s1, s17
 8011e78:	ecbd 8b02 	vpop	{d8}
 8011e7c:	6004      	str	r4, [r0, #0]
 8011e7e:	bd10      	pop	{r4, pc}

08011e80 <xflow>:
 8011e80:	4603      	mov	r3, r0
 8011e82:	b507      	push	{r0, r1, r2, lr}
 8011e84:	ec51 0b10 	vmov	r0, r1, d0
 8011e88:	b183      	cbz	r3, 8011eac <xflow+0x2c>
 8011e8a:	4602      	mov	r2, r0
 8011e8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011e90:	e9cd 2300 	strd	r2, r3, [sp]
 8011e94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e98:	f7ee fbb6 	bl	8000608 <__aeabi_dmul>
 8011e9c:	ec41 0b10 	vmov	d0, r0, r1
 8011ea0:	2022      	movs	r0, #34	@ 0x22
 8011ea2:	b003      	add	sp, #12
 8011ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ea8:	f7ff bfd8 	b.w	8011e5c <with_errno>
 8011eac:	4602      	mov	r2, r0
 8011eae:	460b      	mov	r3, r1
 8011eb0:	e7ee      	b.n	8011e90 <xflow+0x10>
 8011eb2:	0000      	movs	r0, r0
 8011eb4:	0000      	movs	r0, r0
	...

08011eb8 <__math_uflow>:
 8011eb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011ec0 <__math_uflow+0x8>
 8011ebc:	f7ff bfe0 	b.w	8011e80 <xflow>
 8011ec0:	00000000 	.word	0x00000000
 8011ec4:	10000000 	.word	0x10000000

08011ec8 <__math_oflow>:
 8011ec8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011ed0 <__math_oflow+0x8>
 8011ecc:	f7ff bfd8 	b.w	8011e80 <xflow>
 8011ed0:	00000000 	.word	0x00000000
 8011ed4:	70000000 	.word	0x70000000

08011ed8 <__kernel_rem_pio2f>:
 8011ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011edc:	ed2d 8b04 	vpush	{d8-d9}
 8011ee0:	b0d9      	sub	sp, #356	@ 0x164
 8011ee2:	4690      	mov	r8, r2
 8011ee4:	9001      	str	r0, [sp, #4]
 8011ee6:	4ab6      	ldr	r2, [pc, #728]	@ (80121c0 <__kernel_rem_pio2f+0x2e8>)
 8011ee8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8011eea:	f118 0f04 	cmn.w	r8, #4
 8011eee:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8011ef2:	460f      	mov	r7, r1
 8011ef4:	f103 3bff 	add.w	fp, r3, #4294967295
 8011ef8:	db26      	blt.n	8011f48 <__kernel_rem_pio2f+0x70>
 8011efa:	f1b8 0203 	subs.w	r2, r8, #3
 8011efe:	bf48      	it	mi
 8011f00:	f108 0204 	addmi.w	r2, r8, #4
 8011f04:	10d2      	asrs	r2, r2, #3
 8011f06:	1c55      	adds	r5, r2, #1
 8011f08:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011f0a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80121d0 <__kernel_rem_pio2f+0x2f8>
 8011f0e:	00e8      	lsls	r0, r5, #3
 8011f10:	eba2 060b 	sub.w	r6, r2, fp
 8011f14:	9002      	str	r0, [sp, #8]
 8011f16:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8011f1a:	eb0a 0c0b 	add.w	ip, sl, fp
 8011f1e:	ac1c      	add	r4, sp, #112	@ 0x70
 8011f20:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8011f24:	2000      	movs	r0, #0
 8011f26:	4560      	cmp	r0, ip
 8011f28:	dd10      	ble.n	8011f4c <__kernel_rem_pio2f+0x74>
 8011f2a:	a91c      	add	r1, sp, #112	@ 0x70
 8011f2c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8011f30:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8011f34:	2600      	movs	r6, #0
 8011f36:	4556      	cmp	r6, sl
 8011f38:	dc24      	bgt.n	8011f84 <__kernel_rem_pio2f+0xac>
 8011f3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011f3e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80121d0 <__kernel_rem_pio2f+0x2f8>
 8011f42:	4684      	mov	ip, r0
 8011f44:	2400      	movs	r4, #0
 8011f46:	e016      	b.n	8011f76 <__kernel_rem_pio2f+0x9e>
 8011f48:	2200      	movs	r2, #0
 8011f4a:	e7dc      	b.n	8011f06 <__kernel_rem_pio2f+0x2e>
 8011f4c:	42c6      	cmn	r6, r0
 8011f4e:	bf5d      	ittte	pl
 8011f50:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8011f54:	ee07 1a90 	vmovpl	s15, r1
 8011f58:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8011f5c:	eef0 7a47 	vmovmi.f32	s15, s14
 8011f60:	ece4 7a01 	vstmia	r4!, {s15}
 8011f64:	3001      	adds	r0, #1
 8011f66:	e7de      	b.n	8011f26 <__kernel_rem_pio2f+0x4e>
 8011f68:	ecfe 6a01 	vldmia	lr!, {s13}
 8011f6c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8011f70:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011f74:	3401      	adds	r4, #1
 8011f76:	455c      	cmp	r4, fp
 8011f78:	ddf6      	ble.n	8011f68 <__kernel_rem_pio2f+0x90>
 8011f7a:	ece9 7a01 	vstmia	r9!, {s15}
 8011f7e:	3601      	adds	r6, #1
 8011f80:	3004      	adds	r0, #4
 8011f82:	e7d8      	b.n	8011f36 <__kernel_rem_pio2f+0x5e>
 8011f84:	a908      	add	r1, sp, #32
 8011f86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011f8a:	9104      	str	r1, [sp, #16]
 8011f8c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011f8e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80121cc <__kernel_rem_pio2f+0x2f4>
 8011f92:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80121c8 <__kernel_rem_pio2f+0x2f0>
 8011f96:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011f9a:	9203      	str	r2, [sp, #12]
 8011f9c:	4654      	mov	r4, sl
 8011f9e:	00a2      	lsls	r2, r4, #2
 8011fa0:	9205      	str	r2, [sp, #20]
 8011fa2:	aa58      	add	r2, sp, #352	@ 0x160
 8011fa4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011fa8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8011fac:	a944      	add	r1, sp, #272	@ 0x110
 8011fae:	aa08      	add	r2, sp, #32
 8011fb0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8011fb4:	4694      	mov	ip, r2
 8011fb6:	4626      	mov	r6, r4
 8011fb8:	2e00      	cmp	r6, #0
 8011fba:	dc4c      	bgt.n	8012056 <__kernel_rem_pio2f+0x17e>
 8011fbc:	4628      	mov	r0, r5
 8011fbe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011fc2:	f000 f9f1 	bl	80123a8 <scalbnf>
 8011fc6:	eeb0 8a40 	vmov.f32	s16, s0
 8011fca:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8011fce:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011fd2:	f000 fa4f 	bl	8012474 <floorf>
 8011fd6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8011fda:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011fde:	2d00      	cmp	r5, #0
 8011fe0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011fe4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011fe8:	ee17 9a90 	vmov	r9, s15
 8011fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ff0:	ee38 8a67 	vsub.f32	s16, s16, s15
 8011ff4:	dd41      	ble.n	801207a <__kernel_rem_pio2f+0x1a2>
 8011ff6:	f104 3cff 	add.w	ip, r4, #4294967295
 8011ffa:	a908      	add	r1, sp, #32
 8011ffc:	f1c5 0e08 	rsb	lr, r5, #8
 8012000:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8012004:	fa46 f00e 	asr.w	r0, r6, lr
 8012008:	4481      	add	r9, r0
 801200a:	fa00 f00e 	lsl.w	r0, r0, lr
 801200e:	1a36      	subs	r6, r6, r0
 8012010:	f1c5 0007 	rsb	r0, r5, #7
 8012014:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8012018:	4106      	asrs	r6, r0
 801201a:	2e00      	cmp	r6, #0
 801201c:	dd3c      	ble.n	8012098 <__kernel_rem_pio2f+0x1c0>
 801201e:	f04f 0e00 	mov.w	lr, #0
 8012022:	f109 0901 	add.w	r9, r9, #1
 8012026:	4670      	mov	r0, lr
 8012028:	4574      	cmp	r4, lr
 801202a:	dc68      	bgt.n	80120fe <__kernel_rem_pio2f+0x226>
 801202c:	2d00      	cmp	r5, #0
 801202e:	dd03      	ble.n	8012038 <__kernel_rem_pio2f+0x160>
 8012030:	2d01      	cmp	r5, #1
 8012032:	d074      	beq.n	801211e <__kernel_rem_pio2f+0x246>
 8012034:	2d02      	cmp	r5, #2
 8012036:	d07d      	beq.n	8012134 <__kernel_rem_pio2f+0x25c>
 8012038:	2e02      	cmp	r6, #2
 801203a:	d12d      	bne.n	8012098 <__kernel_rem_pio2f+0x1c0>
 801203c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012040:	ee30 8a48 	vsub.f32	s16, s0, s16
 8012044:	b340      	cbz	r0, 8012098 <__kernel_rem_pio2f+0x1c0>
 8012046:	4628      	mov	r0, r5
 8012048:	9306      	str	r3, [sp, #24]
 801204a:	f000 f9ad 	bl	80123a8 <scalbnf>
 801204e:	9b06      	ldr	r3, [sp, #24]
 8012050:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012054:	e020      	b.n	8012098 <__kernel_rem_pio2f+0x1c0>
 8012056:	ee60 7a28 	vmul.f32	s15, s0, s17
 801205a:	3e01      	subs	r6, #1
 801205c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012064:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8012068:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801206c:	ecac 0a01 	vstmia	ip!, {s0}
 8012070:	ed30 0a01 	vldmdb	r0!, {s0}
 8012074:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012078:	e79e      	b.n	8011fb8 <__kernel_rem_pio2f+0xe0>
 801207a:	d105      	bne.n	8012088 <__kernel_rem_pio2f+0x1b0>
 801207c:	1e60      	subs	r0, r4, #1
 801207e:	a908      	add	r1, sp, #32
 8012080:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8012084:	11f6      	asrs	r6, r6, #7
 8012086:	e7c8      	b.n	801201a <__kernel_rem_pio2f+0x142>
 8012088:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801208c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012094:	da31      	bge.n	80120fa <__kernel_rem_pio2f+0x222>
 8012096:	2600      	movs	r6, #0
 8012098:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a0:	f040 8098 	bne.w	80121d4 <__kernel_rem_pio2f+0x2fc>
 80120a4:	1e60      	subs	r0, r4, #1
 80120a6:	2200      	movs	r2, #0
 80120a8:	4550      	cmp	r0, sl
 80120aa:	da4b      	bge.n	8012144 <__kernel_rem_pio2f+0x26c>
 80120ac:	2a00      	cmp	r2, #0
 80120ae:	d065      	beq.n	801217c <__kernel_rem_pio2f+0x2a4>
 80120b0:	3c01      	subs	r4, #1
 80120b2:	ab08      	add	r3, sp, #32
 80120b4:	3d08      	subs	r5, #8
 80120b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d0f8      	beq.n	80120b0 <__kernel_rem_pio2f+0x1d8>
 80120be:	4628      	mov	r0, r5
 80120c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80120c4:	f000 f970 	bl	80123a8 <scalbnf>
 80120c8:	1c63      	adds	r3, r4, #1
 80120ca:	aa44      	add	r2, sp, #272	@ 0x110
 80120cc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80121cc <__kernel_rem_pio2f+0x2f4>
 80120d0:	0099      	lsls	r1, r3, #2
 80120d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80120d6:	4623      	mov	r3, r4
 80120d8:	2b00      	cmp	r3, #0
 80120da:	f280 80a9 	bge.w	8012230 <__kernel_rem_pio2f+0x358>
 80120de:	4623      	mov	r3, r4
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	f2c0 80c7 	blt.w	8012274 <__kernel_rem_pio2f+0x39c>
 80120e6:	aa44      	add	r2, sp, #272	@ 0x110
 80120e8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80120ec:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80121c4 <__kernel_rem_pio2f+0x2ec>
 80120f0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80121d0 <__kernel_rem_pio2f+0x2f8>
 80120f4:	2000      	movs	r0, #0
 80120f6:	1ae2      	subs	r2, r4, r3
 80120f8:	e0b1      	b.n	801225e <__kernel_rem_pio2f+0x386>
 80120fa:	2602      	movs	r6, #2
 80120fc:	e78f      	b.n	801201e <__kernel_rem_pio2f+0x146>
 80120fe:	f852 1b04 	ldr.w	r1, [r2], #4
 8012102:	b948      	cbnz	r0, 8012118 <__kernel_rem_pio2f+0x240>
 8012104:	b121      	cbz	r1, 8012110 <__kernel_rem_pio2f+0x238>
 8012106:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801210a:	f842 1c04 	str.w	r1, [r2, #-4]
 801210e:	2101      	movs	r1, #1
 8012110:	f10e 0e01 	add.w	lr, lr, #1
 8012114:	4608      	mov	r0, r1
 8012116:	e787      	b.n	8012028 <__kernel_rem_pio2f+0x150>
 8012118:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801211c:	e7f5      	b.n	801210a <__kernel_rem_pio2f+0x232>
 801211e:	f104 3cff 	add.w	ip, r4, #4294967295
 8012122:	aa08      	add	r2, sp, #32
 8012124:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012128:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801212c:	a908      	add	r1, sp, #32
 801212e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8012132:	e781      	b.n	8012038 <__kernel_rem_pio2f+0x160>
 8012134:	f104 3cff 	add.w	ip, r4, #4294967295
 8012138:	aa08      	add	r2, sp, #32
 801213a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801213e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8012142:	e7f3      	b.n	801212c <__kernel_rem_pio2f+0x254>
 8012144:	a908      	add	r1, sp, #32
 8012146:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801214a:	3801      	subs	r0, #1
 801214c:	430a      	orrs	r2, r1
 801214e:	e7ab      	b.n	80120a8 <__kernel_rem_pio2f+0x1d0>
 8012150:	3201      	adds	r2, #1
 8012152:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8012156:	2e00      	cmp	r6, #0
 8012158:	d0fa      	beq.n	8012150 <__kernel_rem_pio2f+0x278>
 801215a:	9905      	ldr	r1, [sp, #20]
 801215c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8012160:	eb0d 0001 	add.w	r0, sp, r1
 8012164:	18e6      	adds	r6, r4, r3
 8012166:	a91c      	add	r1, sp, #112	@ 0x70
 8012168:	f104 0c01 	add.w	ip, r4, #1
 801216c:	384c      	subs	r0, #76	@ 0x4c
 801216e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8012172:	4422      	add	r2, r4
 8012174:	4562      	cmp	r2, ip
 8012176:	da04      	bge.n	8012182 <__kernel_rem_pio2f+0x2aa>
 8012178:	4614      	mov	r4, r2
 801217a:	e710      	b.n	8011f9e <__kernel_rem_pio2f+0xc6>
 801217c:	9804      	ldr	r0, [sp, #16]
 801217e:	2201      	movs	r2, #1
 8012180:	e7e7      	b.n	8012152 <__kernel_rem_pio2f+0x27a>
 8012182:	9903      	ldr	r1, [sp, #12]
 8012184:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012188:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801218c:	9105      	str	r1, [sp, #20]
 801218e:	ee07 1a90 	vmov	s15, r1
 8012192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012196:	2400      	movs	r4, #0
 8012198:	ece6 7a01 	vstmia	r6!, {s15}
 801219c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80121d0 <__kernel_rem_pio2f+0x2f8>
 80121a0:	46b1      	mov	r9, r6
 80121a2:	455c      	cmp	r4, fp
 80121a4:	dd04      	ble.n	80121b0 <__kernel_rem_pio2f+0x2d8>
 80121a6:	ece0 7a01 	vstmia	r0!, {s15}
 80121aa:	f10c 0c01 	add.w	ip, ip, #1
 80121ae:	e7e1      	b.n	8012174 <__kernel_rem_pio2f+0x29c>
 80121b0:	ecfe 6a01 	vldmia	lr!, {s13}
 80121b4:	ed39 7a01 	vldmdb	r9!, {s14}
 80121b8:	3401      	adds	r4, #1
 80121ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80121be:	e7f0      	b.n	80121a2 <__kernel_rem_pio2f+0x2ca>
 80121c0:	08012eb4 	.word	0x08012eb4
 80121c4:	08012e88 	.word	0x08012e88
 80121c8:	43800000 	.word	0x43800000
 80121cc:	3b800000 	.word	0x3b800000
 80121d0:	00000000 	.word	0x00000000
 80121d4:	9b02      	ldr	r3, [sp, #8]
 80121d6:	eeb0 0a48 	vmov.f32	s0, s16
 80121da:	eba3 0008 	sub.w	r0, r3, r8
 80121de:	f000 f8e3 	bl	80123a8 <scalbnf>
 80121e2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80121c8 <__kernel_rem_pio2f+0x2f0>
 80121e6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80121ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ee:	db19      	blt.n	8012224 <__kernel_rem_pio2f+0x34c>
 80121f0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80121cc <__kernel_rem_pio2f+0x2f4>
 80121f4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80121f8:	aa08      	add	r2, sp, #32
 80121fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80121fe:	3508      	adds	r5, #8
 8012200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012204:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801220c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012210:	ee10 3a10 	vmov	r3, s0
 8012214:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012218:	ee17 3a90 	vmov	r3, s15
 801221c:	3401      	adds	r4, #1
 801221e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012222:	e74c      	b.n	80120be <__kernel_rem_pio2f+0x1e6>
 8012224:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012228:	aa08      	add	r2, sp, #32
 801222a:	ee10 3a10 	vmov	r3, s0
 801222e:	e7f6      	b.n	801221e <__kernel_rem_pio2f+0x346>
 8012230:	a808      	add	r0, sp, #32
 8012232:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8012236:	9001      	str	r0, [sp, #4]
 8012238:	ee07 0a90 	vmov	s15, r0
 801223c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012240:	3b01      	subs	r3, #1
 8012242:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012246:	ee20 0a07 	vmul.f32	s0, s0, s14
 801224a:	ed62 7a01 	vstmdb	r2!, {s15}
 801224e:	e743      	b.n	80120d8 <__kernel_rem_pio2f+0x200>
 8012250:	ecfc 6a01 	vldmia	ip!, {s13}
 8012254:	ecb5 7a01 	vldmia	r5!, {s14}
 8012258:	eee6 7a87 	vfma.f32	s15, s13, s14
 801225c:	3001      	adds	r0, #1
 801225e:	4550      	cmp	r0, sl
 8012260:	dc01      	bgt.n	8012266 <__kernel_rem_pio2f+0x38e>
 8012262:	4290      	cmp	r0, r2
 8012264:	ddf4      	ble.n	8012250 <__kernel_rem_pio2f+0x378>
 8012266:	a858      	add	r0, sp, #352	@ 0x160
 8012268:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801226c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8012270:	3b01      	subs	r3, #1
 8012272:	e735      	b.n	80120e0 <__kernel_rem_pio2f+0x208>
 8012274:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012276:	2b02      	cmp	r3, #2
 8012278:	dc09      	bgt.n	801228e <__kernel_rem_pio2f+0x3b6>
 801227a:	2b00      	cmp	r3, #0
 801227c:	dc27      	bgt.n	80122ce <__kernel_rem_pio2f+0x3f6>
 801227e:	d040      	beq.n	8012302 <__kernel_rem_pio2f+0x42a>
 8012280:	f009 0007 	and.w	r0, r9, #7
 8012284:	b059      	add	sp, #356	@ 0x164
 8012286:	ecbd 8b04 	vpop	{d8-d9}
 801228a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801228e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012290:	2b03      	cmp	r3, #3
 8012292:	d1f5      	bne.n	8012280 <__kernel_rem_pio2f+0x3a8>
 8012294:	aa30      	add	r2, sp, #192	@ 0xc0
 8012296:	1f0b      	subs	r3, r1, #4
 8012298:	4413      	add	r3, r2
 801229a:	461a      	mov	r2, r3
 801229c:	4620      	mov	r0, r4
 801229e:	2800      	cmp	r0, #0
 80122a0:	dc50      	bgt.n	8012344 <__kernel_rem_pio2f+0x46c>
 80122a2:	4622      	mov	r2, r4
 80122a4:	2a01      	cmp	r2, #1
 80122a6:	dc5d      	bgt.n	8012364 <__kernel_rem_pio2f+0x48c>
 80122a8:	ab30      	add	r3, sp, #192	@ 0xc0
 80122aa:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80121d0 <__kernel_rem_pio2f+0x2f8>
 80122ae:	440b      	add	r3, r1
 80122b0:	2c01      	cmp	r4, #1
 80122b2:	dc67      	bgt.n	8012384 <__kernel_rem_pio2f+0x4ac>
 80122b4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80122b8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80122bc:	2e00      	cmp	r6, #0
 80122be:	d167      	bne.n	8012390 <__kernel_rem_pio2f+0x4b8>
 80122c0:	edc7 6a00 	vstr	s13, [r7]
 80122c4:	ed87 7a01 	vstr	s14, [r7, #4]
 80122c8:	edc7 7a02 	vstr	s15, [r7, #8]
 80122cc:	e7d8      	b.n	8012280 <__kernel_rem_pio2f+0x3a8>
 80122ce:	ab30      	add	r3, sp, #192	@ 0xc0
 80122d0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80121d0 <__kernel_rem_pio2f+0x2f8>
 80122d4:	440b      	add	r3, r1
 80122d6:	4622      	mov	r2, r4
 80122d8:	2a00      	cmp	r2, #0
 80122da:	da24      	bge.n	8012326 <__kernel_rem_pio2f+0x44e>
 80122dc:	b34e      	cbz	r6, 8012332 <__kernel_rem_pio2f+0x45a>
 80122de:	eef1 7a47 	vneg.f32	s15, s14
 80122e2:	edc7 7a00 	vstr	s15, [r7]
 80122e6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80122ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80122ee:	aa31      	add	r2, sp, #196	@ 0xc4
 80122f0:	2301      	movs	r3, #1
 80122f2:	429c      	cmp	r4, r3
 80122f4:	da20      	bge.n	8012338 <__kernel_rem_pio2f+0x460>
 80122f6:	b10e      	cbz	r6, 80122fc <__kernel_rem_pio2f+0x424>
 80122f8:	eef1 7a67 	vneg.f32	s15, s15
 80122fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8012300:	e7be      	b.n	8012280 <__kernel_rem_pio2f+0x3a8>
 8012302:	ab30      	add	r3, sp, #192	@ 0xc0
 8012304:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80121d0 <__kernel_rem_pio2f+0x2f8>
 8012308:	440b      	add	r3, r1
 801230a:	2c00      	cmp	r4, #0
 801230c:	da05      	bge.n	801231a <__kernel_rem_pio2f+0x442>
 801230e:	b10e      	cbz	r6, 8012314 <__kernel_rem_pio2f+0x43c>
 8012310:	eef1 7a67 	vneg.f32	s15, s15
 8012314:	edc7 7a00 	vstr	s15, [r7]
 8012318:	e7b2      	b.n	8012280 <__kernel_rem_pio2f+0x3a8>
 801231a:	ed33 7a01 	vldmdb	r3!, {s14}
 801231e:	3c01      	subs	r4, #1
 8012320:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012324:	e7f1      	b.n	801230a <__kernel_rem_pio2f+0x432>
 8012326:	ed73 7a01 	vldmdb	r3!, {s15}
 801232a:	3a01      	subs	r2, #1
 801232c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012330:	e7d2      	b.n	80122d8 <__kernel_rem_pio2f+0x400>
 8012332:	eef0 7a47 	vmov.f32	s15, s14
 8012336:	e7d4      	b.n	80122e2 <__kernel_rem_pio2f+0x40a>
 8012338:	ecb2 7a01 	vldmia	r2!, {s14}
 801233c:	3301      	adds	r3, #1
 801233e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012342:	e7d6      	b.n	80122f2 <__kernel_rem_pio2f+0x41a>
 8012344:	ed72 7a01 	vldmdb	r2!, {s15}
 8012348:	edd2 6a01 	vldr	s13, [r2, #4]
 801234c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012350:	3801      	subs	r0, #1
 8012352:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012356:	ed82 7a00 	vstr	s14, [r2]
 801235a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801235e:	edc2 7a01 	vstr	s15, [r2, #4]
 8012362:	e79c      	b.n	801229e <__kernel_rem_pio2f+0x3c6>
 8012364:	ed73 7a01 	vldmdb	r3!, {s15}
 8012368:	edd3 6a01 	vldr	s13, [r3, #4]
 801236c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012370:	3a01      	subs	r2, #1
 8012372:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012376:	ed83 7a00 	vstr	s14, [r3]
 801237a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801237e:	edc3 7a01 	vstr	s15, [r3, #4]
 8012382:	e78f      	b.n	80122a4 <__kernel_rem_pio2f+0x3cc>
 8012384:	ed33 7a01 	vldmdb	r3!, {s14}
 8012388:	3c01      	subs	r4, #1
 801238a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801238e:	e78f      	b.n	80122b0 <__kernel_rem_pio2f+0x3d8>
 8012390:	eef1 6a66 	vneg.f32	s13, s13
 8012394:	eeb1 7a47 	vneg.f32	s14, s14
 8012398:	edc7 6a00 	vstr	s13, [r7]
 801239c:	ed87 7a01 	vstr	s14, [r7, #4]
 80123a0:	eef1 7a67 	vneg.f32	s15, s15
 80123a4:	e790      	b.n	80122c8 <__kernel_rem_pio2f+0x3f0>
 80123a6:	bf00      	nop

080123a8 <scalbnf>:
 80123a8:	ee10 3a10 	vmov	r3, s0
 80123ac:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80123b0:	d02b      	beq.n	801240a <scalbnf+0x62>
 80123b2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80123b6:	d302      	bcc.n	80123be <scalbnf+0x16>
 80123b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80123bc:	4770      	bx	lr
 80123be:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80123c2:	d123      	bne.n	801240c <scalbnf+0x64>
 80123c4:	4b24      	ldr	r3, [pc, #144]	@ (8012458 <scalbnf+0xb0>)
 80123c6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801245c <scalbnf+0xb4>
 80123ca:	4298      	cmp	r0, r3
 80123cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80123d0:	db17      	blt.n	8012402 <scalbnf+0x5a>
 80123d2:	ee10 3a10 	vmov	r3, s0
 80123d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80123da:	3a19      	subs	r2, #25
 80123dc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80123e0:	4288      	cmp	r0, r1
 80123e2:	dd15      	ble.n	8012410 <scalbnf+0x68>
 80123e4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8012460 <scalbnf+0xb8>
 80123e8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8012464 <scalbnf+0xbc>
 80123ec:	ee10 3a10 	vmov	r3, s0
 80123f0:	eeb0 7a67 	vmov.f32	s14, s15
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	bfb8      	it	lt
 80123f8:	eef0 7a66 	vmovlt.f32	s15, s13
 80123fc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012400:	4770      	bx	lr
 8012402:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012468 <scalbnf+0xc0>
 8012406:	ee27 0a80 	vmul.f32	s0, s15, s0
 801240a:	4770      	bx	lr
 801240c:	0dd2      	lsrs	r2, r2, #23
 801240e:	e7e5      	b.n	80123dc <scalbnf+0x34>
 8012410:	4410      	add	r0, r2
 8012412:	28fe      	cmp	r0, #254	@ 0xfe
 8012414:	dce6      	bgt.n	80123e4 <scalbnf+0x3c>
 8012416:	2800      	cmp	r0, #0
 8012418:	dd06      	ble.n	8012428 <scalbnf+0x80>
 801241a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801241e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012422:	ee00 3a10 	vmov	s0, r3
 8012426:	4770      	bx	lr
 8012428:	f110 0f16 	cmn.w	r0, #22
 801242c:	da09      	bge.n	8012442 <scalbnf+0x9a>
 801242e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8012468 <scalbnf+0xc0>
 8012432:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801246c <scalbnf+0xc4>
 8012436:	ee10 3a10 	vmov	r3, s0
 801243a:	eeb0 7a67 	vmov.f32	s14, s15
 801243e:	2b00      	cmp	r3, #0
 8012440:	e7d9      	b.n	80123f6 <scalbnf+0x4e>
 8012442:	3019      	adds	r0, #25
 8012444:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012448:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801244c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012470 <scalbnf+0xc8>
 8012450:	ee07 3a90 	vmov	s15, r3
 8012454:	e7d7      	b.n	8012406 <scalbnf+0x5e>
 8012456:	bf00      	nop
 8012458:	ffff3cb0 	.word	0xffff3cb0
 801245c:	4c000000 	.word	0x4c000000
 8012460:	7149f2ca 	.word	0x7149f2ca
 8012464:	f149f2ca 	.word	0xf149f2ca
 8012468:	0da24260 	.word	0x0da24260
 801246c:	8da24260 	.word	0x8da24260
 8012470:	33000000 	.word	0x33000000

08012474 <floorf>:
 8012474:	ee10 3a10 	vmov	r3, s0
 8012478:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801247c:	3a7f      	subs	r2, #127	@ 0x7f
 801247e:	2a16      	cmp	r2, #22
 8012480:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012484:	dc2b      	bgt.n	80124de <floorf+0x6a>
 8012486:	2a00      	cmp	r2, #0
 8012488:	da12      	bge.n	80124b0 <floorf+0x3c>
 801248a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80124f0 <floorf+0x7c>
 801248e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012492:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801249a:	dd06      	ble.n	80124aa <floorf+0x36>
 801249c:	2b00      	cmp	r3, #0
 801249e:	da24      	bge.n	80124ea <floorf+0x76>
 80124a0:	2900      	cmp	r1, #0
 80124a2:	4b14      	ldr	r3, [pc, #80]	@ (80124f4 <floorf+0x80>)
 80124a4:	bf08      	it	eq
 80124a6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80124aa:	ee00 3a10 	vmov	s0, r3
 80124ae:	4770      	bx	lr
 80124b0:	4911      	ldr	r1, [pc, #68]	@ (80124f8 <floorf+0x84>)
 80124b2:	4111      	asrs	r1, r2
 80124b4:	420b      	tst	r3, r1
 80124b6:	d0fa      	beq.n	80124ae <floorf+0x3a>
 80124b8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80124f0 <floorf+0x7c>
 80124bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80124c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80124c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124c8:	ddef      	ble.n	80124aa <floorf+0x36>
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	bfbe      	ittt	lt
 80124ce:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80124d2:	fa40 f202 	asrlt.w	r2, r0, r2
 80124d6:	189b      	addlt	r3, r3, r2
 80124d8:	ea23 0301 	bic.w	r3, r3, r1
 80124dc:	e7e5      	b.n	80124aa <floorf+0x36>
 80124de:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80124e2:	d3e4      	bcc.n	80124ae <floorf+0x3a>
 80124e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80124e8:	4770      	bx	lr
 80124ea:	2300      	movs	r3, #0
 80124ec:	e7dd      	b.n	80124aa <floorf+0x36>
 80124ee:	bf00      	nop
 80124f0:	7149f2ca 	.word	0x7149f2ca
 80124f4:	bf800000 	.word	0xbf800000
 80124f8:	007fffff 	.word	0x007fffff

080124fc <_init>:
 80124fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124fe:	bf00      	nop
 8012500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012502:	bc08      	pop	{r3}
 8012504:	469e      	mov	lr, r3
 8012506:	4770      	bx	lr

08012508 <_fini>:
 8012508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801250a:	bf00      	nop
 801250c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801250e:	bc08      	pop	{r3}
 8012510:	469e      	mov	lr, r3
 8012512:	4770      	bx	lr
