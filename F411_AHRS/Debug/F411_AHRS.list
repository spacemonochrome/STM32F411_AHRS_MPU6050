
F411_AHRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011afc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a8  08011ca0  08011ca0  00012ca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012648  08012648  000141f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012648  08012648  00013648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012650  08012650  000141f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012650  08012650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012654  08012654  00013654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08012658  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000708  200001f8  0801284c  000141f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  0801284c  00014900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b2d  00000000  00000000  00014224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003121  00000000  00000000  00028d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0002be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e39  00000000  00000000  0002d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018feb  00000000  00000000  0002ded9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018133  00000000  00000000  00046ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095614  00000000  00000000  0005eff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f460b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006988  00000000  00000000  000f4650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000fafd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011c84 	.word	0x08011c84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08011c84 	.word	0x08011c84

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	@ 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_uldivmod>:
 8000eb4:	b953      	cbnz	r3, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb6:	b94a      	cbnz	r2, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bf08      	it	eq
 8000ebc:	2800      	cmpeq	r0, #0
 8000ebe:	bf1c      	itt	ne
 8000ec0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ec4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec8:	f000 b9be 	b.w	8001248 <__aeabi_idiv0>
 8000ecc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed4:	f000 f83c 	bl	8000f50 <__udivmoddi4>
 8000ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_d2lz>:
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2300      	movs	r3, #0
 8000eea:	4604      	mov	r4, r0
 8000eec:	460d      	mov	r5, r1
 8000eee:	f7ff fdfd 	bl	8000aec <__aeabi_dcmplt>
 8000ef2:	b928      	cbnz	r0, 8000f00 <__aeabi_d2lz+0x1c>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000efc:	f000 b80a 	b.w	8000f14 <__aeabi_d2ulz>
 8000f00:	4620      	mov	r0, r4
 8000f02:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f06:	f000 f805 	bl	8000f14 <__aeabi_d2ulz>
 8000f0a:	4240      	negs	r0, r0
 8000f0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f10:	bd38      	pop	{r3, r4, r5, pc}
 8000f12:	bf00      	nop

08000f14 <__aeabi_d2ulz>:
 8000f14:	b5d0      	push	{r4, r6, r7, lr}
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <__aeabi_d2ulz+0x34>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4606      	mov	r6, r0
 8000f1c:	460f      	mov	r7, r1
 8000f1e:	f7ff fb73 	bl	8000608 <__aeabi_dmul>
 8000f22:	f7ff fe49 	bl	8000bb8 <__aeabi_d2uiz>
 8000f26:	4604      	mov	r4, r0
 8000f28:	f7ff faf4 	bl	8000514 <__aeabi_ui2d>
 8000f2c:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <__aeabi_d2ulz+0x38>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f7ff fb6a 	bl	8000608 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4630      	mov	r0, r6
 8000f3a:	4639      	mov	r1, r7
 8000f3c:	f7ff f9ac 	bl	8000298 <__aeabi_dsub>
 8000f40:	f7ff fe3a 	bl	8000bb8 <__aeabi_d2uiz>
 8000f44:	4621      	mov	r1, r4
 8000f46:	bdd0      	pop	{r4, r6, r7, pc}
 8000f48:	3df00000 	.word	0x3df00000
 8000f4c:	41f00000 	.word	0x41f00000

08000f50 <__udivmoddi4>:
 8000f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f54:	9d08      	ldr	r5, [sp, #32]
 8000f56:	468e      	mov	lr, r1
 8000f58:	4604      	mov	r4, r0
 8000f5a:	4688      	mov	r8, r1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d14a      	bne.n	8000ff6 <__udivmoddi4+0xa6>
 8000f60:	428a      	cmp	r2, r1
 8000f62:	4617      	mov	r7, r2
 8000f64:	d962      	bls.n	800102c <__udivmoddi4+0xdc>
 8000f66:	fab2 f682 	clz	r6, r2
 8000f6a:	b14e      	cbz	r6, 8000f80 <__udivmoddi4+0x30>
 8000f6c:	f1c6 0320 	rsb	r3, r6, #32
 8000f70:	fa01 f806 	lsl.w	r8, r1, r6
 8000f74:	fa20 f303 	lsr.w	r3, r0, r3
 8000f78:	40b7      	lsls	r7, r6
 8000f7a:	ea43 0808 	orr.w	r8, r3, r8
 8000f7e:	40b4      	lsls	r4, r6
 8000f80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f84:	fa1f fc87 	uxth.w	ip, r7
 8000f88:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f8c:	0c23      	lsrs	r3, r4, #16
 8000f8e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000f92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f96:	fb01 f20c 	mul.w	r2, r1, ip
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d909      	bls.n	8000fb2 <__udivmoddi4+0x62>
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000fa4:	f080 80ea 	bcs.w	800117c <__udivmoddi4+0x22c>
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	f240 80e7 	bls.w	800117c <__udivmoddi4+0x22c>
 8000fae:	3902      	subs	r1, #2
 8000fb0:	443b      	add	r3, r7
 8000fb2:	1a9a      	subs	r2, r3, r2
 8000fb4:	b2a3      	uxth	r3, r4
 8000fb6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000fba:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fc2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fc6:	459c      	cmp	ip, r3
 8000fc8:	d909      	bls.n	8000fde <__udivmoddi4+0x8e>
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fd0:	f080 80d6 	bcs.w	8001180 <__udivmoddi4+0x230>
 8000fd4:	459c      	cmp	ip, r3
 8000fd6:	f240 80d3 	bls.w	8001180 <__udivmoddi4+0x230>
 8000fda:	443b      	add	r3, r7
 8000fdc:	3802      	subs	r0, #2
 8000fde:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fe2:	eba3 030c 	sub.w	r3, r3, ip
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	b11d      	cbz	r5, 8000ff2 <__udivmoddi4+0xa2>
 8000fea:	40f3      	lsrs	r3, r6
 8000fec:	2200      	movs	r2, #0
 8000fee:	e9c5 3200 	strd	r3, r2, [r5]
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d905      	bls.n	8001006 <__udivmoddi4+0xb6>
 8000ffa:	b10d      	cbz	r5, 8001000 <__udivmoddi4+0xb0>
 8000ffc:	e9c5 0100 	strd	r0, r1, [r5]
 8001000:	2100      	movs	r1, #0
 8001002:	4608      	mov	r0, r1
 8001004:	e7f5      	b.n	8000ff2 <__udivmoddi4+0xa2>
 8001006:	fab3 f183 	clz	r1, r3
 800100a:	2900      	cmp	r1, #0
 800100c:	d146      	bne.n	800109c <__udivmoddi4+0x14c>
 800100e:	4573      	cmp	r3, lr
 8001010:	d302      	bcc.n	8001018 <__udivmoddi4+0xc8>
 8001012:	4282      	cmp	r2, r0
 8001014:	f200 8105 	bhi.w	8001222 <__udivmoddi4+0x2d2>
 8001018:	1a84      	subs	r4, r0, r2
 800101a:	eb6e 0203 	sbc.w	r2, lr, r3
 800101e:	2001      	movs	r0, #1
 8001020:	4690      	mov	r8, r2
 8001022:	2d00      	cmp	r5, #0
 8001024:	d0e5      	beq.n	8000ff2 <__udivmoddi4+0xa2>
 8001026:	e9c5 4800 	strd	r4, r8, [r5]
 800102a:	e7e2      	b.n	8000ff2 <__udivmoddi4+0xa2>
 800102c:	2a00      	cmp	r2, #0
 800102e:	f000 8090 	beq.w	8001152 <__udivmoddi4+0x202>
 8001032:	fab2 f682 	clz	r6, r2
 8001036:	2e00      	cmp	r6, #0
 8001038:	f040 80a4 	bne.w	8001184 <__udivmoddi4+0x234>
 800103c:	1a8a      	subs	r2, r1, r2
 800103e:	0c03      	lsrs	r3, r0, #16
 8001040:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001044:	b280      	uxth	r0, r0
 8001046:	b2bc      	uxth	r4, r7
 8001048:	2101      	movs	r1, #1
 800104a:	fbb2 fcfe 	udiv	ip, r2, lr
 800104e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001056:	fb04 f20c 	mul.w	r2, r4, ip
 800105a:	429a      	cmp	r2, r3
 800105c:	d907      	bls.n	800106e <__udivmoddi4+0x11e>
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001064:	d202      	bcs.n	800106c <__udivmoddi4+0x11c>
 8001066:	429a      	cmp	r2, r3
 8001068:	f200 80e0 	bhi.w	800122c <__udivmoddi4+0x2dc>
 800106c:	46c4      	mov	ip, r8
 800106e:	1a9b      	subs	r3, r3, r2
 8001070:	fbb3 f2fe 	udiv	r2, r3, lr
 8001074:	fb0e 3312 	mls	r3, lr, r2, r3
 8001078:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800107c:	fb02 f404 	mul.w	r4, r2, r4
 8001080:	429c      	cmp	r4, r3
 8001082:	d907      	bls.n	8001094 <__udivmoddi4+0x144>
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	f102 30ff 	add.w	r0, r2, #4294967295
 800108a:	d202      	bcs.n	8001092 <__udivmoddi4+0x142>
 800108c:	429c      	cmp	r4, r3
 800108e:	f200 80ca 	bhi.w	8001226 <__udivmoddi4+0x2d6>
 8001092:	4602      	mov	r2, r0
 8001094:	1b1b      	subs	r3, r3, r4
 8001096:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800109a:	e7a5      	b.n	8000fe8 <__udivmoddi4+0x98>
 800109c:	f1c1 0620 	rsb	r6, r1, #32
 80010a0:	408b      	lsls	r3, r1
 80010a2:	fa22 f706 	lsr.w	r7, r2, r6
 80010a6:	431f      	orrs	r7, r3
 80010a8:	fa0e f401 	lsl.w	r4, lr, r1
 80010ac:	fa20 f306 	lsr.w	r3, r0, r6
 80010b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80010b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80010b8:	4323      	orrs	r3, r4
 80010ba:	fa00 f801 	lsl.w	r8, r0, r1
 80010be:	fa1f fc87 	uxth.w	ip, r7
 80010c2:	fbbe f0f9 	udiv	r0, lr, r9
 80010c6:	0c1c      	lsrs	r4, r3, #16
 80010c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80010cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80010d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80010d4:	45a6      	cmp	lr, r4
 80010d6:	fa02 f201 	lsl.w	r2, r2, r1
 80010da:	d909      	bls.n	80010f0 <__udivmoddi4+0x1a0>
 80010dc:	193c      	adds	r4, r7, r4
 80010de:	f100 3aff 	add.w	sl, r0, #4294967295
 80010e2:	f080 809c 	bcs.w	800121e <__udivmoddi4+0x2ce>
 80010e6:	45a6      	cmp	lr, r4
 80010e8:	f240 8099 	bls.w	800121e <__udivmoddi4+0x2ce>
 80010ec:	3802      	subs	r0, #2
 80010ee:	443c      	add	r4, r7
 80010f0:	eba4 040e 	sub.w	r4, r4, lr
 80010f4:	fa1f fe83 	uxth.w	lr, r3
 80010f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80010fc:	fb09 4413 	mls	r4, r9, r3, r4
 8001100:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001104:	fb03 fc0c 	mul.w	ip, r3, ip
 8001108:	45a4      	cmp	ip, r4
 800110a:	d908      	bls.n	800111e <__udivmoddi4+0x1ce>
 800110c:	193c      	adds	r4, r7, r4
 800110e:	f103 3eff 	add.w	lr, r3, #4294967295
 8001112:	f080 8082 	bcs.w	800121a <__udivmoddi4+0x2ca>
 8001116:	45a4      	cmp	ip, r4
 8001118:	d97f      	bls.n	800121a <__udivmoddi4+0x2ca>
 800111a:	3b02      	subs	r3, #2
 800111c:	443c      	add	r4, r7
 800111e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001122:	eba4 040c 	sub.w	r4, r4, ip
 8001126:	fba0 ec02 	umull	lr, ip, r0, r2
 800112a:	4564      	cmp	r4, ip
 800112c:	4673      	mov	r3, lr
 800112e:	46e1      	mov	r9, ip
 8001130:	d362      	bcc.n	80011f8 <__udivmoddi4+0x2a8>
 8001132:	d05f      	beq.n	80011f4 <__udivmoddi4+0x2a4>
 8001134:	b15d      	cbz	r5, 800114e <__udivmoddi4+0x1fe>
 8001136:	ebb8 0203 	subs.w	r2, r8, r3
 800113a:	eb64 0409 	sbc.w	r4, r4, r9
 800113e:	fa04 f606 	lsl.w	r6, r4, r6
 8001142:	fa22 f301 	lsr.w	r3, r2, r1
 8001146:	431e      	orrs	r6, r3
 8001148:	40cc      	lsrs	r4, r1
 800114a:	e9c5 6400 	strd	r6, r4, [r5]
 800114e:	2100      	movs	r1, #0
 8001150:	e74f      	b.n	8000ff2 <__udivmoddi4+0xa2>
 8001152:	fbb1 fcf2 	udiv	ip, r1, r2
 8001156:	0c01      	lsrs	r1, r0, #16
 8001158:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800115c:	b280      	uxth	r0, r0
 800115e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001162:	463b      	mov	r3, r7
 8001164:	4638      	mov	r0, r7
 8001166:	463c      	mov	r4, r7
 8001168:	46b8      	mov	r8, r7
 800116a:	46be      	mov	lr, r7
 800116c:	2620      	movs	r6, #32
 800116e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001172:	eba2 0208 	sub.w	r2, r2, r8
 8001176:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800117a:	e766      	b.n	800104a <__udivmoddi4+0xfa>
 800117c:	4601      	mov	r1, r0
 800117e:	e718      	b.n	8000fb2 <__udivmoddi4+0x62>
 8001180:	4610      	mov	r0, r2
 8001182:	e72c      	b.n	8000fde <__udivmoddi4+0x8e>
 8001184:	f1c6 0220 	rsb	r2, r6, #32
 8001188:	fa2e f302 	lsr.w	r3, lr, r2
 800118c:	40b7      	lsls	r7, r6
 800118e:	40b1      	lsls	r1, r6
 8001190:	fa20 f202 	lsr.w	r2, r0, r2
 8001194:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001198:	430a      	orrs	r2, r1
 800119a:	fbb3 f8fe 	udiv	r8, r3, lr
 800119e:	b2bc      	uxth	r4, r7
 80011a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80011a4:	0c11      	lsrs	r1, r2, #16
 80011a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011aa:	fb08 f904 	mul.w	r9, r8, r4
 80011ae:	40b0      	lsls	r0, r6
 80011b0:	4589      	cmp	r9, r1
 80011b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80011b6:	b280      	uxth	r0, r0
 80011b8:	d93e      	bls.n	8001238 <__udivmoddi4+0x2e8>
 80011ba:	1879      	adds	r1, r7, r1
 80011bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80011c0:	d201      	bcs.n	80011c6 <__udivmoddi4+0x276>
 80011c2:	4589      	cmp	r9, r1
 80011c4:	d81f      	bhi.n	8001206 <__udivmoddi4+0x2b6>
 80011c6:	eba1 0109 	sub.w	r1, r1, r9
 80011ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80011ce:	fb09 f804 	mul.w	r8, r9, r4
 80011d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80011d6:	b292      	uxth	r2, r2
 80011d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011dc:	4542      	cmp	r2, r8
 80011de:	d229      	bcs.n	8001234 <__udivmoddi4+0x2e4>
 80011e0:	18ba      	adds	r2, r7, r2
 80011e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80011e6:	d2c4      	bcs.n	8001172 <__udivmoddi4+0x222>
 80011e8:	4542      	cmp	r2, r8
 80011ea:	d2c2      	bcs.n	8001172 <__udivmoddi4+0x222>
 80011ec:	f1a9 0102 	sub.w	r1, r9, #2
 80011f0:	443a      	add	r2, r7
 80011f2:	e7be      	b.n	8001172 <__udivmoddi4+0x222>
 80011f4:	45f0      	cmp	r8, lr
 80011f6:	d29d      	bcs.n	8001134 <__udivmoddi4+0x1e4>
 80011f8:	ebbe 0302 	subs.w	r3, lr, r2
 80011fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001200:	3801      	subs	r0, #1
 8001202:	46e1      	mov	r9, ip
 8001204:	e796      	b.n	8001134 <__udivmoddi4+0x1e4>
 8001206:	eba7 0909 	sub.w	r9, r7, r9
 800120a:	4449      	add	r1, r9
 800120c:	f1a8 0c02 	sub.w	ip, r8, #2
 8001210:	fbb1 f9fe 	udiv	r9, r1, lr
 8001214:	fb09 f804 	mul.w	r8, r9, r4
 8001218:	e7db      	b.n	80011d2 <__udivmoddi4+0x282>
 800121a:	4673      	mov	r3, lr
 800121c:	e77f      	b.n	800111e <__udivmoddi4+0x1ce>
 800121e:	4650      	mov	r0, sl
 8001220:	e766      	b.n	80010f0 <__udivmoddi4+0x1a0>
 8001222:	4608      	mov	r0, r1
 8001224:	e6fd      	b.n	8001022 <__udivmoddi4+0xd2>
 8001226:	443b      	add	r3, r7
 8001228:	3a02      	subs	r2, #2
 800122a:	e733      	b.n	8001094 <__udivmoddi4+0x144>
 800122c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001230:	443b      	add	r3, r7
 8001232:	e71c      	b.n	800106e <__udivmoddi4+0x11e>
 8001234:	4649      	mov	r1, r9
 8001236:	e79c      	b.n	8001172 <__udivmoddi4+0x222>
 8001238:	eba1 0109 	sub.w	r1, r1, r9
 800123c:	46c4      	mov	ip, r8
 800123e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001242:	fb09 f804 	mul.w	r8, r9, r4
 8001246:	e7c4      	b.n	80011d2 <__udivmoddi4+0x282>

08001248 <__aeabi_idiv0>:
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop

0800124c <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 800124c:	b480      	push	{r7}
 800124e:	b08b      	sub	sp, #44	@ 0x2c
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	ed87 0a00 	vstr	s0, [r7]
    fusionAhrs->gain = gain;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a15      	ldr	r2, [pc, #84]	@ (80012c0 <FusionAhrsInitialise+0x74>)
 800126a:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	625a      	str	r2, [r3, #36]	@ 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <FusionAhrsInitialise+0x78>)
 80012a8:	629a      	str	r2, [r3, #40]	@ 0x28
    fusionAhrs->zeroYawPending = false;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 80012b2:	bf00      	nop
 80012b4:	372c      	adds	r7, #44	@ 0x2c
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	7f7fffff 	.word	0x7f7fffff
 80012c4:	41200000 	.word	0x41200000

080012c8 <FusionAhrsSetMagneticField>:
 * @brief Sets the minimum and maximum valid magnetic field magnitudes in uT.
 * @param fusionAhrs AHRS algorithm structure.
 * @param minimumMagneticField Minimum valid magnetic field magnitude.
 * @param maximumMagneticField Maximum valid magnetic field magnitude.
 */
void FusionAhrsSetMagneticField(FusionAhrs * const fusionAhrs, const float minimumMagneticField, const float maximumMagneticField) {
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80012d4:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionAhrs->minimumMagneticFieldSquared = minimumMagneticField * minimumMagneticField;
 80012d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	edc3 7a01 	vstr	s15, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = maximumMagneticField * maximumMagneticField;
 80012e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8001300:	b490      	push	{r4, r7}
 8001302:	f5ad 6d85 	sub.w	sp, sp, #1064	@ 0x428
 8001306:	af00      	add	r7, sp, #0
 8001308:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800130c:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001310:	6018      	str	r0, [r3, #0]
 8001312:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001316:	f5a3 6181 	sub.w	r1, r3, #1032	@ 0x408
 800131a:	eeb0 5a61 	vmov.f32	s10, s3
 800131e:	eef0 5a42 	vmov.f32	s11, s4
 8001322:	eeb0 6a62 	vmov.f32	s12, s5
 8001326:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800132a:	f2a3 4214 	subw	r2, r3, #1044	@ 0x414
 800132e:	eef0 6a43 	vmov.f32	s13, s6
 8001332:	eeb0 7a63 	vmov.f32	s14, s7
 8001336:	eef0 7a44 	vmov.f32	s15, s8
 800133a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800133e:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8001342:	f507 6085 	add.w	r0, r7, #1064	@ 0x428
 8001346:	f2a0 4024 	subw	r0, r0, #1060	@ 0x424
 800134a:	edc0 4a00 	vstr	s9, [r0]
 800134e:	ed81 0a00 	vstr	s0, [r1]
 8001352:	edc1 0a01 	vstr	s1, [r1, #4]
 8001356:	ed81 1a02 	vstr	s2, [r1, #8]
 800135a:	ed82 5a00 	vstr	s10, [r2]
 800135e:	edc2 5a01 	vstr	s11, [r2, #4]
 8001362:	ed82 6a02 	vstr	s12, [r2, #8]
 8001366:	edc3 6a00 	vstr	s13, [r3]
 800136a:	ed83 7a01 	vstr	s14, [r3, #4]
 800136e:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 8001372:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001376:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001384:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001392:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 800139c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013a0:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	d116      	bne.n	80013e0 <FusionAhrsUpdate+0xe0>
 80013b2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013b6:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80013ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80013be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c6:	d10b      	bne.n	80013e0 <FusionAhrsUpdate+0xe0>
 80013c8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013cc:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80013d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80013d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013dc:	f000 8500 	beq.w	8001de0 <FusionAhrsUpdate+0xae0>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 80013e0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013e4:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	ed93 7a04 	vldr	s14, [r3, #16]
 80013ee:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013f2:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80013fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001400:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001404:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	edd3 6a03 	vldr	s13, [r3, #12]
 800140e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001412:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	edd3 7a05 	vldr	s15, [r3, #20]
 800141c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001420:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8001424:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001428:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800142c:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 8001430:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001434:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	ed93 7a03 	vldr	s14, [r3, #12]
 800143e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001442:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	edd3 7a04 	vldr	s15, [r3, #16]
 800144c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001450:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001454:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	edd3 6a05 	vldr	s13, [r3, #20]
 800145e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001462:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	edd3 7a06 	vldr	s15, [r3, #24]
 800146c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8001474:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001478:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800147c:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8001480:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001484:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	ed93 7a03 	vldr	s14, [r3, #12]
 800148e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001492:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	edd3 7a03 	vldr	s15, [r3, #12]
 800149c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80014a8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014ac:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	edd3 6a06 	vldr	s13, [r3, #24]
 80014b6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014ba:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80014c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 80014cc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014d0:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80014d4:	edc3 7a02 	vstr	s15, [r3, #8]
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 80014d8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014dc:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80014e0:	ed93 7a00 	vldr	s14, [r3]
 80014e4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014e8:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014f8:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80014fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8001500:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001504:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001508:	edd3 7a01 	vldr	s15, [r3, #4]
 800150c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001514:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001518:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800151c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001520:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001524:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001528:	edd3 7a02 	vldr	s15, [r3, #8]
 800152c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001534:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8001538:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 800153c:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154c:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001550:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8001554:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001558:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 800155c:	f207 421c 	addw	r2, r7, #1052	@ 0x41c
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001564:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800156e:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8001572:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001574:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001578:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	105a      	asrs	r2, r3, #1
 8001580:	4bb9      	ldr	r3, [pc, #740]	@ (8001868 <FusionAhrsUpdate+0x568>)
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8001588:	f5a2 726c 	sub.w	r2, r2, #944	@ 0x3b0
 800158c:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 800158e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001598:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 800159c:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 800159e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80015a2:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80015a6:	ed93 7a00 	vldr	s14, [r3]
 80015aa:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80015ba:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80015be:	edd3 7a00 	vldr	s15, [r3]
 80015c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80015ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ce:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80015d2:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015de:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80015e2:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80015e6:	edc3 7a00 	vstr	s15, [r3]
    return y;
 80015ea:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80015ee:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80015f2:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80015f4:	f207 4214 	addw	r2, r7, #1044	@ 0x414
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8001604:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8001606:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800160a:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800160e:	ed93 7a00 	vldr	s14, [r3]
 8001612:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001622:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8001626:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800162a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800162e:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001632:	ed93 7a01 	vldr	s14, [r3, #4]
 8001636:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001642:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001646:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 800164a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800164e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001652:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001656:	ed93 7a02 	vldr	s14, [r3, #8]
 800165a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800165e:	edd3 7a00 	vldr	s15, [r3]
 8001662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001666:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800166a:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 800166e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001672:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001676:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 800167a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800167e:	f5a3 7272 	sub.w	r2, r3, #968	@ 0x3c8
 8001682:	460b      	mov	r3, r1
 8001684:	ca07      	ldmia	r2, {r0, r1, r2}
 8001686:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800168a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800168e:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8001692:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 8001696:	ca07      	ldmia	r2, {r0, r1, r2}
 8001698:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800169c:	bf00      	nop
 800169e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80016a2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016a6:	461c      	mov	r4, r3
 80016a8:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 80016ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80016b4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80016b8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80016c0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80016c4:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80016c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80016cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80016d4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016d8:	edd3 6a02 	vldr	s13, [r3, #8]
 80016dc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80016e0:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80016e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80016e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80016f4:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 80016f8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 80016fc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001700:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001704:	ed93 7a02 	vldr	s14, [r3, #8]
 8001708:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800170c:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001718:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800171c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001720:	edd3 6a00 	vldr	s13, [r3]
 8001724:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001728:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800172c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001738:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800173c:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8001740:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001744:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001748:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001754:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001758:	edd3 7a01 	vldr	s15, [r3, #4]
 800175c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001760:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001764:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001768:	edd3 6a01 	vldr	s13, [r3, #4]
 800176c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001770:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001780:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001784:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8001788:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800178c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001790:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 8001794:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001798:	f5a3 727b 	sub.w	r2, r3, #1004	@ 0x3ec
 800179c:	460b      	mov	r3, r1
 800179e:	ca07      	ldmia	r2, {r0, r1, r2}
 80017a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017a4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80017a8:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 80017ac:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80017b0:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80017b4:	460b      	mov	r3, r1
 80017b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80017b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 80017bc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80017c0:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80017c4:	ed93 7a00 	vldr	s14, [r3]
 80017c8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80017cc:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80017dc:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80017e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80017e4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80017e8:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80017ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80017f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80017fc:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8001800:	edd3 6a02 	vldr	s13, [r3, #8]
 8001804:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001808:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 800180c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 8001818:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800181c:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 8001820:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001824:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	edd3 7a01 	vldr	s15, [r3, #4]
 800182e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183e:	f100 82d0 	bmi.w	8001de2 <FusionAhrsUpdate+0xae2>
 8001842:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001846:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001850:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001854:	ed93 7a00 	vldr	s14, [r3]
 8001858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	f300 82bf 	bgt.w	8001de2 <FusionAhrsUpdate+0xae2>
 8001864:	e002      	b.n	800186c <FusionAhrsUpdate+0x56c>
 8001866:	bf00      	nop
 8001868:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 800186c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001870:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	ed93 7a04 	vldr	s14, [r3, #16]
 800187a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800187e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	edd3 7a05 	vldr	s15, [r3, #20]
 8001888:	ee27 7a27 	vmul.f32	s14, s14, s15
 800188c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001890:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	edd3 6a03 	vldr	s13, [r3, #12]
 800189a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800189e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80018a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80018b0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80018b4:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80018b8:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 80018bc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80018c0:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80018ca:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80018ce:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80018d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80018e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018e4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80018e8:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	edd3 6a05 	vldr	s13, [r3, #20]
 80018f2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80018f6:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001904:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001908:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800190c:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001910:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 8001914:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001918:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001922:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001926:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001934:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001938:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001942:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001946:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001954:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001958:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800195c:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001960:	edc3 7a02 	vstr	s15, [r3, #8]
    result.axis.x = A.y * B.z - A.z * B.y;
 8001964:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001968:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800196c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001970:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001974:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8001978:	edd3 7a02 	vldr	s15, [r3, #8]
 800197c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001980:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001984:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001988:	edd3 6a02 	vldr	s13, [r3, #8]
 800198c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001990:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8001994:	edd3 7a01 	vldr	s15, [r3, #4]
 8001998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800199c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80019a4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80019a8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 80019ac:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80019b0:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80019b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80019b8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80019bc:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80019cc:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80019d0:	edd3 6a00 	vldr	s13, [r3]
 80019d4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80019d8:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80019dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80019e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80019ec:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80019f0:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80019f4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80019f8:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80019fc:	ed93 7a00 	vldr	s14, [r3]
 8001a00:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a04:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8001a08:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a10:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a14:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001a18:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a1c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a20:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a30:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a34:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001a38:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001a3c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a40:	f5a3 7244 	sub.w	r2, r3, #784	@ 0x310
 8001a44:	f507 735c 	add.w	r3, r7, #880	@ 0x370
 8001a48:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a4e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a52:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001a56:	461c      	mov	r4, r3
 8001a58:	f507 735c 	add.w	r3, r7, #880	@ 0x370
 8001a5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001a64:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a68:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001a6c:	ed93 7a00 	vldr	s14, [r3]
 8001a70:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a74:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a80:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a84:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001a88:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a8c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001a90:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001a94:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aa0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001aa4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001aa8:	edd3 6a02 	vldr	s13, [r3, #8]
 8001aac:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001ab0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001ab4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ab8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac0:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8001ac4:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001ac8:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001adc:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8001ae0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001ae4:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001ae8:	f207 420c 	addw	r2, r7, #1036	@ 0x40c
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001af0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001afa:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001afe:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001b00:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b04:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	105a      	asrs	r2, r3, #1
 8001b0c:	4bb2      	ldr	r3, [pc, #712]	@ (8001dd8 <FusionAhrsUpdate+0xad8>)
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8001b14:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 8001b18:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001b1a:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b24:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001b28:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001b2a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b2e:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001b32:	ed93 7a00 	vldr	s14, [r3]
 8001b36:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b42:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b46:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b52:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001b56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b5a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b5e:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b6e:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001b72:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001b76:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b7a:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001b7e:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001b80:	f207 4204 	addw	r2, r7, #1028	@ 0x404
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f507 6280 	add.w	r2, r7, #1024	@ 0x400
 8001b90:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8001b92:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001b96:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001b9a:	ed93 7a00 	vldr	s14, [r3]
 8001b9e:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001baa:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001bae:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8001bb2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001bb6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001bba:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001bbe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bc2:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bce:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001bd2:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8001bd6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001bda:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001bde:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001be2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001be6:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001bf6:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8001bfa:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001bfe:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c02:	f5a3 7252 	sub.w	r2, r3, #840	@ 0x348
 8001c06:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001c0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c10:	f507 7359 	add.w	r3, r7, #868	@ 0x364
 8001c14:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8001c18:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001c1e:	bf00      	nop
 8001c20:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c24:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c28:	461c      	mov	r4, r3
 8001c2a:	f507 7359 	add.w	r3, r7, #868	@ 0x364
 8001c2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001c36:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c3a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c42:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c46:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001c4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c52:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c56:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c5e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c62:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001c66:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c72:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c76:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001c7e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c82:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c86:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c8a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c8e:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c9e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ca2:	edd3 6a00 	vldr	s13, [r3]
 8001ca6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001caa:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001cae:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cba:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001cbe:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8001cc2:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001cc6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001cca:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001cce:	ed93 7a00 	vldr	s14, [r3]
 8001cd2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001cd6:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001cda:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001ce6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001cea:	edd3 6a01 	vldr	s13, [r3, #4]
 8001cee:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001cf2:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d02:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d06:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8001d0a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001d0e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d12:	f5a3 725b 	sub.w	r2, r3, #876	@ 0x36c
 8001d16:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 8001d1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001d20:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d24:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d28:	461c      	mov	r4, r3
 8001d2a:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 8001d2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001d36:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d3a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d3e:	ed93 7a00 	vldr	s14, [r3]
 8001d42:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d46:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d52:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d56:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8001d5a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001d5e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d62:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d66:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d6a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d6e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d72:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d7e:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8001d82:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001d86:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d8a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d92:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d96:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001da6:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8001daa:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001dae:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001db2:	f5a3 7264 	sub.w	r2, r3, #912	@ 0x390
 8001db6:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001dba:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001dc0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001dc4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001dc8:	461c      	mov	r4, r3
 8001dca:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001dd6:	e004      	b.n	8001de2 <FusionAhrsUpdate+0xae2>
 8001dd8:	5f3759df 	.word	0x5f3759df
 8001ddc:	3c8efa35 	.word	0x3c8efa35
            break;
 8001de0:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 8001de2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001de6:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d107      	bne.n	8001e0a <FusionAhrsUpdate+0xb0a>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 8001dfa:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001dfe:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 8001e0a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e0e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f207 4224 	addw	r2, r7, #1060	@ 0x424
 8001e1a:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 8001e1c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e20:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001e2a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e2e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e40:	dd2f      	ble.n	8001ea2 <FusionAhrsUpdate+0xba2>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 8001e42:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e46:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001e50:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e54:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	edd3 7a00 	vldr	s15, [r3]
 8001e5e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001e62:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e66:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e6a:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e76:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 8001e7a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e82:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e86:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        feedbackGain = fusionAhrs->rampedGain;
 8001e90:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001e94:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	f207 4224 	addw	r2, r7, #1060	@ 0x424
 8001ea0:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 8001ea2:	ed1f 7a32 	vldr	s14, [pc, #-200]	@ 8001ddc <FusionAhrsUpdate+0xadc>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 8001ea6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	edc7 7afa 	vstr	s15, [r7, #1000]	@ 0x3e8
    result.axis.x = vector.axis.x * scalar;
 8001eb2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001eb6:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	edd7 7afa 	vldr	s15, [r7, #1000]	@ 0x3e8
 8001ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001eca:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ece:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001ed2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001ed6:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001eda:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ede:	edd7 7afa 	vldr	s15, [r7, #1000]	@ 0x3e8
 8001ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001eea:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001eee:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001ef2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001ef6:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001efa:	ed93 7a02 	vldr	s14, [r3, #8]
 8001efe:	edd7 7afa 	vldr	s15, [r7, #1000]	@ 0x3e8
 8001f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f06:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f0a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f0e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001f12:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f16:	f5a3 72d6 	sub.w	r2, r3, #428	@ 0x1ac
 8001f1a:	f507 7377 	add.w	r3, r7, #988	@ 0x3dc
 8001f1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f24:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f28:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f2c:	461c      	mov	r4, r3
 8001f2e:	f507 7377 	add.w	r3, r7, #988	@ 0x3dc
 8001f32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f3a:	f207 4324 	addw	r3, r7, #1060	@ 0x424
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    result.axis.x = vector.axis.x * scalar;
 8001f44:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f48:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f4c:	ed93 7a00 	vldr	s14, [r3]
 8001f50:	edd7 7afb 	vldr	s15, [r7, #1004]	@ 0x3ec
 8001f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f58:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f5c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001f60:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001f64:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f68:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f70:	edd7 7afb 	vldr	s15, [r7, #1004]	@ 0x3ec
 8001f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f78:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f7c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001f80:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001f84:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f88:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f90:	edd7 7afb 	vldr	s15, [r7, #1004]	@ 0x3ec
 8001f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f98:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001f9c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001fa0:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001fa4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001fa8:	f5a3 72e2 	sub.w	r2, r3, #452	@ 0x1c4
 8001fac:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001fb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001fb6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001fba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001fbe:	461c      	mov	r4, r3
 8001fc0:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001fc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001fcc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001fd0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001fd4:	ed93 7a00 	vldr	s14, [r3]
 8001fd8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001fdc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001fec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ff0:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001ff4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001ff8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ffc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002000:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002004:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002008:	edd3 7a01 	vldr	s15, [r3, #4]
 800200c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002010:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002014:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002018:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 800201c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002020:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002024:	ed93 7a02 	vldr	s14, [r3, #8]
 8002028:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800202c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002030:	edd3 7a02 	vldr	s15, [r3, #8]
 8002034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002038:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800203c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002040:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002044:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002048:	f5a3 72f4 	sub.w	r2, r3, #488	@ 0x1e8
 800204c:	f507 7371 	add.w	r3, r7, #964	@ 0x3c4
 8002050:	ca07      	ldmia	r2, {r0, r1, r2}
 8002052:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002056:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800205a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800205e:	461c      	mov	r4, r3
 8002060:	f507 7371 	add.w	r3, r7, #964	@ 0x3c4
 8002064:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002068:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800206c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002070:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
    result.axis.x = vector.axis.x * scalar;
 800207a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800207e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002082:	ed93 7a00 	vldr	s14, [r3]
 8002086:	edd7 7afc 	vldr	s15, [r7, #1008]	@ 0x3f0
 800208a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002092:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002096:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800209a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800209e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80020a6:	edd7 7afc 	vldr	s15, [r7, #1008]	@ 0x3f0
 80020aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ae:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80020b2:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80020b6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80020ba:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80020be:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80020c6:	edd7 7afc 	vldr	s15, [r7, #1008]	@ 0x3f0
 80020ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ce:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80020d2:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80020d6:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80020da:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80020de:	f5a3 7200 	sub.w	r2, r3, #512	@ 0x200
 80020e2:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80020e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80020e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80020ec:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80020f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020f4:	461c      	mov	r4, r3
 80020f6:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80020fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002102:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002106:	f5a3 7207 	sub.w	r2, r3, #540	@ 0x21c
 800210a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800210e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4614      	mov	r4, r2
 8002116:	330c      	adds	r3, #12
 8002118:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800211a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 800211e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002122:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002126:	edd3 7a01 	vldr	s15, [r3, #4]
 800212a:	eeb1 7a67 	vneg.f32	s14, s15
 800212e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002132:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002142:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002146:	edd3 6a02 	vldr	s13, [r3, #8]
 800214a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800214e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002152:	edd3 7a01 	vldr	s15, [r3, #4]
 8002156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800215a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800215e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002162:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002166:	edd3 6a03 	vldr	s13, [r3, #12]
 800216a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800216e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002172:	edd3 7a02 	vldr	s15, [r3, #8]
 8002176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800217a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002182:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8002186:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 800218a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800218e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002192:	ed93 7a00 	vldr	s14, [r3]
 8002196:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800219a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80021aa:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80021ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80021b2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80021b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80021be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021c6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80021ca:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80021ce:	edd3 6a03 	vldr	s13, [r3, #12]
 80021d2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80021d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021da:	edd3 7a01 	vldr	s15, [r3, #4]
 80021de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80021ea:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80021ee:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 80021f2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80021f6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80021fa:	ed93 7a00 	vldr	s14, [r3]
 80021fe:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002202:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002206:	edd3 7a01 	vldr	s15, [r3, #4]
 800220a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800220e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002212:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002216:	edd3 6a01 	vldr	s13, [r3, #4]
 800221a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800221e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002222:	edd3 7a02 	vldr	s15, [r3, #8]
 8002226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800222e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002232:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002236:	edd3 6a03 	vldr	s13, [r3, #12]
 800223a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800223e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800224a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800224e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002252:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8002256:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 800225a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800225e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002262:	ed93 7a00 	vldr	s14, [r3]
 8002266:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800226a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800226e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002272:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002276:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800227a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800227e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002282:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002286:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800228a:	edd3 7a01 	vldr	s15, [r3, #4]
 800228e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002292:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002296:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800229a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800229e:	edd3 6a02 	vldr	s13, [r3, #8]
 80022a2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80022a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80022ba:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80022be:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 80022c2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80022c6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80022ca:	f507 746a 	add.w	r4, r7, #936	@ 0x3a8
 80022ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80022d4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80022d8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022dc:	461c      	mov	r4, r3
 80022de:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80022e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80022e8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80022ec:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 80022f0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80022f4:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4614      	mov	r4, r2
 80022fc:	330c      	adds	r3, #12
 80022fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 8002304:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002308:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800230c:	ed93 7a00 	vldr	s14, [r3]
 8002310:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002314:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002318:	edd3 7a00 	vldr	s15, [r3]
 800231c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002320:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002324:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8002328:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 800232c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002330:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002334:	ed93 7a01 	vldr	s14, [r3, #4]
 8002338:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800233c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002340:	edd3 7a01 	vldr	s15, [r3, #4]
 8002344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002348:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800234c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8002350:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 8002354:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002358:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800235c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002360:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002364:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002368:	edd3 7a02 	vldr	s15, [r3, #8]
 800236c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002370:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002374:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8002378:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 800237c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002380:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002384:	ed93 7a03 	vldr	s14, [r3, #12]
 8002388:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800238c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002390:	edd3 7a03 	vldr	s15, [r3, #12]
 8002394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002398:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800239c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80023a0:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 80023a4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80023a8:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80023ac:	f507 7466 	add.w	r4, r7, #920	@ 0x398
 80023b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80023b6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80023ba:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80023be:	461c      	mov	r4, r3
 80023c0:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 80023c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 80023ca:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80023ce:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 80023d8:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 80023dc:	f103 040c 	add.w	r4, r3, #12
 80023e0:	4613      	mov	r3, r2
 80023e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80023e8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80023ec:	f5a3 721f 	sub.w	r2, r3, #636	@ 0x27c
 80023f0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80023f4:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4614      	mov	r4, r2
 80023fc:	330c      	adds	r3, #12
 80023fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8002404:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002408:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800240c:	ed93 7a00 	vldr	s14, [r3]
 8002410:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002414:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002420:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002424:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002428:	edd3 6a01 	vldr	s13, [r3, #4]
 800242c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002430:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002434:	edd3 7a01 	vldr	s15, [r3, #4]
 8002438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002440:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002444:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002448:	edd3 6a02 	vldr	s13, [r3, #8]
 800244c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002450:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002454:	edd3 7a02 	vldr	s15, [r3, #8]
 8002458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800245c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002460:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002464:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002468:	edd3 6a03 	vldr	s13, [r3, #12]
 800246c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002470:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002474:	edd3 7a03 	vldr	s15, [r3, #12]
 8002478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800247c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002480:	edc7 7aff 	vstr	s15, [r7, #1020]	@ 0x3fc
    float halfx = 0.5f * x;
 8002484:	edd7 7aff 	vldr	s15, [r7, #1020]	@ 0x3fc
 8002488:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800248c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002490:	edc7 7afe 	vstr	s15, [r7, #1016]	@ 0x3f8
    float y = x;
 8002494:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002498:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800249c:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 80024a0:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 80024a2:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80024ac:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80024b0:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 80024b2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80024b6:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	105a      	asrs	r2, r3, #1
 80024be:	4bc0      	ldr	r3, [pc, #768]	@ (80027c0 <FusionAhrsUpdate+0x14c0>)
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 80024c6:	f5a2 7229 	sub.w	r2, r2, #676	@ 0x2a4
 80024ca:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80024cc:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80024d6:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80024da:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80024dc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80024e0:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80024e4:	ed93 7a00 	vldr	s14, [r3]
 80024e8:	edd7 7afe 	vldr	s15, [r7, #1016]	@ 0x3f8
 80024ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024f0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80024f4:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80024f8:	edd3 7a00 	vldr	s15, [r3]
 80024fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002500:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002504:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002508:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800250c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002518:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800251c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002520:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8002524:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002528:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800252c:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800252e:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8002532:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002536:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800253a:	ed93 7a00 	vldr	s14, [r3]
 800253e:	edd7 7afd 	vldr	s15, [r7, #1012]	@ 0x3f4
 8002542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002546:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800254a:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800254e:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8002552:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002556:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800255a:	ed93 7a01 	vldr	s14, [r3, #4]
 800255e:	edd7 7afd 	vldr	s15, [r7, #1012]	@ 0x3f4
 8002562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002566:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800256a:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800256e:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8002572:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002576:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800257a:	ed93 7a02 	vldr	s14, [r3, #8]
 800257e:	edd7 7afd 	vldr	s15, [r7, #1012]	@ 0x3f4
 8002582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002586:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800258a:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800258e:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8002592:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002596:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800259a:	ed93 7a03 	vldr	s14, [r3, #12]
 800259e:	edd7 7afd 	vldr	s15, [r7, #1012]	@ 0x3f4
 80025a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80025aa:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80025ae:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 80025b2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80025b6:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80025ba:	f507 7462 	add.w	r4, r7, #904	@ 0x388
 80025be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80025c4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80025c8:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80025cc:	461c      	mov	r4, r3
 80025ce:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80025d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 80025d8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80025dc:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 80025e6:	f5a2 7223 	sub.w	r2, r2, #652	@ 0x28c
 80025ea:	f103 040c 	add.w	r4, r3, #12
 80025ee:	4613      	mov	r3, r2
 80025f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 80025f6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80025fa:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	ed93 7a04 	vldr	s14, [r3, #16]
 8002604:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002608:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002616:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800261a:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	edd3 6a03 	vldr	s13, [r3, #12]
 8002624:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002628:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 800263e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002642:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002646:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 800264a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800264e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	ed93 7a03 	vldr	s14, [r3, #12]
 8002658:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800265c:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	edd3 7a04 	vldr	s15, [r3, #16]
 8002666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800266a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800266e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	edd3 6a05 	vldr	s13, [r3, #20]
 8002678:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800267c:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	edd3 7a06 	vldr	s15, [r3, #24]
 8002686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800268a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268e:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8002692:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002696:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800269a:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 800269e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80026a2:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80026ac:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80026b0:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80026ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80026c2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026c6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80026ca:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	edd3 6a06 	vldr	s13, [r3, #24]
 80026d4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80026d8:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	edd3 7a06 	vldr	s15, [r3, #24]
 80026e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 80026ee:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80026f2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80026f6:	edc3 7a02 	vstr	s15, [r3, #8]
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80026fa:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80026fe:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8002702:	ed93 7a00 	vldr	s14, [r3]
 8002706:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800270a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002716:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800271a:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 800271e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002722:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002726:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800272a:	ed93 7a01 	vldr	s14, [r3, #4]
 800272e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002732:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002736:	edd3 7a01 	vldr	s15, [r3, #4]
 800273a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800273e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002742:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8002746:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 800274a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800274e:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8002752:	ed93 7a02 	vldr	s14, [r3, #8]
 8002756:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800275a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800275e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002766:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800276a:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 800276e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002772:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002776:	f5a3 7235 	sub.w	r2, r3, #724	@ 0x2d4
 800277a:	f507 735f 	add.w	r3, r7, #892	@ 0x37c
 800277e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002780:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002784:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002788:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 800278c:	461c      	mov	r4, r3
 800278e:	f507 735f 	add.w	r3, r7, #892	@ 0x37c
 8002792:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002796:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 800279a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800279e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 80027a8:	f5a2 7232 	sub.w	r2, r2, #712	@ 0x2c8
 80027ac:	331c      	adds	r3, #28
 80027ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80027b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 80027b4:	bf00      	nop
 80027b6:	f507 6785 	add.w	r7, r7, #1064	@ 0x428
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc90      	pop	{r4, r7}
 80027be:	4770      	bx	lr
 80027c0:	5f3759df 	.word	0x5f3759df

080027c4 <FusionAhrsUpdateWithoutMagnetometer>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdateWithoutMagnetometer(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const float samplePeriod) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	@ 0x30
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	61f8      	str	r0, [r7, #28]
 80027cc:	eeb0 5a40 	vmov.f32	s10, s0
 80027d0:	eef0 5a60 	vmov.f32	s11, s1
 80027d4:	eeb0 6a41 	vmov.f32	s12, s2
 80027d8:	eef0 6a61 	vmov.f32	s13, s3
 80027dc:	eeb0 7a42 	vmov.f32	s14, s4
 80027e0:	eef0 7a62 	vmov.f32	s15, s5
 80027e4:	ed87 3a00 	vstr	s6, [r7]
 80027e8:	ed87 5a04 	vstr	s10, [r7, #16]
 80027ec:	edc7 5a05 	vstr	s11, [r7, #20]
 80027f0:	ed87 6a06 	vstr	s12, [r7, #24]
 80027f4:	edc7 6a01 	vstr	s13, [r7, #4]
 80027f8:	ed87 7a02 	vstr	s14, [r7, #8]
 80027fc:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(fusionAhrs, gyroscope, accelerometer, FUSION_VECTOR3_ZERO, samplePeriod);
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002812:	ed97 3a09 	vldr	s6, [r7, #36]	@ 0x24
 8002816:	edd7 3a0a 	vldr	s7, [r7, #40]	@ 0x28
 800281a:	ed97 4a0b 	vldr	s8, [r7, #44]	@ 0x2c
 800281e:	ed97 5a01 	vldr	s10, [r7, #4]
 8002822:	edd7 5a02 	vldr	s11, [r7, #8]
 8002826:	ed97 6a03 	vldr	s12, [r7, #12]
 800282a:	edd7 6a04 	vldr	s13, [r7, #16]
 800282e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002832:	edd7 7a06 	vldr	s15, [r7, #24]
 8002836:	edd7 4a00 	vldr	s9, [r7]
 800283a:	eef0 1a45 	vmov.f32	s3, s10
 800283e:	eeb0 2a65 	vmov.f32	s4, s11
 8002842:	eef0 2a46 	vmov.f32	s5, s12
 8002846:	eeb0 0a66 	vmov.f32	s0, s13
 800284a:	eef0 0a47 	vmov.f32	s1, s14
 800284e:	eeb0 1a67 	vmov.f32	s2, s15
 8002852:	69f8      	ldr	r0, [r7, #28]
 8002854:	f7fe fd54 	bl	8001300 <FusionAhrsUpdate>

    // Zero yaw once initialisation complete
    if (FusionAhrsIsInitialising(fusionAhrs) == true) {
 8002858:	69f8      	ldr	r0, [r7, #28]
 800285a:	f000 f862 	bl	8002922 <FusionAhrsIsInitialising>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d004      	beq.n	800286e <FusionAhrsUpdateWithoutMagnetometer+0xaa>
        fusionAhrs->zeroYawPending = true;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        if (fusionAhrs->zeroYawPending == true) {
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
            fusionAhrs->zeroYawPending = false;
        }
    }
}
 800286c:	e00d      	b.n	800288a <FusionAhrsUpdateWithoutMagnetometer+0xc6>
        if (fusionAhrs->zeroYawPending == true) {
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <FusionAhrsUpdateWithoutMagnetometer+0xc6>
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
 8002878:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002894 <FusionAhrsUpdateWithoutMagnetometer+0xd0>
 800287c:	69f8      	ldr	r0, [r7, #28]
 800287e:	f000 f869 	bl	8002954 <FusionAhrsSetYaw>
            fusionAhrs->zeroYawPending = false;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800288a:	bf00      	nop
 800288c:	3730      	adds	r7, #48	@ 0x30
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	00000000 	.word	0x00000000

08002898 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 8002898:	b490      	push	{r4, r7}
 800289a:	b096      	sub	sp, #88	@ 0x58
 800289c:	af00      	add	r7, sp, #0
 800289e:	6178      	str	r0, [r7, #20]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80028a6:	330c      	adds	r3, #12
 80028a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 80028ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b0:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 80028b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80028b6:	eef1 7a67 	vneg.f32	s15, s15
 80028ba:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 80028be:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80028c2:	eef1 7a67 	vneg.f32	s15, s15
 80028c6:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 80028ca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80028ce:	eef1 7a67 	vneg.f32	s15, s15
 80028d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return conjugate;
 80028d6:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 80028da:	f107 0318 	add.w	r3, r7, #24
 80028de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028e4:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80028e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 80028f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80028f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028fa:	ee06 0a10 	vmov	s12, r0
 80028fe:	ee06 1a90 	vmov	s13, r1
 8002902:	ee07 2a10 	vmov	s14, r2
 8002906:	ee07 3a90 	vmov	s15, r3
}
 800290a:	eeb0 0a46 	vmov.f32	s0, s12
 800290e:	eef0 0a66 	vmov.f32	s1, s13
 8002912:	eeb0 1a47 	vmov.f32	s2, s14
 8002916:	eef0 1a67 	vmov.f32	s3, s15
 800291a:	3758      	adds	r7, #88	@ 0x58
 800291c:	46bd      	mov	sp, r7
 800291e:	bc90      	pop	{r4, r7}
 8002920:	4770      	bx	lr

08002922 <FusionAhrsIsInitialising>:
/**
 * @brief Returns true while the AHRS algorithm is initialising.
 * @param fusionAhrs AHRS algorithm structure.
 * @return True while the AHRS algorithm is initialising.
 */
bool FusionAhrsIsInitialising(const FusionAhrs * const fusionAhrs) {
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
    return fusionAhrs->rampedGain > fusionAhrs->gain;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293e:	bfcc      	ite	gt
 8002940:	2301      	movgt	r3, #1
 8002942:	2300      	movle	r3, #0
 8002944:	b2db      	uxtb	r3, r3
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <FusionAhrsSetYaw>:
 * AHRS algorithm.  This function can be used to reset drift in yaw when the
 * AHRS algorithm is being used without a magnetometer.
 * @param fusionAhrs AHRS algorithm structure.
 * @param yaw Yaw angle in degrees.
 */
void FusionAhrsSetYaw(FusionAhrs * const fusionAhrs, const float yaw) {
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b0af      	sub	sp, #188	@ 0xbc
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	ed87 0a00 	vstr	s0, [r7]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8002966:	330c      	adds	r3, #12
 8002968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800296a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800296e:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002972:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002976:	ee27 7a27 	vmul.f32	s14, s14, s15
 800297a:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800297e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298a:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 800298e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002996:	ee37 7a27 	vadd.f32	s14, s14, s15
 800299a:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 800299e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80029a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029aa:	eeb0 0a67 	vmov.f32	s0, s15
 80029ae:	f00c fd25 	bl	800f3fc <sqrtf>
 80029b2:	eeb0 7a40 	vmov.f32	s14, s0
 80029b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029be:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 80029c2:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80029c6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80029ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ce:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 80029d2:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80029d6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80029da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029de:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 80029e2:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80029e6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80029ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ee:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 80029f2:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80029f6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80029fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fe:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    return normalisedQuaternion;
 8002a02:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 8002a06:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a10:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002a14:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002a18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code
    fusionAhrs->quaternion = FusionQuaternionNormalise(fusionAhrs->quaternion); // quaternion must be normalised accurately (approximation not sufficient)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f103 040c 	add.w	r4, r3, #12
 8002a24:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002a28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float inverseYaw = atan2f(Q.x * Q.y + Q.w * Q.z, Q.w * Q.w - 0.5f + Q.x * Q.x); // Euler angle of conjugate
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	edd3 6a03 	vldr	s13, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a4e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a66:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	edd3 6a04 	vldr	s13, [r3, #16]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7e:	eef0 0a67 	vmov.f32	s1, s15
 8002a82:	eeb0 0a46 	vmov.f32	s0, s12
 8002a86:	f00c fcb7 	bl	800f3f8 <atan2f>
 8002a8a:	ed87 0a2d 	vstr	s0, [r7, #180]	@ 0xb4
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    return degrees * ((float) M_PI / 180.0f);
 8002a94:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8002a98:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8002c28 <FusionAhrsSetYaw+0x2d4>
 8002a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
    const float halfInverseYawMinusOffset = 0.5f * (inverseYaw - FusionDegreesToRadians(yaw));
 8002aa0:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab0:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    const FusionQuaternion inverseYawQuaternion = {
        .element.w = cosf(halfInverseYawMinusOffset),
 8002ab4:	ed97 0a2c 	vldr	s0, [r7, #176]	@ 0xb0
 8002ab8:	f00c fcbe 	bl	800f438 <cosf>
 8002abc:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion inverseYawQuaternion = {
 8002ac0:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        .element.x = 0.0f,
        .element.y = 0.0f,
        .element.z = -1.0f * sinf(halfInverseYawMinusOffset),
 8002ad2:	ed97 0a2c 	vldr	s0, [r7, #176]	@ 0xb0
 8002ad6:	f00c fcfb 	bl	800f4d0 <sinf>
 8002ada:	eef0 7a40 	vmov.f32	s15, s0
 8002ade:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion inverseYawQuaternion = {
 8002ae2:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002aec:	330c      	adds	r3, #12
 8002aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 8002af4:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002af8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002afc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b00:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8002b04:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b10:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8002b14:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002b18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b20:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8002b24:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b30:	edc7 7a02 	vstr	s15, [r7, #8]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 8002b34:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002b38:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b40:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8002b44:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b50:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8002b54:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b60:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8002b64:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b70:	edc7 7a03 	vstr	s15, [r7, #12]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 8002b74:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002b78:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b80:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8002b84:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002b88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b90:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8002b94:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ba0:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8002ba4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb0:	edc7 7a04 	vstr	s15, [r7, #16]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 8002bb4:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002bb8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc0:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8002bc4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd0:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8002bd4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002be0:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8002be4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002be8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf0:	edc7 7a05 	vstr	s15, [r7, #20]
    return result;
 8002bf4:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8002bf8:	f107 0308 	add.w	r3, r7, #8
 8002bfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002c02:	f107 0418 	add.w	r4, r7, #24
 8002c06:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };
    fusionAhrs->quaternion = FusionQuaternionMultiply(inverseYawQuaternion, fusionAhrs->quaternion);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f103 040c 	add.w	r4, r3, #12
 8002c16:	f107 0318 	add.w	r3, r7, #24
 8002c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q // undefine shorthand label
}
 8002c20:	bf00      	nop
 8002c22:	37bc      	adds	r7, #188	@ 0xbc
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd90      	pop	{r4, r7, pc}
 8002c28:	3c8efa35 	.word	0x3c8efa35
 8002c2c:	00000000 	.word	0x00000000

08002c30 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c3c:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionBias->threshold = threshold;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc81 	bl	8000558 <__aeabi_f2d>
 8002c56:	a312      	add	r3, pc, #72	@ (adr r3, 8002ca0 <FusionBiasInitialise+0x70>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f7fd fcd4 	bl	8000608 <__aeabi_dmul>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	f7fd ffc6 	bl	8000bf8 <__aeabi_d2f>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	609a      	str	r2, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	615a      	str	r2, [r3, #20]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	619a      	str	r2, [r3, #24]
}
 8002c92:	bf00      	nop
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	f3af 8000 	nop.w
 8002ca0:	8c0eff43 	.word	0x8c0eff43
 8002ca4:	3fc015bf 	.word	0x3fc015bf

08002ca8 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 8002ca8:	b480      	push	{r7}
 8002caa:	b0b5      	sub	sp, #212	@ 0xd4
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	61f8      	str	r0, [r7, #28]
 8002cb0:	eef0 6a40 	vmov.f32	s13, s0
 8002cb4:	eeb0 7a60 	vmov.f32	s14, s1
 8002cb8:	eef0 7a41 	vmov.f32	s15, s2
 8002cbc:	edc7 6a04 	vstr	s13, [r7, #16]
 8002cc0:	ed87 7a05 	vstr	s14, [r7, #20]
 8002cc4:	edc7 7a06 	vstr	s15, [r7, #24]
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002cce:	3210      	adds	r2, #16
 8002cd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002cd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cda:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002ce6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cea:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002cf6:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cfa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d02:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    return result;
 8002d06:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002d0a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002d0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d14:	f107 0310 	add.w	r3, r7, #16
 8002d18:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8002d1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8002d22:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d26:	eeb0 7ae7 	vabs.f32	s14, s15
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	edd3 7a00 	vldr	s15, [r3]
 8002d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d38:	dc17      	bgt.n	8002d6a <FusionBiasUpdate+0xc2>
 8002d3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d3e:	eeb0 7ae7 	vabs.f32	s14, s15
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	edd3 7a00 	vldr	s15, [r3]
 8002d48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d50:	dc0b      	bgt.n	8002d6a <FusionBiasUpdate+0xc2>
 8002d52:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d56:	eeb0 7ae7 	vabs.f32	s14, s15
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d68:	dd0b      	ble.n	8002d82 <FusionBiasUpdate+0xda>
        fusionBias->stationaryTimer = 0.0f;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	60da      	str	r2, [r3, #12]
        return gyroscope;
 8002d72:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002d76:	f107 0210 	add.w	r2, r7, #16
 8002d7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d80:	e081      	b.n	8002e86 <FusionBiasUpdate+0x1de>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d88:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d94:	d512      	bpl.n	8002dbc <FusionBiasUpdate+0x114>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 8002dac:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002db0:	f107 0210 	add.w	r2, r7, #16
 8002db4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002db6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002dba:	e064      	b.n	8002e86 <FusionBiasUpdate+0x1de>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    result.axis.x = vector.axis.x * scalar;
 8002dc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002dc8:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8002dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd0:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    result.axis.y = vector.axis.y * scalar;
 8002dd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dd8:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8002ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de0:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    result.axis.z = vector.axis.z * scalar;
 8002de4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002de8:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8002dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df0:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
    return result;
 8002df4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002df8:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8002dfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e02:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e06:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8002e0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e16:	3210      	adds	r2, #16
 8002e18:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8002e1e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002e22:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e2a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8002e2e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002e32:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8002e3e:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002e42:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8002e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    return result;
 8002e4e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002e52:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002e56:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e60:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8002e64:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3310      	adds	r3, #16
 8002e6e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002e72:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 8002e78:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002e7c:	f107 0210 	add.w	r2, r7, #16
 8002e80:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8002e86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e92:	ee06 1a90 	vmov	s13, r1
 8002e96:	ee07 2a10 	vmov	s14, r2
 8002e9a:	ee07 3a90 	vmov	s15, r3
 8002e9e:	eeb0 0a66 	vmov.f32	s0, s13
 8002ea2:	eef0 0a47 	vmov.f32	s1, s14
 8002ea6:	eeb0 1a67 	vmov.f32	s2, s15
 8002eaa:	37d4      	adds	r7, #212	@ 0xd4
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <initFusionAHRS>:
};

//


void initFusionAHRS(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float sample_S){
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	ed87 0a00 	vstr	s0, [r7]

	DataStruct->samplePeriod = sample_S;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	60da      	str	r2, [r3, #12]
	
	// Initialise gyroscope bias correction algorithm
    FusionBiasInitialise(fusionBias, 0.5f, DataStruct->samplePeriod); // stationary threshold = 0.5 degrees per second
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ed0:	eef0 0a67 	vmov.f32	s1, s15
 8002ed4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff fea9 	bl	8002c30 <FusionBiasInitialise>

    // Initialise AHRS algorithm
    FusionAhrsInitialise(fusionAhrs, 0.5f); // gain = 0.5
 8002ede:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8002ee2:	68b8      	ldr	r0, [r7, #8]
 8002ee4:	f7fe f9b2 	bl	800124c <FusionAhrsInitialise>

    // Set optional magnetic field limits
    FusionAhrsSetMagneticField(fusionAhrs, 20.0f, 70.0f); // valid magnetic field range = 20 uT to 70 uT
 8002ee8:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8002f00 <initFusionAHRS+0x4c>
 8002eec:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8002ef0:	68b8      	ldr	r0, [r7, #8]
 8002ef2:	f7fe f9e9 	bl	80012c8 <FusionAhrsSetMagneticField>
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	428c0000 	.word	0x428c0000

08002f04 <getFusionAHRS_6DoF>:
	DataStruct->YAW = eulerAngles.angle.yaw;
	DataStruct->PITCH = eulerAngles.angle.pitch;
	DataStruct->ROLL = eulerAngles.angle.roll;
}

void getFusionAHRS_6DoF(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float accX, float accY, float accZ, float gyrX, float gyrY, float gyrZ) {
 8002f04:	b5b0      	push	{r4, r5, r7, lr}
 8002f06:	f5ad 7d32 	sub.w	sp, sp, #712	@ 0x2c8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f10:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002f14:	6018      	str	r0, [r3, #0]
 8002f16:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f1a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002f1e:	6019      	str	r1, [r3, #0]
 8002f20:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f24:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f2e:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002f32:	ed83 0a00 	vstr	s0, [r3]
 8002f36:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f3a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002f3e:	edc3 0a00 	vstr	s1, [r3]
 8002f42:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f46:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8002f4a:	ed83 1a00 	vstr	s2, [r3]
 8002f4e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f52:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8002f56:	edc3 1a00 	vstr	s3, [r3]
 8002f5a:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f5e:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8002f62:	ed83 2a00 	vstr	s4, [r3]
 8002f66:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f6a:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8002f6e:	edc3 2a00 	vstr	s5, [r3]
	
	// Calibrate gyroscope
	FusionVector3 uncalibratedGyroscope = {
 8002f72:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f76:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8002f80:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f84:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8002f8e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002f92:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		.axis.x = gyrX, /* replace this value with actual gyroscope x axis measurement in lsb */
		.axis.y = gyrY, /* replace this value with actual gyroscope y axis measurement in lsb */
		.axis.z = gyrZ, /* replace this value with actual gyroscope z axis measurement in lsb */
	};
	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 8002f9c:	4bea      	ldr	r3, [pc, #936]	@ (8003348 <getFusionAHRS_6DoF+0x444>)
 8002f9e:	f507 74e8 	add.w	r4, r7, #464	@ 0x1d0
 8002fa2:	461d      	mov	r5, r3
 8002fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fac:	682b      	ldr	r3, [r5, #0]
 8002fae:	6023      	str	r3, [r4, #0]
 8002fb0:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002fc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002fd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002fde:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002fe2:	4ada      	ldr	r2, [pc, #872]	@ (800334c <getFusionAHRS_6DoF+0x448>)
 8002fe4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fe6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002fea:	ed97 7a80 	vldr	s14, [r7, #512]	@ 0x200
 8002fee:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8002ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ffe:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003002:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003006:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 800300a:	ed97 7a81 	vldr	s14, [r7, #516]	@ 0x204
 800300e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003016:	edd3 7a01 	vldr	s15, [r3, #4]
 800301a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800301e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003022:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003026:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 800302a:	ed97 7a82 	vldr	s14, [r7, #520]	@ 0x208
 800302e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003036:	edd3 7a02 	vldr	s15, [r3, #8]
 800303a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800303e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003042:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003046:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800304a:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800304e:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 8003052:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003056:	ca07      	ldmia	r2, {r0, r1, r2}
 8003058:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800305c:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003060:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8003064:	ca07      	ldmia	r2, {r0, r1, r2}
 8003066:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 800306a:	ed97 7aa8 	vldr	s14, [r7, #672]	@ 0x2a0
 800306e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003072:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003082:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003086:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 800308a:	ed97 7aa9 	vldr	s14, [r7, #676]	@ 0x2a4
 800308e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003092:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003096:	edd3 7a01 	vldr	s15, [r3, #4]
 800309a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80030a2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80030a6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 80030aa:	ed97 7aaa 	vldr	s14, [r7, #680]	@ 0x2a8
 80030ae:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80030b2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80030ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030be:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80030c2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80030c6:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80030ca:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80030ce:	f5a3 72e2 	sub.w	r2, r3, #452	@ 0x1c4
 80030d2:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 80030d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80030d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030dc:	f507 7325 	add.w	r3, r7, #660	@ 0x294
 80030e0:	f507 721f 	add.w	r2, r7, #636	@ 0x27c
 80030e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80030e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 80030ea:	ed97 7a74 	vldr	s14, [r7, #464]	@ 0x1d0
 80030ee:	edd7 7aa5 	vldr	s15, [r7, #660]	@ 0x294
 80030f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030f6:	edd7 6a75 	vldr	s13, [r7, #468]	@ 0x1d4
 80030fa:	edd7 7aa6 	vldr	s15, [r7, #664]	@ 0x298
 80030fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003106:	edd7 6a76 	vldr	s13, [r7, #472]	@ 0x1d8
 800310a:	edd7 7aa7 	vldr	s15, [r7, #668]	@ 0x29c
 800310e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003116:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800311a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800311e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 8003122:	ed97 7a77 	vldr	s14, [r7, #476]	@ 0x1dc
 8003126:	edd7 7aa5 	vldr	s15, [r7, #660]	@ 0x294
 800312a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800312e:	edd7 6a78 	vldr	s13, [r7, #480]	@ 0x1e0
 8003132:	edd7 7aa6 	vldr	s15, [r7, #664]	@ 0x298
 8003136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800313a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800313e:	edd7 6a79 	vldr	s13, [r7, #484]	@ 0x1e4
 8003142:	edd7 7aa7 	vldr	s15, [r7, #668]	@ 0x29c
 8003146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800314a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003152:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003156:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800315a:	ed97 7a7a 	vldr	s14, [r7, #488]	@ 0x1e8
 800315e:	edd7 7aa5 	vldr	s15, [r7, #660]	@ 0x294
 8003162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003166:	edd7 6a7b 	vldr	s13, [r7, #492]	@ 0x1ec
 800316a:	edd7 7aa6 	vldr	s15, [r7, #664]	@ 0x298
 800316e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003172:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003176:	edd7 6a7c 	vldr	s13, [r7, #496]	@ 0x1f0
 800317a:	edd7 7aa7 	vldr	s15, [r7, #668]	@ 0x29c
 800317e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003186:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800318a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800318e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003192:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003196:	f5a3 72ee 	sub.w	r2, r3, #476	@ 0x1dc
 800319a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800319e:	ca07      	ldmia	r2, {r0, r1, r2}
 80031a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031a4:	f507 732b 	add.w	r3, r7, #684	@ 0x2ac
 80031a8:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 80031ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80031ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 80031b2:	bf00      	nop
 80031b4:	f507 73fa 	add.w	r3, r7, #500	@ 0x1f4
 80031b8:	f507 722b 	add.w	r2, r7, #684	@ 0x2ac
 80031bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80031be:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Calibrate accelerometer
	FusionVector3 uncalibratedAccelerometer = {
 80031c2:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80031c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80031ca:	f507 7232 	add.w	r2, r7, #712	@ 0x2c8
 80031ce:	f5a2 722c 	sub.w	r2, r2, #688	@ 0x2b0
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80031da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80031de:	f507 7232 	add.w	r2, r7, #712	@ 0x2c8
 80031e2:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80031ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80031f2:	f507 7232 	add.w	r2, r7, #712	@ 0x2c8
 80031f6:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	609a      	str	r2, [r3, #8]
		.axis.x = accX, /* replace this value with actual accelerometer x axis measurement in lsb */
		.axis.y = accY, /* replace this value with actual accelerometer y axis measurement in lsb */
		.axis.z = accZ, /* replace this value with actual accelerometer z axis measurement in lsb */
	};
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 80031fe:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003202:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003206:	4a50      	ldr	r2, [pc, #320]	@ (8003348 <getFusionAHRS_6DoF+0x444>)
 8003208:	461c      	mov	r4, r3
 800320a:	4615      	mov	r5, r2
 800320c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800320e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003214:	682b      	ldr	r3, [r5, #0]
 8003216:	6023      	str	r3, [r4, #0]
 8003218:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800321c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800322a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003238:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
 8003242:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003246:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800324a:	4a41      	ldr	r2, [pc, #260]	@ (8003350 <getFusionAHRS_6DoF+0x44c>)
 800324c:	ca07      	ldmia	r2, {r0, r1, r2}
 800324e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8003252:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003256:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800325a:	ed93 7a00 	vldr	s14, [r3]
 800325e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003262:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003272:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8003276:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 800327a:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800327e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003282:	ed93 7a01 	vldr	s14, [r3, #4]
 8003286:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800328a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800328e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003296:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800329a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800329e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80032a2:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80032a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80032aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80032ae:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80032b2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80032b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032be:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80032c2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80032c6:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80032ca:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80032ce:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 80032d2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80032d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80032d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80032dc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80032e0:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 80032e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80032e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 80032ea:	ed97 7a96 	vldr	s14, [r7, #600]	@ 0x258
 80032ee:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80032f2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fe:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003302:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003306:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 800330a:	ed97 7a97 	vldr	s14, [r7, #604]	@ 0x25c
 800330e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003312:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003316:	edd3 7a01 	vldr	s15, [r3, #4]
 800331a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003322:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003326:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 800332a:	ed97 7a98 	vldr	s14, [r7, #608]	@ 0x260
 800332e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003332:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003336:	edd3 7a02 	vldr	s15, [r3, #8]
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003342:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003346:	e007      	b.n	8003358 <getFusionAHRS_6DoF+0x454>
 8003348:	08011ca0 	.word	0x08011ca0
 800334c:	20000000 	.word	0x20000000
 8003350:	2000000c 	.word	0x2000000c
 8003354:	42652ee0 	.word	0x42652ee0
 8003358:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800335c:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003360:	f5a3 7212 	sub.w	r2, r3, #584	@ 0x248
 8003364:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8003368:	ca07      	ldmia	r2, {r0, r1, r2}
 800336a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800336e:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8003372:	f507 720d 	add.w	r2, r7, #564	@ 0x234
 8003376:	ca07      	ldmia	r2, {r0, r1, r2}
 8003378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 800337c:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003380:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003384:	ed93 7a00 	vldr	s14, [r3]
 8003388:	edd7 7a93 	vldr	s15, [r7, #588]	@ 0x24c
 800338c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003390:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003394:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003398:	edd3 6a01 	vldr	s13, [r3, #4]
 800339c:	edd7 7a94 	vldr	s15, [r7, #592]	@ 0x250
 80033a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a8:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80033ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80033b4:	edd7 7a95 	vldr	s15, [r7, #596]	@ 0x254
 80033b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c0:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80033c4:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80033c8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 80033cc:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80033d0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80033d8:	edd7 7a93 	vldr	s15, [r7, #588]	@ 0x24c
 80033dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e0:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80033e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033e8:	edd3 6a04 	vldr	s13, [r3, #16]
 80033ec:	edd7 7a94 	vldr	s15, [r7, #592]	@ 0x250
 80033f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033f8:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80033fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003400:	edd3 6a05 	vldr	s13, [r3, #20]
 8003404:	edd7 7a95 	vldr	s15, [r7, #596]	@ 0x254
 8003408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800340c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003410:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003414:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003418:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800341c:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003420:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003424:	ed93 7a06 	vldr	s14, [r3, #24]
 8003428:	edd7 7a93 	vldr	s15, [r7, #588]	@ 0x24c
 800342c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003430:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003434:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003438:	edd3 6a07 	vldr	s13, [r3, #28]
 800343c:	edd7 7a94 	vldr	s15, [r7, #592]	@ 0x250
 8003440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003448:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800344c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003450:	edd3 6a08 	vldr	s13, [r3, #32]
 8003454:	edd7 7a95 	vldr	s15, [r7, #596]	@ 0x254
 8003458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800345c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003460:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003464:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003468:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800346c:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003470:	f5a3 7218 	sub.w	r2, r3, #608	@ 0x260
 8003474:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8003478:	ca07      	ldmia	r2, {r0, r1, r2}
 800347a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800347e:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 8003482:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8003486:	ca07      	ldmia	r2, {r0, r1, r2}
 8003488:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800348c:	bf00      	nop
 800348e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003492:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003496:	461c      	mov	r4, r3
 8003498:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 800349c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Update gyroscope bias correction algorithm
	calibratedGyroscope = FusionBiasUpdate(fusionBias, calibratedGyroscope);
 80034a4:	edd7 6a7d 	vldr	s13, [r7, #500]	@ 0x1f4
 80034a8:	ed97 7a7e 	vldr	s14, [r7, #504]	@ 0x1f8
 80034ac:	edd7 7a7f 	vldr	s15, [r7, #508]	@ 0x1fc
 80034b0:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80034b4:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80034b8:	eeb0 0a66 	vmov.f32	s0, s13
 80034bc:	eef0 0a47 	vmov.f32	s1, s14
 80034c0:	eeb0 1a67 	vmov.f32	s2, s15
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	f7ff fbef 	bl	8002ca8 <FusionBiasUpdate>
 80034ca:	eef0 6a40 	vmov.f32	s13, s0
 80034ce:	eeb0 7a60 	vmov.f32	s14, s1
 80034d2:	eef0 7a41 	vmov.f32	s15, s2
 80034d6:	edc7 6a7d 	vstr	s13, [r7, #500]	@ 0x1f4
 80034da:	ed87 7a7e 	vstr	s14, [r7, #504]	@ 0x1f8
 80034de:	edc7 7a7f 	vstr	s15, [r7, #508]	@ 0x1fc

	// Update AHRS algorithm
	FusionAhrsUpdateWithoutMagnetometer(fusionAhrs, calibratedGyroscope, calibratedAccelerometer, DataStruct->samplePeriod);
 80034e2:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80034e6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	edd3 4a03 	vldr	s9, [r3, #12]
 80034f0:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80034f4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80034f8:	ed93 5a00 	vldr	s10, [r3]
 80034fc:	edd3 5a01 	vldr	s11, [r3, #4]
 8003500:	ed93 6a02 	vldr	s12, [r3, #8]
 8003504:	edd7 6a7d 	vldr	s13, [r7, #500]	@ 0x1f4
 8003508:	ed97 7a7e 	vldr	s14, [r7, #504]	@ 0x1f8
 800350c:	edd7 7a7f 	vldr	s15, [r7, #508]	@ 0x1fc
 8003510:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003514:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8003518:	eeb0 3a64 	vmov.f32	s6, s9
 800351c:	eef0 1a45 	vmov.f32	s3, s10
 8003520:	eeb0 2a65 	vmov.f32	s4, s11
 8003524:	eef0 2a46 	vmov.f32	s5, s12
 8003528:	eeb0 0a66 	vmov.f32	s0, s13
 800352c:	eef0 0a47 	vmov.f32	s1, s14
 8003530:	eeb0 1a67 	vmov.f32	s2, s15
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	f7ff f945 	bl	80027c4 <FusionAhrsUpdateWithoutMagnetometer>

	// Get Euler angles
	FusionEulerAngles eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(fusionAhrs));
 800353a:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800353e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	f7ff f9a8 	bl	8002898 <FusionAhrsGetQuaternion>
 8003548:	eeb0 6a40 	vmov.f32	s12, s0
 800354c:	eef0 6a60 	vmov.f32	s13, s1
 8003550:	eeb0 7a41 	vmov.f32	s14, s2
 8003554:	eef0 7a61 	vmov.f32	s15, s3
 8003558:	ed87 6a83 	vstr	s12, [r7, #524]	@ 0x20c
 800355c:	edc7 6a84 	vstr	s13, [r7, #528]	@ 0x210
 8003560:	ed87 7a85 	vstr	s14, [r7, #532]	@ 0x214
 8003564:	edc7 7a86 	vstr	s15, [r7, #536]	@ 0x218
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 8003568:	ed97 7a83 	vldr	s14, [r7, #524]	@ 0x20c
 800356c:	edd7 7a83 	vldr	s15, [r7, #524]	@ 0x20c
 8003570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003574:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003578:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800357c:	edc7 7ab1 	vstr	s15, [r7, #708]	@ 0x2c4
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003580:	ed97 7a85 	vldr	s14, [r7, #532]	@ 0x214
 8003584:	edd7 7a86 	vldr	s15, [r7, #536]	@ 0x218
 8003588:	ee27 7a27 	vmul.f32	s14, s14, s15
 800358c:	edd7 6a83 	vldr	s13, [r7, #524]	@ 0x20c
 8003590:	edd7 7a84 	vldr	s15, [r7, #528]	@ 0x210
 8003594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003598:	ee77 6a67 	vsub.f32	s13, s14, s15
 800359c:	ed97 7a86 	vldr	s14, [r7, #536]	@ 0x218
 80035a0:	edd7 7a86 	vldr	s15, [r7, #536]	@ 0x218
 80035a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035a8:	edd7 7ab1 	vldr	s15, [r7, #708]	@ 0x2c4
 80035ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b0:	eef0 0a67 	vmov.f32	s1, s15
 80035b4:	eeb0 0a66 	vmov.f32	s0, s13
 80035b8:	f00b ff1e 	bl	800f3f8 <atan2f>
 80035bc:	eef0 7a40 	vmov.f32	s15, s0
 80035c0:	edc7 7ab0 	vstr	s15, [r7, #704]	@ 0x2c0
    return radians * (180.0f / (float) M_PI);
 80035c4:	edd7 7ab0 	vldr	s15, [r7, #704]	@ 0x2c0
 80035c8:	ed1f 7a9e 	vldr	s14, [pc, #-632]	@ 8003354 <getFusionAHRS_6DoF+0x450>
 80035cc:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 80035d0:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80035d4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80035d8:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 80035dc:	ed97 7a84 	vldr	s14, [r7, #528]	@ 0x210
 80035e0:	edd7 7a86 	vldr	s15, [r7, #536]	@ 0x218
 80035e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035e8:	edd7 6a83 	vldr	s13, [r7, #524]	@ 0x20c
 80035ec:	edd7 7a85 	vldr	s15, [r7, #532]	@ 0x214
 80035f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003600:	f00b fece 	bl	800f3a0 <asinf>
 8003604:	eef0 7a40 	vmov.f32	s15, s0
 8003608:	eef1 7a67 	vneg.f32	s15, s15
 800360c:	edc7 7aaf 	vstr	s15, [r7, #700]	@ 0x2bc
    return radians * (180.0f / (float) M_PI);
 8003610:	edd7 7aaf 	vldr	s15, [r7, #700]	@ 0x2bc
 8003614:	ed1f 7ab1 	vldr	s14, [pc, #-708]	@ 8003354 <getFusionAHRS_6DoF+0x450>
 8003618:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 800361c:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003620:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003624:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003628:	ed97 7a84 	vldr	s14, [r7, #528]	@ 0x210
 800362c:	edd7 7a85 	vldr	s15, [r7, #532]	@ 0x214
 8003630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003634:	edd7 6a83 	vldr	s13, [r7, #524]	@ 0x20c
 8003638:	edd7 7a86 	vldr	s15, [r7, #536]	@ 0x218
 800363c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003640:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003644:	ed97 7a84 	vldr	s14, [r7, #528]	@ 0x210
 8003648:	edd7 7a84 	vldr	s15, [r7, #528]	@ 0x210
 800364c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003650:	edd7 7ab1 	vldr	s15, [r7, #708]	@ 0x2c4
 8003654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003658:	eef0 0a67 	vmov.f32	s1, s15
 800365c:	eeb0 0a66 	vmov.f32	s0, s13
 8003660:	f00b feca 	bl	800f3f8 <atan2f>
 8003664:	eef0 7a40 	vmov.f32	s15, s0
 8003668:	edc7 7aae 	vstr	s15, [r7, #696]	@ 0x2b8
    return radians * (180.0f / (float) M_PI);
 800366c:	edd7 7aae 	vldr	s15, [r7, #696]	@ 0x2b8
 8003670:	ed1f 7ac8 	vldr	s14, [pc, #-800]	@ 8003354 <getFusionAHRS_6DoF+0x450>
 8003674:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003678:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800367c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003680:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 8003684:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8003688:	f5a3 721f 	sub.w	r2, r3, #636	@ 0x27c
 800368c:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8003690:	ca07      	ldmia	r2, {r0, r1, r2}
 8003692:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003696:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 800369a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800369e:	461c      	mov	r4, r3
 80036a0:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 80036a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	// Write Euler Angles into data structs
	DataStruct->YAW = eulerAngles.angle.yaw;
 80036ac:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80036b0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80036ba:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	601a      	str	r2, [r3, #0]
	DataStruct->PITCH = eulerAngles.angle.pitch;
 80036c2:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80036c6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80036d0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	605a      	str	r2, [r3, #4]
	DataStruct->ROLL = eulerAngles.angle.roll;
 80036d8:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80036dc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 80036e6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	609a      	str	r2, [r3, #8]
}
 80036ee:	bf00      	nop
 80036f0:	f507 7732 	add.w	r7, r7, #712	@ 0x2c8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bdb0      	pop	{r4, r5, r7, pc}

080036f8 <LPFTwoPole_Init>:
#include "LowPassFilter.h"

void LPFTwoPole_Init(LPFTwoPole_t *lpf, uint8_t type, float cutoffFrequency, float sampleTime) {
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	460b      	mov	r3, r1
 8003702:	ed87 0a01 	vstr	s0, [r7, #4]
 8003706:	edc7 0a00 	vstr	s1, [r7]
 800370a:	72fb      	strb	r3, [r7, #11]
	float wc = 6.28318530718f * cutoffFrequency;
 800370c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003710:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80037cc <LPFTwoPole_Init+0xd4>
 8003714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003718:	edc7 7a05 	vstr	s15, [r7, #20]

	if (type == LPF_TYPE_BESSEL) {
 800371c:	7afb      	ldrb	r3, [r7, #11]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d141      	bne.n	80037a6 <LPFTwoPole_Init+0xae>
		lpf->coeffNum = 1.6221f * wc * wc * sampleTime * sampleTime;
 8003722:	edd7 7a05 	vldr	s15, [r7, #20]
 8003726:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80037d0 <LPFTwoPole_Init+0xd8>
 800372a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800372e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003732:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003736:	edd7 7a00 	vldr	s15, [r7]
 800373a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800373e:	edd7 7a00 	vldr	s15, [r7]
 8003742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	edc3 7a03 	vstr	s15, [r3, #12]
		lpf->coeffDen[0] = 1.0f / (1.0f + 2.206f * wc * sampleTime + lpf->coeffNum);
 800374c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003750:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80037d4 <LPFTwoPole_Init+0xdc>
 8003754:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003758:	edd7 7a00 	vldr	s15, [r7]
 800375c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003760:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003764:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	edd3 7a03 	vldr	s15, [r3, #12]
 800376e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	edc3 7a04 	vstr	s15, [r3, #16]
		lpf->coeffDen[1] = -(2.0f + 2.206f * wc * sampleTime);
 8003780:	edd7 7a05 	vldr	s15, [r7, #20]
 8003784:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80037d4 <LPFTwoPole_Init+0xdc>
 8003788:	ee27 7a87 	vmul.f32	s14, s15, s14
 800378c:	edd7 7a00 	vldr	s15, [r7]
 8003790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003794:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003798:	ee77 7a87 	vadd.f32	s15, s15, s14
 800379c:	eef1 7a67 	vneg.f32	s15, s15
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	lpf->buf[0] = 0.0f;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	605a      	str	r2, [r3, #4]
	lpf->buf[1] = 0.0f;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	609a      	str	r2, [r3, #8]

	lpf->out = 0.0f;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40c90fdb 	.word	0x40c90fdb
 80037d0:	3fcfa0f9 	.word	0x3fcfa0f9
 80037d4:	400d2f1b 	.word	0x400d2f1b

080037d8 <LPFTwoPole_Update>:

float LPFTwoPole_Update(LPFTwoPole_t *lpf, float val) {
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	ed87 0a00 	vstr	s0, [r7]
	lpf->buf[1] = lpf->buf[0];
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	609a      	str	r2, [r3, #8]
	lpf->buf[0] = lpf->out;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	605a      	str	r2, [r3, #4]

	lpf->out = lpf->coeffDen[0] * (lpf->coeffNum * val - (lpf->coeffDen[1] * lpf->buf[0] + lpf->buf[1]));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8003800:	edd7 7a00 	vldr	s15, [r7]
 8003804:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	ed93 6a05 	vldr	s12, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	edd3 7a01 	vldr	s15, [r3, #4]
 8003814:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	edd3 7a02 	vldr	s15, [r3, #8]
 800381e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003822:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	edc3 7a00 	vstr	s15, [r3]

	return lpf->out;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	ee07 3a90 	vmov	s15, r3
}
 8003838:	eeb0 0a67 	vmov.f32	s0, s15
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <NotchFilterInit>:
#include "NotchFilter.h"

void NotchFilterInit(NotchFilter_t *filt, float centerFreHz, float notchWidth_Hz, float sampleTime_s)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	ed2d 8b02 	vpush	{d8}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	ed87 0a02 	vstr	s0, [r7, #8]
 8003858:	edc7 0a01 	vstr	s1, [r7, #4]
 800385c:	ed87 1a00 	vstr	s2, [r7]
	float w0_rps = 2.0f * M_PI * centerFreHz;
 8003860:	68b8      	ldr	r0, [r7, #8]
 8003862:	f7fc fe79 	bl	8000558 <__aeabi_f2d>
 8003866:	a33c      	add	r3, pc, #240	@ (adr r3, 8003958 <NotchFilterInit+0x110>)
 8003868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386c:	f7fc fecc 	bl	8000608 <__aeabi_dmul>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	f7fd f9be 	bl	8000bf8 <__aeabi_d2f>
 800387c:	4603      	mov	r3, r0
 800387e:	61bb      	str	r3, [r7, #24]
	float ww_rps = 2.0f * M_PI * notchWidth_Hz;
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7fc fe69 	bl	8000558 <__aeabi_f2d>
 8003886:	a334      	add	r3, pc, #208	@ (adr r3, 8003958 <NotchFilterInit+0x110>)
 8003888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388c:	f7fc febc 	bl	8000608 <__aeabi_dmul>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	f7fd f9ae 	bl	8000bf8 <__aeabi_d2f>
 800389c:	4603      	mov	r3, r0
 800389e:	617b      	str	r3, [r7, #20]
	
	float w0_pw_rps = (2.0f / sampleTime_s) * tanf(0.5f * w0_rps * sampleTime_s);
 80038a0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80038a4:	edd7 7a00 	vldr	s15, [r7]
 80038a8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80038ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80038b0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038b8:	edd7 7a00 	vldr	s15, [r7]
 80038bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c0:	eeb0 0a67 	vmov.f32	s0, s15
 80038c4:	f00b fe4a 	bl	800f55c <tanf>
 80038c8:	eef0 7a40 	vmov.f32	s15, s0
 80038cc:	ee68 7a27 	vmul.f32	s15, s16, s15
 80038d0:	edc7 7a04 	vstr	s15, [r7, #16]
	
	filt->alpha = 4.0f + ((w0_pw_rps * w0_pw_rps) * (sampleTime_s * sampleTime_s));
 80038d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80038d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80038dc:	edd7 7a00 	vldr	s15, [r7]
 80038e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80038e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80038ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	edc3 7a00 	vstr	s15, [r3]
	filt->beta = 2.0f + (ww_rps  * sampleTime_s);
 80038f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80038fa:	edd7 7a00 	vldr	s15, [r7]
 80038fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003902:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003906:	ee77 7a87 	vadd.f32	s15, s15, s14
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	edc3 7a01 	vstr	s15, [r3, #4]
	
	for (int n = 0; n<3; n++)
 8003910:	2300      	movs	r3, #0
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	e013      	b.n	800393e <NotchFilterInit+0xf6>
	{
		filt->x[n] = 0.0f;
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	3302      	adds	r3, #2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
		filt->y[n] = 0.0f;
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	3304      	adds	r3, #4
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	3304      	adds	r3, #4
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
	for (int n = 0; n<3; n++)
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	3301      	adds	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	2b02      	cmp	r3, #2
 8003942:	dde8      	ble.n	8003916 <NotchFilterInit+0xce>
	}
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	ecbd 8b02 	vpop	{d8}
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	f3af 8000 	nop.w
 8003958:	54442d18 	.word	0x54442d18
 800395c:	401921fb 	.word	0x401921fb

08003960 <NotchFilter_Update>:

float NotchFilter_Update(NotchFilter_t *filt, float data)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	ed87 0a00 	vstr	s0, [r7]
	filt->x[2] = filt->x[1];
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	611a      	str	r2, [r3, #16]
	filt->x[1] = filt->x[0];
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]
	
	filt->y[2] = filt->y[1];
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	61da      	str	r2, [r3, #28]
	filt->y[1] = filt->y[0];
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	619a      	str	r2, [r3, #24]
	
	filt->x[0] = data;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	609a      	str	r2, [r3, #8]
	
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	ed93 7a00 	vldr	s14, [r3]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	edd3 7a02 	vldr	s15, [r3, #8]
 800399e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	edd3 7a00 	vldr	s15, [r3]
 80039a8:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80039ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80039b0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80039ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	edd3 6a00 	vldr	s13, [r3]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80039ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039d2:	ee37 7a27 	vadd.f32	s14, s14, s15
			   - (2.0f * ((filt->alpha - 8.0f)) * filt->y[1] + (filt->alpha - filt->beta) *filt->y[2]))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	edd3 7a00 	vldr	s15, [r3]
 80039dc:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80039e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80039e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80039ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	ed93 6a00 	vldr	s12, [r3]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80039fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	edd3 7a07 	vldr	s15, [r3, #28]
 8003a08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a10:	ee77 6a67 	vsub.f32	s13, s14, s15
			   / (filt->alpha + filt->beta);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	ed93 7a00 	vldr	s14, [r3]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
	filt->y[0] = (filt->alpha * filt->x[0] + 2.0f * (filt->alpha - 8.0f) *  filt->x[1] + filt->alpha * filt->x[2]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	edc3 7a05 	vstr	s15, [r3, #20]
			   
	return filt->y[0];
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	ee07 3a90 	vmov	s15, r3
}
 8003a36:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003a48:	4b08      	ldr	r3, [pc, #32]	@ (8003a6c <DWT_Init+0x28>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4a07      	ldr	r2, [pc, #28]	@ (8003a6c <DWT_Init+0x28>)
 8003a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a52:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003a54:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <DWT_Init+0x2c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a05      	ldr	r2, [pc, #20]	@ (8003a70 <DWT_Init+0x2c>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6013      	str	r3, [r2, #0]
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000edf0 	.word	0xe000edf0
 8003a70:	e0001000 	.word	0xe0001000

08003a74 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint64_t micros(void){
 8003a74:	b4b0      	push	{r4, r5, r7}
 8003a76:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8003a78:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <micros+0x2c>)
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	4b09      	ldr	r3, [pc, #36]	@ (8003aa4 <micros+0x30>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4909      	ldr	r1, [pc, #36]	@ (8003aa8 <micros+0x34>)
 8003a82:	fba1 1303 	umull	r1, r3, r1, r3
 8003a86:	0c9b      	lsrs	r3, r3, #18
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	461c      	mov	r4, r3
 8003a90:	4615      	mov	r5, r2
 8003a92:	4622      	mov	r2, r4
 8003a94:	462b      	mov	r3, r5
}
 8003a96:	4610      	mov	r0, r2
 8003a98:	4619      	mov	r1, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bcb0      	pop	{r4, r5, r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	e0001000 	.word	0xe0001000
 8003aa4:	20000020 	.word	0x20000020
 8003aa8:	431bde83 	.word	0x431bde83

08003aac <_write>:

#define CopyDATASIZE 17
uint8_t CopyData[CopyDATASIZE];

int _write(int file, char *ptr, int len)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	4804      	ldr	r0, [pc, #16]	@ (8003ad4 <_write+0x28>)
 8003ac4:	f006 fc5c 	bl	800a380 <HAL_UART_Transmit>
	return len;
 8003ac8:	687b      	ldr	r3, [r7, #4]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000574 	.word	0x20000574

08003ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003adc:	ed2d 8b04 	vpush	{d8-d9}
 8003ae0:	b087      	sub	sp, #28
 8003ae2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ae4:	f003 fa42 	bl	8006f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ae8:	f000 fa74 	bl	8003fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003aec:	f000 fd9c 	bl	8004628 <MX_GPIO_Init>
  MX_DMA_Init();
 8003af0:	f000 fd72 	bl	80045d8 <MX_DMA_Init>
  MX_TIM2_Init();
 8003af4:	f000 fb32 	bl	800415c <MX_TIM2_Init>
  MX_TIM3_Init();
 8003af8:	f000 fbc6 	bl	8004288 <MX_TIM3_Init>
  MX_I2C2_Init();
 8003afc:	f000 fad2 	bl	80040a4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8003b00:	f000 fafe 	bl	8004100 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8003b04:	f000 fd14 	bl	8004530 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8003b08:	f000 fcee 	bl	80044e8 <MX_TIM11_Init>
  MX_TIM4_Init();
 8003b0c:	f000 fc54 	bl	80043b8 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8003b10:	f000 fd38 	bl	8004584 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8003b14:	2201      	movs	r2, #1
 8003b16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b1a:	48cb      	ldr	r0, [pc, #812]	@ (8003e48 <main+0x370>)
 8003b1c:	f003 ffdc 	bl	8007ad8 <HAL_GPIO_WritePin>
  //Init DWT Clock for proper us time tick
  DWT_Init();
 8003b20:	f7ff ff90 	bl	8003a44 <DWT_Init>

  //Init filter with predefined settings
  LPFTwoPole_Init(&LPF_accel_x, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8003b24:	4bc9      	ldr	r3, [pc, #804]	@ (8003e4c <main+0x374>)
 8003b26:	edd3 7a00 	vldr	s15, [r3]
 8003b2a:	eef0 0a67 	vmov.f32	s1, s15
 8003b2e:	ed9f 0ac8 	vldr	s0, [pc, #800]	@ 8003e50 <main+0x378>
 8003b32:	2101      	movs	r1, #1
 8003b34:	48c7      	ldr	r0, [pc, #796]	@ (8003e54 <main+0x37c>)
 8003b36:	f7ff fddf 	bl	80036f8 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_y, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8003b3a:	4bc4      	ldr	r3, [pc, #784]	@ (8003e4c <main+0x374>)
 8003b3c:	edd3 7a00 	vldr	s15, [r3]
 8003b40:	eef0 0a67 	vmov.f32	s1, s15
 8003b44:	ed9f 0ac2 	vldr	s0, [pc, #776]	@ 8003e50 <main+0x378>
 8003b48:	2101      	movs	r1, #1
 8003b4a:	48c3      	ldr	r0, [pc, #780]	@ (8003e58 <main+0x380>)
 8003b4c:	f7ff fdd4 	bl	80036f8 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_accel_z, LPF_TYPE_BESSEL, LPF_ACCEL_CTOFF_HZ, sample_time_sec_f32);
 8003b50:	4bbe      	ldr	r3, [pc, #760]	@ (8003e4c <main+0x374>)
 8003b52:	edd3 7a00 	vldr	s15, [r3]
 8003b56:	eef0 0a67 	vmov.f32	s1, s15
 8003b5a:	ed9f 0abd 	vldr	s0, [pc, #756]	@ 8003e50 <main+0x378>
 8003b5e:	2101      	movs	r1, #1
 8003b60:	48be      	ldr	r0, [pc, #760]	@ (8003e5c <main+0x384>)
 8003b62:	f7ff fdc9 	bl	80036f8 <LPFTwoPole_Init>

  LPFTwoPole_Init(&LPF_gyro_x, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8003b66:	4bb9      	ldr	r3, [pc, #740]	@ (8003e4c <main+0x374>)
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	eef0 0a67 	vmov.f32	s1, s15
 8003b70:	ed9f 0abb 	vldr	s0, [pc, #748]	@ 8003e60 <main+0x388>
 8003b74:	2101      	movs	r1, #1
 8003b76:	48bb      	ldr	r0, [pc, #748]	@ (8003e64 <main+0x38c>)
 8003b78:	f7ff fdbe 	bl	80036f8 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_y, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8003b7c:	4bb3      	ldr	r3, [pc, #716]	@ (8003e4c <main+0x374>)
 8003b7e:	edd3 7a00 	vldr	s15, [r3]
 8003b82:	eef0 0a67 	vmov.f32	s1, s15
 8003b86:	ed9f 0ab6 	vldr	s0, [pc, #728]	@ 8003e60 <main+0x388>
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	48b6      	ldr	r0, [pc, #728]	@ (8003e68 <main+0x390>)
 8003b8e:	f7ff fdb3 	bl	80036f8 <LPFTwoPole_Init>
  LPFTwoPole_Init(&LPF_gyro_z, LPF_TYPE_BESSEL, LPF_GYRO_CTOFF_HZ, sample_time_sec_f32);
 8003b92:	4bae      	ldr	r3, [pc, #696]	@ (8003e4c <main+0x374>)
 8003b94:	edd3 7a00 	vldr	s15, [r3]
 8003b98:	eef0 0a67 	vmov.f32	s1, s15
 8003b9c:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 8003e60 <main+0x388>
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	48b2      	ldr	r0, [pc, #712]	@ (8003e6c <main+0x394>)
 8003ba4:	f7ff fda8 	bl	80036f8 <LPFTwoPole_Init>

  NotchFilterInit(&NF_gyro_x, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8003ba8:	4ba8      	ldr	r3, [pc, #672]	@ (8003e4c <main+0x374>)
 8003baa:	edd3 7a00 	vldr	s15, [r3]
 8003bae:	eeb0 1a67 	vmov.f32	s2, s15
 8003bb2:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8003bb6:	ed9f 0aae 	vldr	s0, [pc, #696]	@ 8003e70 <main+0x398>
 8003bba:	48ae      	ldr	r0, [pc, #696]	@ (8003e74 <main+0x39c>)
 8003bbc:	f7ff fe44 	bl	8003848 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_y, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8003bc0:	4ba2      	ldr	r3, [pc, #648]	@ (8003e4c <main+0x374>)
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	eeb0 1a67 	vmov.f32	s2, s15
 8003bca:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8003bce:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 8003e70 <main+0x398>
 8003bd2:	48a9      	ldr	r0, [pc, #676]	@ (8003e78 <main+0x3a0>)
 8003bd4:	f7ff fe38 	bl	8003848 <NotchFilterInit>
  NotchFilterInit(&NF_gyro_z, NF_GYRO_CFREQ_HZ, NF_GYRO_NWDTH_HZ, sample_time_sec_f32);
 8003bd8:	4b9c      	ldr	r3, [pc, #624]	@ (8003e4c <main+0x374>)
 8003bda:	edd3 7a00 	vldr	s15, [r3]
 8003bde:	eeb0 1a67 	vmov.f32	s2, s15
 8003be2:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8003be6:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 8003e70 <main+0x398>
 8003bea:	48a4      	ldr	r0, [pc, #656]	@ (8003e7c <main+0x3a4>)
 8003bec:	f7ff fe2c 	bl	8003848 <NotchFilterInit>

  //Init state estimators
  quaternionInit(&quaternion_t, sample_time_us_f32);
 8003bf0:	4ba3      	ldr	r3, [pc, #652]	@ (8003e80 <main+0x3a8>)
 8003bf2:	edd3 7a00 	vldr	s15, [r3]
 8003bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfa:	48a2      	ldr	r0, [pc, #648]	@ (8003e84 <main+0x3ac>)
 8003bfc:	f002 f934 	bl	8005e68 <quaternionInit>
  initFusionAHRS(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, sample_time_sec_f32);
 8003c00:	4b92      	ldr	r3, [pc, #584]	@ (8003e4c <main+0x374>)
 8003c02:	edd3 7a00 	vldr	s15, [r3]
 8003c06:	eeb0 0a67 	vmov.f32	s0, s15
 8003c0a:	4a9f      	ldr	r2, [pc, #636]	@ (8003e88 <main+0x3b0>)
 8003c0c:	499f      	ldr	r1, [pc, #636]	@ (8003e8c <main+0x3b4>)
 8003c0e:	48a0      	ldr	r0, [pc, #640]	@ (8003e90 <main+0x3b8>)
 8003c10:	f7ff f950 	bl	8002eb4 <initFusionAHRS>

  //Init sensors
	while (MPU6050_Init(&hi2c2, &imu_t));
 8003c14:	bf00      	nop
 8003c16:	499f      	ldr	r1, [pc, #636]	@ (8003e94 <main+0x3bc>)
 8003c18:	489f      	ldr	r0, [pc, #636]	@ (8003e98 <main+0x3c0>)
 8003c1a:	f000 fd97 	bl	800474c <MPU6050_Init>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f8      	bne.n	8003c16 <main+0x13e>

	if (imu_t.CALIBRATIN_OK_u8 == TRUE)
 8003c24:	4b9b      	ldr	r3, [pc, #620]	@ (8003e94 <main+0x3bc>)
 8003c26:	7e1b      	ldrb	r3, [r3, #24]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d105      	bne.n	8003c38 <main+0x160>
	{
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c32:	4885      	ldr	r0, [pc, #532]	@ (8003e48 <main+0x370>)
 8003c34:	f003 ff50 	bl	8007ad8 <HAL_GPIO_WritePin>
	}
	uint8_t newData_u8;

	HAL_TIM_Base_Start(&htim11);
 8003c38:	4898      	ldr	r0, [pc, #608]	@ (8003e9c <main+0x3c4>)
 8003c3a:	f005 fc65 	bl	8009508 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  baslangic = __HAL_TIM_GET_COUNTER(&htim11);
 8003c3e:	4b97      	ldr	r3, [pc, #604]	@ (8003e9c <main+0x3c4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	4a96      	ldr	r2, [pc, #600]	@ (8003ea0 <main+0x3c8>)
 8003c46:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//Get system time in us
		timer_u64 = micros();
 8003c48:	f7ff ff14 	bl	8003a74 <micros>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4994      	ldr	r1, [pc, #592]	@ (8003ea4 <main+0x3cc>)
 8003c52:	e9c1 2300 	strd	r2, r3, [r1]

		if ( ((timer_u64 - lastTime_u64) >= sample_time_us_f32) && (imu_t.CALIBRATIN_OK_u8 == TRUE) )
 8003c56:	4b93      	ldr	r3, [pc, #588]	@ (8003ea4 <main+0x3cc>)
 8003c58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c5c:	4b92      	ldr	r3, [pc, #584]	@ (8003ea8 <main+0x3d0>)
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	1a84      	subs	r4, r0, r2
 8003c64:	eb61 0503 	sbc.w	r5, r1, r3
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fd f8dc 	bl	8000e28 <__aeabi_ul2f>
 8003c70:	ee07 0a10 	vmov	s14, r0
 8003c74:	4b82      	ldr	r3, [pc, #520]	@ (8003e80 <main+0x3a8>)
 8003c76:	edd3 7a00 	vldr	s15, [r3]
 8003c7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c82:	f2c0 815f 	blt.w	8003f44 <main+0x46c>
 8003c86:	4b83      	ldr	r3, [pc, #524]	@ (8003e94 <main+0x3bc>)
 8003c88:	7e1b      	ldrb	r3, [r3, #24]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	f040 815a 	bne.w	8003f44 <main+0x46c>
		{
			lastTime_u64 = micros();
 8003c90:	f7ff fef0 	bl	8003a74 <micros>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4983      	ldr	r1, [pc, #524]	@ (8003ea8 <main+0x3d0>)
 8003c9a:	e9c1 2300 	strd	r2, r3, [r1]

			//Read MPU6050 sensor data
			readMPU6050(&hi2c2, &imu_t);
 8003c9e:	497d      	ldr	r1, [pc, #500]	@ (8003e94 <main+0x3bc>)
 8003ca0:	487d      	ldr	r0, [pc, #500]	@ (8003e98 <main+0x3c0>)
 8003ca2:	f000 fd95 	bl	80047d0 <readMPU6050>

			//Get accelerometer data in "g" and run LPF
			accelLowPassFiltered_f32[0] = (LPFTwoPole_Update(&LPF_accel_x, imu_t.MPU6050_Accel_f32[0]));
 8003ca6:	4b7b      	ldr	r3, [pc, #492]	@ (8003e94 <main+0x3bc>)
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb0:	4868      	ldr	r0, [pc, #416]	@ (8003e54 <main+0x37c>)
 8003cb2:	f7ff fd91 	bl	80037d8 <LPFTwoPole_Update>
 8003cb6:	eef0 7a40 	vmov.f32	s15, s0
 8003cba:	4b7c      	ldr	r3, [pc, #496]	@ (8003eac <main+0x3d4>)
 8003cbc:	edc3 7a00 	vstr	s15, [r3]
			accelLowPassFiltered_f32[1] = (LPFTwoPole_Update(&LPF_accel_y, imu_t.MPU6050_Accel_f32[1]));
 8003cc0:	4b74      	ldr	r3, [pc, #464]	@ (8003e94 <main+0x3bc>)
 8003cc2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cca:	4863      	ldr	r0, [pc, #396]	@ (8003e58 <main+0x380>)
 8003ccc:	f7ff fd84 	bl	80037d8 <LPFTwoPole_Update>
 8003cd0:	eef0 7a40 	vmov.f32	s15, s0
 8003cd4:	4b75      	ldr	r3, [pc, #468]	@ (8003eac <main+0x3d4>)
 8003cd6:	edc3 7a01 	vstr	s15, [r3, #4]
			accelLowPassFiltered_f32[2] = (LPFTwoPole_Update(&LPF_accel_z, imu_t.MPU6050_Accel_f32[2]));
 8003cda:	4b6e      	ldr	r3, [pc, #440]	@ (8003e94 <main+0x3bc>)
 8003cdc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce4:	485d      	ldr	r0, [pc, #372]	@ (8003e5c <main+0x384>)
 8003ce6:	f7ff fd77 	bl	80037d8 <LPFTwoPole_Update>
 8003cea:	eef0 7a40 	vmov.f32	s15, s0
 8003cee:	4b6f      	ldr	r3, [pc, #444]	@ (8003eac <main+0x3d4>)
 8003cf0:	edc3 7a02 	vstr	s15, [r3, #8]

			//Get gyro data in "deg/s" and run LPF
			gyroLowPassFiltered_f32[0] = NotchFilter_Update(&NF_gyro_x, imu_t.MPU6050_Gyro_f32[0]);
 8003cf4:	4b67      	ldr	r3, [pc, #412]	@ (8003e94 <main+0x3bc>)
 8003cf6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003cfe:	485d      	ldr	r0, [pc, #372]	@ (8003e74 <main+0x39c>)
 8003d00:	f7ff fe2e 	bl	8003960 <NotchFilter_Update>
 8003d04:	eef0 7a40 	vmov.f32	s15, s0
 8003d08:	4b69      	ldr	r3, [pc, #420]	@ (8003eb0 <main+0x3d8>)
 8003d0a:	edc3 7a00 	vstr	s15, [r3]
			gyroLowPassFiltered_f32[1] = NotchFilter_Update(&NF_gyro_y, imu_t.MPU6050_Gyro_f32[1]);
 8003d0e:	4b61      	ldr	r3, [pc, #388]	@ (8003e94 <main+0x3bc>)
 8003d10:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d14:	eeb0 0a67 	vmov.f32	s0, s15
 8003d18:	4857      	ldr	r0, [pc, #348]	@ (8003e78 <main+0x3a0>)
 8003d1a:	f7ff fe21 	bl	8003960 <NotchFilter_Update>
 8003d1e:	eef0 7a40 	vmov.f32	s15, s0
 8003d22:	4b63      	ldr	r3, [pc, #396]	@ (8003eb0 <main+0x3d8>)
 8003d24:	edc3 7a01 	vstr	s15, [r3, #4]
			gyroLowPassFiltered_f32[2] = NotchFilter_Update(&NF_gyro_z, imu_t.MPU6050_Gyro_f32[2]);
 8003d28:	4b5a      	ldr	r3, [pc, #360]	@ (8003e94 <main+0x3bc>)
 8003d2a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d32:	4852      	ldr	r0, [pc, #328]	@ (8003e7c <main+0x3a4>)
 8003d34:	f7ff fe14 	bl	8003960 <NotchFilter_Update>
 8003d38:	eef0 7a40 	vmov.f32	s15, s0
 8003d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb0 <main+0x3d8>)
 8003d3e:	edc3 7a02 	vstr	s15, [r3, #8]

			//Put gyro data into Notch Filter to flat-out any data in specific frequency band
			gyroNotchFiltered_f32[0] = (LPFTwoPole_Update(&LPF_gyro_x, gyroLowPassFiltered_f32[0]));
 8003d42:	4b5b      	ldr	r3, [pc, #364]	@ (8003eb0 <main+0x3d8>)
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	eeb0 0a67 	vmov.f32	s0, s15
 8003d4c:	4845      	ldr	r0, [pc, #276]	@ (8003e64 <main+0x38c>)
 8003d4e:	f7ff fd43 	bl	80037d8 <LPFTwoPole_Update>
 8003d52:	eef0 7a40 	vmov.f32	s15, s0
 8003d56:	4b57      	ldr	r3, [pc, #348]	@ (8003eb4 <main+0x3dc>)
 8003d58:	edc3 7a00 	vstr	s15, [r3]
			gyroNotchFiltered_f32[1] = (LPFTwoPole_Update(&LPF_gyro_y, gyroLowPassFiltered_f32[1]));
 8003d5c:	4b54      	ldr	r3, [pc, #336]	@ (8003eb0 <main+0x3d8>)
 8003d5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d62:	eeb0 0a67 	vmov.f32	s0, s15
 8003d66:	4840      	ldr	r0, [pc, #256]	@ (8003e68 <main+0x390>)
 8003d68:	f7ff fd36 	bl	80037d8 <LPFTwoPole_Update>
 8003d6c:	eef0 7a40 	vmov.f32	s15, s0
 8003d70:	4b50      	ldr	r3, [pc, #320]	@ (8003eb4 <main+0x3dc>)
 8003d72:	edc3 7a01 	vstr	s15, [r3, #4]
			gyroNotchFiltered_f32[2] = (LPFTwoPole_Update(&LPF_gyro_z, gyroLowPassFiltered_f32[2]));
 8003d76:	4b4e      	ldr	r3, [pc, #312]	@ (8003eb0 <main+0x3d8>)
 8003d78:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d80:	483a      	ldr	r0, [pc, #232]	@ (8003e6c <main+0x394>)
 8003d82:	f7ff fd29 	bl	80037d8 <LPFTwoPole_Update>
 8003d86:	eef0 7a40 	vmov.f32	s15, s0
 8003d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb4 <main+0x3dc>)
 8003d8c:	edc3 7a02 	vstr	s15, [r3, #8]

			//Get state estimations, using quaternion and fusion-quaternion based estimators
			quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8003d90:	4b46      	ldr	r3, [pc, #280]	@ (8003eac <main+0x3d4>)
 8003d92:	ed93 8a00 	vldr	s16, [r3]
 8003d96:	4b45      	ldr	r3, [pc, #276]	@ (8003eac <main+0x3d4>)
 8003d98:	edd3 8a01 	vldr	s17, [r3, #4]
 8003d9c:	4b43      	ldr	r3, [pc, #268]	@ (8003eac <main+0x3d4>)
 8003d9e:	ed93 9a02 	vldr	s18, [r3, #8]
					gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8003da2:	4b44      	ldr	r3, [pc, #272]	@ (8003eb4 <main+0x3dc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fc fbd6 	bl	8000558 <__aeabi_f2d>
 8003dac:	a324      	add	r3, pc, #144	@ (adr r3, 8003e40 <main+0x368>)
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	f7fc fc29 	bl	8000608 <__aeabi_dmul>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
			quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8003dba:	4610      	mov	r0, r2
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f7fc ff1b 	bl	8000bf8 <__aeabi_d2f>
 8003dc2:	4606      	mov	r6, r0
					gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8003dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <main+0x3dc>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fc fbc5 	bl	8000558 <__aeabi_f2d>
 8003dce:	a31c      	add	r3, pc, #112	@ (adr r3, 8003e40 <main+0x368>)
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	f7fc fc18 	bl	8000608 <__aeabi_dmul>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
			quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	f7fc ff0a 	bl	8000bf8 <__aeabi_d2f>
 8003de4:	4680      	mov	r8, r0
						gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 8003de6:	4b33      	ldr	r3, [pc, #204]	@ (8003eb4 <main+0x3dc>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fc fbb4 	bl	8000558 <__aeabi_f2d>
 8003df0:	a313      	add	r3, pc, #76	@ (adr r3, 8003e40 <main+0x368>)
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	f7fc fc07 	bl	8000608 <__aeabi_dmul>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
			quaternionUpdate(&quaternion_t, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1], accelLowPassFiltered_f32[2],
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	f7fc fef9 	bl	8000bf8 <__aeabi_d2f>
 8003e06:	4603      	mov	r3, r0
 8003e08:	ee02 3a90 	vmov	s5, r3
 8003e0c:	ee02 8a10 	vmov	s4, r8
 8003e10:	ee01 6a90 	vmov	s3, r6
 8003e14:	eeb0 1a49 	vmov.f32	s2, s18
 8003e18:	eef0 0a68 	vmov.f32	s1, s17
 8003e1c:	eeb0 0a48 	vmov.f32	s0, s16
 8003e20:	4818      	ldr	r0, [pc, #96]	@ (8003e84 <main+0x3ac>)
 8003e22:	f002 f87b 	bl	8005f1c <quaternionUpdate>

			getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8003e26:	4b21      	ldr	r3, [pc, #132]	@ (8003eac <main+0x3d4>)
 8003e28:	ed93 8a00 	vldr	s16, [r3]
 8003e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003eac <main+0x3d4>)
 8003e2e:	edd3 8a01 	vldr	s17, [r3, #4]
 8003e32:	4b1e      	ldr	r3, [pc, #120]	@ (8003eac <main+0x3d4>)
 8003e34:	ed93 9a02 	vldr	s18, [r3, #8]
 8003e38:	e03e      	b.n	8003eb8 <main+0x3e0>
 8003e3a:	bf00      	nop
 8003e3c:	f3af 8000 	nop.w
 8003e40:	a2529d39 	.word	0xa2529d39
 8003e44:	3f91df46 	.word	0x3f91df46
 8003e48:	40020800 	.word	0x40020800
 8003e4c:	20000018 	.word	0x20000018
 8003e50:	43820000 	.word	0x43820000
 8003e54:	2000031c 	.word	0x2000031c
 8003e58:	20000334 	.word	0x20000334
 8003e5c:	2000034c 	.word	0x2000034c
 8003e60:	43800000 	.word	0x43800000
 8003e64:	20000364 	.word	0x20000364
 8003e68:	2000037c 	.word	0x2000037c
 8003e6c:	20000394 	.word	0x20000394
 8003e70:	42940000 	.word	0x42940000
 8003e74:	200002bc 	.word	0x200002bc
 8003e78:	200002dc 	.word	0x200002dc
 8003e7c:	200002fc 	.word	0x200002fc
 8003e80:	2000001c 	.word	0x2000001c
 8003e84:	20000230 	.word	0x20000230
 8003e88:	200002ac 	.word	0x200002ac
 8003e8c:	2000027c 	.word	0x2000027c
 8003e90:	20000260 	.word	0x20000260
 8003e94:	20000214 	.word	0x20000214
 8003e98:	200003ac 	.word	0x200003ac
 8003e9c:	2000052c 	.word	0x2000052c
 8003ea0:	200006f8 	.word	0x200006f8
 8003ea4:	200006e8 	.word	0x200006e8
 8003ea8:	200006f0 	.word	0x200006f0
 8003eac:	200006c4 	.word	0x200006c4
 8003eb0:	200006d0 	.word	0x200006d0
 8003eb4:	200006dc 	.word	0x200006dc
					accelLowPassFiltered_f32[2], gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8003eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb0 <main+0x4d8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc fb4b 	bl	8000558 <__aeabi_f2d>
 8003ec2:	a339      	add	r3, pc, #228	@ (adr r3, 8003fa8 <main+0x4d0>)
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	f7fc fb9e 	bl	8000608 <__aeabi_dmul>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
			getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f7fc fe90 	bl	8000bf8 <__aeabi_d2f>
 8003ed8:	4606      	mov	r6, r0
					accelLowPassFiltered_f32[2], gyroNotchFiltered_f32[0]*(M_PI/180.0f), gyroNotchFiltered_f32[1]*(M_PI/180.0f),
 8003eda:	4b35      	ldr	r3, [pc, #212]	@ (8003fb0 <main+0x4d8>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fc fb3a 	bl	8000558 <__aeabi_f2d>
 8003ee4:	a330      	add	r3, pc, #192	@ (adr r3, 8003fa8 <main+0x4d0>)
 8003ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eea:	f7fc fb8d 	bl	8000608 <__aeabi_dmul>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
			getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	f7fc fe7f 	bl	8000bf8 <__aeabi_d2f>
 8003efa:	4680      	mov	r8, r0
						gyroNotchFiltered_f32[2]*(M_PI/180.0f));
 8003efc:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb0 <main+0x4d8>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc fb29 	bl	8000558 <__aeabi_f2d>
 8003f06:	a328      	add	r3, pc, #160	@ (adr r3, 8003fa8 <main+0x4d0>)
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f7fc fb7c 	bl	8000608 <__aeabi_dmul>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
			getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, accelLowPassFiltered_f32[0], accelLowPassFiltered_f32[1],
 8003f14:	4610      	mov	r0, r2
 8003f16:	4619      	mov	r1, r3
 8003f18:	f7fc fe6e 	bl	8000bf8 <__aeabi_d2f>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	ee02 3a90 	vmov	s5, r3
 8003f22:	ee02 8a10 	vmov	s4, r8
 8003f26:	ee01 6a90 	vmov	s3, r6
 8003f2a:	eeb0 1a49 	vmov.f32	s2, s18
 8003f2e:	eef0 0a68 	vmov.f32	s1, s17
 8003f32:	eeb0 0a48 	vmov.f32	s0, s16
 8003f36:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb4 <main+0x4dc>)
 8003f38:	491f      	ldr	r1, [pc, #124]	@ (8003fb8 <main+0x4e0>)
 8003f3a:	4820      	ldr	r0, [pc, #128]	@ (8003fbc <main+0x4e4>)
 8003f3c:	f7fe ffe2 	bl	8002f04 <getFusionAHRS_6DoF>

			newData_u8 = TRUE; //Set newData to high for activate UART printer
 8003f40:	2301      	movs	r3, #1
 8003f42:	71fb      	strb	r3, [r7, #7]

		}//end of timer if

		if(newData_u8)
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01f      	beq.n	8003f8a <main+0x4b2>
		{
			printf("%f, %f, %f\r\n",
					quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8003f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <main+0x4e8>)
 8003f4c:	699b      	ldr	r3, [r3, #24]
			printf("%f, %f, %f\r\n",
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fc fb02 	bl	8000558 <__aeabi_f2d>
 8003f54:	4682      	mov	sl, r0
 8003f56:	468b      	mov	fp, r1
					quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8003f58:	4b19      	ldr	r3, [pc, #100]	@ (8003fc0 <main+0x4e8>)
 8003f5a:	695b      	ldr	r3, [r3, #20]
			printf("%f, %f, %f\r\n",
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fc fafb 	bl	8000558 <__aeabi_f2d>
 8003f62:	4680      	mov	r8, r0
 8003f64:	4689      	mov	r9, r1
					quaternion_t.yaw, quaternion_t.pitch, quaternion_t.roll);
 8003f66:	4b16      	ldr	r3, [pc, #88]	@ (8003fc0 <main+0x4e8>)
 8003f68:	69db      	ldr	r3, [r3, #28]
			printf("%f, %f, %f\r\n",
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fc faf4 	bl	8000558 <__aeabi_f2d>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f78:	e9cd 8900 	strd	r8, r9, [sp]
 8003f7c:	4652      	mov	r2, sl
 8003f7e:	465b      	mov	r3, fp
 8003f80:	4810      	ldr	r0, [pc, #64]	@ (8003fc4 <main+0x4ec>)
 8003f82:	f007 fcdf 	bl	800b944 <iprintf>
	//				AHRS_IMU1.YAW, AHRS_IMU1.PITCH, AHRS_IMU1.ROLL);
			newData_u8 = FALSE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	71fb      	strb	r3, [r7, #7]
		}

		bitis = Timer_GetElapsed(&htim11, baslangic);
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc8 <main+0x4f0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	480e      	ldr	r0, [pc, #56]	@ (8003fcc <main+0x4f4>)
 8003f92:	f000 fba9 	bl	80046e8 <Timer_GetElapsed>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd0 <main+0x4f8>)
 8003f9a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim11, 0);
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fcc <main+0x4f4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	625a      	str	r2, [r3, #36]	@ 0x24
	  baslangic = __HAL_TIM_GET_COUNTER(&htim11);
 8003fa4:	e64b      	b.n	8003c3e <main+0x166>
 8003fa6:	bf00      	nop
 8003fa8:	a2529d39 	.word	0xa2529d39
 8003fac:	3f91df46 	.word	0x3f91df46
 8003fb0:	200006dc 	.word	0x200006dc
 8003fb4:	200002ac 	.word	0x200002ac
 8003fb8:	2000027c 	.word	0x2000027c
 8003fbc:	20000260 	.word	0x20000260
 8003fc0:	20000230 	.word	0x20000230
 8003fc4:	08011cc4 	.word	0x08011cc4
 8003fc8:	200006f8 	.word	0x200006f8
 8003fcc:	2000052c 	.word	0x2000052c
 8003fd0:	200006fc 	.word	0x200006fc

08003fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b094      	sub	sp, #80	@ 0x50
 8003fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fda:	f107 0320 	add.w	r3, r7, #32
 8003fde:	2230      	movs	r2, #48	@ 0x30
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f007 fd25 	bl	800ba32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fe8:	f107 030c 	add.w	r3, r7, #12
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	4b27      	ldr	r3, [pc, #156]	@ (800409c <SystemClock_Config+0xc8>)
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	4a26      	ldr	r2, [pc, #152]	@ (800409c <SystemClock_Config+0xc8>)
 8004002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004006:	6413      	str	r3, [r2, #64]	@ 0x40
 8004008:	4b24      	ldr	r3, [pc, #144]	@ (800409c <SystemClock_Config+0xc8>)
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004014:	2300      	movs	r3, #0
 8004016:	607b      	str	r3, [r7, #4]
 8004018:	4b21      	ldr	r3, [pc, #132]	@ (80040a0 <SystemClock_Config+0xcc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a20      	ldr	r2, [pc, #128]	@ (80040a0 <SystemClock_Config+0xcc>)
 800401e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4b1e      	ldr	r3, [pc, #120]	@ (80040a0 <SystemClock_Config+0xcc>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800402c:	607b      	str	r3, [r7, #4]
 800402e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004030:	2301      	movs	r3, #1
 8004032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004034:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800403a:	2302      	movs	r3, #2
 800403c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800403e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004044:	2319      	movs	r3, #25
 8004046:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004048:	23c0      	movs	r3, #192	@ 0xc0
 800404a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800404c:	2302      	movs	r3, #2
 800404e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004050:	2304      	movs	r3, #4
 8004052:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004054:	f107 0320 	add.w	r3, r7, #32
 8004058:	4618      	mov	r0, r3
 800405a:	f004 fd7b 	bl	8008b54 <HAL_RCC_OscConfig>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004064:	f000 fb6c 	bl	8004740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004068:	230f      	movs	r3, #15
 800406a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800406c:	2302      	movs	r3, #2
 800406e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004078:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800407e:	f107 030c 	add.w	r3, r7, #12
 8004082:	2103      	movs	r1, #3
 8004084:	4618      	mov	r0, r3
 8004086:	f004 ffdd 	bl	8009044 <HAL_RCC_ClockConfig>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004090:	f000 fb56 	bl	8004740 <Error_Handler>
  }
}
 8004094:	bf00      	nop
 8004096:	3750      	adds	r7, #80	@ 0x50
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40023800 	.word	0x40023800
 80040a0:	40007000 	.word	0x40007000

080040a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80040a8:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <MX_I2C2_Init+0x50>)
 80040aa:	4a13      	ldr	r2, [pc, #76]	@ (80040f8 <MX_I2C2_Init+0x54>)
 80040ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80040ae:	4b11      	ldr	r3, [pc, #68]	@ (80040f4 <MX_I2C2_Init+0x50>)
 80040b0:	4a12      	ldr	r2, [pc, #72]	@ (80040fc <MX_I2C2_Init+0x58>)
 80040b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80040b4:	4b0f      	ldr	r3, [pc, #60]	@ (80040f4 <MX_I2C2_Init+0x50>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80040ba:	4b0e      	ldr	r3, [pc, #56]	@ (80040f4 <MX_I2C2_Init+0x50>)
 80040bc:	2200      	movs	r2, #0
 80040be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040c0:	4b0c      	ldr	r3, [pc, #48]	@ (80040f4 <MX_I2C2_Init+0x50>)
 80040c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80040c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040c8:	4b0a      	ldr	r3, [pc, #40]	@ (80040f4 <MX_I2C2_Init+0x50>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80040ce:	4b09      	ldr	r3, [pc, #36]	@ (80040f4 <MX_I2C2_Init+0x50>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040d4:	4b07      	ldr	r3, [pc, #28]	@ (80040f4 <MX_I2C2_Init+0x50>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040da:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <MX_I2C2_Init+0x50>)
 80040dc:	2200      	movs	r2, #0
 80040de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80040e0:	4804      	ldr	r0, [pc, #16]	@ (80040f4 <MX_I2C2_Init+0x50>)
 80040e2:	f003 fd13 	bl	8007b0c <HAL_I2C_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80040ec:	f000 fb28 	bl	8004740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80040f0:	bf00      	nop
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	200003ac 	.word	0x200003ac
 80040f8:	40005800 	.word	0x40005800
 80040fc:	00061a80 	.word	0x00061a80

08004100 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004104:	4b12      	ldr	r3, [pc, #72]	@ (8004150 <MX_I2C3_Init+0x50>)
 8004106:	4a13      	ldr	r2, [pc, #76]	@ (8004154 <MX_I2C3_Init+0x54>)
 8004108:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800410a:	4b11      	ldr	r3, [pc, #68]	@ (8004150 <MX_I2C3_Init+0x50>)
 800410c:	4a12      	ldr	r2, [pc, #72]	@ (8004158 <MX_I2C3_Init+0x58>)
 800410e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004110:	4b0f      	ldr	r3, [pc, #60]	@ (8004150 <MX_I2C3_Init+0x50>)
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004116:	4b0e      	ldr	r3, [pc, #56]	@ (8004150 <MX_I2C3_Init+0x50>)
 8004118:	2200      	movs	r2, #0
 800411a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800411c:	4b0c      	ldr	r3, [pc, #48]	@ (8004150 <MX_I2C3_Init+0x50>)
 800411e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004122:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004124:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <MX_I2C3_Init+0x50>)
 8004126:	2200      	movs	r2, #0
 8004128:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800412a:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <MX_I2C3_Init+0x50>)
 800412c:	2200      	movs	r2, #0
 800412e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004130:	4b07      	ldr	r3, [pc, #28]	@ (8004150 <MX_I2C3_Init+0x50>)
 8004132:	2200      	movs	r2, #0
 8004134:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004136:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <MX_I2C3_Init+0x50>)
 8004138:	2200      	movs	r2, #0
 800413a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800413c:	4804      	ldr	r0, [pc, #16]	@ (8004150 <MX_I2C3_Init+0x50>)
 800413e:	f003 fce5 	bl	8007b0c <HAL_I2C_Init>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004148:	f000 fafa 	bl	8004740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800414c:	bf00      	nop
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000400 	.word	0x20000400
 8004154:	40005c00 	.word	0x40005c00
 8004158:	00061a80 	.word	0x00061a80

0800415c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08e      	sub	sp, #56	@ 0x38
 8004160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004162:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	605a      	str	r2, [r3, #4]
 800416c:	609a      	str	r2, [r3, #8]
 800416e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004170:	f107 0320 	add.w	r3, r7, #32
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	611a      	str	r2, [r3, #16]
 8004188:	615a      	str	r2, [r3, #20]
 800418a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800418c:	4b3d      	ldr	r3, [pc, #244]	@ (8004284 <MX_TIM2_Init+0x128>)
 800418e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8004194:	4b3b      	ldr	r3, [pc, #236]	@ (8004284 <MX_TIM2_Init+0x128>)
 8004196:	225f      	movs	r2, #95	@ 0x5f
 8004198:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800419a:	4b3a      	ldr	r3, [pc, #232]	@ (8004284 <MX_TIM2_Init+0x128>)
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80041a0:	4b38      	ldr	r3, [pc, #224]	@ (8004284 <MX_TIM2_Init+0x128>)
 80041a2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80041a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a8:	4b36      	ldr	r3, [pc, #216]	@ (8004284 <MX_TIM2_Init+0x128>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ae:	4b35      	ldr	r3, [pc, #212]	@ (8004284 <MX_TIM2_Init+0x128>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041b4:	4833      	ldr	r0, [pc, #204]	@ (8004284 <MX_TIM2_Init+0x128>)
 80041b6:	f005 f957 	bl	8009468 <HAL_TIM_Base_Init>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80041c0:	f000 fabe 	bl	8004740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041ce:	4619      	mov	r1, r3
 80041d0:	482c      	ldr	r0, [pc, #176]	@ (8004284 <MX_TIM2_Init+0x128>)
 80041d2:	f005 fc61 	bl	8009a98 <HAL_TIM_ConfigClockSource>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80041dc:	f000 fab0 	bl	8004740 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80041e0:	4828      	ldr	r0, [pc, #160]	@ (8004284 <MX_TIM2_Init+0x128>)
 80041e2:	f005 fa4d 	bl	8009680 <HAL_TIM_PWM_Init>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80041ec:	f000 faa8 	bl	8004740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041f0:	2300      	movs	r3, #0
 80041f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041f4:	2300      	movs	r3, #0
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041f8:	f107 0320 	add.w	r3, r7, #32
 80041fc:	4619      	mov	r1, r3
 80041fe:	4821      	ldr	r0, [pc, #132]	@ (8004284 <MX_TIM2_Init+0x128>)
 8004200:	f005 ffec 	bl	800a1dc <HAL_TIMEx_MasterConfigSynchronization>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800420a:	f000 fa99 	bl	8004740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800420e:	2360      	movs	r3, #96	@ 0x60
 8004210:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800421e:	1d3b      	adds	r3, r7, #4
 8004220:	2200      	movs	r2, #0
 8004222:	4619      	mov	r1, r3
 8004224:	4817      	ldr	r0, [pc, #92]	@ (8004284 <MX_TIM2_Init+0x128>)
 8004226:	f005 fb75 	bl	8009914 <HAL_TIM_PWM_ConfigChannel>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004230:	f000 fa86 	bl	8004740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004234:	1d3b      	adds	r3, r7, #4
 8004236:	2204      	movs	r2, #4
 8004238:	4619      	mov	r1, r3
 800423a:	4812      	ldr	r0, [pc, #72]	@ (8004284 <MX_TIM2_Init+0x128>)
 800423c:	f005 fb6a 	bl	8009914 <HAL_TIM_PWM_ConfigChannel>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8004246:	f000 fa7b 	bl	8004740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	2208      	movs	r2, #8
 800424e:	4619      	mov	r1, r3
 8004250:	480c      	ldr	r0, [pc, #48]	@ (8004284 <MX_TIM2_Init+0x128>)
 8004252:	f005 fb5f 	bl	8009914 <HAL_TIM_PWM_ConfigChannel>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800425c:	f000 fa70 	bl	8004740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004260:	1d3b      	adds	r3, r7, #4
 8004262:	220c      	movs	r2, #12
 8004264:	4619      	mov	r1, r3
 8004266:	4807      	ldr	r0, [pc, #28]	@ (8004284 <MX_TIM2_Init+0x128>)
 8004268:	f005 fb54 	bl	8009914 <HAL_TIM_PWM_ConfigChannel>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8004272:	f000 fa65 	bl	8004740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004276:	4803      	ldr	r0, [pc, #12]	@ (8004284 <MX_TIM2_Init+0x128>)
 8004278:	f002 fb4a 	bl	8006910 <HAL_TIM_MspPostInit>

}
 800427c:	bf00      	nop
 800427e:	3738      	adds	r7, #56	@ 0x38
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000454 	.word	0x20000454

08004288 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08e      	sub	sp, #56	@ 0x38
 800428c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800428e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800429c:	f107 0320 	add.w	r3, r7, #32
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	611a      	str	r2, [r3, #16]
 80042b4:	615a      	str	r2, [r3, #20]
 80042b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80042b8:	4b3d      	ldr	r3, [pc, #244]	@ (80043b0 <MX_TIM3_Init+0x128>)
 80042ba:	4a3e      	ldr	r2, [pc, #248]	@ (80043b4 <MX_TIM3_Init+0x12c>)
 80042bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 80042be:	4b3c      	ldr	r3, [pc, #240]	@ (80043b0 <MX_TIM3_Init+0x128>)
 80042c0:	225f      	movs	r2, #95	@ 0x5f
 80042c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042c4:	4b3a      	ldr	r3, [pc, #232]	@ (80043b0 <MX_TIM3_Init+0x128>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80042ca:	4b39      	ldr	r3, [pc, #228]	@ (80043b0 <MX_TIM3_Init+0x128>)
 80042cc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80042d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042d2:	4b37      	ldr	r3, [pc, #220]	@ (80043b0 <MX_TIM3_Init+0x128>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042d8:	4b35      	ldr	r3, [pc, #212]	@ (80043b0 <MX_TIM3_Init+0x128>)
 80042da:	2200      	movs	r2, #0
 80042dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80042de:	4834      	ldr	r0, [pc, #208]	@ (80043b0 <MX_TIM3_Init+0x128>)
 80042e0:	f005 f8c2 	bl	8009468 <HAL_TIM_Base_Init>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80042ea:	f000 fa29 	bl	8004740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042f8:	4619      	mov	r1, r3
 80042fa:	482d      	ldr	r0, [pc, #180]	@ (80043b0 <MX_TIM3_Init+0x128>)
 80042fc:	f005 fbcc 	bl	8009a98 <HAL_TIM_ConfigClockSource>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004306:	f000 fa1b 	bl	8004740 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800430a:	4829      	ldr	r0, [pc, #164]	@ (80043b0 <MX_TIM3_Init+0x128>)
 800430c:	f005 f9b8 	bl	8009680 <HAL_TIM_PWM_Init>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004316:	f000 fa13 	bl	8004740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800431a:	2300      	movs	r3, #0
 800431c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800431e:	2300      	movs	r3, #0
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004322:	f107 0320 	add.w	r3, r7, #32
 8004326:	4619      	mov	r1, r3
 8004328:	4821      	ldr	r0, [pc, #132]	@ (80043b0 <MX_TIM3_Init+0x128>)
 800432a:	f005 ff57 	bl	800a1dc <HAL_TIMEx_MasterConfigSynchronization>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004334:	f000 fa04 	bl	8004740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004338:	2360      	movs	r3, #96	@ 0x60
 800433a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004348:	1d3b      	adds	r3, r7, #4
 800434a:	2200      	movs	r2, #0
 800434c:	4619      	mov	r1, r3
 800434e:	4818      	ldr	r0, [pc, #96]	@ (80043b0 <MX_TIM3_Init+0x128>)
 8004350:	f005 fae0 	bl	8009914 <HAL_TIM_PWM_ConfigChannel>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800435a:	f000 f9f1 	bl	8004740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800435e:	1d3b      	adds	r3, r7, #4
 8004360:	2204      	movs	r2, #4
 8004362:	4619      	mov	r1, r3
 8004364:	4812      	ldr	r0, [pc, #72]	@ (80043b0 <MX_TIM3_Init+0x128>)
 8004366:	f005 fad5 	bl	8009914 <HAL_TIM_PWM_ConfigChannel>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004370:	f000 f9e6 	bl	8004740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	2208      	movs	r2, #8
 8004378:	4619      	mov	r1, r3
 800437a:	480d      	ldr	r0, [pc, #52]	@ (80043b0 <MX_TIM3_Init+0x128>)
 800437c:	f005 faca 	bl	8009914 <HAL_TIM_PWM_ConfigChannel>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8004386:	f000 f9db 	bl	8004740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800438a:	1d3b      	adds	r3, r7, #4
 800438c:	220c      	movs	r2, #12
 800438e:	4619      	mov	r1, r3
 8004390:	4807      	ldr	r0, [pc, #28]	@ (80043b0 <MX_TIM3_Init+0x128>)
 8004392:	f005 fabf 	bl	8009914 <HAL_TIM_PWM_ConfigChannel>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800439c:	f000 f9d0 	bl	8004740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80043a0:	4803      	ldr	r0, [pc, #12]	@ (80043b0 <MX_TIM3_Init+0x128>)
 80043a2:	f002 fab5 	bl	8006910 <HAL_TIM_MspPostInit>

}
 80043a6:	bf00      	nop
 80043a8:	3738      	adds	r7, #56	@ 0x38
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	2000049c 	.word	0x2000049c
 80043b4:	40000400 	.word	0x40000400

080043b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08e      	sub	sp, #56	@ 0x38
 80043bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	609a      	str	r2, [r3, #8]
 80043ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043cc:	f107 0320 	add.w	r3, r7, #32
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043d6:	1d3b      	adds	r3, r7, #4
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	609a      	str	r2, [r3, #8]
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	611a      	str	r2, [r3, #16]
 80043e4:	615a      	str	r2, [r3, #20]
 80043e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80043e8:	4b3d      	ldr	r3, [pc, #244]	@ (80044e0 <MX_TIM4_Init+0x128>)
 80043ea:	4a3e      	ldr	r2, [pc, #248]	@ (80044e4 <MX_TIM4_Init+0x12c>)
 80043ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 960-1;
 80043ee:	4b3c      	ldr	r3, [pc, #240]	@ (80044e0 <MX_TIM4_Init+0x128>)
 80043f0:	f240 32bf 	movw	r2, #959	@ 0x3bf
 80043f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043f6:	4b3a      	ldr	r3, [pc, #232]	@ (80044e0 <MX_TIM4_Init+0x128>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 80043fc:	4b38      	ldr	r3, [pc, #224]	@ (80044e0 <MX_TIM4_Init+0x128>)
 80043fe:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8004402:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004404:	4b36      	ldr	r3, [pc, #216]	@ (80044e0 <MX_TIM4_Init+0x128>)
 8004406:	2200      	movs	r2, #0
 8004408:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800440a:	4b35      	ldr	r3, [pc, #212]	@ (80044e0 <MX_TIM4_Init+0x128>)
 800440c:	2200      	movs	r2, #0
 800440e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004410:	4833      	ldr	r0, [pc, #204]	@ (80044e0 <MX_TIM4_Init+0x128>)
 8004412:	f005 f829 	bl	8009468 <HAL_TIM_Base_Init>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800441c:	f000 f990 	bl	8004740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004420:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004424:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004426:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800442a:	4619      	mov	r1, r3
 800442c:	482c      	ldr	r0, [pc, #176]	@ (80044e0 <MX_TIM4_Init+0x128>)
 800442e:	f005 fb33 	bl	8009a98 <HAL_TIM_ConfigClockSource>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004438:	f000 f982 	bl	8004740 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800443c:	4828      	ldr	r0, [pc, #160]	@ (80044e0 <MX_TIM4_Init+0x128>)
 800443e:	f005 f91f 	bl	8009680 <HAL_TIM_PWM_Init>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004448:	f000 f97a 	bl	8004740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800444c:	2300      	movs	r3, #0
 800444e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004450:	2300      	movs	r3, #0
 8004452:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004454:	f107 0320 	add.w	r3, r7, #32
 8004458:	4619      	mov	r1, r3
 800445a:	4821      	ldr	r0, [pc, #132]	@ (80044e0 <MX_TIM4_Init+0x128>)
 800445c:	f005 febe 	bl	800a1dc <HAL_TIMEx_MasterConfigSynchronization>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004466:	f000 f96b 	bl	8004740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800446a:	2360      	movs	r3, #96	@ 0x60
 800446c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800447a:	1d3b      	adds	r3, r7, #4
 800447c:	2200      	movs	r2, #0
 800447e:	4619      	mov	r1, r3
 8004480:	4817      	ldr	r0, [pc, #92]	@ (80044e0 <MX_TIM4_Init+0x128>)
 8004482:	f005 fa47 	bl	8009914 <HAL_TIM_PWM_ConfigChannel>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800448c:	f000 f958 	bl	8004740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004490:	1d3b      	adds	r3, r7, #4
 8004492:	2204      	movs	r2, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4812      	ldr	r0, [pc, #72]	@ (80044e0 <MX_TIM4_Init+0x128>)
 8004498:	f005 fa3c 	bl	8009914 <HAL_TIM_PWM_ConfigChannel>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80044a2:	f000 f94d 	bl	8004740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80044a6:	1d3b      	adds	r3, r7, #4
 80044a8:	2208      	movs	r2, #8
 80044aa:	4619      	mov	r1, r3
 80044ac:	480c      	ldr	r0, [pc, #48]	@ (80044e0 <MX_TIM4_Init+0x128>)
 80044ae:	f005 fa31 	bl	8009914 <HAL_TIM_PWM_ConfigChannel>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80044b8:	f000 f942 	bl	8004740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80044bc:	1d3b      	adds	r3, r7, #4
 80044be:	220c      	movs	r2, #12
 80044c0:	4619      	mov	r1, r3
 80044c2:	4807      	ldr	r0, [pc, #28]	@ (80044e0 <MX_TIM4_Init+0x128>)
 80044c4:	f005 fa26 	bl	8009914 <HAL_TIM_PWM_ConfigChannel>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 80044ce:	f000 f937 	bl	8004740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80044d2:	4803      	ldr	r0, [pc, #12]	@ (80044e0 <MX_TIM4_Init+0x128>)
 80044d4:	f002 fa1c 	bl	8006910 <HAL_TIM_MspPostInit>

}
 80044d8:	bf00      	nop
 80044da:	3738      	adds	r7, #56	@ 0x38
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	200004e4 	.word	0x200004e4
 80044e4:	40000800 	.word	0x40000800

080044e8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80044ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004528 <MX_TIM11_Init+0x40>)
 80044ee:	4a0f      	ldr	r2, [pc, #60]	@ (800452c <MX_TIM11_Init+0x44>)
 80044f0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 96-1;
 80044f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <MX_TIM11_Init+0x40>)
 80044f4:	225f      	movs	r2, #95	@ 0x5f
 80044f6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <MX_TIM11_Init+0x40>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 50000;
 80044fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004528 <MX_TIM11_Init+0x40>)
 8004500:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004504:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004506:	4b08      	ldr	r3, [pc, #32]	@ (8004528 <MX_TIM11_Init+0x40>)
 8004508:	2200      	movs	r2, #0
 800450a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800450c:	4b06      	ldr	r3, [pc, #24]	@ (8004528 <MX_TIM11_Init+0x40>)
 800450e:	2200      	movs	r2, #0
 8004510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004512:	4805      	ldr	r0, [pc, #20]	@ (8004528 <MX_TIM11_Init+0x40>)
 8004514:	f004 ffa8 	bl	8009468 <HAL_TIM_Base_Init>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800451e:	f000 f90f 	bl	8004740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	2000052c 	.word	0x2000052c
 800452c:	40014800 	.word	0x40014800

08004530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004534:	4b11      	ldr	r3, [pc, #68]	@ (800457c <MX_USART1_UART_Init+0x4c>)
 8004536:	4a12      	ldr	r2, [pc, #72]	@ (8004580 <MX_USART1_UART_Init+0x50>)
 8004538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800453a:	4b10      	ldr	r3, [pc, #64]	@ (800457c <MX_USART1_UART_Init+0x4c>)
 800453c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004542:	4b0e      	ldr	r3, [pc, #56]	@ (800457c <MX_USART1_UART_Init+0x4c>)
 8004544:	2200      	movs	r2, #0
 8004546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004548:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <MX_USART1_UART_Init+0x4c>)
 800454a:	2200      	movs	r2, #0
 800454c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800454e:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <MX_USART1_UART_Init+0x4c>)
 8004550:	2200      	movs	r2, #0
 8004552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004554:	4b09      	ldr	r3, [pc, #36]	@ (800457c <MX_USART1_UART_Init+0x4c>)
 8004556:	220c      	movs	r2, #12
 8004558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800455a:	4b08      	ldr	r3, [pc, #32]	@ (800457c <MX_USART1_UART_Init+0x4c>)
 800455c:	2200      	movs	r2, #0
 800455e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004560:	4b06      	ldr	r3, [pc, #24]	@ (800457c <MX_USART1_UART_Init+0x4c>)
 8004562:	2200      	movs	r2, #0
 8004564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004566:	4805      	ldr	r0, [pc, #20]	@ (800457c <MX_USART1_UART_Init+0x4c>)
 8004568:	f005 feba 	bl	800a2e0 <HAL_UART_Init>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004572:	f000 f8e5 	bl	8004740 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000574 	.word	0x20000574
 8004580:	40011000 	.word	0x40011000

08004584 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004588:	4b11      	ldr	r3, [pc, #68]	@ (80045d0 <MX_USART6_UART_Init+0x4c>)
 800458a:	4a12      	ldr	r2, [pc, #72]	@ (80045d4 <MX_USART6_UART_Init+0x50>)
 800458c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800458e:	4b10      	ldr	r3, [pc, #64]	@ (80045d0 <MX_USART6_UART_Init+0x4c>)
 8004590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004594:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004596:	4b0e      	ldr	r3, [pc, #56]	@ (80045d0 <MX_USART6_UART_Init+0x4c>)
 8004598:	2200      	movs	r2, #0
 800459a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800459c:	4b0c      	ldr	r3, [pc, #48]	@ (80045d0 <MX_USART6_UART_Init+0x4c>)
 800459e:	2200      	movs	r2, #0
 80045a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80045a2:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <MX_USART6_UART_Init+0x4c>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80045a8:	4b09      	ldr	r3, [pc, #36]	@ (80045d0 <MX_USART6_UART_Init+0x4c>)
 80045aa:	220c      	movs	r2, #12
 80045ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045ae:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <MX_USART6_UART_Init+0x4c>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80045b4:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <MX_USART6_UART_Init+0x4c>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80045ba:	4805      	ldr	r0, [pc, #20]	@ (80045d0 <MX_USART6_UART_Init+0x4c>)
 80045bc:	f005 fe90 	bl	800a2e0 <HAL_UART_Init>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80045c6:	f000 f8bb 	bl	8004740 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80045ca:	bf00      	nop
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	200005bc 	.word	0x200005bc
 80045d4:	40011400 	.word	0x40011400

080045d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	607b      	str	r3, [r7, #4]
 80045e2:	4b10      	ldr	r3, [pc, #64]	@ (8004624 <MX_DMA_Init+0x4c>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004624 <MX_DMA_Init+0x4c>)
 80045e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004624 <MX_DMA_Init+0x4c>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f6:	607b      	str	r3, [r7, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80045fa:	2200      	movs	r2, #0
 80045fc:	2100      	movs	r1, #0
 80045fe:	203a      	movs	r0, #58	@ 0x3a
 8004600:	f002 fdd2 	bl	80071a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004604:	203a      	movs	r0, #58	@ 0x3a
 8004606:	f002 fdeb 	bl	80071e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800460a:	2200      	movs	r2, #0
 800460c:	2100      	movs	r1, #0
 800460e:	2046      	movs	r0, #70	@ 0x46
 8004610:	f002 fdca 	bl	80071a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004614:	2046      	movs	r0, #70	@ 0x46
 8004616:	f002 fde3 	bl	80071e0 <HAL_NVIC_EnableIRQ>

}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40023800 	.word	0x40023800

08004628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	@ 0x28
 800462c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800462e:	f107 0314 	add.w	r3, r7, #20
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	605a      	str	r2, [r3, #4]
 8004638:	609a      	str	r2, [r3, #8]
 800463a:	60da      	str	r2, [r3, #12]
 800463c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	4b27      	ldr	r3, [pc, #156]	@ (80046e0 <MX_GPIO_Init+0xb8>)
 8004644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004646:	4a26      	ldr	r2, [pc, #152]	@ (80046e0 <MX_GPIO_Init+0xb8>)
 8004648:	f043 0304 	orr.w	r3, r3, #4
 800464c:	6313      	str	r3, [r2, #48]	@ 0x30
 800464e:	4b24      	ldr	r3, [pc, #144]	@ (80046e0 <MX_GPIO_Init+0xb8>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	4b20      	ldr	r3, [pc, #128]	@ (80046e0 <MX_GPIO_Init+0xb8>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004662:	4a1f      	ldr	r2, [pc, #124]	@ (80046e0 <MX_GPIO_Init+0xb8>)
 8004664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004668:	6313      	str	r3, [r2, #48]	@ 0x30
 800466a:	4b1d      	ldr	r3, [pc, #116]	@ (80046e0 <MX_GPIO_Init+0xb8>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	4b19      	ldr	r3, [pc, #100]	@ (80046e0 <MX_GPIO_Init+0xb8>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467e:	4a18      	ldr	r2, [pc, #96]	@ (80046e0 <MX_GPIO_Init+0xb8>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	6313      	str	r3, [r2, #48]	@ 0x30
 8004686:	4b16      	ldr	r3, [pc, #88]	@ (80046e0 <MX_GPIO_Init+0xb8>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	4b12      	ldr	r3, [pc, #72]	@ (80046e0 <MX_GPIO_Init+0xb8>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	4a11      	ldr	r2, [pc, #68]	@ (80046e0 <MX_GPIO_Init+0xb8>)
 800469c:	f043 0302 	orr.w	r3, r3, #2
 80046a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046a2:	4b0f      	ldr	r3, [pc, #60]	@ (80046e0 <MX_GPIO_Init+0xb8>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80046ae:	2200      	movs	r2, #0
 80046b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046b4:	480b      	ldr	r0, [pc, #44]	@ (80046e4 <MX_GPIO_Init+0xbc>)
 80046b6:	f003 fa0f 	bl	8007ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80046ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046c0:	2301      	movs	r3, #1
 80046c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c8:	2300      	movs	r3, #0
 80046ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046cc:	f107 0314 	add.w	r3, r7, #20
 80046d0:	4619      	mov	r1, r3
 80046d2:	4804      	ldr	r0, [pc, #16]	@ (80046e4 <MX_GPIO_Init+0xbc>)
 80046d4:	f003 f87c 	bl	80077d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80046d8:	bf00      	nop
 80046da:	3728      	adds	r7, #40	@ 0x28
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40023800 	.word	0x40023800
 80046e4:	40020800 	.word	0x40020800

080046e8 <Timer_GetElapsed>:

/* USER CODE BEGIN 4 */
uint32_t Timer_GetElapsed(TIM_HandleTypeDef *htim, uint32_t timer_start) {
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
    uint32_t timer_end = __HAL_TIM_GET_COUNTER(htim);  // Timer pointer'ı ile sayaç değeri alınır
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	60fb      	str	r3, [r7, #12]

    if (timer_end >= timer_start) {
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d303      	bcc.n	800470a <Timer_GetElapsed+0x22>
        return timer_end - timer_start;
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	e002      	b.n	8004710 <Timer_GetElapsed+0x28>
    } else {
        return (0xFFFFFFFF - timer_start) + timer_end + 1;
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	1ad3      	subs	r3, r2, r3
    }
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a04      	ldr	r2, [pc, #16]	@ (800473c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d101      	bne.n	8004732 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800472e:	f002 fc3f 	bl	8006fb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40014000 	.word	0x40014000

08004740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004744:	b672      	cpsid	i
}
 8004746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004748:	bf00      	nop
 800474a:	e7fd      	b.n	8004748 <Error_Handler+0x8>

0800474c <MPU6050_Init>:
float aRes_MPU6050, gRes_MPU6050;      // scale resolutions per LSB for the sensors
float gyroBias_MPU6050[3] = {0, 0, 0}, accelBias_MPU6050[3] = {0, 0, 0};      // Bias corrections for gyro and accelerometer
float SelfTest_MPU6050[12];    // holds results of gyro and accelerometer self test

// Main Init function
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct){
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af04      	add	r7, sp, #16
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]

	// Init user variables
	DataStruct->CALIBRATIN_OK_u8 = 0;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2200      	movs	r2, #0
 800475a:	761a      	strb	r2, [r3, #24]

	uint8_t readData;

	//read MPU6050 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, WHO_AM_I_MPU6050, 1, &readData, 1, i2c_timeout);
 800475c:	2364      	movs	r3, #100	@ 0x64
 800475e:	9302      	str	r3, [sp, #8]
 8004760:	2301      	movs	r3, #1
 8004762:	9301      	str	r3, [sp, #4]
 8004764:	f107 030f 	add.w	r3, r7, #15
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	2301      	movs	r3, #1
 800476c:	2275      	movs	r2, #117	@ 0x75
 800476e:	21d0      	movs	r1, #208	@ 0xd0
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f003 fc09 	bl	8007f88 <HAL_I2C_Mem_Read>

	if (readData == 104) {
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	2b68      	cmp	r3, #104	@ 0x68
 800477a:	d11d      	bne.n	80047b8 <MPU6050_Init+0x6c>

		//Start by performing self test and reporting values
		MPU6050SelfTest(I2Cx, SelfTest_MPU6050);
 800477c:	4911      	ldr	r1, [pc, #68]	@ (80047c4 <MPU6050_Init+0x78>)
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fe8e 	bl	80054a0 <MPU6050SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU6050(I2Cx, DataStruct, gyroBias_MPU6050, accelBias_MPU6050);
 8004784:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <MPU6050_Init+0x7c>)
 8004786:	4a11      	ldr	r2, [pc, #68]	@ (80047cc <MPU6050_Init+0x80>)
 8004788:	6839      	ldr	r1, [r7, #0]
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fa5a 	bl	8004c44 <calibrateMPU6050>
		HAL_Delay(1000);
 8004790:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004794:	f002 fc2c 	bl	8006ff0 <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU6050(I2Cx);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f903 	bl	80049a4 <initMPU6050>
		HAL_Delay(1000);
 800479e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80047a2:	f002 fc25 	bl	8006ff0 <HAL_Delay>

		getMPU6050Ares();
 80047a6:	f000 f899 	bl	80048dc <getMPU6050Ares>
		getMPU6050Gres();
 80047aa:	f000 f8c7 	bl	800493c <getMPU6050Gres>

		HAL_Delay(100);
 80047ae:	2064      	movs	r0, #100	@ 0x64
 80047b0:	f002 fc1e 	bl	8006ff0 <HAL_Delay>

		return 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	e000      	b.n	80047ba <MPU6050_Init+0x6e>
	}
	return 1; // Loop forever if communication doesn't happen
 80047b8:	2301      	movs	r3, #1
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000734 	.word	0x20000734
 80047c8:	20000728 	.word	0x20000728
 80047cc:	2000071c 	.word	0x2000071c

080047d0 <readMPU6050>:

// Data read function
void readMPU6050(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af04      	add	r7, sp, #16
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]

	uint8_t Data;
	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 80047da:	2364      	movs	r3, #100	@ 0x64
 80047dc:	9302      	str	r3, [sp, #8]
 80047de:	2301      	movs	r3, #1
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	f107 030f 	add.w	r3, r7, #15
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	2301      	movs	r3, #1
 80047ea:	223a      	movs	r2, #58	@ 0x3a
 80047ec:	21d0      	movs	r1, #208	@ 0xd0
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f003 fbca 	bl	8007f88 <HAL_I2C_Mem_Read>

	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d061      	beq.n	80048c2 <readMPU6050+0xf2>

		readMPU6050AccelData(I2Cx, accelRaw_MPU6050);  // Read the accelerometer x/y/z adc values
 80047fe:	4933      	ldr	r1, [pc, #204]	@ (80048cc <readMPU6050+0xfc>)
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f9b3 	bl	8004b6c <readMPU6050AccelData>
		readMPU6050GyroData(I2Cx, gyroRaw_MPU6050);  // Read the gyro x/y/z adc values
 8004806:	4932      	ldr	r1, [pc, #200]	@ (80048d0 <readMPU6050+0x100>)
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f9e5 	bl	8004bd8 <readMPU6050GyroData>

		// Now we'll calculate the accleration value into actual g's
		DataStruct->MPU6050_Accel_f32[0] = (float)accelRaw_MPU6050[0]*aRes_MPU6050; //- accelBias_MPU6050[0];  // get actual g value, this depends on scale being set
 800480e:	4b2f      	ldr	r3, [pc, #188]	@ (80048cc <readMPU6050+0xfc>)
 8004810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004814:	ee07 3a90 	vmov	s15, r3
 8004818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800481c:	4b2d      	ldr	r3, [pc, #180]	@ (80048d4 <readMPU6050+0x104>)
 800481e:	edd3 7a00 	vldr	s15, [r3]
 8004822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	edc3 7a00 	vstr	s15, [r3]
		DataStruct->MPU6050_Accel_f32[1] = (float)accelRaw_MPU6050[1]*aRes_MPU6050; //- accelBias_MPU6050[1];
 800482c:	4b27      	ldr	r3, [pc, #156]	@ (80048cc <readMPU6050+0xfc>)
 800482e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800483a:	4b26      	ldr	r3, [pc, #152]	@ (80048d4 <readMPU6050+0x104>)
 800483c:	edd3 7a00 	vldr	s15, [r3]
 8004840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	edc3 7a01 	vstr	s15, [r3, #4]
		DataStruct->MPU6050_Accel_f32[2] = (float)accelRaw_MPU6050[2]*aRes_MPU6050; //- accelBias_MPU6050[2];
 800484a:	4b20      	ldr	r3, [pc, #128]	@ (80048cc <readMPU6050+0xfc>)
 800484c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004850:	ee07 3a90 	vmov	s15, r3
 8004854:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004858:	4b1e      	ldr	r3, [pc, #120]	@ (80048d4 <readMPU6050+0x104>)
 800485a:	edd3 7a00 	vldr	s15, [r3]
 800485e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	edc3 7a02 	vstr	s15, [r3, #8]

		// Calculate the gyro value into actual degrees per second
		DataStruct->MPU6050_Gyro_f32[0] = (float)gyroRaw_MPU6050[0]*gRes_MPU6050; //- gyroBias_MPU6050[0]; // get actual gyro value, this depends on scale being set
 8004868:	4b19      	ldr	r3, [pc, #100]	@ (80048d0 <readMPU6050+0x100>)
 800486a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004876:	4b18      	ldr	r3, [pc, #96]	@ (80048d8 <readMPU6050+0x108>)
 8004878:	edd3 7a00 	vldr	s15, [r3]
 800487c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	edc3 7a03 	vstr	s15, [r3, #12]
		DataStruct->MPU6050_Gyro_f32[1] = (float)gyroRaw_MPU6050[1]*gRes_MPU6050; //- gyroBias_MPU6050[1];
 8004886:	4b12      	ldr	r3, [pc, #72]	@ (80048d0 <readMPU6050+0x100>)
 8004888:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800488c:	ee07 3a90 	vmov	s15, r3
 8004890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004894:	4b10      	ldr	r3, [pc, #64]	@ (80048d8 <readMPU6050+0x108>)
 8004896:	edd3 7a00 	vldr	s15, [r3]
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	edc3 7a04 	vstr	s15, [r3, #16]
		DataStruct->MPU6050_Gyro_f32[2] = (float)gyroRaw_MPU6050[2]*gRes_MPU6050; //- gyroBias_MPU6050[2];
 80048a4:	4b0a      	ldr	r3, [pc, #40]	@ (80048d0 <readMPU6050+0x100>)
 80048a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048b2:	4b09      	ldr	r3, [pc, #36]	@ (80048d8 <readMPU6050+0x108>)
 80048b4:	edd3 7a00 	vldr	s15, [r3]
 80048b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	edc3 7a05 	vstr	s15, [r3, #20]
	}
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000704 	.word	0x20000704
 80048d0:	2000070c 	.word	0x2000070c
 80048d4:	20000714 	.word	0x20000714
 80048d8:	20000718 	.word	0x20000718

080048dc <getMPU6050Ares>:

// Accelerometer resolution scale calculator function
void getMPU6050Ares() {
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  switch (Ascale_MPU6050)
 80048e0:	4b14      	ldr	r3, [pc, #80]	@ (8004934 <getMPU6050Ares+0x58>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d81f      	bhi.n	8004928 <getMPU6050Ares+0x4c>
 80048e8:	a201      	add	r2, pc, #4	@ (adr r2, 80048f0 <getMPU6050Ares+0x14>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004901 	.word	0x08004901
 80048f4:	0800490b 	.word	0x0800490b
 80048f8:	08004915 	.word	0x08004915
 80048fc:	0800491f 	.word	0x0800491f
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes_MPU6050 = 2.0/32768.0;
 8004900:	4b0d      	ldr	r3, [pc, #52]	@ (8004938 <getMPU6050Ares+0x5c>)
 8004902:	f04f 5262 	mov.w	r2, #947912704	@ 0x38800000
 8004906:	601a      	str	r2, [r3, #0]
          break;
 8004908:	e00e      	b.n	8004928 <getMPU6050Ares+0x4c>
    case AFS_4G:
          aRes_MPU6050 = 4.0/32768.0;
 800490a:	4b0b      	ldr	r3, [pc, #44]	@ (8004938 <getMPU6050Ares+0x5c>)
 800490c:	f04f 5264 	mov.w	r2, #956301312	@ 0x39000000
 8004910:	601a      	str	r2, [r3, #0]
          break;
 8004912:	e009      	b.n	8004928 <getMPU6050Ares+0x4c>
    case AFS_8G:
          aRes_MPU6050 = 8.0/32768.0;
 8004914:	4b08      	ldr	r3, [pc, #32]	@ (8004938 <getMPU6050Ares+0x5c>)
 8004916:	f04f 5266 	mov.w	r2, #964689920	@ 0x39800000
 800491a:	601a      	str	r2, [r3, #0]
          break;
 800491c:	e004      	b.n	8004928 <getMPU6050Ares+0x4c>
    case AFS_16G:
          aRes_MPU6050 = 16.0/32768.0;
 800491e:	4b06      	ldr	r3, [pc, #24]	@ (8004938 <getMPU6050Ares+0x5c>)
 8004920:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 8004924:	601a      	str	r2, [r3, #0]
          break;
 8004926:	bf00      	nop
  }
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000701 	.word	0x20000701
 8004938:	20000714 	.word	0x20000714

0800493c <getMPU6050Gres>:

// Gyro resolution scale calculator function
void getMPU6050Gres() {
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  switch (Gscale_MPU6050)
 8004940:	4b12      	ldr	r3, [pc, #72]	@ (800498c <getMPU6050Gres+0x50>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b03      	cmp	r3, #3
 8004946:	d81b      	bhi.n	8004980 <getMPU6050Gres+0x44>
 8004948:	a201      	add	r2, pc, #4	@ (adr r2, 8004950 <getMPU6050Gres+0x14>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004961 	.word	0x08004961
 8004954:	08004969 	.word	0x08004969
 8004958:	08004971 	.word	0x08004971
 800495c:	08004979 	.word	0x08004979
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes_MPU6050 = 250.0/32768.0;
 8004960:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <getMPU6050Gres+0x54>)
 8004962:	4a0c      	ldr	r2, [pc, #48]	@ (8004994 <getMPU6050Gres+0x58>)
 8004964:	601a      	str	r2, [r3, #0]
          break;
 8004966:	e00b      	b.n	8004980 <getMPU6050Gres+0x44>
    case GFS_500DPS:
          gRes_MPU6050 = 500.0/32768.0;
 8004968:	4b09      	ldr	r3, [pc, #36]	@ (8004990 <getMPU6050Gres+0x54>)
 800496a:	4a0b      	ldr	r2, [pc, #44]	@ (8004998 <getMPU6050Gres+0x5c>)
 800496c:	601a      	str	r2, [r3, #0]
          break;
 800496e:	e007      	b.n	8004980 <getMPU6050Gres+0x44>
    case GFS_1000DPS:
          gRes_MPU6050 = 1000.0/32768.0;
 8004970:	4b07      	ldr	r3, [pc, #28]	@ (8004990 <getMPU6050Gres+0x54>)
 8004972:	4a0a      	ldr	r2, [pc, #40]	@ (800499c <getMPU6050Gres+0x60>)
 8004974:	601a      	str	r2, [r3, #0]
          break;
 8004976:	e003      	b.n	8004980 <getMPU6050Gres+0x44>
    case GFS_2000DPS:
          gRes_MPU6050 = 2000.0/32768.0;
 8004978:	4b05      	ldr	r3, [pc, #20]	@ (8004990 <getMPU6050Gres+0x54>)
 800497a:	4a09      	ldr	r2, [pc, #36]	@ (80049a0 <getMPU6050Gres+0x64>)
 800497c:	601a      	str	r2, [r3, #0]
          break;
 800497e:	bf00      	nop
  }
}
 8004980:	bf00      	nop
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	20000700 	.word	0x20000700
 8004990:	20000718 	.word	0x20000718
 8004994:	3bfa0000 	.word	0x3bfa0000
 8004998:	3c7a0000 	.word	0x3c7a0000
 800499c:	3cfa0000 	.word	0x3cfa0000
 80049a0:	3d7a0000 	.word	0x3d7a0000

080049a4 <initMPU6050>:

void initMPU6050(I2C_HandleTypeDef *I2Cx){
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af04      	add	r7, sp, #16
 80049aa:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 80049ac:	2300      	movs	r3, #0
 80049ae:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80049b0:	2364      	movs	r3, #100	@ 0x64
 80049b2:	9302      	str	r3, [sp, #8]
 80049b4:	2301      	movs	r3, #1
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	f107 030e 	add.w	r3, r7, #14
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	2301      	movs	r3, #1
 80049c0:	226b      	movs	r2, #107	@ 0x6b
 80049c2:	21d0      	movs	r1, #208	@ 0xd0
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f003 f9e5 	bl	8007d94 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80049ca:	2064      	movs	r0, #100	@ 0x64
 80049cc:	f002 fb10 	bl	8006ff0 <HAL_Delay>

	writeData = 0x01;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80049d4:	2364      	movs	r3, #100	@ 0x64
 80049d6:	9302      	str	r3, [sp, #8]
 80049d8:	2301      	movs	r3, #1
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	f107 030e 	add.w	r3, r7, #14
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	2301      	movs	r3, #1
 80049e4:	226b      	movs	r2, #107	@ 0x6b
 80049e6:	21d0      	movs	r1, #208	@ 0xd0
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f003 f9d3 	bl	8007d94 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80049ee:	2064      	movs	r0, #100	@ 0x64
 80049f0:	f002 fafe 	bl	8006ff0 <HAL_Delay>

	writeData = 0x03;
 80049f4:	2303      	movs	r3, #3
 80049f6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 80049f8:	2364      	movs	r3, #100	@ 0x64
 80049fa:	9302      	str	r3, [sp, #8]
 80049fc:	2301      	movs	r3, #1
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	f107 030e 	add.w	r3, r7, #14
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	2301      	movs	r3, #1
 8004a08:	221a      	movs	r2, #26
 8004a0a:	21d0      	movs	r1, #208	@ 0xd0
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f003 f9c1 	bl	8007d94 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004a12:	2064      	movs	r0, #100	@ 0x64
 8004a14:	f002 faec 	bl	8006ff0 <HAL_Delay>

	writeData = 0; //0x07; 0x04
 8004a18:	2300      	movs	r3, #0
 8004a1a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8004a1c:	2364      	movs	r3, #100	@ 0x64
 8004a1e:	9302      	str	r3, [sp, #8]
 8004a20:	2301      	movs	r3, #1
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	f107 030e 	add.w	r3, r7, #14
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	2219      	movs	r2, #25
 8004a2e:	21d0      	movs	r1, #208	@ 0xd0
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f003 f9af 	bl	8007d94 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004a36:	2064      	movs	r0, #100	@ 0x64
 8004a38:	f002 fada 	bl	8006ff0 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8004a3c:	2364      	movs	r3, #100	@ 0x64
 8004a3e:	9302      	str	r3, [sp, #8]
 8004a40:	2301      	movs	r3, #1
 8004a42:	9301      	str	r3, [sp, #4]
 8004a44:	f107 030f 	add.w	r3, r7, #15
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	221b      	movs	r2, #27
 8004a4e:	21d0      	movs	r1, #208	@ 0xd0
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f003 fa99 	bl	8007f88 <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	f023 0303 	bic.w	r3, r3, #3
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	f023 0318 	bic.w	r3, r3, #24
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale_MPU6050 << 3; // Set full scale range for the gyro
 8004a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b64 <initMPU6050+0x1c0>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	b25b      	sxtb	r3, r3
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	b25a      	sxtb	r2, r3
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	b25b      	sxtb	r3, r3
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	b25b      	sxtb	r3, r3
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8004a80:	2064      	movs	r0, #100	@ 0x64
 8004a82:	f002 fab5 	bl	8006ff0 <HAL_Delay>

	writeData = readData;
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8004a8a:	2364      	movs	r3, #100	@ 0x64
 8004a8c:	9302      	str	r3, [sp, #8]
 8004a8e:	2301      	movs	r3, #1
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	f107 030e 	add.w	r3, r7, #14
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2301      	movs	r3, #1
 8004a9a:	221b      	movs	r2, #27
 8004a9c:	21d0      	movs	r1, #208	@ 0xd0
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f003 f978 	bl	8007d94 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004aa4:	2064      	movs	r0, #100	@ 0x64
 8004aa6:	f002 faa3 	bl	8006ff0 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 8004aaa:	2364      	movs	r3, #100	@ 0x64
 8004aac:	9302      	str	r3, [sp, #8]
 8004aae:	2301      	movs	r3, #1
 8004ab0:	9301      	str	r3, [sp, #4]
 8004ab2:	f107 030f 	add.w	r3, r7, #15
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	2301      	movs	r3, #1
 8004aba:	221c      	movs	r2, #28
 8004abc:	21d0      	movs	r1, #208	@ 0xd0
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f003 fa62 	bl	8007f88 <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	f023 0318 	bic.w	r3, r3, #24
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale_MPU6050 << 3; // Set full scale range for the accelerometer
 8004ace:	4b26      	ldr	r3, [pc, #152]	@ (8004b68 <initMPU6050+0x1c4>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	b25b      	sxtb	r3, r3
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	b25a      	sxtb	r2, r3
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	b25b      	sxtb	r3, r3
 8004adc:	4313      	orrs	r3, r2
 8004ade:	b25b      	sxtb	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8004ae8:	2364      	movs	r3, #100	@ 0x64
 8004aea:	9302      	str	r3, [sp, #8]
 8004aec:	2301      	movs	r3, #1
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	f107 030e 	add.w	r3, r7, #14
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	2301      	movs	r3, #1
 8004af8:	221c      	movs	r2, #28
 8004afa:	21d0      	movs	r1, #208	@ 0xd0
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f003 f949 	bl	8007d94 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004b02:	2064      	movs	r0, #100	@ 0x64
 8004b04:	f002 fa74 	bl	8006ff0 <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 8004b08:	2364      	movs	r3, #100	@ 0x64
 8004b0a:	9302      	str	r3, [sp, #8]
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	f107 030f 	add.w	r3, r7, #15
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	2301      	movs	r3, #1
 8004b18:	221d      	movs	r2, #29
 8004b1a:	21d0      	movs	r1, #208	@ 0xd0
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f003 fa33 	bl	8007f88 <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	f023 030f 	bic.w	r3, r3, #15
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	f043 0303 	orr.w	r3, r3, #3
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 8004b3a:	2364      	movs	r3, #100	@ 0x64
 8004b3c:	9302      	str	r3, [sp, #8]
 8004b3e:	2301      	movs	r3, #1
 8004b40:	9301      	str	r3, [sp, #4]
 8004b42:	f107 030e 	add.w	r3, r7, #14
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	2301      	movs	r3, #1
 8004b4a:	221d      	movs	r2, #29
 8004b4c:	21d0      	movs	r1, #208	@ 0xd0
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f003 f920 	bl	8007d94 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004b54:	2064      	movs	r0, #100	@ 0x64
 8004b56:	f002 fa4b 	bl	8006ff0 <HAL_Delay>
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000700 	.word	0x20000700
 8004b68:	20000701 	.word	0x20000701

08004b6c <readMPU6050AccelData>:

//read raw Accelerometer values from registers
void readMPU6050AccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af04      	add	r7, sp, #16
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 8004b76:	2364      	movs	r3, #100	@ 0x64
 8004b78:	9302      	str	r3, [sp, #8]
 8004b7a:	2306      	movs	r3, #6
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	f107 0308 	add.w	r3, r7, #8
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	2301      	movs	r3, #1
 8004b86:	223b      	movs	r2, #59	@ 0x3b
 8004b88:	21d0      	movs	r1, #208	@ 0xd0
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f003 f9fc 	bl	8007f88 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8004b90:	7a3b      	ldrb	r3, [r7, #8]
 8004b92:	b21b      	sxth	r3, r3
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	b21a      	sxth	r2, r3
 8004b98:	7a7b      	ldrb	r3, [r7, #9]
 8004b9a:	b21b      	sxth	r3, r3
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	b21a      	sxth	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8004ba4:	7abb      	ldrb	r3, [r7, #10]
 8004ba6:	b21b      	sxth	r3, r3
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	b219      	sxth	r1, r3
 8004bac:	7afb      	ldrb	r3, [r7, #11]
 8004bae:	b21a      	sxth	r2, r3
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	b212      	sxth	r2, r2
 8004bb8:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 8004bba:	7b3b      	ldrb	r3, [r7, #12]
 8004bbc:	b21b      	sxth	r3, r3
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	b219      	sxth	r1, r3
 8004bc2:	7b7b      	ldrb	r3, [r7, #13]
 8004bc4:	b21a      	sxth	r2, r3
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	b212      	sxth	r2, r2
 8004bce:	801a      	strh	r2, [r3, #0]
}
 8004bd0:	bf00      	nop
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <readMPU6050GyroData>:

//read raw Gyro values from registers
void readMPU6050GyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af04      	add	r7, sp, #16
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 8004be2:	2364      	movs	r3, #100	@ 0x64
 8004be4:	9302      	str	r3, [sp, #8]
 8004be6:	2306      	movs	r3, #6
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	f107 0308 	add.w	r3, r7, #8
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	2243      	movs	r2, #67	@ 0x43
 8004bf4:	21d0      	movs	r1, #208	@ 0xd0
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f003 f9c6 	bl	8007f88 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8004bfc:	7a3b      	ldrb	r3, [r7, #8]
 8004bfe:	b21b      	sxth	r3, r3
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	b21a      	sxth	r2, r3
 8004c04:	7a7b      	ldrb	r3, [r7, #9]
 8004c06:	b21b      	sxth	r3, r3
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	b21a      	sxth	r2, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 8004c10:	7abb      	ldrb	r3, [r7, #10]
 8004c12:	b21b      	sxth	r3, r3
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	b219      	sxth	r1, r3
 8004c18:	7afb      	ldrb	r3, [r7, #11]
 8004c1a:	b21a      	sxth	r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	3302      	adds	r3, #2
 8004c20:	430a      	orrs	r2, r1
 8004c22:	b212      	sxth	r2, r2
 8004c24:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 8004c26:	7b3b      	ldrb	r3, [r7, #12]
 8004c28:	b21b      	sxth	r3, r3
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	b219      	sxth	r1, r3
 8004c2e:	7b7b      	ldrb	r3, [r7, #13]
 8004c30:	b21a      	sxth	r2, r3
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	3304      	adds	r3, #4
 8004c36:	430a      	orrs	r2, r1
 8004c38:	b212      	sxth	r2, r2
 8004c3a:	801a      	strh	r2, [r3, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <calibrateMPU6050>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU6050(I2C_HandleTypeDef *I2Cx, MPU6050_t*DataStruct, float * dest1, float * dest2){
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b09e      	sub	sp, #120	@ 0x78
 8004c48:	af04      	add	r7, sp, #16
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8004c52:	2300      	movs	r3, #0
 8004c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c56:	2300      	movs	r3, #0
 8004c58:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c5e:	2300      	movs	r3, #0
 8004c60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c62:	2300      	movs	r3, #0
 8004c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c66:	2300      	movs	r3, #0
 8004c68:	63bb      	str	r3, [r7, #56]	@ 0x38

	// reset device
	writeData = 0x80;
 8004c6a:	2380      	movs	r3, #128	@ 0x80
 8004c6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 8004c70:	2364      	movs	r3, #100	@ 0x64
 8004c72:	9302      	str	r3, [sp, #8]
 8004c74:	2301      	movs	r3, #1
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	2301      	movs	r3, #1
 8004c80:	226b      	movs	r2, #107	@ 0x6b
 8004c82:	21d0      	movs	r1, #208	@ 0xd0
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f003 f885 	bl	8007d94 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004c8a:	2064      	movs	r0, #100	@ 0x64
 8004c8c:	f002 f9b0 	bl	8006ff0 <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8004c96:	2364      	movs	r3, #100	@ 0x64
 8004c98:	9302      	str	r3, [sp, #8]
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	226b      	movs	r2, #107	@ 0x6b
 8004ca8:	21d0      	movs	r1, #208	@ 0xd0
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f003 f872 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 8004cb6:	2364      	movs	r3, #100	@ 0x64
 8004cb8:	9302      	str	r3, [sp, #8]
 8004cba:	2301      	movs	r3, #1
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	226c      	movs	r2, #108	@ 0x6c
 8004cc8:	21d0      	movs	r1, #208	@ 0xd0
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f003 f862 	bl	8007d94 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8004cd0:	20c8      	movs	r0, #200	@ 0xc8
 8004cd2:	f002 f98d 	bl	8006ff0 <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 8004cdc:	2364      	movs	r3, #100	@ 0x64
 8004cde:	9302      	str	r3, [sp, #8]
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	2301      	movs	r3, #1
 8004cec:	2238      	movs	r2, #56	@ 0x38
 8004cee:	21d0      	movs	r1, #208	@ 0xd0
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f003 f84f 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8004cfc:	2364      	movs	r3, #100	@ 0x64
 8004cfe:	9302      	str	r3, [sp, #8]
 8004d00:	2301      	movs	r3, #1
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	2223      	movs	r2, #35	@ 0x23
 8004d0e:	21d0      	movs	r1, #208	@ 0xd0
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f003 f83f 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004d16:	2300      	movs	r3, #0
 8004d18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8004d1c:	2364      	movs	r3, #100	@ 0x64
 8004d1e:	9302      	str	r3, [sp, #8]
 8004d20:	2301      	movs	r3, #1
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	226b      	movs	r2, #107	@ 0x6b
 8004d2e:	21d0      	movs	r1, #208	@ 0xd0
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f003 f82f 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004d36:	2300      	movs	r3, #0
 8004d38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 8004d3c:	2364      	movs	r3, #100	@ 0x64
 8004d3e:	9302      	str	r3, [sp, #8]
 8004d40:	2301      	movs	r3, #1
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	2224      	movs	r2, #36	@ 0x24
 8004d4e:	21d0      	movs	r1, #208	@ 0xd0
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f003 f81f 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004d56:	2300      	movs	r3, #0
 8004d58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 8004d5c:	2364      	movs	r3, #100	@ 0x64
 8004d5e:	9302      	str	r3, [sp, #8]
 8004d60:	2301      	movs	r3, #1
 8004d62:	9301      	str	r3, [sp, #4]
 8004d64:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	226a      	movs	r2, #106	@ 0x6a
 8004d6e:	21d0      	movs	r1, #208	@ 0xd0
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f003 f80f 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 8004d76:	230c      	movs	r3, #12
 8004d78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 8004d7c:	2364      	movs	r3, #100	@ 0x64
 8004d7e:	9302      	str	r3, [sp, #8]
 8004d80:	2301      	movs	r3, #1
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	226a      	movs	r2, #106	@ 0x6a
 8004d8e:	21d0      	movs	r1, #208	@ 0xd0
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f002 ffff 	bl	8007d94 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8004d96:	200f      	movs	r0, #15
 8004d98:	f002 f92a 	bl	8006ff0 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 8004da2:	2364      	movs	r3, #100	@ 0x64
 8004da4:	9302      	str	r3, [sp, #8]
 8004da6:	2301      	movs	r3, #1
 8004da8:	9301      	str	r3, [sp, #4]
 8004daa:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	2301      	movs	r3, #1
 8004db2:	221a      	movs	r2, #26
 8004db4:	21d0      	movs	r1, #208	@ 0xd0
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f002 ffec 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8004dc2:	2364      	movs	r3, #100	@ 0x64
 8004dc4:	9302      	str	r3, [sp, #8]
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	2219      	movs	r2, #25
 8004dd4:	21d0      	movs	r1, #208	@ 0xd0
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f002 ffdc 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8004de2:	2364      	movs	r3, #100	@ 0x64
 8004de4:	9302      	str	r3, [sp, #8]
 8004de6:	2301      	movs	r3, #1
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	2301      	movs	r3, #1
 8004df2:	221b      	movs	r2, #27
 8004df4:	21d0      	movs	r1, #208	@ 0xd0
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f002 ffcc 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8004e02:	2364      	movs	r3, #100	@ 0x64
 8004e04:	9302      	str	r3, [sp, #8]
 8004e06:	2301      	movs	r3, #1
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2301      	movs	r3, #1
 8004e12:	221c      	movs	r2, #28
 8004e14:	21d0      	movs	r1, #208	@ 0xd0
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f002 ffbc 	bl	8007d94 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8004e1c:	2383      	movs	r3, #131	@ 0x83
 8004e1e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8004e22:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e26:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8004e2a:	2340      	movs	r3, #64	@ 0x40
 8004e2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 8004e30:	2364      	movs	r3, #100	@ 0x64
 8004e32:	9302      	str	r3, [sp, #8]
 8004e34:	2301      	movs	r3, #1
 8004e36:	9301      	str	r3, [sp, #4]
 8004e38:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	2301      	movs	r3, #1
 8004e40:	226a      	movs	r2, #106	@ 0x6a
 8004e42:	21d0      	movs	r1, #208	@ 0xd0
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f002 ffa5 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8004e4a:	2378      	movs	r3, #120	@ 0x78
 8004e4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8004e50:	2364      	movs	r3, #100	@ 0x64
 8004e52:	9302      	str	r3, [sp, #8]
 8004e54:	2301      	movs	r3, #1
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	2301      	movs	r3, #1
 8004e60:	2223      	movs	r2, #35	@ 0x23
 8004e62:	21d0      	movs	r1, #208	@ 0xd0
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f002 ff95 	bl	8007d94 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8004e6a:	2028      	movs	r0, #40	@ 0x28
 8004e6c:	f002 f8c0 	bl	8006ff0 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8004e70:	2300      	movs	r3, #0
 8004e72:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8004e76:	2364      	movs	r3, #100	@ 0x64
 8004e78:	9302      	str	r3, [sp, #8]
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	2301      	movs	r3, #1
 8004e86:	2223      	movs	r2, #35	@ 0x23
 8004e88:	21d0      	movs	r1, #208	@ 0xd0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f002 ff82 	bl	8007d94 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8004e90:	2364      	movs	r3, #100	@ 0x64
 8004e92:	9302      	str	r3, [sp, #8]
 8004e94:	2302      	movs	r3, #2
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	2272      	movs	r2, #114	@ 0x72
 8004ea2:	21d0      	movs	r1, #208	@ 0xd0
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f003 f86f 	bl	8007f88 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8004eaa:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8004eae:	b21b      	sxth	r3, r3
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	b21a      	sxth	r2, r3
 8004eb4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8004eb8:	b21b      	sxth	r3, r3
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	b21b      	sxth	r3, r3
 8004ebe:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8004ec2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8004ec6:	4a5e      	ldr	r2, [pc, #376]	@ (8005040 <calibrateMPU6050+0x3fc>)
 8004ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ecc:	08db      	lsrs	r3, r3, #3
 8004ece:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004ed8:	e07d      	b.n	8004fd6 <calibrateMPU6050+0x392>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8004eda:	2300      	movs	r3, #0
 8004edc:	833b      	strh	r3, [r7, #24]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	837b      	strh	r3, [r7, #26]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	83bb      	strh	r3, [r7, #28]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	823b      	strh	r3, [r7, #16]
 8004eea:	2300      	movs	r3, #0
 8004eec:	827b      	strh	r3, [r7, #18]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8004ef2:	2364      	movs	r3, #100	@ 0x64
 8004ef4:	9302      	str	r3, [sp, #8]
 8004ef6:	230c      	movs	r3, #12
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	2301      	movs	r3, #1
 8004f02:	2274      	movs	r2, #116	@ 0x74
 8004f04:	21d0      	movs	r1, #208	@ 0xd0
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f003 f83e 	bl	8007f88 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8004f0c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8004f10:	b21b      	sxth	r3, r3
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	b21a      	sxth	r2, r3
 8004f16:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8004f1a:	b21b      	sxth	r3, r3
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	b21b      	sxth	r3, r3
 8004f20:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8004f22:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8004f26:	b21b      	sxth	r3, r3
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	b21a      	sxth	r2, r3
 8004f2c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004f30:	b21b      	sxth	r3, r3
 8004f32:	4313      	orrs	r3, r2
 8004f34:	b21b      	sxth	r3, r3
 8004f36:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8004f38:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004f3c:	b21b      	sxth	r3, r3
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	b21a      	sxth	r2, r3
 8004f42:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004f46:	b21b      	sxth	r3, r3
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	b21b      	sxth	r3, r3
 8004f4c:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8004f4e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8004f52:	b21b      	sxth	r3, r3
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	b21a      	sxth	r2, r3
 8004f58:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004f5c:	b21b      	sxth	r3, r3
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	b21b      	sxth	r3, r3
 8004f62:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8004f64:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8004f68:	b21b      	sxth	r3, r3
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	b21a      	sxth	r2, r3
 8004f6e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8004f72:	b21b      	sxth	r3, r3
 8004f74:	4313      	orrs	r3, r2
 8004f76:	b21b      	sxth	r3, r3
 8004f78:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 8004f7a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8004f7e:	b21b      	sxth	r3, r3
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	b21a      	sxth	r2, r3
 8004f84:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8004f88:	b21b      	sxth	r3, r3
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	b21b      	sxth	r3, r3
 8004f8e:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8004f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f92:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004f96:	4413      	add	r3, r2
 8004f98:	633b      	str	r3, [r7, #48]	@ 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	637b      	str	r3, [r7, #52]	@ 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004faa:	4413      	add	r3, r2
 8004fac:	63bb      	str	r3, [r7, #56]	@ 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8004fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fb0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8004fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	643b      	str	r3, [r7, #64]	@ 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8004fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fc4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004fc8:	4413      	add	r3, r2
 8004fca:	647b      	str	r3, [r7, #68]	@ 0x44
	for (ii = 0; ii < packet_count; ii++) {
 8004fcc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004fd6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8004fda:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	f4ff af7b 	bcc.w	8004eda <calibrateMPU6050+0x296>

	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8004fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fe6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004fea:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fee:	633b      	str	r3, [r7, #48]	@ 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8004ff0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ff2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004ff6:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ffa:	637b      	str	r3, [r7, #52]	@ 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8004ffc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ffe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005002:	fb92 f3f3 	sdiv	r3, r2, r3
 8005006:	63bb      	str	r3, [r7, #56]	@ 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 8005008:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800500a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800500e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005012:	63fb      	str	r3, [r7, #60]	@ 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 8005014:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005016:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800501a:	fb92 f3f3 	sdiv	r3, r2, r3
 800501e:	643b      	str	r3, [r7, #64]	@ 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8005020:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005022:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005026:	fb92 f3f3 	sdiv	r3, r2, r3
 800502a:	647b      	str	r3, [r7, #68]	@ 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 800502c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502e:	2b00      	cmp	r3, #0
 8005030:	dd08      	ble.n	8005044 <calibrateMPU6050+0x400>
 8005032:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005034:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800503c:	e007      	b.n	800504e <calibrateMPU6050+0x40a>
 800503e:	bf00      	nop
 8005040:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8005044:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005046:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800504a:	4413      	add	r3, r2
 800504c:	63bb      	str	r3, [r7, #56]	@ 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800504e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005050:	425b      	negs	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	da00      	bge.n	8005058 <calibrateMPU6050+0x414>
 8005056:	3303      	adds	r3, #3
 8005058:	109b      	asrs	r3, r3, #2
 800505a:	121b      	asrs	r3, r3, #8
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8005062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005064:	425b      	negs	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	da00      	bge.n	800506c <calibrateMPU6050+0x428>
 800506a:	3303      	adds	r3, #3
 800506c:	109b      	asrs	r3, r3, #2
 800506e:	b2db      	uxtb	r3, r3
 8005070:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8005074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005076:	425b      	negs	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	da00      	bge.n	800507e <calibrateMPU6050+0x43a>
 800507c:	3303      	adds	r3, #3
 800507e:	109b      	asrs	r3, r3, #2
 8005080:	121b      	asrs	r3, r3, #8
 8005082:	b2db      	uxtb	r3, r3
 8005084:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 8005088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800508a:	425b      	negs	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	da00      	bge.n	8005092 <calibrateMPU6050+0x44e>
 8005090:	3303      	adds	r3, #3
 8005092:	109b      	asrs	r3, r3, #2
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 800509a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800509c:	425b      	negs	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	da00      	bge.n	80050a4 <calibrateMPU6050+0x460>
 80050a2:	3303      	adds	r3, #3
 80050a4:	109b      	asrs	r3, r3, #2
 80050a6:	121b      	asrs	r3, r3, #8
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 80050ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050b0:	425b      	negs	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	da00      	bge.n	80050b8 <calibrateMPU6050+0x474>
 80050b6:	3303      	adds	r3, #3
 80050b8:	109b      	asrs	r3, r3, #2
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 80050c0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80050c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80050c8:	2364      	movs	r3, #100	@ 0x64
 80050ca:	9302      	str	r3, [sp, #8]
 80050cc:	2301      	movs	r3, #1
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	2301      	movs	r3, #1
 80050d8:	2213      	movs	r2, #19
 80050da:	21d0      	movs	r1, #208	@ 0xd0
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f002 fe59 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 80050e2:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80050e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80050ea:	2364      	movs	r3, #100	@ 0x64
 80050ec:	9302      	str	r3, [sp, #8]
 80050ee:	2301      	movs	r3, #1
 80050f0:	9301      	str	r3, [sp, #4]
 80050f2:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	2301      	movs	r3, #1
 80050fa:	2214      	movs	r2, #20
 80050fc:	21d0      	movs	r1, #208	@ 0xd0
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f002 fe48 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8005104:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8005108:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800510c:	2364      	movs	r3, #100	@ 0x64
 800510e:	9302      	str	r3, [sp, #8]
 8005110:	2301      	movs	r3, #1
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	2301      	movs	r3, #1
 800511c:	2215      	movs	r2, #21
 800511e:	21d0      	movs	r1, #208	@ 0xd0
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f002 fe37 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8005126:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800512a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800512e:	2364      	movs	r3, #100	@ 0x64
 8005130:	9302      	str	r3, [sp, #8]
 8005132:	2301      	movs	r3, #1
 8005134:	9301      	str	r3, [sp, #4]
 8005136:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	2301      	movs	r3, #1
 800513e:	2216      	movs	r2, #22
 8005140:	21d0      	movs	r1, #208	@ 0xd0
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f002 fe26 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8005148:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800514c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8005150:	2364      	movs	r3, #100	@ 0x64
 8005152:	9302      	str	r3, [sp, #8]
 8005154:	2301      	movs	r3, #1
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	2301      	movs	r3, #1
 8005160:	2217      	movs	r2, #23
 8005162:	21d0      	movs	r1, #208	@ 0xd0
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f002 fe15 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 800516a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800516e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8005172:	2364      	movs	r3, #100	@ 0x64
 8005174:	9302      	str	r3, [sp, #8]
 8005176:	2301      	movs	r3, #1
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	2301      	movs	r3, #1
 8005182:	2218      	movs	r2, #24
 8005184:	21d0      	movs	r1, #208	@ 0xd0
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f002 fe04 	bl	8007d94 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 800518c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005196:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 80051ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80051b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3304      	adds	r3, #4
 80051c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ca:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80051ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051d0:	ee07 3a90 	vmov	s15, r3
 80051d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80051d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80051dc:	ee07 3a90 	vmov	s15, r3
 80051e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3308      	adds	r3, #8
 80051e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ec:	edc3 7a00 	vstr	s15, [r3]

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 80051f0:	2300      	movs	r3, #0
 80051f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f4:	2300      	movs	r3, #0
 80051f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051f8:	2300      	movs	r3, #0
 80051fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 80051fc:	2364      	movs	r3, #100	@ 0x64
 80051fe:	9302      	str	r3, [sp, #8]
 8005200:	2302      	movs	r3, #2
 8005202:	9301      	str	r3, [sp, #4]
 8005204:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	2301      	movs	r3, #1
 800520c:	2277      	movs	r2, #119	@ 0x77
 800520e:	21d0      	movs	r1, #208	@ 0xd0
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f002 feb9 	bl	8007f88 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8005216:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8005220:	4313      	orrs	r3, r2
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8005224:	2364      	movs	r3, #100	@ 0x64
 8005226:	9302      	str	r3, [sp, #8]
 8005228:	2302      	movs	r3, #2
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	2301      	movs	r3, #1
 8005234:	227a      	movs	r2, #122	@ 0x7a
 8005236:	21d0      	movs	r1, #208	@ 0xd0
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f002 fea5 	bl	8007f88 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 800523e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8005248:	4313      	orrs	r3, r2
 800524a:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 800524c:	2364      	movs	r3, #100	@ 0x64
 800524e:	9302      	str	r3, [sp, #8]
 8005250:	2302      	movs	r3, #2
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	2301      	movs	r3, #1
 800525c:	227d      	movs	r2, #125	@ 0x7d
 800525e:	21d0      	movs	r1, #208	@ 0xd0
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f002 fe91 	bl	8007f88 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8005266:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8005270:	4313      	orrs	r3, r2
 8005272:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 8005274:	2301      	movs	r3, #1
 8005276:	65bb      	str	r3, [r7, #88]	@ 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 8005278:	f107 0320 	add.w	r3, r7, #32
 800527c:	2100      	movs	r1, #0
 800527e:	460a      	mov	r2, r1
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	460a      	mov	r2, r1
 8005284:	709a      	strb	r2, [r3, #2]

	for(ii = 0; ii < 3; ii++) {
 8005286:	2300      	movs	r3, #0
 8005288:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800528c:	e017      	b.n	80052be <calibrateMPU6050+0x67a>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 800528e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	3368      	adds	r3, #104	@ 0x68
 8005296:	443b      	add	r3, r7
 8005298:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800529c:	461a      	mov	r2, r3
 800529e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d006      	beq.n	80052b4 <calibrateMPU6050+0x670>
 80052a6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80052aa:	3368      	adds	r3, #104	@ 0x68
 80052ac:	443b      	add	r3, r7
 80052ae:	2201      	movs	r2, #1
 80052b0:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 80052b4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80052b8:	3301      	adds	r3, #1
 80052ba:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80052be:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d9e3      	bls.n	800528e <calibrateMPU6050+0x64a>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80052c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	da00      	bge.n	80052d0 <calibrateMPU6050+0x68c>
 80052ce:	3307      	adds	r3, #7
 80052d0:	10db      	asrs	r3, r3, #3
 80052d2:	425b      	negs	r3, r3
 80052d4:	4413      	add	r3, r2
 80052d6:	627b      	str	r3, [r7, #36]	@ 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 80052d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052dc:	2b00      	cmp	r3, #0
 80052de:	da00      	bge.n	80052e2 <calibrateMPU6050+0x69e>
 80052e0:	3307      	adds	r3, #7
 80052e2:	10db      	asrs	r3, r3, #3
 80052e4:	425b      	negs	r3, r3
 80052e6:	4413      	add	r3, r2
 80052e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 80052ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	da00      	bge.n	80052f4 <calibrateMPU6050+0x6b0>
 80052f2:	3307      	adds	r3, #7
 80052f4:	10db      	asrs	r3, r3, #3
 80052f6:	425b      	negs	r3, r3
 80052f8:	4413      	add	r3, r2
 80052fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	121b      	asrs	r3, r3, #8
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	b2db      	uxtb	r3, r3
 800530a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800530e:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8005312:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005316:	4313      	orrs	r3, r2
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800531e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005320:	121b      	asrs	r3, r3, #8
 8005322:	b2db      	uxtb	r3, r3
 8005324:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 8005328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8005330:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8005334:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005338:	4313      	orrs	r3, r2
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8005340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005342:	121b      	asrs	r3, r3, #8
 8005344:	b2db      	uxtb	r3, r3
 8005346:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 800534a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534c:	b2db      	uxtb	r3, r3
 800534e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8005352:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005356:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800535a:	4313      	orrs	r3, r2
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 8005362:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8005366:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800536a:	2364      	movs	r3, #100	@ 0x64
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	2301      	movs	r3, #1
 8005370:	9301      	str	r3, [sp, #4]
 8005372:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	2301      	movs	r3, #1
 800537a:	2277      	movs	r2, #119	@ 0x77
 800537c:	21d0      	movs	r1, #208	@ 0xd0
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f002 fd08 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8005384:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8005388:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800538c:	2364      	movs	r3, #100	@ 0x64
 800538e:	9302      	str	r3, [sp, #8]
 8005390:	2301      	movs	r3, #1
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	2301      	movs	r3, #1
 800539c:	2278      	movs	r2, #120	@ 0x78
 800539e:	21d0      	movs	r1, #208	@ 0xd0
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f002 fcf7 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 80053a6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80053aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80053ae:	2364      	movs	r3, #100	@ 0x64
 80053b0:	9302      	str	r3, [sp, #8]
 80053b2:	2301      	movs	r3, #1
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	2301      	movs	r3, #1
 80053be:	227a      	movs	r2, #122	@ 0x7a
 80053c0:	21d0      	movs	r1, #208	@ 0xd0
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f002 fce6 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 80053c8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80053cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80053d0:	2364      	movs	r3, #100	@ 0x64
 80053d2:	9302      	str	r3, [sp, #8]
 80053d4:	2301      	movs	r3, #1
 80053d6:	9301      	str	r3, [sp, #4]
 80053d8:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	2301      	movs	r3, #1
 80053e0:	227b      	movs	r2, #123	@ 0x7b
 80053e2:	21d0      	movs	r1, #208	@ 0xd0
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f002 fcd5 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 80053ea:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80053ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80053f2:	2364      	movs	r3, #100	@ 0x64
 80053f4:	9302      	str	r3, [sp, #8]
 80053f6:	2301      	movs	r3, #1
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	2301      	movs	r3, #1
 8005402:	227d      	movs	r2, #125	@ 0x7d
 8005404:	21d0      	movs	r1, #208	@ 0xd0
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f002 fcc4 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 800540c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005410:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8005414:	2364      	movs	r3, #100	@ 0x64
 8005416:	9302      	str	r3, [sp, #8]
 8005418:	2301      	movs	r3, #1
 800541a:	9301      	str	r3, [sp, #4]
 800541c:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	2301      	movs	r3, #1
 8005424:	227e      	movs	r2, #126	@ 0x7e
 8005426:	21d0      	movs	r1, #208	@ 0xd0
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f002 fcb3 	bl	8007d94 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	ee07 3a90 	vmov	s15, r3
 8005434:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005438:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800543c:	ee07 3a90 	vmov	s15, r3
 8005440:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 800544e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005458:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800545c:	ee07 3a90 	vmov	s15, r3
 8005460:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	3304      	adds	r3, #4
 8005468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800546c:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 8005470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800547a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	3308      	adds	r3, #8
 800548a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800548e:	edc3 7a00 	vstr	s15, [r3]
	
	DataStruct->CALIBRATIN_OK_u8 = TRUE;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2201      	movs	r2, #1
 8005496:	761a      	strb	r2, [r3, #24]
}
 8005498:	bf00      	nop
 800549a:	3768      	adds	r7, #104	@ 0x68
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <MPU6050SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU6050SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 80054a0:	b5b0      	push	{r4, r5, r7, lr}
 80054a2:	b0a2      	sub	sp, #136	@ 0x88
 80054a4:	af04      	add	r7, sp, #16
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 80054aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	809a      	strh	r2, [r3, #4]
	uint8_t SelfTest_MPU6050[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80054b4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	605a      	str	r2, [r3, #4]
 80054be:	609a      	str	r2, [r3, #8]
 80054c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	605a      	str	r2, [r3, #4]
 80054d6:	609a      	str	r2, [r3, #8]
 80054d8:	f107 0320 	add.w	r3, r7, #32
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	writeData = 0x00;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 80054f0:	2364      	movs	r3, #100	@ 0x64
 80054f2:	9302      	str	r3, [sp, #8]
 80054f4:	2301      	movs	r3, #1
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	2301      	movs	r3, #1
 8005500:	2219      	movs	r2, #25
 8005502:	21d0      	movs	r1, #208	@ 0xd0
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f002 fc45 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 800550a:	2302      	movs	r3, #2
 800550c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8005510:	2364      	movs	r3, #100	@ 0x64
 8005512:	9302      	str	r3, [sp, #8]
 8005514:	2301      	movs	r3, #1
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	2301      	movs	r3, #1
 8005520:	221a      	movs	r2, #26
 8005522:	21d0      	movs	r1, #208	@ 0xd0
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f002 fc35 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 800552a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 8005536:	2364      	movs	r3, #100	@ 0x64
 8005538:	9302      	str	r3, [sp, #8]
 800553a:	2301      	movs	r3, #1
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	2301      	movs	r3, #1
 8005546:	221b      	movs	r2, #27
 8005548:	21d0      	movs	r1, #208	@ 0xd0
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f002 fc22 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8005550:	2302      	movs	r3, #2
 8005552:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8005556:	2364      	movs	r3, #100	@ 0x64
 8005558:	9302      	str	r3, [sp, #8]
 800555a:	2301      	movs	r3, #1
 800555c:	9301      	str	r3, [sp, #4]
 800555e:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	2301      	movs	r3, #1
 8005566:	221d      	movs	r2, #29
 8005568:	21d0      	movs	r1, #208	@ 0xd0
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f002 fc12 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8005570:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	b2db      	uxtb	r3, r3
 8005578:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 800557c:	2364      	movs	r3, #100	@ 0x64
 800557e:	9302      	str	r3, [sp, #8]
 8005580:	2301      	movs	r3, #1
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	2301      	movs	r3, #1
 800558c:	221c      	movs	r2, #28
 800558e:	21d0      	movs	r1, #208	@ 0xd0
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f002 fbff 	bl	8007d94 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8005596:	2300      	movs	r3, #0
 8005598:	677b      	str	r3, [r7, #116]	@ 0x74
 800559a:	e06a      	b.n	8005672 <MPU6050SelfTest+0x1d2>

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 800559c:	2364      	movs	r3, #100	@ 0x64
 800559e:	9302      	str	r3, [sp, #8]
 80055a0:	2306      	movs	r3, #6
 80055a2:	9301      	str	r3, [sp, #4]
 80055a4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	2301      	movs	r3, #1
 80055ac:	223b      	movs	r2, #59	@ 0x3b
 80055ae:	21d0      	movs	r1, #208	@ 0xd0
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f002 fce9 	bl	8007f88 <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 80055bc:	b212      	sxth	r2, r2
 80055be:	0212      	lsls	r2, r2, #8
 80055c0:	b211      	sxth	r1, r2
 80055c2:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 80055c6:	b212      	sxth	r2, r2
 80055c8:	430a      	orrs	r2, r1
 80055ca:	b212      	sxth	r2, r2
 80055cc:	4413      	add	r3, r2
 80055ce:	63bb      	str	r3, [r7, #56]	@ 0x38
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80055d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055d2:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 80055d6:	b212      	sxth	r2, r2
 80055d8:	0212      	lsls	r2, r2, #8
 80055da:	b211      	sxth	r1, r2
 80055dc:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80055e0:	b212      	sxth	r2, r2
 80055e2:	430a      	orrs	r2, r1
 80055e4:	b212      	sxth	r2, r2
 80055e6:	4413      	add	r3, r2
 80055e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80055ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ec:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80055f0:	b212      	sxth	r2, r2
 80055f2:	0212      	lsls	r2, r2, #8
 80055f4:	b211      	sxth	r1, r2
 80055f6:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 80055fa:	b212      	sxth	r2, r2
 80055fc:	430a      	orrs	r2, r1
 80055fe:	b212      	sxth	r2, r2
 8005600:	4413      	add	r3, r2
 8005602:	643b      	str	r3, [r7, #64]	@ 0x40

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 8005604:	2364      	movs	r3, #100	@ 0x64
 8005606:	9302      	str	r3, [sp, #8]
 8005608:	2306      	movs	r3, #6
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	2301      	movs	r3, #1
 8005614:	2243      	movs	r2, #67	@ 0x43
 8005616:	21d0      	movs	r1, #208	@ 0xd0
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f002 fcb5 	bl	8007f88 <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800561e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005620:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8005624:	b212      	sxth	r2, r2
 8005626:	0212      	lsls	r2, r2, #8
 8005628:	b211      	sxth	r1, r2
 800562a:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 800562e:	b212      	sxth	r2, r2
 8005630:	430a      	orrs	r2, r1
 8005632:	b212      	sxth	r2, r2
 8005634:	4413      	add	r3, r2
 8005636:	647b      	str	r3, [r7, #68]	@ 0x44
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8005638:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800563a:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800563e:	b212      	sxth	r2, r2
 8005640:	0212      	lsls	r2, r2, #8
 8005642:	b211      	sxth	r1, r2
 8005644:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005648:	b212      	sxth	r2, r2
 800564a:	430a      	orrs	r2, r1
 800564c:	b212      	sxth	r2, r2
 800564e:	4413      	add	r3, r2
 8005650:	64bb      	str	r3, [r7, #72]	@ 0x48
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8005652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005654:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8005658:	b212      	sxth	r2, r2
 800565a:	0212      	lsls	r2, r2, #8
 800565c:	b211      	sxth	r1, r2
 800565e:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8005662:	b212      	sxth	r2, r2
 8005664:	430a      	orrs	r2, r1
 8005666:	b212      	sxth	r2, r2
 8005668:	4413      	add	r3, r2
 800566a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for( int ii = 0; ii < 200; ii++) {
 800566c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800566e:	3301      	adds	r3, #1
 8005670:	677b      	str	r3, [r7, #116]	@ 0x74
 8005672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005674:	2bc7      	cmp	r3, #199	@ 0xc7
 8005676:	dd91      	ble.n	800559c <MPU6050SelfTest+0xfc>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 8005678:	2300      	movs	r3, #0
 800567a:	673b      	str	r3, [r7, #112]	@ 0x70
 800567c:	e026      	b.n	80056cc <MPU6050SelfTest+0x22c>
		aAvg[ii] /= 200;
 800567e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	3378      	adds	r3, #120	@ 0x78
 8005684:	443b      	add	r3, r7
 8005686:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800568a:	4a5d      	ldr	r2, [pc, #372]	@ (8005800 <MPU6050SelfTest+0x360>)
 800568c:	fb82 1203 	smull	r1, r2, r2, r3
 8005690:	1192      	asrs	r2, r2, #6
 8005692:	17db      	asrs	r3, r3, #31
 8005694:	1ad2      	subs	r2, r2, r3
 8005696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	3378      	adds	r3, #120	@ 0x78
 800569c:	443b      	add	r3, r7
 800569e:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 80056a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	3378      	adds	r3, #120	@ 0x78
 80056a8:	443b      	add	r3, r7
 80056aa:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80056ae:	4a54      	ldr	r2, [pc, #336]	@ (8005800 <MPU6050SelfTest+0x360>)
 80056b0:	fb82 1203 	smull	r1, r2, r2, r3
 80056b4:	1192      	asrs	r2, r2, #6
 80056b6:	17db      	asrs	r3, r3, #31
 80056b8:	1ad2      	subs	r2, r2, r3
 80056ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	3378      	adds	r3, #120	@ 0x78
 80056c0:	443b      	add	r3, r7
 80056c2:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 80056c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056c8:	3301      	adds	r3, #1
 80056ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80056cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	ddd5      	ble.n	800567e <MPU6050SelfTest+0x1de>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 80056d2:	23e0      	movs	r3, #224	@ 0xe0
 80056d4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 80056d8:	2364      	movs	r3, #100	@ 0x64
 80056da:	9302      	str	r3, [sp, #8]
 80056dc:	2301      	movs	r3, #1
 80056de:	9301      	str	r3, [sp, #4]
 80056e0:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	2301      	movs	r3, #1
 80056e8:	221c      	movs	r2, #28
 80056ea:	21d0      	movs	r1, #208	@ 0xd0
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f002 fb51 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 80056f2:	23e0      	movs	r3, #224	@ 0xe0
 80056f4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80056f8:	2364      	movs	r3, #100	@ 0x64
 80056fa:	9302      	str	r3, [sp, #8]
 80056fc:	2301      	movs	r3, #1
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	2301      	movs	r3, #1
 8005708:	221b      	movs	r2, #27
 800570a:	21d0      	movs	r1, #208	@ 0xd0
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f002 fb41 	bl	8007d94 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8005712:	2019      	movs	r0, #25
 8005714:	f001 fc6c 	bl	8006ff0 <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8005718:	2300      	movs	r3, #0
 800571a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800571c:	e06a      	b.n	80057f4 <MPU6050SelfTest+0x354>

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 800571e:	2364      	movs	r3, #100	@ 0x64
 8005720:	9302      	str	r3, [sp, #8]
 8005722:	2306      	movs	r3, #6
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	2301      	movs	r3, #1
 800572e:	223b      	movs	r2, #59	@ 0x3b
 8005730:	21d0      	movs	r1, #208	@ 0xd0
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f002 fc28 	bl	8007f88 <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8005738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573a:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800573e:	b212      	sxth	r2, r2
 8005740:	0212      	lsls	r2, r2, #8
 8005742:	b211      	sxth	r1, r2
 8005744:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8005748:	b212      	sxth	r2, r2
 800574a:	430a      	orrs	r2, r1
 800574c:	b212      	sxth	r2, r2
 800574e:	4413      	add	r3, r2
 8005750:	62fb      	str	r3, [r7, #44]	@ 0x2c
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8005752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005754:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8005758:	b212      	sxth	r2, r2
 800575a:	0212      	lsls	r2, r2, #8
 800575c:	b211      	sxth	r1, r2
 800575e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005762:	b212      	sxth	r2, r2
 8005764:	430a      	orrs	r2, r1
 8005766:	b212      	sxth	r2, r2
 8005768:	4413      	add	r3, r2
 800576a:	633b      	str	r3, [r7, #48]	@ 0x30
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 800576c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576e:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8005772:	b212      	sxth	r2, r2
 8005774:	0212      	lsls	r2, r2, #8
 8005776:	b211      	sxth	r1, r2
 8005778:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800577c:	b212      	sxth	r2, r2
 800577e:	430a      	orrs	r2, r1
 8005780:	b212      	sxth	r2, r2
 8005782:	4413      	add	r3, r2
 8005784:	637b      	str	r3, [r7, #52]	@ 0x34

		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 8005786:	2364      	movs	r3, #100	@ 0x64
 8005788:	9302      	str	r3, [sp, #8]
 800578a:	2306      	movs	r3, #6
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	2301      	movs	r3, #1
 8005796:	2243      	movs	r2, #67	@ 0x43
 8005798:	21d0      	movs	r1, #208	@ 0xd0
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f002 fbf4 	bl	8007f88 <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 80057a6:	b212      	sxth	r2, r2
 80057a8:	0212      	lsls	r2, r2, #8
 80057aa:	b211      	sxth	r1, r2
 80057ac:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 80057b0:	b212      	sxth	r2, r2
 80057b2:	430a      	orrs	r2, r1
 80057b4:	b212      	sxth	r2, r2
 80057b6:	4413      	add	r3, r2
 80057b8:	623b      	str	r3, [r7, #32]
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 80057c0:	b212      	sxth	r2, r2
 80057c2:	0212      	lsls	r2, r2, #8
 80057c4:	b211      	sxth	r1, r2
 80057c6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80057ca:	b212      	sxth	r2, r2
 80057cc:	430a      	orrs	r2, r1
 80057ce:	b212      	sxth	r2, r2
 80057d0:	4413      	add	r3, r2
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80057d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d6:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80057da:	b212      	sxth	r2, r2
 80057dc:	0212      	lsls	r2, r2, #8
 80057de:	b211      	sxth	r1, r2
 80057e0:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 80057e4:	b212      	sxth	r2, r2
 80057e6:	430a      	orrs	r2, r1
 80057e8:	b212      	sxth	r2, r2
 80057ea:	4413      	add	r3, r2
 80057ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	for( int ii = 0; ii < 200; ii++) {
 80057ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057f0:	3301      	adds	r3, #1
 80057f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80057f8:	dd91      	ble.n	800571e <MPU6050SelfTest+0x27e>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 80057fa:	2300      	movs	r3, #0
 80057fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057fe:	e028      	b.n	8005852 <MPU6050SelfTest+0x3b2>
 8005800:	51eb851f 	.word	0x51eb851f
		aSTAvg[ii] /= 200;
 8005804:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	3378      	adds	r3, #120	@ 0x78
 800580a:	443b      	add	r3, r7
 800580c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005810:	4ae1      	ldr	r2, [pc, #900]	@ (8005b98 <MPU6050SelfTest+0x6f8>)
 8005812:	fb82 1203 	smull	r1, r2, r2, r3
 8005816:	1192      	asrs	r2, r2, #6
 8005818:	17db      	asrs	r3, r3, #31
 800581a:	1ad2      	subs	r2, r2, r3
 800581c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	3378      	adds	r3, #120	@ 0x78
 8005822:	443b      	add	r3, r7
 8005824:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 8005828:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	3378      	adds	r3, #120	@ 0x78
 800582e:	443b      	add	r3, r7
 8005830:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8005834:	4ad8      	ldr	r2, [pc, #864]	@ (8005b98 <MPU6050SelfTest+0x6f8>)
 8005836:	fb82 1203 	smull	r1, r2, r2, r3
 800583a:	1192      	asrs	r2, r2, #6
 800583c:	17db      	asrs	r3, r3, #31
 800583e:	1ad2      	subs	r2, r2, r3
 8005840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	3378      	adds	r3, #120	@ 0x78
 8005846:	443b      	add	r3, r7
 8005848:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 800584c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800584e:	3301      	adds	r3, #1
 8005850:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005852:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005854:	2b02      	cmp	r3, #2
 8005856:	ddd5      	ble.n	8005804 <MPU6050SelfTest+0x364>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 8005858:	2300      	movs	r3, #0
 800585a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 800585e:	2364      	movs	r3, #100	@ 0x64
 8005860:	9302      	str	r3, [sp, #8]
 8005862:	2301      	movs	r3, #1
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	2301      	movs	r3, #1
 800586e:	221c      	movs	r2, #28
 8005870:	21d0      	movs	r1, #208	@ 0xd0
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f002 fa8e 	bl	8007d94 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8005878:	2300      	movs	r3, #0
 800587a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 800587e:	2364      	movs	r3, #100	@ 0x64
 8005880:	9302      	str	r3, [sp, #8]
 8005882:	2301      	movs	r3, #1
 8005884:	9301      	str	r3, [sp, #4]
 8005886:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	2301      	movs	r3, #1
 800588e:	221b      	movs	r2, #27
 8005890:	21d0      	movs	r1, #208	@ 0xd0
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f002 fa7e 	bl	8007d94 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8005898:	2019      	movs	r0, #25
 800589a:	f001 fba9 	bl	8006ff0 <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_X_ACCEL, 1, &SelfTest_MPU6050[0], 1, i2c_timeout);// X-axis accel self-test results
 800589e:	2364      	movs	r3, #100	@ 0x64
 80058a0:	9302      	str	r3, [sp, #8]
 80058a2:	2301      	movs	r3, #1
 80058a4:	9301      	str	r3, [sp, #4]
 80058a6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	2301      	movs	r3, #1
 80058ae:	220d      	movs	r2, #13
 80058b0:	21d0      	movs	r1, #208	@ 0xd0
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f002 fb68 	bl	8007f88 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Y_ACCEL, 1, &SelfTest_MPU6050[1], 1, i2c_timeout);// Y-axis accel self-test results
 80058b8:	2364      	movs	r3, #100	@ 0x64
 80058ba:	9302      	str	r3, [sp, #8]
 80058bc:	2301      	movs	r3, #1
 80058be:	9301      	str	r3, [sp, #4]
 80058c0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80058c4:	3301      	adds	r3, #1
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	2301      	movs	r3, #1
 80058ca:	220e      	movs	r2, #14
 80058cc:	21d0      	movs	r1, #208	@ 0xd0
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f002 fb5a 	bl	8007f88 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Z_ACCEL, 1, &SelfTest_MPU6050[2], 1, i2c_timeout);// Z-axis accel self-test results
 80058d4:	2364      	movs	r3, #100	@ 0x64
 80058d6:	9302      	str	r3, [sp, #8]
 80058d8:	2301      	movs	r3, #1
 80058da:	9301      	str	r3, [sp, #4]
 80058dc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80058e0:	3302      	adds	r3, #2
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	2301      	movs	r3, #1
 80058e6:	220f      	movs	r2, #15
 80058e8:	21d0      	movs	r1, #208	@ 0xd0
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f002 fb4c 	bl	8007f88 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_X_GYRO, 1, &SelfTest_MPU6050[3], 1, i2c_timeout);// X-axis gyro self-test results
 80058f0:	2364      	movs	r3, #100	@ 0x64
 80058f2:	9302      	str	r3, [sp, #8]
 80058f4:	2301      	movs	r3, #1
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80058fc:	3303      	adds	r3, #3
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	2301      	movs	r3, #1
 8005902:	2200      	movs	r2, #0
 8005904:	21d0      	movs	r1, #208	@ 0xd0
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f002 fb3e 	bl	8007f88 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Y_GYRO, 1, &SelfTest_MPU6050[4], 1, i2c_timeout);// Y-axis gyro self-test results
 800590c:	2364      	movs	r3, #100	@ 0x64
 800590e:	9302      	str	r3, [sp, #8]
 8005910:	2301      	movs	r3, #1
 8005912:	9301      	str	r3, [sp, #4]
 8005914:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005918:	3304      	adds	r3, #4
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	2301      	movs	r3, #1
 800591e:	2201      	movs	r2, #1
 8005920:	21d0      	movs	r1, #208	@ 0xd0
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f002 fb30 	bl	8007f88 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDRESS, SELF_TEST_Z_GYRO, 1, &SelfTest_MPU6050[5], 1, i2c_timeout);// Z-axis gyro self-test results
 8005928:	2364      	movs	r3, #100	@ 0x64
 800592a:	9302      	str	r3, [sp, #8]
 800592c:	2301      	movs	r3, #1
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005934:	3305      	adds	r3, #5
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	2301      	movs	r3, #1
 800593a:	2202      	movs	r2, #2
 800593c:	21d0      	movs	r1, #208	@ 0xd0
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f002 fb22 	bl	8007f88 <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[0] - 1.0) )); // FT[Xa] factory trim calculation
 8005944:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005948:	f640 223c 	movw	r2, #2620	@ 0xa3c
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	ee07 3a90 	vmov	s15, r3
 8005954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005958:	ee17 0a90 	vmov	r0, s15
 800595c:	f7fa fdfc 	bl	8000558 <__aeabi_f2d>
 8005960:	4604      	mov	r4, r0
 8005962:	460d      	mov	r5, r1
 8005964:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005970:	ee17 0a90 	vmov	r0, s15
 8005974:	f7fa fdf0 	bl	8000558 <__aeabi_f2d>
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	4b87      	ldr	r3, [pc, #540]	@ (8005b9c <MPU6050SelfTest+0x6fc>)
 800597e:	f7fa fc8b 	bl	8000298 <__aeabi_dsub>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	ec43 2b17 	vmov	d7, r2, r3
 800598a:	eeb0 1a47 	vmov.f32	s2, s14
 800598e:	eef0 1a67 	vmov.f32	s3, s15
 8005992:	ed9f 0b7f 	vldr	d0, [pc, #508]	@ 8005b90 <MPU6050SelfTest+0x6f0>
 8005996:	f009 fc5f 	bl	800f258 <pow>
 800599a:	ec53 2b10 	vmov	r2, r3, d0
 800599e:	4620      	mov	r0, r4
 80059a0:	4629      	mov	r1, r5
 80059a2:	f7fa fe31 	bl	8000608 <__aeabi_dmul>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4610      	mov	r0, r2
 80059ac:	4619      	mov	r1, r3
 80059ae:	f7fb f923 	bl	8000bf8 <__aeabi_d2f>
 80059b2:	4603      	mov	r3, r0
 80059b4:	60bb      	str	r3, [r7, #8]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[1] - 1.0) )); // FT[Ya] factory trim calculation
 80059b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80059ba:	f640 223c 	movw	r2, #2620	@ 0xa3c
 80059be:	fa02 f303 	lsl.w	r3, r2, r3
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ca:	ee17 0a90 	vmov	r0, s15
 80059ce:	f7fa fdc3 	bl	8000558 <__aeabi_f2d>
 80059d2:	4604      	mov	r4, r0
 80059d4:	460d      	mov	r5, r1
 80059d6:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	ee17 0a90 	vmov	r0, s15
 80059e6:	f7fa fdb7 	bl	8000558 <__aeabi_f2d>
 80059ea:	f04f 0200 	mov.w	r2, #0
 80059ee:	4b6b      	ldr	r3, [pc, #428]	@ (8005b9c <MPU6050SelfTest+0x6fc>)
 80059f0:	f7fa fc52 	bl	8000298 <__aeabi_dsub>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	ec43 2b17 	vmov	d7, r2, r3
 80059fc:	eeb0 1a47 	vmov.f32	s2, s14
 8005a00:	eef0 1a67 	vmov.f32	s3, s15
 8005a04:	ed9f 0b62 	vldr	d0, [pc, #392]	@ 8005b90 <MPU6050SelfTest+0x6f0>
 8005a08:	f009 fc26 	bl	800f258 <pow>
 8005a0c:	ec53 2b10 	vmov	r2, r3, d0
 8005a10:	4620      	mov	r0, r4
 8005a12:	4629      	mov	r1, r5
 8005a14:	f7fa fdf8 	bl	8000608 <__aeabi_dmul>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4619      	mov	r1, r3
 8005a20:	f7fb f8ea 	bl	8000bf8 <__aeabi_d2f>
 8005a24:	4603      	mov	r3, r0
 8005a26:	60fb      	str	r3, [r7, #12]
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[2] - 1.0) )); // FT[Za] factory trim calculation
 8005a28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a2c:	f640 223c 	movw	r2, #2620	@ 0xa3c
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	ee07 3a90 	vmov	s15, r3
 8005a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a3c:	ee17 0a90 	vmov	r0, s15
 8005a40:	f7fa fd8a 	bl	8000558 <__aeabi_f2d>
 8005a44:	4604      	mov	r4, r0
 8005a46:	460d      	mov	r5, r1
 8005a48:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005a4c:	ee07 3a90 	vmov	s15, r3
 8005a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a54:	ee17 0a90 	vmov	r0, s15
 8005a58:	f7fa fd7e 	bl	8000558 <__aeabi_f2d>
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	4b4e      	ldr	r3, [pc, #312]	@ (8005b9c <MPU6050SelfTest+0x6fc>)
 8005a62:	f7fa fc19 	bl	8000298 <__aeabi_dsub>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	ec43 2b17 	vmov	d7, r2, r3
 8005a6e:	eeb0 1a47 	vmov.f32	s2, s14
 8005a72:	eef0 1a67 	vmov.f32	s3, s15
 8005a76:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005b90 <MPU6050SelfTest+0x6f0>
 8005a7a:	f009 fbed 	bl	800f258 <pow>
 8005a7e:	ec53 2b10 	vmov	r2, r3, d0
 8005a82:	4620      	mov	r0, r4
 8005a84:	4629      	mov	r1, r5
 8005a86:	f7fa fdbf 	bl	8000608 <__aeabi_dmul>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4610      	mov	r0, r2
 8005a90:	4619      	mov	r1, r3
 8005a92:	f7fb f8b1 	bl	8000bf8 <__aeabi_d2f>
 8005a96:	4603      	mov	r3, r0
 8005a98:	613b      	str	r3, [r7, #16]
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[3] - 1.0) )); // FT[Xg] factory trim calculation
 8005a9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a9e:	f640 223c 	movw	r2, #2620	@ 0xa3c
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aae:	ee17 0a90 	vmov	r0, s15
 8005ab2:	f7fa fd51 	bl	8000558 <__aeabi_f2d>
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	460d      	mov	r5, r1
 8005aba:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	ee17 0a90 	vmov	r0, s15
 8005aca:	f7fa fd45 	bl	8000558 <__aeabi_f2d>
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	4b32      	ldr	r3, [pc, #200]	@ (8005b9c <MPU6050SelfTest+0x6fc>)
 8005ad4:	f7fa fbe0 	bl	8000298 <__aeabi_dsub>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	ec43 2b17 	vmov	d7, r2, r3
 8005ae0:	eeb0 1a47 	vmov.f32	s2, s14
 8005ae4:	eef0 1a67 	vmov.f32	s3, s15
 8005ae8:	ed9f 0b29 	vldr	d0, [pc, #164]	@ 8005b90 <MPU6050SelfTest+0x6f0>
 8005aec:	f009 fbb4 	bl	800f258 <pow>
 8005af0:	ec53 2b10 	vmov	r2, r3, d0
 8005af4:	4620      	mov	r0, r4
 8005af6:	4629      	mov	r1, r5
 8005af8:	f7fa fd86 	bl	8000608 <__aeabi_dmul>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4610      	mov	r0, r2
 8005b02:	4619      	mov	r1, r3
 8005b04:	f7fb f878 	bl	8000bf8 <__aeabi_d2f>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	617b      	str	r3, [r7, #20]
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[4] - 1.0) )); // FT[Yg] factory trim calculation
 8005b0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b10:	f640 223c 	movw	r2, #2620	@ 0xa3c
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b20:	ee17 0a90 	vmov	r0, s15
 8005b24:	f7fa fd18 	bl	8000558 <__aeabi_f2d>
 8005b28:	4604      	mov	r4, r0
 8005b2a:	460d      	mov	r5, r1
 8005b2c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8005b30:	ee07 3a90 	vmov	s15, r3
 8005b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b38:	ee17 0a90 	vmov	r0, s15
 8005b3c:	f7fa fd0c 	bl	8000558 <__aeabi_f2d>
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	4b15      	ldr	r3, [pc, #84]	@ (8005b9c <MPU6050SelfTest+0x6fc>)
 8005b46:	f7fa fba7 	bl	8000298 <__aeabi_dsub>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	ec43 2b17 	vmov	d7, r2, r3
 8005b52:	eeb0 1a47 	vmov.f32	s2, s14
 8005b56:	eef0 1a67 	vmov.f32	s3, s15
 8005b5a:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8005b90 <MPU6050SelfTest+0x6f0>
 8005b5e:	f009 fb7b 	bl	800f258 <pow>
 8005b62:	ec53 2b10 	vmov	r2, r3, d0
 8005b66:	4620      	mov	r0, r4
 8005b68:	4629      	mov	r1, r5
 8005b6a:	f7fa fd4d 	bl	8000608 <__aeabi_dmul>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4610      	mov	r0, r2
 8005b74:	4619      	mov	r1, r3
 8005b76:	f7fb f83f 	bl	8000bf8 <__aeabi_d2f>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	61bb      	str	r3, [r7, #24]
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)SelfTest_MPU6050[5] - 1.0) )); // FT[Zg] factory trim calculation
 8005b7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b82:	f640 223c 	movw	r2, #2620	@ 0xa3c
 8005b86:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8a:	e009      	b.n	8005ba0 <MPU6050SelfTest+0x700>
 8005b8c:	f3af 8000 	nop.w
 8005b90:	c28f5c29 	.word	0xc28f5c29
 8005b94:	3ff028f5 	.word	0x3ff028f5
 8005b98:	51eb851f 	.word	0x51eb851f
 8005b9c:	3ff00000 	.word	0x3ff00000
 8005ba0:	ee07 3a90 	vmov	s15, r3
 8005ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba8:	ee17 0a90 	vmov	r0, s15
 8005bac:	f7fa fcd4 	bl	8000558 <__aeabi_f2d>
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	460d      	mov	r5, r1
 8005bb4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005bb8:	ee07 3a90 	vmov	s15, r3
 8005bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc0:	ee17 0a90 	vmov	r0, s15
 8005bc4:	f7fa fcc8 	bl	8000558 <__aeabi_f2d>
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	4ba4      	ldr	r3, [pc, #656]	@ (8005e60 <MPU6050SelfTest+0x9c0>)
 8005bce:	f7fa fb63 	bl	8000298 <__aeabi_dsub>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	ec43 2b17 	vmov	d7, r2, r3
 8005bda:	eeb0 1a47 	vmov.f32	s2, s14
 8005bde:	eef0 1a67 	vmov.f32	s3, s15
 8005be2:	ed9f 0b9d 	vldr	d0, [pc, #628]	@ 8005e58 <MPU6050SelfTest+0x9b8>
 8005be6:	f009 fb37 	bl	800f258 <pow>
 8005bea:	ec53 2b10 	vmov	r2, r3, d0
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	f7fa fd09 	bl	8000608 <__aeabi_dmul>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	f7fa fffb 	bl	8000bf8 <__aeabi_d2f>
 8005c02:	4603      	mov	r3, r0
 8005c04:	61fb      	str	r3, [r7, #28]

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8005c06:	2300      	movs	r3, #0
 8005c08:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c0a:	e088      	b.n	8005d1e <MPU6050SelfTest+0x87e>
		destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8005c0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	3378      	adds	r3, #120	@ 0x78
 8005c12:	443b      	add	r3, r7
 8005c14:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8005c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	3378      	adds	r3, #120	@ 0x78
 8005c1e:	443b      	add	r3, r7
 8005c20:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c2e:	ee17 0a90 	vmov	r0, s15
 8005c32:	f7fa fc91 	bl	8000558 <__aeabi_f2d>
 8005c36:	f04f 0200 	mov.w	r2, #0
 8005c3a:	4b8a      	ldr	r3, [pc, #552]	@ (8005e64 <MPU6050SelfTest+0x9c4>)
 8005c3c:	f7fa fce4 	bl	8000608 <__aeabi_dmul>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4614      	mov	r4, r2
 8005c46:	461d      	mov	r5, r3
 8005c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	3378      	adds	r3, #120	@ 0x78
 8005c4e:	443b      	add	r3, r7
 8005c50:	3b70      	subs	r3, #112	@ 0x70
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fa fc7f 	bl	8000558 <__aeabi_f2d>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4620      	mov	r0, r4
 8005c60:	4629      	mov	r1, r5
 8005c62:	f7fa fdfb 	bl	800085c <__aeabi_ddiv>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	f04f 0200 	mov.w	r2, #0
 8005c72:	4b7c      	ldr	r3, [pc, #496]	@ (8005e64 <MPU6050SelfTest+0x9c4>)
 8005c74:	f7fa fb10 	bl	8000298 <__aeabi_dsub>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	18d4      	adds	r4, r2, r3
 8005c88:	f7fa ffb6 	bl	8000bf8 <__aeabi_d2f>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	6023      	str	r3, [r4, #0]
		destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8005c90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	3378      	adds	r3, #120	@ 0x78
 8005c96:	443b      	add	r3, r7
 8005c98:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8005c9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	3378      	adds	r3, #120	@ 0x78
 8005ca2:	443b      	add	r3, r7
 8005ca4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cb2:	ee17 0a90 	vmov	r0, s15
 8005cb6:	f7fa fc4f 	bl	8000558 <__aeabi_f2d>
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	4b69      	ldr	r3, [pc, #420]	@ (8005e64 <MPU6050SelfTest+0x9c4>)
 8005cc0:	f7fa fca2 	bl	8000608 <__aeabi_dmul>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4614      	mov	r4, r2
 8005cca:	461d      	mov	r5, r3
 8005ccc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cce:	3303      	adds	r3, #3
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	3378      	adds	r3, #120	@ 0x78
 8005cd4:	443b      	add	r3, r7
 8005cd6:	3b70      	subs	r3, #112	@ 0x70
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fa fc3c 	bl	8000558 <__aeabi_f2d>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	f7fa fdb8 	bl	800085c <__aeabi_ddiv>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	4b5a      	ldr	r3, [pc, #360]	@ (8005e64 <MPU6050SelfTest+0x9c4>)
 8005cfa:	f7fa facd 	bl	8000298 <__aeabi_dsub>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4610      	mov	r0, r2
 8005d04:	4619      	mov	r1, r3
 8005d06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d08:	3303      	adds	r3, #3
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	18d4      	adds	r4, r2, r3
 8005d10:	f7fa ff72 	bl	8000bf8 <__aeabi_d2f>
 8005d14:	4603      	mov	r3, r0
 8005d16:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++) {
 8005d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	f77f af73 	ble.w	8005c0c <MPU6050SelfTest+0x76c>
	}

   for (int i = 0; i < 3; i++) {
 8005d26:	2300      	movs	r3, #0
 8005d28:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d2a:	e089      	b.n	8005e40 <MPU6050SelfTest+0x9a0>
     destination[i+3]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8005d2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	3378      	adds	r3, #120	@ 0x78
 8005d32:	443b      	add	r3, r7
 8005d34:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8005d38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	3378      	adds	r3, #120	@ 0x78
 8005d3e:	443b      	add	r3, r7
 8005d40:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d4e:	ee17 0a90 	vmov	r0, s15
 8005d52:	f7fa fc01 	bl	8000558 <__aeabi_f2d>
 8005d56:	f04f 0200 	mov.w	r2, #0
 8005d5a:	4b42      	ldr	r3, [pc, #264]	@ (8005e64 <MPU6050SelfTest+0x9c4>)
 8005d5c:	f7fa fc54 	bl	8000608 <__aeabi_dmul>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4614      	mov	r4, r2
 8005d66:	461d      	mov	r5, r3
 8005d68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	3378      	adds	r3, #120	@ 0x78
 8005d6e:	443b      	add	r3, r7
 8005d70:	3b70      	subs	r3, #112	@ 0x70
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fa fbef 	bl	8000558 <__aeabi_f2d>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4620      	mov	r0, r4
 8005d80:	4629      	mov	r1, r5
 8005d82:	f7fa fd6b 	bl	800085c <__aeabi_ddiv>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	4b34      	ldr	r3, [pc, #208]	@ (8005e64 <MPU6050SelfTest+0x9c4>)
 8005d94:	f7fa fa80 	bl	8000298 <__aeabi_dsub>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005da2:	3303      	adds	r3, #3
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	18d4      	adds	r4, r2, r3
 8005daa:	f7fa ff25 	bl	8000bf8 <__aeabi_d2f>
 8005dae:	4603      	mov	r3, r0
 8005db0:	6023      	str	r3, [r4, #0]
     destination[i+6] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8005db2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	3378      	adds	r3, #120	@ 0x78
 8005db8:	443b      	add	r3, r7
 8005dba:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8005dbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	3378      	adds	r3, #120	@ 0x78
 8005dc4:	443b      	add	r3, r7
 8005dc6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	ee07 3a90 	vmov	s15, r3
 8005dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dd4:	ee17 0a90 	vmov	r0, s15
 8005dd8:	f7fa fbbe 	bl	8000558 <__aeabi_f2d>
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	4b20      	ldr	r3, [pc, #128]	@ (8005e64 <MPU6050SelfTest+0x9c4>)
 8005de2:	f7fa fc11 	bl	8000608 <__aeabi_dmul>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	4614      	mov	r4, r2
 8005dec:	461d      	mov	r5, r3
 8005dee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005df0:	3303      	adds	r3, #3
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	3378      	adds	r3, #120	@ 0x78
 8005df6:	443b      	add	r3, r7
 8005df8:	3b70      	subs	r3, #112	@ 0x70
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fa fbab 	bl	8000558 <__aeabi_f2d>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4620      	mov	r0, r4
 8005e08:	4629      	mov	r1, r5
 8005e0a:	f7fa fd27 	bl	800085c <__aeabi_ddiv>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4610      	mov	r0, r2
 8005e14:	4619      	mov	r1, r3
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	4b12      	ldr	r3, [pc, #72]	@ (8005e64 <MPU6050SelfTest+0x9c4>)
 8005e1c:	f7fa fa3c 	bl	8000298 <__aeabi_dsub>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4610      	mov	r0, r2
 8005e26:	4619      	mov	r1, r3
 8005e28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e2a:	3306      	adds	r3, #6
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	18d4      	adds	r4, r2, r3
 8005e32:	f7fa fee1 	bl	8000bf8 <__aeabi_d2f>
 8005e36:	4603      	mov	r3, r0
 8005e38:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8005e3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	f77f af72 	ble.w	8005d2c <MPU6050SelfTest+0x88c>
   }
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	3778      	adds	r7, #120	@ 0x78
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bdb0      	pop	{r4, r5, r7, pc}
 8005e52:	bf00      	nop
 8005e54:	f3af 8000 	nop.w
 8005e58:	c28f5c29 	.word	0xc28f5c29
 8005e5c:	3ff028f5 	.word	0x3ff028f5
 8005e60:	3ff00000 	.word	0x3ff00000
 8005e64:	40590000 	.word	0x40590000

08005e68 <quaternionInit>:
#include "quaternion.h"

float a12, a22, a31, a32, a33;

void quaternionInit(Quaternion_t *DataStruct, float sampleTimeMicros)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	ed87 0a00 	vstr	s0, [r7]
	DataStruct->GyroMeasError = M_PI * (40.0f / 180.0f);		// gyroscope measurement error in rads/s (start at 60 deg/s), then reduce after ~10 s to 3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a26      	ldr	r2, [pc, #152]	@ (8005f10 <quaternionInit+0xa8>)
 8005e78:	601a      	str	r2, [r3, #0]
	DataStruct->beta = sqrt(3.0f / 4.0f) * DataStruct->GyroMeasError;		// compute beta
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fa fb6a 	bl	8000558 <__aeabi_f2d>
 8005e84:	a320      	add	r3, pc, #128	@ (adr r3, 8005f08 <quaternionInit+0xa0>)
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	f7fa fbbd 	bl	8000608 <__aeabi_dmul>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4610      	mov	r0, r2
 8005e94:	4619      	mov	r1, r3
 8005e96:	f7fa feaf 	bl	8000bf8 <__aeabi_d2f>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	605a      	str	r2, [r3, #4]
	DataStruct->GyroMeasDrift = M_PI * (2.0f / 180.0f);		// gyroscope measurement drift in rad/s/s (start at 0.0 deg/s/s)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f14 <quaternionInit+0xac>)
 8005ea4:	609a      	str	r2, [r3, #8]
	DataStruct->zeta = sqrt(3.0f / 4.0f) * DataStruct->GyroMeasDrift;		// compute zeta, the other free parameter in the Madgwick scheme usually set to a small or zero value
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fa fb54 	bl	8000558 <__aeabi_f2d>
 8005eb0:	a315      	add	r3, pc, #84	@ (adr r3, 8005f08 <quaternionInit+0xa0>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f7fa fba7 	bl	8000608 <__aeabi_dmul>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f7fa fe99 	bl	8000bf8 <__aeabi_d2f>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	60da      	str	r2, [r3, #12]

	DataStruct->deltat = sampleTimeMicros / 1000000.0f;
 8005ecc:	ed97 7a00 	vldr	s14, [r7]
 8005ed0:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8005f18 <quaternionInit+0xb0>
 8005ed4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	edc3 7a04 	vstr	s15, [r3, #16]

	DataStruct->q[0] = 1.0f;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005ee4:	621a      	str	r2, [r3, #32]
	DataStruct->q[1] = 0.0f;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	625a      	str	r2, [r3, #36]	@ 0x24
	DataStruct->q[2] = 0.0f;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	629a      	str	r2, [r3, #40]	@ 0x28
	DataStruct->q[3] = 0.0f;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005efe:	bf00      	nop
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	e8584caa 	.word	0xe8584caa
 8005f0c:	3febb67a 	.word	0x3febb67a
 8005f10:	3f32b8c2 	.word	0x3f32b8c2
 8005f14:	3d0efa35 	.word	0x3d0efa35
 8005f18:	49742400 	.word	0x49742400

08005f1c <quaternionUpdate>:

void quaternionUpdate(Quaternion_t *DataStruct, float ax, float ay, float az, float gyrox, float gyroy, float gyroz)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b0a6      	sub	sp, #152	@ 0x98
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	61f8      	str	r0, [r7, #28]
 8005f24:	ed87 0a06 	vstr	s0, [r7, #24]
 8005f28:	edc7 0a05 	vstr	s1, [r7, #20]
 8005f2c:	ed87 1a04 	vstr	s2, [r7, #16]
 8005f30:	edc7 1a03 	vstr	s3, [r7, #12]
 8005f34:	ed87 2a02 	vstr	s4, [r7, #8]
 8005f38:	edc7 2a01 	vstr	s5, [r7, #4]
    float q1 = DataStruct->q[0], q2 = DataStruct->q[1], q3 = DataStruct->q[2], q4 = DataStruct->q[3];         // short name local variable for readability
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; // objective function Jacobian elements
    float qDot1, qDot2, qDot3, qDot4;
    float hatDot1, hatDot2, hatDot3, hatDot4;

    // Auxiliary variables to avoid repeated arithmetic
    float _halfq1 = 0.5f * q1;
 8005f5c:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8005f60:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f68:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
    float _halfq2 = 0.5f * q2;
 8005f6c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8005f70:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f78:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
    float _halfq3 = 0.5f * q3;
 8005f7c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8005f80:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f88:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    float _halfq4 = 0.5f * q4;
 8005f8c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8005f90:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f98:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    float _2q1 = 2.0f * q1;
 8005f9c:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8005fa0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fa4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float _2q2 = 2.0f * q2;
 8005fa8:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8005fac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fb0:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    float _2q3 = 2.0f * q3;
 8005fb4:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8005fb8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fbc:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    float _2q4 = 2.0f * q4;
 8005fc0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8005fc4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fc8:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

    // Normalise accelerometer measurement
    norm = sqrt(ax * ax + ay * ay + az * az);
 8005fcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8005fd0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005fd8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fe0:	edd7 7a04 	vldr	s15, [r7, #16]
 8005fe4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fec:	ee17 0a90 	vmov	r0, s15
 8005ff0:	f7fa fab2 	bl	8000558 <__aeabi_f2d>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	ec43 2b10 	vmov	d0, r2, r3
 8005ffc:	f009 f99c 	bl	800f338 <sqrt>
 8006000:	ec53 2b10 	vmov	r2, r3, d0
 8006004:	4610      	mov	r0, r2
 8006006:	4619      	mov	r1, r3
 8006008:	f7fa fdf6 	bl	8000bf8 <__aeabi_d2f>
 800600c:	4603      	mov	r3, r0
 800600e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (norm == 0.0f) return; // handle NaN
 8006010:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006014:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800601c:	f000 821e 	beq.w	800645c <quaternionUpdate+0x540>
    norm = 1.0f/norm;
 8006020:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006024:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8006028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800602c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    ax *= norm;
 8006030:	ed97 7a06 	vldr	s14, [r7, #24]
 8006034:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603c:	edc7 7a06 	vstr	s15, [r7, #24]
    ay *= norm;
 8006040:	ed97 7a05 	vldr	s14, [r7, #20]
 8006044:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604c:	edc7 7a05 	vstr	s15, [r7, #20]
    az *= norm;
 8006050:	ed97 7a04 	vldr	s14, [r7, #16]
 8006054:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605c:	edc7 7a04 	vstr	s15, [r7, #16]

    // Compute the objective function and Jacobian
    f1 = _2q2 * q4 - _2q1 * q3 - ax;
 8006060:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8006064:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8006068:	ee27 7a27 	vmul.f32	s14, s14, s15
 800606c:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8006070:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8006074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006078:	ee37 7a67 	vsub.f32	s14, s14, s15
 800607c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006084:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    f2 = _2q1 * q2 + _2q3 * q4 - ay;
 8006088:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800608c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8006090:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006094:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8006098:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800609c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80060a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ac:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    f3 = 1.0f - _2q2 * q2 - _2q3 * q3 - az;
 80060b0:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80060b4:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80060b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060c4:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 80060c8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80060cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80060d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060dc:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    J_11or24 = _2q3;
 80060e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060e2:	657b      	str	r3, [r7, #84]	@ 0x54
    J_12or23 = _2q4;
 80060e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060e6:	653b      	str	r3, [r7, #80]	@ 0x50
    J_13or22 = _2q1;
 80060e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    J_14or21 = _2q2;
 80060ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060ee:	64bb      	str	r3, [r7, #72]	@ 0x48
    J_32 = 2.0f * J_14or21;
 80060f0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80060f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060f8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    J_33 = 2.0f * J_11or24;
 80060fc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8006100:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006104:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // Compute the gradient (matrix multiplication)
    hatDot1 = J_14or21 * f2 - J_11or24 * f1;
 8006108:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800610c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8006110:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006114:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8006118:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800611c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006124:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    hatDot2 = J_12or23 * f1 + J_13or22 * f2 - J_32 * f3;
 8006128:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800612c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8006130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006134:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8006138:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800613c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006140:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006144:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8006148:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800614c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006154:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    hatDot3 = J_12or23 * f2 - J_33 *f3 - J_13or22 * f1;
 8006158:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800615c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8006160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006164:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8006168:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800616c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006170:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006174:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8006178:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800617c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006184:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    hatDot4 = J_14or21 * f1 + J_11or24 * f2;
 8006188:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800618c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8006190:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006194:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8006198:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800619c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061a4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Normalize the gradient
    norm = sqrt(hatDot1 * hatDot1 + hatDot2 * hatDot2 + hatDot3 * hatDot3 + hatDot4 * hatDot4);
 80061a8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80061ac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80061b0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80061b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061bc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80061c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061c8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80061cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061d4:	ee17 0a90 	vmov	r0, s15
 80061d8:	f7fa f9be 	bl	8000558 <__aeabi_f2d>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	ec43 2b10 	vmov	d0, r2, r3
 80061e4:	f009 f8a8 	bl	800f338 <sqrt>
 80061e8:	ec53 2b10 	vmov	r2, r3, d0
 80061ec:	4610      	mov	r0, r2
 80061ee:	4619      	mov	r1, r3
 80061f0:	f7fa fd02 	bl	8000bf8 <__aeabi_d2f>
 80061f4:	4603      	mov	r3, r0
 80061f6:	667b      	str	r3, [r7, #100]	@ 0x64
    hatDot1 /= norm;
 80061f8:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80061fc:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8006200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006204:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    hatDot2 /= norm;
 8006208:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800620c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8006210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006214:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    hatDot3 /= norm;
 8006218:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800621c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8006220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006224:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    hatDot4 /= norm;
 8006228:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 800622c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8006230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006234:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Compute the quaternion derivative
    qDot1 = -_halfq2 * gyrox - _halfq3 * gyroy - _halfq4 * gyroz;
 8006238:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800623c:	eeb1 7a67 	vneg.f32	s14, s15
 8006240:	edd7 7a03 	vldr	s15, [r7, #12]
 8006244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006248:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 800624c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006254:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006258:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 800625c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006268:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    qDot2 =  _halfq1 * gyrox + _halfq3 * gyroz - _halfq4 * gyroy;
 800626c:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8006270:	edd7 7a03 	vldr	s15, [r7, #12]
 8006274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006278:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 800627c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006288:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 800628c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006298:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    qDot3 =  _halfq1 * gyroy - _halfq2 * gyroz + _halfq4 * gyrox;
 800629c:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80062a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80062a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062a8:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 80062ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80062b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062b8:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 80062bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80062c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062c8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    qDot4 =  _halfq1 * gyroz + _halfq2 * gyroy - _halfq3 * gyrox;
 80062cc:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80062d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80062d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062d8:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 80062dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80062e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062e8:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 80062ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80062f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062f8:	edc7 7a08 	vstr	s15, [r7, #32]

    // Compute then integrate estimated quaternion derivative
    q1 += (qDot1 -(DataStruct->beta * hatDot1)) * DataStruct->deltat;
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8006302:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8006306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800630a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800630e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	edd3 7a04 	vldr	s15, [r3, #16]
 8006318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631c:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8006320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006324:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    q2 += (qDot2 -(DataStruct->beta * hatDot2)) * DataStruct->deltat;
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	ed93 7a01 	vldr	s14, [r3, #4]
 800632e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8006332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006336:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800633a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	edd3 7a04 	vldr	s15, [r3, #16]
 8006344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006348:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 800634c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006350:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    q3 += (qDot3 -(DataStruct->beta * hatDot3)) * DataStruct->deltat;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	ed93 7a01 	vldr	s14, [r3, #4]
 800635a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800635e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006362:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006366:	ee37 7a67 	vsub.f32	s14, s14, s15
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006374:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8006378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800637c:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    q4 += (qDot4 -(DataStruct->beta * hatDot4)) * DataStruct->deltat;
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	ed93 7a01 	vldr	s14, [r3, #4]
 8006386:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800638a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638e:	ed97 7a08 	vldr	s14, [r7, #32]
 8006392:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	edd3 7a04 	vldr	s15, [r3, #16]
 800639c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a0:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80063a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063a8:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    // Normalize the quaternion
    norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 80063ac:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80063b0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80063b4:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80063b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063c0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80063c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063cc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80063d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063d8:	ee17 0a90 	vmov	r0, s15
 80063dc:	f7fa f8bc 	bl	8000558 <__aeabi_f2d>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	ec43 2b10 	vmov	d0, r2, r3
 80063e8:	f008 ffa6 	bl	800f338 <sqrt>
 80063ec:	ec53 2b10 	vmov	r2, r3, d0
 80063f0:	4610      	mov	r0, r2
 80063f2:	4619      	mov	r1, r3
 80063f4:	f7fa fc00 	bl	8000bf8 <__aeabi_d2f>
 80063f8:	4603      	mov	r3, r0
 80063fa:	667b      	str	r3, [r7, #100]	@ 0x64
    norm = 1.0f/norm;
 80063fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006400:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8006404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006408:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    DataStruct->q[0] = q1 * norm;
 800640c:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8006410:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	edc3 7a08 	vstr	s15, [r3, #32]
    DataStruct->q[1] = q2 * norm;
 800641e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8006422:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    DataStruct->q[2] = q3 * norm;
 8006430:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8006434:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    DataStruct->q[3] = q4 * norm;
 8006442:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8006446:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800644a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    quaternionEulerUpdate(DataStruct);
 8006454:	69f8      	ldr	r0, [r7, #28]
 8006456:	f000 f807 	bl	8006468 <quaternionEulerUpdate>
 800645a:	e000      	b.n	800645e <quaternionUpdate+0x542>
    if (norm == 0.0f) return; // handle NaN
 800645c:	bf00      	nop
}
 800645e:	3798      	adds	r7, #152	@ 0x98
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	0000      	movs	r0, r0
	...

08006468 <quaternionEulerUpdate>:

void quaternionEulerUpdate(Quaternion_t *DataStruct)
{
 8006468:	b5b0      	push	{r4, r5, r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	DataStruct->yaw   = atan2(2.0f * (DataStruct->q[1] * DataStruct->q[2] + DataStruct->q[0] * DataStruct->q[3]),
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800647c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	edd3 6a08 	vldr	s13, [r3, #32]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800648c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006494:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006498:	ee17 0a90 	vmov	r0, s15
 800649c:	f7fa f85c 	bl	8000558 <__aeabi_f2d>
 80064a0:	4604      	mov	r4, r0
 80064a2:	460d      	mov	r5, r1
			DataStruct->q[0] * DataStruct->q[0] + DataStruct->q[1] * DataStruct->q[1] - DataStruct->q[2] * DataStruct->q[2] - DataStruct->q[3] * DataStruct->q[3]);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	ed93 7a08 	vldr	s14, [r3, #32]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80064b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80064c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80064d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80064e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064ec:	ee77 7a67 	vsub.f32	s15, s14, s15
	DataStruct->yaw   = atan2(2.0f * (DataStruct->q[1] * DataStruct->q[2] + DataStruct->q[0] * DataStruct->q[3]),
 80064f0:	ee17 0a90 	vmov	r0, s15
 80064f4:	f7fa f830 	bl	8000558 <__aeabi_f2d>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	ec43 2b11 	vmov	d1, r2, r3
 8006500:	ec45 4b10 	vmov	d0, r4, r5
 8006504:	f008 fea6 	bl	800f254 <atan2>
 8006508:	ec53 2b10 	vmov	r2, r3, d0
 800650c:	4610      	mov	r0, r2
 800650e:	4619      	mov	r1, r3
 8006510:	f7fa fb72 	bl	8000bf8 <__aeabi_d2f>
 8006514:	4602      	mov	r2, r0
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	619a      	str	r2, [r3, #24]
	DataStruct->pitch = -asin(2.0f * (DataStruct->q[1] * DataStruct->q[3] - DataStruct->q[0] * DataStruct->q[2]));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	edd3 6a08 	vldr	s13, [r3, #32]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8006536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800653a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800653e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006542:	ee17 0a90 	vmov	r0, s15
 8006546:	f7fa f807 	bl	8000558 <__aeabi_f2d>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	ec43 2b10 	vmov	d0, r2, r3
 8006552:	f008 fe4b 	bl	800f1ec <asin>
 8006556:	ec53 2b10 	vmov	r2, r3, d0
 800655a:	4610      	mov	r0, r2
 800655c:	4619      	mov	r1, r3
 800655e:	f7fa fb4b 	bl	8000bf8 <__aeabi_d2f>
 8006562:	4603      	mov	r3, r0
 8006564:	ee07 3a90 	vmov	s15, r3
 8006568:	eef1 7a67 	vneg.f32	s15, s15
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	edc3 7a05 	vstr	s15, [r3, #20]
	DataStruct->roll  = atan2(2.0f * (DataStruct->q[0] * DataStruct->q[1] + DataStruct->q[2] * DataStruct->q[3]),
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	ed93 7a08 	vldr	s14, [r3, #32]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800657e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800658e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006596:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800659a:	ee17 0a90 	vmov	r0, s15
 800659e:	f7f9 ffdb 	bl	8000558 <__aeabi_f2d>
 80065a2:	4604      	mov	r4, r0
 80065a4:	460d      	mov	r5, r1
			DataStruct->q[0] * DataStruct->q[0] - DataStruct->q[1] * DataStruct->q[1] - DataStruct->q[2] * DataStruct->q[2] + DataStruct->q[3] * DataStruct->q[3]);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80065b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80065c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80065d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80065ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065ee:	ee77 7a27 	vadd.f32	s15, s14, s15
	DataStruct->roll  = atan2(2.0f * (DataStruct->q[0] * DataStruct->q[1] + DataStruct->q[2] * DataStruct->q[3]),
 80065f2:	ee17 0a90 	vmov	r0, s15
 80065f6:	f7f9 ffaf 	bl	8000558 <__aeabi_f2d>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	ec43 2b11 	vmov	d1, r2, r3
 8006602:	ec45 4b10 	vmov	d0, r4, r5
 8006606:	f008 fe25 	bl	800f254 <atan2>
 800660a:	ec53 2b10 	vmov	r2, r3, d0
 800660e:	4610      	mov	r0, r2
 8006610:	4619      	mov	r1, r3
 8006612:	f7fa faf1 	bl	8000bf8 <__aeabi_d2f>
 8006616:	4602      	mov	r2, r0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	61da      	str	r2, [r3, #28]
	DataStruct->pitch *= 180.0f / M_PI;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	4618      	mov	r0, r3
 8006622:	f7f9 ff99 	bl	8000558 <__aeabi_f2d>
 8006626:	a31c      	add	r3, pc, #112	@ (adr r3, 8006698 <quaternionEulerUpdate+0x230>)
 8006628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662c:	f7f9 ffec 	bl	8000608 <__aeabi_dmul>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4610      	mov	r0, r2
 8006636:	4619      	mov	r1, r3
 8006638:	f7fa fade 	bl	8000bf8 <__aeabi_d2f>
 800663c:	4602      	mov	r2, r0
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	615a      	str	r2, [r3, #20]
	DataStruct->yaw   *= 180.0f / M_PI;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	4618      	mov	r0, r3
 8006648:	f7f9 ff86 	bl	8000558 <__aeabi_f2d>
 800664c:	a312      	add	r3, pc, #72	@ (adr r3, 8006698 <quaternionEulerUpdate+0x230>)
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f7f9 ffd9 	bl	8000608 <__aeabi_dmul>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	4610      	mov	r0, r2
 800665c:	4619      	mov	r1, r3
 800665e:	f7fa facb 	bl	8000bf8 <__aeabi_d2f>
 8006662:	4602      	mov	r2, r0
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	619a      	str	r2, [r3, #24]
	DataStruct->roll  *= 180.0f / M_PI;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	4618      	mov	r0, r3
 800666e:	f7f9 ff73 	bl	8000558 <__aeabi_f2d>
 8006672:	a309      	add	r3, pc, #36	@ (adr r3, 8006698 <quaternionEulerUpdate+0x230>)
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	f7f9 ffc6 	bl	8000608 <__aeabi_dmul>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4610      	mov	r0, r2
 8006682:	4619      	mov	r1, r3
 8006684:	f7fa fab8 	bl	8000bf8 <__aeabi_d2f>
 8006688:	4602      	mov	r2, r0
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	61da      	str	r2, [r3, #28]
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bdb0      	pop	{r4, r5, r7, pc}
 8006696:	bf00      	nop
 8006698:	1a63c1f8 	.word	0x1a63c1f8
 800669c:	404ca5dc 	.word	0x404ca5dc

080066a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066a6:	2300      	movs	r3, #0
 80066a8:	607b      	str	r3, [r7, #4]
 80066aa:	4b10      	ldr	r3, [pc, #64]	@ (80066ec <HAL_MspInit+0x4c>)
 80066ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ae:	4a0f      	ldr	r2, [pc, #60]	@ (80066ec <HAL_MspInit+0x4c>)
 80066b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80066b6:	4b0d      	ldr	r3, [pc, #52]	@ (80066ec <HAL_MspInit+0x4c>)
 80066b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066be:	607b      	str	r3, [r7, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80066c2:	2300      	movs	r3, #0
 80066c4:	603b      	str	r3, [r7, #0]
 80066c6:	4b09      	ldr	r3, [pc, #36]	@ (80066ec <HAL_MspInit+0x4c>)
 80066c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ca:	4a08      	ldr	r2, [pc, #32]	@ (80066ec <HAL_MspInit+0x4c>)
 80066cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80066d2:	4b06      	ldr	r3, [pc, #24]	@ (80066ec <HAL_MspInit+0x4c>)
 80066d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	40023800 	.word	0x40023800

080066f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08c      	sub	sp, #48	@ 0x30
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066f8:	f107 031c 	add.w	r3, r7, #28
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	605a      	str	r2, [r3, #4]
 8006702:	609a      	str	r2, [r3, #8]
 8006704:	60da      	str	r2, [r3, #12]
 8006706:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a4a      	ldr	r2, [pc, #296]	@ (8006838 <HAL_I2C_MspInit+0x148>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d13d      	bne.n	800678e <HAL_I2C_MspInit+0x9e>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006712:	2300      	movs	r3, #0
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	4b49      	ldr	r3, [pc, #292]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671a:	4a48      	ldr	r2, [pc, #288]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 800671c:	f043 0302 	orr.w	r3, r3, #2
 8006720:	6313      	str	r3, [r2, #48]	@ 0x30
 8006722:	4b46      	ldr	r3, [pc, #280]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 8006724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	61bb      	str	r3, [r7, #24]
 800672c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800672e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006734:	2312      	movs	r3, #18
 8006736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006738:	2300      	movs	r3, #0
 800673a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800673c:	2303      	movs	r3, #3
 800673e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006740:	2304      	movs	r3, #4
 8006742:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006744:	f107 031c 	add.w	r3, r7, #28
 8006748:	4619      	mov	r1, r3
 800674a:	483d      	ldr	r0, [pc, #244]	@ (8006840 <HAL_I2C_MspInit+0x150>)
 800674c:	f001 f840 	bl	80077d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006750:	2308      	movs	r3, #8
 8006752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006754:	2312      	movs	r3, #18
 8006756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006758:	2300      	movs	r3, #0
 800675a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800675c:	2303      	movs	r3, #3
 800675e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8006760:	2309      	movs	r3, #9
 8006762:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006764:	f107 031c 	add.w	r3, r7, #28
 8006768:	4619      	mov	r1, r3
 800676a:	4835      	ldr	r0, [pc, #212]	@ (8006840 <HAL_I2C_MspInit+0x150>)
 800676c:	f001 f830 	bl	80077d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	4b31      	ldr	r3, [pc, #196]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 8006776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006778:	4a30      	ldr	r2, [pc, #192]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 800677a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800677e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006780:	4b2e      	ldr	r3, [pc, #184]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 8006782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800678c:	e04f      	b.n	800682e <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C3)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a2c      	ldr	r2, [pc, #176]	@ (8006844 <HAL_I2C_MspInit+0x154>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d14a      	bne.n	800682e <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006798:	2300      	movs	r3, #0
 800679a:	613b      	str	r3, [r7, #16]
 800679c:	4b27      	ldr	r3, [pc, #156]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 800679e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a0:	4a26      	ldr	r2, [pc, #152]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 80067a2:	f043 0301 	orr.w	r3, r3, #1
 80067a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80067a8:	4b24      	ldr	r3, [pc, #144]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	613b      	str	r3, [r7, #16]
 80067b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	4b20      	ldr	r3, [pc, #128]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 80067ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067bc:	4a1f      	ldr	r2, [pc, #124]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 80067be:	f043 0302 	orr.w	r3, r3, #2
 80067c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80067c4:	4b1d      	ldr	r3, [pc, #116]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 80067c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80067d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80067d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80067d6:	2312      	movs	r3, #18
 80067d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067de:	2303      	movs	r3, #3
 80067e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80067e2:	2304      	movs	r3, #4
 80067e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067e6:	f107 031c 	add.w	r3, r7, #28
 80067ea:	4619      	mov	r1, r3
 80067ec:	4816      	ldr	r0, [pc, #88]	@ (8006848 <HAL_I2C_MspInit+0x158>)
 80067ee:	f000 ffef 	bl	80077d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80067f2:	2310      	movs	r3, #16
 80067f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80067f6:	2312      	movs	r3, #18
 80067f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067fe:	2303      	movs	r3, #3
 8006800:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8006802:	2309      	movs	r3, #9
 8006804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006806:	f107 031c 	add.w	r3, r7, #28
 800680a:	4619      	mov	r1, r3
 800680c:	480c      	ldr	r0, [pc, #48]	@ (8006840 <HAL_I2C_MspInit+0x150>)
 800680e:	f000 ffdf 	bl	80077d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	4b09      	ldr	r3, [pc, #36]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681a:	4a08      	ldr	r2, [pc, #32]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 800681c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006820:	6413      	str	r3, [r2, #64]	@ 0x40
 8006822:	4b06      	ldr	r3, [pc, #24]	@ (800683c <HAL_I2C_MspInit+0x14c>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006826:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800682a:	60bb      	str	r3, [r7, #8]
 800682c:	68bb      	ldr	r3, [r7, #8]
}
 800682e:	bf00      	nop
 8006830:	3730      	adds	r7, #48	@ 0x30
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	40005800 	.word	0x40005800
 800683c:	40023800 	.word	0x40023800
 8006840:	40020400 	.word	0x40020400
 8006844:	40005c00 	.word	0x40005c00
 8006848:	40020000 	.word	0x40020000

0800684c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800685c:	d10e      	bne.n	800687c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800685e:	2300      	movs	r3, #0
 8006860:	617b      	str	r3, [r7, #20]
 8006862:	4b27      	ldr	r3, [pc, #156]	@ (8006900 <HAL_TIM_Base_MspInit+0xb4>)
 8006864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006866:	4a26      	ldr	r2, [pc, #152]	@ (8006900 <HAL_TIM_Base_MspInit+0xb4>)
 8006868:	f043 0301 	orr.w	r3, r3, #1
 800686c:	6413      	str	r3, [r2, #64]	@ 0x40
 800686e:	4b24      	ldr	r3, [pc, #144]	@ (8006900 <HAL_TIM_Base_MspInit+0xb4>)
 8006870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 800687a:	e03a      	b.n	80068f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a20      	ldr	r2, [pc, #128]	@ (8006904 <HAL_TIM_Base_MspInit+0xb8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d10e      	bne.n	80068a4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006886:	2300      	movs	r3, #0
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	4b1d      	ldr	r3, [pc, #116]	@ (8006900 <HAL_TIM_Base_MspInit+0xb4>)
 800688c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688e:	4a1c      	ldr	r2, [pc, #112]	@ (8006900 <HAL_TIM_Base_MspInit+0xb4>)
 8006890:	f043 0302 	orr.w	r3, r3, #2
 8006894:	6413      	str	r3, [r2, #64]	@ 0x40
 8006896:	4b1a      	ldr	r3, [pc, #104]	@ (8006900 <HAL_TIM_Base_MspInit+0xb4>)
 8006898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	693b      	ldr	r3, [r7, #16]
}
 80068a2:	e026      	b.n	80068f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a17      	ldr	r2, [pc, #92]	@ (8006908 <HAL_TIM_Base_MspInit+0xbc>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d10e      	bne.n	80068cc <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	4b13      	ldr	r3, [pc, #76]	@ (8006900 <HAL_TIM_Base_MspInit+0xb4>)
 80068b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b6:	4a12      	ldr	r2, [pc, #72]	@ (8006900 <HAL_TIM_Base_MspInit+0xb4>)
 80068b8:	f043 0304 	orr.w	r3, r3, #4
 80068bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80068be:	4b10      	ldr	r3, [pc, #64]	@ (8006900 <HAL_TIM_Base_MspInit+0xb4>)
 80068c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
}
 80068ca:	e012      	b.n	80068f2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a0e      	ldr	r2, [pc, #56]	@ (800690c <HAL_TIM_Base_MspInit+0xc0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d10d      	bne.n	80068f2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80068d6:	2300      	movs	r3, #0
 80068d8:	60bb      	str	r3, [r7, #8]
 80068da:	4b09      	ldr	r3, [pc, #36]	@ (8006900 <HAL_TIM_Base_MspInit+0xb4>)
 80068dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068de:	4a08      	ldr	r2, [pc, #32]	@ (8006900 <HAL_TIM_Base_MspInit+0xb4>)
 80068e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80068e6:	4b06      	ldr	r3, [pc, #24]	@ (8006900 <HAL_TIM_Base_MspInit+0xb4>)
 80068e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068ee:	60bb      	str	r3, [r7, #8]
 80068f0:	68bb      	ldr	r3, [r7, #8]
}
 80068f2:	bf00      	nop
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40023800 	.word	0x40023800
 8006904:	40000400 	.word	0x40000400
 8006908:	40000800 	.word	0x40000800
 800690c:	40014800 	.word	0x40014800

08006910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08c      	sub	sp, #48	@ 0x30
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006918:	f107 031c 	add.w	r3, r7, #28
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	605a      	str	r2, [r3, #4]
 8006922:	609a      	str	r2, [r3, #8]
 8006924:	60da      	str	r2, [r3, #12]
 8006926:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006930:	d11e      	bne.n	8006970 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006932:	2300      	movs	r3, #0
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	4b43      	ldr	r3, [pc, #268]	@ (8006a44 <HAL_TIM_MspPostInit+0x134>)
 8006938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693a:	4a42      	ldr	r2, [pc, #264]	@ (8006a44 <HAL_TIM_MspPostInit+0x134>)
 800693c:	f043 0301 	orr.w	r3, r3, #1
 8006940:	6313      	str	r3, [r2, #48]	@ 0x30
 8006942:	4b40      	ldr	r3, [pc, #256]	@ (8006a44 <HAL_TIM_MspPostInit+0x134>)
 8006944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	61bb      	str	r3, [r7, #24]
 800694c:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800694e:	230f      	movs	r3, #15
 8006950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006952:	2302      	movs	r3, #2
 8006954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006956:	2300      	movs	r3, #0
 8006958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800695a:	2300      	movs	r3, #0
 800695c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800695e:	2301      	movs	r3, #1
 8006960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006962:	f107 031c 	add.w	r3, r7, #28
 8006966:	4619      	mov	r1, r3
 8006968:	4837      	ldr	r0, [pc, #220]	@ (8006a48 <HAL_TIM_MspPostInit+0x138>)
 800696a:	f000 ff31 	bl	80077d0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800696e:	e065      	b.n	8006a3c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a35      	ldr	r2, [pc, #212]	@ (8006a4c <HAL_TIM_MspPostInit+0x13c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d13c      	bne.n	80069f4 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800697a:	2300      	movs	r3, #0
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	4b31      	ldr	r3, [pc, #196]	@ (8006a44 <HAL_TIM_MspPostInit+0x134>)
 8006980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006982:	4a30      	ldr	r2, [pc, #192]	@ (8006a44 <HAL_TIM_MspPostInit+0x134>)
 8006984:	f043 0301 	orr.w	r3, r3, #1
 8006988:	6313      	str	r3, [r2, #48]	@ 0x30
 800698a:	4b2e      	ldr	r3, [pc, #184]	@ (8006a44 <HAL_TIM_MspPostInit+0x134>)
 800698c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006996:	2300      	movs	r3, #0
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	4b2a      	ldr	r3, [pc, #168]	@ (8006a44 <HAL_TIM_MspPostInit+0x134>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699e:	4a29      	ldr	r2, [pc, #164]	@ (8006a44 <HAL_TIM_MspPostInit+0x134>)
 80069a0:	f043 0302 	orr.w	r3, r3, #2
 80069a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80069a6:	4b27      	ldr	r3, [pc, #156]	@ (8006a44 <HAL_TIM_MspPostInit+0x134>)
 80069a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80069b2:	23c0      	movs	r3, #192	@ 0xc0
 80069b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069b6:	2302      	movs	r3, #2
 80069b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069be:	2300      	movs	r3, #0
 80069c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80069c2:	2302      	movs	r3, #2
 80069c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069c6:	f107 031c 	add.w	r3, r7, #28
 80069ca:	4619      	mov	r1, r3
 80069cc:	481e      	ldr	r0, [pc, #120]	@ (8006a48 <HAL_TIM_MspPostInit+0x138>)
 80069ce:	f000 feff 	bl	80077d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80069d2:	2303      	movs	r3, #3
 80069d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069d6:	2302      	movs	r3, #2
 80069d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069de:	2300      	movs	r3, #0
 80069e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80069e2:	2302      	movs	r3, #2
 80069e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069e6:	f107 031c 	add.w	r3, r7, #28
 80069ea:	4619      	mov	r1, r3
 80069ec:	4818      	ldr	r0, [pc, #96]	@ (8006a50 <HAL_TIM_MspPostInit+0x140>)
 80069ee:	f000 feef 	bl	80077d0 <HAL_GPIO_Init>
}
 80069f2:	e023      	b.n	8006a3c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a16      	ldr	r2, [pc, #88]	@ (8006a54 <HAL_TIM_MspPostInit+0x144>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d11e      	bne.n	8006a3c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	4b10      	ldr	r3, [pc, #64]	@ (8006a44 <HAL_TIM_MspPostInit+0x134>)
 8006a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a06:	4a0f      	ldr	r2, [pc, #60]	@ (8006a44 <HAL_TIM_MspPostInit+0x134>)
 8006a08:	f043 0302 	orr.w	r3, r3, #2
 8006a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <HAL_TIM_MspPostInit+0x134>)
 8006a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006a1a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8006a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a20:	2302      	movs	r3, #2
 8006a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a30:	f107 031c 	add.w	r3, r7, #28
 8006a34:	4619      	mov	r1, r3
 8006a36:	4806      	ldr	r0, [pc, #24]	@ (8006a50 <HAL_TIM_MspPostInit+0x140>)
 8006a38:	f000 feca 	bl	80077d0 <HAL_GPIO_Init>
}
 8006a3c:	bf00      	nop
 8006a3e:	3730      	adds	r7, #48	@ 0x30
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40023800 	.word	0x40023800
 8006a48:	40020000 	.word	0x40020000
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40020400 	.word	0x40020400
 8006a54:	40000800 	.word	0x40000800

08006a58 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08c      	sub	sp, #48	@ 0x30
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a60:	f107 031c 	add.w	r3, r7, #28
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	605a      	str	r2, [r3, #4]
 8006a6a:	609a      	str	r2, [r3, #8]
 8006a6c:	60da      	str	r2, [r3, #12]
 8006a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a62      	ldr	r2, [pc, #392]	@ (8006c00 <HAL_UART_MspInit+0x1a8>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	f040 808c 	bne.w	8006b94 <HAL_UART_MspInit+0x13c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	4b60      	ldr	r3, [pc, #384]	@ (8006c04 <HAL_UART_MspInit+0x1ac>)
 8006a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a84:	4a5f      	ldr	r2, [pc, #380]	@ (8006c04 <HAL_UART_MspInit+0x1ac>)
 8006a86:	f043 0310 	orr.w	r3, r3, #16
 8006a8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a8c:	4b5d      	ldr	r3, [pc, #372]	@ (8006c04 <HAL_UART_MspInit+0x1ac>)
 8006a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a98:	2300      	movs	r3, #0
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	4b59      	ldr	r3, [pc, #356]	@ (8006c04 <HAL_UART_MspInit+0x1ac>)
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa0:	4a58      	ldr	r2, [pc, #352]	@ (8006c04 <HAL_UART_MspInit+0x1ac>)
 8006aa2:	f043 0301 	orr.w	r3, r3, #1
 8006aa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8006aa8:	4b56      	ldr	r3, [pc, #344]	@ (8006c04 <HAL_UART_MspInit+0x1ac>)
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006ab4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aba:	2302      	movs	r3, #2
 8006abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006ac6:	2307      	movs	r3, #7
 8006ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aca:	f107 031c 	add.w	r3, r7, #28
 8006ace:	4619      	mov	r1, r3
 8006ad0:	484d      	ldr	r0, [pc, #308]	@ (8006c08 <HAL_UART_MspInit+0x1b0>)
 8006ad2:	f000 fe7d 	bl	80077d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006ad6:	4b4d      	ldr	r3, [pc, #308]	@ (8006c0c <HAL_UART_MspInit+0x1b4>)
 8006ad8:	4a4d      	ldr	r2, [pc, #308]	@ (8006c10 <HAL_UART_MspInit+0x1b8>)
 8006ada:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006adc:	4b4b      	ldr	r3, [pc, #300]	@ (8006c0c <HAL_UART_MspInit+0x1b4>)
 8006ade:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006ae2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ae4:	4b49      	ldr	r3, [pc, #292]	@ (8006c0c <HAL_UART_MspInit+0x1b4>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006aea:	4b48      	ldr	r3, [pc, #288]	@ (8006c0c <HAL_UART_MspInit+0x1b4>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006af0:	4b46      	ldr	r3, [pc, #280]	@ (8006c0c <HAL_UART_MspInit+0x1b4>)
 8006af2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006af6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006af8:	4b44      	ldr	r3, [pc, #272]	@ (8006c0c <HAL_UART_MspInit+0x1b4>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006afe:	4b43      	ldr	r3, [pc, #268]	@ (8006c0c <HAL_UART_MspInit+0x1b4>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006b04:	4b41      	ldr	r3, [pc, #260]	@ (8006c0c <HAL_UART_MspInit+0x1b4>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006b0a:	4b40      	ldr	r3, [pc, #256]	@ (8006c0c <HAL_UART_MspInit+0x1b4>)
 8006b0c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006b10:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b12:	4b3e      	ldr	r3, [pc, #248]	@ (8006c0c <HAL_UART_MspInit+0x1b4>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006b18:	483c      	ldr	r0, [pc, #240]	@ (8006c0c <HAL_UART_MspInit+0x1b4>)
 8006b1a:	f000 fb6f 	bl	80071fc <HAL_DMA_Init>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8006b24:	f7fd fe0c 	bl	8004740 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a38      	ldr	r2, [pc, #224]	@ (8006c0c <HAL_UART_MspInit+0x1b4>)
 8006b2c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006b2e:	4a37      	ldr	r2, [pc, #220]	@ (8006c0c <HAL_UART_MspInit+0x1b4>)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006b34:	4b37      	ldr	r3, [pc, #220]	@ (8006c14 <HAL_UART_MspInit+0x1bc>)
 8006b36:	4a38      	ldr	r2, [pc, #224]	@ (8006c18 <HAL_UART_MspInit+0x1c0>)
 8006b38:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8006b3a:	4b36      	ldr	r3, [pc, #216]	@ (8006c14 <HAL_UART_MspInit+0x1bc>)
 8006b3c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006b40:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b42:	4b34      	ldr	r3, [pc, #208]	@ (8006c14 <HAL_UART_MspInit+0x1bc>)
 8006b44:	2240      	movs	r2, #64	@ 0x40
 8006b46:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b48:	4b32      	ldr	r3, [pc, #200]	@ (8006c14 <HAL_UART_MspInit+0x1bc>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b4e:	4b31      	ldr	r3, [pc, #196]	@ (8006c14 <HAL_UART_MspInit+0x1bc>)
 8006b50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b54:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b56:	4b2f      	ldr	r3, [pc, #188]	@ (8006c14 <HAL_UART_MspInit+0x1bc>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8006c14 <HAL_UART_MspInit+0x1bc>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006b62:	4b2c      	ldr	r3, [pc, #176]	@ (8006c14 <HAL_UART_MspInit+0x1bc>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006b68:	4b2a      	ldr	r3, [pc, #168]	@ (8006c14 <HAL_UART_MspInit+0x1bc>)
 8006b6a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006b6e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b70:	4b28      	ldr	r3, [pc, #160]	@ (8006c14 <HAL_UART_MspInit+0x1bc>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006b76:	4827      	ldr	r0, [pc, #156]	@ (8006c14 <HAL_UART_MspInit+0x1bc>)
 8006b78:	f000 fb40 	bl	80071fc <HAL_DMA_Init>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8006b82:	f7fd fddd 	bl	8004740 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a22      	ldr	r2, [pc, #136]	@ (8006c14 <HAL_UART_MspInit+0x1bc>)
 8006b8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b8c:	4a21      	ldr	r2, [pc, #132]	@ (8006c14 <HAL_UART_MspInit+0x1bc>)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8006b92:	e031      	b.n	8006bf8 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART6)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a20      	ldr	r2, [pc, #128]	@ (8006c1c <HAL_UART_MspInit+0x1c4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d12c      	bne.n	8006bf8 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	613b      	str	r3, [r7, #16]
 8006ba2:	4b18      	ldr	r3, [pc, #96]	@ (8006c04 <HAL_UART_MspInit+0x1ac>)
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba6:	4a17      	ldr	r2, [pc, #92]	@ (8006c04 <HAL_UART_MspInit+0x1ac>)
 8006ba8:	f043 0320 	orr.w	r3, r3, #32
 8006bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8006bae:	4b15      	ldr	r3, [pc, #84]	@ (8006c04 <HAL_UART_MspInit+0x1ac>)
 8006bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	613b      	str	r3, [r7, #16]
 8006bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	4b11      	ldr	r3, [pc, #68]	@ (8006c04 <HAL_UART_MspInit+0x1ac>)
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc2:	4a10      	ldr	r2, [pc, #64]	@ (8006c04 <HAL_UART_MspInit+0x1ac>)
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8006bca:	4b0e      	ldr	r3, [pc, #56]	@ (8006c04 <HAL_UART_MspInit+0x1ac>)
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006bd6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006be4:	2303      	movs	r3, #3
 8006be6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006be8:	2308      	movs	r3, #8
 8006bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bec:	f107 031c 	add.w	r3, r7, #28
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4805      	ldr	r0, [pc, #20]	@ (8006c08 <HAL_UART_MspInit+0x1b0>)
 8006bf4:	f000 fdec 	bl	80077d0 <HAL_GPIO_Init>
}
 8006bf8:	bf00      	nop
 8006bfa:	3730      	adds	r7, #48	@ 0x30
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40011000 	.word	0x40011000
 8006c04:	40023800 	.word	0x40023800
 8006c08:	40020000 	.word	0x40020000
 8006c0c:	20000604 	.word	0x20000604
 8006c10:	40026440 	.word	0x40026440
 8006c14:	20000664 	.word	0x20000664
 8006c18:	400264b8 	.word	0x400264b8
 8006c1c:	40011400 	.word	0x40011400

08006c20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08c      	sub	sp, #48	@ 0x30
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8006c30:	2300      	movs	r3, #0
 8006c32:	60bb      	str	r3, [r7, #8]
 8006c34:	4b2e      	ldr	r3, [pc, #184]	@ (8006cf0 <HAL_InitTick+0xd0>)
 8006c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c38:	4a2d      	ldr	r2, [pc, #180]	@ (8006cf0 <HAL_InitTick+0xd0>)
 8006c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c40:	4b2b      	ldr	r3, [pc, #172]	@ (8006cf0 <HAL_InitTick+0xd0>)
 8006c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c48:	60bb      	str	r3, [r7, #8]
 8006c4a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006c4c:	f107 020c 	add.w	r2, r7, #12
 8006c50:	f107 0310 	add.w	r3, r7, #16
 8006c54:	4611      	mov	r1, r2
 8006c56:	4618      	mov	r0, r3
 8006c58:	f002 fbd4 	bl	8009404 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006c5c:	f002 fbbe 	bl	80093dc <HAL_RCC_GetPCLK2Freq>
 8006c60:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c64:	4a23      	ldr	r2, [pc, #140]	@ (8006cf4 <HAL_InitTick+0xd4>)
 8006c66:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6a:	0c9b      	lsrs	r3, r3, #18
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8006c70:	4b21      	ldr	r3, [pc, #132]	@ (8006cf8 <HAL_InitTick+0xd8>)
 8006c72:	4a22      	ldr	r2, [pc, #136]	@ (8006cfc <HAL_InitTick+0xdc>)
 8006c74:	601a      	str	r2, [r3, #0]
   * Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8006c76:	4b20      	ldr	r3, [pc, #128]	@ (8006cf8 <HAL_InitTick+0xd8>)
 8006c78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006c7c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8006c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8006cf8 <HAL_InitTick+0xd8>)
 8006c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c82:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8006c84:	4b1c      	ldr	r3, [pc, #112]	@ (8006cf8 <HAL_InitTick+0xd8>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf8 <HAL_InitTick+0xd8>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c90:	4b19      	ldr	r3, [pc, #100]	@ (8006cf8 <HAL_InitTick+0xd8>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8006c96:	4818      	ldr	r0, [pc, #96]	@ (8006cf8 <HAL_InitTick+0xd8>)
 8006c98:	f002 fbe6 	bl	8009468 <HAL_TIM_Base_Init>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8006ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d11b      	bne.n	8006ce2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8006caa:	4813      	ldr	r0, [pc, #76]	@ (8006cf8 <HAL_InitTick+0xd8>)
 8006cac:	f002 fc86 	bl	80095bc <HAL_TIM_Base_Start_IT>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8006cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d111      	bne.n	8006ce2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8006cbe:	2018      	movs	r0, #24
 8006cc0:	f000 fa8e 	bl	80071e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b0f      	cmp	r3, #15
 8006cc8:	d808      	bhi.n	8006cdc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8006cca:	2200      	movs	r2, #0
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	2018      	movs	r0, #24
 8006cd0:	f000 fa6a 	bl	80071a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8006d00 <HAL_InitTick+0xe0>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	e002      	b.n	8006ce2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8006ce2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3730      	adds	r7, #48	@ 0x30
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	431bde83 	.word	0x431bde83
 8006cf8:	20000764 	.word	0x20000764
 8006cfc:	40014000 	.word	0x40014000
 8006d00:	20000024 	.word	0x20000024

08006d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d04:	b480      	push	{r7}
 8006d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006d08:	bf00      	nop
 8006d0a:	e7fd      	b.n	8006d08 <NMI_Handler+0x4>

08006d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d10:	bf00      	nop
 8006d12:	e7fd      	b.n	8006d10 <HardFault_Handler+0x4>

08006d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d18:	bf00      	nop
 8006d1a:	e7fd      	b.n	8006d18 <MemManage_Handler+0x4>

08006d1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d20:	bf00      	nop
 8006d22:	e7fd      	b.n	8006d20 <BusFault_Handler+0x4>

08006d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d28:	bf00      	nop
 8006d2a:	e7fd      	b.n	8006d28 <UsageFault_Handler+0x4>

08006d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006d30:	bf00      	nop
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d3e:	bf00      	nop
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006d4c:	bf00      	nop
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006d56:	b480      	push	{r7}
 8006d58:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006d5a:	bf00      	nop
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8006d68:	4802      	ldr	r0, [pc, #8]	@ (8006d74 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8006d6a:	f002 fce2 	bl	8009732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8006d6e:	bf00      	nop
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000764 	.word	0x20000764

08006d78 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006d7c:	4802      	ldr	r0, [pc, #8]	@ (8006d88 <DMA2_Stream2_IRQHandler+0x10>)
 8006d7e:	f000 faeb 	bl	8007358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006d82:	bf00      	nop
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000604 	.word	0x20000604

08006d8c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006d90:	4802      	ldr	r0, [pc, #8]	@ (8006d9c <DMA2_Stream7_IRQHandler+0x10>)
 8006d92:	f000 fae1 	bl	8007358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8006d96:	bf00      	nop
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000664 	.word	0x20000664

08006da0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  return 1;
 8006da4:	2301      	movs	r3, #1
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <_kill>:

int _kill(int pid, int sig)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006dba:	f004 fe8d 	bl	800bad8 <__errno>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2216      	movs	r2, #22
 8006dc2:	601a      	str	r2, [r3, #0]
  return -1;
 8006dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <_exit>:

void _exit (int status)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff ffe7 	bl	8006db0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006de2:	bf00      	nop
 8006de4:	e7fd      	b.n	8006de2 <_exit+0x12>

08006de6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b086      	sub	sp, #24
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006df2:	2300      	movs	r3, #0
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	e00a      	b.n	8006e0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006df8:	f3af 8000 	nop.w
 8006dfc:	4601      	mov	r1, r0
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	60ba      	str	r2, [r7, #8]
 8006e04:	b2ca      	uxtb	r2, r1
 8006e06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	dbf0      	blt.n	8006df8 <_read+0x12>
  }

  return len;
 8006e16:	687b      	ldr	r3, [r7, #4]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <_close>:
  }
  return len;
}

int _close(int file)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006e48:	605a      	str	r2, [r3, #4]
  return 0;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <_isatty>:

int _isatty(int file)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006e60:	2301      	movs	r3, #1
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006e90:	4a14      	ldr	r2, [pc, #80]	@ (8006ee4 <_sbrk+0x5c>)
 8006e92:	4b15      	ldr	r3, [pc, #84]	@ (8006ee8 <_sbrk+0x60>)
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006e9c:	4b13      	ldr	r3, [pc, #76]	@ (8006eec <_sbrk+0x64>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d102      	bne.n	8006eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006ea4:	4b11      	ldr	r3, [pc, #68]	@ (8006eec <_sbrk+0x64>)
 8006ea6:	4a12      	ldr	r2, [pc, #72]	@ (8006ef0 <_sbrk+0x68>)
 8006ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006eaa:	4b10      	ldr	r3, [pc, #64]	@ (8006eec <_sbrk+0x64>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d207      	bcs.n	8006ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006eb8:	f004 fe0e 	bl	800bad8 <__errno>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	220c      	movs	r2, #12
 8006ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec6:	e009      	b.n	8006edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ec8:	4b08      	ldr	r3, [pc, #32]	@ (8006eec <_sbrk+0x64>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006ece:	4b07      	ldr	r3, [pc, #28]	@ (8006eec <_sbrk+0x64>)
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	4a05      	ldr	r2, [pc, #20]	@ (8006eec <_sbrk+0x64>)
 8006ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006eda:	68fb      	ldr	r3, [r7, #12]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20020000 	.word	0x20020000
 8006ee8:	00000400 	.word	0x00000400
 8006eec:	200007ac 	.word	0x200007ac
 8006ef0:	20000900 	.word	0x20000900

08006ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006ef8:	4b06      	ldr	r3, [pc, #24]	@ (8006f14 <SystemInit+0x20>)
 8006efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006efe:	4a05      	ldr	r2, [pc, #20]	@ (8006f14 <SystemInit+0x20>)
 8006f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006f08:	bf00      	nop
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	e000ed00 	.word	0xe000ed00

08006f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006f18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006f50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006f1c:	f7ff ffea 	bl	8006ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006f20:	480c      	ldr	r0, [pc, #48]	@ (8006f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006f22:	490d      	ldr	r1, [pc, #52]	@ (8006f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006f24:	4a0d      	ldr	r2, [pc, #52]	@ (8006f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f28:	e002      	b.n	8006f30 <LoopCopyDataInit>

08006f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f2e:	3304      	adds	r3, #4

08006f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f34:	d3f9      	bcc.n	8006f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f36:	4a0a      	ldr	r2, [pc, #40]	@ (8006f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006f38:	4c0a      	ldr	r4, [pc, #40]	@ (8006f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f3c:	e001      	b.n	8006f42 <LoopFillZerobss>

08006f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f40:	3204      	adds	r2, #4

08006f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f44:	d3fb      	bcc.n	8006f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006f46:	f004 fdcd 	bl	800bae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f4a:	f7fc fdc5 	bl	8003ad8 <main>
  bx  lr    
 8006f4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f58:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8006f5c:	08012658 	.word	0x08012658
  ldr r2, =_sbss
 8006f60:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8006f64:	20000900 	.word	0x20000900

08006f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f68:	e7fe      	b.n	8006f68 <ADC_IRQHandler>
	...

08006f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006f70:	4b0e      	ldr	r3, [pc, #56]	@ (8006fac <HAL_Init+0x40>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a0d      	ldr	r2, [pc, #52]	@ (8006fac <HAL_Init+0x40>)
 8006f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006fac <HAL_Init+0x40>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a0a      	ldr	r2, [pc, #40]	@ (8006fac <HAL_Init+0x40>)
 8006f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f88:	4b08      	ldr	r3, [pc, #32]	@ (8006fac <HAL_Init+0x40>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a07      	ldr	r2, [pc, #28]	@ (8006fac <HAL_Init+0x40>)
 8006f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f94:	2003      	movs	r0, #3
 8006f96:	f000 f8fc 	bl	8007192 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f9a:	200f      	movs	r0, #15
 8006f9c:	f7ff fe40 	bl	8006c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006fa0:	f7ff fb7e 	bl	80066a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	40023c00 	.word	0x40023c00

08006fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006fb4:	4b06      	ldr	r3, [pc, #24]	@ (8006fd0 <HAL_IncTick+0x20>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	4b06      	ldr	r3, [pc, #24]	@ (8006fd4 <HAL_IncTick+0x24>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	4a04      	ldr	r2, [pc, #16]	@ (8006fd4 <HAL_IncTick+0x24>)
 8006fc2:	6013      	str	r3, [r2, #0]
}
 8006fc4:	bf00      	nop
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	20000028 	.word	0x20000028
 8006fd4:	200007b0 	.word	0x200007b0

08006fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0
  return uwTick;
 8006fdc:	4b03      	ldr	r3, [pc, #12]	@ (8006fec <HAL_GetTick+0x14>)
 8006fde:	681b      	ldr	r3, [r3, #0]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	200007b0 	.word	0x200007b0

08006ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ff8:	f7ff ffee 	bl	8006fd8 <HAL_GetTick>
 8006ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d005      	beq.n	8007016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800700a:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <HAL_Delay+0x44>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4413      	add	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007016:	bf00      	nop
 8007018:	f7ff ffde 	bl	8006fd8 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	429a      	cmp	r2, r3
 8007026:	d8f7      	bhi.n	8007018 <HAL_Delay+0x28>
  {
  }
}
 8007028:	bf00      	nop
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20000028 	.word	0x20000028

08007038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007048:	4b0c      	ldr	r3, [pc, #48]	@ (800707c <__NVIC_SetPriorityGrouping+0x44>)
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007054:	4013      	ands	r3, r2
 8007056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007060:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800706a:	4a04      	ldr	r2, [pc, #16]	@ (800707c <__NVIC_SetPriorityGrouping+0x44>)
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	60d3      	str	r3, [r2, #12]
}
 8007070:	bf00      	nop
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	e000ed00 	.word	0xe000ed00

08007080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007080:	b480      	push	{r7}
 8007082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007084:	4b04      	ldr	r3, [pc, #16]	@ (8007098 <__NVIC_GetPriorityGrouping+0x18>)
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	0a1b      	lsrs	r3, r3, #8
 800708a:	f003 0307 	and.w	r3, r3, #7
}
 800708e:	4618      	mov	r0, r3
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	e000ed00 	.word	0xe000ed00

0800709c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	db0b      	blt.n	80070c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	f003 021f 	and.w	r2, r3, #31
 80070b4:	4907      	ldr	r1, [pc, #28]	@ (80070d4 <__NVIC_EnableIRQ+0x38>)
 80070b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ba:	095b      	lsrs	r3, r3, #5
 80070bc:	2001      	movs	r0, #1
 80070be:	fa00 f202 	lsl.w	r2, r0, r2
 80070c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	e000e100 	.word	0xe000e100

080070d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	6039      	str	r1, [r7, #0]
 80070e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	db0a      	blt.n	8007102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	490c      	ldr	r1, [pc, #48]	@ (8007124 <__NVIC_SetPriority+0x4c>)
 80070f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070f6:	0112      	lsls	r2, r2, #4
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	440b      	add	r3, r1
 80070fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007100:	e00a      	b.n	8007118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	b2da      	uxtb	r2, r3
 8007106:	4908      	ldr	r1, [pc, #32]	@ (8007128 <__NVIC_SetPriority+0x50>)
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	f003 030f 	and.w	r3, r3, #15
 800710e:	3b04      	subs	r3, #4
 8007110:	0112      	lsls	r2, r2, #4
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	440b      	add	r3, r1
 8007116:	761a      	strb	r2, [r3, #24]
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	e000e100 	.word	0xe000e100
 8007128:	e000ed00 	.word	0xe000ed00

0800712c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800712c:	b480      	push	{r7}
 800712e:	b089      	sub	sp, #36	@ 0x24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	f1c3 0307 	rsb	r3, r3, #7
 8007146:	2b04      	cmp	r3, #4
 8007148:	bf28      	it	cs
 800714a:	2304      	movcs	r3, #4
 800714c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	3304      	adds	r3, #4
 8007152:	2b06      	cmp	r3, #6
 8007154:	d902      	bls.n	800715c <NVIC_EncodePriority+0x30>
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	3b03      	subs	r3, #3
 800715a:	e000      	b.n	800715e <NVIC_EncodePriority+0x32>
 800715c:	2300      	movs	r3, #0
 800715e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007160:	f04f 32ff 	mov.w	r2, #4294967295
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	fa02 f303 	lsl.w	r3, r2, r3
 800716a:	43da      	mvns	r2, r3
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	401a      	ands	r2, r3
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007174:	f04f 31ff 	mov.w	r1, #4294967295
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	fa01 f303 	lsl.w	r3, r1, r3
 800717e:	43d9      	mvns	r1, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007184:	4313      	orrs	r3, r2
         );
}
 8007186:	4618      	mov	r0, r3
 8007188:	3724      	adds	r7, #36	@ 0x24
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff ff4c 	bl	8007038 <__NVIC_SetPriorityGrouping>
}
 80071a0:	bf00      	nop
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80071ba:	f7ff ff61 	bl	8007080 <__NVIC_GetPriorityGrouping>
 80071be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	6978      	ldr	r0, [r7, #20]
 80071c6:	f7ff ffb1 	bl	800712c <NVIC_EncodePriority>
 80071ca:	4602      	mov	r2, r0
 80071cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071d0:	4611      	mov	r1, r2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff ff80 	bl	80070d8 <__NVIC_SetPriority>
}
 80071d8:	bf00      	nop
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff ff54 	bl	800709c <__NVIC_EnableIRQ>
}
 80071f4:	bf00      	nop
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007208:	f7ff fee6 	bl	8006fd8 <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e099      	b.n	800734c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0201 	bic.w	r2, r2, #1
 8007236:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007238:	e00f      	b.n	800725a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800723a:	f7ff fecd 	bl	8006fd8 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	2b05      	cmp	r3, #5
 8007246:	d908      	bls.n	800725a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2203      	movs	r2, #3
 8007252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e078      	b.n	800734c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e8      	bne.n	800723a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4b38      	ldr	r3, [pc, #224]	@ (8007354 <HAL_DMA_Init+0x158>)
 8007274:	4013      	ands	r3, r2
 8007276:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007286:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007292:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800729e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d107      	bne.n	80072c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072bc:	4313      	orrs	r3, r2
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f023 0307 	bic.w	r3, r3, #7
 80072da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d117      	bne.n	800731e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00e      	beq.n	800731e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f9e9 	bl	80076d8 <DMA_CheckFifoParam>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d008      	beq.n	800731e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2240      	movs	r2, #64	@ 0x40
 8007310:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800731a:	2301      	movs	r3, #1
 800731c:	e016      	b.n	800734c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f9a0 	bl	800766c <DMA_CalcBaseAndBitshift>
 800732c:	4603      	mov	r3, r0
 800732e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007334:	223f      	movs	r2, #63	@ 0x3f
 8007336:	409a      	lsls	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	f010803f 	.word	0xf010803f

08007358 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007364:	4b8e      	ldr	r3, [pc, #568]	@ (80075a0 <HAL_DMA_IRQHandler+0x248>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a8e      	ldr	r2, [pc, #568]	@ (80075a4 <HAL_DMA_IRQHandler+0x24c>)
 800736a:	fba2 2303 	umull	r2, r3, r2, r3
 800736e:	0a9b      	lsrs	r3, r3, #10
 8007370:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007376:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007382:	2208      	movs	r2, #8
 8007384:	409a      	lsls	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4013      	ands	r3, r2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d01a      	beq.n	80073c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0304 	and.w	r3, r3, #4
 8007398:	2b00      	cmp	r3, #0
 800739a:	d013      	beq.n	80073c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 0204 	bic.w	r2, r2, #4
 80073aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b0:	2208      	movs	r2, #8
 80073b2:	409a      	lsls	r2, r3
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073bc:	f043 0201 	orr.w	r2, r3, #1
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073c8:	2201      	movs	r2, #1
 80073ca:	409a      	lsls	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4013      	ands	r3, r2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d012      	beq.n	80073fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00b      	beq.n	80073fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073e6:	2201      	movs	r2, #1
 80073e8:	409a      	lsls	r2, r3
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f2:	f043 0202 	orr.w	r2, r3, #2
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073fe:	2204      	movs	r2, #4
 8007400:	409a      	lsls	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	4013      	ands	r3, r2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d012      	beq.n	8007430 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00b      	beq.n	8007430 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800741c:	2204      	movs	r2, #4
 800741e:	409a      	lsls	r2, r3
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007428:	f043 0204 	orr.w	r2, r3, #4
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007434:	2210      	movs	r2, #16
 8007436:	409a      	lsls	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4013      	ands	r3, r2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d043      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0308 	and.w	r3, r3, #8
 800744a:	2b00      	cmp	r3, #0
 800744c:	d03c      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007452:	2210      	movs	r2, #16
 8007454:	409a      	lsls	r2, r3
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d018      	beq.n	800749a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d108      	bne.n	8007488 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d024      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	4798      	blx	r3
 8007486:	e01f      	b.n	80074c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01b      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
 8007498:	e016      	b.n	80074c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d107      	bne.n	80074b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 0208 	bic.w	r2, r2, #8
 80074b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074cc:	2220      	movs	r2, #32
 80074ce:	409a      	lsls	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4013      	ands	r3, r2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 808f 	beq.w	80075f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0310 	and.w	r3, r3, #16
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 8087 	beq.w	80075f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ee:	2220      	movs	r2, #32
 80074f0:	409a      	lsls	r2, r3
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b05      	cmp	r3, #5
 8007500:	d136      	bne.n	8007570 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0216 	bic.w	r2, r2, #22
 8007510:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	695a      	ldr	r2, [r3, #20]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007520:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007526:	2b00      	cmp	r3, #0
 8007528:	d103      	bne.n	8007532 <HAL_DMA_IRQHandler+0x1da>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800752e:	2b00      	cmp	r3, #0
 8007530:	d007      	beq.n	8007542 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0208 	bic.w	r2, r2, #8
 8007540:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007546:	223f      	movs	r2, #63	@ 0x3f
 8007548:	409a      	lsls	r2, r3
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007562:	2b00      	cmp	r3, #0
 8007564:	d07e      	beq.n	8007664 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
        }
        return;
 800756e:	e079      	b.n	8007664 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d01d      	beq.n	80075ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10d      	bne.n	80075a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007590:	2b00      	cmp	r3, #0
 8007592:	d031      	beq.n	80075f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
 800759c:	e02c      	b.n	80075f8 <HAL_DMA_IRQHandler+0x2a0>
 800759e:	bf00      	nop
 80075a0:	20000020 	.word	0x20000020
 80075a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d023      	beq.n	80075f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
 80075b8:	e01e      	b.n	80075f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10f      	bne.n	80075e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0210 	bic.w	r2, r2, #16
 80075d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d003      	beq.n	80075f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d032      	beq.n	8007666 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d022      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2205      	movs	r2, #5
 8007610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0201 	bic.w	r2, r2, #1
 8007622:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	3301      	adds	r3, #1
 8007628:	60bb      	str	r3, [r7, #8]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	429a      	cmp	r2, r3
 800762e:	d307      	bcc.n	8007640 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1f2      	bne.n	8007624 <HAL_DMA_IRQHandler+0x2cc>
 800763e:	e000      	b.n	8007642 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007640:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
 8007662:	e000      	b.n	8007666 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007664:	bf00      	nop
    }
  }
}
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	3b10      	subs	r3, #16
 800767c:	4a14      	ldr	r2, [pc, #80]	@ (80076d0 <DMA_CalcBaseAndBitshift+0x64>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	091b      	lsrs	r3, r3, #4
 8007684:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007686:	4a13      	ldr	r2, [pc, #76]	@ (80076d4 <DMA_CalcBaseAndBitshift+0x68>)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2b03      	cmp	r3, #3
 8007698:	d909      	bls.n	80076ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80076a2:	f023 0303 	bic.w	r3, r3, #3
 80076a6:	1d1a      	adds	r2, r3, #4
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80076ac:	e007      	b.n	80076be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	aaaaaaab 	.word	0xaaaaaaab
 80076d4:	08011d5c 	.word	0x08011d5c

080076d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d11f      	bne.n	8007732 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d856      	bhi.n	80077a6 <DMA_CheckFifoParam+0xce>
 80076f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <DMA_CheckFifoParam+0x28>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	08007711 	.word	0x08007711
 8007704:	08007723 	.word	0x08007723
 8007708:	08007711 	.word	0x08007711
 800770c:	080077a7 	.word	0x080077a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007714:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d046      	beq.n	80077aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007720:	e043      	b.n	80077aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007726:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800772a:	d140      	bne.n	80077ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007730:	e03d      	b.n	80077ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800773a:	d121      	bne.n	8007780 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2b03      	cmp	r3, #3
 8007740:	d837      	bhi.n	80077b2 <DMA_CheckFifoParam+0xda>
 8007742:	a201      	add	r2, pc, #4	@ (adr r2, 8007748 <DMA_CheckFifoParam+0x70>)
 8007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007748:	08007759 	.word	0x08007759
 800774c:	0800775f 	.word	0x0800775f
 8007750:	08007759 	.word	0x08007759
 8007754:	08007771 	.word	0x08007771
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
      break;
 800775c:	e030      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007762:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d025      	beq.n	80077b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800776e:	e022      	b.n	80077b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007774:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007778:	d11f      	bne.n	80077ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800777e:	e01c      	b.n	80077ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d903      	bls.n	800778e <DMA_CheckFifoParam+0xb6>
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b03      	cmp	r3, #3
 800778a:	d003      	beq.n	8007794 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800778c:	e018      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	73fb      	strb	r3, [r7, #15]
      break;
 8007792:	e015      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007798:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00e      	beq.n	80077be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	73fb      	strb	r3, [r7, #15]
      break;
 80077a4:	e00b      	b.n	80077be <DMA_CheckFifoParam+0xe6>
      break;
 80077a6:	bf00      	nop
 80077a8:	e00a      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      break;
 80077aa:	bf00      	nop
 80077ac:	e008      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      break;
 80077ae:	bf00      	nop
 80077b0:	e006      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      break;
 80077b2:	bf00      	nop
 80077b4:	e004      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      break;
 80077b6:	bf00      	nop
 80077b8:	e002      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80077ba:	bf00      	nop
 80077bc:	e000      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
      break;
 80077be:	bf00      	nop
    }
  } 
  
  return status; 
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop

080077d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b089      	sub	sp, #36	@ 0x24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80077da:	2300      	movs	r3, #0
 80077dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80077de:	2300      	movs	r3, #0
 80077e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
 80077ea:	e159      	b.n	8007aa0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80077ec:	2201      	movs	r2, #1
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	fa02 f303 	lsl.w	r3, r2, r3
 80077f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	4013      	ands	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	429a      	cmp	r2, r3
 8007806:	f040 8148 	bne.w	8007a9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f003 0303 	and.w	r3, r3, #3
 8007812:	2b01      	cmp	r3, #1
 8007814:	d005      	beq.n	8007822 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800781e:	2b02      	cmp	r3, #2
 8007820:	d130      	bne.n	8007884 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	2203      	movs	r2, #3
 800782e:	fa02 f303 	lsl.w	r3, r2, r3
 8007832:	43db      	mvns	r3, r3
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	4013      	ands	r3, r2
 8007838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	fa02 f303 	lsl.w	r3, r2, r3
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	4313      	orrs	r3, r2
 800784a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007858:	2201      	movs	r2, #1
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	fa02 f303 	lsl.w	r3, r2, r3
 8007860:	43db      	mvns	r3, r3
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	4013      	ands	r3, r2
 8007866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	091b      	lsrs	r3, r3, #4
 800786e:	f003 0201 	and.w	r2, r3, #1
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	fa02 f303 	lsl.w	r3, r2, r3
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	4313      	orrs	r3, r2
 800787c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	2b03      	cmp	r3, #3
 800788e:	d017      	beq.n	80078c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	2203      	movs	r2, #3
 800789c:	fa02 f303 	lsl.w	r3, r2, r3
 80078a0:	43db      	mvns	r3, r3
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	4013      	ands	r3, r2
 80078a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	fa02 f303 	lsl.w	r3, r2, r3
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f003 0303 	and.w	r3, r3, #3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d123      	bne.n	8007914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	08da      	lsrs	r2, r3, #3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3208      	adds	r2, #8
 80078d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	220f      	movs	r2, #15
 80078e4:	fa02 f303 	lsl.w	r3, r2, r3
 80078e8:	43db      	mvns	r3, r3
 80078ea:	69ba      	ldr	r2, [r7, #24]
 80078ec:	4013      	ands	r3, r2
 80078ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	691a      	ldr	r2, [r3, #16]
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	4313      	orrs	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	08da      	lsrs	r2, r3, #3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3208      	adds	r2, #8
 800790e:	69b9      	ldr	r1, [r7, #24]
 8007910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	2203      	movs	r2, #3
 8007920:	fa02 f303 	lsl.w	r3, r2, r3
 8007924:	43db      	mvns	r3, r3
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	4013      	ands	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f003 0203 	and.w	r2, r3, #3
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	fa02 f303 	lsl.w	r3, r2, r3
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	4313      	orrs	r3, r2
 8007940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69ba      	ldr	r2, [r7, #24]
 8007946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 80a2 	beq.w	8007a9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007956:	2300      	movs	r3, #0
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	4b57      	ldr	r3, [pc, #348]	@ (8007ab8 <HAL_GPIO_Init+0x2e8>)
 800795c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800795e:	4a56      	ldr	r2, [pc, #344]	@ (8007ab8 <HAL_GPIO_Init+0x2e8>)
 8007960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007964:	6453      	str	r3, [r2, #68]	@ 0x44
 8007966:	4b54      	ldr	r3, [pc, #336]	@ (8007ab8 <HAL_GPIO_Init+0x2e8>)
 8007968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800796a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007972:	4a52      	ldr	r2, [pc, #328]	@ (8007abc <HAL_GPIO_Init+0x2ec>)
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	089b      	lsrs	r3, r3, #2
 8007978:	3302      	adds	r3, #2
 800797a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800797e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	f003 0303 	and.w	r3, r3, #3
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	220f      	movs	r2, #15
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	43db      	mvns	r3, r3
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	4013      	ands	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a49      	ldr	r2, [pc, #292]	@ (8007ac0 <HAL_GPIO_Init+0x2f0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d019      	beq.n	80079d2 <HAL_GPIO_Init+0x202>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a48      	ldr	r2, [pc, #288]	@ (8007ac4 <HAL_GPIO_Init+0x2f4>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d013      	beq.n	80079ce <HAL_GPIO_Init+0x1fe>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a47      	ldr	r2, [pc, #284]	@ (8007ac8 <HAL_GPIO_Init+0x2f8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d00d      	beq.n	80079ca <HAL_GPIO_Init+0x1fa>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a46      	ldr	r2, [pc, #280]	@ (8007acc <HAL_GPIO_Init+0x2fc>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d007      	beq.n	80079c6 <HAL_GPIO_Init+0x1f6>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a45      	ldr	r2, [pc, #276]	@ (8007ad0 <HAL_GPIO_Init+0x300>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d101      	bne.n	80079c2 <HAL_GPIO_Init+0x1f2>
 80079be:	2304      	movs	r3, #4
 80079c0:	e008      	b.n	80079d4 <HAL_GPIO_Init+0x204>
 80079c2:	2307      	movs	r3, #7
 80079c4:	e006      	b.n	80079d4 <HAL_GPIO_Init+0x204>
 80079c6:	2303      	movs	r3, #3
 80079c8:	e004      	b.n	80079d4 <HAL_GPIO_Init+0x204>
 80079ca:	2302      	movs	r3, #2
 80079cc:	e002      	b.n	80079d4 <HAL_GPIO_Init+0x204>
 80079ce:	2301      	movs	r3, #1
 80079d0:	e000      	b.n	80079d4 <HAL_GPIO_Init+0x204>
 80079d2:	2300      	movs	r3, #0
 80079d4:	69fa      	ldr	r2, [r7, #28]
 80079d6:	f002 0203 	and.w	r2, r2, #3
 80079da:	0092      	lsls	r2, r2, #2
 80079dc:	4093      	lsls	r3, r2
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079e4:	4935      	ldr	r1, [pc, #212]	@ (8007abc <HAL_GPIO_Init+0x2ec>)
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	089b      	lsrs	r3, r3, #2
 80079ea:	3302      	adds	r3, #2
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079f2:	4b38      	ldr	r3, [pc, #224]	@ (8007ad4 <HAL_GPIO_Init+0x304>)
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	43db      	mvns	r3, r3
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	4013      	ands	r3, r2
 8007a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a16:	4a2f      	ldr	r2, [pc, #188]	@ (8007ad4 <HAL_GPIO_Init+0x304>)
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8007ad4 <HAL_GPIO_Init+0x304>)
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	43db      	mvns	r3, r3
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a40:	4a24      	ldr	r2, [pc, #144]	@ (8007ad4 <HAL_GPIO_Init+0x304>)
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007a46:	4b23      	ldr	r3, [pc, #140]	@ (8007ad4 <HAL_GPIO_Init+0x304>)
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	43db      	mvns	r3, r3
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	4013      	ands	r3, r2
 8007a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8007ad4 <HAL_GPIO_Init+0x304>)
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a70:	4b18      	ldr	r3, [pc, #96]	@ (8007ad4 <HAL_GPIO_Init+0x304>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	43db      	mvns	r3, r3
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007a8c:	69ba      	ldr	r2, [r7, #24]
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007a94:	4a0f      	ldr	r2, [pc, #60]	@ (8007ad4 <HAL_GPIO_Init+0x304>)
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	61fb      	str	r3, [r7, #28]
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	2b0f      	cmp	r3, #15
 8007aa4:	f67f aea2 	bls.w	80077ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	3724      	adds	r7, #36	@ 0x24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	40023800 	.word	0x40023800
 8007abc:	40013800 	.word	0x40013800
 8007ac0:	40020000 	.word	0x40020000
 8007ac4:	40020400 	.word	0x40020400
 8007ac8:	40020800 	.word	0x40020800
 8007acc:	40020c00 	.word	0x40020c00
 8007ad0:	40021000 	.word	0x40021000
 8007ad4:	40013c00 	.word	0x40013c00

08007ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	807b      	strh	r3, [r7, #2]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ae8:	787b      	ldrb	r3, [r7, #1]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007aee:	887a      	ldrh	r2, [r7, #2]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007af4:	e003      	b.n	8007afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007af6:	887b      	ldrh	r3, [r7, #2]
 8007af8:	041a      	lsls	r2, r3, #16
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	619a      	str	r2, [r3, #24]
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
	...

08007b0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e12b      	b.n	8007d76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d106      	bne.n	8007b38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7fe fddc 	bl	80066f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2224      	movs	r2, #36	@ 0x24
 8007b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0201 	bic.w	r2, r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007b70:	f001 fc20 	bl	80093b4 <HAL_RCC_GetPCLK1Freq>
 8007b74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	4a81      	ldr	r2, [pc, #516]	@ (8007d80 <HAL_I2C_Init+0x274>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d807      	bhi.n	8007b90 <HAL_I2C_Init+0x84>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4a80      	ldr	r2, [pc, #512]	@ (8007d84 <HAL_I2C_Init+0x278>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	bf94      	ite	ls
 8007b88:	2301      	movls	r3, #1
 8007b8a:	2300      	movhi	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	e006      	b.n	8007b9e <HAL_I2C_Init+0x92>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4a7d      	ldr	r2, [pc, #500]	@ (8007d88 <HAL_I2C_Init+0x27c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	bf94      	ite	ls
 8007b98:	2301      	movls	r3, #1
 8007b9a:	2300      	movhi	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e0e7      	b.n	8007d76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4a78      	ldr	r2, [pc, #480]	@ (8007d8c <HAL_I2C_Init+0x280>)
 8007baa:	fba2 2303 	umull	r2, r3, r2, r3
 8007bae:	0c9b      	lsrs	r3, r3, #18
 8007bb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	4a6a      	ldr	r2, [pc, #424]	@ (8007d80 <HAL_I2C_Init+0x274>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d802      	bhi.n	8007be0 <HAL_I2C_Init+0xd4>
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	e009      	b.n	8007bf4 <HAL_I2C_Init+0xe8>
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007be6:	fb02 f303 	mul.w	r3, r2, r3
 8007bea:	4a69      	ldr	r2, [pc, #420]	@ (8007d90 <HAL_I2C_Init+0x284>)
 8007bec:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf0:	099b      	lsrs	r3, r3, #6
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	6812      	ldr	r2, [r2, #0]
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007c06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	495c      	ldr	r1, [pc, #368]	@ (8007d80 <HAL_I2C_Init+0x274>)
 8007c10:	428b      	cmp	r3, r1
 8007c12:	d819      	bhi.n	8007c48 <HAL_I2C_Init+0x13c>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	1e59      	subs	r1, r3, #1
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	005b      	lsls	r3, r3, #1
 8007c1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c22:	1c59      	adds	r1, r3, #1
 8007c24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007c28:	400b      	ands	r3, r1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <HAL_I2C_Init+0x138>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	1e59      	subs	r1, r3, #1
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c42:	e051      	b.n	8007ce8 <HAL_I2C_Init+0x1dc>
 8007c44:	2304      	movs	r3, #4
 8007c46:	e04f      	b.n	8007ce8 <HAL_I2C_Init+0x1dc>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d111      	bne.n	8007c74 <HAL_I2C_Init+0x168>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	1e58      	subs	r0, r3, #1
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6859      	ldr	r1, [r3, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	440b      	add	r3, r1
 8007c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c62:	3301      	adds	r3, #1
 8007c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bf0c      	ite	eq
 8007c6c:	2301      	moveq	r3, #1
 8007c6e:	2300      	movne	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	e012      	b.n	8007c9a <HAL_I2C_Init+0x18e>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	1e58      	subs	r0, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6859      	ldr	r1, [r3, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	440b      	add	r3, r1
 8007c82:	0099      	lsls	r1, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bf0c      	ite	eq
 8007c94:	2301      	moveq	r3, #1
 8007c96:	2300      	movne	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <HAL_I2C_Init+0x196>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e022      	b.n	8007ce8 <HAL_I2C_Init+0x1dc>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10e      	bne.n	8007cc8 <HAL_I2C_Init+0x1bc>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	1e58      	subs	r0, r3, #1
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6859      	ldr	r1, [r3, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	440b      	add	r3, r1
 8007cb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cc6:	e00f      	b.n	8007ce8 <HAL_I2C_Init+0x1dc>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	1e58      	subs	r0, r3, #1
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6859      	ldr	r1, [r3, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	440b      	add	r3, r1
 8007cd6:	0099      	lsls	r1, r3, #2
 8007cd8:	440b      	add	r3, r1
 8007cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cde:	3301      	adds	r3, #1
 8007ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ce4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ce8:	6879      	ldr	r1, [r7, #4]
 8007cea:	6809      	ldr	r1, [r1, #0]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69da      	ldr	r2, [r3, #28]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007d16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6911      	ldr	r1, [r2, #16]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	68d2      	ldr	r2, [r2, #12]
 8007d22:	4311      	orrs	r1, r2
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6812      	ldr	r2, [r2, #0]
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	695a      	ldr	r2, [r3, #20]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0201 	orr.w	r2, r2, #1
 8007d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	000186a0 	.word	0x000186a0
 8007d84:	001e847f 	.word	0x001e847f
 8007d88:	003d08ff 	.word	0x003d08ff
 8007d8c:	431bde83 	.word	0x431bde83
 8007d90:	10624dd3 	.word	0x10624dd3

08007d94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af02      	add	r7, sp, #8
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	4611      	mov	r1, r2
 8007da0:	461a      	mov	r2, r3
 8007da2:	4603      	mov	r3, r0
 8007da4:	817b      	strh	r3, [r7, #10]
 8007da6:	460b      	mov	r3, r1
 8007da8:	813b      	strh	r3, [r7, #8]
 8007daa:	4613      	mov	r3, r2
 8007dac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007dae:	f7ff f913 	bl	8006fd8 <HAL_GetTick>
 8007db2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b20      	cmp	r3, #32
 8007dbe:	f040 80d9 	bne.w	8007f74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	2319      	movs	r3, #25
 8007dc8:	2201      	movs	r2, #1
 8007dca:	496d      	ldr	r1, [pc, #436]	@ (8007f80 <HAL_I2C_Mem_Write+0x1ec>)
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 fc8b 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e0cc      	b.n	8007f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d101      	bne.n	8007dea <HAL_I2C_Mem_Write+0x56>
 8007de6:	2302      	movs	r3, #2
 8007de8:	e0c5      	b.n	8007f76 <HAL_I2C_Mem_Write+0x1e2>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d007      	beq.n	8007e10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f042 0201 	orr.w	r2, r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2221      	movs	r2, #33	@ 0x21
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2240      	movs	r2, #64	@ 0x40
 8007e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a3a      	ldr	r2, [r7, #32]
 8007e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4a4d      	ldr	r2, [pc, #308]	@ (8007f84 <HAL_I2C_Mem_Write+0x1f0>)
 8007e50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e52:	88f8      	ldrh	r0, [r7, #6]
 8007e54:	893a      	ldrh	r2, [r7, #8]
 8007e56:	8979      	ldrh	r1, [r7, #10]
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	9301      	str	r3, [sp, #4]
 8007e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	4603      	mov	r3, r0
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 fac2 	bl	80083ec <I2C_RequestMemoryWrite>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d052      	beq.n	8007f14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e081      	b.n	8007f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f000 fd50 	bl	800891c <I2C_WaitOnTXEFlagUntilTimeout>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00d      	beq.n	8007e9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d107      	bne.n	8007e9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e06b      	b.n	8007f76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea2:	781a      	ldrb	r2, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eae:	1c5a      	adds	r2, r3, #1
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d11b      	bne.n	8007f14 <HAL_I2C_Mem_Write+0x180>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d017      	beq.n	8007f14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee8:	781a      	ldrb	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007efe:	3b01      	subs	r3, #1
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1aa      	bne.n	8007e72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 fd43 	bl	80089ac <I2C_WaitOnBTFFlagUntilTimeout>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00d      	beq.n	8007f48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d107      	bne.n	8007f44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e016      	b.n	8007f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	e000      	b.n	8007f76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007f74:	2302      	movs	r3, #2
  }
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	00100002 	.word	0x00100002
 8007f84:	ffff0000 	.word	0xffff0000

08007f88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08c      	sub	sp, #48	@ 0x30
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	4608      	mov	r0, r1
 8007f92:	4611      	mov	r1, r2
 8007f94:	461a      	mov	r2, r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	817b      	strh	r3, [r7, #10]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	813b      	strh	r3, [r7, #8]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fa2:	f7ff f819 	bl	8006fd8 <HAL_GetTick>
 8007fa6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b20      	cmp	r3, #32
 8007fb2:	f040 8214 	bne.w	80083de <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	2319      	movs	r3, #25
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	497b      	ldr	r1, [pc, #492]	@ (80081ac <HAL_I2C_Mem_Read+0x224>)
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 fb91 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007fcc:	2302      	movs	r3, #2
 8007fce:	e207      	b.n	80083e0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_I2C_Mem_Read+0x56>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e200      	b.n	80083e0 <HAL_I2C_Mem_Read+0x458>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d007      	beq.n	8008004 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0201 	orr.w	r2, r2, #1
 8008002:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008012:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2222      	movs	r2, #34	@ 0x22
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2240      	movs	r2, #64	@ 0x40
 8008020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800802e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008034:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800803a:	b29a      	uxth	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4a5b      	ldr	r2, [pc, #364]	@ (80081b0 <HAL_I2C_Mem_Read+0x228>)
 8008044:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008046:	88f8      	ldrh	r0, [r7, #6]
 8008048:	893a      	ldrh	r2, [r7, #8]
 800804a:	8979      	ldrh	r1, [r7, #10]
 800804c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804e:	9301      	str	r3, [sp, #4]
 8008050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	4603      	mov	r3, r0
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f000 fa5e 	bl	8008518 <I2C_RequestMemoryRead>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e1bc      	b.n	80083e0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800806a:	2b00      	cmp	r3, #0
 800806c:	d113      	bne.n	8008096 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800806e:	2300      	movs	r3, #0
 8008070:	623b      	str	r3, [r7, #32]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	623b      	str	r3, [r7, #32]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	623b      	str	r3, [r7, #32]
 8008082:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	e190      	b.n	80083b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800809a:	2b01      	cmp	r3, #1
 800809c:	d11b      	bne.n	80080d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ae:	2300      	movs	r3, #0
 80080b0:	61fb      	str	r3, [r7, #28]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	61fb      	str	r3, [r7, #28]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	61fb      	str	r3, [r7, #28]
 80080c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	e170      	b.n	80083b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d11b      	bne.n	8008116 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080fe:	2300      	movs	r3, #0
 8008100:	61bb      	str	r3, [r7, #24]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	61bb      	str	r3, [r7, #24]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	61bb      	str	r3, [r7, #24]
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	e150      	b.n	80083b8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008116:	2300      	movs	r3, #0
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	617b      	str	r3, [r7, #20]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	617b      	str	r3, [r7, #20]
 800812a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800812c:	e144      	b.n	80083b8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008132:	2b03      	cmp	r3, #3
 8008134:	f200 80f1 	bhi.w	800831a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800813c:	2b01      	cmp	r3, #1
 800813e:	d123      	bne.n	8008188 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008142:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 fc79 	bl	8008a3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e145      	b.n	80083e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	691a      	ldr	r2, [r3, #16]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815e:	b2d2      	uxtb	r2, r2
 8008160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008170:	3b01      	subs	r3, #1
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b01      	subs	r3, #1
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008186:	e117      	b.n	80083b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800818c:	2b02      	cmp	r3, #2
 800818e:	d14e      	bne.n	800822e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008196:	2200      	movs	r2, #0
 8008198:	4906      	ldr	r1, [pc, #24]	@ (80081b4 <HAL_I2C_Mem_Read+0x22c>)
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 faa4 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d008      	beq.n	80081b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e11a      	b.n	80083e0 <HAL_I2C_Mem_Read+0x458>
 80081aa:	bf00      	nop
 80081ac:	00100002 	.word	0x00100002
 80081b0:	ffff0000 	.word	0xffff0000
 80081b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691a      	ldr	r2, [r3, #16]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	691a      	ldr	r2, [r3, #16]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008204:	b2d2      	uxtb	r2, r2
 8008206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008216:	3b01      	subs	r3, #1
 8008218:	b29a      	uxth	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008222:	b29b      	uxth	r3, r3
 8008224:	3b01      	subs	r3, #1
 8008226:	b29a      	uxth	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800822c:	e0c4      	b.n	80083b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008234:	2200      	movs	r2, #0
 8008236:	496c      	ldr	r1, [pc, #432]	@ (80083e8 <HAL_I2C_Mem_Read+0x460>)
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 fa55 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e0cb      	b.n	80083e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008256:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	691a      	ldr	r2, [r3, #16]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008262:	b2d2      	uxtb	r2, r2
 8008264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008274:	3b01      	subs	r3, #1
 8008276:	b29a      	uxth	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008280:	b29b      	uxth	r3, r3
 8008282:	3b01      	subs	r3, #1
 8008284:	b29a      	uxth	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008290:	2200      	movs	r2, #0
 8008292:	4955      	ldr	r1, [pc, #340]	@ (80083e8 <HAL_I2C_Mem_Read+0x460>)
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f000 fa27 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e09d      	b.n	80083e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	691a      	ldr	r2, [r3, #16]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082be:	b2d2      	uxtb	r2, r2
 80082c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082d0:	3b01      	subs	r3, #1
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082dc:	b29b      	uxth	r3, r3
 80082de:	3b01      	subs	r3, #1
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	691a      	ldr	r2, [r3, #16]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f0:	b2d2      	uxtb	r2, r2
 80082f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f8:	1c5a      	adds	r2, r3, #1
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008302:	3b01      	subs	r3, #1
 8008304:	b29a      	uxth	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800830e:	b29b      	uxth	r3, r3
 8008310:	3b01      	subs	r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008318:	e04e      	b.n	80083b8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800831a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800831c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 fb8c 	bl	8008a3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e058      	b.n	80083e0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	691a      	ldr	r2, [r3, #16]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008338:	b2d2      	uxtb	r2, r2
 800833a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800834a:	3b01      	subs	r3, #1
 800834c:	b29a      	uxth	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008356:	b29b      	uxth	r3, r3
 8008358:	3b01      	subs	r3, #1
 800835a:	b29a      	uxth	r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	f003 0304 	and.w	r3, r3, #4
 800836a:	2b04      	cmp	r3, #4
 800836c:	d124      	bne.n	80083b8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008372:	2b03      	cmp	r3, #3
 8008374:	d107      	bne.n	8008386 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008384:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	691a      	ldr	r2, [r3, #16]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008390:	b2d2      	uxtb	r2, r2
 8008392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008398:	1c5a      	adds	r2, r3, #1
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083a2:	3b01      	subs	r3, #1
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	3b01      	subs	r3, #1
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f47f aeb6 	bne.w	800812e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	e000      	b.n	80083e0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80083de:	2302      	movs	r3, #2
  }
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3728      	adds	r7, #40	@ 0x28
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	00010004 	.word	0x00010004

080083ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	4608      	mov	r0, r1
 80083f6:	4611      	mov	r1, r2
 80083f8:	461a      	mov	r2, r3
 80083fa:	4603      	mov	r3, r0
 80083fc:	817b      	strh	r3, [r7, #10]
 80083fe:	460b      	mov	r3, r1
 8008400:	813b      	strh	r3, [r7, #8]
 8008402:	4613      	mov	r3, r2
 8008404:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008414:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	2200      	movs	r2, #0
 800841e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 f960 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00d      	beq.n	800844a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800843c:	d103      	bne.n	8008446 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008444:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e05f      	b.n	800850a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800844a:	897b      	ldrh	r3, [r7, #10]
 800844c:	b2db      	uxtb	r3, r3
 800844e:	461a      	mov	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008458:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800845a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845c:	6a3a      	ldr	r2, [r7, #32]
 800845e:	492d      	ldr	r1, [pc, #180]	@ (8008514 <I2C_RequestMemoryWrite+0x128>)
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 f9bb 	bl	80087dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e04c      	b.n	800850a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008470:	2300      	movs	r3, #0
 8008472:	617b      	str	r3, [r7, #20]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	617b      	str	r3, [r7, #20]
 8008484:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008488:	6a39      	ldr	r1, [r7, #32]
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 fa46 	bl	800891c <I2C_WaitOnTXEFlagUntilTimeout>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00d      	beq.n	80084b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849a:	2b04      	cmp	r3, #4
 800849c:	d107      	bne.n	80084ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e02b      	b.n	800850a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084b2:	88fb      	ldrh	r3, [r7, #6]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d105      	bne.n	80084c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084b8:	893b      	ldrh	r3, [r7, #8]
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	611a      	str	r2, [r3, #16]
 80084c2:	e021      	b.n	8008508 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80084c4:	893b      	ldrh	r3, [r7, #8]
 80084c6:	0a1b      	lsrs	r3, r3, #8
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084d4:	6a39      	ldr	r1, [r7, #32]
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f000 fa20 	bl	800891c <I2C_WaitOnTXEFlagUntilTimeout>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00d      	beq.n	80084fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	d107      	bne.n	80084fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e005      	b.n	800850a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084fe:	893b      	ldrh	r3, [r7, #8]
 8008500:	b2da      	uxtb	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	00010002 	.word	0x00010002

08008518 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af02      	add	r7, sp, #8
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	4608      	mov	r0, r1
 8008522:	4611      	mov	r1, r2
 8008524:	461a      	mov	r2, r3
 8008526:	4603      	mov	r3, r0
 8008528:	817b      	strh	r3, [r7, #10]
 800852a:	460b      	mov	r3, r1
 800852c:	813b      	strh	r3, [r7, #8]
 800852e:	4613      	mov	r3, r2
 8008530:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008540:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008550:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	2200      	movs	r2, #0
 800855a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 f8c2 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00d      	beq.n	8008586 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008578:	d103      	bne.n	8008582 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008580:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e0aa      	b.n	80086dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008586:	897b      	ldrh	r3, [r7, #10]
 8008588:	b2db      	uxtb	r3, r3
 800858a:	461a      	mov	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008594:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008598:	6a3a      	ldr	r2, [r7, #32]
 800859a:	4952      	ldr	r1, [pc, #328]	@ (80086e4 <I2C_RequestMemoryRead+0x1cc>)
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 f91d 	bl	80087dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e097      	b.n	80086dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085c4:	6a39      	ldr	r1, [r7, #32]
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 f9a8 	bl	800891c <I2C_WaitOnTXEFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00d      	beq.n	80085ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	d107      	bne.n	80085ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e076      	b.n	80086dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085ee:	88fb      	ldrh	r3, [r7, #6]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d105      	bne.n	8008600 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085f4:	893b      	ldrh	r3, [r7, #8]
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	611a      	str	r2, [r3, #16]
 80085fe:	e021      	b.n	8008644 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008600:	893b      	ldrh	r3, [r7, #8]
 8008602:	0a1b      	lsrs	r3, r3, #8
 8008604:	b29b      	uxth	r3, r3
 8008606:	b2da      	uxtb	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800860e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008610:	6a39      	ldr	r1, [r7, #32]
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f000 f982 	bl	800891c <I2C_WaitOnTXEFlagUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00d      	beq.n	800863a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008622:	2b04      	cmp	r3, #4
 8008624:	d107      	bne.n	8008636 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008634:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e050      	b.n	80086dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800863a:	893b      	ldrh	r3, [r7, #8]
 800863c:	b2da      	uxtb	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008646:	6a39      	ldr	r1, [r7, #32]
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f967 	bl	800891c <I2C_WaitOnTXEFlagUntilTimeout>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00d      	beq.n	8008670 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008658:	2b04      	cmp	r3, #4
 800865a:	d107      	bne.n	800866c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800866a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e035      	b.n	80086dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800867e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	2200      	movs	r2, #0
 8008688:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 f82b 	bl	80086e8 <I2C_WaitOnFlagUntilTimeout>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00d      	beq.n	80086b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086a6:	d103      	bne.n	80086b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e013      	b.n	80086dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80086b4:	897b      	ldrh	r3, [r7, #10]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	f043 0301 	orr.w	r3, r3, #1
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c6:	6a3a      	ldr	r2, [r7, #32]
 80086c8:	4906      	ldr	r1, [pc, #24]	@ (80086e4 <I2C_RequestMemoryRead+0x1cc>)
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 f886 	bl	80087dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	00010002 	.word	0x00010002

080086e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	603b      	str	r3, [r7, #0]
 80086f4:	4613      	mov	r3, r2
 80086f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086f8:	e048      	b.n	800878c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008700:	d044      	beq.n	800878c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008702:	f7fe fc69 	bl	8006fd8 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	429a      	cmp	r2, r3
 8008710:	d302      	bcc.n	8008718 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d139      	bne.n	800878c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	0c1b      	lsrs	r3, r3, #16
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b01      	cmp	r3, #1
 8008720:	d10d      	bne.n	800873e <I2C_WaitOnFlagUntilTimeout+0x56>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	43da      	mvns	r2, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	4013      	ands	r3, r2
 800872e:	b29b      	uxth	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	bf0c      	ite	eq
 8008734:	2301      	moveq	r3, #1
 8008736:	2300      	movne	r3, #0
 8008738:	b2db      	uxtb	r3, r3
 800873a:	461a      	mov	r2, r3
 800873c:	e00c      	b.n	8008758 <I2C_WaitOnFlagUntilTimeout+0x70>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	43da      	mvns	r2, r3
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4013      	ands	r3, r2
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	bf0c      	ite	eq
 8008750:	2301      	moveq	r3, #1
 8008752:	2300      	movne	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	429a      	cmp	r2, r3
 800875c:	d116      	bne.n	800878c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2220      	movs	r2, #32
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008778:	f043 0220 	orr.w	r2, r3, #32
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e023      	b.n	80087d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	0c1b      	lsrs	r3, r3, #16
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b01      	cmp	r3, #1
 8008794:	d10d      	bne.n	80087b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	43da      	mvns	r2, r3
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4013      	ands	r3, r2
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	bf0c      	ite	eq
 80087a8:	2301      	moveq	r3, #1
 80087aa:	2300      	movne	r3, #0
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	461a      	mov	r2, r3
 80087b0:	e00c      	b.n	80087cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	43da      	mvns	r2, r3
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	4013      	ands	r3, r2
 80087be:	b29b      	uxth	r3, r3
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	bf0c      	ite	eq
 80087c4:	2301      	moveq	r3, #1
 80087c6:	2300      	movne	r3, #0
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	461a      	mov	r2, r3
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d093      	beq.n	80086fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087ea:	e071      	b.n	80088d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087fa:	d123      	bne.n	8008844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800880a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008814:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2220      	movs	r2, #32
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008830:	f043 0204 	orr.w	r2, r3, #4
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e067      	b.n	8008914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884a:	d041      	beq.n	80088d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800884c:	f7fe fbc4 	bl	8006fd8 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	429a      	cmp	r2, r3
 800885a:	d302      	bcc.n	8008862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d136      	bne.n	80088d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	0c1b      	lsrs	r3, r3, #16
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b01      	cmp	r3, #1
 800886a:	d10c      	bne.n	8008886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	43da      	mvns	r2, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	4013      	ands	r3, r2
 8008878:	b29b      	uxth	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	bf14      	ite	ne
 800887e:	2301      	movne	r3, #1
 8008880:	2300      	moveq	r3, #0
 8008882:	b2db      	uxtb	r3, r3
 8008884:	e00b      	b.n	800889e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	43da      	mvns	r2, r3
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	4013      	ands	r3, r2
 8008892:	b29b      	uxth	r3, r3
 8008894:	2b00      	cmp	r3, #0
 8008896:	bf14      	ite	ne
 8008898:	2301      	movne	r3, #1
 800889a:	2300      	moveq	r3, #0
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d016      	beq.n	80088d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2220      	movs	r2, #32
 80088ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088bc:	f043 0220 	orr.w	r2, r3, #32
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e021      	b.n	8008914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	0c1b      	lsrs	r3, r3, #16
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d10c      	bne.n	80088f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	43da      	mvns	r2, r3
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	4013      	ands	r3, r2
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bf14      	ite	ne
 80088ec:	2301      	movne	r3, #1
 80088ee:	2300      	moveq	r3, #0
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	e00b      	b.n	800890c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	43da      	mvns	r2, r3
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4013      	ands	r3, r2
 8008900:	b29b      	uxth	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	bf14      	ite	ne
 8008906:	2301      	movne	r3, #1
 8008908:	2300      	moveq	r3, #0
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b00      	cmp	r3, #0
 800890e:	f47f af6d 	bne.w	80087ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008928:	e034      	b.n	8008994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 f8e3 	bl	8008af6 <I2C_IsAcknowledgeFailed>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e034      	b.n	80089a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008940:	d028      	beq.n	8008994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008942:	f7fe fb49 	bl	8006fd8 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	429a      	cmp	r2, r3
 8008950:	d302      	bcc.n	8008958 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d11d      	bne.n	8008994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008962:	2b80      	cmp	r3, #128	@ 0x80
 8008964:	d016      	beq.n	8008994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2220      	movs	r2, #32
 8008970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008980:	f043 0220 	orr.w	r2, r3, #32
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e007      	b.n	80089a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800899e:	2b80      	cmp	r3, #128	@ 0x80
 80089a0:	d1c3      	bne.n	800892a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089b8:	e034      	b.n	8008a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 f89b 	bl	8008af6 <I2C_IsAcknowledgeFailed>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e034      	b.n	8008a34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d0:	d028      	beq.n	8008a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089d2:	f7fe fb01 	bl	8006fd8 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d302      	bcc.n	80089e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d11d      	bne.n	8008a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	f003 0304 	and.w	r3, r3, #4
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d016      	beq.n	8008a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2220      	movs	r2, #32
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a10:	f043 0220 	orr.w	r2, r3, #32
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e007      	b.n	8008a34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	f003 0304 	and.w	r3, r3, #4
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	d1c3      	bne.n	80089ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a48:	e049      	b.n	8008ade <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	f003 0310 	and.w	r3, r3, #16
 8008a54:	2b10      	cmp	r3, #16
 8008a56:	d119      	bne.n	8008a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f06f 0210 	mvn.w	r2, #16
 8008a60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e030      	b.n	8008aee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a8c:	f7fe faa4 	bl	8006fd8 <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d302      	bcc.n	8008aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d11d      	bne.n	8008ade <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aac:	2b40      	cmp	r3, #64	@ 0x40
 8008aae:	d016      	beq.n	8008ade <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aca:	f043 0220 	orr.w	r2, r3, #32
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e007      	b.n	8008aee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ae8:	2b40      	cmp	r3, #64	@ 0x40
 8008aea:	d1ae      	bne.n	8008a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b083      	sub	sp, #12
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b0c:	d11b      	bne.n	8008b46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008b16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b32:	f043 0204 	orr.w	r2, r3, #4
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e000      	b.n	8008b48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d101      	bne.n	8008b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e267      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d075      	beq.n	8008c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008b72:	4b88      	ldr	r3, [pc, #544]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f003 030c 	and.w	r3, r3, #12
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d00c      	beq.n	8008b98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b7e:	4b85      	ldr	r3, [pc, #532]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008b86:	2b08      	cmp	r3, #8
 8008b88:	d112      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b8a:	4b82      	ldr	r3, [pc, #520]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b96:	d10b      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b98:	4b7e      	ldr	r3, [pc, #504]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d05b      	beq.n	8008c5c <HAL_RCC_OscConfig+0x108>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d157      	bne.n	8008c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e242      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bb8:	d106      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x74>
 8008bba:	4b76      	ldr	r3, [pc, #472]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a75      	ldr	r2, [pc, #468]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	e01d      	b.n	8008c04 <HAL_RCC_OscConfig+0xb0>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bd0:	d10c      	bne.n	8008bec <HAL_RCC_OscConfig+0x98>
 8008bd2:	4b70      	ldr	r3, [pc, #448]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a6f      	ldr	r2, [pc, #444]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	4b6d      	ldr	r3, [pc, #436]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a6c      	ldr	r2, [pc, #432]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	e00b      	b.n	8008c04 <HAL_RCC_OscConfig+0xb0>
 8008bec:	4b69      	ldr	r3, [pc, #420]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a68      	ldr	r2, [pc, #416]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	4b66      	ldr	r3, [pc, #408]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a65      	ldr	r2, [pc, #404]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d013      	beq.n	8008c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c0c:	f7fe f9e4 	bl	8006fd8 <HAL_GetTick>
 8008c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c12:	e008      	b.n	8008c26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c14:	f7fe f9e0 	bl	8006fd8 <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	2b64      	cmp	r3, #100	@ 0x64
 8008c20:	d901      	bls.n	8008c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e207      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c26:	4b5b      	ldr	r3, [pc, #364]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d0f0      	beq.n	8008c14 <HAL_RCC_OscConfig+0xc0>
 8008c32:	e014      	b.n	8008c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c34:	f7fe f9d0 	bl	8006fd8 <HAL_GetTick>
 8008c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c3a:	e008      	b.n	8008c4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c3c:	f7fe f9cc 	bl	8006fd8 <HAL_GetTick>
 8008c40:	4602      	mov	r2, r0
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	2b64      	cmp	r3, #100	@ 0x64
 8008c48:	d901      	bls.n	8008c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e1f3      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c4e:	4b51      	ldr	r3, [pc, #324]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1f0      	bne.n	8008c3c <HAL_RCC_OscConfig+0xe8>
 8008c5a:	e000      	b.n	8008c5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d063      	beq.n	8008d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f003 030c 	and.w	r3, r3, #12
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00b      	beq.n	8008c8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c76:	4b47      	ldr	r3, [pc, #284]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008c7e:	2b08      	cmp	r3, #8
 8008c80:	d11c      	bne.n	8008cbc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c82:	4b44      	ldr	r3, [pc, #272]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d116      	bne.n	8008cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c8e:	4b41      	ldr	r3, [pc, #260]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d005      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x152>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d001      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e1c7      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	00db      	lsls	r3, r3, #3
 8008cb4:	4937      	ldr	r1, [pc, #220]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cba:	e03a      	b.n	8008d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d020      	beq.n	8008d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cc4:	4b34      	ldr	r3, [pc, #208]	@ (8008d98 <HAL_RCC_OscConfig+0x244>)
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cca:	f7fe f985 	bl	8006fd8 <HAL_GetTick>
 8008cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cd0:	e008      	b.n	8008ce4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cd2:	f7fe f981 	bl	8006fd8 <HAL_GetTick>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d901      	bls.n	8008ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e1a8      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d0f0      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cf0:	4b28      	ldr	r3, [pc, #160]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	00db      	lsls	r3, r3, #3
 8008cfe:	4925      	ldr	r1, [pc, #148]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	600b      	str	r3, [r1, #0]
 8008d04:	e015      	b.n	8008d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d06:	4b24      	ldr	r3, [pc, #144]	@ (8008d98 <HAL_RCC_OscConfig+0x244>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d0c:	f7fe f964 	bl	8006fd8 <HAL_GetTick>
 8008d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d12:	e008      	b.n	8008d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d14:	f7fe f960 	bl	8006fd8 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e187      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d26:	4b1b      	ldr	r3, [pc, #108]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1f0      	bne.n	8008d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0308 	and.w	r3, r3, #8
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d036      	beq.n	8008dac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d016      	beq.n	8008d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d46:	4b15      	ldr	r3, [pc, #84]	@ (8008d9c <HAL_RCC_OscConfig+0x248>)
 8008d48:	2201      	movs	r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d4c:	f7fe f944 	bl	8006fd8 <HAL_GetTick>
 8008d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d52:	e008      	b.n	8008d66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d54:	f7fe f940 	bl	8006fd8 <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d901      	bls.n	8008d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e167      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d66:	4b0b      	ldr	r3, [pc, #44]	@ (8008d94 <HAL_RCC_OscConfig+0x240>)
 8008d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0f0      	beq.n	8008d54 <HAL_RCC_OscConfig+0x200>
 8008d72:	e01b      	b.n	8008dac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d74:	4b09      	ldr	r3, [pc, #36]	@ (8008d9c <HAL_RCC_OscConfig+0x248>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d7a:	f7fe f92d 	bl	8006fd8 <HAL_GetTick>
 8008d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d80:	e00e      	b.n	8008da0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d82:	f7fe f929 	bl	8006fd8 <HAL_GetTick>
 8008d86:	4602      	mov	r2, r0
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d907      	bls.n	8008da0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e150      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
 8008d94:	40023800 	.word	0x40023800
 8008d98:	42470000 	.word	0x42470000
 8008d9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008da0:	4b88      	ldr	r3, [pc, #544]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008da2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1ea      	bne.n	8008d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0304 	and.w	r3, r3, #4
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 8097 	beq.w	8008ee8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dbe:	4b81      	ldr	r3, [pc, #516]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10f      	bne.n	8008dea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60bb      	str	r3, [r7, #8]
 8008dce:	4b7d      	ldr	r3, [pc, #500]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dd2:	4a7c      	ldr	r2, [pc, #496]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8008dda:	4b7a      	ldr	r3, [pc, #488]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008de2:	60bb      	str	r3, [r7, #8]
 8008de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008de6:	2301      	movs	r3, #1
 8008de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dea:	4b77      	ldr	r3, [pc, #476]	@ (8008fc8 <HAL_RCC_OscConfig+0x474>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d118      	bne.n	8008e28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008df6:	4b74      	ldr	r3, [pc, #464]	@ (8008fc8 <HAL_RCC_OscConfig+0x474>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a73      	ldr	r2, [pc, #460]	@ (8008fc8 <HAL_RCC_OscConfig+0x474>)
 8008dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e02:	f7fe f8e9 	bl	8006fd8 <HAL_GetTick>
 8008e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e08:	e008      	b.n	8008e1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e0a:	f7fe f8e5 	bl	8006fd8 <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d901      	bls.n	8008e1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e10c      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e1c:	4b6a      	ldr	r3, [pc, #424]	@ (8008fc8 <HAL_RCC_OscConfig+0x474>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d0f0      	beq.n	8008e0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d106      	bne.n	8008e3e <HAL_RCC_OscConfig+0x2ea>
 8008e30:	4b64      	ldr	r3, [pc, #400]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e34:	4a63      	ldr	r2, [pc, #396]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008e36:	f043 0301 	orr.w	r3, r3, #1
 8008e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e3c:	e01c      	b.n	8008e78 <HAL_RCC_OscConfig+0x324>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	2b05      	cmp	r3, #5
 8008e44:	d10c      	bne.n	8008e60 <HAL_RCC_OscConfig+0x30c>
 8008e46:	4b5f      	ldr	r3, [pc, #380]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008e4c:	f043 0304 	orr.w	r3, r3, #4
 8008e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e52:	4b5c      	ldr	r3, [pc, #368]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e56:	4a5b      	ldr	r2, [pc, #364]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008e58:	f043 0301 	orr.w	r3, r3, #1
 8008e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e5e:	e00b      	b.n	8008e78 <HAL_RCC_OscConfig+0x324>
 8008e60:	4b58      	ldr	r3, [pc, #352]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e64:	4a57      	ldr	r2, [pc, #348]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008e66:	f023 0301 	bic.w	r3, r3, #1
 8008e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e6c:	4b55      	ldr	r3, [pc, #340]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e70:	4a54      	ldr	r2, [pc, #336]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008e72:	f023 0304 	bic.w	r3, r3, #4
 8008e76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d015      	beq.n	8008eac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e80:	f7fe f8aa 	bl	8006fd8 <HAL_GetTick>
 8008e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e86:	e00a      	b.n	8008e9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e88:	f7fe f8a6 	bl	8006fd8 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d901      	bls.n	8008e9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e0cb      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e9e:	4b49      	ldr	r3, [pc, #292]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d0ee      	beq.n	8008e88 <HAL_RCC_OscConfig+0x334>
 8008eaa:	e014      	b.n	8008ed6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008eac:	f7fe f894 	bl	8006fd8 <HAL_GetTick>
 8008eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008eb2:	e00a      	b.n	8008eca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008eb4:	f7fe f890 	bl	8006fd8 <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d901      	bls.n	8008eca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e0b5      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008eca:	4b3e      	ldr	r3, [pc, #248]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ece:	f003 0302 	and.w	r3, r3, #2
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1ee      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d105      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008edc:	4b39      	ldr	r3, [pc, #228]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee0:	4a38      	ldr	r2, [pc, #224]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008ee2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ee6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 80a1 	beq.w	8009034 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ef2:	4b34      	ldr	r3, [pc, #208]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f003 030c 	and.w	r3, r3, #12
 8008efa:	2b08      	cmp	r3, #8
 8008efc:	d05c      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d141      	bne.n	8008f8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f06:	4b31      	ldr	r3, [pc, #196]	@ (8008fcc <HAL_RCC_OscConfig+0x478>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f0c:	f7fe f864 	bl	8006fd8 <HAL_GetTick>
 8008f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f12:	e008      	b.n	8008f26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f14:	f7fe f860 	bl	8006fd8 <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d901      	bls.n	8008f26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e087      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f26:	4b27      	ldr	r3, [pc, #156]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1f0      	bne.n	8008f14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	69da      	ldr	r2, [r3, #28]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f40:	019b      	lsls	r3, r3, #6
 8008f42:	431a      	orrs	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f48:	085b      	lsrs	r3, r3, #1
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	041b      	lsls	r3, r3, #16
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f54:	061b      	lsls	r3, r3, #24
 8008f56:	491b      	ldr	r1, [pc, #108]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8008fcc <HAL_RCC_OscConfig+0x478>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f62:	f7fe f839 	bl	8006fd8 <HAL_GetTick>
 8008f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f68:	e008      	b.n	8008f7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f6a:	f7fe f835 	bl	8006fd8 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d901      	bls.n	8008f7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e05c      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f7c:	4b11      	ldr	r3, [pc, #68]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0f0      	beq.n	8008f6a <HAL_RCC_OscConfig+0x416>
 8008f88:	e054      	b.n	8009034 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f8a:	4b10      	ldr	r3, [pc, #64]	@ (8008fcc <HAL_RCC_OscConfig+0x478>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f90:	f7fe f822 	bl	8006fd8 <HAL_GetTick>
 8008f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f96:	e008      	b.n	8008faa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f98:	f7fe f81e 	bl	8006fd8 <HAL_GetTick>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d901      	bls.n	8008faa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e045      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008faa:	4b06      	ldr	r3, [pc, #24]	@ (8008fc4 <HAL_RCC_OscConfig+0x470>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1f0      	bne.n	8008f98 <HAL_RCC_OscConfig+0x444>
 8008fb6:	e03d      	b.n	8009034 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d107      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e038      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
 8008fc4:	40023800 	.word	0x40023800
 8008fc8:	40007000 	.word	0x40007000
 8008fcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8009040 <HAL_RCC_OscConfig+0x4ec>)
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d028      	beq.n	8009030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d121      	bne.n	8009030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d11a      	bne.n	8009030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009000:	4013      	ands	r3, r2
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009006:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009008:	4293      	cmp	r3, r2
 800900a:	d111      	bne.n	8009030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009016:	085b      	lsrs	r3, r3, #1
 8009018:	3b01      	subs	r3, #1
 800901a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800901c:	429a      	cmp	r2, r3
 800901e:	d107      	bne.n	8009030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800902c:	429a      	cmp	r2, r3
 800902e:	d001      	beq.n	8009034 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e000      	b.n	8009036 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3718      	adds	r7, #24
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	40023800 	.word	0x40023800

08009044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e0cc      	b.n	80091f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009058:	4b68      	ldr	r3, [pc, #416]	@ (80091fc <HAL_RCC_ClockConfig+0x1b8>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0307 	and.w	r3, r3, #7
 8009060:	683a      	ldr	r2, [r7, #0]
 8009062:	429a      	cmp	r2, r3
 8009064:	d90c      	bls.n	8009080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009066:	4b65      	ldr	r3, [pc, #404]	@ (80091fc <HAL_RCC_ClockConfig+0x1b8>)
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	b2d2      	uxtb	r2, r2
 800906c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800906e:	4b63      	ldr	r3, [pc, #396]	@ (80091fc <HAL_RCC_ClockConfig+0x1b8>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0307 	and.w	r3, r3, #7
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	429a      	cmp	r2, r3
 800907a:	d001      	beq.n	8009080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e0b8      	b.n	80091f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 0302 	and.w	r3, r3, #2
 8009088:	2b00      	cmp	r3, #0
 800908a:	d020      	beq.n	80090ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0304 	and.w	r3, r3, #4
 8009094:	2b00      	cmp	r3, #0
 8009096:	d005      	beq.n	80090a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009098:	4b59      	ldr	r3, [pc, #356]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	4a58      	ldr	r2, [pc, #352]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 800909e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80090a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0308 	and.w	r3, r3, #8
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d005      	beq.n	80090bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090b0:	4b53      	ldr	r3, [pc, #332]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	4a52      	ldr	r2, [pc, #328]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 80090b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80090ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090bc:	4b50      	ldr	r3, [pc, #320]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	494d      	ldr	r1, [pc, #308]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 80090ca:	4313      	orrs	r3, r2
 80090cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d044      	beq.n	8009164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d107      	bne.n	80090f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090e2:	4b47      	ldr	r3, [pc, #284]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d119      	bne.n	8009122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e07f      	b.n	80091f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d003      	beq.n	8009102 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d107      	bne.n	8009112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009102:	4b3f      	ldr	r3, [pc, #252]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d109      	bne.n	8009122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e06f      	b.n	80091f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009112:	4b3b      	ldr	r3, [pc, #236]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e067      	b.n	80091f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009122:	4b37      	ldr	r3, [pc, #220]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f023 0203 	bic.w	r2, r3, #3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	4934      	ldr	r1, [pc, #208]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 8009130:	4313      	orrs	r3, r2
 8009132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009134:	f7fd ff50 	bl	8006fd8 <HAL_GetTick>
 8009138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800913a:	e00a      	b.n	8009152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800913c:	f7fd ff4c 	bl	8006fd8 <HAL_GetTick>
 8009140:	4602      	mov	r2, r0
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800914a:	4293      	cmp	r3, r2
 800914c:	d901      	bls.n	8009152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e04f      	b.n	80091f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009152:	4b2b      	ldr	r3, [pc, #172]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f003 020c 	and.w	r2, r3, #12
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	429a      	cmp	r2, r3
 8009162:	d1eb      	bne.n	800913c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009164:	4b25      	ldr	r3, [pc, #148]	@ (80091fc <HAL_RCC_ClockConfig+0x1b8>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 0307 	and.w	r3, r3, #7
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d20c      	bcs.n	800918c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009172:	4b22      	ldr	r3, [pc, #136]	@ (80091fc <HAL_RCC_ClockConfig+0x1b8>)
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	b2d2      	uxtb	r2, r2
 8009178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800917a:	4b20      	ldr	r3, [pc, #128]	@ (80091fc <HAL_RCC_ClockConfig+0x1b8>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0307 	and.w	r3, r3, #7
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	429a      	cmp	r2, r3
 8009186:	d001      	beq.n	800918c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e032      	b.n	80091f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	2b00      	cmp	r3, #0
 8009196:	d008      	beq.n	80091aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009198:	4b19      	ldr	r3, [pc, #100]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	4916      	ldr	r1, [pc, #88]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 80091a6:	4313      	orrs	r3, r2
 80091a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0308 	and.w	r3, r3, #8
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d009      	beq.n	80091ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091b6:	4b12      	ldr	r3, [pc, #72]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	490e      	ldr	r1, [pc, #56]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 80091c6:	4313      	orrs	r3, r2
 80091c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80091ca:	f000 f821 	bl	8009210 <HAL_RCC_GetSysClockFreq>
 80091ce:	4602      	mov	r2, r0
 80091d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009200 <HAL_RCC_ClockConfig+0x1bc>)
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	091b      	lsrs	r3, r3, #4
 80091d6:	f003 030f 	and.w	r3, r3, #15
 80091da:	490a      	ldr	r1, [pc, #40]	@ (8009204 <HAL_RCC_ClockConfig+0x1c0>)
 80091dc:	5ccb      	ldrb	r3, [r1, r3]
 80091de:	fa22 f303 	lsr.w	r3, r2, r3
 80091e2:	4a09      	ldr	r2, [pc, #36]	@ (8009208 <HAL_RCC_ClockConfig+0x1c4>)
 80091e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80091e6:	4b09      	ldr	r3, [pc, #36]	@ (800920c <HAL_RCC_ClockConfig+0x1c8>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fd fd18 	bl	8006c20 <HAL_InitTick>

  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	40023c00 	.word	0x40023c00
 8009200:	40023800 	.word	0x40023800
 8009204:	08011d44 	.word	0x08011d44
 8009208:	20000020 	.word	0x20000020
 800920c:	20000024 	.word	0x20000024

08009210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009214:	b090      	sub	sp, #64	@ 0x40
 8009216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800921c:	2300      	movs	r3, #0
 800921e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009220:	2300      	movs	r3, #0
 8009222:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009228:	4b59      	ldr	r3, [pc, #356]	@ (8009390 <HAL_RCC_GetSysClockFreq+0x180>)
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	f003 030c 	and.w	r3, r3, #12
 8009230:	2b08      	cmp	r3, #8
 8009232:	d00d      	beq.n	8009250 <HAL_RCC_GetSysClockFreq+0x40>
 8009234:	2b08      	cmp	r3, #8
 8009236:	f200 80a1 	bhi.w	800937c <HAL_RCC_GetSysClockFreq+0x16c>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d002      	beq.n	8009244 <HAL_RCC_GetSysClockFreq+0x34>
 800923e:	2b04      	cmp	r3, #4
 8009240:	d003      	beq.n	800924a <HAL_RCC_GetSysClockFreq+0x3a>
 8009242:	e09b      	b.n	800937c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009244:	4b53      	ldr	r3, [pc, #332]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x184>)
 8009246:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009248:	e09b      	b.n	8009382 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800924a:	4b53      	ldr	r3, [pc, #332]	@ (8009398 <HAL_RCC_GetSysClockFreq+0x188>)
 800924c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800924e:	e098      	b.n	8009382 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009250:	4b4f      	ldr	r3, [pc, #316]	@ (8009390 <HAL_RCC_GetSysClockFreq+0x180>)
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009258:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800925a:	4b4d      	ldr	r3, [pc, #308]	@ (8009390 <HAL_RCC_GetSysClockFreq+0x180>)
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d028      	beq.n	80092b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009266:	4b4a      	ldr	r3, [pc, #296]	@ (8009390 <HAL_RCC_GetSysClockFreq+0x180>)
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	099b      	lsrs	r3, r3, #6
 800926c:	2200      	movs	r2, #0
 800926e:	623b      	str	r3, [r7, #32]
 8009270:	627a      	str	r2, [r7, #36]	@ 0x24
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009278:	2100      	movs	r1, #0
 800927a:	4b47      	ldr	r3, [pc, #284]	@ (8009398 <HAL_RCC_GetSysClockFreq+0x188>)
 800927c:	fb03 f201 	mul.w	r2, r3, r1
 8009280:	2300      	movs	r3, #0
 8009282:	fb00 f303 	mul.w	r3, r0, r3
 8009286:	4413      	add	r3, r2
 8009288:	4a43      	ldr	r2, [pc, #268]	@ (8009398 <HAL_RCC_GetSysClockFreq+0x188>)
 800928a:	fba0 1202 	umull	r1, r2, r0, r2
 800928e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009290:	460a      	mov	r2, r1
 8009292:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009294:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009296:	4413      	add	r3, r2
 8009298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800929a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800929c:	2200      	movs	r2, #0
 800929e:	61bb      	str	r3, [r7, #24]
 80092a0:	61fa      	str	r2, [r7, #28]
 80092a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80092aa:	f7f7 fe03 	bl	8000eb4 <__aeabi_uldivmod>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4613      	mov	r3, r2
 80092b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092b6:	e053      	b.n	8009360 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092b8:	4b35      	ldr	r3, [pc, #212]	@ (8009390 <HAL_RCC_GetSysClockFreq+0x180>)
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	099b      	lsrs	r3, r3, #6
 80092be:	2200      	movs	r2, #0
 80092c0:	613b      	str	r3, [r7, #16]
 80092c2:	617a      	str	r2, [r7, #20]
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80092ca:	f04f 0b00 	mov.w	fp, #0
 80092ce:	4652      	mov	r2, sl
 80092d0:	465b      	mov	r3, fp
 80092d2:	f04f 0000 	mov.w	r0, #0
 80092d6:	f04f 0100 	mov.w	r1, #0
 80092da:	0159      	lsls	r1, r3, #5
 80092dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092e0:	0150      	lsls	r0, r2, #5
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	ebb2 080a 	subs.w	r8, r2, sl
 80092ea:	eb63 090b 	sbc.w	r9, r3, fp
 80092ee:	f04f 0200 	mov.w	r2, #0
 80092f2:	f04f 0300 	mov.w	r3, #0
 80092f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80092fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80092fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009302:	ebb2 0408 	subs.w	r4, r2, r8
 8009306:	eb63 0509 	sbc.w	r5, r3, r9
 800930a:	f04f 0200 	mov.w	r2, #0
 800930e:	f04f 0300 	mov.w	r3, #0
 8009312:	00eb      	lsls	r3, r5, #3
 8009314:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009318:	00e2      	lsls	r2, r4, #3
 800931a:	4614      	mov	r4, r2
 800931c:	461d      	mov	r5, r3
 800931e:	eb14 030a 	adds.w	r3, r4, sl
 8009322:	603b      	str	r3, [r7, #0]
 8009324:	eb45 030b 	adc.w	r3, r5, fp
 8009328:	607b      	str	r3, [r7, #4]
 800932a:	f04f 0200 	mov.w	r2, #0
 800932e:	f04f 0300 	mov.w	r3, #0
 8009332:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009336:	4629      	mov	r1, r5
 8009338:	028b      	lsls	r3, r1, #10
 800933a:	4621      	mov	r1, r4
 800933c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009340:	4621      	mov	r1, r4
 8009342:	028a      	lsls	r2, r1, #10
 8009344:	4610      	mov	r0, r2
 8009346:	4619      	mov	r1, r3
 8009348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800934a:	2200      	movs	r2, #0
 800934c:	60bb      	str	r3, [r7, #8]
 800934e:	60fa      	str	r2, [r7, #12]
 8009350:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009354:	f7f7 fdae 	bl	8000eb4 <__aeabi_uldivmod>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	4613      	mov	r3, r2
 800935e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009360:	4b0b      	ldr	r3, [pc, #44]	@ (8009390 <HAL_RCC_GetSysClockFreq+0x180>)
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	0c1b      	lsrs	r3, r3, #16
 8009366:	f003 0303 	and.w	r3, r3, #3
 800936a:	3301      	adds	r3, #1
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009370:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009374:	fbb2 f3f3 	udiv	r3, r2, r3
 8009378:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800937a:	e002      	b.n	8009382 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800937c:	4b05      	ldr	r3, [pc, #20]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x184>)
 800937e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009384:	4618      	mov	r0, r3
 8009386:	3740      	adds	r7, #64	@ 0x40
 8009388:	46bd      	mov	sp, r7
 800938a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800938e:	bf00      	nop
 8009390:	40023800 	.word	0x40023800
 8009394:	00f42400 	.word	0x00f42400
 8009398:	017d7840 	.word	0x017d7840

0800939c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800939c:	b480      	push	{r7}
 800939e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093a0:	4b03      	ldr	r3, [pc, #12]	@ (80093b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80093a2:	681b      	ldr	r3, [r3, #0]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	20000020 	.word	0x20000020

080093b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80093b8:	f7ff fff0 	bl	800939c <HAL_RCC_GetHCLKFreq>
 80093bc:	4602      	mov	r2, r0
 80093be:	4b05      	ldr	r3, [pc, #20]	@ (80093d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	0a9b      	lsrs	r3, r3, #10
 80093c4:	f003 0307 	and.w	r3, r3, #7
 80093c8:	4903      	ldr	r1, [pc, #12]	@ (80093d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093ca:	5ccb      	ldrb	r3, [r1, r3]
 80093cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	40023800 	.word	0x40023800
 80093d8:	08011d54 	.word	0x08011d54

080093dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80093e0:	f7ff ffdc 	bl	800939c <HAL_RCC_GetHCLKFreq>
 80093e4:	4602      	mov	r2, r0
 80093e6:	4b05      	ldr	r3, [pc, #20]	@ (80093fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	0b5b      	lsrs	r3, r3, #13
 80093ec:	f003 0307 	and.w	r3, r3, #7
 80093f0:	4903      	ldr	r1, [pc, #12]	@ (8009400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093f2:	5ccb      	ldrb	r3, [r1, r3]
 80093f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	40023800 	.word	0x40023800
 8009400:	08011d54 	.word	0x08011d54

08009404 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	220f      	movs	r2, #15
 8009412:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009414:	4b12      	ldr	r3, [pc, #72]	@ (8009460 <HAL_RCC_GetClockConfig+0x5c>)
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f003 0203 	and.w	r2, r3, #3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009420:	4b0f      	ldr	r3, [pc, #60]	@ (8009460 <HAL_RCC_GetClockConfig+0x5c>)
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800942c:	4b0c      	ldr	r3, [pc, #48]	@ (8009460 <HAL_RCC_GetClockConfig+0x5c>)
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009438:	4b09      	ldr	r3, [pc, #36]	@ (8009460 <HAL_RCC_GetClockConfig+0x5c>)
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	08db      	lsrs	r3, r3, #3
 800943e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009446:	4b07      	ldr	r3, [pc, #28]	@ (8009464 <HAL_RCC_GetClockConfig+0x60>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0207 	and.w	r2, r3, #7
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	601a      	str	r2, [r3, #0]
}
 8009452:	bf00      	nop
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	40023800 	.word	0x40023800
 8009464:	40023c00 	.word	0x40023c00

08009468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e041      	b.n	80094fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d106      	bne.n	8009494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7fd f9dc 	bl	800684c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2202      	movs	r2, #2
 8009498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	3304      	adds	r3, #4
 80094a4:	4619      	mov	r1, r3
 80094a6:	4610      	mov	r0, r2
 80094a8:	f000 fbe6 	bl	8009c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
	...

08009508 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b01      	cmp	r3, #1
 800951a:	d001      	beq.n	8009520 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	e03c      	b.n	800959a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2202      	movs	r2, #2
 8009524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a1e      	ldr	r2, [pc, #120]	@ (80095a8 <HAL_TIM_Base_Start+0xa0>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d018      	beq.n	8009564 <HAL_TIM_Base_Start+0x5c>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800953a:	d013      	beq.n	8009564 <HAL_TIM_Base_Start+0x5c>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a1a      	ldr	r2, [pc, #104]	@ (80095ac <HAL_TIM_Base_Start+0xa4>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d00e      	beq.n	8009564 <HAL_TIM_Base_Start+0x5c>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a19      	ldr	r2, [pc, #100]	@ (80095b0 <HAL_TIM_Base_Start+0xa8>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d009      	beq.n	8009564 <HAL_TIM_Base_Start+0x5c>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a17      	ldr	r2, [pc, #92]	@ (80095b4 <HAL_TIM_Base_Start+0xac>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d004      	beq.n	8009564 <HAL_TIM_Base_Start+0x5c>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a16      	ldr	r2, [pc, #88]	@ (80095b8 <HAL_TIM_Base_Start+0xb0>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d111      	bne.n	8009588 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f003 0307 	and.w	r3, r3, #7
 800956e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b06      	cmp	r3, #6
 8009574:	d010      	beq.n	8009598 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f042 0201 	orr.w	r2, r2, #1
 8009584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009586:	e007      	b.n	8009598 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0201 	orr.w	r2, r2, #1
 8009596:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	40010000 	.word	0x40010000
 80095ac:	40000400 	.word	0x40000400
 80095b0:	40000800 	.word	0x40000800
 80095b4:	40000c00 	.word	0x40000c00
 80095b8:	40014000 	.word	0x40014000

080095bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d001      	beq.n	80095d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e044      	b.n	800965e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2202      	movs	r2, #2
 80095d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68da      	ldr	r2, [r3, #12]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 0201 	orr.w	r2, r2, #1
 80095ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a1e      	ldr	r2, [pc, #120]	@ (800966c <HAL_TIM_Base_Start_IT+0xb0>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d018      	beq.n	8009628 <HAL_TIM_Base_Start_IT+0x6c>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095fe:	d013      	beq.n	8009628 <HAL_TIM_Base_Start_IT+0x6c>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a1a      	ldr	r2, [pc, #104]	@ (8009670 <HAL_TIM_Base_Start_IT+0xb4>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d00e      	beq.n	8009628 <HAL_TIM_Base_Start_IT+0x6c>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a19      	ldr	r2, [pc, #100]	@ (8009674 <HAL_TIM_Base_Start_IT+0xb8>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d009      	beq.n	8009628 <HAL_TIM_Base_Start_IT+0x6c>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a17      	ldr	r2, [pc, #92]	@ (8009678 <HAL_TIM_Base_Start_IT+0xbc>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d004      	beq.n	8009628 <HAL_TIM_Base_Start_IT+0x6c>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a16      	ldr	r2, [pc, #88]	@ (800967c <HAL_TIM_Base_Start_IT+0xc0>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d111      	bne.n	800964c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f003 0307 	and.w	r3, r3, #7
 8009632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2b06      	cmp	r3, #6
 8009638:	d010      	beq.n	800965c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f042 0201 	orr.w	r2, r2, #1
 8009648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800964a:	e007      	b.n	800965c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f042 0201 	orr.w	r2, r2, #1
 800965a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	40010000 	.word	0x40010000
 8009670:	40000400 	.word	0x40000400
 8009674:	40000800 	.word	0x40000800
 8009678:	40000c00 	.word	0x40000c00
 800967c:	40014000 	.word	0x40014000

08009680 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e041      	b.n	8009716 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b00      	cmp	r3, #0
 800969c:	d106      	bne.n	80096ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f839 	bl	800971e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2202      	movs	r2, #2
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	3304      	adds	r3, #4
 80096bc:	4619      	mov	r1, r3
 80096be:	4610      	mov	r0, r2
 80096c0:	f000 fada 	bl	8009c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800971e:	b480      	push	{r7}
 8009720:	b083      	sub	sp, #12
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009726:	bf00      	nop
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	f003 0302 	and.w	r3, r3, #2
 8009750:	2b00      	cmp	r3, #0
 8009752:	d020      	beq.n	8009796 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f003 0302 	and.w	r3, r3, #2
 800975a:	2b00      	cmp	r3, #0
 800975c:	d01b      	beq.n	8009796 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f06f 0202 	mvn.w	r2, #2
 8009766:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	f003 0303 	and.w	r3, r3, #3
 8009778:	2b00      	cmp	r3, #0
 800977a:	d003      	beq.n	8009784 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fa5c 	bl	8009c3a <HAL_TIM_IC_CaptureCallback>
 8009782:	e005      	b.n	8009790 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fa4e 	bl	8009c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fa5f 	bl	8009c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	f003 0304 	and.w	r3, r3, #4
 800979c:	2b00      	cmp	r3, #0
 800979e:	d020      	beq.n	80097e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f003 0304 	and.w	r3, r3, #4
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d01b      	beq.n	80097e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f06f 0204 	mvn.w	r2, #4
 80097b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fa36 	bl	8009c3a <HAL_TIM_IC_CaptureCallback>
 80097ce:	e005      	b.n	80097dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fa28 	bl	8009c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fa39 	bl	8009c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	f003 0308 	and.w	r3, r3, #8
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d020      	beq.n	800982e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f003 0308 	and.w	r3, r3, #8
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d01b      	beq.n	800982e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f06f 0208 	mvn.w	r2, #8
 80097fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2204      	movs	r2, #4
 8009804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	69db      	ldr	r3, [r3, #28]
 800980c:	f003 0303 	and.w	r3, r3, #3
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fa10 	bl	8009c3a <HAL_TIM_IC_CaptureCallback>
 800981a:	e005      	b.n	8009828 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fa02 	bl	8009c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fa13 	bl	8009c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f003 0310 	and.w	r3, r3, #16
 8009834:	2b00      	cmp	r3, #0
 8009836:	d020      	beq.n	800987a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f003 0310 	and.w	r3, r3, #16
 800983e:	2b00      	cmp	r3, #0
 8009840:	d01b      	beq.n	800987a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f06f 0210 	mvn.w	r2, #16
 800984a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2208      	movs	r2, #8
 8009850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800985c:	2b00      	cmp	r3, #0
 800985e:	d003      	beq.n	8009868 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f9ea 	bl	8009c3a <HAL_TIM_IC_CaptureCallback>
 8009866:	e005      	b.n	8009874 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f9dc 	bl	8009c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f9ed 	bl	8009c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00c      	beq.n	800989e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f003 0301 	and.w	r3, r3, #1
 800988a:	2b00      	cmp	r3, #0
 800988c:	d007      	beq.n	800989e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f06f 0201 	mvn.w	r2, #1
 8009896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7fa ff3f 	bl	800471c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00c      	beq.n	80098c2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d007      	beq.n	80098c2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80098ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fd05 	bl	800a2cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00c      	beq.n	80098e6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d007      	beq.n	80098e6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80098de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 f9be 	bl	8009c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f003 0320 	and.w	r3, r3, #32
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00c      	beq.n	800990a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f003 0320 	and.w	r3, r3, #32
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d007      	beq.n	800990a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f06f 0220 	mvn.w	r2, #32
 8009902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fcd7 	bl	800a2b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800990a:	bf00      	nop
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009920:	2300      	movs	r3, #0
 8009922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800992a:	2b01      	cmp	r3, #1
 800992c:	d101      	bne.n	8009932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800992e:	2302      	movs	r3, #2
 8009930:	e0ae      	b.n	8009a90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b0c      	cmp	r3, #12
 800993e:	f200 809f 	bhi.w	8009a80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009942:	a201      	add	r2, pc, #4	@ (adr r2, 8009948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009948:	0800997d 	.word	0x0800997d
 800994c:	08009a81 	.word	0x08009a81
 8009950:	08009a81 	.word	0x08009a81
 8009954:	08009a81 	.word	0x08009a81
 8009958:	080099bd 	.word	0x080099bd
 800995c:	08009a81 	.word	0x08009a81
 8009960:	08009a81 	.word	0x08009a81
 8009964:	08009a81 	.word	0x08009a81
 8009968:	080099ff 	.word	0x080099ff
 800996c:	08009a81 	.word	0x08009a81
 8009970:	08009a81 	.word	0x08009a81
 8009974:	08009a81 	.word	0x08009a81
 8009978:	08009a3f 	.word	0x08009a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68b9      	ldr	r1, [r7, #8]
 8009982:	4618      	mov	r0, r3
 8009984:	f000 fa04 	bl	8009d90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	699a      	ldr	r2, [r3, #24]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f042 0208 	orr.w	r2, r2, #8
 8009996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699a      	ldr	r2, [r3, #24]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f022 0204 	bic.w	r2, r2, #4
 80099a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6999      	ldr	r1, [r3, #24]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	691a      	ldr	r2, [r3, #16]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	619a      	str	r2, [r3, #24]
      break;
 80099ba:	e064      	b.n	8009a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68b9      	ldr	r1, [r7, #8]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fa4a 	bl	8009e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	699a      	ldr	r2, [r3, #24]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	699a      	ldr	r2, [r3, #24]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6999      	ldr	r1, [r3, #24]
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	021a      	lsls	r2, r3, #8
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	430a      	orrs	r2, r1
 80099fa:	619a      	str	r2, [r3, #24]
      break;
 80099fc:	e043      	b.n	8009a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68b9      	ldr	r1, [r7, #8]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fa95 	bl	8009f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	69da      	ldr	r2, [r3, #28]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f042 0208 	orr.w	r2, r2, #8
 8009a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	69da      	ldr	r2, [r3, #28]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f022 0204 	bic.w	r2, r2, #4
 8009a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	69d9      	ldr	r1, [r3, #28]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	691a      	ldr	r2, [r3, #16]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	430a      	orrs	r2, r1
 8009a3a:	61da      	str	r2, [r3, #28]
      break;
 8009a3c:	e023      	b.n	8009a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68b9      	ldr	r1, [r7, #8]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 fadf 	bl	800a008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	69da      	ldr	r2, [r3, #28]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	69da      	ldr	r2, [r3, #28]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	69d9      	ldr	r1, [r3, #28]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	021a      	lsls	r2, r3, #8
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	61da      	str	r2, [r3, #28]
      break;
 8009a7e:	e002      	b.n	8009a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	75fb      	strb	r3, [r7, #23]
      break;
 8009a84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3718      	adds	r7, #24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d101      	bne.n	8009ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	e0b4      	b.n	8009c1e <HAL_TIM_ConfigClockSource+0x186>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68ba      	ldr	r2, [r7, #8]
 8009ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009aec:	d03e      	beq.n	8009b6c <HAL_TIM_ConfigClockSource+0xd4>
 8009aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009af2:	f200 8087 	bhi.w	8009c04 <HAL_TIM_ConfigClockSource+0x16c>
 8009af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009afa:	f000 8086 	beq.w	8009c0a <HAL_TIM_ConfigClockSource+0x172>
 8009afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b02:	d87f      	bhi.n	8009c04 <HAL_TIM_ConfigClockSource+0x16c>
 8009b04:	2b70      	cmp	r3, #112	@ 0x70
 8009b06:	d01a      	beq.n	8009b3e <HAL_TIM_ConfigClockSource+0xa6>
 8009b08:	2b70      	cmp	r3, #112	@ 0x70
 8009b0a:	d87b      	bhi.n	8009c04 <HAL_TIM_ConfigClockSource+0x16c>
 8009b0c:	2b60      	cmp	r3, #96	@ 0x60
 8009b0e:	d050      	beq.n	8009bb2 <HAL_TIM_ConfigClockSource+0x11a>
 8009b10:	2b60      	cmp	r3, #96	@ 0x60
 8009b12:	d877      	bhi.n	8009c04 <HAL_TIM_ConfigClockSource+0x16c>
 8009b14:	2b50      	cmp	r3, #80	@ 0x50
 8009b16:	d03c      	beq.n	8009b92 <HAL_TIM_ConfigClockSource+0xfa>
 8009b18:	2b50      	cmp	r3, #80	@ 0x50
 8009b1a:	d873      	bhi.n	8009c04 <HAL_TIM_ConfigClockSource+0x16c>
 8009b1c:	2b40      	cmp	r3, #64	@ 0x40
 8009b1e:	d058      	beq.n	8009bd2 <HAL_TIM_ConfigClockSource+0x13a>
 8009b20:	2b40      	cmp	r3, #64	@ 0x40
 8009b22:	d86f      	bhi.n	8009c04 <HAL_TIM_ConfigClockSource+0x16c>
 8009b24:	2b30      	cmp	r3, #48	@ 0x30
 8009b26:	d064      	beq.n	8009bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8009b28:	2b30      	cmp	r3, #48	@ 0x30
 8009b2a:	d86b      	bhi.n	8009c04 <HAL_TIM_ConfigClockSource+0x16c>
 8009b2c:	2b20      	cmp	r3, #32
 8009b2e:	d060      	beq.n	8009bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8009b30:	2b20      	cmp	r3, #32
 8009b32:	d867      	bhi.n	8009c04 <HAL_TIM_ConfigClockSource+0x16c>
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d05c      	beq.n	8009bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8009b38:	2b10      	cmp	r3, #16
 8009b3a:	d05a      	beq.n	8009bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8009b3c:	e062      	b.n	8009c04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b4e:	f000 fb25 	bl	800a19c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	609a      	str	r2, [r3, #8]
      break;
 8009b6a:	e04f      	b.n	8009c0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b7c:	f000 fb0e 	bl	800a19c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689a      	ldr	r2, [r3, #8]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b8e:	609a      	str	r2, [r3, #8]
      break;
 8009b90:	e03c      	b.n	8009c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f000 fa82 	bl	800a0a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2150      	movs	r1, #80	@ 0x50
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 fadb 	bl	800a166 <TIM_ITRx_SetConfig>
      break;
 8009bb0:	e02c      	b.n	8009c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	f000 faa1 	bl	800a106 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2160      	movs	r1, #96	@ 0x60
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 facb 	bl	800a166 <TIM_ITRx_SetConfig>
      break;
 8009bd0:	e01c      	b.n	8009c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bde:	461a      	mov	r2, r3
 8009be0:	f000 fa62 	bl	800a0a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2140      	movs	r1, #64	@ 0x40
 8009bea:	4618      	mov	r0, r3
 8009bec:	f000 fabb 	bl	800a166 <TIM_ITRx_SetConfig>
      break;
 8009bf0:	e00c      	b.n	8009c0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	f000 fab2 	bl	800a166 <TIM_ITRx_SetConfig>
      break;
 8009c02:	e003      	b.n	8009c0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	73fb      	strb	r3, [r7, #15]
      break;
 8009c08:	e000      	b.n	8009c0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b083      	sub	sp, #12
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c2e:	bf00      	nop
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c42:	bf00      	nop
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b083      	sub	sp, #12
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c62:	b480      	push	{r7}
 8009c64:	b083      	sub	sp, #12
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c6a:	bf00      	nop
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
	...

08009c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a3a      	ldr	r2, [pc, #232]	@ (8009d74 <TIM_Base_SetConfig+0xfc>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d00f      	beq.n	8009cb0 <TIM_Base_SetConfig+0x38>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c96:	d00b      	beq.n	8009cb0 <TIM_Base_SetConfig+0x38>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a37      	ldr	r2, [pc, #220]	@ (8009d78 <TIM_Base_SetConfig+0x100>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d007      	beq.n	8009cb0 <TIM_Base_SetConfig+0x38>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a36      	ldr	r2, [pc, #216]	@ (8009d7c <TIM_Base_SetConfig+0x104>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d003      	beq.n	8009cb0 <TIM_Base_SetConfig+0x38>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a35      	ldr	r2, [pc, #212]	@ (8009d80 <TIM_Base_SetConfig+0x108>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d108      	bne.n	8009cc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8009d74 <TIM_Base_SetConfig+0xfc>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d01b      	beq.n	8009d02 <TIM_Base_SetConfig+0x8a>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cd0:	d017      	beq.n	8009d02 <TIM_Base_SetConfig+0x8a>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a28      	ldr	r2, [pc, #160]	@ (8009d78 <TIM_Base_SetConfig+0x100>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d013      	beq.n	8009d02 <TIM_Base_SetConfig+0x8a>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a27      	ldr	r2, [pc, #156]	@ (8009d7c <TIM_Base_SetConfig+0x104>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d00f      	beq.n	8009d02 <TIM_Base_SetConfig+0x8a>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a26      	ldr	r2, [pc, #152]	@ (8009d80 <TIM_Base_SetConfig+0x108>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d00b      	beq.n	8009d02 <TIM_Base_SetConfig+0x8a>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a25      	ldr	r2, [pc, #148]	@ (8009d84 <TIM_Base_SetConfig+0x10c>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d007      	beq.n	8009d02 <TIM_Base_SetConfig+0x8a>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a24      	ldr	r2, [pc, #144]	@ (8009d88 <TIM_Base_SetConfig+0x110>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d003      	beq.n	8009d02 <TIM_Base_SetConfig+0x8a>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a23      	ldr	r2, [pc, #140]	@ (8009d8c <TIM_Base_SetConfig+0x114>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d108      	bne.n	8009d14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	689a      	ldr	r2, [r3, #8]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8009d74 <TIM_Base_SetConfig+0xfc>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d103      	bne.n	8009d48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	691a      	ldr	r2, [r3, #16]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d105      	bne.n	8009d66 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	f023 0201 	bic.w	r2, r3, #1
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	611a      	str	r2, [r3, #16]
  }
}
 8009d66:	bf00      	nop
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	40010000 	.word	0x40010000
 8009d78:	40000400 	.word	0x40000400
 8009d7c:	40000800 	.word	0x40000800
 8009d80:	40000c00 	.word	0x40000c00
 8009d84:	40014000 	.word	0x40014000
 8009d88:	40014400 	.word	0x40014400
 8009d8c:	40014800 	.word	0x40014800

08009d90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b087      	sub	sp, #28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a1b      	ldr	r3, [r3, #32]
 8009da4:	f023 0201 	bic.w	r2, r3, #1
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	699b      	ldr	r3, [r3, #24]
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f023 0303 	bic.w	r3, r3, #3
 8009dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f023 0302 	bic.w	r3, r3, #2
 8009dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a1c      	ldr	r2, [pc, #112]	@ (8009e58 <TIM_OC1_SetConfig+0xc8>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d10c      	bne.n	8009e06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	f023 0308 	bic.w	r3, r3, #8
 8009df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	697a      	ldr	r2, [r7, #20]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f023 0304 	bic.w	r3, r3, #4
 8009e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a13      	ldr	r2, [pc, #76]	@ (8009e58 <TIM_OC1_SetConfig+0xc8>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d111      	bne.n	8009e32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	621a      	str	r2, [r3, #32]
}
 8009e4c:	bf00      	nop
 8009e4e:	371c      	adds	r7, #28
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	40010000 	.word	0x40010000

08009e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	f023 0210 	bic.w	r2, r3, #16
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	021b      	lsls	r3, r3, #8
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	f023 0320 	bic.w	r3, r3, #32
 8009ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	011b      	lsls	r3, r3, #4
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8009f30 <TIM_OC2_SetConfig+0xd4>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d10d      	bne.n	8009ed8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	011b      	lsls	r3, r3, #4
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ed6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a15      	ldr	r2, [pc, #84]	@ (8009f30 <TIM_OC2_SetConfig+0xd4>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d113      	bne.n	8009f08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009eee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	621a      	str	r2, [r3, #32]
}
 8009f22:	bf00      	nop
 8009f24:	371c      	adds	r7, #28
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	40010000 	.word	0x40010000

08009f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b087      	sub	sp, #28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a1b      	ldr	r3, [r3, #32]
 8009f48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	69db      	ldr	r3, [r3, #28]
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f023 0303 	bic.w	r3, r3, #3
 8009f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	021b      	lsls	r3, r3, #8
 8009f84:	697a      	ldr	r2, [r7, #20]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a1d      	ldr	r2, [pc, #116]	@ (800a004 <TIM_OC3_SetConfig+0xd0>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d10d      	bne.n	8009fae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	021b      	lsls	r3, r3, #8
 8009fa0:	697a      	ldr	r2, [r7, #20]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a14      	ldr	r2, [pc, #80]	@ (800a004 <TIM_OC3_SetConfig+0xd0>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d113      	bne.n	8009fde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	011b      	lsls	r3, r3, #4
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	697a      	ldr	r2, [r7, #20]
 8009ff6:	621a      	str	r2, [r3, #32]
}
 8009ff8:	bf00      	nop
 8009ffa:	371c      	adds	r7, #28
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	40010000 	.word	0x40010000

0800a008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a008:	b480      	push	{r7}
 800a00a:	b087      	sub	sp, #28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	021b      	lsls	r3, r3, #8
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	4313      	orrs	r3, r2
 800a04a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	031b      	lsls	r3, r3, #12
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a10      	ldr	r2, [pc, #64]	@ (800a0a4 <TIM_OC4_SetConfig+0x9c>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d109      	bne.n	800a07c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a06e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	695b      	ldr	r3, [r3, #20]
 800a074:	019b      	lsls	r3, r3, #6
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	4313      	orrs	r3, r2
 800a07a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	621a      	str	r2, [r3, #32]
}
 800a096:	bf00      	nop
 800a098:	371c      	adds	r7, #28
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	40010000 	.word	0x40010000

0800a0a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6a1b      	ldr	r3, [r3, #32]
 800a0b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	f023 0201 	bic.w	r2, r3, #1
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	011b      	lsls	r3, r3, #4
 800a0d8:	693a      	ldr	r2, [r7, #16]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f023 030a 	bic.w	r3, r3, #10
 800a0e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	621a      	str	r2, [r3, #32]
}
 800a0fa:	bf00      	nop
 800a0fc:	371c      	adds	r7, #28
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a106:	b480      	push	{r7}
 800a108:	b087      	sub	sp, #28
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	60f8      	str	r0, [r7, #12]
 800a10e:	60b9      	str	r1, [r7, #8]
 800a110:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6a1b      	ldr	r3, [r3, #32]
 800a11c:	f023 0210 	bic.w	r2, r3, #16
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	031b      	lsls	r3, r3, #12
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	4313      	orrs	r3, r2
 800a13a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a142:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	011b      	lsls	r3, r3, #4
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	621a      	str	r2, [r3, #32]
}
 800a15a:	bf00      	nop
 800a15c:	371c      	adds	r7, #28
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a166:	b480      	push	{r7}
 800a168:	b085      	sub	sp, #20
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a17c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	4313      	orrs	r3, r2
 800a184:	f043 0307 	orr.w	r3, r3, #7
 800a188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	609a      	str	r2, [r3, #8]
}
 800a190:	bf00      	nop
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b087      	sub	sp, #28
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	021a      	lsls	r2, r3, #8
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	609a      	str	r2, [r3, #8]
}
 800a1d0:	bf00      	nop
 800a1d2:	371c      	adds	r7, #28
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d101      	bne.n	800a1f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	e050      	b.n	800a296 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2202      	movs	r2, #2
 800a200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a21a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	4313      	orrs	r3, r2
 800a224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a1c      	ldr	r2, [pc, #112]	@ (800a2a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d018      	beq.n	800a26a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a240:	d013      	beq.n	800a26a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a18      	ldr	r2, [pc, #96]	@ (800a2a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d00e      	beq.n	800a26a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a16      	ldr	r2, [pc, #88]	@ (800a2ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d009      	beq.n	800a26a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a15      	ldr	r2, [pc, #84]	@ (800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d004      	beq.n	800a26a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a13      	ldr	r2, [pc, #76]	@ (800a2b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d10c      	bne.n	800a284 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	4313      	orrs	r3, r2
 800a27a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	40010000 	.word	0x40010000
 800a2a8:	40000400 	.word	0x40000400
 800a2ac:	40000800 	.word	0x40000800
 800a2b0:	40000c00 	.word	0x40000c00
 800a2b4:	40014000 	.word	0x40014000

0800a2b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e042      	b.n	800a378 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d106      	bne.n	800a30c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f7fc fba6 	bl	8006a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2224      	movs	r2, #36	@ 0x24
 800a310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a322:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f973 	bl	800a610 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	691a      	ldr	r2, [r3, #16]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a338:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	695a      	ldr	r2, [r3, #20]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a348:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68da      	ldr	r2, [r3, #12]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a358:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2220      	movs	r2, #32
 800a364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2220      	movs	r2, #32
 800a36c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b08a      	sub	sp, #40	@ 0x28
 800a384:	af02      	add	r7, sp, #8
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	603b      	str	r3, [r7, #0]
 800a38c:	4613      	mov	r3, r2
 800a38e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a390:	2300      	movs	r3, #0
 800a392:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b20      	cmp	r3, #32
 800a39e:	d175      	bne.n	800a48c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d002      	beq.n	800a3ac <HAL_UART_Transmit+0x2c>
 800a3a6:	88fb      	ldrh	r3, [r7, #6]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e06e      	b.n	800a48e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2221      	movs	r2, #33	@ 0x21
 800a3ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a3be:	f7fc fe0b 	bl	8006fd8 <HAL_GetTick>
 800a3c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	88fa      	ldrh	r2, [r7, #6]
 800a3c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	88fa      	ldrh	r2, [r7, #6]
 800a3ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3d8:	d108      	bne.n	800a3ec <HAL_UART_Transmit+0x6c>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d104      	bne.n	800a3ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	61bb      	str	r3, [r7, #24]
 800a3ea:	e003      	b.n	800a3f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a3f4:	e02e      	b.n	800a454 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2180      	movs	r1, #128	@ 0x80
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f000 f848 	bl	800a496 <UART_WaitOnFlagUntilTimeout>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d005      	beq.n	800a418 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2220      	movs	r2, #32
 800a410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e03a      	b.n	800a48e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10b      	bne.n	800a436 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	881b      	ldrh	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a42c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	3302      	adds	r3, #2
 800a432:	61bb      	str	r3, [r7, #24]
 800a434:	e007      	b.n	800a446 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	781a      	ldrb	r2, [r3, #0]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	3301      	adds	r3, #1
 800a444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	3b01      	subs	r3, #1
 800a44e:	b29a      	uxth	r2, r3
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a458:	b29b      	uxth	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1cb      	bne.n	800a3f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	9300      	str	r3, [sp, #0]
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	2200      	movs	r2, #0
 800a466:	2140      	movs	r1, #64	@ 0x40
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f000 f814 	bl	800a496 <UART_WaitOnFlagUntilTimeout>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d005      	beq.n	800a480 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2220      	movs	r2, #32
 800a478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a47c:	2303      	movs	r3, #3
 800a47e:	e006      	b.n	800a48e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2220      	movs	r2, #32
 800a484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	e000      	b.n	800a48e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a48c:	2302      	movs	r3, #2
  }
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3720      	adds	r7, #32
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b086      	sub	sp, #24
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	60f8      	str	r0, [r7, #12]
 800a49e:	60b9      	str	r1, [r7, #8]
 800a4a0:	603b      	str	r3, [r7, #0]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4a6:	e03b      	b.n	800a520 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ae:	d037      	beq.n	800a520 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4b0:	f7fc fd92 	bl	8006fd8 <HAL_GetTick>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	6a3a      	ldr	r2, [r7, #32]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d302      	bcc.n	800a4c6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a4c0:	6a3b      	ldr	r3, [r7, #32]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e03a      	b.n	800a540 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f003 0304 	and.w	r3, r3, #4
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d023      	beq.n	800a520 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	2b80      	cmp	r3, #128	@ 0x80
 800a4dc:	d020      	beq.n	800a520 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2b40      	cmp	r3, #64	@ 0x40
 800a4e2:	d01d      	beq.n	800a520 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0308 	and.w	r3, r3, #8
 800a4ee:	2b08      	cmp	r3, #8
 800a4f0:	d116      	bne.n	800a520 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	617b      	str	r3, [r7, #20]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	617b      	str	r3, [r7, #20]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	617b      	str	r3, [r7, #20]
 800a506:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 f81d 	bl	800a548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2208      	movs	r2, #8
 800a512:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	e00f      	b.n	800a540 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	4013      	ands	r3, r2
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	bf0c      	ite	eq
 800a530:	2301      	moveq	r3, #1
 800a532:	2300      	movne	r3, #0
 800a534:	b2db      	uxtb	r3, r3
 800a536:	461a      	mov	r2, r3
 800a538:	79fb      	ldrb	r3, [r7, #7]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d0b4      	beq.n	800a4a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a548:	b480      	push	{r7}
 800a54a:	b095      	sub	sp, #84	@ 0x54
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	330c      	adds	r3, #12
 800a556:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a55a:	e853 3f00 	ldrex	r3, [r3]
 800a55e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a562:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	330c      	adds	r3, #12
 800a56e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a570:	643a      	str	r2, [r7, #64]	@ 0x40
 800a572:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a574:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a576:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a578:	e841 2300 	strex	r3, r2, [r1]
 800a57c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1e5      	bne.n	800a550 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	3314      	adds	r3, #20
 800a58a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58c:	6a3b      	ldr	r3, [r7, #32]
 800a58e:	e853 3f00 	ldrex	r3, [r3]
 800a592:	61fb      	str	r3, [r7, #28]
   return(result);
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	f023 0301 	bic.w	r3, r3, #1
 800a59a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	3314      	adds	r3, #20
 800a5a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a5a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5ac:	e841 2300 	strex	r3, r2, [r1]
 800a5b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1e5      	bne.n	800a584 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d119      	bne.n	800a5f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	330c      	adds	r3, #12
 800a5c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	e853 3f00 	ldrex	r3, [r3]
 800a5ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	f023 0310 	bic.w	r3, r3, #16
 800a5d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	330c      	adds	r3, #12
 800a5de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5e0:	61ba      	str	r2, [r7, #24]
 800a5e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e4:	6979      	ldr	r1, [r7, #20]
 800a5e6:	69ba      	ldr	r2, [r7, #24]
 800a5e8:	e841 2300 	strex	r3, r2, [r1]
 800a5ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1e5      	bne.n	800a5c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a602:	bf00      	nop
 800a604:	3754      	adds	r7, #84	@ 0x54
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
	...

0800a610 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a614:	b0c0      	sub	sp, #256	@ 0x100
 800a616:	af00      	add	r7, sp, #0
 800a618:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a61c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a62c:	68d9      	ldr	r1, [r3, #12]
 800a62e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	ea40 0301 	orr.w	r3, r0, r1
 800a638:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a63a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a63e:	689a      	ldr	r2, [r3, #8]
 800a640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	431a      	orrs	r2, r3
 800a648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	431a      	orrs	r2, r3
 800a650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a654:	69db      	ldr	r3, [r3, #28]
 800a656:	4313      	orrs	r3, r2
 800a658:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a65c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a668:	f021 010c 	bic.w	r1, r1, #12
 800a66c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a676:	430b      	orrs	r3, r1
 800a678:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a67a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a68a:	6999      	ldr	r1, [r3, #24]
 800a68c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	ea40 0301 	orr.w	r3, r0, r1
 800a696:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	4b8f      	ldr	r3, [pc, #572]	@ (800a8dc <UART_SetConfig+0x2cc>)
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d005      	beq.n	800a6b0 <UART_SetConfig+0xa0>
 800a6a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	4b8d      	ldr	r3, [pc, #564]	@ (800a8e0 <UART_SetConfig+0x2d0>)
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d104      	bne.n	800a6ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a6b0:	f7fe fe94 	bl	80093dc <HAL_RCC_GetPCLK2Freq>
 800a6b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a6b8:	e003      	b.n	800a6c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a6ba:	f7fe fe7b 	bl	80093b4 <HAL_RCC_GetPCLK1Freq>
 800a6be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6c6:	69db      	ldr	r3, [r3, #28]
 800a6c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6cc:	f040 810c 	bne.w	800a8e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a6d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a6da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a6de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a6e2:	4622      	mov	r2, r4
 800a6e4:	462b      	mov	r3, r5
 800a6e6:	1891      	adds	r1, r2, r2
 800a6e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a6ea:	415b      	adcs	r3, r3
 800a6ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	eb12 0801 	adds.w	r8, r2, r1
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	eb43 0901 	adc.w	r9, r3, r1
 800a6fe:	f04f 0200 	mov.w	r2, #0
 800a702:	f04f 0300 	mov.w	r3, #0
 800a706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a70a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a70e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a712:	4690      	mov	r8, r2
 800a714:	4699      	mov	r9, r3
 800a716:	4623      	mov	r3, r4
 800a718:	eb18 0303 	adds.w	r3, r8, r3
 800a71c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a720:	462b      	mov	r3, r5
 800a722:	eb49 0303 	adc.w	r3, r9, r3
 800a726:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a72a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a736:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a73a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a73e:	460b      	mov	r3, r1
 800a740:	18db      	adds	r3, r3, r3
 800a742:	653b      	str	r3, [r7, #80]	@ 0x50
 800a744:	4613      	mov	r3, r2
 800a746:	eb42 0303 	adc.w	r3, r2, r3
 800a74a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a74c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a750:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a754:	f7f6 fbae 	bl	8000eb4 <__aeabi_uldivmod>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4b61      	ldr	r3, [pc, #388]	@ (800a8e4 <UART_SetConfig+0x2d4>)
 800a75e:	fba3 2302 	umull	r2, r3, r3, r2
 800a762:	095b      	lsrs	r3, r3, #5
 800a764:	011c      	lsls	r4, r3, #4
 800a766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a76a:	2200      	movs	r2, #0
 800a76c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a770:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a774:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a778:	4642      	mov	r2, r8
 800a77a:	464b      	mov	r3, r9
 800a77c:	1891      	adds	r1, r2, r2
 800a77e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a780:	415b      	adcs	r3, r3
 800a782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a784:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a788:	4641      	mov	r1, r8
 800a78a:	eb12 0a01 	adds.w	sl, r2, r1
 800a78e:	4649      	mov	r1, r9
 800a790:	eb43 0b01 	adc.w	fp, r3, r1
 800a794:	f04f 0200 	mov.w	r2, #0
 800a798:	f04f 0300 	mov.w	r3, #0
 800a79c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a7a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a7a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a7a8:	4692      	mov	sl, r2
 800a7aa:	469b      	mov	fp, r3
 800a7ac:	4643      	mov	r3, r8
 800a7ae:	eb1a 0303 	adds.w	r3, sl, r3
 800a7b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a7b6:	464b      	mov	r3, r9
 800a7b8:	eb4b 0303 	adc.w	r3, fp, r3
 800a7bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a7c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a7cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a7d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	18db      	adds	r3, r3, r3
 800a7d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7da:	4613      	mov	r3, r2
 800a7dc:	eb42 0303 	adc.w	r3, r2, r3
 800a7e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a7e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a7ea:	f7f6 fb63 	bl	8000eb4 <__aeabi_uldivmod>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	4b3b      	ldr	r3, [pc, #236]	@ (800a8e4 <UART_SetConfig+0x2d4>)
 800a7f6:	fba3 2301 	umull	r2, r3, r3, r1
 800a7fa:	095b      	lsrs	r3, r3, #5
 800a7fc:	2264      	movs	r2, #100	@ 0x64
 800a7fe:	fb02 f303 	mul.w	r3, r2, r3
 800a802:	1acb      	subs	r3, r1, r3
 800a804:	00db      	lsls	r3, r3, #3
 800a806:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a80a:	4b36      	ldr	r3, [pc, #216]	@ (800a8e4 <UART_SetConfig+0x2d4>)
 800a80c:	fba3 2302 	umull	r2, r3, r3, r2
 800a810:	095b      	lsrs	r3, r3, #5
 800a812:	005b      	lsls	r3, r3, #1
 800a814:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a818:	441c      	add	r4, r3
 800a81a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a81e:	2200      	movs	r2, #0
 800a820:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a824:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a828:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a82c:	4642      	mov	r2, r8
 800a82e:	464b      	mov	r3, r9
 800a830:	1891      	adds	r1, r2, r2
 800a832:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a834:	415b      	adcs	r3, r3
 800a836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a838:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a83c:	4641      	mov	r1, r8
 800a83e:	1851      	adds	r1, r2, r1
 800a840:	6339      	str	r1, [r7, #48]	@ 0x30
 800a842:	4649      	mov	r1, r9
 800a844:	414b      	adcs	r3, r1
 800a846:	637b      	str	r3, [r7, #52]	@ 0x34
 800a848:	f04f 0200 	mov.w	r2, #0
 800a84c:	f04f 0300 	mov.w	r3, #0
 800a850:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a854:	4659      	mov	r1, fp
 800a856:	00cb      	lsls	r3, r1, #3
 800a858:	4651      	mov	r1, sl
 800a85a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a85e:	4651      	mov	r1, sl
 800a860:	00ca      	lsls	r2, r1, #3
 800a862:	4610      	mov	r0, r2
 800a864:	4619      	mov	r1, r3
 800a866:	4603      	mov	r3, r0
 800a868:	4642      	mov	r2, r8
 800a86a:	189b      	adds	r3, r3, r2
 800a86c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a870:	464b      	mov	r3, r9
 800a872:	460a      	mov	r2, r1
 800a874:	eb42 0303 	adc.w	r3, r2, r3
 800a878:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a888:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a88c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a890:	460b      	mov	r3, r1
 800a892:	18db      	adds	r3, r3, r3
 800a894:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a896:	4613      	mov	r3, r2
 800a898:	eb42 0303 	adc.w	r3, r2, r3
 800a89c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a89e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a8a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a8a6:	f7f6 fb05 	bl	8000eb4 <__aeabi_uldivmod>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e4 <UART_SetConfig+0x2d4>)
 800a8b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a8b4:	095b      	lsrs	r3, r3, #5
 800a8b6:	2164      	movs	r1, #100	@ 0x64
 800a8b8:	fb01 f303 	mul.w	r3, r1, r3
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	00db      	lsls	r3, r3, #3
 800a8c0:	3332      	adds	r3, #50	@ 0x32
 800a8c2:	4a08      	ldr	r2, [pc, #32]	@ (800a8e4 <UART_SetConfig+0x2d4>)
 800a8c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a8c8:	095b      	lsrs	r3, r3, #5
 800a8ca:	f003 0207 	and.w	r2, r3, #7
 800a8ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4422      	add	r2, r4
 800a8d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a8d8:	e106      	b.n	800aae8 <UART_SetConfig+0x4d8>
 800a8da:	bf00      	nop
 800a8dc:	40011000 	.word	0x40011000
 800a8e0:	40011400 	.word	0x40011400
 800a8e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a8e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a8f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a8f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a8fa:	4642      	mov	r2, r8
 800a8fc:	464b      	mov	r3, r9
 800a8fe:	1891      	adds	r1, r2, r2
 800a900:	6239      	str	r1, [r7, #32]
 800a902:	415b      	adcs	r3, r3
 800a904:	627b      	str	r3, [r7, #36]	@ 0x24
 800a906:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a90a:	4641      	mov	r1, r8
 800a90c:	1854      	adds	r4, r2, r1
 800a90e:	4649      	mov	r1, r9
 800a910:	eb43 0501 	adc.w	r5, r3, r1
 800a914:	f04f 0200 	mov.w	r2, #0
 800a918:	f04f 0300 	mov.w	r3, #0
 800a91c:	00eb      	lsls	r3, r5, #3
 800a91e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a922:	00e2      	lsls	r2, r4, #3
 800a924:	4614      	mov	r4, r2
 800a926:	461d      	mov	r5, r3
 800a928:	4643      	mov	r3, r8
 800a92a:	18e3      	adds	r3, r4, r3
 800a92c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a930:	464b      	mov	r3, r9
 800a932:	eb45 0303 	adc.w	r3, r5, r3
 800a936:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a93a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a946:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a94a:	f04f 0200 	mov.w	r2, #0
 800a94e:	f04f 0300 	mov.w	r3, #0
 800a952:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a956:	4629      	mov	r1, r5
 800a958:	008b      	lsls	r3, r1, #2
 800a95a:	4621      	mov	r1, r4
 800a95c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a960:	4621      	mov	r1, r4
 800a962:	008a      	lsls	r2, r1, #2
 800a964:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a968:	f7f6 faa4 	bl	8000eb4 <__aeabi_uldivmod>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4b60      	ldr	r3, [pc, #384]	@ (800aaf4 <UART_SetConfig+0x4e4>)
 800a972:	fba3 2302 	umull	r2, r3, r3, r2
 800a976:	095b      	lsrs	r3, r3, #5
 800a978:	011c      	lsls	r4, r3, #4
 800a97a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a97e:	2200      	movs	r2, #0
 800a980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a984:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a988:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a98c:	4642      	mov	r2, r8
 800a98e:	464b      	mov	r3, r9
 800a990:	1891      	adds	r1, r2, r2
 800a992:	61b9      	str	r1, [r7, #24]
 800a994:	415b      	adcs	r3, r3
 800a996:	61fb      	str	r3, [r7, #28]
 800a998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a99c:	4641      	mov	r1, r8
 800a99e:	1851      	adds	r1, r2, r1
 800a9a0:	6139      	str	r1, [r7, #16]
 800a9a2:	4649      	mov	r1, r9
 800a9a4:	414b      	adcs	r3, r1
 800a9a6:	617b      	str	r3, [r7, #20]
 800a9a8:	f04f 0200 	mov.w	r2, #0
 800a9ac:	f04f 0300 	mov.w	r3, #0
 800a9b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a9b4:	4659      	mov	r1, fp
 800a9b6:	00cb      	lsls	r3, r1, #3
 800a9b8:	4651      	mov	r1, sl
 800a9ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9be:	4651      	mov	r1, sl
 800a9c0:	00ca      	lsls	r2, r1, #3
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	4642      	mov	r2, r8
 800a9ca:	189b      	adds	r3, r3, r2
 800a9cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a9d0:	464b      	mov	r3, r9
 800a9d2:	460a      	mov	r2, r1
 800a9d4:	eb42 0303 	adc.w	r3, r2, r3
 800a9d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a9dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a9e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a9e8:	f04f 0200 	mov.w	r2, #0
 800a9ec:	f04f 0300 	mov.w	r3, #0
 800a9f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	008b      	lsls	r3, r1, #2
 800a9f8:	4641      	mov	r1, r8
 800a9fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9fe:	4641      	mov	r1, r8
 800aa00:	008a      	lsls	r2, r1, #2
 800aa02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800aa06:	f7f6 fa55 	bl	8000eb4 <__aeabi_uldivmod>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4611      	mov	r1, r2
 800aa10:	4b38      	ldr	r3, [pc, #224]	@ (800aaf4 <UART_SetConfig+0x4e4>)
 800aa12:	fba3 2301 	umull	r2, r3, r3, r1
 800aa16:	095b      	lsrs	r3, r3, #5
 800aa18:	2264      	movs	r2, #100	@ 0x64
 800aa1a:	fb02 f303 	mul.w	r3, r2, r3
 800aa1e:	1acb      	subs	r3, r1, r3
 800aa20:	011b      	lsls	r3, r3, #4
 800aa22:	3332      	adds	r3, #50	@ 0x32
 800aa24:	4a33      	ldr	r2, [pc, #204]	@ (800aaf4 <UART_SetConfig+0x4e4>)
 800aa26:	fba2 2303 	umull	r2, r3, r2, r3
 800aa2a:	095b      	lsrs	r3, r3, #5
 800aa2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa30:	441c      	add	r4, r3
 800aa32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa36:	2200      	movs	r2, #0
 800aa38:	673b      	str	r3, [r7, #112]	@ 0x70
 800aa3a:	677a      	str	r2, [r7, #116]	@ 0x74
 800aa3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800aa40:	4642      	mov	r2, r8
 800aa42:	464b      	mov	r3, r9
 800aa44:	1891      	adds	r1, r2, r2
 800aa46:	60b9      	str	r1, [r7, #8]
 800aa48:	415b      	adcs	r3, r3
 800aa4a:	60fb      	str	r3, [r7, #12]
 800aa4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa50:	4641      	mov	r1, r8
 800aa52:	1851      	adds	r1, r2, r1
 800aa54:	6039      	str	r1, [r7, #0]
 800aa56:	4649      	mov	r1, r9
 800aa58:	414b      	adcs	r3, r1
 800aa5a:	607b      	str	r3, [r7, #4]
 800aa5c:	f04f 0200 	mov.w	r2, #0
 800aa60:	f04f 0300 	mov.w	r3, #0
 800aa64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aa68:	4659      	mov	r1, fp
 800aa6a:	00cb      	lsls	r3, r1, #3
 800aa6c:	4651      	mov	r1, sl
 800aa6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa72:	4651      	mov	r1, sl
 800aa74:	00ca      	lsls	r2, r1, #3
 800aa76:	4610      	mov	r0, r2
 800aa78:	4619      	mov	r1, r3
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	4642      	mov	r2, r8
 800aa7e:	189b      	adds	r3, r3, r2
 800aa80:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa82:	464b      	mov	r3, r9
 800aa84:	460a      	mov	r2, r1
 800aa86:	eb42 0303 	adc.w	r3, r2, r3
 800aa8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aa8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa96:	667a      	str	r2, [r7, #100]	@ 0x64
 800aa98:	f04f 0200 	mov.w	r2, #0
 800aa9c:	f04f 0300 	mov.w	r3, #0
 800aaa0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aaa4:	4649      	mov	r1, r9
 800aaa6:	008b      	lsls	r3, r1, #2
 800aaa8:	4641      	mov	r1, r8
 800aaaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aaae:	4641      	mov	r1, r8
 800aab0:	008a      	lsls	r2, r1, #2
 800aab2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aab6:	f7f6 f9fd 	bl	8000eb4 <__aeabi_uldivmod>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	4b0d      	ldr	r3, [pc, #52]	@ (800aaf4 <UART_SetConfig+0x4e4>)
 800aac0:	fba3 1302 	umull	r1, r3, r3, r2
 800aac4:	095b      	lsrs	r3, r3, #5
 800aac6:	2164      	movs	r1, #100	@ 0x64
 800aac8:	fb01 f303 	mul.w	r3, r1, r3
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	011b      	lsls	r3, r3, #4
 800aad0:	3332      	adds	r3, #50	@ 0x32
 800aad2:	4a08      	ldr	r2, [pc, #32]	@ (800aaf4 <UART_SetConfig+0x4e4>)
 800aad4:	fba2 2303 	umull	r2, r3, r2, r3
 800aad8:	095b      	lsrs	r3, r3, #5
 800aada:	f003 020f 	and.w	r2, r3, #15
 800aade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4422      	add	r2, r4
 800aae6:	609a      	str	r2, [r3, #8]
}
 800aae8:	bf00      	nop
 800aaea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aaf4:	51eb851f 	.word	0x51eb851f

0800aaf8 <__cvt>:
 800aaf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aafc:	ec57 6b10 	vmov	r6, r7, d0
 800ab00:	2f00      	cmp	r7, #0
 800ab02:	460c      	mov	r4, r1
 800ab04:	4619      	mov	r1, r3
 800ab06:	463b      	mov	r3, r7
 800ab08:	bfbb      	ittet	lt
 800ab0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ab0e:	461f      	movlt	r7, r3
 800ab10:	2300      	movge	r3, #0
 800ab12:	232d      	movlt	r3, #45	@ 0x2d
 800ab14:	700b      	strb	r3, [r1, #0]
 800ab16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ab1c:	4691      	mov	r9, r2
 800ab1e:	f023 0820 	bic.w	r8, r3, #32
 800ab22:	bfbc      	itt	lt
 800ab24:	4632      	movlt	r2, r6
 800ab26:	4616      	movlt	r6, r2
 800ab28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab2c:	d005      	beq.n	800ab3a <__cvt+0x42>
 800ab2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ab32:	d100      	bne.n	800ab36 <__cvt+0x3e>
 800ab34:	3401      	adds	r4, #1
 800ab36:	2102      	movs	r1, #2
 800ab38:	e000      	b.n	800ab3c <__cvt+0x44>
 800ab3a:	2103      	movs	r1, #3
 800ab3c:	ab03      	add	r3, sp, #12
 800ab3e:	9301      	str	r3, [sp, #4]
 800ab40:	ab02      	add	r3, sp, #8
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	ec47 6b10 	vmov	d0, r6, r7
 800ab48:	4653      	mov	r3, sl
 800ab4a:	4622      	mov	r2, r4
 800ab4c:	f001 f880 	bl	800bc50 <_dtoa_r>
 800ab50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ab54:	4605      	mov	r5, r0
 800ab56:	d119      	bne.n	800ab8c <__cvt+0x94>
 800ab58:	f019 0f01 	tst.w	r9, #1
 800ab5c:	d00e      	beq.n	800ab7c <__cvt+0x84>
 800ab5e:	eb00 0904 	add.w	r9, r0, r4
 800ab62:	2200      	movs	r2, #0
 800ab64:	2300      	movs	r3, #0
 800ab66:	4630      	mov	r0, r6
 800ab68:	4639      	mov	r1, r7
 800ab6a:	f7f5 ffb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab6e:	b108      	cbz	r0, 800ab74 <__cvt+0x7c>
 800ab70:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab74:	2230      	movs	r2, #48	@ 0x30
 800ab76:	9b03      	ldr	r3, [sp, #12]
 800ab78:	454b      	cmp	r3, r9
 800ab7a:	d31e      	bcc.n	800abba <__cvt+0xc2>
 800ab7c:	9b03      	ldr	r3, [sp, #12]
 800ab7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab80:	1b5b      	subs	r3, r3, r5
 800ab82:	4628      	mov	r0, r5
 800ab84:	6013      	str	r3, [r2, #0]
 800ab86:	b004      	add	sp, #16
 800ab88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab90:	eb00 0904 	add.w	r9, r0, r4
 800ab94:	d1e5      	bne.n	800ab62 <__cvt+0x6a>
 800ab96:	7803      	ldrb	r3, [r0, #0]
 800ab98:	2b30      	cmp	r3, #48	@ 0x30
 800ab9a:	d10a      	bne.n	800abb2 <__cvt+0xba>
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2300      	movs	r3, #0
 800aba0:	4630      	mov	r0, r6
 800aba2:	4639      	mov	r1, r7
 800aba4:	f7f5 ff98 	bl	8000ad8 <__aeabi_dcmpeq>
 800aba8:	b918      	cbnz	r0, 800abb2 <__cvt+0xba>
 800abaa:	f1c4 0401 	rsb	r4, r4, #1
 800abae:	f8ca 4000 	str.w	r4, [sl]
 800abb2:	f8da 3000 	ldr.w	r3, [sl]
 800abb6:	4499      	add	r9, r3
 800abb8:	e7d3      	b.n	800ab62 <__cvt+0x6a>
 800abba:	1c59      	adds	r1, r3, #1
 800abbc:	9103      	str	r1, [sp, #12]
 800abbe:	701a      	strb	r2, [r3, #0]
 800abc0:	e7d9      	b.n	800ab76 <__cvt+0x7e>

0800abc2 <__exponent>:
 800abc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abc4:	2900      	cmp	r1, #0
 800abc6:	bfba      	itte	lt
 800abc8:	4249      	neglt	r1, r1
 800abca:	232d      	movlt	r3, #45	@ 0x2d
 800abcc:	232b      	movge	r3, #43	@ 0x2b
 800abce:	2909      	cmp	r1, #9
 800abd0:	7002      	strb	r2, [r0, #0]
 800abd2:	7043      	strb	r3, [r0, #1]
 800abd4:	dd29      	ble.n	800ac2a <__exponent+0x68>
 800abd6:	f10d 0307 	add.w	r3, sp, #7
 800abda:	461d      	mov	r5, r3
 800abdc:	270a      	movs	r7, #10
 800abde:	461a      	mov	r2, r3
 800abe0:	fbb1 f6f7 	udiv	r6, r1, r7
 800abe4:	fb07 1416 	mls	r4, r7, r6, r1
 800abe8:	3430      	adds	r4, #48	@ 0x30
 800abea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800abee:	460c      	mov	r4, r1
 800abf0:	2c63      	cmp	r4, #99	@ 0x63
 800abf2:	f103 33ff 	add.w	r3, r3, #4294967295
 800abf6:	4631      	mov	r1, r6
 800abf8:	dcf1      	bgt.n	800abde <__exponent+0x1c>
 800abfa:	3130      	adds	r1, #48	@ 0x30
 800abfc:	1e94      	subs	r4, r2, #2
 800abfe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ac02:	1c41      	adds	r1, r0, #1
 800ac04:	4623      	mov	r3, r4
 800ac06:	42ab      	cmp	r3, r5
 800ac08:	d30a      	bcc.n	800ac20 <__exponent+0x5e>
 800ac0a:	f10d 0309 	add.w	r3, sp, #9
 800ac0e:	1a9b      	subs	r3, r3, r2
 800ac10:	42ac      	cmp	r4, r5
 800ac12:	bf88      	it	hi
 800ac14:	2300      	movhi	r3, #0
 800ac16:	3302      	adds	r3, #2
 800ac18:	4403      	add	r3, r0
 800ac1a:	1a18      	subs	r0, r3, r0
 800ac1c:	b003      	add	sp, #12
 800ac1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac20:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ac24:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ac28:	e7ed      	b.n	800ac06 <__exponent+0x44>
 800ac2a:	2330      	movs	r3, #48	@ 0x30
 800ac2c:	3130      	adds	r1, #48	@ 0x30
 800ac2e:	7083      	strb	r3, [r0, #2]
 800ac30:	70c1      	strb	r1, [r0, #3]
 800ac32:	1d03      	adds	r3, r0, #4
 800ac34:	e7f1      	b.n	800ac1a <__exponent+0x58>
	...

0800ac38 <_printf_float>:
 800ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	b08d      	sub	sp, #52	@ 0x34
 800ac3e:	460c      	mov	r4, r1
 800ac40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac44:	4616      	mov	r6, r2
 800ac46:	461f      	mov	r7, r3
 800ac48:	4605      	mov	r5, r0
 800ac4a:	f000 fefb 	bl	800ba44 <_localeconv_r>
 800ac4e:	6803      	ldr	r3, [r0, #0]
 800ac50:	9304      	str	r3, [sp, #16]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7f5 fb14 	bl	8000280 <strlen>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac5c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac60:	9005      	str	r0, [sp, #20]
 800ac62:	3307      	adds	r3, #7
 800ac64:	f023 0307 	bic.w	r3, r3, #7
 800ac68:	f103 0208 	add.w	r2, r3, #8
 800ac6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ac70:	f8d4 b000 	ldr.w	fp, [r4]
 800ac74:	f8c8 2000 	str.w	r2, [r8]
 800ac78:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ac80:	9307      	str	r3, [sp, #28]
 800ac82:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ac8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac8e:	4b9c      	ldr	r3, [pc, #624]	@ (800af00 <_printf_float+0x2c8>)
 800ac90:	f04f 32ff 	mov.w	r2, #4294967295
 800ac94:	f7f5 ff52 	bl	8000b3c <__aeabi_dcmpun>
 800ac98:	bb70      	cbnz	r0, 800acf8 <_printf_float+0xc0>
 800ac9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac9e:	4b98      	ldr	r3, [pc, #608]	@ (800af00 <_printf_float+0x2c8>)
 800aca0:	f04f 32ff 	mov.w	r2, #4294967295
 800aca4:	f7f5 ff2c 	bl	8000b00 <__aeabi_dcmple>
 800aca8:	bb30      	cbnz	r0, 800acf8 <_printf_float+0xc0>
 800acaa:	2200      	movs	r2, #0
 800acac:	2300      	movs	r3, #0
 800acae:	4640      	mov	r0, r8
 800acb0:	4649      	mov	r1, r9
 800acb2:	f7f5 ff1b 	bl	8000aec <__aeabi_dcmplt>
 800acb6:	b110      	cbz	r0, 800acbe <_printf_float+0x86>
 800acb8:	232d      	movs	r3, #45	@ 0x2d
 800acba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acbe:	4a91      	ldr	r2, [pc, #580]	@ (800af04 <_printf_float+0x2cc>)
 800acc0:	4b91      	ldr	r3, [pc, #580]	@ (800af08 <_printf_float+0x2d0>)
 800acc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800acc6:	bf8c      	ite	hi
 800acc8:	4690      	movhi	r8, r2
 800acca:	4698      	movls	r8, r3
 800accc:	2303      	movs	r3, #3
 800acce:	6123      	str	r3, [r4, #16]
 800acd0:	f02b 0304 	bic.w	r3, fp, #4
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	f04f 0900 	mov.w	r9, #0
 800acda:	9700      	str	r7, [sp, #0]
 800acdc:	4633      	mov	r3, r6
 800acde:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ace0:	4621      	mov	r1, r4
 800ace2:	4628      	mov	r0, r5
 800ace4:	f000 f9d2 	bl	800b08c <_printf_common>
 800ace8:	3001      	adds	r0, #1
 800acea:	f040 808d 	bne.w	800ae08 <_printf_float+0x1d0>
 800acee:	f04f 30ff 	mov.w	r0, #4294967295
 800acf2:	b00d      	add	sp, #52	@ 0x34
 800acf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf8:	4642      	mov	r2, r8
 800acfa:	464b      	mov	r3, r9
 800acfc:	4640      	mov	r0, r8
 800acfe:	4649      	mov	r1, r9
 800ad00:	f7f5 ff1c 	bl	8000b3c <__aeabi_dcmpun>
 800ad04:	b140      	cbz	r0, 800ad18 <_printf_float+0xe0>
 800ad06:	464b      	mov	r3, r9
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	bfbc      	itt	lt
 800ad0c:	232d      	movlt	r3, #45	@ 0x2d
 800ad0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ad12:	4a7e      	ldr	r2, [pc, #504]	@ (800af0c <_printf_float+0x2d4>)
 800ad14:	4b7e      	ldr	r3, [pc, #504]	@ (800af10 <_printf_float+0x2d8>)
 800ad16:	e7d4      	b.n	800acc2 <_printf_float+0x8a>
 800ad18:	6863      	ldr	r3, [r4, #4]
 800ad1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ad1e:	9206      	str	r2, [sp, #24]
 800ad20:	1c5a      	adds	r2, r3, #1
 800ad22:	d13b      	bne.n	800ad9c <_printf_float+0x164>
 800ad24:	2306      	movs	r3, #6
 800ad26:	6063      	str	r3, [r4, #4]
 800ad28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	6022      	str	r2, [r4, #0]
 800ad30:	9303      	str	r3, [sp, #12]
 800ad32:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad34:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ad38:	ab09      	add	r3, sp, #36	@ 0x24
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	6861      	ldr	r1, [r4, #4]
 800ad3e:	ec49 8b10 	vmov	d0, r8, r9
 800ad42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ad46:	4628      	mov	r0, r5
 800ad48:	f7ff fed6 	bl	800aaf8 <__cvt>
 800ad4c:	9b06      	ldr	r3, [sp, #24]
 800ad4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad50:	2b47      	cmp	r3, #71	@ 0x47
 800ad52:	4680      	mov	r8, r0
 800ad54:	d129      	bne.n	800adaa <_printf_float+0x172>
 800ad56:	1cc8      	adds	r0, r1, #3
 800ad58:	db02      	blt.n	800ad60 <_printf_float+0x128>
 800ad5a:	6863      	ldr	r3, [r4, #4]
 800ad5c:	4299      	cmp	r1, r3
 800ad5e:	dd41      	ble.n	800ade4 <_printf_float+0x1ac>
 800ad60:	f1aa 0a02 	sub.w	sl, sl, #2
 800ad64:	fa5f fa8a 	uxtb.w	sl, sl
 800ad68:	3901      	subs	r1, #1
 800ad6a:	4652      	mov	r2, sl
 800ad6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad70:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad72:	f7ff ff26 	bl	800abc2 <__exponent>
 800ad76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad78:	1813      	adds	r3, r2, r0
 800ad7a:	2a01      	cmp	r2, #1
 800ad7c:	4681      	mov	r9, r0
 800ad7e:	6123      	str	r3, [r4, #16]
 800ad80:	dc02      	bgt.n	800ad88 <_printf_float+0x150>
 800ad82:	6822      	ldr	r2, [r4, #0]
 800ad84:	07d2      	lsls	r2, r2, #31
 800ad86:	d501      	bpl.n	800ad8c <_printf_float+0x154>
 800ad88:	3301      	adds	r3, #1
 800ad8a:	6123      	str	r3, [r4, #16]
 800ad8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d0a2      	beq.n	800acda <_printf_float+0xa2>
 800ad94:	232d      	movs	r3, #45	@ 0x2d
 800ad96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad9a:	e79e      	b.n	800acda <_printf_float+0xa2>
 800ad9c:	9a06      	ldr	r2, [sp, #24]
 800ad9e:	2a47      	cmp	r2, #71	@ 0x47
 800ada0:	d1c2      	bne.n	800ad28 <_printf_float+0xf0>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1c0      	bne.n	800ad28 <_printf_float+0xf0>
 800ada6:	2301      	movs	r3, #1
 800ada8:	e7bd      	b.n	800ad26 <_printf_float+0xee>
 800adaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800adae:	d9db      	bls.n	800ad68 <_printf_float+0x130>
 800adb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800adb4:	d118      	bne.n	800ade8 <_printf_float+0x1b0>
 800adb6:	2900      	cmp	r1, #0
 800adb8:	6863      	ldr	r3, [r4, #4]
 800adba:	dd0b      	ble.n	800add4 <_printf_float+0x19c>
 800adbc:	6121      	str	r1, [r4, #16]
 800adbe:	b913      	cbnz	r3, 800adc6 <_printf_float+0x18e>
 800adc0:	6822      	ldr	r2, [r4, #0]
 800adc2:	07d0      	lsls	r0, r2, #31
 800adc4:	d502      	bpl.n	800adcc <_printf_float+0x194>
 800adc6:	3301      	adds	r3, #1
 800adc8:	440b      	add	r3, r1
 800adca:	6123      	str	r3, [r4, #16]
 800adcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800adce:	f04f 0900 	mov.w	r9, #0
 800add2:	e7db      	b.n	800ad8c <_printf_float+0x154>
 800add4:	b913      	cbnz	r3, 800addc <_printf_float+0x1a4>
 800add6:	6822      	ldr	r2, [r4, #0]
 800add8:	07d2      	lsls	r2, r2, #31
 800adda:	d501      	bpl.n	800ade0 <_printf_float+0x1a8>
 800addc:	3302      	adds	r3, #2
 800adde:	e7f4      	b.n	800adca <_printf_float+0x192>
 800ade0:	2301      	movs	r3, #1
 800ade2:	e7f2      	b.n	800adca <_printf_float+0x192>
 800ade4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ade8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adea:	4299      	cmp	r1, r3
 800adec:	db05      	blt.n	800adfa <_printf_float+0x1c2>
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	6121      	str	r1, [r4, #16]
 800adf2:	07d8      	lsls	r0, r3, #31
 800adf4:	d5ea      	bpl.n	800adcc <_printf_float+0x194>
 800adf6:	1c4b      	adds	r3, r1, #1
 800adf8:	e7e7      	b.n	800adca <_printf_float+0x192>
 800adfa:	2900      	cmp	r1, #0
 800adfc:	bfd4      	ite	le
 800adfe:	f1c1 0202 	rsble	r2, r1, #2
 800ae02:	2201      	movgt	r2, #1
 800ae04:	4413      	add	r3, r2
 800ae06:	e7e0      	b.n	800adca <_printf_float+0x192>
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	055a      	lsls	r2, r3, #21
 800ae0c:	d407      	bmi.n	800ae1e <_printf_float+0x1e6>
 800ae0e:	6923      	ldr	r3, [r4, #16]
 800ae10:	4642      	mov	r2, r8
 800ae12:	4631      	mov	r1, r6
 800ae14:	4628      	mov	r0, r5
 800ae16:	47b8      	blx	r7
 800ae18:	3001      	adds	r0, #1
 800ae1a:	d12b      	bne.n	800ae74 <_printf_float+0x23c>
 800ae1c:	e767      	b.n	800acee <_printf_float+0xb6>
 800ae1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae22:	f240 80dd 	bls.w	800afe0 <_printf_float+0x3a8>
 800ae26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f7f5 fe53 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d033      	beq.n	800ae9e <_printf_float+0x266>
 800ae36:	4a37      	ldr	r2, [pc, #220]	@ (800af14 <_printf_float+0x2dc>)
 800ae38:	2301      	movs	r3, #1
 800ae3a:	4631      	mov	r1, r6
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	47b8      	blx	r7
 800ae40:	3001      	adds	r0, #1
 800ae42:	f43f af54 	beq.w	800acee <_printf_float+0xb6>
 800ae46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ae4a:	4543      	cmp	r3, r8
 800ae4c:	db02      	blt.n	800ae54 <_printf_float+0x21c>
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	07d8      	lsls	r0, r3, #31
 800ae52:	d50f      	bpl.n	800ae74 <_printf_float+0x23c>
 800ae54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae58:	4631      	mov	r1, r6
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	47b8      	blx	r7
 800ae5e:	3001      	adds	r0, #1
 800ae60:	f43f af45 	beq.w	800acee <_printf_float+0xb6>
 800ae64:	f04f 0900 	mov.w	r9, #0
 800ae68:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae6c:	f104 0a1a 	add.w	sl, r4, #26
 800ae70:	45c8      	cmp	r8, r9
 800ae72:	dc09      	bgt.n	800ae88 <_printf_float+0x250>
 800ae74:	6823      	ldr	r3, [r4, #0]
 800ae76:	079b      	lsls	r3, r3, #30
 800ae78:	f100 8103 	bmi.w	800b082 <_printf_float+0x44a>
 800ae7c:	68e0      	ldr	r0, [r4, #12]
 800ae7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae80:	4298      	cmp	r0, r3
 800ae82:	bfb8      	it	lt
 800ae84:	4618      	movlt	r0, r3
 800ae86:	e734      	b.n	800acf2 <_printf_float+0xba>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	4652      	mov	r2, sl
 800ae8c:	4631      	mov	r1, r6
 800ae8e:	4628      	mov	r0, r5
 800ae90:	47b8      	blx	r7
 800ae92:	3001      	adds	r0, #1
 800ae94:	f43f af2b 	beq.w	800acee <_printf_float+0xb6>
 800ae98:	f109 0901 	add.w	r9, r9, #1
 800ae9c:	e7e8      	b.n	800ae70 <_printf_float+0x238>
 800ae9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	dc39      	bgt.n	800af18 <_printf_float+0x2e0>
 800aea4:	4a1b      	ldr	r2, [pc, #108]	@ (800af14 <_printf_float+0x2dc>)
 800aea6:	2301      	movs	r3, #1
 800aea8:	4631      	mov	r1, r6
 800aeaa:	4628      	mov	r0, r5
 800aeac:	47b8      	blx	r7
 800aeae:	3001      	adds	r0, #1
 800aeb0:	f43f af1d 	beq.w	800acee <_printf_float+0xb6>
 800aeb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aeb8:	ea59 0303 	orrs.w	r3, r9, r3
 800aebc:	d102      	bne.n	800aec4 <_printf_float+0x28c>
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	07d9      	lsls	r1, r3, #31
 800aec2:	d5d7      	bpl.n	800ae74 <_printf_float+0x23c>
 800aec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aec8:	4631      	mov	r1, r6
 800aeca:	4628      	mov	r0, r5
 800aecc:	47b8      	blx	r7
 800aece:	3001      	adds	r0, #1
 800aed0:	f43f af0d 	beq.w	800acee <_printf_float+0xb6>
 800aed4:	f04f 0a00 	mov.w	sl, #0
 800aed8:	f104 0b1a 	add.w	fp, r4, #26
 800aedc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aede:	425b      	negs	r3, r3
 800aee0:	4553      	cmp	r3, sl
 800aee2:	dc01      	bgt.n	800aee8 <_printf_float+0x2b0>
 800aee4:	464b      	mov	r3, r9
 800aee6:	e793      	b.n	800ae10 <_printf_float+0x1d8>
 800aee8:	2301      	movs	r3, #1
 800aeea:	465a      	mov	r2, fp
 800aeec:	4631      	mov	r1, r6
 800aeee:	4628      	mov	r0, r5
 800aef0:	47b8      	blx	r7
 800aef2:	3001      	adds	r0, #1
 800aef4:	f43f aefb 	beq.w	800acee <_printf_float+0xb6>
 800aef8:	f10a 0a01 	add.w	sl, sl, #1
 800aefc:	e7ee      	b.n	800aedc <_printf_float+0x2a4>
 800aefe:	bf00      	nop
 800af00:	7fefffff 	.word	0x7fefffff
 800af04:	08011d68 	.word	0x08011d68
 800af08:	08011d64 	.word	0x08011d64
 800af0c:	08011d70 	.word	0x08011d70
 800af10:	08011d6c 	.word	0x08011d6c
 800af14:	08011d74 	.word	0x08011d74
 800af18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af1e:	4553      	cmp	r3, sl
 800af20:	bfa8      	it	ge
 800af22:	4653      	movge	r3, sl
 800af24:	2b00      	cmp	r3, #0
 800af26:	4699      	mov	r9, r3
 800af28:	dc36      	bgt.n	800af98 <_printf_float+0x360>
 800af2a:	f04f 0b00 	mov.w	fp, #0
 800af2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af32:	f104 021a 	add.w	r2, r4, #26
 800af36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af38:	9306      	str	r3, [sp, #24]
 800af3a:	eba3 0309 	sub.w	r3, r3, r9
 800af3e:	455b      	cmp	r3, fp
 800af40:	dc31      	bgt.n	800afa6 <_printf_float+0x36e>
 800af42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af44:	459a      	cmp	sl, r3
 800af46:	dc3a      	bgt.n	800afbe <_printf_float+0x386>
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	07da      	lsls	r2, r3, #31
 800af4c:	d437      	bmi.n	800afbe <_printf_float+0x386>
 800af4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af50:	ebaa 0903 	sub.w	r9, sl, r3
 800af54:	9b06      	ldr	r3, [sp, #24]
 800af56:	ebaa 0303 	sub.w	r3, sl, r3
 800af5a:	4599      	cmp	r9, r3
 800af5c:	bfa8      	it	ge
 800af5e:	4699      	movge	r9, r3
 800af60:	f1b9 0f00 	cmp.w	r9, #0
 800af64:	dc33      	bgt.n	800afce <_printf_float+0x396>
 800af66:	f04f 0800 	mov.w	r8, #0
 800af6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af6e:	f104 0b1a 	add.w	fp, r4, #26
 800af72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af74:	ebaa 0303 	sub.w	r3, sl, r3
 800af78:	eba3 0309 	sub.w	r3, r3, r9
 800af7c:	4543      	cmp	r3, r8
 800af7e:	f77f af79 	ble.w	800ae74 <_printf_float+0x23c>
 800af82:	2301      	movs	r3, #1
 800af84:	465a      	mov	r2, fp
 800af86:	4631      	mov	r1, r6
 800af88:	4628      	mov	r0, r5
 800af8a:	47b8      	blx	r7
 800af8c:	3001      	adds	r0, #1
 800af8e:	f43f aeae 	beq.w	800acee <_printf_float+0xb6>
 800af92:	f108 0801 	add.w	r8, r8, #1
 800af96:	e7ec      	b.n	800af72 <_printf_float+0x33a>
 800af98:	4642      	mov	r2, r8
 800af9a:	4631      	mov	r1, r6
 800af9c:	4628      	mov	r0, r5
 800af9e:	47b8      	blx	r7
 800afa0:	3001      	adds	r0, #1
 800afa2:	d1c2      	bne.n	800af2a <_printf_float+0x2f2>
 800afa4:	e6a3      	b.n	800acee <_printf_float+0xb6>
 800afa6:	2301      	movs	r3, #1
 800afa8:	4631      	mov	r1, r6
 800afaa:	4628      	mov	r0, r5
 800afac:	9206      	str	r2, [sp, #24]
 800afae:	47b8      	blx	r7
 800afb0:	3001      	adds	r0, #1
 800afb2:	f43f ae9c 	beq.w	800acee <_printf_float+0xb6>
 800afb6:	9a06      	ldr	r2, [sp, #24]
 800afb8:	f10b 0b01 	add.w	fp, fp, #1
 800afbc:	e7bb      	b.n	800af36 <_printf_float+0x2fe>
 800afbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afc2:	4631      	mov	r1, r6
 800afc4:	4628      	mov	r0, r5
 800afc6:	47b8      	blx	r7
 800afc8:	3001      	adds	r0, #1
 800afca:	d1c0      	bne.n	800af4e <_printf_float+0x316>
 800afcc:	e68f      	b.n	800acee <_printf_float+0xb6>
 800afce:	9a06      	ldr	r2, [sp, #24]
 800afd0:	464b      	mov	r3, r9
 800afd2:	4442      	add	r2, r8
 800afd4:	4631      	mov	r1, r6
 800afd6:	4628      	mov	r0, r5
 800afd8:	47b8      	blx	r7
 800afda:	3001      	adds	r0, #1
 800afdc:	d1c3      	bne.n	800af66 <_printf_float+0x32e>
 800afde:	e686      	b.n	800acee <_printf_float+0xb6>
 800afe0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800afe4:	f1ba 0f01 	cmp.w	sl, #1
 800afe8:	dc01      	bgt.n	800afee <_printf_float+0x3b6>
 800afea:	07db      	lsls	r3, r3, #31
 800afec:	d536      	bpl.n	800b05c <_printf_float+0x424>
 800afee:	2301      	movs	r3, #1
 800aff0:	4642      	mov	r2, r8
 800aff2:	4631      	mov	r1, r6
 800aff4:	4628      	mov	r0, r5
 800aff6:	47b8      	blx	r7
 800aff8:	3001      	adds	r0, #1
 800affa:	f43f ae78 	beq.w	800acee <_printf_float+0xb6>
 800affe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b002:	4631      	mov	r1, r6
 800b004:	4628      	mov	r0, r5
 800b006:	47b8      	blx	r7
 800b008:	3001      	adds	r0, #1
 800b00a:	f43f ae70 	beq.w	800acee <_printf_float+0xb6>
 800b00e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b012:	2200      	movs	r2, #0
 800b014:	2300      	movs	r3, #0
 800b016:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b01a:	f7f5 fd5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b01e:	b9c0      	cbnz	r0, 800b052 <_printf_float+0x41a>
 800b020:	4653      	mov	r3, sl
 800b022:	f108 0201 	add.w	r2, r8, #1
 800b026:	4631      	mov	r1, r6
 800b028:	4628      	mov	r0, r5
 800b02a:	47b8      	blx	r7
 800b02c:	3001      	adds	r0, #1
 800b02e:	d10c      	bne.n	800b04a <_printf_float+0x412>
 800b030:	e65d      	b.n	800acee <_printf_float+0xb6>
 800b032:	2301      	movs	r3, #1
 800b034:	465a      	mov	r2, fp
 800b036:	4631      	mov	r1, r6
 800b038:	4628      	mov	r0, r5
 800b03a:	47b8      	blx	r7
 800b03c:	3001      	adds	r0, #1
 800b03e:	f43f ae56 	beq.w	800acee <_printf_float+0xb6>
 800b042:	f108 0801 	add.w	r8, r8, #1
 800b046:	45d0      	cmp	r8, sl
 800b048:	dbf3      	blt.n	800b032 <_printf_float+0x3fa>
 800b04a:	464b      	mov	r3, r9
 800b04c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b050:	e6df      	b.n	800ae12 <_printf_float+0x1da>
 800b052:	f04f 0800 	mov.w	r8, #0
 800b056:	f104 0b1a 	add.w	fp, r4, #26
 800b05a:	e7f4      	b.n	800b046 <_printf_float+0x40e>
 800b05c:	2301      	movs	r3, #1
 800b05e:	4642      	mov	r2, r8
 800b060:	e7e1      	b.n	800b026 <_printf_float+0x3ee>
 800b062:	2301      	movs	r3, #1
 800b064:	464a      	mov	r2, r9
 800b066:	4631      	mov	r1, r6
 800b068:	4628      	mov	r0, r5
 800b06a:	47b8      	blx	r7
 800b06c:	3001      	adds	r0, #1
 800b06e:	f43f ae3e 	beq.w	800acee <_printf_float+0xb6>
 800b072:	f108 0801 	add.w	r8, r8, #1
 800b076:	68e3      	ldr	r3, [r4, #12]
 800b078:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b07a:	1a5b      	subs	r3, r3, r1
 800b07c:	4543      	cmp	r3, r8
 800b07e:	dcf0      	bgt.n	800b062 <_printf_float+0x42a>
 800b080:	e6fc      	b.n	800ae7c <_printf_float+0x244>
 800b082:	f04f 0800 	mov.w	r8, #0
 800b086:	f104 0919 	add.w	r9, r4, #25
 800b08a:	e7f4      	b.n	800b076 <_printf_float+0x43e>

0800b08c <_printf_common>:
 800b08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b090:	4616      	mov	r6, r2
 800b092:	4698      	mov	r8, r3
 800b094:	688a      	ldr	r2, [r1, #8]
 800b096:	690b      	ldr	r3, [r1, #16]
 800b098:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b09c:	4293      	cmp	r3, r2
 800b09e:	bfb8      	it	lt
 800b0a0:	4613      	movlt	r3, r2
 800b0a2:	6033      	str	r3, [r6, #0]
 800b0a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b0a8:	4607      	mov	r7, r0
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	b10a      	cbz	r2, 800b0b2 <_printf_common+0x26>
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	6033      	str	r3, [r6, #0]
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	0699      	lsls	r1, r3, #26
 800b0b6:	bf42      	ittt	mi
 800b0b8:	6833      	ldrmi	r3, [r6, #0]
 800b0ba:	3302      	addmi	r3, #2
 800b0bc:	6033      	strmi	r3, [r6, #0]
 800b0be:	6825      	ldr	r5, [r4, #0]
 800b0c0:	f015 0506 	ands.w	r5, r5, #6
 800b0c4:	d106      	bne.n	800b0d4 <_printf_common+0x48>
 800b0c6:	f104 0a19 	add.w	sl, r4, #25
 800b0ca:	68e3      	ldr	r3, [r4, #12]
 800b0cc:	6832      	ldr	r2, [r6, #0]
 800b0ce:	1a9b      	subs	r3, r3, r2
 800b0d0:	42ab      	cmp	r3, r5
 800b0d2:	dc26      	bgt.n	800b122 <_printf_common+0x96>
 800b0d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b0d8:	6822      	ldr	r2, [r4, #0]
 800b0da:	3b00      	subs	r3, #0
 800b0dc:	bf18      	it	ne
 800b0de:	2301      	movne	r3, #1
 800b0e0:	0692      	lsls	r2, r2, #26
 800b0e2:	d42b      	bmi.n	800b13c <_printf_common+0xb0>
 800b0e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b0e8:	4641      	mov	r1, r8
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	47c8      	blx	r9
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	d01e      	beq.n	800b130 <_printf_common+0xa4>
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	6922      	ldr	r2, [r4, #16]
 800b0f6:	f003 0306 	and.w	r3, r3, #6
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	bf02      	ittt	eq
 800b0fe:	68e5      	ldreq	r5, [r4, #12]
 800b100:	6833      	ldreq	r3, [r6, #0]
 800b102:	1aed      	subeq	r5, r5, r3
 800b104:	68a3      	ldr	r3, [r4, #8]
 800b106:	bf0c      	ite	eq
 800b108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b10c:	2500      	movne	r5, #0
 800b10e:	4293      	cmp	r3, r2
 800b110:	bfc4      	itt	gt
 800b112:	1a9b      	subgt	r3, r3, r2
 800b114:	18ed      	addgt	r5, r5, r3
 800b116:	2600      	movs	r6, #0
 800b118:	341a      	adds	r4, #26
 800b11a:	42b5      	cmp	r5, r6
 800b11c:	d11a      	bne.n	800b154 <_printf_common+0xc8>
 800b11e:	2000      	movs	r0, #0
 800b120:	e008      	b.n	800b134 <_printf_common+0xa8>
 800b122:	2301      	movs	r3, #1
 800b124:	4652      	mov	r2, sl
 800b126:	4641      	mov	r1, r8
 800b128:	4638      	mov	r0, r7
 800b12a:	47c8      	blx	r9
 800b12c:	3001      	adds	r0, #1
 800b12e:	d103      	bne.n	800b138 <_printf_common+0xac>
 800b130:	f04f 30ff 	mov.w	r0, #4294967295
 800b134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b138:	3501      	adds	r5, #1
 800b13a:	e7c6      	b.n	800b0ca <_printf_common+0x3e>
 800b13c:	18e1      	adds	r1, r4, r3
 800b13e:	1c5a      	adds	r2, r3, #1
 800b140:	2030      	movs	r0, #48	@ 0x30
 800b142:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b146:	4422      	add	r2, r4
 800b148:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b14c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b150:	3302      	adds	r3, #2
 800b152:	e7c7      	b.n	800b0e4 <_printf_common+0x58>
 800b154:	2301      	movs	r3, #1
 800b156:	4622      	mov	r2, r4
 800b158:	4641      	mov	r1, r8
 800b15a:	4638      	mov	r0, r7
 800b15c:	47c8      	blx	r9
 800b15e:	3001      	adds	r0, #1
 800b160:	d0e6      	beq.n	800b130 <_printf_common+0xa4>
 800b162:	3601      	adds	r6, #1
 800b164:	e7d9      	b.n	800b11a <_printf_common+0x8e>
	...

0800b168 <_printf_i>:
 800b168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b16c:	7e0f      	ldrb	r7, [r1, #24]
 800b16e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b170:	2f78      	cmp	r7, #120	@ 0x78
 800b172:	4691      	mov	r9, r2
 800b174:	4680      	mov	r8, r0
 800b176:	460c      	mov	r4, r1
 800b178:	469a      	mov	sl, r3
 800b17a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b17e:	d807      	bhi.n	800b190 <_printf_i+0x28>
 800b180:	2f62      	cmp	r7, #98	@ 0x62
 800b182:	d80a      	bhi.n	800b19a <_printf_i+0x32>
 800b184:	2f00      	cmp	r7, #0
 800b186:	f000 80d1 	beq.w	800b32c <_printf_i+0x1c4>
 800b18a:	2f58      	cmp	r7, #88	@ 0x58
 800b18c:	f000 80b8 	beq.w	800b300 <_printf_i+0x198>
 800b190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b194:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b198:	e03a      	b.n	800b210 <_printf_i+0xa8>
 800b19a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b19e:	2b15      	cmp	r3, #21
 800b1a0:	d8f6      	bhi.n	800b190 <_printf_i+0x28>
 800b1a2:	a101      	add	r1, pc, #4	@ (adr r1, 800b1a8 <_printf_i+0x40>)
 800b1a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1a8:	0800b201 	.word	0x0800b201
 800b1ac:	0800b215 	.word	0x0800b215
 800b1b0:	0800b191 	.word	0x0800b191
 800b1b4:	0800b191 	.word	0x0800b191
 800b1b8:	0800b191 	.word	0x0800b191
 800b1bc:	0800b191 	.word	0x0800b191
 800b1c0:	0800b215 	.word	0x0800b215
 800b1c4:	0800b191 	.word	0x0800b191
 800b1c8:	0800b191 	.word	0x0800b191
 800b1cc:	0800b191 	.word	0x0800b191
 800b1d0:	0800b191 	.word	0x0800b191
 800b1d4:	0800b313 	.word	0x0800b313
 800b1d8:	0800b23f 	.word	0x0800b23f
 800b1dc:	0800b2cd 	.word	0x0800b2cd
 800b1e0:	0800b191 	.word	0x0800b191
 800b1e4:	0800b191 	.word	0x0800b191
 800b1e8:	0800b335 	.word	0x0800b335
 800b1ec:	0800b191 	.word	0x0800b191
 800b1f0:	0800b23f 	.word	0x0800b23f
 800b1f4:	0800b191 	.word	0x0800b191
 800b1f8:	0800b191 	.word	0x0800b191
 800b1fc:	0800b2d5 	.word	0x0800b2d5
 800b200:	6833      	ldr	r3, [r6, #0]
 800b202:	1d1a      	adds	r2, r3, #4
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	6032      	str	r2, [r6, #0]
 800b208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b20c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b210:	2301      	movs	r3, #1
 800b212:	e09c      	b.n	800b34e <_printf_i+0x1e6>
 800b214:	6833      	ldr	r3, [r6, #0]
 800b216:	6820      	ldr	r0, [r4, #0]
 800b218:	1d19      	adds	r1, r3, #4
 800b21a:	6031      	str	r1, [r6, #0]
 800b21c:	0606      	lsls	r6, r0, #24
 800b21e:	d501      	bpl.n	800b224 <_printf_i+0xbc>
 800b220:	681d      	ldr	r5, [r3, #0]
 800b222:	e003      	b.n	800b22c <_printf_i+0xc4>
 800b224:	0645      	lsls	r5, r0, #25
 800b226:	d5fb      	bpl.n	800b220 <_printf_i+0xb8>
 800b228:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b22c:	2d00      	cmp	r5, #0
 800b22e:	da03      	bge.n	800b238 <_printf_i+0xd0>
 800b230:	232d      	movs	r3, #45	@ 0x2d
 800b232:	426d      	negs	r5, r5
 800b234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b238:	4858      	ldr	r0, [pc, #352]	@ (800b39c <_printf_i+0x234>)
 800b23a:	230a      	movs	r3, #10
 800b23c:	e011      	b.n	800b262 <_printf_i+0xfa>
 800b23e:	6821      	ldr	r1, [r4, #0]
 800b240:	6833      	ldr	r3, [r6, #0]
 800b242:	0608      	lsls	r0, r1, #24
 800b244:	f853 5b04 	ldr.w	r5, [r3], #4
 800b248:	d402      	bmi.n	800b250 <_printf_i+0xe8>
 800b24a:	0649      	lsls	r1, r1, #25
 800b24c:	bf48      	it	mi
 800b24e:	b2ad      	uxthmi	r5, r5
 800b250:	2f6f      	cmp	r7, #111	@ 0x6f
 800b252:	4852      	ldr	r0, [pc, #328]	@ (800b39c <_printf_i+0x234>)
 800b254:	6033      	str	r3, [r6, #0]
 800b256:	bf14      	ite	ne
 800b258:	230a      	movne	r3, #10
 800b25a:	2308      	moveq	r3, #8
 800b25c:	2100      	movs	r1, #0
 800b25e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b262:	6866      	ldr	r6, [r4, #4]
 800b264:	60a6      	str	r6, [r4, #8]
 800b266:	2e00      	cmp	r6, #0
 800b268:	db05      	blt.n	800b276 <_printf_i+0x10e>
 800b26a:	6821      	ldr	r1, [r4, #0]
 800b26c:	432e      	orrs	r6, r5
 800b26e:	f021 0104 	bic.w	r1, r1, #4
 800b272:	6021      	str	r1, [r4, #0]
 800b274:	d04b      	beq.n	800b30e <_printf_i+0x1a6>
 800b276:	4616      	mov	r6, r2
 800b278:	fbb5 f1f3 	udiv	r1, r5, r3
 800b27c:	fb03 5711 	mls	r7, r3, r1, r5
 800b280:	5dc7      	ldrb	r7, [r0, r7]
 800b282:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b286:	462f      	mov	r7, r5
 800b288:	42bb      	cmp	r3, r7
 800b28a:	460d      	mov	r5, r1
 800b28c:	d9f4      	bls.n	800b278 <_printf_i+0x110>
 800b28e:	2b08      	cmp	r3, #8
 800b290:	d10b      	bne.n	800b2aa <_printf_i+0x142>
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	07df      	lsls	r7, r3, #31
 800b296:	d508      	bpl.n	800b2aa <_printf_i+0x142>
 800b298:	6923      	ldr	r3, [r4, #16]
 800b29a:	6861      	ldr	r1, [r4, #4]
 800b29c:	4299      	cmp	r1, r3
 800b29e:	bfde      	ittt	le
 800b2a0:	2330      	movle	r3, #48	@ 0x30
 800b2a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b2a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b2aa:	1b92      	subs	r2, r2, r6
 800b2ac:	6122      	str	r2, [r4, #16]
 800b2ae:	f8cd a000 	str.w	sl, [sp]
 800b2b2:	464b      	mov	r3, r9
 800b2b4:	aa03      	add	r2, sp, #12
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	4640      	mov	r0, r8
 800b2ba:	f7ff fee7 	bl	800b08c <_printf_common>
 800b2be:	3001      	adds	r0, #1
 800b2c0:	d14a      	bne.n	800b358 <_printf_i+0x1f0>
 800b2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c6:	b004      	add	sp, #16
 800b2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2cc:	6823      	ldr	r3, [r4, #0]
 800b2ce:	f043 0320 	orr.w	r3, r3, #32
 800b2d2:	6023      	str	r3, [r4, #0]
 800b2d4:	4832      	ldr	r0, [pc, #200]	@ (800b3a0 <_printf_i+0x238>)
 800b2d6:	2778      	movs	r7, #120	@ 0x78
 800b2d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	6831      	ldr	r1, [r6, #0]
 800b2e0:	061f      	lsls	r7, r3, #24
 800b2e2:	f851 5b04 	ldr.w	r5, [r1], #4
 800b2e6:	d402      	bmi.n	800b2ee <_printf_i+0x186>
 800b2e8:	065f      	lsls	r7, r3, #25
 800b2ea:	bf48      	it	mi
 800b2ec:	b2ad      	uxthmi	r5, r5
 800b2ee:	6031      	str	r1, [r6, #0]
 800b2f0:	07d9      	lsls	r1, r3, #31
 800b2f2:	bf44      	itt	mi
 800b2f4:	f043 0320 	orrmi.w	r3, r3, #32
 800b2f8:	6023      	strmi	r3, [r4, #0]
 800b2fa:	b11d      	cbz	r5, 800b304 <_printf_i+0x19c>
 800b2fc:	2310      	movs	r3, #16
 800b2fe:	e7ad      	b.n	800b25c <_printf_i+0xf4>
 800b300:	4826      	ldr	r0, [pc, #152]	@ (800b39c <_printf_i+0x234>)
 800b302:	e7e9      	b.n	800b2d8 <_printf_i+0x170>
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	f023 0320 	bic.w	r3, r3, #32
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	e7f6      	b.n	800b2fc <_printf_i+0x194>
 800b30e:	4616      	mov	r6, r2
 800b310:	e7bd      	b.n	800b28e <_printf_i+0x126>
 800b312:	6833      	ldr	r3, [r6, #0]
 800b314:	6825      	ldr	r5, [r4, #0]
 800b316:	6961      	ldr	r1, [r4, #20]
 800b318:	1d18      	adds	r0, r3, #4
 800b31a:	6030      	str	r0, [r6, #0]
 800b31c:	062e      	lsls	r6, r5, #24
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	d501      	bpl.n	800b326 <_printf_i+0x1be>
 800b322:	6019      	str	r1, [r3, #0]
 800b324:	e002      	b.n	800b32c <_printf_i+0x1c4>
 800b326:	0668      	lsls	r0, r5, #25
 800b328:	d5fb      	bpl.n	800b322 <_printf_i+0x1ba>
 800b32a:	8019      	strh	r1, [r3, #0]
 800b32c:	2300      	movs	r3, #0
 800b32e:	6123      	str	r3, [r4, #16]
 800b330:	4616      	mov	r6, r2
 800b332:	e7bc      	b.n	800b2ae <_printf_i+0x146>
 800b334:	6833      	ldr	r3, [r6, #0]
 800b336:	1d1a      	adds	r2, r3, #4
 800b338:	6032      	str	r2, [r6, #0]
 800b33a:	681e      	ldr	r6, [r3, #0]
 800b33c:	6862      	ldr	r2, [r4, #4]
 800b33e:	2100      	movs	r1, #0
 800b340:	4630      	mov	r0, r6
 800b342:	f7f4 ff4d 	bl	80001e0 <memchr>
 800b346:	b108      	cbz	r0, 800b34c <_printf_i+0x1e4>
 800b348:	1b80      	subs	r0, r0, r6
 800b34a:	6060      	str	r0, [r4, #4]
 800b34c:	6863      	ldr	r3, [r4, #4]
 800b34e:	6123      	str	r3, [r4, #16]
 800b350:	2300      	movs	r3, #0
 800b352:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b356:	e7aa      	b.n	800b2ae <_printf_i+0x146>
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	4632      	mov	r2, r6
 800b35c:	4649      	mov	r1, r9
 800b35e:	4640      	mov	r0, r8
 800b360:	47d0      	blx	sl
 800b362:	3001      	adds	r0, #1
 800b364:	d0ad      	beq.n	800b2c2 <_printf_i+0x15a>
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	079b      	lsls	r3, r3, #30
 800b36a:	d413      	bmi.n	800b394 <_printf_i+0x22c>
 800b36c:	68e0      	ldr	r0, [r4, #12]
 800b36e:	9b03      	ldr	r3, [sp, #12]
 800b370:	4298      	cmp	r0, r3
 800b372:	bfb8      	it	lt
 800b374:	4618      	movlt	r0, r3
 800b376:	e7a6      	b.n	800b2c6 <_printf_i+0x15e>
 800b378:	2301      	movs	r3, #1
 800b37a:	4632      	mov	r2, r6
 800b37c:	4649      	mov	r1, r9
 800b37e:	4640      	mov	r0, r8
 800b380:	47d0      	blx	sl
 800b382:	3001      	adds	r0, #1
 800b384:	d09d      	beq.n	800b2c2 <_printf_i+0x15a>
 800b386:	3501      	adds	r5, #1
 800b388:	68e3      	ldr	r3, [r4, #12]
 800b38a:	9903      	ldr	r1, [sp, #12]
 800b38c:	1a5b      	subs	r3, r3, r1
 800b38e:	42ab      	cmp	r3, r5
 800b390:	dcf2      	bgt.n	800b378 <_printf_i+0x210>
 800b392:	e7eb      	b.n	800b36c <_printf_i+0x204>
 800b394:	2500      	movs	r5, #0
 800b396:	f104 0619 	add.w	r6, r4, #25
 800b39a:	e7f5      	b.n	800b388 <_printf_i+0x220>
 800b39c:	08011d76 	.word	0x08011d76
 800b3a0:	08011d87 	.word	0x08011d87

0800b3a4 <_scanf_float>:
 800b3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a8:	b087      	sub	sp, #28
 800b3aa:	4691      	mov	r9, r2
 800b3ac:	9303      	str	r3, [sp, #12]
 800b3ae:	688b      	ldr	r3, [r1, #8]
 800b3b0:	1e5a      	subs	r2, r3, #1
 800b3b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b3b6:	bf81      	itttt	hi
 800b3b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b3bc:	eb03 0b05 	addhi.w	fp, r3, r5
 800b3c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b3c4:	608b      	strhi	r3, [r1, #8]
 800b3c6:	680b      	ldr	r3, [r1, #0]
 800b3c8:	460a      	mov	r2, r1
 800b3ca:	f04f 0500 	mov.w	r5, #0
 800b3ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b3d2:	f842 3b1c 	str.w	r3, [r2], #28
 800b3d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b3da:	4680      	mov	r8, r0
 800b3dc:	460c      	mov	r4, r1
 800b3de:	bf98      	it	ls
 800b3e0:	f04f 0b00 	movls.w	fp, #0
 800b3e4:	9201      	str	r2, [sp, #4]
 800b3e6:	4616      	mov	r6, r2
 800b3e8:	46aa      	mov	sl, r5
 800b3ea:	462f      	mov	r7, r5
 800b3ec:	9502      	str	r5, [sp, #8]
 800b3ee:	68a2      	ldr	r2, [r4, #8]
 800b3f0:	b15a      	cbz	r2, 800b40a <_scanf_float+0x66>
 800b3f2:	f8d9 3000 	ldr.w	r3, [r9]
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	2b4e      	cmp	r3, #78	@ 0x4e
 800b3fa:	d863      	bhi.n	800b4c4 <_scanf_float+0x120>
 800b3fc:	2b40      	cmp	r3, #64	@ 0x40
 800b3fe:	d83b      	bhi.n	800b478 <_scanf_float+0xd4>
 800b400:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b404:	b2c8      	uxtb	r0, r1
 800b406:	280e      	cmp	r0, #14
 800b408:	d939      	bls.n	800b47e <_scanf_float+0xda>
 800b40a:	b11f      	cbz	r7, 800b414 <_scanf_float+0x70>
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b412:	6023      	str	r3, [r4, #0]
 800b414:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b418:	f1ba 0f01 	cmp.w	sl, #1
 800b41c:	f200 8114 	bhi.w	800b648 <_scanf_float+0x2a4>
 800b420:	9b01      	ldr	r3, [sp, #4]
 800b422:	429e      	cmp	r6, r3
 800b424:	f200 8105 	bhi.w	800b632 <_scanf_float+0x28e>
 800b428:	2001      	movs	r0, #1
 800b42a:	b007      	add	sp, #28
 800b42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b430:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b434:	2a0d      	cmp	r2, #13
 800b436:	d8e8      	bhi.n	800b40a <_scanf_float+0x66>
 800b438:	a101      	add	r1, pc, #4	@ (adr r1, 800b440 <_scanf_float+0x9c>)
 800b43a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b43e:	bf00      	nop
 800b440:	0800b589 	.word	0x0800b589
 800b444:	0800b40b 	.word	0x0800b40b
 800b448:	0800b40b 	.word	0x0800b40b
 800b44c:	0800b40b 	.word	0x0800b40b
 800b450:	0800b5e5 	.word	0x0800b5e5
 800b454:	0800b5bf 	.word	0x0800b5bf
 800b458:	0800b40b 	.word	0x0800b40b
 800b45c:	0800b40b 	.word	0x0800b40b
 800b460:	0800b597 	.word	0x0800b597
 800b464:	0800b40b 	.word	0x0800b40b
 800b468:	0800b40b 	.word	0x0800b40b
 800b46c:	0800b40b 	.word	0x0800b40b
 800b470:	0800b40b 	.word	0x0800b40b
 800b474:	0800b553 	.word	0x0800b553
 800b478:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b47c:	e7da      	b.n	800b434 <_scanf_float+0x90>
 800b47e:	290e      	cmp	r1, #14
 800b480:	d8c3      	bhi.n	800b40a <_scanf_float+0x66>
 800b482:	a001      	add	r0, pc, #4	@ (adr r0, 800b488 <_scanf_float+0xe4>)
 800b484:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b488:	0800b543 	.word	0x0800b543
 800b48c:	0800b40b 	.word	0x0800b40b
 800b490:	0800b543 	.word	0x0800b543
 800b494:	0800b5d3 	.word	0x0800b5d3
 800b498:	0800b40b 	.word	0x0800b40b
 800b49c:	0800b4e5 	.word	0x0800b4e5
 800b4a0:	0800b529 	.word	0x0800b529
 800b4a4:	0800b529 	.word	0x0800b529
 800b4a8:	0800b529 	.word	0x0800b529
 800b4ac:	0800b529 	.word	0x0800b529
 800b4b0:	0800b529 	.word	0x0800b529
 800b4b4:	0800b529 	.word	0x0800b529
 800b4b8:	0800b529 	.word	0x0800b529
 800b4bc:	0800b529 	.word	0x0800b529
 800b4c0:	0800b529 	.word	0x0800b529
 800b4c4:	2b6e      	cmp	r3, #110	@ 0x6e
 800b4c6:	d809      	bhi.n	800b4dc <_scanf_float+0x138>
 800b4c8:	2b60      	cmp	r3, #96	@ 0x60
 800b4ca:	d8b1      	bhi.n	800b430 <_scanf_float+0x8c>
 800b4cc:	2b54      	cmp	r3, #84	@ 0x54
 800b4ce:	d07b      	beq.n	800b5c8 <_scanf_float+0x224>
 800b4d0:	2b59      	cmp	r3, #89	@ 0x59
 800b4d2:	d19a      	bne.n	800b40a <_scanf_float+0x66>
 800b4d4:	2d07      	cmp	r5, #7
 800b4d6:	d198      	bne.n	800b40a <_scanf_float+0x66>
 800b4d8:	2508      	movs	r5, #8
 800b4da:	e02f      	b.n	800b53c <_scanf_float+0x198>
 800b4dc:	2b74      	cmp	r3, #116	@ 0x74
 800b4de:	d073      	beq.n	800b5c8 <_scanf_float+0x224>
 800b4e0:	2b79      	cmp	r3, #121	@ 0x79
 800b4e2:	e7f6      	b.n	800b4d2 <_scanf_float+0x12e>
 800b4e4:	6821      	ldr	r1, [r4, #0]
 800b4e6:	05c8      	lsls	r0, r1, #23
 800b4e8:	d51e      	bpl.n	800b528 <_scanf_float+0x184>
 800b4ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b4ee:	6021      	str	r1, [r4, #0]
 800b4f0:	3701      	adds	r7, #1
 800b4f2:	f1bb 0f00 	cmp.w	fp, #0
 800b4f6:	d003      	beq.n	800b500 <_scanf_float+0x15c>
 800b4f8:	3201      	adds	r2, #1
 800b4fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b4fe:	60a2      	str	r2, [r4, #8]
 800b500:	68a3      	ldr	r3, [r4, #8]
 800b502:	3b01      	subs	r3, #1
 800b504:	60a3      	str	r3, [r4, #8]
 800b506:	6923      	ldr	r3, [r4, #16]
 800b508:	3301      	adds	r3, #1
 800b50a:	6123      	str	r3, [r4, #16]
 800b50c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b510:	3b01      	subs	r3, #1
 800b512:	2b00      	cmp	r3, #0
 800b514:	f8c9 3004 	str.w	r3, [r9, #4]
 800b518:	f340 8082 	ble.w	800b620 <_scanf_float+0x27c>
 800b51c:	f8d9 3000 	ldr.w	r3, [r9]
 800b520:	3301      	adds	r3, #1
 800b522:	f8c9 3000 	str.w	r3, [r9]
 800b526:	e762      	b.n	800b3ee <_scanf_float+0x4a>
 800b528:	eb1a 0105 	adds.w	r1, sl, r5
 800b52c:	f47f af6d 	bne.w	800b40a <_scanf_float+0x66>
 800b530:	6822      	ldr	r2, [r4, #0]
 800b532:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b536:	6022      	str	r2, [r4, #0]
 800b538:	460d      	mov	r5, r1
 800b53a:	468a      	mov	sl, r1
 800b53c:	f806 3b01 	strb.w	r3, [r6], #1
 800b540:	e7de      	b.n	800b500 <_scanf_float+0x15c>
 800b542:	6822      	ldr	r2, [r4, #0]
 800b544:	0610      	lsls	r0, r2, #24
 800b546:	f57f af60 	bpl.w	800b40a <_scanf_float+0x66>
 800b54a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b54e:	6022      	str	r2, [r4, #0]
 800b550:	e7f4      	b.n	800b53c <_scanf_float+0x198>
 800b552:	f1ba 0f00 	cmp.w	sl, #0
 800b556:	d10c      	bne.n	800b572 <_scanf_float+0x1ce>
 800b558:	b977      	cbnz	r7, 800b578 <_scanf_float+0x1d4>
 800b55a:	6822      	ldr	r2, [r4, #0]
 800b55c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b560:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b564:	d108      	bne.n	800b578 <_scanf_float+0x1d4>
 800b566:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b56a:	6022      	str	r2, [r4, #0]
 800b56c:	f04f 0a01 	mov.w	sl, #1
 800b570:	e7e4      	b.n	800b53c <_scanf_float+0x198>
 800b572:	f1ba 0f02 	cmp.w	sl, #2
 800b576:	d050      	beq.n	800b61a <_scanf_float+0x276>
 800b578:	2d01      	cmp	r5, #1
 800b57a:	d002      	beq.n	800b582 <_scanf_float+0x1de>
 800b57c:	2d04      	cmp	r5, #4
 800b57e:	f47f af44 	bne.w	800b40a <_scanf_float+0x66>
 800b582:	3501      	adds	r5, #1
 800b584:	b2ed      	uxtb	r5, r5
 800b586:	e7d9      	b.n	800b53c <_scanf_float+0x198>
 800b588:	f1ba 0f01 	cmp.w	sl, #1
 800b58c:	f47f af3d 	bne.w	800b40a <_scanf_float+0x66>
 800b590:	f04f 0a02 	mov.w	sl, #2
 800b594:	e7d2      	b.n	800b53c <_scanf_float+0x198>
 800b596:	b975      	cbnz	r5, 800b5b6 <_scanf_float+0x212>
 800b598:	2f00      	cmp	r7, #0
 800b59a:	f47f af37 	bne.w	800b40c <_scanf_float+0x68>
 800b59e:	6822      	ldr	r2, [r4, #0]
 800b5a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b5a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b5a8:	f040 8103 	bne.w	800b7b2 <_scanf_float+0x40e>
 800b5ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b5b0:	6022      	str	r2, [r4, #0]
 800b5b2:	2501      	movs	r5, #1
 800b5b4:	e7c2      	b.n	800b53c <_scanf_float+0x198>
 800b5b6:	2d03      	cmp	r5, #3
 800b5b8:	d0e3      	beq.n	800b582 <_scanf_float+0x1de>
 800b5ba:	2d05      	cmp	r5, #5
 800b5bc:	e7df      	b.n	800b57e <_scanf_float+0x1da>
 800b5be:	2d02      	cmp	r5, #2
 800b5c0:	f47f af23 	bne.w	800b40a <_scanf_float+0x66>
 800b5c4:	2503      	movs	r5, #3
 800b5c6:	e7b9      	b.n	800b53c <_scanf_float+0x198>
 800b5c8:	2d06      	cmp	r5, #6
 800b5ca:	f47f af1e 	bne.w	800b40a <_scanf_float+0x66>
 800b5ce:	2507      	movs	r5, #7
 800b5d0:	e7b4      	b.n	800b53c <_scanf_float+0x198>
 800b5d2:	6822      	ldr	r2, [r4, #0]
 800b5d4:	0591      	lsls	r1, r2, #22
 800b5d6:	f57f af18 	bpl.w	800b40a <_scanf_float+0x66>
 800b5da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b5de:	6022      	str	r2, [r4, #0]
 800b5e0:	9702      	str	r7, [sp, #8]
 800b5e2:	e7ab      	b.n	800b53c <_scanf_float+0x198>
 800b5e4:	6822      	ldr	r2, [r4, #0]
 800b5e6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b5ea:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b5ee:	d005      	beq.n	800b5fc <_scanf_float+0x258>
 800b5f0:	0550      	lsls	r0, r2, #21
 800b5f2:	f57f af0a 	bpl.w	800b40a <_scanf_float+0x66>
 800b5f6:	2f00      	cmp	r7, #0
 800b5f8:	f000 80db 	beq.w	800b7b2 <_scanf_float+0x40e>
 800b5fc:	0591      	lsls	r1, r2, #22
 800b5fe:	bf58      	it	pl
 800b600:	9902      	ldrpl	r1, [sp, #8]
 800b602:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b606:	bf58      	it	pl
 800b608:	1a79      	subpl	r1, r7, r1
 800b60a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b60e:	bf58      	it	pl
 800b610:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b614:	6022      	str	r2, [r4, #0]
 800b616:	2700      	movs	r7, #0
 800b618:	e790      	b.n	800b53c <_scanf_float+0x198>
 800b61a:	f04f 0a03 	mov.w	sl, #3
 800b61e:	e78d      	b.n	800b53c <_scanf_float+0x198>
 800b620:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b624:	4649      	mov	r1, r9
 800b626:	4640      	mov	r0, r8
 800b628:	4798      	blx	r3
 800b62a:	2800      	cmp	r0, #0
 800b62c:	f43f aedf 	beq.w	800b3ee <_scanf_float+0x4a>
 800b630:	e6eb      	b.n	800b40a <_scanf_float+0x66>
 800b632:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b636:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b63a:	464a      	mov	r2, r9
 800b63c:	4640      	mov	r0, r8
 800b63e:	4798      	blx	r3
 800b640:	6923      	ldr	r3, [r4, #16]
 800b642:	3b01      	subs	r3, #1
 800b644:	6123      	str	r3, [r4, #16]
 800b646:	e6eb      	b.n	800b420 <_scanf_float+0x7c>
 800b648:	1e6b      	subs	r3, r5, #1
 800b64a:	2b06      	cmp	r3, #6
 800b64c:	d824      	bhi.n	800b698 <_scanf_float+0x2f4>
 800b64e:	2d02      	cmp	r5, #2
 800b650:	d836      	bhi.n	800b6c0 <_scanf_float+0x31c>
 800b652:	9b01      	ldr	r3, [sp, #4]
 800b654:	429e      	cmp	r6, r3
 800b656:	f67f aee7 	bls.w	800b428 <_scanf_float+0x84>
 800b65a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b65e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b662:	464a      	mov	r2, r9
 800b664:	4640      	mov	r0, r8
 800b666:	4798      	blx	r3
 800b668:	6923      	ldr	r3, [r4, #16]
 800b66a:	3b01      	subs	r3, #1
 800b66c:	6123      	str	r3, [r4, #16]
 800b66e:	e7f0      	b.n	800b652 <_scanf_float+0x2ae>
 800b670:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b674:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b678:	464a      	mov	r2, r9
 800b67a:	4640      	mov	r0, r8
 800b67c:	4798      	blx	r3
 800b67e:	6923      	ldr	r3, [r4, #16]
 800b680:	3b01      	subs	r3, #1
 800b682:	6123      	str	r3, [r4, #16]
 800b684:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b688:	fa5f fa8a 	uxtb.w	sl, sl
 800b68c:	f1ba 0f02 	cmp.w	sl, #2
 800b690:	d1ee      	bne.n	800b670 <_scanf_float+0x2cc>
 800b692:	3d03      	subs	r5, #3
 800b694:	b2ed      	uxtb	r5, r5
 800b696:	1b76      	subs	r6, r6, r5
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	05da      	lsls	r2, r3, #23
 800b69c:	d530      	bpl.n	800b700 <_scanf_float+0x35c>
 800b69e:	055b      	lsls	r3, r3, #21
 800b6a0:	d511      	bpl.n	800b6c6 <_scanf_float+0x322>
 800b6a2:	9b01      	ldr	r3, [sp, #4]
 800b6a4:	429e      	cmp	r6, r3
 800b6a6:	f67f aebf 	bls.w	800b428 <_scanf_float+0x84>
 800b6aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6b2:	464a      	mov	r2, r9
 800b6b4:	4640      	mov	r0, r8
 800b6b6:	4798      	blx	r3
 800b6b8:	6923      	ldr	r3, [r4, #16]
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	6123      	str	r3, [r4, #16]
 800b6be:	e7f0      	b.n	800b6a2 <_scanf_float+0x2fe>
 800b6c0:	46aa      	mov	sl, r5
 800b6c2:	46b3      	mov	fp, r6
 800b6c4:	e7de      	b.n	800b684 <_scanf_float+0x2e0>
 800b6c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b6ca:	6923      	ldr	r3, [r4, #16]
 800b6cc:	2965      	cmp	r1, #101	@ 0x65
 800b6ce:	f103 33ff 	add.w	r3, r3, #4294967295
 800b6d2:	f106 35ff 	add.w	r5, r6, #4294967295
 800b6d6:	6123      	str	r3, [r4, #16]
 800b6d8:	d00c      	beq.n	800b6f4 <_scanf_float+0x350>
 800b6da:	2945      	cmp	r1, #69	@ 0x45
 800b6dc:	d00a      	beq.n	800b6f4 <_scanf_float+0x350>
 800b6de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6e2:	464a      	mov	r2, r9
 800b6e4:	4640      	mov	r0, r8
 800b6e6:	4798      	blx	r3
 800b6e8:	6923      	ldr	r3, [r4, #16]
 800b6ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	1eb5      	subs	r5, r6, #2
 800b6f2:	6123      	str	r3, [r4, #16]
 800b6f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6f8:	464a      	mov	r2, r9
 800b6fa:	4640      	mov	r0, r8
 800b6fc:	4798      	blx	r3
 800b6fe:	462e      	mov	r6, r5
 800b700:	6822      	ldr	r2, [r4, #0]
 800b702:	f012 0210 	ands.w	r2, r2, #16
 800b706:	d001      	beq.n	800b70c <_scanf_float+0x368>
 800b708:	2000      	movs	r0, #0
 800b70a:	e68e      	b.n	800b42a <_scanf_float+0x86>
 800b70c:	7032      	strb	r2, [r6, #0]
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b718:	d125      	bne.n	800b766 <_scanf_float+0x3c2>
 800b71a:	9b02      	ldr	r3, [sp, #8]
 800b71c:	429f      	cmp	r7, r3
 800b71e:	d00a      	beq.n	800b736 <_scanf_float+0x392>
 800b720:	1bda      	subs	r2, r3, r7
 800b722:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b726:	429e      	cmp	r6, r3
 800b728:	bf28      	it	cs
 800b72a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b72e:	4922      	ldr	r1, [pc, #136]	@ (800b7b8 <_scanf_float+0x414>)
 800b730:	4630      	mov	r0, r6
 800b732:	f000 f919 	bl	800b968 <siprintf>
 800b736:	9901      	ldr	r1, [sp, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	4640      	mov	r0, r8
 800b73c:	f002 fc04 	bl	800df48 <_strtod_r>
 800b740:	9b03      	ldr	r3, [sp, #12]
 800b742:	6821      	ldr	r1, [r4, #0]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f011 0f02 	tst.w	r1, #2
 800b74a:	ec57 6b10 	vmov	r6, r7, d0
 800b74e:	f103 0204 	add.w	r2, r3, #4
 800b752:	d015      	beq.n	800b780 <_scanf_float+0x3dc>
 800b754:	9903      	ldr	r1, [sp, #12]
 800b756:	600a      	str	r2, [r1, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	e9c3 6700 	strd	r6, r7, [r3]
 800b75e:	68e3      	ldr	r3, [r4, #12]
 800b760:	3301      	adds	r3, #1
 800b762:	60e3      	str	r3, [r4, #12]
 800b764:	e7d0      	b.n	800b708 <_scanf_float+0x364>
 800b766:	9b04      	ldr	r3, [sp, #16]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d0e4      	beq.n	800b736 <_scanf_float+0x392>
 800b76c:	9905      	ldr	r1, [sp, #20]
 800b76e:	230a      	movs	r3, #10
 800b770:	3101      	adds	r1, #1
 800b772:	4640      	mov	r0, r8
 800b774:	f002 fc68 	bl	800e048 <_strtol_r>
 800b778:	9b04      	ldr	r3, [sp, #16]
 800b77a:	9e05      	ldr	r6, [sp, #20]
 800b77c:	1ac2      	subs	r2, r0, r3
 800b77e:	e7d0      	b.n	800b722 <_scanf_float+0x37e>
 800b780:	f011 0f04 	tst.w	r1, #4
 800b784:	9903      	ldr	r1, [sp, #12]
 800b786:	600a      	str	r2, [r1, #0]
 800b788:	d1e6      	bne.n	800b758 <_scanf_float+0x3b4>
 800b78a:	681d      	ldr	r5, [r3, #0]
 800b78c:	4632      	mov	r2, r6
 800b78e:	463b      	mov	r3, r7
 800b790:	4630      	mov	r0, r6
 800b792:	4639      	mov	r1, r7
 800b794:	f7f5 f9d2 	bl	8000b3c <__aeabi_dcmpun>
 800b798:	b128      	cbz	r0, 800b7a6 <_scanf_float+0x402>
 800b79a:	4808      	ldr	r0, [pc, #32]	@ (800b7bc <_scanf_float+0x418>)
 800b79c:	f000 f9ca 	bl	800bb34 <nanf>
 800b7a0:	ed85 0a00 	vstr	s0, [r5]
 800b7a4:	e7db      	b.n	800b75e <_scanf_float+0x3ba>
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	4639      	mov	r1, r7
 800b7aa:	f7f5 fa25 	bl	8000bf8 <__aeabi_d2f>
 800b7ae:	6028      	str	r0, [r5, #0]
 800b7b0:	e7d5      	b.n	800b75e <_scanf_float+0x3ba>
 800b7b2:	2700      	movs	r7, #0
 800b7b4:	e62e      	b.n	800b414 <_scanf_float+0x70>
 800b7b6:	bf00      	nop
 800b7b8:	08011d98 	.word	0x08011d98
 800b7bc:	08011ed9 	.word	0x08011ed9

0800b7c0 <std>:
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	b510      	push	{r4, lr}
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	e9c0 3300 	strd	r3, r3, [r0]
 800b7ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7ce:	6083      	str	r3, [r0, #8]
 800b7d0:	8181      	strh	r1, [r0, #12]
 800b7d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b7d4:	81c2      	strh	r2, [r0, #14]
 800b7d6:	6183      	str	r3, [r0, #24]
 800b7d8:	4619      	mov	r1, r3
 800b7da:	2208      	movs	r2, #8
 800b7dc:	305c      	adds	r0, #92	@ 0x5c
 800b7de:	f000 f928 	bl	800ba32 <memset>
 800b7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b818 <std+0x58>)
 800b7e4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b81c <std+0x5c>)
 800b7e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b820 <std+0x60>)
 800b7ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b7ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b824 <std+0x64>)
 800b7f0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b828 <std+0x68>)
 800b7f4:	6224      	str	r4, [r4, #32]
 800b7f6:	429c      	cmp	r4, r3
 800b7f8:	d006      	beq.n	800b808 <std+0x48>
 800b7fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b7fe:	4294      	cmp	r4, r2
 800b800:	d002      	beq.n	800b808 <std+0x48>
 800b802:	33d0      	adds	r3, #208	@ 0xd0
 800b804:	429c      	cmp	r4, r3
 800b806:	d105      	bne.n	800b814 <std+0x54>
 800b808:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b810:	f000 b98c 	b.w	800bb2c <__retarget_lock_init_recursive>
 800b814:	bd10      	pop	{r4, pc}
 800b816:	bf00      	nop
 800b818:	0800b9ad 	.word	0x0800b9ad
 800b81c:	0800b9cf 	.word	0x0800b9cf
 800b820:	0800ba07 	.word	0x0800ba07
 800b824:	0800ba2b 	.word	0x0800ba2b
 800b828:	200007b4 	.word	0x200007b4

0800b82c <stdio_exit_handler>:
 800b82c:	4a02      	ldr	r2, [pc, #8]	@ (800b838 <stdio_exit_handler+0xc>)
 800b82e:	4903      	ldr	r1, [pc, #12]	@ (800b83c <stdio_exit_handler+0x10>)
 800b830:	4803      	ldr	r0, [pc, #12]	@ (800b840 <stdio_exit_handler+0x14>)
 800b832:	f000 b869 	b.w	800b908 <_fwalk_sglue>
 800b836:	bf00      	nop
 800b838:	2000002c 	.word	0x2000002c
 800b83c:	0800e689 	.word	0x0800e689
 800b840:	2000003c 	.word	0x2000003c

0800b844 <cleanup_stdio>:
 800b844:	6841      	ldr	r1, [r0, #4]
 800b846:	4b0c      	ldr	r3, [pc, #48]	@ (800b878 <cleanup_stdio+0x34>)
 800b848:	4299      	cmp	r1, r3
 800b84a:	b510      	push	{r4, lr}
 800b84c:	4604      	mov	r4, r0
 800b84e:	d001      	beq.n	800b854 <cleanup_stdio+0x10>
 800b850:	f002 ff1a 	bl	800e688 <_fflush_r>
 800b854:	68a1      	ldr	r1, [r4, #8]
 800b856:	4b09      	ldr	r3, [pc, #36]	@ (800b87c <cleanup_stdio+0x38>)
 800b858:	4299      	cmp	r1, r3
 800b85a:	d002      	beq.n	800b862 <cleanup_stdio+0x1e>
 800b85c:	4620      	mov	r0, r4
 800b85e:	f002 ff13 	bl	800e688 <_fflush_r>
 800b862:	68e1      	ldr	r1, [r4, #12]
 800b864:	4b06      	ldr	r3, [pc, #24]	@ (800b880 <cleanup_stdio+0x3c>)
 800b866:	4299      	cmp	r1, r3
 800b868:	d004      	beq.n	800b874 <cleanup_stdio+0x30>
 800b86a:	4620      	mov	r0, r4
 800b86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b870:	f002 bf0a 	b.w	800e688 <_fflush_r>
 800b874:	bd10      	pop	{r4, pc}
 800b876:	bf00      	nop
 800b878:	200007b4 	.word	0x200007b4
 800b87c:	2000081c 	.word	0x2000081c
 800b880:	20000884 	.word	0x20000884

0800b884 <global_stdio_init.part.0>:
 800b884:	b510      	push	{r4, lr}
 800b886:	4b0b      	ldr	r3, [pc, #44]	@ (800b8b4 <global_stdio_init.part.0+0x30>)
 800b888:	4c0b      	ldr	r4, [pc, #44]	@ (800b8b8 <global_stdio_init.part.0+0x34>)
 800b88a:	4a0c      	ldr	r2, [pc, #48]	@ (800b8bc <global_stdio_init.part.0+0x38>)
 800b88c:	601a      	str	r2, [r3, #0]
 800b88e:	4620      	mov	r0, r4
 800b890:	2200      	movs	r2, #0
 800b892:	2104      	movs	r1, #4
 800b894:	f7ff ff94 	bl	800b7c0 <std>
 800b898:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b89c:	2201      	movs	r2, #1
 800b89e:	2109      	movs	r1, #9
 800b8a0:	f7ff ff8e 	bl	800b7c0 <std>
 800b8a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b8a8:	2202      	movs	r2, #2
 800b8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8ae:	2112      	movs	r1, #18
 800b8b0:	f7ff bf86 	b.w	800b7c0 <std>
 800b8b4:	200008ec 	.word	0x200008ec
 800b8b8:	200007b4 	.word	0x200007b4
 800b8bc:	0800b82d 	.word	0x0800b82d

0800b8c0 <__sfp_lock_acquire>:
 800b8c0:	4801      	ldr	r0, [pc, #4]	@ (800b8c8 <__sfp_lock_acquire+0x8>)
 800b8c2:	f000 b934 	b.w	800bb2e <__retarget_lock_acquire_recursive>
 800b8c6:	bf00      	nop
 800b8c8:	200008f5 	.word	0x200008f5

0800b8cc <__sfp_lock_release>:
 800b8cc:	4801      	ldr	r0, [pc, #4]	@ (800b8d4 <__sfp_lock_release+0x8>)
 800b8ce:	f000 b92f 	b.w	800bb30 <__retarget_lock_release_recursive>
 800b8d2:	bf00      	nop
 800b8d4:	200008f5 	.word	0x200008f5

0800b8d8 <__sinit>:
 800b8d8:	b510      	push	{r4, lr}
 800b8da:	4604      	mov	r4, r0
 800b8dc:	f7ff fff0 	bl	800b8c0 <__sfp_lock_acquire>
 800b8e0:	6a23      	ldr	r3, [r4, #32]
 800b8e2:	b11b      	cbz	r3, 800b8ec <__sinit+0x14>
 800b8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8e8:	f7ff bff0 	b.w	800b8cc <__sfp_lock_release>
 800b8ec:	4b04      	ldr	r3, [pc, #16]	@ (800b900 <__sinit+0x28>)
 800b8ee:	6223      	str	r3, [r4, #32]
 800b8f0:	4b04      	ldr	r3, [pc, #16]	@ (800b904 <__sinit+0x2c>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1f5      	bne.n	800b8e4 <__sinit+0xc>
 800b8f8:	f7ff ffc4 	bl	800b884 <global_stdio_init.part.0>
 800b8fc:	e7f2      	b.n	800b8e4 <__sinit+0xc>
 800b8fe:	bf00      	nop
 800b900:	0800b845 	.word	0x0800b845
 800b904:	200008ec 	.word	0x200008ec

0800b908 <_fwalk_sglue>:
 800b908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b90c:	4607      	mov	r7, r0
 800b90e:	4688      	mov	r8, r1
 800b910:	4614      	mov	r4, r2
 800b912:	2600      	movs	r6, #0
 800b914:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b918:	f1b9 0901 	subs.w	r9, r9, #1
 800b91c:	d505      	bpl.n	800b92a <_fwalk_sglue+0x22>
 800b91e:	6824      	ldr	r4, [r4, #0]
 800b920:	2c00      	cmp	r4, #0
 800b922:	d1f7      	bne.n	800b914 <_fwalk_sglue+0xc>
 800b924:	4630      	mov	r0, r6
 800b926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b92a:	89ab      	ldrh	r3, [r5, #12]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d907      	bls.n	800b940 <_fwalk_sglue+0x38>
 800b930:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b934:	3301      	adds	r3, #1
 800b936:	d003      	beq.n	800b940 <_fwalk_sglue+0x38>
 800b938:	4629      	mov	r1, r5
 800b93a:	4638      	mov	r0, r7
 800b93c:	47c0      	blx	r8
 800b93e:	4306      	orrs	r6, r0
 800b940:	3568      	adds	r5, #104	@ 0x68
 800b942:	e7e9      	b.n	800b918 <_fwalk_sglue+0x10>

0800b944 <iprintf>:
 800b944:	b40f      	push	{r0, r1, r2, r3}
 800b946:	b507      	push	{r0, r1, r2, lr}
 800b948:	4906      	ldr	r1, [pc, #24]	@ (800b964 <iprintf+0x20>)
 800b94a:	ab04      	add	r3, sp, #16
 800b94c:	6808      	ldr	r0, [r1, #0]
 800b94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b952:	6881      	ldr	r1, [r0, #8]
 800b954:	9301      	str	r3, [sp, #4]
 800b956:	f002 fcfb 	bl	800e350 <_vfiprintf_r>
 800b95a:	b003      	add	sp, #12
 800b95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b960:	b004      	add	sp, #16
 800b962:	4770      	bx	lr
 800b964:	20000038 	.word	0x20000038

0800b968 <siprintf>:
 800b968:	b40e      	push	{r1, r2, r3}
 800b96a:	b510      	push	{r4, lr}
 800b96c:	b09d      	sub	sp, #116	@ 0x74
 800b96e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b970:	9002      	str	r0, [sp, #8]
 800b972:	9006      	str	r0, [sp, #24]
 800b974:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b978:	480a      	ldr	r0, [pc, #40]	@ (800b9a4 <siprintf+0x3c>)
 800b97a:	9107      	str	r1, [sp, #28]
 800b97c:	9104      	str	r1, [sp, #16]
 800b97e:	490a      	ldr	r1, [pc, #40]	@ (800b9a8 <siprintf+0x40>)
 800b980:	f853 2b04 	ldr.w	r2, [r3], #4
 800b984:	9105      	str	r1, [sp, #20]
 800b986:	2400      	movs	r4, #0
 800b988:	a902      	add	r1, sp, #8
 800b98a:	6800      	ldr	r0, [r0, #0]
 800b98c:	9301      	str	r3, [sp, #4]
 800b98e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b990:	f002 fbb8 	bl	800e104 <_svfiprintf_r>
 800b994:	9b02      	ldr	r3, [sp, #8]
 800b996:	701c      	strb	r4, [r3, #0]
 800b998:	b01d      	add	sp, #116	@ 0x74
 800b99a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b99e:	b003      	add	sp, #12
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	20000038 	.word	0x20000038
 800b9a8:	ffff0208 	.word	0xffff0208

0800b9ac <__sread>:
 800b9ac:	b510      	push	{r4, lr}
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b4:	f000 f86c 	bl	800ba90 <_read_r>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	bfab      	itete	ge
 800b9bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b9be:	89a3      	ldrhlt	r3, [r4, #12]
 800b9c0:	181b      	addge	r3, r3, r0
 800b9c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b9c6:	bfac      	ite	ge
 800b9c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b9ca:	81a3      	strhlt	r3, [r4, #12]
 800b9cc:	bd10      	pop	{r4, pc}

0800b9ce <__swrite>:
 800b9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d2:	461f      	mov	r7, r3
 800b9d4:	898b      	ldrh	r3, [r1, #12]
 800b9d6:	05db      	lsls	r3, r3, #23
 800b9d8:	4605      	mov	r5, r0
 800b9da:	460c      	mov	r4, r1
 800b9dc:	4616      	mov	r6, r2
 800b9de:	d505      	bpl.n	800b9ec <__swrite+0x1e>
 800b9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e4:	2302      	movs	r3, #2
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f000 f840 	bl	800ba6c <_lseek_r>
 800b9ec:	89a3      	ldrh	r3, [r4, #12]
 800b9ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b9f6:	81a3      	strh	r3, [r4, #12]
 800b9f8:	4632      	mov	r2, r6
 800b9fa:	463b      	mov	r3, r7
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba02:	f000 b857 	b.w	800bab4 <_write_r>

0800ba06 <__sseek>:
 800ba06:	b510      	push	{r4, lr}
 800ba08:	460c      	mov	r4, r1
 800ba0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba0e:	f000 f82d 	bl	800ba6c <_lseek_r>
 800ba12:	1c43      	adds	r3, r0, #1
 800ba14:	89a3      	ldrh	r3, [r4, #12]
 800ba16:	bf15      	itete	ne
 800ba18:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba22:	81a3      	strheq	r3, [r4, #12]
 800ba24:	bf18      	it	ne
 800ba26:	81a3      	strhne	r3, [r4, #12]
 800ba28:	bd10      	pop	{r4, pc}

0800ba2a <__sclose>:
 800ba2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba2e:	f000 b80d 	b.w	800ba4c <_close_r>

0800ba32 <memset>:
 800ba32:	4402      	add	r2, r0
 800ba34:	4603      	mov	r3, r0
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d100      	bne.n	800ba3c <memset+0xa>
 800ba3a:	4770      	bx	lr
 800ba3c:	f803 1b01 	strb.w	r1, [r3], #1
 800ba40:	e7f9      	b.n	800ba36 <memset+0x4>
	...

0800ba44 <_localeconv_r>:
 800ba44:	4800      	ldr	r0, [pc, #0]	@ (800ba48 <_localeconv_r+0x4>)
 800ba46:	4770      	bx	lr
 800ba48:	20000178 	.word	0x20000178

0800ba4c <_close_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4d06      	ldr	r5, [pc, #24]	@ (800ba68 <_close_r+0x1c>)
 800ba50:	2300      	movs	r3, #0
 800ba52:	4604      	mov	r4, r0
 800ba54:	4608      	mov	r0, r1
 800ba56:	602b      	str	r3, [r5, #0]
 800ba58:	f7fb f9e2 	bl	8006e20 <_close>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	d102      	bne.n	800ba66 <_close_r+0x1a>
 800ba60:	682b      	ldr	r3, [r5, #0]
 800ba62:	b103      	cbz	r3, 800ba66 <_close_r+0x1a>
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	200008f0 	.word	0x200008f0

0800ba6c <_lseek_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4d07      	ldr	r5, [pc, #28]	@ (800ba8c <_lseek_r+0x20>)
 800ba70:	4604      	mov	r4, r0
 800ba72:	4608      	mov	r0, r1
 800ba74:	4611      	mov	r1, r2
 800ba76:	2200      	movs	r2, #0
 800ba78:	602a      	str	r2, [r5, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	f7fb f9f7 	bl	8006e6e <_lseek>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d102      	bne.n	800ba8a <_lseek_r+0x1e>
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	b103      	cbz	r3, 800ba8a <_lseek_r+0x1e>
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	200008f0 	.word	0x200008f0

0800ba90 <_read_r>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	4d07      	ldr	r5, [pc, #28]	@ (800bab0 <_read_r+0x20>)
 800ba94:	4604      	mov	r4, r0
 800ba96:	4608      	mov	r0, r1
 800ba98:	4611      	mov	r1, r2
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	602a      	str	r2, [r5, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	f7fb f9a1 	bl	8006de6 <_read>
 800baa4:	1c43      	adds	r3, r0, #1
 800baa6:	d102      	bne.n	800baae <_read_r+0x1e>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	b103      	cbz	r3, 800baae <_read_r+0x1e>
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	bd38      	pop	{r3, r4, r5, pc}
 800bab0:	200008f0 	.word	0x200008f0

0800bab4 <_write_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4d07      	ldr	r5, [pc, #28]	@ (800bad4 <_write_r+0x20>)
 800bab8:	4604      	mov	r4, r0
 800baba:	4608      	mov	r0, r1
 800babc:	4611      	mov	r1, r2
 800babe:	2200      	movs	r2, #0
 800bac0:	602a      	str	r2, [r5, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	f7f7 fff2 	bl	8003aac <_write>
 800bac8:	1c43      	adds	r3, r0, #1
 800baca:	d102      	bne.n	800bad2 <_write_r+0x1e>
 800bacc:	682b      	ldr	r3, [r5, #0]
 800bace:	b103      	cbz	r3, 800bad2 <_write_r+0x1e>
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	bd38      	pop	{r3, r4, r5, pc}
 800bad4:	200008f0 	.word	0x200008f0

0800bad8 <__errno>:
 800bad8:	4b01      	ldr	r3, [pc, #4]	@ (800bae0 <__errno+0x8>)
 800bada:	6818      	ldr	r0, [r3, #0]
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	20000038 	.word	0x20000038

0800bae4 <__libc_init_array>:
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	4d0d      	ldr	r5, [pc, #52]	@ (800bb1c <__libc_init_array+0x38>)
 800bae8:	4c0d      	ldr	r4, [pc, #52]	@ (800bb20 <__libc_init_array+0x3c>)
 800baea:	1b64      	subs	r4, r4, r5
 800baec:	10a4      	asrs	r4, r4, #2
 800baee:	2600      	movs	r6, #0
 800baf0:	42a6      	cmp	r6, r4
 800baf2:	d109      	bne.n	800bb08 <__libc_init_array+0x24>
 800baf4:	4d0b      	ldr	r5, [pc, #44]	@ (800bb24 <__libc_init_array+0x40>)
 800baf6:	4c0c      	ldr	r4, [pc, #48]	@ (800bb28 <__libc_init_array+0x44>)
 800baf8:	f006 f8c4 	bl	8011c84 <_init>
 800bafc:	1b64      	subs	r4, r4, r5
 800bafe:	10a4      	asrs	r4, r4, #2
 800bb00:	2600      	movs	r6, #0
 800bb02:	42a6      	cmp	r6, r4
 800bb04:	d105      	bne.n	800bb12 <__libc_init_array+0x2e>
 800bb06:	bd70      	pop	{r4, r5, r6, pc}
 800bb08:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb0c:	4798      	blx	r3
 800bb0e:	3601      	adds	r6, #1
 800bb10:	e7ee      	b.n	800baf0 <__libc_init_array+0xc>
 800bb12:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb16:	4798      	blx	r3
 800bb18:	3601      	adds	r6, #1
 800bb1a:	e7f2      	b.n	800bb02 <__libc_init_array+0x1e>
 800bb1c:	08012650 	.word	0x08012650
 800bb20:	08012650 	.word	0x08012650
 800bb24:	08012650 	.word	0x08012650
 800bb28:	08012654 	.word	0x08012654

0800bb2c <__retarget_lock_init_recursive>:
 800bb2c:	4770      	bx	lr

0800bb2e <__retarget_lock_acquire_recursive>:
 800bb2e:	4770      	bx	lr

0800bb30 <__retarget_lock_release_recursive>:
 800bb30:	4770      	bx	lr
	...

0800bb34 <nanf>:
 800bb34:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bb3c <nanf+0x8>
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	7fc00000 	.word	0x7fc00000

0800bb40 <quorem>:
 800bb40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb44:	6903      	ldr	r3, [r0, #16]
 800bb46:	690c      	ldr	r4, [r1, #16]
 800bb48:	42a3      	cmp	r3, r4
 800bb4a:	4607      	mov	r7, r0
 800bb4c:	db7e      	blt.n	800bc4c <quorem+0x10c>
 800bb4e:	3c01      	subs	r4, #1
 800bb50:	f101 0814 	add.w	r8, r1, #20
 800bb54:	00a3      	lsls	r3, r4, #2
 800bb56:	f100 0514 	add.w	r5, r0, #20
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb60:	9301      	str	r3, [sp, #4]
 800bb62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb72:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb76:	d32e      	bcc.n	800bbd6 <quorem+0x96>
 800bb78:	f04f 0a00 	mov.w	sl, #0
 800bb7c:	46c4      	mov	ip, r8
 800bb7e:	46ae      	mov	lr, r5
 800bb80:	46d3      	mov	fp, sl
 800bb82:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb86:	b298      	uxth	r0, r3
 800bb88:	fb06 a000 	mla	r0, r6, r0, sl
 800bb8c:	0c02      	lsrs	r2, r0, #16
 800bb8e:	0c1b      	lsrs	r3, r3, #16
 800bb90:	fb06 2303 	mla	r3, r6, r3, r2
 800bb94:	f8de 2000 	ldr.w	r2, [lr]
 800bb98:	b280      	uxth	r0, r0
 800bb9a:	b292      	uxth	r2, r2
 800bb9c:	1a12      	subs	r2, r2, r0
 800bb9e:	445a      	add	r2, fp
 800bba0:	f8de 0000 	ldr.w	r0, [lr]
 800bba4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bbae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bbb2:	b292      	uxth	r2, r2
 800bbb4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bbb8:	45e1      	cmp	r9, ip
 800bbba:	f84e 2b04 	str.w	r2, [lr], #4
 800bbbe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bbc2:	d2de      	bcs.n	800bb82 <quorem+0x42>
 800bbc4:	9b00      	ldr	r3, [sp, #0]
 800bbc6:	58eb      	ldr	r3, [r5, r3]
 800bbc8:	b92b      	cbnz	r3, 800bbd6 <quorem+0x96>
 800bbca:	9b01      	ldr	r3, [sp, #4]
 800bbcc:	3b04      	subs	r3, #4
 800bbce:	429d      	cmp	r5, r3
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	d32f      	bcc.n	800bc34 <quorem+0xf4>
 800bbd4:	613c      	str	r4, [r7, #16]
 800bbd6:	4638      	mov	r0, r7
 800bbd8:	f001 f9c6 	bl	800cf68 <__mcmp>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	db25      	blt.n	800bc2c <quorem+0xec>
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	f858 2b04 	ldr.w	r2, [r8], #4
 800bbe8:	f8d1 c000 	ldr.w	ip, [r1]
 800bbec:	fa1f fe82 	uxth.w	lr, r2
 800bbf0:	fa1f f38c 	uxth.w	r3, ip
 800bbf4:	eba3 030e 	sub.w	r3, r3, lr
 800bbf8:	4403      	add	r3, r0
 800bbfa:	0c12      	lsrs	r2, r2, #16
 800bbfc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bc00:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc0a:	45c1      	cmp	r9, r8
 800bc0c:	f841 3b04 	str.w	r3, [r1], #4
 800bc10:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc14:	d2e6      	bcs.n	800bbe4 <quorem+0xa4>
 800bc16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc1e:	b922      	cbnz	r2, 800bc2a <quorem+0xea>
 800bc20:	3b04      	subs	r3, #4
 800bc22:	429d      	cmp	r5, r3
 800bc24:	461a      	mov	r2, r3
 800bc26:	d30b      	bcc.n	800bc40 <quorem+0x100>
 800bc28:	613c      	str	r4, [r7, #16]
 800bc2a:	3601      	adds	r6, #1
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	b003      	add	sp, #12
 800bc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc34:	6812      	ldr	r2, [r2, #0]
 800bc36:	3b04      	subs	r3, #4
 800bc38:	2a00      	cmp	r2, #0
 800bc3a:	d1cb      	bne.n	800bbd4 <quorem+0x94>
 800bc3c:	3c01      	subs	r4, #1
 800bc3e:	e7c6      	b.n	800bbce <quorem+0x8e>
 800bc40:	6812      	ldr	r2, [r2, #0]
 800bc42:	3b04      	subs	r3, #4
 800bc44:	2a00      	cmp	r2, #0
 800bc46:	d1ef      	bne.n	800bc28 <quorem+0xe8>
 800bc48:	3c01      	subs	r4, #1
 800bc4a:	e7ea      	b.n	800bc22 <quorem+0xe2>
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	e7ee      	b.n	800bc2e <quorem+0xee>

0800bc50 <_dtoa_r>:
 800bc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc54:	69c7      	ldr	r7, [r0, #28]
 800bc56:	b097      	sub	sp, #92	@ 0x5c
 800bc58:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bc5c:	ec55 4b10 	vmov	r4, r5, d0
 800bc60:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bc62:	9107      	str	r1, [sp, #28]
 800bc64:	4681      	mov	r9, r0
 800bc66:	920c      	str	r2, [sp, #48]	@ 0x30
 800bc68:	9311      	str	r3, [sp, #68]	@ 0x44
 800bc6a:	b97f      	cbnz	r7, 800bc8c <_dtoa_r+0x3c>
 800bc6c:	2010      	movs	r0, #16
 800bc6e:	f000 fe09 	bl	800c884 <malloc>
 800bc72:	4602      	mov	r2, r0
 800bc74:	f8c9 001c 	str.w	r0, [r9, #28]
 800bc78:	b920      	cbnz	r0, 800bc84 <_dtoa_r+0x34>
 800bc7a:	4ba9      	ldr	r3, [pc, #676]	@ (800bf20 <_dtoa_r+0x2d0>)
 800bc7c:	21ef      	movs	r1, #239	@ 0xef
 800bc7e:	48a9      	ldr	r0, [pc, #676]	@ (800bf24 <_dtoa_r+0x2d4>)
 800bc80:	f002 fe12 	bl	800e8a8 <__assert_func>
 800bc84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bc88:	6007      	str	r7, [r0, #0]
 800bc8a:	60c7      	str	r7, [r0, #12]
 800bc8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bc90:	6819      	ldr	r1, [r3, #0]
 800bc92:	b159      	cbz	r1, 800bcac <_dtoa_r+0x5c>
 800bc94:	685a      	ldr	r2, [r3, #4]
 800bc96:	604a      	str	r2, [r1, #4]
 800bc98:	2301      	movs	r3, #1
 800bc9a:	4093      	lsls	r3, r2
 800bc9c:	608b      	str	r3, [r1, #8]
 800bc9e:	4648      	mov	r0, r9
 800bca0:	f000 fee6 	bl	800ca70 <_Bfree>
 800bca4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	601a      	str	r2, [r3, #0]
 800bcac:	1e2b      	subs	r3, r5, #0
 800bcae:	bfb9      	ittee	lt
 800bcb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bcb4:	9305      	strlt	r3, [sp, #20]
 800bcb6:	2300      	movge	r3, #0
 800bcb8:	6033      	strge	r3, [r6, #0]
 800bcba:	9f05      	ldr	r7, [sp, #20]
 800bcbc:	4b9a      	ldr	r3, [pc, #616]	@ (800bf28 <_dtoa_r+0x2d8>)
 800bcbe:	bfbc      	itt	lt
 800bcc0:	2201      	movlt	r2, #1
 800bcc2:	6032      	strlt	r2, [r6, #0]
 800bcc4:	43bb      	bics	r3, r7
 800bcc6:	d112      	bne.n	800bcee <_dtoa_r+0x9e>
 800bcc8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bcca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bcce:	6013      	str	r3, [r2, #0]
 800bcd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bcd4:	4323      	orrs	r3, r4
 800bcd6:	f000 855a 	beq.w	800c78e <_dtoa_r+0xb3e>
 800bcda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bcdc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bf3c <_dtoa_r+0x2ec>
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 855c 	beq.w	800c79e <_dtoa_r+0xb4e>
 800bce6:	f10a 0303 	add.w	r3, sl, #3
 800bcea:	f000 bd56 	b.w	800c79a <_dtoa_r+0xb4a>
 800bcee:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	ec51 0b17 	vmov	r0, r1, d7
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bcfe:	f7f4 feeb 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd02:	4680      	mov	r8, r0
 800bd04:	b158      	cbz	r0, 800bd1e <_dtoa_r+0xce>
 800bd06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bd08:	2301      	movs	r3, #1
 800bd0a:	6013      	str	r3, [r2, #0]
 800bd0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd0e:	b113      	cbz	r3, 800bd16 <_dtoa_r+0xc6>
 800bd10:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bd12:	4b86      	ldr	r3, [pc, #536]	@ (800bf2c <_dtoa_r+0x2dc>)
 800bd14:	6013      	str	r3, [r2, #0]
 800bd16:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bf40 <_dtoa_r+0x2f0>
 800bd1a:	f000 bd40 	b.w	800c79e <_dtoa_r+0xb4e>
 800bd1e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bd22:	aa14      	add	r2, sp, #80	@ 0x50
 800bd24:	a915      	add	r1, sp, #84	@ 0x54
 800bd26:	4648      	mov	r0, r9
 800bd28:	f001 fa3e 	bl	800d1a8 <__d2b>
 800bd2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bd30:	9002      	str	r0, [sp, #8]
 800bd32:	2e00      	cmp	r6, #0
 800bd34:	d078      	beq.n	800be28 <_dtoa_r+0x1d8>
 800bd36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd38:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bd3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bd44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bd48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bd4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bd50:	4619      	mov	r1, r3
 800bd52:	2200      	movs	r2, #0
 800bd54:	4b76      	ldr	r3, [pc, #472]	@ (800bf30 <_dtoa_r+0x2e0>)
 800bd56:	f7f4 fa9f 	bl	8000298 <__aeabi_dsub>
 800bd5a:	a36b      	add	r3, pc, #428	@ (adr r3, 800bf08 <_dtoa_r+0x2b8>)
 800bd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd60:	f7f4 fc52 	bl	8000608 <__aeabi_dmul>
 800bd64:	a36a      	add	r3, pc, #424	@ (adr r3, 800bf10 <_dtoa_r+0x2c0>)
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	f7f4 fa97 	bl	800029c <__adddf3>
 800bd6e:	4604      	mov	r4, r0
 800bd70:	4630      	mov	r0, r6
 800bd72:	460d      	mov	r5, r1
 800bd74:	f7f4 fbde 	bl	8000534 <__aeabi_i2d>
 800bd78:	a367      	add	r3, pc, #412	@ (adr r3, 800bf18 <_dtoa_r+0x2c8>)
 800bd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7e:	f7f4 fc43 	bl	8000608 <__aeabi_dmul>
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	4620      	mov	r0, r4
 800bd88:	4629      	mov	r1, r5
 800bd8a:	f7f4 fa87 	bl	800029c <__adddf3>
 800bd8e:	4604      	mov	r4, r0
 800bd90:	460d      	mov	r5, r1
 800bd92:	f7f4 fee9 	bl	8000b68 <__aeabi_d2iz>
 800bd96:	2200      	movs	r2, #0
 800bd98:	4607      	mov	r7, r0
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	4629      	mov	r1, r5
 800bda0:	f7f4 fea4 	bl	8000aec <__aeabi_dcmplt>
 800bda4:	b140      	cbz	r0, 800bdb8 <_dtoa_r+0x168>
 800bda6:	4638      	mov	r0, r7
 800bda8:	f7f4 fbc4 	bl	8000534 <__aeabi_i2d>
 800bdac:	4622      	mov	r2, r4
 800bdae:	462b      	mov	r3, r5
 800bdb0:	f7f4 fe92 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdb4:	b900      	cbnz	r0, 800bdb8 <_dtoa_r+0x168>
 800bdb6:	3f01      	subs	r7, #1
 800bdb8:	2f16      	cmp	r7, #22
 800bdba:	d852      	bhi.n	800be62 <_dtoa_r+0x212>
 800bdbc:	4b5d      	ldr	r3, [pc, #372]	@ (800bf34 <_dtoa_r+0x2e4>)
 800bdbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bdca:	f7f4 fe8f 	bl	8000aec <__aeabi_dcmplt>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d049      	beq.n	800be66 <_dtoa_r+0x216>
 800bdd2:	3f01      	subs	r7, #1
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bdd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bdda:	1b9b      	subs	r3, r3, r6
 800bddc:	1e5a      	subs	r2, r3, #1
 800bdde:	bf45      	ittet	mi
 800bde0:	f1c3 0301 	rsbmi	r3, r3, #1
 800bde4:	9300      	strmi	r3, [sp, #0]
 800bde6:	2300      	movpl	r3, #0
 800bde8:	2300      	movmi	r3, #0
 800bdea:	9206      	str	r2, [sp, #24]
 800bdec:	bf54      	ite	pl
 800bdee:	9300      	strpl	r3, [sp, #0]
 800bdf0:	9306      	strmi	r3, [sp, #24]
 800bdf2:	2f00      	cmp	r7, #0
 800bdf4:	db39      	blt.n	800be6a <_dtoa_r+0x21a>
 800bdf6:	9b06      	ldr	r3, [sp, #24]
 800bdf8:	970d      	str	r7, [sp, #52]	@ 0x34
 800bdfa:	443b      	add	r3, r7
 800bdfc:	9306      	str	r3, [sp, #24]
 800bdfe:	2300      	movs	r3, #0
 800be00:	9308      	str	r3, [sp, #32]
 800be02:	9b07      	ldr	r3, [sp, #28]
 800be04:	2b09      	cmp	r3, #9
 800be06:	d863      	bhi.n	800bed0 <_dtoa_r+0x280>
 800be08:	2b05      	cmp	r3, #5
 800be0a:	bfc4      	itt	gt
 800be0c:	3b04      	subgt	r3, #4
 800be0e:	9307      	strgt	r3, [sp, #28]
 800be10:	9b07      	ldr	r3, [sp, #28]
 800be12:	f1a3 0302 	sub.w	r3, r3, #2
 800be16:	bfcc      	ite	gt
 800be18:	2400      	movgt	r4, #0
 800be1a:	2401      	movle	r4, #1
 800be1c:	2b03      	cmp	r3, #3
 800be1e:	d863      	bhi.n	800bee8 <_dtoa_r+0x298>
 800be20:	e8df f003 	tbb	[pc, r3]
 800be24:	2b375452 	.word	0x2b375452
 800be28:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800be2c:	441e      	add	r6, r3
 800be2e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800be32:	2b20      	cmp	r3, #32
 800be34:	bfc1      	itttt	gt
 800be36:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800be3a:	409f      	lslgt	r7, r3
 800be3c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800be40:	fa24 f303 	lsrgt.w	r3, r4, r3
 800be44:	bfd6      	itet	le
 800be46:	f1c3 0320 	rsble	r3, r3, #32
 800be4a:	ea47 0003 	orrgt.w	r0, r7, r3
 800be4e:	fa04 f003 	lslle.w	r0, r4, r3
 800be52:	f7f4 fb5f 	bl	8000514 <__aeabi_ui2d>
 800be56:	2201      	movs	r2, #1
 800be58:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800be5c:	3e01      	subs	r6, #1
 800be5e:	9212      	str	r2, [sp, #72]	@ 0x48
 800be60:	e776      	b.n	800bd50 <_dtoa_r+0x100>
 800be62:	2301      	movs	r3, #1
 800be64:	e7b7      	b.n	800bdd6 <_dtoa_r+0x186>
 800be66:	9010      	str	r0, [sp, #64]	@ 0x40
 800be68:	e7b6      	b.n	800bdd8 <_dtoa_r+0x188>
 800be6a:	9b00      	ldr	r3, [sp, #0]
 800be6c:	1bdb      	subs	r3, r3, r7
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	427b      	negs	r3, r7
 800be72:	9308      	str	r3, [sp, #32]
 800be74:	2300      	movs	r3, #0
 800be76:	930d      	str	r3, [sp, #52]	@ 0x34
 800be78:	e7c3      	b.n	800be02 <_dtoa_r+0x1b2>
 800be7a:	2301      	movs	r3, #1
 800be7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be80:	eb07 0b03 	add.w	fp, r7, r3
 800be84:	f10b 0301 	add.w	r3, fp, #1
 800be88:	2b01      	cmp	r3, #1
 800be8a:	9303      	str	r3, [sp, #12]
 800be8c:	bfb8      	it	lt
 800be8e:	2301      	movlt	r3, #1
 800be90:	e006      	b.n	800bea0 <_dtoa_r+0x250>
 800be92:	2301      	movs	r3, #1
 800be94:	9309      	str	r3, [sp, #36]	@ 0x24
 800be96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be98:	2b00      	cmp	r3, #0
 800be9a:	dd28      	ble.n	800beee <_dtoa_r+0x29e>
 800be9c:	469b      	mov	fp, r3
 800be9e:	9303      	str	r3, [sp, #12]
 800bea0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bea4:	2100      	movs	r1, #0
 800bea6:	2204      	movs	r2, #4
 800bea8:	f102 0514 	add.w	r5, r2, #20
 800beac:	429d      	cmp	r5, r3
 800beae:	d926      	bls.n	800befe <_dtoa_r+0x2ae>
 800beb0:	6041      	str	r1, [r0, #4]
 800beb2:	4648      	mov	r0, r9
 800beb4:	f000 fd9c 	bl	800c9f0 <_Balloc>
 800beb8:	4682      	mov	sl, r0
 800beba:	2800      	cmp	r0, #0
 800bebc:	d142      	bne.n	800bf44 <_dtoa_r+0x2f4>
 800bebe:	4b1e      	ldr	r3, [pc, #120]	@ (800bf38 <_dtoa_r+0x2e8>)
 800bec0:	4602      	mov	r2, r0
 800bec2:	f240 11af 	movw	r1, #431	@ 0x1af
 800bec6:	e6da      	b.n	800bc7e <_dtoa_r+0x2e>
 800bec8:	2300      	movs	r3, #0
 800beca:	e7e3      	b.n	800be94 <_dtoa_r+0x244>
 800becc:	2300      	movs	r3, #0
 800bece:	e7d5      	b.n	800be7c <_dtoa_r+0x22c>
 800bed0:	2401      	movs	r4, #1
 800bed2:	2300      	movs	r3, #0
 800bed4:	9307      	str	r3, [sp, #28]
 800bed6:	9409      	str	r4, [sp, #36]	@ 0x24
 800bed8:	f04f 3bff 	mov.w	fp, #4294967295
 800bedc:	2200      	movs	r2, #0
 800bede:	f8cd b00c 	str.w	fp, [sp, #12]
 800bee2:	2312      	movs	r3, #18
 800bee4:	920c      	str	r2, [sp, #48]	@ 0x30
 800bee6:	e7db      	b.n	800bea0 <_dtoa_r+0x250>
 800bee8:	2301      	movs	r3, #1
 800beea:	9309      	str	r3, [sp, #36]	@ 0x24
 800beec:	e7f4      	b.n	800bed8 <_dtoa_r+0x288>
 800beee:	f04f 0b01 	mov.w	fp, #1
 800bef2:	f8cd b00c 	str.w	fp, [sp, #12]
 800bef6:	465b      	mov	r3, fp
 800bef8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800befc:	e7d0      	b.n	800bea0 <_dtoa_r+0x250>
 800befe:	3101      	adds	r1, #1
 800bf00:	0052      	lsls	r2, r2, #1
 800bf02:	e7d1      	b.n	800bea8 <_dtoa_r+0x258>
 800bf04:	f3af 8000 	nop.w
 800bf08:	636f4361 	.word	0x636f4361
 800bf0c:	3fd287a7 	.word	0x3fd287a7
 800bf10:	8b60c8b3 	.word	0x8b60c8b3
 800bf14:	3fc68a28 	.word	0x3fc68a28
 800bf18:	509f79fb 	.word	0x509f79fb
 800bf1c:	3fd34413 	.word	0x3fd34413
 800bf20:	08011daa 	.word	0x08011daa
 800bf24:	08011dc1 	.word	0x08011dc1
 800bf28:	7ff00000 	.word	0x7ff00000
 800bf2c:	08011d75 	.word	0x08011d75
 800bf30:	3ff80000 	.word	0x3ff80000
 800bf34:	08011f70 	.word	0x08011f70
 800bf38:	08011e19 	.word	0x08011e19
 800bf3c:	08011da6 	.word	0x08011da6
 800bf40:	08011d74 	.word	0x08011d74
 800bf44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bf48:	6018      	str	r0, [r3, #0]
 800bf4a:	9b03      	ldr	r3, [sp, #12]
 800bf4c:	2b0e      	cmp	r3, #14
 800bf4e:	f200 80a1 	bhi.w	800c094 <_dtoa_r+0x444>
 800bf52:	2c00      	cmp	r4, #0
 800bf54:	f000 809e 	beq.w	800c094 <_dtoa_r+0x444>
 800bf58:	2f00      	cmp	r7, #0
 800bf5a:	dd33      	ble.n	800bfc4 <_dtoa_r+0x374>
 800bf5c:	4b9c      	ldr	r3, [pc, #624]	@ (800c1d0 <_dtoa_r+0x580>)
 800bf5e:	f007 020f 	and.w	r2, r7, #15
 800bf62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf66:	ed93 7b00 	vldr	d7, [r3]
 800bf6a:	05f8      	lsls	r0, r7, #23
 800bf6c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bf70:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bf74:	d516      	bpl.n	800bfa4 <_dtoa_r+0x354>
 800bf76:	4b97      	ldr	r3, [pc, #604]	@ (800c1d4 <_dtoa_r+0x584>)
 800bf78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf80:	f7f4 fc6c 	bl	800085c <__aeabi_ddiv>
 800bf84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf88:	f004 040f 	and.w	r4, r4, #15
 800bf8c:	2603      	movs	r6, #3
 800bf8e:	4d91      	ldr	r5, [pc, #580]	@ (800c1d4 <_dtoa_r+0x584>)
 800bf90:	b954      	cbnz	r4, 800bfa8 <_dtoa_r+0x358>
 800bf92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf9a:	f7f4 fc5f 	bl	800085c <__aeabi_ddiv>
 800bf9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfa2:	e028      	b.n	800bff6 <_dtoa_r+0x3a6>
 800bfa4:	2602      	movs	r6, #2
 800bfa6:	e7f2      	b.n	800bf8e <_dtoa_r+0x33e>
 800bfa8:	07e1      	lsls	r1, r4, #31
 800bfaa:	d508      	bpl.n	800bfbe <_dtoa_r+0x36e>
 800bfac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bfb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfb4:	f7f4 fb28 	bl	8000608 <__aeabi_dmul>
 800bfb8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bfbc:	3601      	adds	r6, #1
 800bfbe:	1064      	asrs	r4, r4, #1
 800bfc0:	3508      	adds	r5, #8
 800bfc2:	e7e5      	b.n	800bf90 <_dtoa_r+0x340>
 800bfc4:	f000 80af 	beq.w	800c126 <_dtoa_r+0x4d6>
 800bfc8:	427c      	negs	r4, r7
 800bfca:	4b81      	ldr	r3, [pc, #516]	@ (800c1d0 <_dtoa_r+0x580>)
 800bfcc:	4d81      	ldr	r5, [pc, #516]	@ (800c1d4 <_dtoa_r+0x584>)
 800bfce:	f004 020f 	and.w	r2, r4, #15
 800bfd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bfde:	f7f4 fb13 	bl	8000608 <__aeabi_dmul>
 800bfe2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfe6:	1124      	asrs	r4, r4, #4
 800bfe8:	2300      	movs	r3, #0
 800bfea:	2602      	movs	r6, #2
 800bfec:	2c00      	cmp	r4, #0
 800bfee:	f040 808f 	bne.w	800c110 <_dtoa_r+0x4c0>
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1d3      	bne.n	800bf9e <_dtoa_r+0x34e>
 800bff6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bff8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f000 8094 	beq.w	800c12a <_dtoa_r+0x4da>
 800c002:	4b75      	ldr	r3, [pc, #468]	@ (800c1d8 <_dtoa_r+0x588>)
 800c004:	2200      	movs	r2, #0
 800c006:	4620      	mov	r0, r4
 800c008:	4629      	mov	r1, r5
 800c00a:	f7f4 fd6f 	bl	8000aec <__aeabi_dcmplt>
 800c00e:	2800      	cmp	r0, #0
 800c010:	f000 808b 	beq.w	800c12a <_dtoa_r+0x4da>
 800c014:	9b03      	ldr	r3, [sp, #12]
 800c016:	2b00      	cmp	r3, #0
 800c018:	f000 8087 	beq.w	800c12a <_dtoa_r+0x4da>
 800c01c:	f1bb 0f00 	cmp.w	fp, #0
 800c020:	dd34      	ble.n	800c08c <_dtoa_r+0x43c>
 800c022:	4620      	mov	r0, r4
 800c024:	4b6d      	ldr	r3, [pc, #436]	@ (800c1dc <_dtoa_r+0x58c>)
 800c026:	2200      	movs	r2, #0
 800c028:	4629      	mov	r1, r5
 800c02a:	f7f4 faed 	bl	8000608 <__aeabi_dmul>
 800c02e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c032:	f107 38ff 	add.w	r8, r7, #4294967295
 800c036:	3601      	adds	r6, #1
 800c038:	465c      	mov	r4, fp
 800c03a:	4630      	mov	r0, r6
 800c03c:	f7f4 fa7a 	bl	8000534 <__aeabi_i2d>
 800c040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c044:	f7f4 fae0 	bl	8000608 <__aeabi_dmul>
 800c048:	4b65      	ldr	r3, [pc, #404]	@ (800c1e0 <_dtoa_r+0x590>)
 800c04a:	2200      	movs	r2, #0
 800c04c:	f7f4 f926 	bl	800029c <__adddf3>
 800c050:	4605      	mov	r5, r0
 800c052:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c056:	2c00      	cmp	r4, #0
 800c058:	d16a      	bne.n	800c130 <_dtoa_r+0x4e0>
 800c05a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c05e:	4b61      	ldr	r3, [pc, #388]	@ (800c1e4 <_dtoa_r+0x594>)
 800c060:	2200      	movs	r2, #0
 800c062:	f7f4 f919 	bl	8000298 <__aeabi_dsub>
 800c066:	4602      	mov	r2, r0
 800c068:	460b      	mov	r3, r1
 800c06a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c06e:	462a      	mov	r2, r5
 800c070:	4633      	mov	r3, r6
 800c072:	f7f4 fd59 	bl	8000b28 <__aeabi_dcmpgt>
 800c076:	2800      	cmp	r0, #0
 800c078:	f040 8298 	bne.w	800c5ac <_dtoa_r+0x95c>
 800c07c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c080:	462a      	mov	r2, r5
 800c082:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c086:	f7f4 fd31 	bl	8000aec <__aeabi_dcmplt>
 800c08a:	bb38      	cbnz	r0, 800c0dc <_dtoa_r+0x48c>
 800c08c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c090:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c094:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c096:	2b00      	cmp	r3, #0
 800c098:	f2c0 8157 	blt.w	800c34a <_dtoa_r+0x6fa>
 800c09c:	2f0e      	cmp	r7, #14
 800c09e:	f300 8154 	bgt.w	800c34a <_dtoa_r+0x6fa>
 800c0a2:	4b4b      	ldr	r3, [pc, #300]	@ (800c1d0 <_dtoa_r+0x580>)
 800c0a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c0a8:	ed93 7b00 	vldr	d7, [r3]
 800c0ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	ed8d 7b00 	vstr	d7, [sp]
 800c0b4:	f280 80e5 	bge.w	800c282 <_dtoa_r+0x632>
 800c0b8:	9b03      	ldr	r3, [sp, #12]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f300 80e1 	bgt.w	800c282 <_dtoa_r+0x632>
 800c0c0:	d10c      	bne.n	800c0dc <_dtoa_r+0x48c>
 800c0c2:	4b48      	ldr	r3, [pc, #288]	@ (800c1e4 <_dtoa_r+0x594>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	ec51 0b17 	vmov	r0, r1, d7
 800c0ca:	f7f4 fa9d 	bl	8000608 <__aeabi_dmul>
 800c0ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0d2:	f7f4 fd1f 	bl	8000b14 <__aeabi_dcmpge>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	f000 8266 	beq.w	800c5a8 <_dtoa_r+0x958>
 800c0dc:	2400      	movs	r4, #0
 800c0de:	4625      	mov	r5, r4
 800c0e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0e2:	4656      	mov	r6, sl
 800c0e4:	ea6f 0803 	mvn.w	r8, r3
 800c0e8:	2700      	movs	r7, #0
 800c0ea:	4621      	mov	r1, r4
 800c0ec:	4648      	mov	r0, r9
 800c0ee:	f000 fcbf 	bl	800ca70 <_Bfree>
 800c0f2:	2d00      	cmp	r5, #0
 800c0f4:	f000 80bd 	beq.w	800c272 <_dtoa_r+0x622>
 800c0f8:	b12f      	cbz	r7, 800c106 <_dtoa_r+0x4b6>
 800c0fa:	42af      	cmp	r7, r5
 800c0fc:	d003      	beq.n	800c106 <_dtoa_r+0x4b6>
 800c0fe:	4639      	mov	r1, r7
 800c100:	4648      	mov	r0, r9
 800c102:	f000 fcb5 	bl	800ca70 <_Bfree>
 800c106:	4629      	mov	r1, r5
 800c108:	4648      	mov	r0, r9
 800c10a:	f000 fcb1 	bl	800ca70 <_Bfree>
 800c10e:	e0b0      	b.n	800c272 <_dtoa_r+0x622>
 800c110:	07e2      	lsls	r2, r4, #31
 800c112:	d505      	bpl.n	800c120 <_dtoa_r+0x4d0>
 800c114:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c118:	f7f4 fa76 	bl	8000608 <__aeabi_dmul>
 800c11c:	3601      	adds	r6, #1
 800c11e:	2301      	movs	r3, #1
 800c120:	1064      	asrs	r4, r4, #1
 800c122:	3508      	adds	r5, #8
 800c124:	e762      	b.n	800bfec <_dtoa_r+0x39c>
 800c126:	2602      	movs	r6, #2
 800c128:	e765      	b.n	800bff6 <_dtoa_r+0x3a6>
 800c12a:	9c03      	ldr	r4, [sp, #12]
 800c12c:	46b8      	mov	r8, r7
 800c12e:	e784      	b.n	800c03a <_dtoa_r+0x3ea>
 800c130:	4b27      	ldr	r3, [pc, #156]	@ (800c1d0 <_dtoa_r+0x580>)
 800c132:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c134:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c138:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c13c:	4454      	add	r4, sl
 800c13e:	2900      	cmp	r1, #0
 800c140:	d054      	beq.n	800c1ec <_dtoa_r+0x59c>
 800c142:	4929      	ldr	r1, [pc, #164]	@ (800c1e8 <_dtoa_r+0x598>)
 800c144:	2000      	movs	r0, #0
 800c146:	f7f4 fb89 	bl	800085c <__aeabi_ddiv>
 800c14a:	4633      	mov	r3, r6
 800c14c:	462a      	mov	r2, r5
 800c14e:	f7f4 f8a3 	bl	8000298 <__aeabi_dsub>
 800c152:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c156:	4656      	mov	r6, sl
 800c158:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c15c:	f7f4 fd04 	bl	8000b68 <__aeabi_d2iz>
 800c160:	4605      	mov	r5, r0
 800c162:	f7f4 f9e7 	bl	8000534 <__aeabi_i2d>
 800c166:	4602      	mov	r2, r0
 800c168:	460b      	mov	r3, r1
 800c16a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c16e:	f7f4 f893 	bl	8000298 <__aeabi_dsub>
 800c172:	3530      	adds	r5, #48	@ 0x30
 800c174:	4602      	mov	r2, r0
 800c176:	460b      	mov	r3, r1
 800c178:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c17c:	f806 5b01 	strb.w	r5, [r6], #1
 800c180:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c184:	f7f4 fcb2 	bl	8000aec <__aeabi_dcmplt>
 800c188:	2800      	cmp	r0, #0
 800c18a:	d172      	bne.n	800c272 <_dtoa_r+0x622>
 800c18c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c190:	4911      	ldr	r1, [pc, #68]	@ (800c1d8 <_dtoa_r+0x588>)
 800c192:	2000      	movs	r0, #0
 800c194:	f7f4 f880 	bl	8000298 <__aeabi_dsub>
 800c198:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c19c:	f7f4 fca6 	bl	8000aec <__aeabi_dcmplt>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	f040 80b4 	bne.w	800c30e <_dtoa_r+0x6be>
 800c1a6:	42a6      	cmp	r6, r4
 800c1a8:	f43f af70 	beq.w	800c08c <_dtoa_r+0x43c>
 800c1ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c1b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c1dc <_dtoa_r+0x58c>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f7f4 fa28 	bl	8000608 <__aeabi_dmul>
 800c1b8:	4b08      	ldr	r3, [pc, #32]	@ (800c1dc <_dtoa_r+0x58c>)
 800c1ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c1be:	2200      	movs	r2, #0
 800c1c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1c4:	f7f4 fa20 	bl	8000608 <__aeabi_dmul>
 800c1c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1cc:	e7c4      	b.n	800c158 <_dtoa_r+0x508>
 800c1ce:	bf00      	nop
 800c1d0:	08011f70 	.word	0x08011f70
 800c1d4:	08011f48 	.word	0x08011f48
 800c1d8:	3ff00000 	.word	0x3ff00000
 800c1dc:	40240000 	.word	0x40240000
 800c1e0:	401c0000 	.word	0x401c0000
 800c1e4:	40140000 	.word	0x40140000
 800c1e8:	3fe00000 	.word	0x3fe00000
 800c1ec:	4631      	mov	r1, r6
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	f7f4 fa0a 	bl	8000608 <__aeabi_dmul>
 800c1f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c1f8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c1fa:	4656      	mov	r6, sl
 800c1fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c200:	f7f4 fcb2 	bl	8000b68 <__aeabi_d2iz>
 800c204:	4605      	mov	r5, r0
 800c206:	f7f4 f995 	bl	8000534 <__aeabi_i2d>
 800c20a:	4602      	mov	r2, r0
 800c20c:	460b      	mov	r3, r1
 800c20e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c212:	f7f4 f841 	bl	8000298 <__aeabi_dsub>
 800c216:	3530      	adds	r5, #48	@ 0x30
 800c218:	f806 5b01 	strb.w	r5, [r6], #1
 800c21c:	4602      	mov	r2, r0
 800c21e:	460b      	mov	r3, r1
 800c220:	42a6      	cmp	r6, r4
 800c222:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c226:	f04f 0200 	mov.w	r2, #0
 800c22a:	d124      	bne.n	800c276 <_dtoa_r+0x626>
 800c22c:	4baf      	ldr	r3, [pc, #700]	@ (800c4ec <_dtoa_r+0x89c>)
 800c22e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c232:	f7f4 f833 	bl	800029c <__adddf3>
 800c236:	4602      	mov	r2, r0
 800c238:	460b      	mov	r3, r1
 800c23a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c23e:	f7f4 fc73 	bl	8000b28 <__aeabi_dcmpgt>
 800c242:	2800      	cmp	r0, #0
 800c244:	d163      	bne.n	800c30e <_dtoa_r+0x6be>
 800c246:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c24a:	49a8      	ldr	r1, [pc, #672]	@ (800c4ec <_dtoa_r+0x89c>)
 800c24c:	2000      	movs	r0, #0
 800c24e:	f7f4 f823 	bl	8000298 <__aeabi_dsub>
 800c252:	4602      	mov	r2, r0
 800c254:	460b      	mov	r3, r1
 800c256:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c25a:	f7f4 fc47 	bl	8000aec <__aeabi_dcmplt>
 800c25e:	2800      	cmp	r0, #0
 800c260:	f43f af14 	beq.w	800c08c <_dtoa_r+0x43c>
 800c264:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c266:	1e73      	subs	r3, r6, #1
 800c268:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c26a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c26e:	2b30      	cmp	r3, #48	@ 0x30
 800c270:	d0f8      	beq.n	800c264 <_dtoa_r+0x614>
 800c272:	4647      	mov	r7, r8
 800c274:	e03b      	b.n	800c2ee <_dtoa_r+0x69e>
 800c276:	4b9e      	ldr	r3, [pc, #632]	@ (800c4f0 <_dtoa_r+0x8a0>)
 800c278:	f7f4 f9c6 	bl	8000608 <__aeabi_dmul>
 800c27c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c280:	e7bc      	b.n	800c1fc <_dtoa_r+0x5ac>
 800c282:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c286:	4656      	mov	r6, sl
 800c288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c28c:	4620      	mov	r0, r4
 800c28e:	4629      	mov	r1, r5
 800c290:	f7f4 fae4 	bl	800085c <__aeabi_ddiv>
 800c294:	f7f4 fc68 	bl	8000b68 <__aeabi_d2iz>
 800c298:	4680      	mov	r8, r0
 800c29a:	f7f4 f94b 	bl	8000534 <__aeabi_i2d>
 800c29e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2a2:	f7f4 f9b1 	bl	8000608 <__aeabi_dmul>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c2b2:	f7f3 fff1 	bl	8000298 <__aeabi_dsub>
 800c2b6:	f806 4b01 	strb.w	r4, [r6], #1
 800c2ba:	9d03      	ldr	r5, [sp, #12]
 800c2bc:	eba6 040a 	sub.w	r4, r6, sl
 800c2c0:	42a5      	cmp	r5, r4
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	d133      	bne.n	800c330 <_dtoa_r+0x6e0>
 800c2c8:	f7f3 ffe8 	bl	800029c <__adddf3>
 800c2cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	460d      	mov	r5, r1
 800c2d4:	f7f4 fc28 	bl	8000b28 <__aeabi_dcmpgt>
 800c2d8:	b9c0      	cbnz	r0, 800c30c <_dtoa_r+0x6bc>
 800c2da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2de:	4620      	mov	r0, r4
 800c2e0:	4629      	mov	r1, r5
 800c2e2:	f7f4 fbf9 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2e6:	b110      	cbz	r0, 800c2ee <_dtoa_r+0x69e>
 800c2e8:	f018 0f01 	tst.w	r8, #1
 800c2ec:	d10e      	bne.n	800c30c <_dtoa_r+0x6bc>
 800c2ee:	9902      	ldr	r1, [sp, #8]
 800c2f0:	4648      	mov	r0, r9
 800c2f2:	f000 fbbd 	bl	800ca70 <_Bfree>
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	7033      	strb	r3, [r6, #0]
 800c2fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c2fc:	3701      	adds	r7, #1
 800c2fe:	601f      	str	r7, [r3, #0]
 800c300:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c302:	2b00      	cmp	r3, #0
 800c304:	f000 824b 	beq.w	800c79e <_dtoa_r+0xb4e>
 800c308:	601e      	str	r6, [r3, #0]
 800c30a:	e248      	b.n	800c79e <_dtoa_r+0xb4e>
 800c30c:	46b8      	mov	r8, r7
 800c30e:	4633      	mov	r3, r6
 800c310:	461e      	mov	r6, r3
 800c312:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c316:	2a39      	cmp	r2, #57	@ 0x39
 800c318:	d106      	bne.n	800c328 <_dtoa_r+0x6d8>
 800c31a:	459a      	cmp	sl, r3
 800c31c:	d1f8      	bne.n	800c310 <_dtoa_r+0x6c0>
 800c31e:	2230      	movs	r2, #48	@ 0x30
 800c320:	f108 0801 	add.w	r8, r8, #1
 800c324:	f88a 2000 	strb.w	r2, [sl]
 800c328:	781a      	ldrb	r2, [r3, #0]
 800c32a:	3201      	adds	r2, #1
 800c32c:	701a      	strb	r2, [r3, #0]
 800c32e:	e7a0      	b.n	800c272 <_dtoa_r+0x622>
 800c330:	4b6f      	ldr	r3, [pc, #444]	@ (800c4f0 <_dtoa_r+0x8a0>)
 800c332:	2200      	movs	r2, #0
 800c334:	f7f4 f968 	bl	8000608 <__aeabi_dmul>
 800c338:	2200      	movs	r2, #0
 800c33a:	2300      	movs	r3, #0
 800c33c:	4604      	mov	r4, r0
 800c33e:	460d      	mov	r5, r1
 800c340:	f7f4 fbca 	bl	8000ad8 <__aeabi_dcmpeq>
 800c344:	2800      	cmp	r0, #0
 800c346:	d09f      	beq.n	800c288 <_dtoa_r+0x638>
 800c348:	e7d1      	b.n	800c2ee <_dtoa_r+0x69e>
 800c34a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c34c:	2a00      	cmp	r2, #0
 800c34e:	f000 80ea 	beq.w	800c526 <_dtoa_r+0x8d6>
 800c352:	9a07      	ldr	r2, [sp, #28]
 800c354:	2a01      	cmp	r2, #1
 800c356:	f300 80cd 	bgt.w	800c4f4 <_dtoa_r+0x8a4>
 800c35a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c35c:	2a00      	cmp	r2, #0
 800c35e:	f000 80c1 	beq.w	800c4e4 <_dtoa_r+0x894>
 800c362:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c366:	9c08      	ldr	r4, [sp, #32]
 800c368:	9e00      	ldr	r6, [sp, #0]
 800c36a:	9a00      	ldr	r2, [sp, #0]
 800c36c:	441a      	add	r2, r3
 800c36e:	9200      	str	r2, [sp, #0]
 800c370:	9a06      	ldr	r2, [sp, #24]
 800c372:	2101      	movs	r1, #1
 800c374:	441a      	add	r2, r3
 800c376:	4648      	mov	r0, r9
 800c378:	9206      	str	r2, [sp, #24]
 800c37a:	f000 fc77 	bl	800cc6c <__i2b>
 800c37e:	4605      	mov	r5, r0
 800c380:	b166      	cbz	r6, 800c39c <_dtoa_r+0x74c>
 800c382:	9b06      	ldr	r3, [sp, #24]
 800c384:	2b00      	cmp	r3, #0
 800c386:	dd09      	ble.n	800c39c <_dtoa_r+0x74c>
 800c388:	42b3      	cmp	r3, r6
 800c38a:	9a00      	ldr	r2, [sp, #0]
 800c38c:	bfa8      	it	ge
 800c38e:	4633      	movge	r3, r6
 800c390:	1ad2      	subs	r2, r2, r3
 800c392:	9200      	str	r2, [sp, #0]
 800c394:	9a06      	ldr	r2, [sp, #24]
 800c396:	1af6      	subs	r6, r6, r3
 800c398:	1ad3      	subs	r3, r2, r3
 800c39a:	9306      	str	r3, [sp, #24]
 800c39c:	9b08      	ldr	r3, [sp, #32]
 800c39e:	b30b      	cbz	r3, 800c3e4 <_dtoa_r+0x794>
 800c3a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f000 80c6 	beq.w	800c534 <_dtoa_r+0x8e4>
 800c3a8:	2c00      	cmp	r4, #0
 800c3aa:	f000 80c0 	beq.w	800c52e <_dtoa_r+0x8de>
 800c3ae:	4629      	mov	r1, r5
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	4648      	mov	r0, r9
 800c3b4:	f000 fd12 	bl	800cddc <__pow5mult>
 800c3b8:	9a02      	ldr	r2, [sp, #8]
 800c3ba:	4601      	mov	r1, r0
 800c3bc:	4605      	mov	r5, r0
 800c3be:	4648      	mov	r0, r9
 800c3c0:	f000 fc6a 	bl	800cc98 <__multiply>
 800c3c4:	9902      	ldr	r1, [sp, #8]
 800c3c6:	4680      	mov	r8, r0
 800c3c8:	4648      	mov	r0, r9
 800c3ca:	f000 fb51 	bl	800ca70 <_Bfree>
 800c3ce:	9b08      	ldr	r3, [sp, #32]
 800c3d0:	1b1b      	subs	r3, r3, r4
 800c3d2:	9308      	str	r3, [sp, #32]
 800c3d4:	f000 80b1 	beq.w	800c53a <_dtoa_r+0x8ea>
 800c3d8:	9a08      	ldr	r2, [sp, #32]
 800c3da:	4641      	mov	r1, r8
 800c3dc:	4648      	mov	r0, r9
 800c3de:	f000 fcfd 	bl	800cddc <__pow5mult>
 800c3e2:	9002      	str	r0, [sp, #8]
 800c3e4:	2101      	movs	r1, #1
 800c3e6:	4648      	mov	r0, r9
 800c3e8:	f000 fc40 	bl	800cc6c <__i2b>
 800c3ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f000 81d8 	beq.w	800c7a6 <_dtoa_r+0xb56>
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	4601      	mov	r1, r0
 800c3fa:	4648      	mov	r0, r9
 800c3fc:	f000 fcee 	bl	800cddc <__pow5mult>
 800c400:	9b07      	ldr	r3, [sp, #28]
 800c402:	2b01      	cmp	r3, #1
 800c404:	4604      	mov	r4, r0
 800c406:	f300 809f 	bgt.w	800c548 <_dtoa_r+0x8f8>
 800c40a:	9b04      	ldr	r3, [sp, #16]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f040 8097 	bne.w	800c540 <_dtoa_r+0x8f0>
 800c412:	9b05      	ldr	r3, [sp, #20]
 800c414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f040 8093 	bne.w	800c544 <_dtoa_r+0x8f4>
 800c41e:	9b05      	ldr	r3, [sp, #20]
 800c420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c424:	0d1b      	lsrs	r3, r3, #20
 800c426:	051b      	lsls	r3, r3, #20
 800c428:	b133      	cbz	r3, 800c438 <_dtoa_r+0x7e8>
 800c42a:	9b00      	ldr	r3, [sp, #0]
 800c42c:	3301      	adds	r3, #1
 800c42e:	9300      	str	r3, [sp, #0]
 800c430:	9b06      	ldr	r3, [sp, #24]
 800c432:	3301      	adds	r3, #1
 800c434:	9306      	str	r3, [sp, #24]
 800c436:	2301      	movs	r3, #1
 800c438:	9308      	str	r3, [sp, #32]
 800c43a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f000 81b8 	beq.w	800c7b2 <_dtoa_r+0xb62>
 800c442:	6923      	ldr	r3, [r4, #16]
 800c444:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c448:	6918      	ldr	r0, [r3, #16]
 800c44a:	f000 fbc3 	bl	800cbd4 <__hi0bits>
 800c44e:	f1c0 0020 	rsb	r0, r0, #32
 800c452:	9b06      	ldr	r3, [sp, #24]
 800c454:	4418      	add	r0, r3
 800c456:	f010 001f 	ands.w	r0, r0, #31
 800c45a:	f000 8082 	beq.w	800c562 <_dtoa_r+0x912>
 800c45e:	f1c0 0320 	rsb	r3, r0, #32
 800c462:	2b04      	cmp	r3, #4
 800c464:	dd73      	ble.n	800c54e <_dtoa_r+0x8fe>
 800c466:	9b00      	ldr	r3, [sp, #0]
 800c468:	f1c0 001c 	rsb	r0, r0, #28
 800c46c:	4403      	add	r3, r0
 800c46e:	9300      	str	r3, [sp, #0]
 800c470:	9b06      	ldr	r3, [sp, #24]
 800c472:	4403      	add	r3, r0
 800c474:	4406      	add	r6, r0
 800c476:	9306      	str	r3, [sp, #24]
 800c478:	9b00      	ldr	r3, [sp, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	dd05      	ble.n	800c48a <_dtoa_r+0x83a>
 800c47e:	9902      	ldr	r1, [sp, #8]
 800c480:	461a      	mov	r2, r3
 800c482:	4648      	mov	r0, r9
 800c484:	f000 fd04 	bl	800ce90 <__lshift>
 800c488:	9002      	str	r0, [sp, #8]
 800c48a:	9b06      	ldr	r3, [sp, #24]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	dd05      	ble.n	800c49c <_dtoa_r+0x84c>
 800c490:	4621      	mov	r1, r4
 800c492:	461a      	mov	r2, r3
 800c494:	4648      	mov	r0, r9
 800c496:	f000 fcfb 	bl	800ce90 <__lshift>
 800c49a:	4604      	mov	r4, r0
 800c49c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d061      	beq.n	800c566 <_dtoa_r+0x916>
 800c4a2:	9802      	ldr	r0, [sp, #8]
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	f000 fd5f 	bl	800cf68 <__mcmp>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	da5b      	bge.n	800c566 <_dtoa_r+0x916>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	9902      	ldr	r1, [sp, #8]
 800c4b2:	220a      	movs	r2, #10
 800c4b4:	4648      	mov	r0, r9
 800c4b6:	f000 fafd 	bl	800cab4 <__multadd>
 800c4ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4bc:	9002      	str	r0, [sp, #8]
 800c4be:	f107 38ff 	add.w	r8, r7, #4294967295
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f000 8177 	beq.w	800c7b6 <_dtoa_r+0xb66>
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	220a      	movs	r2, #10
 800c4ce:	4648      	mov	r0, r9
 800c4d0:	f000 faf0 	bl	800cab4 <__multadd>
 800c4d4:	f1bb 0f00 	cmp.w	fp, #0
 800c4d8:	4605      	mov	r5, r0
 800c4da:	dc6f      	bgt.n	800c5bc <_dtoa_r+0x96c>
 800c4dc:	9b07      	ldr	r3, [sp, #28]
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	dc49      	bgt.n	800c576 <_dtoa_r+0x926>
 800c4e2:	e06b      	b.n	800c5bc <_dtoa_r+0x96c>
 800c4e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c4e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c4ea:	e73c      	b.n	800c366 <_dtoa_r+0x716>
 800c4ec:	3fe00000 	.word	0x3fe00000
 800c4f0:	40240000 	.word	0x40240000
 800c4f4:	9b03      	ldr	r3, [sp, #12]
 800c4f6:	1e5c      	subs	r4, r3, #1
 800c4f8:	9b08      	ldr	r3, [sp, #32]
 800c4fa:	42a3      	cmp	r3, r4
 800c4fc:	db09      	blt.n	800c512 <_dtoa_r+0x8c2>
 800c4fe:	1b1c      	subs	r4, r3, r4
 800c500:	9b03      	ldr	r3, [sp, #12]
 800c502:	2b00      	cmp	r3, #0
 800c504:	f6bf af30 	bge.w	800c368 <_dtoa_r+0x718>
 800c508:	9b00      	ldr	r3, [sp, #0]
 800c50a:	9a03      	ldr	r2, [sp, #12]
 800c50c:	1a9e      	subs	r6, r3, r2
 800c50e:	2300      	movs	r3, #0
 800c510:	e72b      	b.n	800c36a <_dtoa_r+0x71a>
 800c512:	9b08      	ldr	r3, [sp, #32]
 800c514:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c516:	9408      	str	r4, [sp, #32]
 800c518:	1ae3      	subs	r3, r4, r3
 800c51a:	441a      	add	r2, r3
 800c51c:	9e00      	ldr	r6, [sp, #0]
 800c51e:	9b03      	ldr	r3, [sp, #12]
 800c520:	920d      	str	r2, [sp, #52]	@ 0x34
 800c522:	2400      	movs	r4, #0
 800c524:	e721      	b.n	800c36a <_dtoa_r+0x71a>
 800c526:	9c08      	ldr	r4, [sp, #32]
 800c528:	9e00      	ldr	r6, [sp, #0]
 800c52a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c52c:	e728      	b.n	800c380 <_dtoa_r+0x730>
 800c52e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c532:	e751      	b.n	800c3d8 <_dtoa_r+0x788>
 800c534:	9a08      	ldr	r2, [sp, #32]
 800c536:	9902      	ldr	r1, [sp, #8]
 800c538:	e750      	b.n	800c3dc <_dtoa_r+0x78c>
 800c53a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c53e:	e751      	b.n	800c3e4 <_dtoa_r+0x794>
 800c540:	2300      	movs	r3, #0
 800c542:	e779      	b.n	800c438 <_dtoa_r+0x7e8>
 800c544:	9b04      	ldr	r3, [sp, #16]
 800c546:	e777      	b.n	800c438 <_dtoa_r+0x7e8>
 800c548:	2300      	movs	r3, #0
 800c54a:	9308      	str	r3, [sp, #32]
 800c54c:	e779      	b.n	800c442 <_dtoa_r+0x7f2>
 800c54e:	d093      	beq.n	800c478 <_dtoa_r+0x828>
 800c550:	9a00      	ldr	r2, [sp, #0]
 800c552:	331c      	adds	r3, #28
 800c554:	441a      	add	r2, r3
 800c556:	9200      	str	r2, [sp, #0]
 800c558:	9a06      	ldr	r2, [sp, #24]
 800c55a:	441a      	add	r2, r3
 800c55c:	441e      	add	r6, r3
 800c55e:	9206      	str	r2, [sp, #24]
 800c560:	e78a      	b.n	800c478 <_dtoa_r+0x828>
 800c562:	4603      	mov	r3, r0
 800c564:	e7f4      	b.n	800c550 <_dtoa_r+0x900>
 800c566:	9b03      	ldr	r3, [sp, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	46b8      	mov	r8, r7
 800c56c:	dc20      	bgt.n	800c5b0 <_dtoa_r+0x960>
 800c56e:	469b      	mov	fp, r3
 800c570:	9b07      	ldr	r3, [sp, #28]
 800c572:	2b02      	cmp	r3, #2
 800c574:	dd1e      	ble.n	800c5b4 <_dtoa_r+0x964>
 800c576:	f1bb 0f00 	cmp.w	fp, #0
 800c57a:	f47f adb1 	bne.w	800c0e0 <_dtoa_r+0x490>
 800c57e:	4621      	mov	r1, r4
 800c580:	465b      	mov	r3, fp
 800c582:	2205      	movs	r2, #5
 800c584:	4648      	mov	r0, r9
 800c586:	f000 fa95 	bl	800cab4 <__multadd>
 800c58a:	4601      	mov	r1, r0
 800c58c:	4604      	mov	r4, r0
 800c58e:	9802      	ldr	r0, [sp, #8]
 800c590:	f000 fcea 	bl	800cf68 <__mcmp>
 800c594:	2800      	cmp	r0, #0
 800c596:	f77f ada3 	ble.w	800c0e0 <_dtoa_r+0x490>
 800c59a:	4656      	mov	r6, sl
 800c59c:	2331      	movs	r3, #49	@ 0x31
 800c59e:	f806 3b01 	strb.w	r3, [r6], #1
 800c5a2:	f108 0801 	add.w	r8, r8, #1
 800c5a6:	e59f      	b.n	800c0e8 <_dtoa_r+0x498>
 800c5a8:	9c03      	ldr	r4, [sp, #12]
 800c5aa:	46b8      	mov	r8, r7
 800c5ac:	4625      	mov	r5, r4
 800c5ae:	e7f4      	b.n	800c59a <_dtoa_r+0x94a>
 800c5b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c5b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f000 8101 	beq.w	800c7be <_dtoa_r+0xb6e>
 800c5bc:	2e00      	cmp	r6, #0
 800c5be:	dd05      	ble.n	800c5cc <_dtoa_r+0x97c>
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	4632      	mov	r2, r6
 800c5c4:	4648      	mov	r0, r9
 800c5c6:	f000 fc63 	bl	800ce90 <__lshift>
 800c5ca:	4605      	mov	r5, r0
 800c5cc:	9b08      	ldr	r3, [sp, #32]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d05c      	beq.n	800c68c <_dtoa_r+0xa3c>
 800c5d2:	6869      	ldr	r1, [r5, #4]
 800c5d4:	4648      	mov	r0, r9
 800c5d6:	f000 fa0b 	bl	800c9f0 <_Balloc>
 800c5da:	4606      	mov	r6, r0
 800c5dc:	b928      	cbnz	r0, 800c5ea <_dtoa_r+0x99a>
 800c5de:	4b82      	ldr	r3, [pc, #520]	@ (800c7e8 <_dtoa_r+0xb98>)
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c5e6:	f7ff bb4a 	b.w	800bc7e <_dtoa_r+0x2e>
 800c5ea:	692a      	ldr	r2, [r5, #16]
 800c5ec:	3202      	adds	r2, #2
 800c5ee:	0092      	lsls	r2, r2, #2
 800c5f0:	f105 010c 	add.w	r1, r5, #12
 800c5f4:	300c      	adds	r0, #12
 800c5f6:	f002 f93f 	bl	800e878 <memcpy>
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	4631      	mov	r1, r6
 800c5fe:	4648      	mov	r0, r9
 800c600:	f000 fc46 	bl	800ce90 <__lshift>
 800c604:	f10a 0301 	add.w	r3, sl, #1
 800c608:	9300      	str	r3, [sp, #0]
 800c60a:	eb0a 030b 	add.w	r3, sl, fp
 800c60e:	9308      	str	r3, [sp, #32]
 800c610:	9b04      	ldr	r3, [sp, #16]
 800c612:	f003 0301 	and.w	r3, r3, #1
 800c616:	462f      	mov	r7, r5
 800c618:	9306      	str	r3, [sp, #24]
 800c61a:	4605      	mov	r5, r0
 800c61c:	9b00      	ldr	r3, [sp, #0]
 800c61e:	9802      	ldr	r0, [sp, #8]
 800c620:	4621      	mov	r1, r4
 800c622:	f103 3bff 	add.w	fp, r3, #4294967295
 800c626:	f7ff fa8b 	bl	800bb40 <quorem>
 800c62a:	4603      	mov	r3, r0
 800c62c:	3330      	adds	r3, #48	@ 0x30
 800c62e:	9003      	str	r0, [sp, #12]
 800c630:	4639      	mov	r1, r7
 800c632:	9802      	ldr	r0, [sp, #8]
 800c634:	9309      	str	r3, [sp, #36]	@ 0x24
 800c636:	f000 fc97 	bl	800cf68 <__mcmp>
 800c63a:	462a      	mov	r2, r5
 800c63c:	9004      	str	r0, [sp, #16]
 800c63e:	4621      	mov	r1, r4
 800c640:	4648      	mov	r0, r9
 800c642:	f000 fcad 	bl	800cfa0 <__mdiff>
 800c646:	68c2      	ldr	r2, [r0, #12]
 800c648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c64a:	4606      	mov	r6, r0
 800c64c:	bb02      	cbnz	r2, 800c690 <_dtoa_r+0xa40>
 800c64e:	4601      	mov	r1, r0
 800c650:	9802      	ldr	r0, [sp, #8]
 800c652:	f000 fc89 	bl	800cf68 <__mcmp>
 800c656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c658:	4602      	mov	r2, r0
 800c65a:	4631      	mov	r1, r6
 800c65c:	4648      	mov	r0, r9
 800c65e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c660:	9309      	str	r3, [sp, #36]	@ 0x24
 800c662:	f000 fa05 	bl	800ca70 <_Bfree>
 800c666:	9b07      	ldr	r3, [sp, #28]
 800c668:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c66a:	9e00      	ldr	r6, [sp, #0]
 800c66c:	ea42 0103 	orr.w	r1, r2, r3
 800c670:	9b06      	ldr	r3, [sp, #24]
 800c672:	4319      	orrs	r1, r3
 800c674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c676:	d10d      	bne.n	800c694 <_dtoa_r+0xa44>
 800c678:	2b39      	cmp	r3, #57	@ 0x39
 800c67a:	d027      	beq.n	800c6cc <_dtoa_r+0xa7c>
 800c67c:	9a04      	ldr	r2, [sp, #16]
 800c67e:	2a00      	cmp	r2, #0
 800c680:	dd01      	ble.n	800c686 <_dtoa_r+0xa36>
 800c682:	9b03      	ldr	r3, [sp, #12]
 800c684:	3331      	adds	r3, #49	@ 0x31
 800c686:	f88b 3000 	strb.w	r3, [fp]
 800c68a:	e52e      	b.n	800c0ea <_dtoa_r+0x49a>
 800c68c:	4628      	mov	r0, r5
 800c68e:	e7b9      	b.n	800c604 <_dtoa_r+0x9b4>
 800c690:	2201      	movs	r2, #1
 800c692:	e7e2      	b.n	800c65a <_dtoa_r+0xa0a>
 800c694:	9904      	ldr	r1, [sp, #16]
 800c696:	2900      	cmp	r1, #0
 800c698:	db04      	blt.n	800c6a4 <_dtoa_r+0xa54>
 800c69a:	9807      	ldr	r0, [sp, #28]
 800c69c:	4301      	orrs	r1, r0
 800c69e:	9806      	ldr	r0, [sp, #24]
 800c6a0:	4301      	orrs	r1, r0
 800c6a2:	d120      	bne.n	800c6e6 <_dtoa_r+0xa96>
 800c6a4:	2a00      	cmp	r2, #0
 800c6a6:	ddee      	ble.n	800c686 <_dtoa_r+0xa36>
 800c6a8:	9902      	ldr	r1, [sp, #8]
 800c6aa:	9300      	str	r3, [sp, #0]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	4648      	mov	r0, r9
 800c6b0:	f000 fbee 	bl	800ce90 <__lshift>
 800c6b4:	4621      	mov	r1, r4
 800c6b6:	9002      	str	r0, [sp, #8]
 800c6b8:	f000 fc56 	bl	800cf68 <__mcmp>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	9b00      	ldr	r3, [sp, #0]
 800c6c0:	dc02      	bgt.n	800c6c8 <_dtoa_r+0xa78>
 800c6c2:	d1e0      	bne.n	800c686 <_dtoa_r+0xa36>
 800c6c4:	07da      	lsls	r2, r3, #31
 800c6c6:	d5de      	bpl.n	800c686 <_dtoa_r+0xa36>
 800c6c8:	2b39      	cmp	r3, #57	@ 0x39
 800c6ca:	d1da      	bne.n	800c682 <_dtoa_r+0xa32>
 800c6cc:	2339      	movs	r3, #57	@ 0x39
 800c6ce:	f88b 3000 	strb.w	r3, [fp]
 800c6d2:	4633      	mov	r3, r6
 800c6d4:	461e      	mov	r6, r3
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c6dc:	2a39      	cmp	r2, #57	@ 0x39
 800c6de:	d04e      	beq.n	800c77e <_dtoa_r+0xb2e>
 800c6e0:	3201      	adds	r2, #1
 800c6e2:	701a      	strb	r2, [r3, #0]
 800c6e4:	e501      	b.n	800c0ea <_dtoa_r+0x49a>
 800c6e6:	2a00      	cmp	r2, #0
 800c6e8:	dd03      	ble.n	800c6f2 <_dtoa_r+0xaa2>
 800c6ea:	2b39      	cmp	r3, #57	@ 0x39
 800c6ec:	d0ee      	beq.n	800c6cc <_dtoa_r+0xa7c>
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	e7c9      	b.n	800c686 <_dtoa_r+0xa36>
 800c6f2:	9a00      	ldr	r2, [sp, #0]
 800c6f4:	9908      	ldr	r1, [sp, #32]
 800c6f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c6fa:	428a      	cmp	r2, r1
 800c6fc:	d028      	beq.n	800c750 <_dtoa_r+0xb00>
 800c6fe:	9902      	ldr	r1, [sp, #8]
 800c700:	2300      	movs	r3, #0
 800c702:	220a      	movs	r2, #10
 800c704:	4648      	mov	r0, r9
 800c706:	f000 f9d5 	bl	800cab4 <__multadd>
 800c70a:	42af      	cmp	r7, r5
 800c70c:	9002      	str	r0, [sp, #8]
 800c70e:	f04f 0300 	mov.w	r3, #0
 800c712:	f04f 020a 	mov.w	r2, #10
 800c716:	4639      	mov	r1, r7
 800c718:	4648      	mov	r0, r9
 800c71a:	d107      	bne.n	800c72c <_dtoa_r+0xadc>
 800c71c:	f000 f9ca 	bl	800cab4 <__multadd>
 800c720:	4607      	mov	r7, r0
 800c722:	4605      	mov	r5, r0
 800c724:	9b00      	ldr	r3, [sp, #0]
 800c726:	3301      	adds	r3, #1
 800c728:	9300      	str	r3, [sp, #0]
 800c72a:	e777      	b.n	800c61c <_dtoa_r+0x9cc>
 800c72c:	f000 f9c2 	bl	800cab4 <__multadd>
 800c730:	4629      	mov	r1, r5
 800c732:	4607      	mov	r7, r0
 800c734:	2300      	movs	r3, #0
 800c736:	220a      	movs	r2, #10
 800c738:	4648      	mov	r0, r9
 800c73a:	f000 f9bb 	bl	800cab4 <__multadd>
 800c73e:	4605      	mov	r5, r0
 800c740:	e7f0      	b.n	800c724 <_dtoa_r+0xad4>
 800c742:	f1bb 0f00 	cmp.w	fp, #0
 800c746:	bfcc      	ite	gt
 800c748:	465e      	movgt	r6, fp
 800c74a:	2601      	movle	r6, #1
 800c74c:	4456      	add	r6, sl
 800c74e:	2700      	movs	r7, #0
 800c750:	9902      	ldr	r1, [sp, #8]
 800c752:	9300      	str	r3, [sp, #0]
 800c754:	2201      	movs	r2, #1
 800c756:	4648      	mov	r0, r9
 800c758:	f000 fb9a 	bl	800ce90 <__lshift>
 800c75c:	4621      	mov	r1, r4
 800c75e:	9002      	str	r0, [sp, #8]
 800c760:	f000 fc02 	bl	800cf68 <__mcmp>
 800c764:	2800      	cmp	r0, #0
 800c766:	dcb4      	bgt.n	800c6d2 <_dtoa_r+0xa82>
 800c768:	d102      	bne.n	800c770 <_dtoa_r+0xb20>
 800c76a:	9b00      	ldr	r3, [sp, #0]
 800c76c:	07db      	lsls	r3, r3, #31
 800c76e:	d4b0      	bmi.n	800c6d2 <_dtoa_r+0xa82>
 800c770:	4633      	mov	r3, r6
 800c772:	461e      	mov	r6, r3
 800c774:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c778:	2a30      	cmp	r2, #48	@ 0x30
 800c77a:	d0fa      	beq.n	800c772 <_dtoa_r+0xb22>
 800c77c:	e4b5      	b.n	800c0ea <_dtoa_r+0x49a>
 800c77e:	459a      	cmp	sl, r3
 800c780:	d1a8      	bne.n	800c6d4 <_dtoa_r+0xa84>
 800c782:	2331      	movs	r3, #49	@ 0x31
 800c784:	f108 0801 	add.w	r8, r8, #1
 800c788:	f88a 3000 	strb.w	r3, [sl]
 800c78c:	e4ad      	b.n	800c0ea <_dtoa_r+0x49a>
 800c78e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c790:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c7ec <_dtoa_r+0xb9c>
 800c794:	b11b      	cbz	r3, 800c79e <_dtoa_r+0xb4e>
 800c796:	f10a 0308 	add.w	r3, sl, #8
 800c79a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c79c:	6013      	str	r3, [r2, #0]
 800c79e:	4650      	mov	r0, sl
 800c7a0:	b017      	add	sp, #92	@ 0x5c
 800c7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a6:	9b07      	ldr	r3, [sp, #28]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	f77f ae2e 	ble.w	800c40a <_dtoa_r+0x7ba>
 800c7ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c7b0:	9308      	str	r3, [sp, #32]
 800c7b2:	2001      	movs	r0, #1
 800c7b4:	e64d      	b.n	800c452 <_dtoa_r+0x802>
 800c7b6:	f1bb 0f00 	cmp.w	fp, #0
 800c7ba:	f77f aed9 	ble.w	800c570 <_dtoa_r+0x920>
 800c7be:	4656      	mov	r6, sl
 800c7c0:	9802      	ldr	r0, [sp, #8]
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	f7ff f9bc 	bl	800bb40 <quorem>
 800c7c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c7cc:	f806 3b01 	strb.w	r3, [r6], #1
 800c7d0:	eba6 020a 	sub.w	r2, r6, sl
 800c7d4:	4593      	cmp	fp, r2
 800c7d6:	ddb4      	ble.n	800c742 <_dtoa_r+0xaf2>
 800c7d8:	9902      	ldr	r1, [sp, #8]
 800c7da:	2300      	movs	r3, #0
 800c7dc:	220a      	movs	r2, #10
 800c7de:	4648      	mov	r0, r9
 800c7e0:	f000 f968 	bl	800cab4 <__multadd>
 800c7e4:	9002      	str	r0, [sp, #8]
 800c7e6:	e7eb      	b.n	800c7c0 <_dtoa_r+0xb70>
 800c7e8:	08011e19 	.word	0x08011e19
 800c7ec:	08011d9d 	.word	0x08011d9d

0800c7f0 <_free_r>:
 800c7f0:	b538      	push	{r3, r4, r5, lr}
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	2900      	cmp	r1, #0
 800c7f6:	d041      	beq.n	800c87c <_free_r+0x8c>
 800c7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7fc:	1f0c      	subs	r4, r1, #4
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	bfb8      	it	lt
 800c802:	18e4      	addlt	r4, r4, r3
 800c804:	f000 f8e8 	bl	800c9d8 <__malloc_lock>
 800c808:	4a1d      	ldr	r2, [pc, #116]	@ (800c880 <_free_r+0x90>)
 800c80a:	6813      	ldr	r3, [r2, #0]
 800c80c:	b933      	cbnz	r3, 800c81c <_free_r+0x2c>
 800c80e:	6063      	str	r3, [r4, #4]
 800c810:	6014      	str	r4, [r2, #0]
 800c812:	4628      	mov	r0, r5
 800c814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c818:	f000 b8e4 	b.w	800c9e4 <__malloc_unlock>
 800c81c:	42a3      	cmp	r3, r4
 800c81e:	d908      	bls.n	800c832 <_free_r+0x42>
 800c820:	6820      	ldr	r0, [r4, #0]
 800c822:	1821      	adds	r1, r4, r0
 800c824:	428b      	cmp	r3, r1
 800c826:	bf01      	itttt	eq
 800c828:	6819      	ldreq	r1, [r3, #0]
 800c82a:	685b      	ldreq	r3, [r3, #4]
 800c82c:	1809      	addeq	r1, r1, r0
 800c82e:	6021      	streq	r1, [r4, #0]
 800c830:	e7ed      	b.n	800c80e <_free_r+0x1e>
 800c832:	461a      	mov	r2, r3
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	b10b      	cbz	r3, 800c83c <_free_r+0x4c>
 800c838:	42a3      	cmp	r3, r4
 800c83a:	d9fa      	bls.n	800c832 <_free_r+0x42>
 800c83c:	6811      	ldr	r1, [r2, #0]
 800c83e:	1850      	adds	r0, r2, r1
 800c840:	42a0      	cmp	r0, r4
 800c842:	d10b      	bne.n	800c85c <_free_r+0x6c>
 800c844:	6820      	ldr	r0, [r4, #0]
 800c846:	4401      	add	r1, r0
 800c848:	1850      	adds	r0, r2, r1
 800c84a:	4283      	cmp	r3, r0
 800c84c:	6011      	str	r1, [r2, #0]
 800c84e:	d1e0      	bne.n	800c812 <_free_r+0x22>
 800c850:	6818      	ldr	r0, [r3, #0]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	6053      	str	r3, [r2, #4]
 800c856:	4408      	add	r0, r1
 800c858:	6010      	str	r0, [r2, #0]
 800c85a:	e7da      	b.n	800c812 <_free_r+0x22>
 800c85c:	d902      	bls.n	800c864 <_free_r+0x74>
 800c85e:	230c      	movs	r3, #12
 800c860:	602b      	str	r3, [r5, #0]
 800c862:	e7d6      	b.n	800c812 <_free_r+0x22>
 800c864:	6820      	ldr	r0, [r4, #0]
 800c866:	1821      	adds	r1, r4, r0
 800c868:	428b      	cmp	r3, r1
 800c86a:	bf04      	itt	eq
 800c86c:	6819      	ldreq	r1, [r3, #0]
 800c86e:	685b      	ldreq	r3, [r3, #4]
 800c870:	6063      	str	r3, [r4, #4]
 800c872:	bf04      	itt	eq
 800c874:	1809      	addeq	r1, r1, r0
 800c876:	6021      	streq	r1, [r4, #0]
 800c878:	6054      	str	r4, [r2, #4]
 800c87a:	e7ca      	b.n	800c812 <_free_r+0x22>
 800c87c:	bd38      	pop	{r3, r4, r5, pc}
 800c87e:	bf00      	nop
 800c880:	200008fc 	.word	0x200008fc

0800c884 <malloc>:
 800c884:	4b02      	ldr	r3, [pc, #8]	@ (800c890 <malloc+0xc>)
 800c886:	4601      	mov	r1, r0
 800c888:	6818      	ldr	r0, [r3, #0]
 800c88a:	f000 b825 	b.w	800c8d8 <_malloc_r>
 800c88e:	bf00      	nop
 800c890:	20000038 	.word	0x20000038

0800c894 <sbrk_aligned>:
 800c894:	b570      	push	{r4, r5, r6, lr}
 800c896:	4e0f      	ldr	r6, [pc, #60]	@ (800c8d4 <sbrk_aligned+0x40>)
 800c898:	460c      	mov	r4, r1
 800c89a:	6831      	ldr	r1, [r6, #0]
 800c89c:	4605      	mov	r5, r0
 800c89e:	b911      	cbnz	r1, 800c8a6 <sbrk_aligned+0x12>
 800c8a0:	f001 ffda 	bl	800e858 <_sbrk_r>
 800c8a4:	6030      	str	r0, [r6, #0]
 800c8a6:	4621      	mov	r1, r4
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	f001 ffd5 	bl	800e858 <_sbrk_r>
 800c8ae:	1c43      	adds	r3, r0, #1
 800c8b0:	d103      	bne.n	800c8ba <sbrk_aligned+0x26>
 800c8b2:	f04f 34ff 	mov.w	r4, #4294967295
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	bd70      	pop	{r4, r5, r6, pc}
 800c8ba:	1cc4      	adds	r4, r0, #3
 800c8bc:	f024 0403 	bic.w	r4, r4, #3
 800c8c0:	42a0      	cmp	r0, r4
 800c8c2:	d0f8      	beq.n	800c8b6 <sbrk_aligned+0x22>
 800c8c4:	1a21      	subs	r1, r4, r0
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f001 ffc6 	bl	800e858 <_sbrk_r>
 800c8cc:	3001      	adds	r0, #1
 800c8ce:	d1f2      	bne.n	800c8b6 <sbrk_aligned+0x22>
 800c8d0:	e7ef      	b.n	800c8b2 <sbrk_aligned+0x1e>
 800c8d2:	bf00      	nop
 800c8d4:	200008f8 	.word	0x200008f8

0800c8d8 <_malloc_r>:
 800c8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8dc:	1ccd      	adds	r5, r1, #3
 800c8de:	f025 0503 	bic.w	r5, r5, #3
 800c8e2:	3508      	adds	r5, #8
 800c8e4:	2d0c      	cmp	r5, #12
 800c8e6:	bf38      	it	cc
 800c8e8:	250c      	movcc	r5, #12
 800c8ea:	2d00      	cmp	r5, #0
 800c8ec:	4606      	mov	r6, r0
 800c8ee:	db01      	blt.n	800c8f4 <_malloc_r+0x1c>
 800c8f0:	42a9      	cmp	r1, r5
 800c8f2:	d904      	bls.n	800c8fe <_malloc_r+0x26>
 800c8f4:	230c      	movs	r3, #12
 800c8f6:	6033      	str	r3, [r6, #0]
 800c8f8:	2000      	movs	r0, #0
 800c8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c9d4 <_malloc_r+0xfc>
 800c902:	f000 f869 	bl	800c9d8 <__malloc_lock>
 800c906:	f8d8 3000 	ldr.w	r3, [r8]
 800c90a:	461c      	mov	r4, r3
 800c90c:	bb44      	cbnz	r4, 800c960 <_malloc_r+0x88>
 800c90e:	4629      	mov	r1, r5
 800c910:	4630      	mov	r0, r6
 800c912:	f7ff ffbf 	bl	800c894 <sbrk_aligned>
 800c916:	1c43      	adds	r3, r0, #1
 800c918:	4604      	mov	r4, r0
 800c91a:	d158      	bne.n	800c9ce <_malloc_r+0xf6>
 800c91c:	f8d8 4000 	ldr.w	r4, [r8]
 800c920:	4627      	mov	r7, r4
 800c922:	2f00      	cmp	r7, #0
 800c924:	d143      	bne.n	800c9ae <_malloc_r+0xd6>
 800c926:	2c00      	cmp	r4, #0
 800c928:	d04b      	beq.n	800c9c2 <_malloc_r+0xea>
 800c92a:	6823      	ldr	r3, [r4, #0]
 800c92c:	4639      	mov	r1, r7
 800c92e:	4630      	mov	r0, r6
 800c930:	eb04 0903 	add.w	r9, r4, r3
 800c934:	f001 ff90 	bl	800e858 <_sbrk_r>
 800c938:	4581      	cmp	r9, r0
 800c93a:	d142      	bne.n	800c9c2 <_malloc_r+0xea>
 800c93c:	6821      	ldr	r1, [r4, #0]
 800c93e:	1a6d      	subs	r5, r5, r1
 800c940:	4629      	mov	r1, r5
 800c942:	4630      	mov	r0, r6
 800c944:	f7ff ffa6 	bl	800c894 <sbrk_aligned>
 800c948:	3001      	adds	r0, #1
 800c94a:	d03a      	beq.n	800c9c2 <_malloc_r+0xea>
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	442b      	add	r3, r5
 800c950:	6023      	str	r3, [r4, #0]
 800c952:	f8d8 3000 	ldr.w	r3, [r8]
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	bb62      	cbnz	r2, 800c9b4 <_malloc_r+0xdc>
 800c95a:	f8c8 7000 	str.w	r7, [r8]
 800c95e:	e00f      	b.n	800c980 <_malloc_r+0xa8>
 800c960:	6822      	ldr	r2, [r4, #0]
 800c962:	1b52      	subs	r2, r2, r5
 800c964:	d420      	bmi.n	800c9a8 <_malloc_r+0xd0>
 800c966:	2a0b      	cmp	r2, #11
 800c968:	d917      	bls.n	800c99a <_malloc_r+0xc2>
 800c96a:	1961      	adds	r1, r4, r5
 800c96c:	42a3      	cmp	r3, r4
 800c96e:	6025      	str	r5, [r4, #0]
 800c970:	bf18      	it	ne
 800c972:	6059      	strne	r1, [r3, #4]
 800c974:	6863      	ldr	r3, [r4, #4]
 800c976:	bf08      	it	eq
 800c978:	f8c8 1000 	streq.w	r1, [r8]
 800c97c:	5162      	str	r2, [r4, r5]
 800c97e:	604b      	str	r3, [r1, #4]
 800c980:	4630      	mov	r0, r6
 800c982:	f000 f82f 	bl	800c9e4 <__malloc_unlock>
 800c986:	f104 000b 	add.w	r0, r4, #11
 800c98a:	1d23      	adds	r3, r4, #4
 800c98c:	f020 0007 	bic.w	r0, r0, #7
 800c990:	1ac2      	subs	r2, r0, r3
 800c992:	bf1c      	itt	ne
 800c994:	1a1b      	subne	r3, r3, r0
 800c996:	50a3      	strne	r3, [r4, r2]
 800c998:	e7af      	b.n	800c8fa <_malloc_r+0x22>
 800c99a:	6862      	ldr	r2, [r4, #4]
 800c99c:	42a3      	cmp	r3, r4
 800c99e:	bf0c      	ite	eq
 800c9a0:	f8c8 2000 	streq.w	r2, [r8]
 800c9a4:	605a      	strne	r2, [r3, #4]
 800c9a6:	e7eb      	b.n	800c980 <_malloc_r+0xa8>
 800c9a8:	4623      	mov	r3, r4
 800c9aa:	6864      	ldr	r4, [r4, #4]
 800c9ac:	e7ae      	b.n	800c90c <_malloc_r+0x34>
 800c9ae:	463c      	mov	r4, r7
 800c9b0:	687f      	ldr	r7, [r7, #4]
 800c9b2:	e7b6      	b.n	800c922 <_malloc_r+0x4a>
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	42a3      	cmp	r3, r4
 800c9ba:	d1fb      	bne.n	800c9b4 <_malloc_r+0xdc>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	6053      	str	r3, [r2, #4]
 800c9c0:	e7de      	b.n	800c980 <_malloc_r+0xa8>
 800c9c2:	230c      	movs	r3, #12
 800c9c4:	6033      	str	r3, [r6, #0]
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	f000 f80c 	bl	800c9e4 <__malloc_unlock>
 800c9cc:	e794      	b.n	800c8f8 <_malloc_r+0x20>
 800c9ce:	6005      	str	r5, [r0, #0]
 800c9d0:	e7d6      	b.n	800c980 <_malloc_r+0xa8>
 800c9d2:	bf00      	nop
 800c9d4:	200008fc 	.word	0x200008fc

0800c9d8 <__malloc_lock>:
 800c9d8:	4801      	ldr	r0, [pc, #4]	@ (800c9e0 <__malloc_lock+0x8>)
 800c9da:	f7ff b8a8 	b.w	800bb2e <__retarget_lock_acquire_recursive>
 800c9de:	bf00      	nop
 800c9e0:	200008f4 	.word	0x200008f4

0800c9e4 <__malloc_unlock>:
 800c9e4:	4801      	ldr	r0, [pc, #4]	@ (800c9ec <__malloc_unlock+0x8>)
 800c9e6:	f7ff b8a3 	b.w	800bb30 <__retarget_lock_release_recursive>
 800c9ea:	bf00      	nop
 800c9ec:	200008f4 	.word	0x200008f4

0800c9f0 <_Balloc>:
 800c9f0:	b570      	push	{r4, r5, r6, lr}
 800c9f2:	69c6      	ldr	r6, [r0, #28]
 800c9f4:	4604      	mov	r4, r0
 800c9f6:	460d      	mov	r5, r1
 800c9f8:	b976      	cbnz	r6, 800ca18 <_Balloc+0x28>
 800c9fa:	2010      	movs	r0, #16
 800c9fc:	f7ff ff42 	bl	800c884 <malloc>
 800ca00:	4602      	mov	r2, r0
 800ca02:	61e0      	str	r0, [r4, #28]
 800ca04:	b920      	cbnz	r0, 800ca10 <_Balloc+0x20>
 800ca06:	4b18      	ldr	r3, [pc, #96]	@ (800ca68 <_Balloc+0x78>)
 800ca08:	4818      	ldr	r0, [pc, #96]	@ (800ca6c <_Balloc+0x7c>)
 800ca0a:	216b      	movs	r1, #107	@ 0x6b
 800ca0c:	f001 ff4c 	bl	800e8a8 <__assert_func>
 800ca10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca14:	6006      	str	r6, [r0, #0]
 800ca16:	60c6      	str	r6, [r0, #12]
 800ca18:	69e6      	ldr	r6, [r4, #28]
 800ca1a:	68f3      	ldr	r3, [r6, #12]
 800ca1c:	b183      	cbz	r3, 800ca40 <_Balloc+0x50>
 800ca1e:	69e3      	ldr	r3, [r4, #28]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca26:	b9b8      	cbnz	r0, 800ca58 <_Balloc+0x68>
 800ca28:	2101      	movs	r1, #1
 800ca2a:	fa01 f605 	lsl.w	r6, r1, r5
 800ca2e:	1d72      	adds	r2, r6, #5
 800ca30:	0092      	lsls	r2, r2, #2
 800ca32:	4620      	mov	r0, r4
 800ca34:	f001 ff56 	bl	800e8e4 <_calloc_r>
 800ca38:	b160      	cbz	r0, 800ca54 <_Balloc+0x64>
 800ca3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca3e:	e00e      	b.n	800ca5e <_Balloc+0x6e>
 800ca40:	2221      	movs	r2, #33	@ 0x21
 800ca42:	2104      	movs	r1, #4
 800ca44:	4620      	mov	r0, r4
 800ca46:	f001 ff4d 	bl	800e8e4 <_calloc_r>
 800ca4a:	69e3      	ldr	r3, [r4, #28]
 800ca4c:	60f0      	str	r0, [r6, #12]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d1e4      	bne.n	800ca1e <_Balloc+0x2e>
 800ca54:	2000      	movs	r0, #0
 800ca56:	bd70      	pop	{r4, r5, r6, pc}
 800ca58:	6802      	ldr	r2, [r0, #0]
 800ca5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca5e:	2300      	movs	r3, #0
 800ca60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca64:	e7f7      	b.n	800ca56 <_Balloc+0x66>
 800ca66:	bf00      	nop
 800ca68:	08011daa 	.word	0x08011daa
 800ca6c:	08011e2a 	.word	0x08011e2a

0800ca70 <_Bfree>:
 800ca70:	b570      	push	{r4, r5, r6, lr}
 800ca72:	69c6      	ldr	r6, [r0, #28]
 800ca74:	4605      	mov	r5, r0
 800ca76:	460c      	mov	r4, r1
 800ca78:	b976      	cbnz	r6, 800ca98 <_Bfree+0x28>
 800ca7a:	2010      	movs	r0, #16
 800ca7c:	f7ff ff02 	bl	800c884 <malloc>
 800ca80:	4602      	mov	r2, r0
 800ca82:	61e8      	str	r0, [r5, #28]
 800ca84:	b920      	cbnz	r0, 800ca90 <_Bfree+0x20>
 800ca86:	4b09      	ldr	r3, [pc, #36]	@ (800caac <_Bfree+0x3c>)
 800ca88:	4809      	ldr	r0, [pc, #36]	@ (800cab0 <_Bfree+0x40>)
 800ca8a:	218f      	movs	r1, #143	@ 0x8f
 800ca8c:	f001 ff0c 	bl	800e8a8 <__assert_func>
 800ca90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca94:	6006      	str	r6, [r0, #0]
 800ca96:	60c6      	str	r6, [r0, #12]
 800ca98:	b13c      	cbz	r4, 800caaa <_Bfree+0x3a>
 800ca9a:	69eb      	ldr	r3, [r5, #28]
 800ca9c:	6862      	ldr	r2, [r4, #4]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800caa4:	6021      	str	r1, [r4, #0]
 800caa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800caaa:	bd70      	pop	{r4, r5, r6, pc}
 800caac:	08011daa 	.word	0x08011daa
 800cab0:	08011e2a 	.word	0x08011e2a

0800cab4 <__multadd>:
 800cab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab8:	690d      	ldr	r5, [r1, #16]
 800caba:	4607      	mov	r7, r0
 800cabc:	460c      	mov	r4, r1
 800cabe:	461e      	mov	r6, r3
 800cac0:	f101 0c14 	add.w	ip, r1, #20
 800cac4:	2000      	movs	r0, #0
 800cac6:	f8dc 3000 	ldr.w	r3, [ip]
 800caca:	b299      	uxth	r1, r3
 800cacc:	fb02 6101 	mla	r1, r2, r1, r6
 800cad0:	0c1e      	lsrs	r6, r3, #16
 800cad2:	0c0b      	lsrs	r3, r1, #16
 800cad4:	fb02 3306 	mla	r3, r2, r6, r3
 800cad8:	b289      	uxth	r1, r1
 800cada:	3001      	adds	r0, #1
 800cadc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cae0:	4285      	cmp	r5, r0
 800cae2:	f84c 1b04 	str.w	r1, [ip], #4
 800cae6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800caea:	dcec      	bgt.n	800cac6 <__multadd+0x12>
 800caec:	b30e      	cbz	r6, 800cb32 <__multadd+0x7e>
 800caee:	68a3      	ldr	r3, [r4, #8]
 800caf0:	42ab      	cmp	r3, r5
 800caf2:	dc19      	bgt.n	800cb28 <__multadd+0x74>
 800caf4:	6861      	ldr	r1, [r4, #4]
 800caf6:	4638      	mov	r0, r7
 800caf8:	3101      	adds	r1, #1
 800cafa:	f7ff ff79 	bl	800c9f0 <_Balloc>
 800cafe:	4680      	mov	r8, r0
 800cb00:	b928      	cbnz	r0, 800cb0e <__multadd+0x5a>
 800cb02:	4602      	mov	r2, r0
 800cb04:	4b0c      	ldr	r3, [pc, #48]	@ (800cb38 <__multadd+0x84>)
 800cb06:	480d      	ldr	r0, [pc, #52]	@ (800cb3c <__multadd+0x88>)
 800cb08:	21ba      	movs	r1, #186	@ 0xba
 800cb0a:	f001 fecd 	bl	800e8a8 <__assert_func>
 800cb0e:	6922      	ldr	r2, [r4, #16]
 800cb10:	3202      	adds	r2, #2
 800cb12:	f104 010c 	add.w	r1, r4, #12
 800cb16:	0092      	lsls	r2, r2, #2
 800cb18:	300c      	adds	r0, #12
 800cb1a:	f001 fead 	bl	800e878 <memcpy>
 800cb1e:	4621      	mov	r1, r4
 800cb20:	4638      	mov	r0, r7
 800cb22:	f7ff ffa5 	bl	800ca70 <_Bfree>
 800cb26:	4644      	mov	r4, r8
 800cb28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb2c:	3501      	adds	r5, #1
 800cb2e:	615e      	str	r6, [r3, #20]
 800cb30:	6125      	str	r5, [r4, #16]
 800cb32:	4620      	mov	r0, r4
 800cb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb38:	08011e19 	.word	0x08011e19
 800cb3c:	08011e2a 	.word	0x08011e2a

0800cb40 <__s2b>:
 800cb40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb44:	460c      	mov	r4, r1
 800cb46:	4615      	mov	r5, r2
 800cb48:	461f      	mov	r7, r3
 800cb4a:	2209      	movs	r2, #9
 800cb4c:	3308      	adds	r3, #8
 800cb4e:	4606      	mov	r6, r0
 800cb50:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb54:	2100      	movs	r1, #0
 800cb56:	2201      	movs	r2, #1
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	db09      	blt.n	800cb70 <__s2b+0x30>
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f7ff ff47 	bl	800c9f0 <_Balloc>
 800cb62:	b940      	cbnz	r0, 800cb76 <__s2b+0x36>
 800cb64:	4602      	mov	r2, r0
 800cb66:	4b19      	ldr	r3, [pc, #100]	@ (800cbcc <__s2b+0x8c>)
 800cb68:	4819      	ldr	r0, [pc, #100]	@ (800cbd0 <__s2b+0x90>)
 800cb6a:	21d3      	movs	r1, #211	@ 0xd3
 800cb6c:	f001 fe9c 	bl	800e8a8 <__assert_func>
 800cb70:	0052      	lsls	r2, r2, #1
 800cb72:	3101      	adds	r1, #1
 800cb74:	e7f0      	b.n	800cb58 <__s2b+0x18>
 800cb76:	9b08      	ldr	r3, [sp, #32]
 800cb78:	6143      	str	r3, [r0, #20]
 800cb7a:	2d09      	cmp	r5, #9
 800cb7c:	f04f 0301 	mov.w	r3, #1
 800cb80:	6103      	str	r3, [r0, #16]
 800cb82:	dd16      	ble.n	800cbb2 <__s2b+0x72>
 800cb84:	f104 0909 	add.w	r9, r4, #9
 800cb88:	46c8      	mov	r8, r9
 800cb8a:	442c      	add	r4, r5
 800cb8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cb90:	4601      	mov	r1, r0
 800cb92:	3b30      	subs	r3, #48	@ 0x30
 800cb94:	220a      	movs	r2, #10
 800cb96:	4630      	mov	r0, r6
 800cb98:	f7ff ff8c 	bl	800cab4 <__multadd>
 800cb9c:	45a0      	cmp	r8, r4
 800cb9e:	d1f5      	bne.n	800cb8c <__s2b+0x4c>
 800cba0:	f1a5 0408 	sub.w	r4, r5, #8
 800cba4:	444c      	add	r4, r9
 800cba6:	1b2d      	subs	r5, r5, r4
 800cba8:	1963      	adds	r3, r4, r5
 800cbaa:	42bb      	cmp	r3, r7
 800cbac:	db04      	blt.n	800cbb8 <__s2b+0x78>
 800cbae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbb2:	340a      	adds	r4, #10
 800cbb4:	2509      	movs	r5, #9
 800cbb6:	e7f6      	b.n	800cba6 <__s2b+0x66>
 800cbb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cbbc:	4601      	mov	r1, r0
 800cbbe:	3b30      	subs	r3, #48	@ 0x30
 800cbc0:	220a      	movs	r2, #10
 800cbc2:	4630      	mov	r0, r6
 800cbc4:	f7ff ff76 	bl	800cab4 <__multadd>
 800cbc8:	e7ee      	b.n	800cba8 <__s2b+0x68>
 800cbca:	bf00      	nop
 800cbcc:	08011e19 	.word	0x08011e19
 800cbd0:	08011e2a 	.word	0x08011e2a

0800cbd4 <__hi0bits>:
 800cbd4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cbd8:	4603      	mov	r3, r0
 800cbda:	bf36      	itet	cc
 800cbdc:	0403      	lslcc	r3, r0, #16
 800cbde:	2000      	movcs	r0, #0
 800cbe0:	2010      	movcc	r0, #16
 800cbe2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cbe6:	bf3c      	itt	cc
 800cbe8:	021b      	lslcc	r3, r3, #8
 800cbea:	3008      	addcc	r0, #8
 800cbec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cbf0:	bf3c      	itt	cc
 800cbf2:	011b      	lslcc	r3, r3, #4
 800cbf4:	3004      	addcc	r0, #4
 800cbf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbfa:	bf3c      	itt	cc
 800cbfc:	009b      	lslcc	r3, r3, #2
 800cbfe:	3002      	addcc	r0, #2
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	db05      	blt.n	800cc10 <__hi0bits+0x3c>
 800cc04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc08:	f100 0001 	add.w	r0, r0, #1
 800cc0c:	bf08      	it	eq
 800cc0e:	2020      	moveq	r0, #32
 800cc10:	4770      	bx	lr

0800cc12 <__lo0bits>:
 800cc12:	6803      	ldr	r3, [r0, #0]
 800cc14:	4602      	mov	r2, r0
 800cc16:	f013 0007 	ands.w	r0, r3, #7
 800cc1a:	d00b      	beq.n	800cc34 <__lo0bits+0x22>
 800cc1c:	07d9      	lsls	r1, r3, #31
 800cc1e:	d421      	bmi.n	800cc64 <__lo0bits+0x52>
 800cc20:	0798      	lsls	r0, r3, #30
 800cc22:	bf49      	itett	mi
 800cc24:	085b      	lsrmi	r3, r3, #1
 800cc26:	089b      	lsrpl	r3, r3, #2
 800cc28:	2001      	movmi	r0, #1
 800cc2a:	6013      	strmi	r3, [r2, #0]
 800cc2c:	bf5c      	itt	pl
 800cc2e:	6013      	strpl	r3, [r2, #0]
 800cc30:	2002      	movpl	r0, #2
 800cc32:	4770      	bx	lr
 800cc34:	b299      	uxth	r1, r3
 800cc36:	b909      	cbnz	r1, 800cc3c <__lo0bits+0x2a>
 800cc38:	0c1b      	lsrs	r3, r3, #16
 800cc3a:	2010      	movs	r0, #16
 800cc3c:	b2d9      	uxtb	r1, r3
 800cc3e:	b909      	cbnz	r1, 800cc44 <__lo0bits+0x32>
 800cc40:	3008      	adds	r0, #8
 800cc42:	0a1b      	lsrs	r3, r3, #8
 800cc44:	0719      	lsls	r1, r3, #28
 800cc46:	bf04      	itt	eq
 800cc48:	091b      	lsreq	r3, r3, #4
 800cc4a:	3004      	addeq	r0, #4
 800cc4c:	0799      	lsls	r1, r3, #30
 800cc4e:	bf04      	itt	eq
 800cc50:	089b      	lsreq	r3, r3, #2
 800cc52:	3002      	addeq	r0, #2
 800cc54:	07d9      	lsls	r1, r3, #31
 800cc56:	d403      	bmi.n	800cc60 <__lo0bits+0x4e>
 800cc58:	085b      	lsrs	r3, r3, #1
 800cc5a:	f100 0001 	add.w	r0, r0, #1
 800cc5e:	d003      	beq.n	800cc68 <__lo0bits+0x56>
 800cc60:	6013      	str	r3, [r2, #0]
 800cc62:	4770      	bx	lr
 800cc64:	2000      	movs	r0, #0
 800cc66:	4770      	bx	lr
 800cc68:	2020      	movs	r0, #32
 800cc6a:	4770      	bx	lr

0800cc6c <__i2b>:
 800cc6c:	b510      	push	{r4, lr}
 800cc6e:	460c      	mov	r4, r1
 800cc70:	2101      	movs	r1, #1
 800cc72:	f7ff febd 	bl	800c9f0 <_Balloc>
 800cc76:	4602      	mov	r2, r0
 800cc78:	b928      	cbnz	r0, 800cc86 <__i2b+0x1a>
 800cc7a:	4b05      	ldr	r3, [pc, #20]	@ (800cc90 <__i2b+0x24>)
 800cc7c:	4805      	ldr	r0, [pc, #20]	@ (800cc94 <__i2b+0x28>)
 800cc7e:	f240 1145 	movw	r1, #325	@ 0x145
 800cc82:	f001 fe11 	bl	800e8a8 <__assert_func>
 800cc86:	2301      	movs	r3, #1
 800cc88:	6144      	str	r4, [r0, #20]
 800cc8a:	6103      	str	r3, [r0, #16]
 800cc8c:	bd10      	pop	{r4, pc}
 800cc8e:	bf00      	nop
 800cc90:	08011e19 	.word	0x08011e19
 800cc94:	08011e2a 	.word	0x08011e2a

0800cc98 <__multiply>:
 800cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	4617      	mov	r7, r2
 800cc9e:	690a      	ldr	r2, [r1, #16]
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	bfa8      	it	ge
 800cca6:	463b      	movge	r3, r7
 800cca8:	4689      	mov	r9, r1
 800ccaa:	bfa4      	itt	ge
 800ccac:	460f      	movge	r7, r1
 800ccae:	4699      	movge	r9, r3
 800ccb0:	693d      	ldr	r5, [r7, #16]
 800ccb2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	eb05 060a 	add.w	r6, r5, sl
 800ccbe:	42b3      	cmp	r3, r6
 800ccc0:	b085      	sub	sp, #20
 800ccc2:	bfb8      	it	lt
 800ccc4:	3101      	addlt	r1, #1
 800ccc6:	f7ff fe93 	bl	800c9f0 <_Balloc>
 800ccca:	b930      	cbnz	r0, 800ccda <__multiply+0x42>
 800cccc:	4602      	mov	r2, r0
 800ccce:	4b41      	ldr	r3, [pc, #260]	@ (800cdd4 <__multiply+0x13c>)
 800ccd0:	4841      	ldr	r0, [pc, #260]	@ (800cdd8 <__multiply+0x140>)
 800ccd2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ccd6:	f001 fde7 	bl	800e8a8 <__assert_func>
 800ccda:	f100 0414 	add.w	r4, r0, #20
 800ccde:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cce2:	4623      	mov	r3, r4
 800cce4:	2200      	movs	r2, #0
 800cce6:	4573      	cmp	r3, lr
 800cce8:	d320      	bcc.n	800cd2c <__multiply+0x94>
 800ccea:	f107 0814 	add.w	r8, r7, #20
 800ccee:	f109 0114 	add.w	r1, r9, #20
 800ccf2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ccf6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ccfa:	9302      	str	r3, [sp, #8]
 800ccfc:	1beb      	subs	r3, r5, r7
 800ccfe:	3b15      	subs	r3, #21
 800cd00:	f023 0303 	bic.w	r3, r3, #3
 800cd04:	3304      	adds	r3, #4
 800cd06:	3715      	adds	r7, #21
 800cd08:	42bd      	cmp	r5, r7
 800cd0a:	bf38      	it	cc
 800cd0c:	2304      	movcc	r3, #4
 800cd0e:	9301      	str	r3, [sp, #4]
 800cd10:	9b02      	ldr	r3, [sp, #8]
 800cd12:	9103      	str	r1, [sp, #12]
 800cd14:	428b      	cmp	r3, r1
 800cd16:	d80c      	bhi.n	800cd32 <__multiply+0x9a>
 800cd18:	2e00      	cmp	r6, #0
 800cd1a:	dd03      	ble.n	800cd24 <__multiply+0x8c>
 800cd1c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d055      	beq.n	800cdd0 <__multiply+0x138>
 800cd24:	6106      	str	r6, [r0, #16]
 800cd26:	b005      	add	sp, #20
 800cd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2c:	f843 2b04 	str.w	r2, [r3], #4
 800cd30:	e7d9      	b.n	800cce6 <__multiply+0x4e>
 800cd32:	f8b1 a000 	ldrh.w	sl, [r1]
 800cd36:	f1ba 0f00 	cmp.w	sl, #0
 800cd3a:	d01f      	beq.n	800cd7c <__multiply+0xe4>
 800cd3c:	46c4      	mov	ip, r8
 800cd3e:	46a1      	mov	r9, r4
 800cd40:	2700      	movs	r7, #0
 800cd42:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cd46:	f8d9 3000 	ldr.w	r3, [r9]
 800cd4a:	fa1f fb82 	uxth.w	fp, r2
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd54:	443b      	add	r3, r7
 800cd56:	f8d9 7000 	ldr.w	r7, [r9]
 800cd5a:	0c12      	lsrs	r2, r2, #16
 800cd5c:	0c3f      	lsrs	r7, r7, #16
 800cd5e:	fb0a 7202 	mla	r2, sl, r2, r7
 800cd62:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd6c:	4565      	cmp	r5, ip
 800cd6e:	f849 3b04 	str.w	r3, [r9], #4
 800cd72:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cd76:	d8e4      	bhi.n	800cd42 <__multiply+0xaa>
 800cd78:	9b01      	ldr	r3, [sp, #4]
 800cd7a:	50e7      	str	r7, [r4, r3]
 800cd7c:	9b03      	ldr	r3, [sp, #12]
 800cd7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cd82:	3104      	adds	r1, #4
 800cd84:	f1b9 0f00 	cmp.w	r9, #0
 800cd88:	d020      	beq.n	800cdcc <__multiply+0x134>
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	4647      	mov	r7, r8
 800cd8e:	46a4      	mov	ip, r4
 800cd90:	f04f 0a00 	mov.w	sl, #0
 800cd94:	f8b7 b000 	ldrh.w	fp, [r7]
 800cd98:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cd9c:	fb09 220b 	mla	r2, r9, fp, r2
 800cda0:	4452      	add	r2, sl
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cda8:	f84c 3b04 	str.w	r3, [ip], #4
 800cdac:	f857 3b04 	ldr.w	r3, [r7], #4
 800cdb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdb4:	f8bc 3000 	ldrh.w	r3, [ip]
 800cdb8:	fb09 330a 	mla	r3, r9, sl, r3
 800cdbc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cdc0:	42bd      	cmp	r5, r7
 800cdc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdc6:	d8e5      	bhi.n	800cd94 <__multiply+0xfc>
 800cdc8:	9a01      	ldr	r2, [sp, #4]
 800cdca:	50a3      	str	r3, [r4, r2]
 800cdcc:	3404      	adds	r4, #4
 800cdce:	e79f      	b.n	800cd10 <__multiply+0x78>
 800cdd0:	3e01      	subs	r6, #1
 800cdd2:	e7a1      	b.n	800cd18 <__multiply+0x80>
 800cdd4:	08011e19 	.word	0x08011e19
 800cdd8:	08011e2a 	.word	0x08011e2a

0800cddc <__pow5mult>:
 800cddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cde0:	4615      	mov	r5, r2
 800cde2:	f012 0203 	ands.w	r2, r2, #3
 800cde6:	4607      	mov	r7, r0
 800cde8:	460e      	mov	r6, r1
 800cdea:	d007      	beq.n	800cdfc <__pow5mult+0x20>
 800cdec:	4c25      	ldr	r4, [pc, #148]	@ (800ce84 <__pow5mult+0xa8>)
 800cdee:	3a01      	subs	r2, #1
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cdf6:	f7ff fe5d 	bl	800cab4 <__multadd>
 800cdfa:	4606      	mov	r6, r0
 800cdfc:	10ad      	asrs	r5, r5, #2
 800cdfe:	d03d      	beq.n	800ce7c <__pow5mult+0xa0>
 800ce00:	69fc      	ldr	r4, [r7, #28]
 800ce02:	b97c      	cbnz	r4, 800ce24 <__pow5mult+0x48>
 800ce04:	2010      	movs	r0, #16
 800ce06:	f7ff fd3d 	bl	800c884 <malloc>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	61f8      	str	r0, [r7, #28]
 800ce0e:	b928      	cbnz	r0, 800ce1c <__pow5mult+0x40>
 800ce10:	4b1d      	ldr	r3, [pc, #116]	@ (800ce88 <__pow5mult+0xac>)
 800ce12:	481e      	ldr	r0, [pc, #120]	@ (800ce8c <__pow5mult+0xb0>)
 800ce14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ce18:	f001 fd46 	bl	800e8a8 <__assert_func>
 800ce1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce20:	6004      	str	r4, [r0, #0]
 800ce22:	60c4      	str	r4, [r0, #12]
 800ce24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ce28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce2c:	b94c      	cbnz	r4, 800ce42 <__pow5mult+0x66>
 800ce2e:	f240 2171 	movw	r1, #625	@ 0x271
 800ce32:	4638      	mov	r0, r7
 800ce34:	f7ff ff1a 	bl	800cc6c <__i2b>
 800ce38:	2300      	movs	r3, #0
 800ce3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce3e:	4604      	mov	r4, r0
 800ce40:	6003      	str	r3, [r0, #0]
 800ce42:	f04f 0900 	mov.w	r9, #0
 800ce46:	07eb      	lsls	r3, r5, #31
 800ce48:	d50a      	bpl.n	800ce60 <__pow5mult+0x84>
 800ce4a:	4631      	mov	r1, r6
 800ce4c:	4622      	mov	r2, r4
 800ce4e:	4638      	mov	r0, r7
 800ce50:	f7ff ff22 	bl	800cc98 <__multiply>
 800ce54:	4631      	mov	r1, r6
 800ce56:	4680      	mov	r8, r0
 800ce58:	4638      	mov	r0, r7
 800ce5a:	f7ff fe09 	bl	800ca70 <_Bfree>
 800ce5e:	4646      	mov	r6, r8
 800ce60:	106d      	asrs	r5, r5, #1
 800ce62:	d00b      	beq.n	800ce7c <__pow5mult+0xa0>
 800ce64:	6820      	ldr	r0, [r4, #0]
 800ce66:	b938      	cbnz	r0, 800ce78 <__pow5mult+0x9c>
 800ce68:	4622      	mov	r2, r4
 800ce6a:	4621      	mov	r1, r4
 800ce6c:	4638      	mov	r0, r7
 800ce6e:	f7ff ff13 	bl	800cc98 <__multiply>
 800ce72:	6020      	str	r0, [r4, #0]
 800ce74:	f8c0 9000 	str.w	r9, [r0]
 800ce78:	4604      	mov	r4, r0
 800ce7a:	e7e4      	b.n	800ce46 <__pow5mult+0x6a>
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce82:	bf00      	nop
 800ce84:	08011f3c 	.word	0x08011f3c
 800ce88:	08011daa 	.word	0x08011daa
 800ce8c:	08011e2a 	.word	0x08011e2a

0800ce90 <__lshift>:
 800ce90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce94:	460c      	mov	r4, r1
 800ce96:	6849      	ldr	r1, [r1, #4]
 800ce98:	6923      	ldr	r3, [r4, #16]
 800ce9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce9e:	68a3      	ldr	r3, [r4, #8]
 800cea0:	4607      	mov	r7, r0
 800cea2:	4691      	mov	r9, r2
 800cea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cea8:	f108 0601 	add.w	r6, r8, #1
 800ceac:	42b3      	cmp	r3, r6
 800ceae:	db0b      	blt.n	800cec8 <__lshift+0x38>
 800ceb0:	4638      	mov	r0, r7
 800ceb2:	f7ff fd9d 	bl	800c9f0 <_Balloc>
 800ceb6:	4605      	mov	r5, r0
 800ceb8:	b948      	cbnz	r0, 800cece <__lshift+0x3e>
 800ceba:	4602      	mov	r2, r0
 800cebc:	4b28      	ldr	r3, [pc, #160]	@ (800cf60 <__lshift+0xd0>)
 800cebe:	4829      	ldr	r0, [pc, #164]	@ (800cf64 <__lshift+0xd4>)
 800cec0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cec4:	f001 fcf0 	bl	800e8a8 <__assert_func>
 800cec8:	3101      	adds	r1, #1
 800ceca:	005b      	lsls	r3, r3, #1
 800cecc:	e7ee      	b.n	800ceac <__lshift+0x1c>
 800cece:	2300      	movs	r3, #0
 800ced0:	f100 0114 	add.w	r1, r0, #20
 800ced4:	f100 0210 	add.w	r2, r0, #16
 800ced8:	4618      	mov	r0, r3
 800ceda:	4553      	cmp	r3, sl
 800cedc:	db33      	blt.n	800cf46 <__lshift+0xb6>
 800cede:	6920      	ldr	r0, [r4, #16]
 800cee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cee4:	f104 0314 	add.w	r3, r4, #20
 800cee8:	f019 091f 	ands.w	r9, r9, #31
 800ceec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cef0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cef4:	d02b      	beq.n	800cf4e <__lshift+0xbe>
 800cef6:	f1c9 0e20 	rsb	lr, r9, #32
 800cefa:	468a      	mov	sl, r1
 800cefc:	2200      	movs	r2, #0
 800cefe:	6818      	ldr	r0, [r3, #0]
 800cf00:	fa00 f009 	lsl.w	r0, r0, r9
 800cf04:	4310      	orrs	r0, r2
 800cf06:	f84a 0b04 	str.w	r0, [sl], #4
 800cf0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf0e:	459c      	cmp	ip, r3
 800cf10:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf14:	d8f3      	bhi.n	800cefe <__lshift+0x6e>
 800cf16:	ebac 0304 	sub.w	r3, ip, r4
 800cf1a:	3b15      	subs	r3, #21
 800cf1c:	f023 0303 	bic.w	r3, r3, #3
 800cf20:	3304      	adds	r3, #4
 800cf22:	f104 0015 	add.w	r0, r4, #21
 800cf26:	4560      	cmp	r0, ip
 800cf28:	bf88      	it	hi
 800cf2a:	2304      	movhi	r3, #4
 800cf2c:	50ca      	str	r2, [r1, r3]
 800cf2e:	b10a      	cbz	r2, 800cf34 <__lshift+0xa4>
 800cf30:	f108 0602 	add.w	r6, r8, #2
 800cf34:	3e01      	subs	r6, #1
 800cf36:	4638      	mov	r0, r7
 800cf38:	612e      	str	r6, [r5, #16]
 800cf3a:	4621      	mov	r1, r4
 800cf3c:	f7ff fd98 	bl	800ca70 <_Bfree>
 800cf40:	4628      	mov	r0, r5
 800cf42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf46:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	e7c5      	b.n	800ceda <__lshift+0x4a>
 800cf4e:	3904      	subs	r1, #4
 800cf50:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf54:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf58:	459c      	cmp	ip, r3
 800cf5a:	d8f9      	bhi.n	800cf50 <__lshift+0xc0>
 800cf5c:	e7ea      	b.n	800cf34 <__lshift+0xa4>
 800cf5e:	bf00      	nop
 800cf60:	08011e19 	.word	0x08011e19
 800cf64:	08011e2a 	.word	0x08011e2a

0800cf68 <__mcmp>:
 800cf68:	690a      	ldr	r2, [r1, #16]
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	6900      	ldr	r0, [r0, #16]
 800cf6e:	1a80      	subs	r0, r0, r2
 800cf70:	b530      	push	{r4, r5, lr}
 800cf72:	d10e      	bne.n	800cf92 <__mcmp+0x2a>
 800cf74:	3314      	adds	r3, #20
 800cf76:	3114      	adds	r1, #20
 800cf78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf88:	4295      	cmp	r5, r2
 800cf8a:	d003      	beq.n	800cf94 <__mcmp+0x2c>
 800cf8c:	d205      	bcs.n	800cf9a <__mcmp+0x32>
 800cf8e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf92:	bd30      	pop	{r4, r5, pc}
 800cf94:	42a3      	cmp	r3, r4
 800cf96:	d3f3      	bcc.n	800cf80 <__mcmp+0x18>
 800cf98:	e7fb      	b.n	800cf92 <__mcmp+0x2a>
 800cf9a:	2001      	movs	r0, #1
 800cf9c:	e7f9      	b.n	800cf92 <__mcmp+0x2a>
	...

0800cfa0 <__mdiff>:
 800cfa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa4:	4689      	mov	r9, r1
 800cfa6:	4606      	mov	r6, r0
 800cfa8:	4611      	mov	r1, r2
 800cfaa:	4648      	mov	r0, r9
 800cfac:	4614      	mov	r4, r2
 800cfae:	f7ff ffdb 	bl	800cf68 <__mcmp>
 800cfb2:	1e05      	subs	r5, r0, #0
 800cfb4:	d112      	bne.n	800cfdc <__mdiff+0x3c>
 800cfb6:	4629      	mov	r1, r5
 800cfb8:	4630      	mov	r0, r6
 800cfba:	f7ff fd19 	bl	800c9f0 <_Balloc>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	b928      	cbnz	r0, 800cfce <__mdiff+0x2e>
 800cfc2:	4b3f      	ldr	r3, [pc, #252]	@ (800d0c0 <__mdiff+0x120>)
 800cfc4:	f240 2137 	movw	r1, #567	@ 0x237
 800cfc8:	483e      	ldr	r0, [pc, #248]	@ (800d0c4 <__mdiff+0x124>)
 800cfca:	f001 fc6d 	bl	800e8a8 <__assert_func>
 800cfce:	2301      	movs	r3, #1
 800cfd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cfd4:	4610      	mov	r0, r2
 800cfd6:	b003      	add	sp, #12
 800cfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfdc:	bfbc      	itt	lt
 800cfde:	464b      	movlt	r3, r9
 800cfe0:	46a1      	movlt	r9, r4
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cfe8:	bfba      	itte	lt
 800cfea:	461c      	movlt	r4, r3
 800cfec:	2501      	movlt	r5, #1
 800cfee:	2500      	movge	r5, #0
 800cff0:	f7ff fcfe 	bl	800c9f0 <_Balloc>
 800cff4:	4602      	mov	r2, r0
 800cff6:	b918      	cbnz	r0, 800d000 <__mdiff+0x60>
 800cff8:	4b31      	ldr	r3, [pc, #196]	@ (800d0c0 <__mdiff+0x120>)
 800cffa:	f240 2145 	movw	r1, #581	@ 0x245
 800cffe:	e7e3      	b.n	800cfc8 <__mdiff+0x28>
 800d000:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d004:	6926      	ldr	r6, [r4, #16]
 800d006:	60c5      	str	r5, [r0, #12]
 800d008:	f109 0310 	add.w	r3, r9, #16
 800d00c:	f109 0514 	add.w	r5, r9, #20
 800d010:	f104 0e14 	add.w	lr, r4, #20
 800d014:	f100 0b14 	add.w	fp, r0, #20
 800d018:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d01c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d020:	9301      	str	r3, [sp, #4]
 800d022:	46d9      	mov	r9, fp
 800d024:	f04f 0c00 	mov.w	ip, #0
 800d028:	9b01      	ldr	r3, [sp, #4]
 800d02a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d02e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d032:	9301      	str	r3, [sp, #4]
 800d034:	fa1f f38a 	uxth.w	r3, sl
 800d038:	4619      	mov	r1, r3
 800d03a:	b283      	uxth	r3, r0
 800d03c:	1acb      	subs	r3, r1, r3
 800d03e:	0c00      	lsrs	r0, r0, #16
 800d040:	4463      	add	r3, ip
 800d042:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d046:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d050:	4576      	cmp	r6, lr
 800d052:	f849 3b04 	str.w	r3, [r9], #4
 800d056:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d05a:	d8e5      	bhi.n	800d028 <__mdiff+0x88>
 800d05c:	1b33      	subs	r3, r6, r4
 800d05e:	3b15      	subs	r3, #21
 800d060:	f023 0303 	bic.w	r3, r3, #3
 800d064:	3415      	adds	r4, #21
 800d066:	3304      	adds	r3, #4
 800d068:	42a6      	cmp	r6, r4
 800d06a:	bf38      	it	cc
 800d06c:	2304      	movcc	r3, #4
 800d06e:	441d      	add	r5, r3
 800d070:	445b      	add	r3, fp
 800d072:	461e      	mov	r6, r3
 800d074:	462c      	mov	r4, r5
 800d076:	4544      	cmp	r4, r8
 800d078:	d30e      	bcc.n	800d098 <__mdiff+0xf8>
 800d07a:	f108 0103 	add.w	r1, r8, #3
 800d07e:	1b49      	subs	r1, r1, r5
 800d080:	f021 0103 	bic.w	r1, r1, #3
 800d084:	3d03      	subs	r5, #3
 800d086:	45a8      	cmp	r8, r5
 800d088:	bf38      	it	cc
 800d08a:	2100      	movcc	r1, #0
 800d08c:	440b      	add	r3, r1
 800d08e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d092:	b191      	cbz	r1, 800d0ba <__mdiff+0x11a>
 800d094:	6117      	str	r7, [r2, #16]
 800d096:	e79d      	b.n	800cfd4 <__mdiff+0x34>
 800d098:	f854 1b04 	ldr.w	r1, [r4], #4
 800d09c:	46e6      	mov	lr, ip
 800d09e:	0c08      	lsrs	r0, r1, #16
 800d0a0:	fa1c fc81 	uxtah	ip, ip, r1
 800d0a4:	4471      	add	r1, lr
 800d0a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d0aa:	b289      	uxth	r1, r1
 800d0ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d0b0:	f846 1b04 	str.w	r1, [r6], #4
 800d0b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0b8:	e7dd      	b.n	800d076 <__mdiff+0xd6>
 800d0ba:	3f01      	subs	r7, #1
 800d0bc:	e7e7      	b.n	800d08e <__mdiff+0xee>
 800d0be:	bf00      	nop
 800d0c0:	08011e19 	.word	0x08011e19
 800d0c4:	08011e2a 	.word	0x08011e2a

0800d0c8 <__ulp>:
 800d0c8:	b082      	sub	sp, #8
 800d0ca:	ed8d 0b00 	vstr	d0, [sp]
 800d0ce:	9a01      	ldr	r2, [sp, #4]
 800d0d0:	4b0f      	ldr	r3, [pc, #60]	@ (800d110 <__ulp+0x48>)
 800d0d2:	4013      	ands	r3, r2
 800d0d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	dc08      	bgt.n	800d0ee <__ulp+0x26>
 800d0dc:	425b      	negs	r3, r3
 800d0de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d0e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d0e6:	da04      	bge.n	800d0f2 <__ulp+0x2a>
 800d0e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d0ec:	4113      	asrs	r3, r2
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	e008      	b.n	800d104 <__ulp+0x3c>
 800d0f2:	f1a2 0314 	sub.w	r3, r2, #20
 800d0f6:	2b1e      	cmp	r3, #30
 800d0f8:	bfda      	itte	le
 800d0fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d0fe:	40da      	lsrle	r2, r3
 800d100:	2201      	movgt	r2, #1
 800d102:	2300      	movs	r3, #0
 800d104:	4619      	mov	r1, r3
 800d106:	4610      	mov	r0, r2
 800d108:	ec41 0b10 	vmov	d0, r0, r1
 800d10c:	b002      	add	sp, #8
 800d10e:	4770      	bx	lr
 800d110:	7ff00000 	.word	0x7ff00000

0800d114 <__b2d>:
 800d114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d118:	6906      	ldr	r6, [r0, #16]
 800d11a:	f100 0814 	add.w	r8, r0, #20
 800d11e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d122:	1f37      	subs	r7, r6, #4
 800d124:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d128:	4610      	mov	r0, r2
 800d12a:	f7ff fd53 	bl	800cbd4 <__hi0bits>
 800d12e:	f1c0 0320 	rsb	r3, r0, #32
 800d132:	280a      	cmp	r0, #10
 800d134:	600b      	str	r3, [r1, #0]
 800d136:	491b      	ldr	r1, [pc, #108]	@ (800d1a4 <__b2d+0x90>)
 800d138:	dc15      	bgt.n	800d166 <__b2d+0x52>
 800d13a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d13e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d142:	45b8      	cmp	r8, r7
 800d144:	ea43 0501 	orr.w	r5, r3, r1
 800d148:	bf34      	ite	cc
 800d14a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d14e:	2300      	movcs	r3, #0
 800d150:	3015      	adds	r0, #21
 800d152:	fa02 f000 	lsl.w	r0, r2, r0
 800d156:	fa23 f30c 	lsr.w	r3, r3, ip
 800d15a:	4303      	orrs	r3, r0
 800d15c:	461c      	mov	r4, r3
 800d15e:	ec45 4b10 	vmov	d0, r4, r5
 800d162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d166:	45b8      	cmp	r8, r7
 800d168:	bf3a      	itte	cc
 800d16a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d16e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d172:	2300      	movcs	r3, #0
 800d174:	380b      	subs	r0, #11
 800d176:	d012      	beq.n	800d19e <__b2d+0x8a>
 800d178:	f1c0 0120 	rsb	r1, r0, #32
 800d17c:	fa23 f401 	lsr.w	r4, r3, r1
 800d180:	4082      	lsls	r2, r0
 800d182:	4322      	orrs	r2, r4
 800d184:	4547      	cmp	r7, r8
 800d186:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d18a:	bf8c      	ite	hi
 800d18c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d190:	2200      	movls	r2, #0
 800d192:	4083      	lsls	r3, r0
 800d194:	40ca      	lsrs	r2, r1
 800d196:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d19a:	4313      	orrs	r3, r2
 800d19c:	e7de      	b.n	800d15c <__b2d+0x48>
 800d19e:	ea42 0501 	orr.w	r5, r2, r1
 800d1a2:	e7db      	b.n	800d15c <__b2d+0x48>
 800d1a4:	3ff00000 	.word	0x3ff00000

0800d1a8 <__d2b>:
 800d1a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1ac:	460f      	mov	r7, r1
 800d1ae:	2101      	movs	r1, #1
 800d1b0:	ec59 8b10 	vmov	r8, r9, d0
 800d1b4:	4616      	mov	r6, r2
 800d1b6:	f7ff fc1b 	bl	800c9f0 <_Balloc>
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	b930      	cbnz	r0, 800d1cc <__d2b+0x24>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	4b23      	ldr	r3, [pc, #140]	@ (800d250 <__d2b+0xa8>)
 800d1c2:	4824      	ldr	r0, [pc, #144]	@ (800d254 <__d2b+0xac>)
 800d1c4:	f240 310f 	movw	r1, #783	@ 0x30f
 800d1c8:	f001 fb6e 	bl	800e8a8 <__assert_func>
 800d1cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d1d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1d4:	b10d      	cbz	r5, 800d1da <__d2b+0x32>
 800d1d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1da:	9301      	str	r3, [sp, #4]
 800d1dc:	f1b8 0300 	subs.w	r3, r8, #0
 800d1e0:	d023      	beq.n	800d22a <__d2b+0x82>
 800d1e2:	4668      	mov	r0, sp
 800d1e4:	9300      	str	r3, [sp, #0]
 800d1e6:	f7ff fd14 	bl	800cc12 <__lo0bits>
 800d1ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d1ee:	b1d0      	cbz	r0, 800d226 <__d2b+0x7e>
 800d1f0:	f1c0 0320 	rsb	r3, r0, #32
 800d1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1f8:	430b      	orrs	r3, r1
 800d1fa:	40c2      	lsrs	r2, r0
 800d1fc:	6163      	str	r3, [r4, #20]
 800d1fe:	9201      	str	r2, [sp, #4]
 800d200:	9b01      	ldr	r3, [sp, #4]
 800d202:	61a3      	str	r3, [r4, #24]
 800d204:	2b00      	cmp	r3, #0
 800d206:	bf0c      	ite	eq
 800d208:	2201      	moveq	r2, #1
 800d20a:	2202      	movne	r2, #2
 800d20c:	6122      	str	r2, [r4, #16]
 800d20e:	b1a5      	cbz	r5, 800d23a <__d2b+0x92>
 800d210:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d214:	4405      	add	r5, r0
 800d216:	603d      	str	r5, [r7, #0]
 800d218:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d21c:	6030      	str	r0, [r6, #0]
 800d21e:	4620      	mov	r0, r4
 800d220:	b003      	add	sp, #12
 800d222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d226:	6161      	str	r1, [r4, #20]
 800d228:	e7ea      	b.n	800d200 <__d2b+0x58>
 800d22a:	a801      	add	r0, sp, #4
 800d22c:	f7ff fcf1 	bl	800cc12 <__lo0bits>
 800d230:	9b01      	ldr	r3, [sp, #4]
 800d232:	6163      	str	r3, [r4, #20]
 800d234:	3020      	adds	r0, #32
 800d236:	2201      	movs	r2, #1
 800d238:	e7e8      	b.n	800d20c <__d2b+0x64>
 800d23a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d23e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d242:	6038      	str	r0, [r7, #0]
 800d244:	6918      	ldr	r0, [r3, #16]
 800d246:	f7ff fcc5 	bl	800cbd4 <__hi0bits>
 800d24a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d24e:	e7e5      	b.n	800d21c <__d2b+0x74>
 800d250:	08011e19 	.word	0x08011e19
 800d254:	08011e2a 	.word	0x08011e2a

0800d258 <__ratio>:
 800d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25c:	b085      	sub	sp, #20
 800d25e:	e9cd 1000 	strd	r1, r0, [sp]
 800d262:	a902      	add	r1, sp, #8
 800d264:	f7ff ff56 	bl	800d114 <__b2d>
 800d268:	9800      	ldr	r0, [sp, #0]
 800d26a:	a903      	add	r1, sp, #12
 800d26c:	ec55 4b10 	vmov	r4, r5, d0
 800d270:	f7ff ff50 	bl	800d114 <__b2d>
 800d274:	9b01      	ldr	r3, [sp, #4]
 800d276:	6919      	ldr	r1, [r3, #16]
 800d278:	9b00      	ldr	r3, [sp, #0]
 800d27a:	691b      	ldr	r3, [r3, #16]
 800d27c:	1ac9      	subs	r1, r1, r3
 800d27e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d282:	1a9b      	subs	r3, r3, r2
 800d284:	ec5b ab10 	vmov	sl, fp, d0
 800d288:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	bfce      	itee	gt
 800d290:	462a      	movgt	r2, r5
 800d292:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d296:	465a      	movle	r2, fp
 800d298:	462f      	mov	r7, r5
 800d29a:	46d9      	mov	r9, fp
 800d29c:	bfcc      	ite	gt
 800d29e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d2a2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d2a6:	464b      	mov	r3, r9
 800d2a8:	4652      	mov	r2, sl
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	4639      	mov	r1, r7
 800d2ae:	f7f3 fad5 	bl	800085c <__aeabi_ddiv>
 800d2b2:	ec41 0b10 	vmov	d0, r0, r1
 800d2b6:	b005      	add	sp, #20
 800d2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d2bc <__copybits>:
 800d2bc:	3901      	subs	r1, #1
 800d2be:	b570      	push	{r4, r5, r6, lr}
 800d2c0:	1149      	asrs	r1, r1, #5
 800d2c2:	6914      	ldr	r4, [r2, #16]
 800d2c4:	3101      	adds	r1, #1
 800d2c6:	f102 0314 	add.w	r3, r2, #20
 800d2ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d2ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d2d2:	1f05      	subs	r5, r0, #4
 800d2d4:	42a3      	cmp	r3, r4
 800d2d6:	d30c      	bcc.n	800d2f2 <__copybits+0x36>
 800d2d8:	1aa3      	subs	r3, r4, r2
 800d2da:	3b11      	subs	r3, #17
 800d2dc:	f023 0303 	bic.w	r3, r3, #3
 800d2e0:	3211      	adds	r2, #17
 800d2e2:	42a2      	cmp	r2, r4
 800d2e4:	bf88      	it	hi
 800d2e6:	2300      	movhi	r3, #0
 800d2e8:	4418      	add	r0, r3
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	4288      	cmp	r0, r1
 800d2ee:	d305      	bcc.n	800d2fc <__copybits+0x40>
 800d2f0:	bd70      	pop	{r4, r5, r6, pc}
 800d2f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d2f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d2fa:	e7eb      	b.n	800d2d4 <__copybits+0x18>
 800d2fc:	f840 3b04 	str.w	r3, [r0], #4
 800d300:	e7f4      	b.n	800d2ec <__copybits+0x30>

0800d302 <__any_on>:
 800d302:	f100 0214 	add.w	r2, r0, #20
 800d306:	6900      	ldr	r0, [r0, #16]
 800d308:	114b      	asrs	r3, r1, #5
 800d30a:	4298      	cmp	r0, r3
 800d30c:	b510      	push	{r4, lr}
 800d30e:	db11      	blt.n	800d334 <__any_on+0x32>
 800d310:	dd0a      	ble.n	800d328 <__any_on+0x26>
 800d312:	f011 011f 	ands.w	r1, r1, #31
 800d316:	d007      	beq.n	800d328 <__any_on+0x26>
 800d318:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d31c:	fa24 f001 	lsr.w	r0, r4, r1
 800d320:	fa00 f101 	lsl.w	r1, r0, r1
 800d324:	428c      	cmp	r4, r1
 800d326:	d10b      	bne.n	800d340 <__any_on+0x3e>
 800d328:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d803      	bhi.n	800d338 <__any_on+0x36>
 800d330:	2000      	movs	r0, #0
 800d332:	bd10      	pop	{r4, pc}
 800d334:	4603      	mov	r3, r0
 800d336:	e7f7      	b.n	800d328 <__any_on+0x26>
 800d338:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d33c:	2900      	cmp	r1, #0
 800d33e:	d0f5      	beq.n	800d32c <__any_on+0x2a>
 800d340:	2001      	movs	r0, #1
 800d342:	e7f6      	b.n	800d332 <__any_on+0x30>

0800d344 <sulp>:
 800d344:	b570      	push	{r4, r5, r6, lr}
 800d346:	4604      	mov	r4, r0
 800d348:	460d      	mov	r5, r1
 800d34a:	ec45 4b10 	vmov	d0, r4, r5
 800d34e:	4616      	mov	r6, r2
 800d350:	f7ff feba 	bl	800d0c8 <__ulp>
 800d354:	ec51 0b10 	vmov	r0, r1, d0
 800d358:	b17e      	cbz	r6, 800d37a <sulp+0x36>
 800d35a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d35e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d362:	2b00      	cmp	r3, #0
 800d364:	dd09      	ble.n	800d37a <sulp+0x36>
 800d366:	051b      	lsls	r3, r3, #20
 800d368:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d36c:	2400      	movs	r4, #0
 800d36e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d372:	4622      	mov	r2, r4
 800d374:	462b      	mov	r3, r5
 800d376:	f7f3 f947 	bl	8000608 <__aeabi_dmul>
 800d37a:	ec41 0b10 	vmov	d0, r0, r1
 800d37e:	bd70      	pop	{r4, r5, r6, pc}

0800d380 <_strtod_l>:
 800d380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d384:	b09f      	sub	sp, #124	@ 0x7c
 800d386:	460c      	mov	r4, r1
 800d388:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d38a:	2200      	movs	r2, #0
 800d38c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d38e:	9005      	str	r0, [sp, #20]
 800d390:	f04f 0a00 	mov.w	sl, #0
 800d394:	f04f 0b00 	mov.w	fp, #0
 800d398:	460a      	mov	r2, r1
 800d39a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d39c:	7811      	ldrb	r1, [r2, #0]
 800d39e:	292b      	cmp	r1, #43	@ 0x2b
 800d3a0:	d04a      	beq.n	800d438 <_strtod_l+0xb8>
 800d3a2:	d838      	bhi.n	800d416 <_strtod_l+0x96>
 800d3a4:	290d      	cmp	r1, #13
 800d3a6:	d832      	bhi.n	800d40e <_strtod_l+0x8e>
 800d3a8:	2908      	cmp	r1, #8
 800d3aa:	d832      	bhi.n	800d412 <_strtod_l+0x92>
 800d3ac:	2900      	cmp	r1, #0
 800d3ae:	d03b      	beq.n	800d428 <_strtod_l+0xa8>
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	920e      	str	r2, [sp, #56]	@ 0x38
 800d3b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d3b6:	782a      	ldrb	r2, [r5, #0]
 800d3b8:	2a30      	cmp	r2, #48	@ 0x30
 800d3ba:	f040 80b2 	bne.w	800d522 <_strtod_l+0x1a2>
 800d3be:	786a      	ldrb	r2, [r5, #1]
 800d3c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d3c4:	2a58      	cmp	r2, #88	@ 0x58
 800d3c6:	d16e      	bne.n	800d4a6 <_strtod_l+0x126>
 800d3c8:	9302      	str	r3, [sp, #8]
 800d3ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3cc:	9301      	str	r3, [sp, #4]
 800d3ce:	ab1a      	add	r3, sp, #104	@ 0x68
 800d3d0:	9300      	str	r3, [sp, #0]
 800d3d2:	4a8f      	ldr	r2, [pc, #572]	@ (800d610 <_strtod_l+0x290>)
 800d3d4:	9805      	ldr	r0, [sp, #20]
 800d3d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d3d8:	a919      	add	r1, sp, #100	@ 0x64
 800d3da:	f001 faff 	bl	800e9dc <__gethex>
 800d3de:	f010 060f 	ands.w	r6, r0, #15
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	d005      	beq.n	800d3f2 <_strtod_l+0x72>
 800d3e6:	2e06      	cmp	r6, #6
 800d3e8:	d128      	bne.n	800d43c <_strtod_l+0xbc>
 800d3ea:	3501      	adds	r5, #1
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800d3f0:	930e      	str	r3, [sp, #56]	@ 0x38
 800d3f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f040 858e 	bne.w	800df16 <_strtod_l+0xb96>
 800d3fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3fc:	b1cb      	cbz	r3, 800d432 <_strtod_l+0xb2>
 800d3fe:	4652      	mov	r2, sl
 800d400:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d404:	ec43 2b10 	vmov	d0, r2, r3
 800d408:	b01f      	add	sp, #124	@ 0x7c
 800d40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d40e:	2920      	cmp	r1, #32
 800d410:	d1ce      	bne.n	800d3b0 <_strtod_l+0x30>
 800d412:	3201      	adds	r2, #1
 800d414:	e7c1      	b.n	800d39a <_strtod_l+0x1a>
 800d416:	292d      	cmp	r1, #45	@ 0x2d
 800d418:	d1ca      	bne.n	800d3b0 <_strtod_l+0x30>
 800d41a:	2101      	movs	r1, #1
 800d41c:	910e      	str	r1, [sp, #56]	@ 0x38
 800d41e:	1c51      	adds	r1, r2, #1
 800d420:	9119      	str	r1, [sp, #100]	@ 0x64
 800d422:	7852      	ldrb	r2, [r2, #1]
 800d424:	2a00      	cmp	r2, #0
 800d426:	d1c5      	bne.n	800d3b4 <_strtod_l+0x34>
 800d428:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d42a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f040 8570 	bne.w	800df12 <_strtod_l+0xb92>
 800d432:	4652      	mov	r2, sl
 800d434:	465b      	mov	r3, fp
 800d436:	e7e5      	b.n	800d404 <_strtod_l+0x84>
 800d438:	2100      	movs	r1, #0
 800d43a:	e7ef      	b.n	800d41c <_strtod_l+0x9c>
 800d43c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d43e:	b13a      	cbz	r2, 800d450 <_strtod_l+0xd0>
 800d440:	2135      	movs	r1, #53	@ 0x35
 800d442:	a81c      	add	r0, sp, #112	@ 0x70
 800d444:	f7ff ff3a 	bl	800d2bc <__copybits>
 800d448:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d44a:	9805      	ldr	r0, [sp, #20]
 800d44c:	f7ff fb10 	bl	800ca70 <_Bfree>
 800d450:	3e01      	subs	r6, #1
 800d452:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d454:	2e04      	cmp	r6, #4
 800d456:	d806      	bhi.n	800d466 <_strtod_l+0xe6>
 800d458:	e8df f006 	tbb	[pc, r6]
 800d45c:	201d0314 	.word	0x201d0314
 800d460:	14          	.byte	0x14
 800d461:	00          	.byte	0x00
 800d462:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d466:	05e1      	lsls	r1, r4, #23
 800d468:	bf48      	it	mi
 800d46a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d46e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d472:	0d1b      	lsrs	r3, r3, #20
 800d474:	051b      	lsls	r3, r3, #20
 800d476:	2b00      	cmp	r3, #0
 800d478:	d1bb      	bne.n	800d3f2 <_strtod_l+0x72>
 800d47a:	f7fe fb2d 	bl	800bad8 <__errno>
 800d47e:	2322      	movs	r3, #34	@ 0x22
 800d480:	6003      	str	r3, [r0, #0]
 800d482:	e7b6      	b.n	800d3f2 <_strtod_l+0x72>
 800d484:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d488:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d48c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d490:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d494:	e7e7      	b.n	800d466 <_strtod_l+0xe6>
 800d496:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d618 <_strtod_l+0x298>
 800d49a:	e7e4      	b.n	800d466 <_strtod_l+0xe6>
 800d49c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d4a0:	f04f 3aff 	mov.w	sl, #4294967295
 800d4a4:	e7df      	b.n	800d466 <_strtod_l+0xe6>
 800d4a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d4a8:	1c5a      	adds	r2, r3, #1
 800d4aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800d4ac:	785b      	ldrb	r3, [r3, #1]
 800d4ae:	2b30      	cmp	r3, #48	@ 0x30
 800d4b0:	d0f9      	beq.n	800d4a6 <_strtod_l+0x126>
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d09d      	beq.n	800d3f2 <_strtod_l+0x72>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	2700      	movs	r7, #0
 800d4ba:	9308      	str	r3, [sp, #32]
 800d4bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d4be:	930c      	str	r3, [sp, #48]	@ 0x30
 800d4c0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d4c2:	46b9      	mov	r9, r7
 800d4c4:	220a      	movs	r2, #10
 800d4c6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d4c8:	7805      	ldrb	r5, [r0, #0]
 800d4ca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d4ce:	b2d9      	uxtb	r1, r3
 800d4d0:	2909      	cmp	r1, #9
 800d4d2:	d928      	bls.n	800d526 <_strtod_l+0x1a6>
 800d4d4:	494f      	ldr	r1, [pc, #316]	@ (800d614 <_strtod_l+0x294>)
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	f001 f9ac 	bl	800e834 <strncmp>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d032      	beq.n	800d546 <_strtod_l+0x1c6>
 800d4e0:	2000      	movs	r0, #0
 800d4e2:	462a      	mov	r2, r5
 800d4e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d4e6:	464d      	mov	r5, r9
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2a65      	cmp	r2, #101	@ 0x65
 800d4ec:	d001      	beq.n	800d4f2 <_strtod_l+0x172>
 800d4ee:	2a45      	cmp	r2, #69	@ 0x45
 800d4f0:	d114      	bne.n	800d51c <_strtod_l+0x19c>
 800d4f2:	b91d      	cbnz	r5, 800d4fc <_strtod_l+0x17c>
 800d4f4:	9a08      	ldr	r2, [sp, #32]
 800d4f6:	4302      	orrs	r2, r0
 800d4f8:	d096      	beq.n	800d428 <_strtod_l+0xa8>
 800d4fa:	2500      	movs	r5, #0
 800d4fc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d4fe:	1c62      	adds	r2, r4, #1
 800d500:	9219      	str	r2, [sp, #100]	@ 0x64
 800d502:	7862      	ldrb	r2, [r4, #1]
 800d504:	2a2b      	cmp	r2, #43	@ 0x2b
 800d506:	d07a      	beq.n	800d5fe <_strtod_l+0x27e>
 800d508:	2a2d      	cmp	r2, #45	@ 0x2d
 800d50a:	d07e      	beq.n	800d60a <_strtod_l+0x28a>
 800d50c:	f04f 0c00 	mov.w	ip, #0
 800d510:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d514:	2909      	cmp	r1, #9
 800d516:	f240 8085 	bls.w	800d624 <_strtod_l+0x2a4>
 800d51a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d51c:	f04f 0800 	mov.w	r8, #0
 800d520:	e0a5      	b.n	800d66e <_strtod_l+0x2ee>
 800d522:	2300      	movs	r3, #0
 800d524:	e7c8      	b.n	800d4b8 <_strtod_l+0x138>
 800d526:	f1b9 0f08 	cmp.w	r9, #8
 800d52a:	bfd8      	it	le
 800d52c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d52e:	f100 0001 	add.w	r0, r0, #1
 800d532:	bfda      	itte	le
 800d534:	fb02 3301 	mlale	r3, r2, r1, r3
 800d538:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d53a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d53e:	f109 0901 	add.w	r9, r9, #1
 800d542:	9019      	str	r0, [sp, #100]	@ 0x64
 800d544:	e7bf      	b.n	800d4c6 <_strtod_l+0x146>
 800d546:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d548:	1c5a      	adds	r2, r3, #1
 800d54a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d54c:	785a      	ldrb	r2, [r3, #1]
 800d54e:	f1b9 0f00 	cmp.w	r9, #0
 800d552:	d03b      	beq.n	800d5cc <_strtod_l+0x24c>
 800d554:	900a      	str	r0, [sp, #40]	@ 0x28
 800d556:	464d      	mov	r5, r9
 800d558:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d55c:	2b09      	cmp	r3, #9
 800d55e:	d912      	bls.n	800d586 <_strtod_l+0x206>
 800d560:	2301      	movs	r3, #1
 800d562:	e7c2      	b.n	800d4ea <_strtod_l+0x16a>
 800d564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d566:	1c5a      	adds	r2, r3, #1
 800d568:	9219      	str	r2, [sp, #100]	@ 0x64
 800d56a:	785a      	ldrb	r2, [r3, #1]
 800d56c:	3001      	adds	r0, #1
 800d56e:	2a30      	cmp	r2, #48	@ 0x30
 800d570:	d0f8      	beq.n	800d564 <_strtod_l+0x1e4>
 800d572:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d576:	2b08      	cmp	r3, #8
 800d578:	f200 84d2 	bhi.w	800df20 <_strtod_l+0xba0>
 800d57c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d57e:	900a      	str	r0, [sp, #40]	@ 0x28
 800d580:	2000      	movs	r0, #0
 800d582:	930c      	str	r3, [sp, #48]	@ 0x30
 800d584:	4605      	mov	r5, r0
 800d586:	3a30      	subs	r2, #48	@ 0x30
 800d588:	f100 0301 	add.w	r3, r0, #1
 800d58c:	d018      	beq.n	800d5c0 <_strtod_l+0x240>
 800d58e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d590:	4419      	add	r1, r3
 800d592:	910a      	str	r1, [sp, #40]	@ 0x28
 800d594:	462e      	mov	r6, r5
 800d596:	f04f 0e0a 	mov.w	lr, #10
 800d59a:	1c71      	adds	r1, r6, #1
 800d59c:	eba1 0c05 	sub.w	ip, r1, r5
 800d5a0:	4563      	cmp	r3, ip
 800d5a2:	dc15      	bgt.n	800d5d0 <_strtod_l+0x250>
 800d5a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d5a8:	182b      	adds	r3, r5, r0
 800d5aa:	2b08      	cmp	r3, #8
 800d5ac:	f105 0501 	add.w	r5, r5, #1
 800d5b0:	4405      	add	r5, r0
 800d5b2:	dc1a      	bgt.n	800d5ea <_strtod_l+0x26a>
 800d5b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d5b6:	230a      	movs	r3, #10
 800d5b8:	fb03 2301 	mla	r3, r3, r1, r2
 800d5bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5be:	2300      	movs	r3, #0
 800d5c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d5c2:	1c51      	adds	r1, r2, #1
 800d5c4:	9119      	str	r1, [sp, #100]	@ 0x64
 800d5c6:	7852      	ldrb	r2, [r2, #1]
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	e7c5      	b.n	800d558 <_strtod_l+0x1d8>
 800d5cc:	4648      	mov	r0, r9
 800d5ce:	e7ce      	b.n	800d56e <_strtod_l+0x1ee>
 800d5d0:	2e08      	cmp	r6, #8
 800d5d2:	dc05      	bgt.n	800d5e0 <_strtod_l+0x260>
 800d5d4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d5d6:	fb0e f606 	mul.w	r6, lr, r6
 800d5da:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d5dc:	460e      	mov	r6, r1
 800d5de:	e7dc      	b.n	800d59a <_strtod_l+0x21a>
 800d5e0:	2910      	cmp	r1, #16
 800d5e2:	bfd8      	it	le
 800d5e4:	fb0e f707 	mulle.w	r7, lr, r7
 800d5e8:	e7f8      	b.n	800d5dc <_strtod_l+0x25c>
 800d5ea:	2b0f      	cmp	r3, #15
 800d5ec:	bfdc      	itt	le
 800d5ee:	230a      	movle	r3, #10
 800d5f0:	fb03 2707 	mlale	r7, r3, r7, r2
 800d5f4:	e7e3      	b.n	800d5be <_strtod_l+0x23e>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e77a      	b.n	800d4f4 <_strtod_l+0x174>
 800d5fe:	f04f 0c00 	mov.w	ip, #0
 800d602:	1ca2      	adds	r2, r4, #2
 800d604:	9219      	str	r2, [sp, #100]	@ 0x64
 800d606:	78a2      	ldrb	r2, [r4, #2]
 800d608:	e782      	b.n	800d510 <_strtod_l+0x190>
 800d60a:	f04f 0c01 	mov.w	ip, #1
 800d60e:	e7f8      	b.n	800d602 <_strtod_l+0x282>
 800d610:	0801204c 	.word	0x0801204c
 800d614:	08011e83 	.word	0x08011e83
 800d618:	7ff00000 	.word	0x7ff00000
 800d61c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d61e:	1c51      	adds	r1, r2, #1
 800d620:	9119      	str	r1, [sp, #100]	@ 0x64
 800d622:	7852      	ldrb	r2, [r2, #1]
 800d624:	2a30      	cmp	r2, #48	@ 0x30
 800d626:	d0f9      	beq.n	800d61c <_strtod_l+0x29c>
 800d628:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d62c:	2908      	cmp	r1, #8
 800d62e:	f63f af75 	bhi.w	800d51c <_strtod_l+0x19c>
 800d632:	3a30      	subs	r2, #48	@ 0x30
 800d634:	9209      	str	r2, [sp, #36]	@ 0x24
 800d636:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d638:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d63a:	f04f 080a 	mov.w	r8, #10
 800d63e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d640:	1c56      	adds	r6, r2, #1
 800d642:	9619      	str	r6, [sp, #100]	@ 0x64
 800d644:	7852      	ldrb	r2, [r2, #1]
 800d646:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d64a:	f1be 0f09 	cmp.w	lr, #9
 800d64e:	d939      	bls.n	800d6c4 <_strtod_l+0x344>
 800d650:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d652:	1a76      	subs	r6, r6, r1
 800d654:	2e08      	cmp	r6, #8
 800d656:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d65a:	dc03      	bgt.n	800d664 <_strtod_l+0x2e4>
 800d65c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d65e:	4588      	cmp	r8, r1
 800d660:	bfa8      	it	ge
 800d662:	4688      	movge	r8, r1
 800d664:	f1bc 0f00 	cmp.w	ip, #0
 800d668:	d001      	beq.n	800d66e <_strtod_l+0x2ee>
 800d66a:	f1c8 0800 	rsb	r8, r8, #0
 800d66e:	2d00      	cmp	r5, #0
 800d670:	d14e      	bne.n	800d710 <_strtod_l+0x390>
 800d672:	9908      	ldr	r1, [sp, #32]
 800d674:	4308      	orrs	r0, r1
 800d676:	f47f aebc 	bne.w	800d3f2 <_strtod_l+0x72>
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	f47f aed4 	bne.w	800d428 <_strtod_l+0xa8>
 800d680:	2a69      	cmp	r2, #105	@ 0x69
 800d682:	d028      	beq.n	800d6d6 <_strtod_l+0x356>
 800d684:	dc25      	bgt.n	800d6d2 <_strtod_l+0x352>
 800d686:	2a49      	cmp	r2, #73	@ 0x49
 800d688:	d025      	beq.n	800d6d6 <_strtod_l+0x356>
 800d68a:	2a4e      	cmp	r2, #78	@ 0x4e
 800d68c:	f47f aecc 	bne.w	800d428 <_strtod_l+0xa8>
 800d690:	499a      	ldr	r1, [pc, #616]	@ (800d8fc <_strtod_l+0x57c>)
 800d692:	a819      	add	r0, sp, #100	@ 0x64
 800d694:	f001 fbc4 	bl	800ee20 <__match>
 800d698:	2800      	cmp	r0, #0
 800d69a:	f43f aec5 	beq.w	800d428 <_strtod_l+0xa8>
 800d69e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	2b28      	cmp	r3, #40	@ 0x28
 800d6a4:	d12e      	bne.n	800d704 <_strtod_l+0x384>
 800d6a6:	4996      	ldr	r1, [pc, #600]	@ (800d900 <_strtod_l+0x580>)
 800d6a8:	aa1c      	add	r2, sp, #112	@ 0x70
 800d6aa:	a819      	add	r0, sp, #100	@ 0x64
 800d6ac:	f001 fbcc 	bl	800ee48 <__hexnan>
 800d6b0:	2805      	cmp	r0, #5
 800d6b2:	d127      	bne.n	800d704 <_strtod_l+0x384>
 800d6b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d6b6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d6ba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d6be:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d6c2:	e696      	b.n	800d3f2 <_strtod_l+0x72>
 800d6c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d6c6:	fb08 2101 	mla	r1, r8, r1, r2
 800d6ca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d6ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6d0:	e7b5      	b.n	800d63e <_strtod_l+0x2be>
 800d6d2:	2a6e      	cmp	r2, #110	@ 0x6e
 800d6d4:	e7da      	b.n	800d68c <_strtod_l+0x30c>
 800d6d6:	498b      	ldr	r1, [pc, #556]	@ (800d904 <_strtod_l+0x584>)
 800d6d8:	a819      	add	r0, sp, #100	@ 0x64
 800d6da:	f001 fba1 	bl	800ee20 <__match>
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	f43f aea2 	beq.w	800d428 <_strtod_l+0xa8>
 800d6e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6e6:	4988      	ldr	r1, [pc, #544]	@ (800d908 <_strtod_l+0x588>)
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	a819      	add	r0, sp, #100	@ 0x64
 800d6ec:	9319      	str	r3, [sp, #100]	@ 0x64
 800d6ee:	f001 fb97 	bl	800ee20 <__match>
 800d6f2:	b910      	cbnz	r0, 800d6fa <_strtod_l+0x37a>
 800d6f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d6fa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d918 <_strtod_l+0x598>
 800d6fe:	f04f 0a00 	mov.w	sl, #0
 800d702:	e676      	b.n	800d3f2 <_strtod_l+0x72>
 800d704:	4881      	ldr	r0, [pc, #516]	@ (800d90c <_strtod_l+0x58c>)
 800d706:	f001 f8c7 	bl	800e898 <nan>
 800d70a:	ec5b ab10 	vmov	sl, fp, d0
 800d70e:	e670      	b.n	800d3f2 <_strtod_l+0x72>
 800d710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d712:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d714:	eba8 0303 	sub.w	r3, r8, r3
 800d718:	f1b9 0f00 	cmp.w	r9, #0
 800d71c:	bf08      	it	eq
 800d71e:	46a9      	moveq	r9, r5
 800d720:	2d10      	cmp	r5, #16
 800d722:	9309      	str	r3, [sp, #36]	@ 0x24
 800d724:	462c      	mov	r4, r5
 800d726:	bfa8      	it	ge
 800d728:	2410      	movge	r4, #16
 800d72a:	f7f2 fef3 	bl	8000514 <__aeabi_ui2d>
 800d72e:	2d09      	cmp	r5, #9
 800d730:	4682      	mov	sl, r0
 800d732:	468b      	mov	fp, r1
 800d734:	dc13      	bgt.n	800d75e <_strtod_l+0x3de>
 800d736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f43f ae5a 	beq.w	800d3f2 <_strtod_l+0x72>
 800d73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d740:	dd78      	ble.n	800d834 <_strtod_l+0x4b4>
 800d742:	2b16      	cmp	r3, #22
 800d744:	dc5f      	bgt.n	800d806 <_strtod_l+0x486>
 800d746:	4972      	ldr	r1, [pc, #456]	@ (800d910 <_strtod_l+0x590>)
 800d748:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d750:	4652      	mov	r2, sl
 800d752:	465b      	mov	r3, fp
 800d754:	f7f2 ff58 	bl	8000608 <__aeabi_dmul>
 800d758:	4682      	mov	sl, r0
 800d75a:	468b      	mov	fp, r1
 800d75c:	e649      	b.n	800d3f2 <_strtod_l+0x72>
 800d75e:	4b6c      	ldr	r3, [pc, #432]	@ (800d910 <_strtod_l+0x590>)
 800d760:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d764:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d768:	f7f2 ff4e 	bl	8000608 <__aeabi_dmul>
 800d76c:	4682      	mov	sl, r0
 800d76e:	4638      	mov	r0, r7
 800d770:	468b      	mov	fp, r1
 800d772:	f7f2 fecf 	bl	8000514 <__aeabi_ui2d>
 800d776:	4602      	mov	r2, r0
 800d778:	460b      	mov	r3, r1
 800d77a:	4650      	mov	r0, sl
 800d77c:	4659      	mov	r1, fp
 800d77e:	f7f2 fd8d 	bl	800029c <__adddf3>
 800d782:	2d0f      	cmp	r5, #15
 800d784:	4682      	mov	sl, r0
 800d786:	468b      	mov	fp, r1
 800d788:	ddd5      	ble.n	800d736 <_strtod_l+0x3b6>
 800d78a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d78c:	1b2c      	subs	r4, r5, r4
 800d78e:	441c      	add	r4, r3
 800d790:	2c00      	cmp	r4, #0
 800d792:	f340 8093 	ble.w	800d8bc <_strtod_l+0x53c>
 800d796:	f014 030f 	ands.w	r3, r4, #15
 800d79a:	d00a      	beq.n	800d7b2 <_strtod_l+0x432>
 800d79c:	495c      	ldr	r1, [pc, #368]	@ (800d910 <_strtod_l+0x590>)
 800d79e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d7a2:	4652      	mov	r2, sl
 800d7a4:	465b      	mov	r3, fp
 800d7a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7aa:	f7f2 ff2d 	bl	8000608 <__aeabi_dmul>
 800d7ae:	4682      	mov	sl, r0
 800d7b0:	468b      	mov	fp, r1
 800d7b2:	f034 040f 	bics.w	r4, r4, #15
 800d7b6:	d073      	beq.n	800d8a0 <_strtod_l+0x520>
 800d7b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d7bc:	dd49      	ble.n	800d852 <_strtod_l+0x4d2>
 800d7be:	2400      	movs	r4, #0
 800d7c0:	46a0      	mov	r8, r4
 800d7c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d7c4:	46a1      	mov	r9, r4
 800d7c6:	9a05      	ldr	r2, [sp, #20]
 800d7c8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d918 <_strtod_l+0x598>
 800d7cc:	2322      	movs	r3, #34	@ 0x22
 800d7ce:	6013      	str	r3, [r2, #0]
 800d7d0:	f04f 0a00 	mov.w	sl, #0
 800d7d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	f43f ae0b 	beq.w	800d3f2 <_strtod_l+0x72>
 800d7dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d7de:	9805      	ldr	r0, [sp, #20]
 800d7e0:	f7ff f946 	bl	800ca70 <_Bfree>
 800d7e4:	9805      	ldr	r0, [sp, #20]
 800d7e6:	4649      	mov	r1, r9
 800d7e8:	f7ff f942 	bl	800ca70 <_Bfree>
 800d7ec:	9805      	ldr	r0, [sp, #20]
 800d7ee:	4641      	mov	r1, r8
 800d7f0:	f7ff f93e 	bl	800ca70 <_Bfree>
 800d7f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d7f6:	9805      	ldr	r0, [sp, #20]
 800d7f8:	f7ff f93a 	bl	800ca70 <_Bfree>
 800d7fc:	9805      	ldr	r0, [sp, #20]
 800d7fe:	4621      	mov	r1, r4
 800d800:	f7ff f936 	bl	800ca70 <_Bfree>
 800d804:	e5f5      	b.n	800d3f2 <_strtod_l+0x72>
 800d806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d808:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d80c:	4293      	cmp	r3, r2
 800d80e:	dbbc      	blt.n	800d78a <_strtod_l+0x40a>
 800d810:	4c3f      	ldr	r4, [pc, #252]	@ (800d910 <_strtod_l+0x590>)
 800d812:	f1c5 050f 	rsb	r5, r5, #15
 800d816:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d81a:	4652      	mov	r2, sl
 800d81c:	465b      	mov	r3, fp
 800d81e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d822:	f7f2 fef1 	bl	8000608 <__aeabi_dmul>
 800d826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d828:	1b5d      	subs	r5, r3, r5
 800d82a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d82e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d832:	e78f      	b.n	800d754 <_strtod_l+0x3d4>
 800d834:	3316      	adds	r3, #22
 800d836:	dba8      	blt.n	800d78a <_strtod_l+0x40a>
 800d838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d83a:	eba3 0808 	sub.w	r8, r3, r8
 800d83e:	4b34      	ldr	r3, [pc, #208]	@ (800d910 <_strtod_l+0x590>)
 800d840:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d844:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d848:	4650      	mov	r0, sl
 800d84a:	4659      	mov	r1, fp
 800d84c:	f7f3 f806 	bl	800085c <__aeabi_ddiv>
 800d850:	e782      	b.n	800d758 <_strtod_l+0x3d8>
 800d852:	2300      	movs	r3, #0
 800d854:	4f2f      	ldr	r7, [pc, #188]	@ (800d914 <_strtod_l+0x594>)
 800d856:	1124      	asrs	r4, r4, #4
 800d858:	4650      	mov	r0, sl
 800d85a:	4659      	mov	r1, fp
 800d85c:	461e      	mov	r6, r3
 800d85e:	2c01      	cmp	r4, #1
 800d860:	dc21      	bgt.n	800d8a6 <_strtod_l+0x526>
 800d862:	b10b      	cbz	r3, 800d868 <_strtod_l+0x4e8>
 800d864:	4682      	mov	sl, r0
 800d866:	468b      	mov	fp, r1
 800d868:	492a      	ldr	r1, [pc, #168]	@ (800d914 <_strtod_l+0x594>)
 800d86a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d86e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d872:	4652      	mov	r2, sl
 800d874:	465b      	mov	r3, fp
 800d876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d87a:	f7f2 fec5 	bl	8000608 <__aeabi_dmul>
 800d87e:	4b26      	ldr	r3, [pc, #152]	@ (800d918 <_strtod_l+0x598>)
 800d880:	460a      	mov	r2, r1
 800d882:	400b      	ands	r3, r1
 800d884:	4925      	ldr	r1, [pc, #148]	@ (800d91c <_strtod_l+0x59c>)
 800d886:	428b      	cmp	r3, r1
 800d888:	4682      	mov	sl, r0
 800d88a:	d898      	bhi.n	800d7be <_strtod_l+0x43e>
 800d88c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d890:	428b      	cmp	r3, r1
 800d892:	bf86      	itte	hi
 800d894:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d920 <_strtod_l+0x5a0>
 800d898:	f04f 3aff 	movhi.w	sl, #4294967295
 800d89c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	9308      	str	r3, [sp, #32]
 800d8a4:	e076      	b.n	800d994 <_strtod_l+0x614>
 800d8a6:	07e2      	lsls	r2, r4, #31
 800d8a8:	d504      	bpl.n	800d8b4 <_strtod_l+0x534>
 800d8aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8ae:	f7f2 feab 	bl	8000608 <__aeabi_dmul>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	3601      	adds	r6, #1
 800d8b6:	1064      	asrs	r4, r4, #1
 800d8b8:	3708      	adds	r7, #8
 800d8ba:	e7d0      	b.n	800d85e <_strtod_l+0x4de>
 800d8bc:	d0f0      	beq.n	800d8a0 <_strtod_l+0x520>
 800d8be:	4264      	negs	r4, r4
 800d8c0:	f014 020f 	ands.w	r2, r4, #15
 800d8c4:	d00a      	beq.n	800d8dc <_strtod_l+0x55c>
 800d8c6:	4b12      	ldr	r3, [pc, #72]	@ (800d910 <_strtod_l+0x590>)
 800d8c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8cc:	4650      	mov	r0, sl
 800d8ce:	4659      	mov	r1, fp
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	f7f2 ffc2 	bl	800085c <__aeabi_ddiv>
 800d8d8:	4682      	mov	sl, r0
 800d8da:	468b      	mov	fp, r1
 800d8dc:	1124      	asrs	r4, r4, #4
 800d8de:	d0df      	beq.n	800d8a0 <_strtod_l+0x520>
 800d8e0:	2c1f      	cmp	r4, #31
 800d8e2:	dd1f      	ble.n	800d924 <_strtod_l+0x5a4>
 800d8e4:	2400      	movs	r4, #0
 800d8e6:	46a0      	mov	r8, r4
 800d8e8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d8ea:	46a1      	mov	r9, r4
 800d8ec:	9a05      	ldr	r2, [sp, #20]
 800d8ee:	2322      	movs	r3, #34	@ 0x22
 800d8f0:	f04f 0a00 	mov.w	sl, #0
 800d8f4:	f04f 0b00 	mov.w	fp, #0
 800d8f8:	6013      	str	r3, [r2, #0]
 800d8fa:	e76b      	b.n	800d7d4 <_strtod_l+0x454>
 800d8fc:	08011d71 	.word	0x08011d71
 800d900:	08012038 	.word	0x08012038
 800d904:	08011d69 	.word	0x08011d69
 800d908:	08011da0 	.word	0x08011da0
 800d90c:	08011ed9 	.word	0x08011ed9
 800d910:	08011f70 	.word	0x08011f70
 800d914:	08011f48 	.word	0x08011f48
 800d918:	7ff00000 	.word	0x7ff00000
 800d91c:	7ca00000 	.word	0x7ca00000
 800d920:	7fefffff 	.word	0x7fefffff
 800d924:	f014 0310 	ands.w	r3, r4, #16
 800d928:	bf18      	it	ne
 800d92a:	236a      	movne	r3, #106	@ 0x6a
 800d92c:	4ea9      	ldr	r6, [pc, #676]	@ (800dbd4 <_strtod_l+0x854>)
 800d92e:	9308      	str	r3, [sp, #32]
 800d930:	4650      	mov	r0, sl
 800d932:	4659      	mov	r1, fp
 800d934:	2300      	movs	r3, #0
 800d936:	07e7      	lsls	r7, r4, #31
 800d938:	d504      	bpl.n	800d944 <_strtod_l+0x5c4>
 800d93a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d93e:	f7f2 fe63 	bl	8000608 <__aeabi_dmul>
 800d942:	2301      	movs	r3, #1
 800d944:	1064      	asrs	r4, r4, #1
 800d946:	f106 0608 	add.w	r6, r6, #8
 800d94a:	d1f4      	bne.n	800d936 <_strtod_l+0x5b6>
 800d94c:	b10b      	cbz	r3, 800d952 <_strtod_l+0x5d2>
 800d94e:	4682      	mov	sl, r0
 800d950:	468b      	mov	fp, r1
 800d952:	9b08      	ldr	r3, [sp, #32]
 800d954:	b1b3      	cbz	r3, 800d984 <_strtod_l+0x604>
 800d956:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d95a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d95e:	2b00      	cmp	r3, #0
 800d960:	4659      	mov	r1, fp
 800d962:	dd0f      	ble.n	800d984 <_strtod_l+0x604>
 800d964:	2b1f      	cmp	r3, #31
 800d966:	dd56      	ble.n	800da16 <_strtod_l+0x696>
 800d968:	2b34      	cmp	r3, #52	@ 0x34
 800d96a:	bfde      	ittt	le
 800d96c:	f04f 33ff 	movle.w	r3, #4294967295
 800d970:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d974:	4093      	lslle	r3, r2
 800d976:	f04f 0a00 	mov.w	sl, #0
 800d97a:	bfcc      	ite	gt
 800d97c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d980:	ea03 0b01 	andle.w	fp, r3, r1
 800d984:	2200      	movs	r2, #0
 800d986:	2300      	movs	r3, #0
 800d988:	4650      	mov	r0, sl
 800d98a:	4659      	mov	r1, fp
 800d98c:	f7f3 f8a4 	bl	8000ad8 <__aeabi_dcmpeq>
 800d990:	2800      	cmp	r0, #0
 800d992:	d1a7      	bne.n	800d8e4 <_strtod_l+0x564>
 800d994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d99a:	9805      	ldr	r0, [sp, #20]
 800d99c:	462b      	mov	r3, r5
 800d99e:	464a      	mov	r2, r9
 800d9a0:	f7ff f8ce 	bl	800cb40 <__s2b>
 800d9a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	f43f af09 	beq.w	800d7be <_strtod_l+0x43e>
 800d9ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9b0:	2a00      	cmp	r2, #0
 800d9b2:	eba3 0308 	sub.w	r3, r3, r8
 800d9b6:	bfa8      	it	ge
 800d9b8:	2300      	movge	r3, #0
 800d9ba:	9312      	str	r3, [sp, #72]	@ 0x48
 800d9bc:	2400      	movs	r4, #0
 800d9be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d9c2:	9316      	str	r3, [sp, #88]	@ 0x58
 800d9c4:	46a0      	mov	r8, r4
 800d9c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9c8:	9805      	ldr	r0, [sp, #20]
 800d9ca:	6859      	ldr	r1, [r3, #4]
 800d9cc:	f7ff f810 	bl	800c9f0 <_Balloc>
 800d9d0:	4681      	mov	r9, r0
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	f43f aef7 	beq.w	800d7c6 <_strtod_l+0x446>
 800d9d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9da:	691a      	ldr	r2, [r3, #16]
 800d9dc:	3202      	adds	r2, #2
 800d9de:	f103 010c 	add.w	r1, r3, #12
 800d9e2:	0092      	lsls	r2, r2, #2
 800d9e4:	300c      	adds	r0, #12
 800d9e6:	f000 ff47 	bl	800e878 <memcpy>
 800d9ea:	ec4b ab10 	vmov	d0, sl, fp
 800d9ee:	9805      	ldr	r0, [sp, #20]
 800d9f0:	aa1c      	add	r2, sp, #112	@ 0x70
 800d9f2:	a91b      	add	r1, sp, #108	@ 0x6c
 800d9f4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d9f8:	f7ff fbd6 	bl	800d1a8 <__d2b>
 800d9fc:	901a      	str	r0, [sp, #104]	@ 0x68
 800d9fe:	2800      	cmp	r0, #0
 800da00:	f43f aee1 	beq.w	800d7c6 <_strtod_l+0x446>
 800da04:	9805      	ldr	r0, [sp, #20]
 800da06:	2101      	movs	r1, #1
 800da08:	f7ff f930 	bl	800cc6c <__i2b>
 800da0c:	4680      	mov	r8, r0
 800da0e:	b948      	cbnz	r0, 800da24 <_strtod_l+0x6a4>
 800da10:	f04f 0800 	mov.w	r8, #0
 800da14:	e6d7      	b.n	800d7c6 <_strtod_l+0x446>
 800da16:	f04f 32ff 	mov.w	r2, #4294967295
 800da1a:	fa02 f303 	lsl.w	r3, r2, r3
 800da1e:	ea03 0a0a 	and.w	sl, r3, sl
 800da22:	e7af      	b.n	800d984 <_strtod_l+0x604>
 800da24:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800da26:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800da28:	2d00      	cmp	r5, #0
 800da2a:	bfab      	itete	ge
 800da2c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800da2e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800da30:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800da32:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800da34:	bfac      	ite	ge
 800da36:	18ef      	addge	r7, r5, r3
 800da38:	1b5e      	sublt	r6, r3, r5
 800da3a:	9b08      	ldr	r3, [sp, #32]
 800da3c:	1aed      	subs	r5, r5, r3
 800da3e:	4415      	add	r5, r2
 800da40:	4b65      	ldr	r3, [pc, #404]	@ (800dbd8 <_strtod_l+0x858>)
 800da42:	3d01      	subs	r5, #1
 800da44:	429d      	cmp	r5, r3
 800da46:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800da4a:	da50      	bge.n	800daee <_strtod_l+0x76e>
 800da4c:	1b5b      	subs	r3, r3, r5
 800da4e:	2b1f      	cmp	r3, #31
 800da50:	eba2 0203 	sub.w	r2, r2, r3
 800da54:	f04f 0101 	mov.w	r1, #1
 800da58:	dc3d      	bgt.n	800dad6 <_strtod_l+0x756>
 800da5a:	fa01 f303 	lsl.w	r3, r1, r3
 800da5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800da60:	2300      	movs	r3, #0
 800da62:	9310      	str	r3, [sp, #64]	@ 0x40
 800da64:	18bd      	adds	r5, r7, r2
 800da66:	9b08      	ldr	r3, [sp, #32]
 800da68:	42af      	cmp	r7, r5
 800da6a:	4416      	add	r6, r2
 800da6c:	441e      	add	r6, r3
 800da6e:	463b      	mov	r3, r7
 800da70:	bfa8      	it	ge
 800da72:	462b      	movge	r3, r5
 800da74:	42b3      	cmp	r3, r6
 800da76:	bfa8      	it	ge
 800da78:	4633      	movge	r3, r6
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	bfc2      	ittt	gt
 800da7e:	1aed      	subgt	r5, r5, r3
 800da80:	1af6      	subgt	r6, r6, r3
 800da82:	1aff      	subgt	r7, r7, r3
 800da84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800da86:	2b00      	cmp	r3, #0
 800da88:	dd16      	ble.n	800dab8 <_strtod_l+0x738>
 800da8a:	4641      	mov	r1, r8
 800da8c:	9805      	ldr	r0, [sp, #20]
 800da8e:	461a      	mov	r2, r3
 800da90:	f7ff f9a4 	bl	800cddc <__pow5mult>
 800da94:	4680      	mov	r8, r0
 800da96:	2800      	cmp	r0, #0
 800da98:	d0ba      	beq.n	800da10 <_strtod_l+0x690>
 800da9a:	4601      	mov	r1, r0
 800da9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800da9e:	9805      	ldr	r0, [sp, #20]
 800daa0:	f7ff f8fa 	bl	800cc98 <__multiply>
 800daa4:	900a      	str	r0, [sp, #40]	@ 0x28
 800daa6:	2800      	cmp	r0, #0
 800daa8:	f43f ae8d 	beq.w	800d7c6 <_strtod_l+0x446>
 800daac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800daae:	9805      	ldr	r0, [sp, #20]
 800dab0:	f7fe ffde 	bl	800ca70 <_Bfree>
 800dab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dab6:	931a      	str	r3, [sp, #104]	@ 0x68
 800dab8:	2d00      	cmp	r5, #0
 800daba:	dc1d      	bgt.n	800daf8 <_strtod_l+0x778>
 800dabc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	dd23      	ble.n	800db0a <_strtod_l+0x78a>
 800dac2:	4649      	mov	r1, r9
 800dac4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dac6:	9805      	ldr	r0, [sp, #20]
 800dac8:	f7ff f988 	bl	800cddc <__pow5mult>
 800dacc:	4681      	mov	r9, r0
 800dace:	b9e0      	cbnz	r0, 800db0a <_strtod_l+0x78a>
 800dad0:	f04f 0900 	mov.w	r9, #0
 800dad4:	e677      	b.n	800d7c6 <_strtod_l+0x446>
 800dad6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dada:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dade:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dae2:	35e2      	adds	r5, #226	@ 0xe2
 800dae4:	fa01 f305 	lsl.w	r3, r1, r5
 800dae8:	9310      	str	r3, [sp, #64]	@ 0x40
 800daea:	9113      	str	r1, [sp, #76]	@ 0x4c
 800daec:	e7ba      	b.n	800da64 <_strtod_l+0x6e4>
 800daee:	2300      	movs	r3, #0
 800daf0:	9310      	str	r3, [sp, #64]	@ 0x40
 800daf2:	2301      	movs	r3, #1
 800daf4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800daf6:	e7b5      	b.n	800da64 <_strtod_l+0x6e4>
 800daf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dafa:	9805      	ldr	r0, [sp, #20]
 800dafc:	462a      	mov	r2, r5
 800dafe:	f7ff f9c7 	bl	800ce90 <__lshift>
 800db02:	901a      	str	r0, [sp, #104]	@ 0x68
 800db04:	2800      	cmp	r0, #0
 800db06:	d1d9      	bne.n	800dabc <_strtod_l+0x73c>
 800db08:	e65d      	b.n	800d7c6 <_strtod_l+0x446>
 800db0a:	2e00      	cmp	r6, #0
 800db0c:	dd07      	ble.n	800db1e <_strtod_l+0x79e>
 800db0e:	4649      	mov	r1, r9
 800db10:	9805      	ldr	r0, [sp, #20]
 800db12:	4632      	mov	r2, r6
 800db14:	f7ff f9bc 	bl	800ce90 <__lshift>
 800db18:	4681      	mov	r9, r0
 800db1a:	2800      	cmp	r0, #0
 800db1c:	d0d8      	beq.n	800dad0 <_strtod_l+0x750>
 800db1e:	2f00      	cmp	r7, #0
 800db20:	dd08      	ble.n	800db34 <_strtod_l+0x7b4>
 800db22:	4641      	mov	r1, r8
 800db24:	9805      	ldr	r0, [sp, #20]
 800db26:	463a      	mov	r2, r7
 800db28:	f7ff f9b2 	bl	800ce90 <__lshift>
 800db2c:	4680      	mov	r8, r0
 800db2e:	2800      	cmp	r0, #0
 800db30:	f43f ae49 	beq.w	800d7c6 <_strtod_l+0x446>
 800db34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db36:	9805      	ldr	r0, [sp, #20]
 800db38:	464a      	mov	r2, r9
 800db3a:	f7ff fa31 	bl	800cfa0 <__mdiff>
 800db3e:	4604      	mov	r4, r0
 800db40:	2800      	cmp	r0, #0
 800db42:	f43f ae40 	beq.w	800d7c6 <_strtod_l+0x446>
 800db46:	68c3      	ldr	r3, [r0, #12]
 800db48:	930f      	str	r3, [sp, #60]	@ 0x3c
 800db4a:	2300      	movs	r3, #0
 800db4c:	60c3      	str	r3, [r0, #12]
 800db4e:	4641      	mov	r1, r8
 800db50:	f7ff fa0a 	bl	800cf68 <__mcmp>
 800db54:	2800      	cmp	r0, #0
 800db56:	da45      	bge.n	800dbe4 <_strtod_l+0x864>
 800db58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db5a:	ea53 030a 	orrs.w	r3, r3, sl
 800db5e:	d16b      	bne.n	800dc38 <_strtod_l+0x8b8>
 800db60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db64:	2b00      	cmp	r3, #0
 800db66:	d167      	bne.n	800dc38 <_strtod_l+0x8b8>
 800db68:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db6c:	0d1b      	lsrs	r3, r3, #20
 800db6e:	051b      	lsls	r3, r3, #20
 800db70:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800db74:	d960      	bls.n	800dc38 <_strtod_l+0x8b8>
 800db76:	6963      	ldr	r3, [r4, #20]
 800db78:	b913      	cbnz	r3, 800db80 <_strtod_l+0x800>
 800db7a:	6923      	ldr	r3, [r4, #16]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	dd5b      	ble.n	800dc38 <_strtod_l+0x8b8>
 800db80:	4621      	mov	r1, r4
 800db82:	2201      	movs	r2, #1
 800db84:	9805      	ldr	r0, [sp, #20]
 800db86:	f7ff f983 	bl	800ce90 <__lshift>
 800db8a:	4641      	mov	r1, r8
 800db8c:	4604      	mov	r4, r0
 800db8e:	f7ff f9eb 	bl	800cf68 <__mcmp>
 800db92:	2800      	cmp	r0, #0
 800db94:	dd50      	ble.n	800dc38 <_strtod_l+0x8b8>
 800db96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db9a:	9a08      	ldr	r2, [sp, #32]
 800db9c:	0d1b      	lsrs	r3, r3, #20
 800db9e:	051b      	lsls	r3, r3, #20
 800dba0:	2a00      	cmp	r2, #0
 800dba2:	d06a      	beq.n	800dc7a <_strtod_l+0x8fa>
 800dba4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dba8:	d867      	bhi.n	800dc7a <_strtod_l+0x8fa>
 800dbaa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dbae:	f67f ae9d 	bls.w	800d8ec <_strtod_l+0x56c>
 800dbb2:	4b0a      	ldr	r3, [pc, #40]	@ (800dbdc <_strtod_l+0x85c>)
 800dbb4:	4650      	mov	r0, sl
 800dbb6:	4659      	mov	r1, fp
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f7f2 fd25 	bl	8000608 <__aeabi_dmul>
 800dbbe:	4b08      	ldr	r3, [pc, #32]	@ (800dbe0 <_strtod_l+0x860>)
 800dbc0:	400b      	ands	r3, r1
 800dbc2:	4682      	mov	sl, r0
 800dbc4:	468b      	mov	fp, r1
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	f47f ae08 	bne.w	800d7dc <_strtod_l+0x45c>
 800dbcc:	9a05      	ldr	r2, [sp, #20]
 800dbce:	2322      	movs	r3, #34	@ 0x22
 800dbd0:	6013      	str	r3, [r2, #0]
 800dbd2:	e603      	b.n	800d7dc <_strtod_l+0x45c>
 800dbd4:	08012060 	.word	0x08012060
 800dbd8:	fffffc02 	.word	0xfffffc02
 800dbdc:	39500000 	.word	0x39500000
 800dbe0:	7ff00000 	.word	0x7ff00000
 800dbe4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800dbe8:	d165      	bne.n	800dcb6 <_strtod_l+0x936>
 800dbea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dbec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbf0:	b35a      	cbz	r2, 800dc4a <_strtod_l+0x8ca>
 800dbf2:	4a9f      	ldr	r2, [pc, #636]	@ (800de70 <_strtod_l+0xaf0>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d12b      	bne.n	800dc50 <_strtod_l+0x8d0>
 800dbf8:	9b08      	ldr	r3, [sp, #32]
 800dbfa:	4651      	mov	r1, sl
 800dbfc:	b303      	cbz	r3, 800dc40 <_strtod_l+0x8c0>
 800dbfe:	4b9d      	ldr	r3, [pc, #628]	@ (800de74 <_strtod_l+0xaf4>)
 800dc00:	465a      	mov	r2, fp
 800dc02:	4013      	ands	r3, r2
 800dc04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dc08:	f04f 32ff 	mov.w	r2, #4294967295
 800dc0c:	d81b      	bhi.n	800dc46 <_strtod_l+0x8c6>
 800dc0e:	0d1b      	lsrs	r3, r3, #20
 800dc10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dc14:	fa02 f303 	lsl.w	r3, r2, r3
 800dc18:	4299      	cmp	r1, r3
 800dc1a:	d119      	bne.n	800dc50 <_strtod_l+0x8d0>
 800dc1c:	4b96      	ldr	r3, [pc, #600]	@ (800de78 <_strtod_l+0xaf8>)
 800dc1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d102      	bne.n	800dc2a <_strtod_l+0x8aa>
 800dc24:	3101      	adds	r1, #1
 800dc26:	f43f adce 	beq.w	800d7c6 <_strtod_l+0x446>
 800dc2a:	4b92      	ldr	r3, [pc, #584]	@ (800de74 <_strtod_l+0xaf4>)
 800dc2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc2e:	401a      	ands	r2, r3
 800dc30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800dc34:	f04f 0a00 	mov.w	sl, #0
 800dc38:	9b08      	ldr	r3, [sp, #32]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d1b9      	bne.n	800dbb2 <_strtod_l+0x832>
 800dc3e:	e5cd      	b.n	800d7dc <_strtod_l+0x45c>
 800dc40:	f04f 33ff 	mov.w	r3, #4294967295
 800dc44:	e7e8      	b.n	800dc18 <_strtod_l+0x898>
 800dc46:	4613      	mov	r3, r2
 800dc48:	e7e6      	b.n	800dc18 <_strtod_l+0x898>
 800dc4a:	ea53 030a 	orrs.w	r3, r3, sl
 800dc4e:	d0a2      	beq.n	800db96 <_strtod_l+0x816>
 800dc50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dc52:	b1db      	cbz	r3, 800dc8c <_strtod_l+0x90c>
 800dc54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc56:	4213      	tst	r3, r2
 800dc58:	d0ee      	beq.n	800dc38 <_strtod_l+0x8b8>
 800dc5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc5c:	9a08      	ldr	r2, [sp, #32]
 800dc5e:	4650      	mov	r0, sl
 800dc60:	4659      	mov	r1, fp
 800dc62:	b1bb      	cbz	r3, 800dc94 <_strtod_l+0x914>
 800dc64:	f7ff fb6e 	bl	800d344 <sulp>
 800dc68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc6c:	ec53 2b10 	vmov	r2, r3, d0
 800dc70:	f7f2 fb14 	bl	800029c <__adddf3>
 800dc74:	4682      	mov	sl, r0
 800dc76:	468b      	mov	fp, r1
 800dc78:	e7de      	b.n	800dc38 <_strtod_l+0x8b8>
 800dc7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dc7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dc82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dc86:	f04f 3aff 	mov.w	sl, #4294967295
 800dc8a:	e7d5      	b.n	800dc38 <_strtod_l+0x8b8>
 800dc8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dc8e:	ea13 0f0a 	tst.w	r3, sl
 800dc92:	e7e1      	b.n	800dc58 <_strtod_l+0x8d8>
 800dc94:	f7ff fb56 	bl	800d344 <sulp>
 800dc98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc9c:	ec53 2b10 	vmov	r2, r3, d0
 800dca0:	f7f2 fafa 	bl	8000298 <__aeabi_dsub>
 800dca4:	2200      	movs	r2, #0
 800dca6:	2300      	movs	r3, #0
 800dca8:	4682      	mov	sl, r0
 800dcaa:	468b      	mov	fp, r1
 800dcac:	f7f2 ff14 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	d0c1      	beq.n	800dc38 <_strtod_l+0x8b8>
 800dcb4:	e61a      	b.n	800d8ec <_strtod_l+0x56c>
 800dcb6:	4641      	mov	r1, r8
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f7ff facd 	bl	800d258 <__ratio>
 800dcbe:	ec57 6b10 	vmov	r6, r7, d0
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dcc8:	4630      	mov	r0, r6
 800dcca:	4639      	mov	r1, r7
 800dccc:	f7f2 ff18 	bl	8000b00 <__aeabi_dcmple>
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	d06f      	beq.n	800ddb4 <_strtod_l+0xa34>
 800dcd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d17a      	bne.n	800ddd0 <_strtod_l+0xa50>
 800dcda:	f1ba 0f00 	cmp.w	sl, #0
 800dcde:	d158      	bne.n	800dd92 <_strtod_l+0xa12>
 800dce0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d15a      	bne.n	800dda0 <_strtod_l+0xa20>
 800dcea:	4b64      	ldr	r3, [pc, #400]	@ (800de7c <_strtod_l+0xafc>)
 800dcec:	2200      	movs	r2, #0
 800dcee:	4630      	mov	r0, r6
 800dcf0:	4639      	mov	r1, r7
 800dcf2:	f7f2 fefb 	bl	8000aec <__aeabi_dcmplt>
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	d159      	bne.n	800ddae <_strtod_l+0xa2e>
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	4639      	mov	r1, r7
 800dcfe:	4b60      	ldr	r3, [pc, #384]	@ (800de80 <_strtod_l+0xb00>)
 800dd00:	2200      	movs	r2, #0
 800dd02:	f7f2 fc81 	bl	8000608 <__aeabi_dmul>
 800dd06:	4606      	mov	r6, r0
 800dd08:	460f      	mov	r7, r1
 800dd0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800dd0e:	9606      	str	r6, [sp, #24]
 800dd10:	9307      	str	r3, [sp, #28]
 800dd12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd16:	4d57      	ldr	r5, [pc, #348]	@ (800de74 <_strtod_l+0xaf4>)
 800dd18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dd1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd1e:	401d      	ands	r5, r3
 800dd20:	4b58      	ldr	r3, [pc, #352]	@ (800de84 <_strtod_l+0xb04>)
 800dd22:	429d      	cmp	r5, r3
 800dd24:	f040 80b2 	bne.w	800de8c <_strtod_l+0xb0c>
 800dd28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800dd2e:	ec4b ab10 	vmov	d0, sl, fp
 800dd32:	f7ff f9c9 	bl	800d0c8 <__ulp>
 800dd36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd3a:	ec51 0b10 	vmov	r0, r1, d0
 800dd3e:	f7f2 fc63 	bl	8000608 <__aeabi_dmul>
 800dd42:	4652      	mov	r2, sl
 800dd44:	465b      	mov	r3, fp
 800dd46:	f7f2 faa9 	bl	800029c <__adddf3>
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	4949      	ldr	r1, [pc, #292]	@ (800de74 <_strtod_l+0xaf4>)
 800dd4e:	4a4e      	ldr	r2, [pc, #312]	@ (800de88 <_strtod_l+0xb08>)
 800dd50:	4019      	ands	r1, r3
 800dd52:	4291      	cmp	r1, r2
 800dd54:	4682      	mov	sl, r0
 800dd56:	d942      	bls.n	800ddde <_strtod_l+0xa5e>
 800dd58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dd5a:	4b47      	ldr	r3, [pc, #284]	@ (800de78 <_strtod_l+0xaf8>)
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d103      	bne.n	800dd68 <_strtod_l+0x9e8>
 800dd60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd62:	3301      	adds	r3, #1
 800dd64:	f43f ad2f 	beq.w	800d7c6 <_strtod_l+0x446>
 800dd68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800de78 <_strtod_l+0xaf8>
 800dd6c:	f04f 3aff 	mov.w	sl, #4294967295
 800dd70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd72:	9805      	ldr	r0, [sp, #20]
 800dd74:	f7fe fe7c 	bl	800ca70 <_Bfree>
 800dd78:	9805      	ldr	r0, [sp, #20]
 800dd7a:	4649      	mov	r1, r9
 800dd7c:	f7fe fe78 	bl	800ca70 <_Bfree>
 800dd80:	9805      	ldr	r0, [sp, #20]
 800dd82:	4641      	mov	r1, r8
 800dd84:	f7fe fe74 	bl	800ca70 <_Bfree>
 800dd88:	9805      	ldr	r0, [sp, #20]
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	f7fe fe70 	bl	800ca70 <_Bfree>
 800dd90:	e619      	b.n	800d9c6 <_strtod_l+0x646>
 800dd92:	f1ba 0f01 	cmp.w	sl, #1
 800dd96:	d103      	bne.n	800dda0 <_strtod_l+0xa20>
 800dd98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f43f ada6 	beq.w	800d8ec <_strtod_l+0x56c>
 800dda0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800de50 <_strtod_l+0xad0>
 800dda4:	4f35      	ldr	r7, [pc, #212]	@ (800de7c <_strtod_l+0xafc>)
 800dda6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ddaa:	2600      	movs	r6, #0
 800ddac:	e7b1      	b.n	800dd12 <_strtod_l+0x992>
 800ddae:	4f34      	ldr	r7, [pc, #208]	@ (800de80 <_strtod_l+0xb00>)
 800ddb0:	2600      	movs	r6, #0
 800ddb2:	e7aa      	b.n	800dd0a <_strtod_l+0x98a>
 800ddb4:	4b32      	ldr	r3, [pc, #200]	@ (800de80 <_strtod_l+0xb00>)
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	4639      	mov	r1, r7
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f7f2 fc24 	bl	8000608 <__aeabi_dmul>
 800ddc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddc2:	4606      	mov	r6, r0
 800ddc4:	460f      	mov	r7, r1
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d09f      	beq.n	800dd0a <_strtod_l+0x98a>
 800ddca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ddce:	e7a0      	b.n	800dd12 <_strtod_l+0x992>
 800ddd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800de58 <_strtod_l+0xad8>
 800ddd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ddd8:	ec57 6b17 	vmov	r6, r7, d7
 800dddc:	e799      	b.n	800dd12 <_strtod_l+0x992>
 800ddde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dde2:	9b08      	ldr	r3, [sp, #32]
 800dde4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1c1      	bne.n	800dd70 <_strtod_l+0x9f0>
 800ddec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ddf0:	0d1b      	lsrs	r3, r3, #20
 800ddf2:	051b      	lsls	r3, r3, #20
 800ddf4:	429d      	cmp	r5, r3
 800ddf6:	d1bb      	bne.n	800dd70 <_strtod_l+0x9f0>
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	4639      	mov	r1, r7
 800ddfc:	f7f3 f872 	bl	8000ee4 <__aeabi_d2lz>
 800de00:	f7f2 fbd4 	bl	80005ac <__aeabi_l2d>
 800de04:	4602      	mov	r2, r0
 800de06:	460b      	mov	r3, r1
 800de08:	4630      	mov	r0, r6
 800de0a:	4639      	mov	r1, r7
 800de0c:	f7f2 fa44 	bl	8000298 <__aeabi_dsub>
 800de10:	460b      	mov	r3, r1
 800de12:	4602      	mov	r2, r0
 800de14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800de18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800de1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de1e:	ea46 060a 	orr.w	r6, r6, sl
 800de22:	431e      	orrs	r6, r3
 800de24:	d06f      	beq.n	800df06 <_strtod_l+0xb86>
 800de26:	a30e      	add	r3, pc, #56	@ (adr r3, 800de60 <_strtod_l+0xae0>)
 800de28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2c:	f7f2 fe5e 	bl	8000aec <__aeabi_dcmplt>
 800de30:	2800      	cmp	r0, #0
 800de32:	f47f acd3 	bne.w	800d7dc <_strtod_l+0x45c>
 800de36:	a30c      	add	r3, pc, #48	@ (adr r3, 800de68 <_strtod_l+0xae8>)
 800de38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de40:	f7f2 fe72 	bl	8000b28 <__aeabi_dcmpgt>
 800de44:	2800      	cmp	r0, #0
 800de46:	d093      	beq.n	800dd70 <_strtod_l+0x9f0>
 800de48:	e4c8      	b.n	800d7dc <_strtod_l+0x45c>
 800de4a:	bf00      	nop
 800de4c:	f3af 8000 	nop.w
 800de50:	00000000 	.word	0x00000000
 800de54:	bff00000 	.word	0xbff00000
 800de58:	00000000 	.word	0x00000000
 800de5c:	3ff00000 	.word	0x3ff00000
 800de60:	94a03595 	.word	0x94a03595
 800de64:	3fdfffff 	.word	0x3fdfffff
 800de68:	35afe535 	.word	0x35afe535
 800de6c:	3fe00000 	.word	0x3fe00000
 800de70:	000fffff 	.word	0x000fffff
 800de74:	7ff00000 	.word	0x7ff00000
 800de78:	7fefffff 	.word	0x7fefffff
 800de7c:	3ff00000 	.word	0x3ff00000
 800de80:	3fe00000 	.word	0x3fe00000
 800de84:	7fe00000 	.word	0x7fe00000
 800de88:	7c9fffff 	.word	0x7c9fffff
 800de8c:	9b08      	ldr	r3, [sp, #32]
 800de8e:	b323      	cbz	r3, 800deda <_strtod_l+0xb5a>
 800de90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800de94:	d821      	bhi.n	800deda <_strtod_l+0xb5a>
 800de96:	a328      	add	r3, pc, #160	@ (adr r3, 800df38 <_strtod_l+0xbb8>)
 800de98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9c:	4630      	mov	r0, r6
 800de9e:	4639      	mov	r1, r7
 800dea0:	f7f2 fe2e 	bl	8000b00 <__aeabi_dcmple>
 800dea4:	b1a0      	cbz	r0, 800ded0 <_strtod_l+0xb50>
 800dea6:	4639      	mov	r1, r7
 800dea8:	4630      	mov	r0, r6
 800deaa:	f7f2 fe85 	bl	8000bb8 <__aeabi_d2uiz>
 800deae:	2801      	cmp	r0, #1
 800deb0:	bf38      	it	cc
 800deb2:	2001      	movcc	r0, #1
 800deb4:	f7f2 fb2e 	bl	8000514 <__aeabi_ui2d>
 800deb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deba:	4606      	mov	r6, r0
 800debc:	460f      	mov	r7, r1
 800debe:	b9fb      	cbnz	r3, 800df00 <_strtod_l+0xb80>
 800dec0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dec4:	9014      	str	r0, [sp, #80]	@ 0x50
 800dec6:	9315      	str	r3, [sp, #84]	@ 0x54
 800dec8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800decc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ded0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ded2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ded6:	1b5b      	subs	r3, r3, r5
 800ded8:	9311      	str	r3, [sp, #68]	@ 0x44
 800deda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dede:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dee2:	f7ff f8f1 	bl	800d0c8 <__ulp>
 800dee6:	4650      	mov	r0, sl
 800dee8:	ec53 2b10 	vmov	r2, r3, d0
 800deec:	4659      	mov	r1, fp
 800deee:	f7f2 fb8b 	bl	8000608 <__aeabi_dmul>
 800def2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800def6:	f7f2 f9d1 	bl	800029c <__adddf3>
 800defa:	4682      	mov	sl, r0
 800defc:	468b      	mov	fp, r1
 800defe:	e770      	b.n	800dde2 <_strtod_l+0xa62>
 800df00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800df04:	e7e0      	b.n	800dec8 <_strtod_l+0xb48>
 800df06:	a30e      	add	r3, pc, #56	@ (adr r3, 800df40 <_strtod_l+0xbc0>)
 800df08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0c:	f7f2 fdee 	bl	8000aec <__aeabi_dcmplt>
 800df10:	e798      	b.n	800de44 <_strtod_l+0xac4>
 800df12:	2300      	movs	r3, #0
 800df14:	930e      	str	r3, [sp, #56]	@ 0x38
 800df16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800df18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df1a:	6013      	str	r3, [r2, #0]
 800df1c:	f7ff ba6d 	b.w	800d3fa <_strtod_l+0x7a>
 800df20:	2a65      	cmp	r2, #101	@ 0x65
 800df22:	f43f ab68 	beq.w	800d5f6 <_strtod_l+0x276>
 800df26:	2a45      	cmp	r2, #69	@ 0x45
 800df28:	f43f ab65 	beq.w	800d5f6 <_strtod_l+0x276>
 800df2c:	2301      	movs	r3, #1
 800df2e:	f7ff bba0 	b.w	800d672 <_strtod_l+0x2f2>
 800df32:	bf00      	nop
 800df34:	f3af 8000 	nop.w
 800df38:	ffc00000 	.word	0xffc00000
 800df3c:	41dfffff 	.word	0x41dfffff
 800df40:	94a03595 	.word	0x94a03595
 800df44:	3fcfffff 	.word	0x3fcfffff

0800df48 <_strtod_r>:
 800df48:	4b01      	ldr	r3, [pc, #4]	@ (800df50 <_strtod_r+0x8>)
 800df4a:	f7ff ba19 	b.w	800d380 <_strtod_l>
 800df4e:	bf00      	nop
 800df50:	20000088 	.word	0x20000088

0800df54 <_strtol_l.isra.0>:
 800df54:	2b24      	cmp	r3, #36	@ 0x24
 800df56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df5a:	4686      	mov	lr, r0
 800df5c:	4690      	mov	r8, r2
 800df5e:	d801      	bhi.n	800df64 <_strtol_l.isra.0+0x10>
 800df60:	2b01      	cmp	r3, #1
 800df62:	d106      	bne.n	800df72 <_strtol_l.isra.0+0x1e>
 800df64:	f7fd fdb8 	bl	800bad8 <__errno>
 800df68:	2316      	movs	r3, #22
 800df6a:	6003      	str	r3, [r0, #0]
 800df6c:	2000      	movs	r0, #0
 800df6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df72:	4834      	ldr	r0, [pc, #208]	@ (800e044 <_strtol_l.isra.0+0xf0>)
 800df74:	460d      	mov	r5, r1
 800df76:	462a      	mov	r2, r5
 800df78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df7c:	5d06      	ldrb	r6, [r0, r4]
 800df7e:	f016 0608 	ands.w	r6, r6, #8
 800df82:	d1f8      	bne.n	800df76 <_strtol_l.isra.0+0x22>
 800df84:	2c2d      	cmp	r4, #45	@ 0x2d
 800df86:	d110      	bne.n	800dfaa <_strtol_l.isra.0+0x56>
 800df88:	782c      	ldrb	r4, [r5, #0]
 800df8a:	2601      	movs	r6, #1
 800df8c:	1c95      	adds	r5, r2, #2
 800df8e:	f033 0210 	bics.w	r2, r3, #16
 800df92:	d115      	bne.n	800dfc0 <_strtol_l.isra.0+0x6c>
 800df94:	2c30      	cmp	r4, #48	@ 0x30
 800df96:	d10d      	bne.n	800dfb4 <_strtol_l.isra.0+0x60>
 800df98:	782a      	ldrb	r2, [r5, #0]
 800df9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800df9e:	2a58      	cmp	r2, #88	@ 0x58
 800dfa0:	d108      	bne.n	800dfb4 <_strtol_l.isra.0+0x60>
 800dfa2:	786c      	ldrb	r4, [r5, #1]
 800dfa4:	3502      	adds	r5, #2
 800dfa6:	2310      	movs	r3, #16
 800dfa8:	e00a      	b.n	800dfc0 <_strtol_l.isra.0+0x6c>
 800dfaa:	2c2b      	cmp	r4, #43	@ 0x2b
 800dfac:	bf04      	itt	eq
 800dfae:	782c      	ldrbeq	r4, [r5, #0]
 800dfb0:	1c95      	addeq	r5, r2, #2
 800dfb2:	e7ec      	b.n	800df8e <_strtol_l.isra.0+0x3a>
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1f6      	bne.n	800dfa6 <_strtol_l.isra.0+0x52>
 800dfb8:	2c30      	cmp	r4, #48	@ 0x30
 800dfba:	bf14      	ite	ne
 800dfbc:	230a      	movne	r3, #10
 800dfbe:	2308      	moveq	r3, #8
 800dfc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dfc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dfc8:	2200      	movs	r2, #0
 800dfca:	fbbc f9f3 	udiv	r9, ip, r3
 800dfce:	4610      	mov	r0, r2
 800dfd0:	fb03 ca19 	mls	sl, r3, r9, ip
 800dfd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dfd8:	2f09      	cmp	r7, #9
 800dfda:	d80f      	bhi.n	800dffc <_strtol_l.isra.0+0xa8>
 800dfdc:	463c      	mov	r4, r7
 800dfde:	42a3      	cmp	r3, r4
 800dfe0:	dd1b      	ble.n	800e01a <_strtol_l.isra.0+0xc6>
 800dfe2:	1c57      	adds	r7, r2, #1
 800dfe4:	d007      	beq.n	800dff6 <_strtol_l.isra.0+0xa2>
 800dfe6:	4581      	cmp	r9, r0
 800dfe8:	d314      	bcc.n	800e014 <_strtol_l.isra.0+0xc0>
 800dfea:	d101      	bne.n	800dff0 <_strtol_l.isra.0+0x9c>
 800dfec:	45a2      	cmp	sl, r4
 800dfee:	db11      	blt.n	800e014 <_strtol_l.isra.0+0xc0>
 800dff0:	fb00 4003 	mla	r0, r0, r3, r4
 800dff4:	2201      	movs	r2, #1
 800dff6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dffa:	e7eb      	b.n	800dfd4 <_strtol_l.isra.0+0x80>
 800dffc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e000:	2f19      	cmp	r7, #25
 800e002:	d801      	bhi.n	800e008 <_strtol_l.isra.0+0xb4>
 800e004:	3c37      	subs	r4, #55	@ 0x37
 800e006:	e7ea      	b.n	800dfde <_strtol_l.isra.0+0x8a>
 800e008:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e00c:	2f19      	cmp	r7, #25
 800e00e:	d804      	bhi.n	800e01a <_strtol_l.isra.0+0xc6>
 800e010:	3c57      	subs	r4, #87	@ 0x57
 800e012:	e7e4      	b.n	800dfde <_strtol_l.isra.0+0x8a>
 800e014:	f04f 32ff 	mov.w	r2, #4294967295
 800e018:	e7ed      	b.n	800dff6 <_strtol_l.isra.0+0xa2>
 800e01a:	1c53      	adds	r3, r2, #1
 800e01c:	d108      	bne.n	800e030 <_strtol_l.isra.0+0xdc>
 800e01e:	2322      	movs	r3, #34	@ 0x22
 800e020:	f8ce 3000 	str.w	r3, [lr]
 800e024:	4660      	mov	r0, ip
 800e026:	f1b8 0f00 	cmp.w	r8, #0
 800e02a:	d0a0      	beq.n	800df6e <_strtol_l.isra.0+0x1a>
 800e02c:	1e69      	subs	r1, r5, #1
 800e02e:	e006      	b.n	800e03e <_strtol_l.isra.0+0xea>
 800e030:	b106      	cbz	r6, 800e034 <_strtol_l.isra.0+0xe0>
 800e032:	4240      	negs	r0, r0
 800e034:	f1b8 0f00 	cmp.w	r8, #0
 800e038:	d099      	beq.n	800df6e <_strtol_l.isra.0+0x1a>
 800e03a:	2a00      	cmp	r2, #0
 800e03c:	d1f6      	bne.n	800e02c <_strtol_l.isra.0+0xd8>
 800e03e:	f8c8 1000 	str.w	r1, [r8]
 800e042:	e794      	b.n	800df6e <_strtol_l.isra.0+0x1a>
 800e044:	08012089 	.word	0x08012089

0800e048 <_strtol_r>:
 800e048:	f7ff bf84 	b.w	800df54 <_strtol_l.isra.0>

0800e04c <__ssputs_r>:
 800e04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e050:	688e      	ldr	r6, [r1, #8]
 800e052:	461f      	mov	r7, r3
 800e054:	42be      	cmp	r6, r7
 800e056:	680b      	ldr	r3, [r1, #0]
 800e058:	4682      	mov	sl, r0
 800e05a:	460c      	mov	r4, r1
 800e05c:	4690      	mov	r8, r2
 800e05e:	d82d      	bhi.n	800e0bc <__ssputs_r+0x70>
 800e060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e064:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e068:	d026      	beq.n	800e0b8 <__ssputs_r+0x6c>
 800e06a:	6965      	ldr	r5, [r4, #20]
 800e06c:	6909      	ldr	r1, [r1, #16]
 800e06e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e072:	eba3 0901 	sub.w	r9, r3, r1
 800e076:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e07a:	1c7b      	adds	r3, r7, #1
 800e07c:	444b      	add	r3, r9
 800e07e:	106d      	asrs	r5, r5, #1
 800e080:	429d      	cmp	r5, r3
 800e082:	bf38      	it	cc
 800e084:	461d      	movcc	r5, r3
 800e086:	0553      	lsls	r3, r2, #21
 800e088:	d527      	bpl.n	800e0da <__ssputs_r+0x8e>
 800e08a:	4629      	mov	r1, r5
 800e08c:	f7fe fc24 	bl	800c8d8 <_malloc_r>
 800e090:	4606      	mov	r6, r0
 800e092:	b360      	cbz	r0, 800e0ee <__ssputs_r+0xa2>
 800e094:	6921      	ldr	r1, [r4, #16]
 800e096:	464a      	mov	r2, r9
 800e098:	f000 fbee 	bl	800e878 <memcpy>
 800e09c:	89a3      	ldrh	r3, [r4, #12]
 800e09e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e0a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0a6:	81a3      	strh	r3, [r4, #12]
 800e0a8:	6126      	str	r6, [r4, #16]
 800e0aa:	6165      	str	r5, [r4, #20]
 800e0ac:	444e      	add	r6, r9
 800e0ae:	eba5 0509 	sub.w	r5, r5, r9
 800e0b2:	6026      	str	r6, [r4, #0]
 800e0b4:	60a5      	str	r5, [r4, #8]
 800e0b6:	463e      	mov	r6, r7
 800e0b8:	42be      	cmp	r6, r7
 800e0ba:	d900      	bls.n	800e0be <__ssputs_r+0x72>
 800e0bc:	463e      	mov	r6, r7
 800e0be:	6820      	ldr	r0, [r4, #0]
 800e0c0:	4632      	mov	r2, r6
 800e0c2:	4641      	mov	r1, r8
 800e0c4:	f000 fb9c 	bl	800e800 <memmove>
 800e0c8:	68a3      	ldr	r3, [r4, #8]
 800e0ca:	1b9b      	subs	r3, r3, r6
 800e0cc:	60a3      	str	r3, [r4, #8]
 800e0ce:	6823      	ldr	r3, [r4, #0]
 800e0d0:	4433      	add	r3, r6
 800e0d2:	6023      	str	r3, [r4, #0]
 800e0d4:	2000      	movs	r0, #0
 800e0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0da:	462a      	mov	r2, r5
 800e0dc:	f000 ff61 	bl	800efa2 <_realloc_r>
 800e0e0:	4606      	mov	r6, r0
 800e0e2:	2800      	cmp	r0, #0
 800e0e4:	d1e0      	bne.n	800e0a8 <__ssputs_r+0x5c>
 800e0e6:	6921      	ldr	r1, [r4, #16]
 800e0e8:	4650      	mov	r0, sl
 800e0ea:	f7fe fb81 	bl	800c7f0 <_free_r>
 800e0ee:	230c      	movs	r3, #12
 800e0f0:	f8ca 3000 	str.w	r3, [sl]
 800e0f4:	89a3      	ldrh	r3, [r4, #12]
 800e0f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0fa:	81a3      	strh	r3, [r4, #12]
 800e0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e100:	e7e9      	b.n	800e0d6 <__ssputs_r+0x8a>
	...

0800e104 <_svfiprintf_r>:
 800e104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e108:	4698      	mov	r8, r3
 800e10a:	898b      	ldrh	r3, [r1, #12]
 800e10c:	061b      	lsls	r3, r3, #24
 800e10e:	b09d      	sub	sp, #116	@ 0x74
 800e110:	4607      	mov	r7, r0
 800e112:	460d      	mov	r5, r1
 800e114:	4614      	mov	r4, r2
 800e116:	d510      	bpl.n	800e13a <_svfiprintf_r+0x36>
 800e118:	690b      	ldr	r3, [r1, #16]
 800e11a:	b973      	cbnz	r3, 800e13a <_svfiprintf_r+0x36>
 800e11c:	2140      	movs	r1, #64	@ 0x40
 800e11e:	f7fe fbdb 	bl	800c8d8 <_malloc_r>
 800e122:	6028      	str	r0, [r5, #0]
 800e124:	6128      	str	r0, [r5, #16]
 800e126:	b930      	cbnz	r0, 800e136 <_svfiprintf_r+0x32>
 800e128:	230c      	movs	r3, #12
 800e12a:	603b      	str	r3, [r7, #0]
 800e12c:	f04f 30ff 	mov.w	r0, #4294967295
 800e130:	b01d      	add	sp, #116	@ 0x74
 800e132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e136:	2340      	movs	r3, #64	@ 0x40
 800e138:	616b      	str	r3, [r5, #20]
 800e13a:	2300      	movs	r3, #0
 800e13c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e13e:	2320      	movs	r3, #32
 800e140:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e144:	f8cd 800c 	str.w	r8, [sp, #12]
 800e148:	2330      	movs	r3, #48	@ 0x30
 800e14a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e2e8 <_svfiprintf_r+0x1e4>
 800e14e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e152:	f04f 0901 	mov.w	r9, #1
 800e156:	4623      	mov	r3, r4
 800e158:	469a      	mov	sl, r3
 800e15a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e15e:	b10a      	cbz	r2, 800e164 <_svfiprintf_r+0x60>
 800e160:	2a25      	cmp	r2, #37	@ 0x25
 800e162:	d1f9      	bne.n	800e158 <_svfiprintf_r+0x54>
 800e164:	ebba 0b04 	subs.w	fp, sl, r4
 800e168:	d00b      	beq.n	800e182 <_svfiprintf_r+0x7e>
 800e16a:	465b      	mov	r3, fp
 800e16c:	4622      	mov	r2, r4
 800e16e:	4629      	mov	r1, r5
 800e170:	4638      	mov	r0, r7
 800e172:	f7ff ff6b 	bl	800e04c <__ssputs_r>
 800e176:	3001      	adds	r0, #1
 800e178:	f000 80a7 	beq.w	800e2ca <_svfiprintf_r+0x1c6>
 800e17c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e17e:	445a      	add	r2, fp
 800e180:	9209      	str	r2, [sp, #36]	@ 0x24
 800e182:	f89a 3000 	ldrb.w	r3, [sl]
 800e186:	2b00      	cmp	r3, #0
 800e188:	f000 809f 	beq.w	800e2ca <_svfiprintf_r+0x1c6>
 800e18c:	2300      	movs	r3, #0
 800e18e:	f04f 32ff 	mov.w	r2, #4294967295
 800e192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e196:	f10a 0a01 	add.w	sl, sl, #1
 800e19a:	9304      	str	r3, [sp, #16]
 800e19c:	9307      	str	r3, [sp, #28]
 800e19e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1a4:	4654      	mov	r4, sl
 800e1a6:	2205      	movs	r2, #5
 800e1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1ac:	484e      	ldr	r0, [pc, #312]	@ (800e2e8 <_svfiprintf_r+0x1e4>)
 800e1ae:	f7f2 f817 	bl	80001e0 <memchr>
 800e1b2:	9a04      	ldr	r2, [sp, #16]
 800e1b4:	b9d8      	cbnz	r0, 800e1ee <_svfiprintf_r+0xea>
 800e1b6:	06d0      	lsls	r0, r2, #27
 800e1b8:	bf44      	itt	mi
 800e1ba:	2320      	movmi	r3, #32
 800e1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1c0:	0711      	lsls	r1, r2, #28
 800e1c2:	bf44      	itt	mi
 800e1c4:	232b      	movmi	r3, #43	@ 0x2b
 800e1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800e1ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1d0:	d015      	beq.n	800e1fe <_svfiprintf_r+0xfa>
 800e1d2:	9a07      	ldr	r2, [sp, #28]
 800e1d4:	4654      	mov	r4, sl
 800e1d6:	2000      	movs	r0, #0
 800e1d8:	f04f 0c0a 	mov.w	ip, #10
 800e1dc:	4621      	mov	r1, r4
 800e1de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1e2:	3b30      	subs	r3, #48	@ 0x30
 800e1e4:	2b09      	cmp	r3, #9
 800e1e6:	d94b      	bls.n	800e280 <_svfiprintf_r+0x17c>
 800e1e8:	b1b0      	cbz	r0, 800e218 <_svfiprintf_r+0x114>
 800e1ea:	9207      	str	r2, [sp, #28]
 800e1ec:	e014      	b.n	800e218 <_svfiprintf_r+0x114>
 800e1ee:	eba0 0308 	sub.w	r3, r0, r8
 800e1f2:	fa09 f303 	lsl.w	r3, r9, r3
 800e1f6:	4313      	orrs	r3, r2
 800e1f8:	9304      	str	r3, [sp, #16]
 800e1fa:	46a2      	mov	sl, r4
 800e1fc:	e7d2      	b.n	800e1a4 <_svfiprintf_r+0xa0>
 800e1fe:	9b03      	ldr	r3, [sp, #12]
 800e200:	1d19      	adds	r1, r3, #4
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	9103      	str	r1, [sp, #12]
 800e206:	2b00      	cmp	r3, #0
 800e208:	bfbb      	ittet	lt
 800e20a:	425b      	neglt	r3, r3
 800e20c:	f042 0202 	orrlt.w	r2, r2, #2
 800e210:	9307      	strge	r3, [sp, #28]
 800e212:	9307      	strlt	r3, [sp, #28]
 800e214:	bfb8      	it	lt
 800e216:	9204      	strlt	r2, [sp, #16]
 800e218:	7823      	ldrb	r3, [r4, #0]
 800e21a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e21c:	d10a      	bne.n	800e234 <_svfiprintf_r+0x130>
 800e21e:	7863      	ldrb	r3, [r4, #1]
 800e220:	2b2a      	cmp	r3, #42	@ 0x2a
 800e222:	d132      	bne.n	800e28a <_svfiprintf_r+0x186>
 800e224:	9b03      	ldr	r3, [sp, #12]
 800e226:	1d1a      	adds	r2, r3, #4
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	9203      	str	r2, [sp, #12]
 800e22c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e230:	3402      	adds	r4, #2
 800e232:	9305      	str	r3, [sp, #20]
 800e234:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e2f8 <_svfiprintf_r+0x1f4>
 800e238:	7821      	ldrb	r1, [r4, #0]
 800e23a:	2203      	movs	r2, #3
 800e23c:	4650      	mov	r0, sl
 800e23e:	f7f1 ffcf 	bl	80001e0 <memchr>
 800e242:	b138      	cbz	r0, 800e254 <_svfiprintf_r+0x150>
 800e244:	9b04      	ldr	r3, [sp, #16]
 800e246:	eba0 000a 	sub.w	r0, r0, sl
 800e24a:	2240      	movs	r2, #64	@ 0x40
 800e24c:	4082      	lsls	r2, r0
 800e24e:	4313      	orrs	r3, r2
 800e250:	3401      	adds	r4, #1
 800e252:	9304      	str	r3, [sp, #16]
 800e254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e258:	4824      	ldr	r0, [pc, #144]	@ (800e2ec <_svfiprintf_r+0x1e8>)
 800e25a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e25e:	2206      	movs	r2, #6
 800e260:	f7f1 ffbe 	bl	80001e0 <memchr>
 800e264:	2800      	cmp	r0, #0
 800e266:	d036      	beq.n	800e2d6 <_svfiprintf_r+0x1d2>
 800e268:	4b21      	ldr	r3, [pc, #132]	@ (800e2f0 <_svfiprintf_r+0x1ec>)
 800e26a:	bb1b      	cbnz	r3, 800e2b4 <_svfiprintf_r+0x1b0>
 800e26c:	9b03      	ldr	r3, [sp, #12]
 800e26e:	3307      	adds	r3, #7
 800e270:	f023 0307 	bic.w	r3, r3, #7
 800e274:	3308      	adds	r3, #8
 800e276:	9303      	str	r3, [sp, #12]
 800e278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e27a:	4433      	add	r3, r6
 800e27c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e27e:	e76a      	b.n	800e156 <_svfiprintf_r+0x52>
 800e280:	fb0c 3202 	mla	r2, ip, r2, r3
 800e284:	460c      	mov	r4, r1
 800e286:	2001      	movs	r0, #1
 800e288:	e7a8      	b.n	800e1dc <_svfiprintf_r+0xd8>
 800e28a:	2300      	movs	r3, #0
 800e28c:	3401      	adds	r4, #1
 800e28e:	9305      	str	r3, [sp, #20]
 800e290:	4619      	mov	r1, r3
 800e292:	f04f 0c0a 	mov.w	ip, #10
 800e296:	4620      	mov	r0, r4
 800e298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e29c:	3a30      	subs	r2, #48	@ 0x30
 800e29e:	2a09      	cmp	r2, #9
 800e2a0:	d903      	bls.n	800e2aa <_svfiprintf_r+0x1a6>
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d0c6      	beq.n	800e234 <_svfiprintf_r+0x130>
 800e2a6:	9105      	str	r1, [sp, #20]
 800e2a8:	e7c4      	b.n	800e234 <_svfiprintf_r+0x130>
 800e2aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e7f0      	b.n	800e296 <_svfiprintf_r+0x192>
 800e2b4:	ab03      	add	r3, sp, #12
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	462a      	mov	r2, r5
 800e2ba:	4b0e      	ldr	r3, [pc, #56]	@ (800e2f4 <_svfiprintf_r+0x1f0>)
 800e2bc:	a904      	add	r1, sp, #16
 800e2be:	4638      	mov	r0, r7
 800e2c0:	f7fc fcba 	bl	800ac38 <_printf_float>
 800e2c4:	1c42      	adds	r2, r0, #1
 800e2c6:	4606      	mov	r6, r0
 800e2c8:	d1d6      	bne.n	800e278 <_svfiprintf_r+0x174>
 800e2ca:	89ab      	ldrh	r3, [r5, #12]
 800e2cc:	065b      	lsls	r3, r3, #25
 800e2ce:	f53f af2d 	bmi.w	800e12c <_svfiprintf_r+0x28>
 800e2d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2d4:	e72c      	b.n	800e130 <_svfiprintf_r+0x2c>
 800e2d6:	ab03      	add	r3, sp, #12
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	462a      	mov	r2, r5
 800e2dc:	4b05      	ldr	r3, [pc, #20]	@ (800e2f4 <_svfiprintf_r+0x1f0>)
 800e2de:	a904      	add	r1, sp, #16
 800e2e0:	4638      	mov	r0, r7
 800e2e2:	f7fc ff41 	bl	800b168 <_printf_i>
 800e2e6:	e7ed      	b.n	800e2c4 <_svfiprintf_r+0x1c0>
 800e2e8:	08011e85 	.word	0x08011e85
 800e2ec:	08011e8f 	.word	0x08011e8f
 800e2f0:	0800ac39 	.word	0x0800ac39
 800e2f4:	0800e04d 	.word	0x0800e04d
 800e2f8:	08011e8b 	.word	0x08011e8b

0800e2fc <__sfputc_r>:
 800e2fc:	6893      	ldr	r3, [r2, #8]
 800e2fe:	3b01      	subs	r3, #1
 800e300:	2b00      	cmp	r3, #0
 800e302:	b410      	push	{r4}
 800e304:	6093      	str	r3, [r2, #8]
 800e306:	da08      	bge.n	800e31a <__sfputc_r+0x1e>
 800e308:	6994      	ldr	r4, [r2, #24]
 800e30a:	42a3      	cmp	r3, r4
 800e30c:	db01      	blt.n	800e312 <__sfputc_r+0x16>
 800e30e:	290a      	cmp	r1, #10
 800e310:	d103      	bne.n	800e31a <__sfputc_r+0x1e>
 800e312:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e316:	f000 b9df 	b.w	800e6d8 <__swbuf_r>
 800e31a:	6813      	ldr	r3, [r2, #0]
 800e31c:	1c58      	adds	r0, r3, #1
 800e31e:	6010      	str	r0, [r2, #0]
 800e320:	7019      	strb	r1, [r3, #0]
 800e322:	4608      	mov	r0, r1
 800e324:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e328:	4770      	bx	lr

0800e32a <__sfputs_r>:
 800e32a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32c:	4606      	mov	r6, r0
 800e32e:	460f      	mov	r7, r1
 800e330:	4614      	mov	r4, r2
 800e332:	18d5      	adds	r5, r2, r3
 800e334:	42ac      	cmp	r4, r5
 800e336:	d101      	bne.n	800e33c <__sfputs_r+0x12>
 800e338:	2000      	movs	r0, #0
 800e33a:	e007      	b.n	800e34c <__sfputs_r+0x22>
 800e33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e340:	463a      	mov	r2, r7
 800e342:	4630      	mov	r0, r6
 800e344:	f7ff ffda 	bl	800e2fc <__sfputc_r>
 800e348:	1c43      	adds	r3, r0, #1
 800e34a:	d1f3      	bne.n	800e334 <__sfputs_r+0xa>
 800e34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e350 <_vfiprintf_r>:
 800e350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e354:	460d      	mov	r5, r1
 800e356:	b09d      	sub	sp, #116	@ 0x74
 800e358:	4614      	mov	r4, r2
 800e35a:	4698      	mov	r8, r3
 800e35c:	4606      	mov	r6, r0
 800e35e:	b118      	cbz	r0, 800e368 <_vfiprintf_r+0x18>
 800e360:	6a03      	ldr	r3, [r0, #32]
 800e362:	b90b      	cbnz	r3, 800e368 <_vfiprintf_r+0x18>
 800e364:	f7fd fab8 	bl	800b8d8 <__sinit>
 800e368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e36a:	07d9      	lsls	r1, r3, #31
 800e36c:	d405      	bmi.n	800e37a <_vfiprintf_r+0x2a>
 800e36e:	89ab      	ldrh	r3, [r5, #12]
 800e370:	059a      	lsls	r2, r3, #22
 800e372:	d402      	bmi.n	800e37a <_vfiprintf_r+0x2a>
 800e374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e376:	f7fd fbda 	bl	800bb2e <__retarget_lock_acquire_recursive>
 800e37a:	89ab      	ldrh	r3, [r5, #12]
 800e37c:	071b      	lsls	r3, r3, #28
 800e37e:	d501      	bpl.n	800e384 <_vfiprintf_r+0x34>
 800e380:	692b      	ldr	r3, [r5, #16]
 800e382:	b99b      	cbnz	r3, 800e3ac <_vfiprintf_r+0x5c>
 800e384:	4629      	mov	r1, r5
 800e386:	4630      	mov	r0, r6
 800e388:	f000 f9e4 	bl	800e754 <__swsetup_r>
 800e38c:	b170      	cbz	r0, 800e3ac <_vfiprintf_r+0x5c>
 800e38e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e390:	07dc      	lsls	r4, r3, #31
 800e392:	d504      	bpl.n	800e39e <_vfiprintf_r+0x4e>
 800e394:	f04f 30ff 	mov.w	r0, #4294967295
 800e398:	b01d      	add	sp, #116	@ 0x74
 800e39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e39e:	89ab      	ldrh	r3, [r5, #12]
 800e3a0:	0598      	lsls	r0, r3, #22
 800e3a2:	d4f7      	bmi.n	800e394 <_vfiprintf_r+0x44>
 800e3a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3a6:	f7fd fbc3 	bl	800bb30 <__retarget_lock_release_recursive>
 800e3aa:	e7f3      	b.n	800e394 <_vfiprintf_r+0x44>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3b0:	2320      	movs	r3, #32
 800e3b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3ba:	2330      	movs	r3, #48	@ 0x30
 800e3bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e56c <_vfiprintf_r+0x21c>
 800e3c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3c4:	f04f 0901 	mov.w	r9, #1
 800e3c8:	4623      	mov	r3, r4
 800e3ca:	469a      	mov	sl, r3
 800e3cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3d0:	b10a      	cbz	r2, 800e3d6 <_vfiprintf_r+0x86>
 800e3d2:	2a25      	cmp	r2, #37	@ 0x25
 800e3d4:	d1f9      	bne.n	800e3ca <_vfiprintf_r+0x7a>
 800e3d6:	ebba 0b04 	subs.w	fp, sl, r4
 800e3da:	d00b      	beq.n	800e3f4 <_vfiprintf_r+0xa4>
 800e3dc:	465b      	mov	r3, fp
 800e3de:	4622      	mov	r2, r4
 800e3e0:	4629      	mov	r1, r5
 800e3e2:	4630      	mov	r0, r6
 800e3e4:	f7ff ffa1 	bl	800e32a <__sfputs_r>
 800e3e8:	3001      	adds	r0, #1
 800e3ea:	f000 80a7 	beq.w	800e53c <_vfiprintf_r+0x1ec>
 800e3ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3f0:	445a      	add	r2, fp
 800e3f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	f000 809f 	beq.w	800e53c <_vfiprintf_r+0x1ec>
 800e3fe:	2300      	movs	r3, #0
 800e400:	f04f 32ff 	mov.w	r2, #4294967295
 800e404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e408:	f10a 0a01 	add.w	sl, sl, #1
 800e40c:	9304      	str	r3, [sp, #16]
 800e40e:	9307      	str	r3, [sp, #28]
 800e410:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e414:	931a      	str	r3, [sp, #104]	@ 0x68
 800e416:	4654      	mov	r4, sl
 800e418:	2205      	movs	r2, #5
 800e41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e41e:	4853      	ldr	r0, [pc, #332]	@ (800e56c <_vfiprintf_r+0x21c>)
 800e420:	f7f1 fede 	bl	80001e0 <memchr>
 800e424:	9a04      	ldr	r2, [sp, #16]
 800e426:	b9d8      	cbnz	r0, 800e460 <_vfiprintf_r+0x110>
 800e428:	06d1      	lsls	r1, r2, #27
 800e42a:	bf44      	itt	mi
 800e42c:	2320      	movmi	r3, #32
 800e42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e432:	0713      	lsls	r3, r2, #28
 800e434:	bf44      	itt	mi
 800e436:	232b      	movmi	r3, #43	@ 0x2b
 800e438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e43c:	f89a 3000 	ldrb.w	r3, [sl]
 800e440:	2b2a      	cmp	r3, #42	@ 0x2a
 800e442:	d015      	beq.n	800e470 <_vfiprintf_r+0x120>
 800e444:	9a07      	ldr	r2, [sp, #28]
 800e446:	4654      	mov	r4, sl
 800e448:	2000      	movs	r0, #0
 800e44a:	f04f 0c0a 	mov.w	ip, #10
 800e44e:	4621      	mov	r1, r4
 800e450:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e454:	3b30      	subs	r3, #48	@ 0x30
 800e456:	2b09      	cmp	r3, #9
 800e458:	d94b      	bls.n	800e4f2 <_vfiprintf_r+0x1a2>
 800e45a:	b1b0      	cbz	r0, 800e48a <_vfiprintf_r+0x13a>
 800e45c:	9207      	str	r2, [sp, #28]
 800e45e:	e014      	b.n	800e48a <_vfiprintf_r+0x13a>
 800e460:	eba0 0308 	sub.w	r3, r0, r8
 800e464:	fa09 f303 	lsl.w	r3, r9, r3
 800e468:	4313      	orrs	r3, r2
 800e46a:	9304      	str	r3, [sp, #16]
 800e46c:	46a2      	mov	sl, r4
 800e46e:	e7d2      	b.n	800e416 <_vfiprintf_r+0xc6>
 800e470:	9b03      	ldr	r3, [sp, #12]
 800e472:	1d19      	adds	r1, r3, #4
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	9103      	str	r1, [sp, #12]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	bfbb      	ittet	lt
 800e47c:	425b      	neglt	r3, r3
 800e47e:	f042 0202 	orrlt.w	r2, r2, #2
 800e482:	9307      	strge	r3, [sp, #28]
 800e484:	9307      	strlt	r3, [sp, #28]
 800e486:	bfb8      	it	lt
 800e488:	9204      	strlt	r2, [sp, #16]
 800e48a:	7823      	ldrb	r3, [r4, #0]
 800e48c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e48e:	d10a      	bne.n	800e4a6 <_vfiprintf_r+0x156>
 800e490:	7863      	ldrb	r3, [r4, #1]
 800e492:	2b2a      	cmp	r3, #42	@ 0x2a
 800e494:	d132      	bne.n	800e4fc <_vfiprintf_r+0x1ac>
 800e496:	9b03      	ldr	r3, [sp, #12]
 800e498:	1d1a      	adds	r2, r3, #4
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	9203      	str	r2, [sp, #12]
 800e49e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4a2:	3402      	adds	r4, #2
 800e4a4:	9305      	str	r3, [sp, #20]
 800e4a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e57c <_vfiprintf_r+0x22c>
 800e4aa:	7821      	ldrb	r1, [r4, #0]
 800e4ac:	2203      	movs	r2, #3
 800e4ae:	4650      	mov	r0, sl
 800e4b0:	f7f1 fe96 	bl	80001e0 <memchr>
 800e4b4:	b138      	cbz	r0, 800e4c6 <_vfiprintf_r+0x176>
 800e4b6:	9b04      	ldr	r3, [sp, #16]
 800e4b8:	eba0 000a 	sub.w	r0, r0, sl
 800e4bc:	2240      	movs	r2, #64	@ 0x40
 800e4be:	4082      	lsls	r2, r0
 800e4c0:	4313      	orrs	r3, r2
 800e4c2:	3401      	adds	r4, #1
 800e4c4:	9304      	str	r3, [sp, #16]
 800e4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ca:	4829      	ldr	r0, [pc, #164]	@ (800e570 <_vfiprintf_r+0x220>)
 800e4cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4d0:	2206      	movs	r2, #6
 800e4d2:	f7f1 fe85 	bl	80001e0 <memchr>
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	d03f      	beq.n	800e55a <_vfiprintf_r+0x20a>
 800e4da:	4b26      	ldr	r3, [pc, #152]	@ (800e574 <_vfiprintf_r+0x224>)
 800e4dc:	bb1b      	cbnz	r3, 800e526 <_vfiprintf_r+0x1d6>
 800e4de:	9b03      	ldr	r3, [sp, #12]
 800e4e0:	3307      	adds	r3, #7
 800e4e2:	f023 0307 	bic.w	r3, r3, #7
 800e4e6:	3308      	adds	r3, #8
 800e4e8:	9303      	str	r3, [sp, #12]
 800e4ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ec:	443b      	add	r3, r7
 800e4ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4f0:	e76a      	b.n	800e3c8 <_vfiprintf_r+0x78>
 800e4f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4f6:	460c      	mov	r4, r1
 800e4f8:	2001      	movs	r0, #1
 800e4fa:	e7a8      	b.n	800e44e <_vfiprintf_r+0xfe>
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	3401      	adds	r4, #1
 800e500:	9305      	str	r3, [sp, #20]
 800e502:	4619      	mov	r1, r3
 800e504:	f04f 0c0a 	mov.w	ip, #10
 800e508:	4620      	mov	r0, r4
 800e50a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e50e:	3a30      	subs	r2, #48	@ 0x30
 800e510:	2a09      	cmp	r2, #9
 800e512:	d903      	bls.n	800e51c <_vfiprintf_r+0x1cc>
 800e514:	2b00      	cmp	r3, #0
 800e516:	d0c6      	beq.n	800e4a6 <_vfiprintf_r+0x156>
 800e518:	9105      	str	r1, [sp, #20]
 800e51a:	e7c4      	b.n	800e4a6 <_vfiprintf_r+0x156>
 800e51c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e520:	4604      	mov	r4, r0
 800e522:	2301      	movs	r3, #1
 800e524:	e7f0      	b.n	800e508 <_vfiprintf_r+0x1b8>
 800e526:	ab03      	add	r3, sp, #12
 800e528:	9300      	str	r3, [sp, #0]
 800e52a:	462a      	mov	r2, r5
 800e52c:	4b12      	ldr	r3, [pc, #72]	@ (800e578 <_vfiprintf_r+0x228>)
 800e52e:	a904      	add	r1, sp, #16
 800e530:	4630      	mov	r0, r6
 800e532:	f7fc fb81 	bl	800ac38 <_printf_float>
 800e536:	4607      	mov	r7, r0
 800e538:	1c78      	adds	r0, r7, #1
 800e53a:	d1d6      	bne.n	800e4ea <_vfiprintf_r+0x19a>
 800e53c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e53e:	07d9      	lsls	r1, r3, #31
 800e540:	d405      	bmi.n	800e54e <_vfiprintf_r+0x1fe>
 800e542:	89ab      	ldrh	r3, [r5, #12]
 800e544:	059a      	lsls	r2, r3, #22
 800e546:	d402      	bmi.n	800e54e <_vfiprintf_r+0x1fe>
 800e548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e54a:	f7fd faf1 	bl	800bb30 <__retarget_lock_release_recursive>
 800e54e:	89ab      	ldrh	r3, [r5, #12]
 800e550:	065b      	lsls	r3, r3, #25
 800e552:	f53f af1f 	bmi.w	800e394 <_vfiprintf_r+0x44>
 800e556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e558:	e71e      	b.n	800e398 <_vfiprintf_r+0x48>
 800e55a:	ab03      	add	r3, sp, #12
 800e55c:	9300      	str	r3, [sp, #0]
 800e55e:	462a      	mov	r2, r5
 800e560:	4b05      	ldr	r3, [pc, #20]	@ (800e578 <_vfiprintf_r+0x228>)
 800e562:	a904      	add	r1, sp, #16
 800e564:	4630      	mov	r0, r6
 800e566:	f7fc fdff 	bl	800b168 <_printf_i>
 800e56a:	e7e4      	b.n	800e536 <_vfiprintf_r+0x1e6>
 800e56c:	08011e85 	.word	0x08011e85
 800e570:	08011e8f 	.word	0x08011e8f
 800e574:	0800ac39 	.word	0x0800ac39
 800e578:	0800e32b 	.word	0x0800e32b
 800e57c:	08011e8b 	.word	0x08011e8b

0800e580 <__sflush_r>:
 800e580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e588:	0716      	lsls	r6, r2, #28
 800e58a:	4605      	mov	r5, r0
 800e58c:	460c      	mov	r4, r1
 800e58e:	d454      	bmi.n	800e63a <__sflush_r+0xba>
 800e590:	684b      	ldr	r3, [r1, #4]
 800e592:	2b00      	cmp	r3, #0
 800e594:	dc02      	bgt.n	800e59c <__sflush_r+0x1c>
 800e596:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e598:	2b00      	cmp	r3, #0
 800e59a:	dd48      	ble.n	800e62e <__sflush_r+0xae>
 800e59c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e59e:	2e00      	cmp	r6, #0
 800e5a0:	d045      	beq.n	800e62e <__sflush_r+0xae>
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e5a8:	682f      	ldr	r7, [r5, #0]
 800e5aa:	6a21      	ldr	r1, [r4, #32]
 800e5ac:	602b      	str	r3, [r5, #0]
 800e5ae:	d030      	beq.n	800e612 <__sflush_r+0x92>
 800e5b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e5b2:	89a3      	ldrh	r3, [r4, #12]
 800e5b4:	0759      	lsls	r1, r3, #29
 800e5b6:	d505      	bpl.n	800e5c4 <__sflush_r+0x44>
 800e5b8:	6863      	ldr	r3, [r4, #4]
 800e5ba:	1ad2      	subs	r2, r2, r3
 800e5bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e5be:	b10b      	cbz	r3, 800e5c4 <__sflush_r+0x44>
 800e5c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e5c2:	1ad2      	subs	r2, r2, r3
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5c8:	6a21      	ldr	r1, [r4, #32]
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	47b0      	blx	r6
 800e5ce:	1c43      	adds	r3, r0, #1
 800e5d0:	89a3      	ldrh	r3, [r4, #12]
 800e5d2:	d106      	bne.n	800e5e2 <__sflush_r+0x62>
 800e5d4:	6829      	ldr	r1, [r5, #0]
 800e5d6:	291d      	cmp	r1, #29
 800e5d8:	d82b      	bhi.n	800e632 <__sflush_r+0xb2>
 800e5da:	4a2a      	ldr	r2, [pc, #168]	@ (800e684 <__sflush_r+0x104>)
 800e5dc:	40ca      	lsrs	r2, r1
 800e5de:	07d6      	lsls	r6, r2, #31
 800e5e0:	d527      	bpl.n	800e632 <__sflush_r+0xb2>
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	6062      	str	r2, [r4, #4]
 800e5e6:	04d9      	lsls	r1, r3, #19
 800e5e8:	6922      	ldr	r2, [r4, #16]
 800e5ea:	6022      	str	r2, [r4, #0]
 800e5ec:	d504      	bpl.n	800e5f8 <__sflush_r+0x78>
 800e5ee:	1c42      	adds	r2, r0, #1
 800e5f0:	d101      	bne.n	800e5f6 <__sflush_r+0x76>
 800e5f2:	682b      	ldr	r3, [r5, #0]
 800e5f4:	b903      	cbnz	r3, 800e5f8 <__sflush_r+0x78>
 800e5f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e5f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e5fa:	602f      	str	r7, [r5, #0]
 800e5fc:	b1b9      	cbz	r1, 800e62e <__sflush_r+0xae>
 800e5fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e602:	4299      	cmp	r1, r3
 800e604:	d002      	beq.n	800e60c <__sflush_r+0x8c>
 800e606:	4628      	mov	r0, r5
 800e608:	f7fe f8f2 	bl	800c7f0 <_free_r>
 800e60c:	2300      	movs	r3, #0
 800e60e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e610:	e00d      	b.n	800e62e <__sflush_r+0xae>
 800e612:	2301      	movs	r3, #1
 800e614:	4628      	mov	r0, r5
 800e616:	47b0      	blx	r6
 800e618:	4602      	mov	r2, r0
 800e61a:	1c50      	adds	r0, r2, #1
 800e61c:	d1c9      	bne.n	800e5b2 <__sflush_r+0x32>
 800e61e:	682b      	ldr	r3, [r5, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d0c6      	beq.n	800e5b2 <__sflush_r+0x32>
 800e624:	2b1d      	cmp	r3, #29
 800e626:	d001      	beq.n	800e62c <__sflush_r+0xac>
 800e628:	2b16      	cmp	r3, #22
 800e62a:	d11e      	bne.n	800e66a <__sflush_r+0xea>
 800e62c:	602f      	str	r7, [r5, #0]
 800e62e:	2000      	movs	r0, #0
 800e630:	e022      	b.n	800e678 <__sflush_r+0xf8>
 800e632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e636:	b21b      	sxth	r3, r3
 800e638:	e01b      	b.n	800e672 <__sflush_r+0xf2>
 800e63a:	690f      	ldr	r7, [r1, #16]
 800e63c:	2f00      	cmp	r7, #0
 800e63e:	d0f6      	beq.n	800e62e <__sflush_r+0xae>
 800e640:	0793      	lsls	r3, r2, #30
 800e642:	680e      	ldr	r6, [r1, #0]
 800e644:	bf08      	it	eq
 800e646:	694b      	ldreq	r3, [r1, #20]
 800e648:	600f      	str	r7, [r1, #0]
 800e64a:	bf18      	it	ne
 800e64c:	2300      	movne	r3, #0
 800e64e:	eba6 0807 	sub.w	r8, r6, r7
 800e652:	608b      	str	r3, [r1, #8]
 800e654:	f1b8 0f00 	cmp.w	r8, #0
 800e658:	dde9      	ble.n	800e62e <__sflush_r+0xae>
 800e65a:	6a21      	ldr	r1, [r4, #32]
 800e65c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e65e:	4643      	mov	r3, r8
 800e660:	463a      	mov	r2, r7
 800e662:	4628      	mov	r0, r5
 800e664:	47b0      	blx	r6
 800e666:	2800      	cmp	r0, #0
 800e668:	dc08      	bgt.n	800e67c <__sflush_r+0xfc>
 800e66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e672:	81a3      	strh	r3, [r4, #12]
 800e674:	f04f 30ff 	mov.w	r0, #4294967295
 800e678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e67c:	4407      	add	r7, r0
 800e67e:	eba8 0800 	sub.w	r8, r8, r0
 800e682:	e7e7      	b.n	800e654 <__sflush_r+0xd4>
 800e684:	20400001 	.word	0x20400001

0800e688 <_fflush_r>:
 800e688:	b538      	push	{r3, r4, r5, lr}
 800e68a:	690b      	ldr	r3, [r1, #16]
 800e68c:	4605      	mov	r5, r0
 800e68e:	460c      	mov	r4, r1
 800e690:	b913      	cbnz	r3, 800e698 <_fflush_r+0x10>
 800e692:	2500      	movs	r5, #0
 800e694:	4628      	mov	r0, r5
 800e696:	bd38      	pop	{r3, r4, r5, pc}
 800e698:	b118      	cbz	r0, 800e6a2 <_fflush_r+0x1a>
 800e69a:	6a03      	ldr	r3, [r0, #32]
 800e69c:	b90b      	cbnz	r3, 800e6a2 <_fflush_r+0x1a>
 800e69e:	f7fd f91b 	bl	800b8d8 <__sinit>
 800e6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d0f3      	beq.n	800e692 <_fflush_r+0xa>
 800e6aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e6ac:	07d0      	lsls	r0, r2, #31
 800e6ae:	d404      	bmi.n	800e6ba <_fflush_r+0x32>
 800e6b0:	0599      	lsls	r1, r3, #22
 800e6b2:	d402      	bmi.n	800e6ba <_fflush_r+0x32>
 800e6b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6b6:	f7fd fa3a 	bl	800bb2e <__retarget_lock_acquire_recursive>
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	4621      	mov	r1, r4
 800e6be:	f7ff ff5f 	bl	800e580 <__sflush_r>
 800e6c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e6c4:	07da      	lsls	r2, r3, #31
 800e6c6:	4605      	mov	r5, r0
 800e6c8:	d4e4      	bmi.n	800e694 <_fflush_r+0xc>
 800e6ca:	89a3      	ldrh	r3, [r4, #12]
 800e6cc:	059b      	lsls	r3, r3, #22
 800e6ce:	d4e1      	bmi.n	800e694 <_fflush_r+0xc>
 800e6d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6d2:	f7fd fa2d 	bl	800bb30 <__retarget_lock_release_recursive>
 800e6d6:	e7dd      	b.n	800e694 <_fflush_r+0xc>

0800e6d8 <__swbuf_r>:
 800e6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6da:	460e      	mov	r6, r1
 800e6dc:	4614      	mov	r4, r2
 800e6de:	4605      	mov	r5, r0
 800e6e0:	b118      	cbz	r0, 800e6ea <__swbuf_r+0x12>
 800e6e2:	6a03      	ldr	r3, [r0, #32]
 800e6e4:	b90b      	cbnz	r3, 800e6ea <__swbuf_r+0x12>
 800e6e6:	f7fd f8f7 	bl	800b8d8 <__sinit>
 800e6ea:	69a3      	ldr	r3, [r4, #24]
 800e6ec:	60a3      	str	r3, [r4, #8]
 800e6ee:	89a3      	ldrh	r3, [r4, #12]
 800e6f0:	071a      	lsls	r2, r3, #28
 800e6f2:	d501      	bpl.n	800e6f8 <__swbuf_r+0x20>
 800e6f4:	6923      	ldr	r3, [r4, #16]
 800e6f6:	b943      	cbnz	r3, 800e70a <__swbuf_r+0x32>
 800e6f8:	4621      	mov	r1, r4
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	f000 f82a 	bl	800e754 <__swsetup_r>
 800e700:	b118      	cbz	r0, 800e70a <__swbuf_r+0x32>
 800e702:	f04f 37ff 	mov.w	r7, #4294967295
 800e706:	4638      	mov	r0, r7
 800e708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e70a:	6823      	ldr	r3, [r4, #0]
 800e70c:	6922      	ldr	r2, [r4, #16]
 800e70e:	1a98      	subs	r0, r3, r2
 800e710:	6963      	ldr	r3, [r4, #20]
 800e712:	b2f6      	uxtb	r6, r6
 800e714:	4283      	cmp	r3, r0
 800e716:	4637      	mov	r7, r6
 800e718:	dc05      	bgt.n	800e726 <__swbuf_r+0x4e>
 800e71a:	4621      	mov	r1, r4
 800e71c:	4628      	mov	r0, r5
 800e71e:	f7ff ffb3 	bl	800e688 <_fflush_r>
 800e722:	2800      	cmp	r0, #0
 800e724:	d1ed      	bne.n	800e702 <__swbuf_r+0x2a>
 800e726:	68a3      	ldr	r3, [r4, #8]
 800e728:	3b01      	subs	r3, #1
 800e72a:	60a3      	str	r3, [r4, #8]
 800e72c:	6823      	ldr	r3, [r4, #0]
 800e72e:	1c5a      	adds	r2, r3, #1
 800e730:	6022      	str	r2, [r4, #0]
 800e732:	701e      	strb	r6, [r3, #0]
 800e734:	6962      	ldr	r2, [r4, #20]
 800e736:	1c43      	adds	r3, r0, #1
 800e738:	429a      	cmp	r2, r3
 800e73a:	d004      	beq.n	800e746 <__swbuf_r+0x6e>
 800e73c:	89a3      	ldrh	r3, [r4, #12]
 800e73e:	07db      	lsls	r3, r3, #31
 800e740:	d5e1      	bpl.n	800e706 <__swbuf_r+0x2e>
 800e742:	2e0a      	cmp	r6, #10
 800e744:	d1df      	bne.n	800e706 <__swbuf_r+0x2e>
 800e746:	4621      	mov	r1, r4
 800e748:	4628      	mov	r0, r5
 800e74a:	f7ff ff9d 	bl	800e688 <_fflush_r>
 800e74e:	2800      	cmp	r0, #0
 800e750:	d0d9      	beq.n	800e706 <__swbuf_r+0x2e>
 800e752:	e7d6      	b.n	800e702 <__swbuf_r+0x2a>

0800e754 <__swsetup_r>:
 800e754:	b538      	push	{r3, r4, r5, lr}
 800e756:	4b29      	ldr	r3, [pc, #164]	@ (800e7fc <__swsetup_r+0xa8>)
 800e758:	4605      	mov	r5, r0
 800e75a:	6818      	ldr	r0, [r3, #0]
 800e75c:	460c      	mov	r4, r1
 800e75e:	b118      	cbz	r0, 800e768 <__swsetup_r+0x14>
 800e760:	6a03      	ldr	r3, [r0, #32]
 800e762:	b90b      	cbnz	r3, 800e768 <__swsetup_r+0x14>
 800e764:	f7fd f8b8 	bl	800b8d8 <__sinit>
 800e768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e76c:	0719      	lsls	r1, r3, #28
 800e76e:	d422      	bmi.n	800e7b6 <__swsetup_r+0x62>
 800e770:	06da      	lsls	r2, r3, #27
 800e772:	d407      	bmi.n	800e784 <__swsetup_r+0x30>
 800e774:	2209      	movs	r2, #9
 800e776:	602a      	str	r2, [r5, #0]
 800e778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e77c:	81a3      	strh	r3, [r4, #12]
 800e77e:	f04f 30ff 	mov.w	r0, #4294967295
 800e782:	e033      	b.n	800e7ec <__swsetup_r+0x98>
 800e784:	0758      	lsls	r0, r3, #29
 800e786:	d512      	bpl.n	800e7ae <__swsetup_r+0x5a>
 800e788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e78a:	b141      	cbz	r1, 800e79e <__swsetup_r+0x4a>
 800e78c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e790:	4299      	cmp	r1, r3
 800e792:	d002      	beq.n	800e79a <__swsetup_r+0x46>
 800e794:	4628      	mov	r0, r5
 800e796:	f7fe f82b 	bl	800c7f0 <_free_r>
 800e79a:	2300      	movs	r3, #0
 800e79c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e79e:	89a3      	ldrh	r3, [r4, #12]
 800e7a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e7a4:	81a3      	strh	r3, [r4, #12]
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	6063      	str	r3, [r4, #4]
 800e7aa:	6923      	ldr	r3, [r4, #16]
 800e7ac:	6023      	str	r3, [r4, #0]
 800e7ae:	89a3      	ldrh	r3, [r4, #12]
 800e7b0:	f043 0308 	orr.w	r3, r3, #8
 800e7b4:	81a3      	strh	r3, [r4, #12]
 800e7b6:	6923      	ldr	r3, [r4, #16]
 800e7b8:	b94b      	cbnz	r3, 800e7ce <__swsetup_r+0x7a>
 800e7ba:	89a3      	ldrh	r3, [r4, #12]
 800e7bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e7c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7c4:	d003      	beq.n	800e7ce <__swsetup_r+0x7a>
 800e7c6:	4621      	mov	r1, r4
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	f000 fc5d 	bl	800f088 <__smakebuf_r>
 800e7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7d2:	f013 0201 	ands.w	r2, r3, #1
 800e7d6:	d00a      	beq.n	800e7ee <__swsetup_r+0x9a>
 800e7d8:	2200      	movs	r2, #0
 800e7da:	60a2      	str	r2, [r4, #8]
 800e7dc:	6962      	ldr	r2, [r4, #20]
 800e7de:	4252      	negs	r2, r2
 800e7e0:	61a2      	str	r2, [r4, #24]
 800e7e2:	6922      	ldr	r2, [r4, #16]
 800e7e4:	b942      	cbnz	r2, 800e7f8 <__swsetup_r+0xa4>
 800e7e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e7ea:	d1c5      	bne.n	800e778 <__swsetup_r+0x24>
 800e7ec:	bd38      	pop	{r3, r4, r5, pc}
 800e7ee:	0799      	lsls	r1, r3, #30
 800e7f0:	bf58      	it	pl
 800e7f2:	6962      	ldrpl	r2, [r4, #20]
 800e7f4:	60a2      	str	r2, [r4, #8]
 800e7f6:	e7f4      	b.n	800e7e2 <__swsetup_r+0x8e>
 800e7f8:	2000      	movs	r0, #0
 800e7fa:	e7f7      	b.n	800e7ec <__swsetup_r+0x98>
 800e7fc:	20000038 	.word	0x20000038

0800e800 <memmove>:
 800e800:	4288      	cmp	r0, r1
 800e802:	b510      	push	{r4, lr}
 800e804:	eb01 0402 	add.w	r4, r1, r2
 800e808:	d902      	bls.n	800e810 <memmove+0x10>
 800e80a:	4284      	cmp	r4, r0
 800e80c:	4623      	mov	r3, r4
 800e80e:	d807      	bhi.n	800e820 <memmove+0x20>
 800e810:	1e43      	subs	r3, r0, #1
 800e812:	42a1      	cmp	r1, r4
 800e814:	d008      	beq.n	800e828 <memmove+0x28>
 800e816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e81a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e81e:	e7f8      	b.n	800e812 <memmove+0x12>
 800e820:	4402      	add	r2, r0
 800e822:	4601      	mov	r1, r0
 800e824:	428a      	cmp	r2, r1
 800e826:	d100      	bne.n	800e82a <memmove+0x2a>
 800e828:	bd10      	pop	{r4, pc}
 800e82a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e82e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e832:	e7f7      	b.n	800e824 <memmove+0x24>

0800e834 <strncmp>:
 800e834:	b510      	push	{r4, lr}
 800e836:	b16a      	cbz	r2, 800e854 <strncmp+0x20>
 800e838:	3901      	subs	r1, #1
 800e83a:	1884      	adds	r4, r0, r2
 800e83c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e840:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e844:	429a      	cmp	r2, r3
 800e846:	d103      	bne.n	800e850 <strncmp+0x1c>
 800e848:	42a0      	cmp	r0, r4
 800e84a:	d001      	beq.n	800e850 <strncmp+0x1c>
 800e84c:	2a00      	cmp	r2, #0
 800e84e:	d1f5      	bne.n	800e83c <strncmp+0x8>
 800e850:	1ad0      	subs	r0, r2, r3
 800e852:	bd10      	pop	{r4, pc}
 800e854:	4610      	mov	r0, r2
 800e856:	e7fc      	b.n	800e852 <strncmp+0x1e>

0800e858 <_sbrk_r>:
 800e858:	b538      	push	{r3, r4, r5, lr}
 800e85a:	4d06      	ldr	r5, [pc, #24]	@ (800e874 <_sbrk_r+0x1c>)
 800e85c:	2300      	movs	r3, #0
 800e85e:	4604      	mov	r4, r0
 800e860:	4608      	mov	r0, r1
 800e862:	602b      	str	r3, [r5, #0]
 800e864:	f7f8 fb10 	bl	8006e88 <_sbrk>
 800e868:	1c43      	adds	r3, r0, #1
 800e86a:	d102      	bne.n	800e872 <_sbrk_r+0x1a>
 800e86c:	682b      	ldr	r3, [r5, #0]
 800e86e:	b103      	cbz	r3, 800e872 <_sbrk_r+0x1a>
 800e870:	6023      	str	r3, [r4, #0]
 800e872:	bd38      	pop	{r3, r4, r5, pc}
 800e874:	200008f0 	.word	0x200008f0

0800e878 <memcpy>:
 800e878:	440a      	add	r2, r1
 800e87a:	4291      	cmp	r1, r2
 800e87c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e880:	d100      	bne.n	800e884 <memcpy+0xc>
 800e882:	4770      	bx	lr
 800e884:	b510      	push	{r4, lr}
 800e886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e88a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e88e:	4291      	cmp	r1, r2
 800e890:	d1f9      	bne.n	800e886 <memcpy+0xe>
 800e892:	bd10      	pop	{r4, pc}
 800e894:	0000      	movs	r0, r0
	...

0800e898 <nan>:
 800e898:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e8a0 <nan+0x8>
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop
 800e8a0:	00000000 	.word	0x00000000
 800e8a4:	7ff80000 	.word	0x7ff80000

0800e8a8 <__assert_func>:
 800e8a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8aa:	4614      	mov	r4, r2
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	4b09      	ldr	r3, [pc, #36]	@ (800e8d4 <__assert_func+0x2c>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4605      	mov	r5, r0
 800e8b4:	68d8      	ldr	r0, [r3, #12]
 800e8b6:	b14c      	cbz	r4, 800e8cc <__assert_func+0x24>
 800e8b8:	4b07      	ldr	r3, [pc, #28]	@ (800e8d8 <__assert_func+0x30>)
 800e8ba:	9100      	str	r1, [sp, #0]
 800e8bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8c0:	4906      	ldr	r1, [pc, #24]	@ (800e8dc <__assert_func+0x34>)
 800e8c2:	462b      	mov	r3, r5
 800e8c4:	f000 fba8 	bl	800f018 <fiprintf>
 800e8c8:	f000 fc3c 	bl	800f144 <abort>
 800e8cc:	4b04      	ldr	r3, [pc, #16]	@ (800e8e0 <__assert_func+0x38>)
 800e8ce:	461c      	mov	r4, r3
 800e8d0:	e7f3      	b.n	800e8ba <__assert_func+0x12>
 800e8d2:	bf00      	nop
 800e8d4:	20000038 	.word	0x20000038
 800e8d8:	08011e9e 	.word	0x08011e9e
 800e8dc:	08011eab 	.word	0x08011eab
 800e8e0:	08011ed9 	.word	0x08011ed9

0800e8e4 <_calloc_r>:
 800e8e4:	b570      	push	{r4, r5, r6, lr}
 800e8e6:	fba1 5402 	umull	r5, r4, r1, r2
 800e8ea:	b934      	cbnz	r4, 800e8fa <_calloc_r+0x16>
 800e8ec:	4629      	mov	r1, r5
 800e8ee:	f7fd fff3 	bl	800c8d8 <_malloc_r>
 800e8f2:	4606      	mov	r6, r0
 800e8f4:	b928      	cbnz	r0, 800e902 <_calloc_r+0x1e>
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	bd70      	pop	{r4, r5, r6, pc}
 800e8fa:	220c      	movs	r2, #12
 800e8fc:	6002      	str	r2, [r0, #0]
 800e8fe:	2600      	movs	r6, #0
 800e900:	e7f9      	b.n	800e8f6 <_calloc_r+0x12>
 800e902:	462a      	mov	r2, r5
 800e904:	4621      	mov	r1, r4
 800e906:	f7fd f894 	bl	800ba32 <memset>
 800e90a:	e7f4      	b.n	800e8f6 <_calloc_r+0x12>

0800e90c <rshift>:
 800e90c:	6903      	ldr	r3, [r0, #16]
 800e90e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e912:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e916:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e91a:	f100 0414 	add.w	r4, r0, #20
 800e91e:	dd45      	ble.n	800e9ac <rshift+0xa0>
 800e920:	f011 011f 	ands.w	r1, r1, #31
 800e924:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e928:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e92c:	d10c      	bne.n	800e948 <rshift+0x3c>
 800e92e:	f100 0710 	add.w	r7, r0, #16
 800e932:	4629      	mov	r1, r5
 800e934:	42b1      	cmp	r1, r6
 800e936:	d334      	bcc.n	800e9a2 <rshift+0x96>
 800e938:	1a9b      	subs	r3, r3, r2
 800e93a:	009b      	lsls	r3, r3, #2
 800e93c:	1eea      	subs	r2, r5, #3
 800e93e:	4296      	cmp	r6, r2
 800e940:	bf38      	it	cc
 800e942:	2300      	movcc	r3, #0
 800e944:	4423      	add	r3, r4
 800e946:	e015      	b.n	800e974 <rshift+0x68>
 800e948:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e94c:	f1c1 0820 	rsb	r8, r1, #32
 800e950:	40cf      	lsrs	r7, r1
 800e952:	f105 0e04 	add.w	lr, r5, #4
 800e956:	46a1      	mov	r9, r4
 800e958:	4576      	cmp	r6, lr
 800e95a:	46f4      	mov	ip, lr
 800e95c:	d815      	bhi.n	800e98a <rshift+0x7e>
 800e95e:	1a9a      	subs	r2, r3, r2
 800e960:	0092      	lsls	r2, r2, #2
 800e962:	3a04      	subs	r2, #4
 800e964:	3501      	adds	r5, #1
 800e966:	42ae      	cmp	r6, r5
 800e968:	bf38      	it	cc
 800e96a:	2200      	movcc	r2, #0
 800e96c:	18a3      	adds	r3, r4, r2
 800e96e:	50a7      	str	r7, [r4, r2]
 800e970:	b107      	cbz	r7, 800e974 <rshift+0x68>
 800e972:	3304      	adds	r3, #4
 800e974:	1b1a      	subs	r2, r3, r4
 800e976:	42a3      	cmp	r3, r4
 800e978:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e97c:	bf08      	it	eq
 800e97e:	2300      	moveq	r3, #0
 800e980:	6102      	str	r2, [r0, #16]
 800e982:	bf08      	it	eq
 800e984:	6143      	streq	r3, [r0, #20]
 800e986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e98a:	f8dc c000 	ldr.w	ip, [ip]
 800e98e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e992:	ea4c 0707 	orr.w	r7, ip, r7
 800e996:	f849 7b04 	str.w	r7, [r9], #4
 800e99a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e99e:	40cf      	lsrs	r7, r1
 800e9a0:	e7da      	b.n	800e958 <rshift+0x4c>
 800e9a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e9a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e9aa:	e7c3      	b.n	800e934 <rshift+0x28>
 800e9ac:	4623      	mov	r3, r4
 800e9ae:	e7e1      	b.n	800e974 <rshift+0x68>

0800e9b0 <__hexdig_fun>:
 800e9b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e9b4:	2b09      	cmp	r3, #9
 800e9b6:	d802      	bhi.n	800e9be <__hexdig_fun+0xe>
 800e9b8:	3820      	subs	r0, #32
 800e9ba:	b2c0      	uxtb	r0, r0
 800e9bc:	4770      	bx	lr
 800e9be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e9c2:	2b05      	cmp	r3, #5
 800e9c4:	d801      	bhi.n	800e9ca <__hexdig_fun+0x1a>
 800e9c6:	3847      	subs	r0, #71	@ 0x47
 800e9c8:	e7f7      	b.n	800e9ba <__hexdig_fun+0xa>
 800e9ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e9ce:	2b05      	cmp	r3, #5
 800e9d0:	d801      	bhi.n	800e9d6 <__hexdig_fun+0x26>
 800e9d2:	3827      	subs	r0, #39	@ 0x27
 800e9d4:	e7f1      	b.n	800e9ba <__hexdig_fun+0xa>
 800e9d6:	2000      	movs	r0, #0
 800e9d8:	4770      	bx	lr
	...

0800e9dc <__gethex>:
 800e9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e0:	b085      	sub	sp, #20
 800e9e2:	468a      	mov	sl, r1
 800e9e4:	9302      	str	r3, [sp, #8]
 800e9e6:	680b      	ldr	r3, [r1, #0]
 800e9e8:	9001      	str	r0, [sp, #4]
 800e9ea:	4690      	mov	r8, r2
 800e9ec:	1c9c      	adds	r4, r3, #2
 800e9ee:	46a1      	mov	r9, r4
 800e9f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e9f4:	2830      	cmp	r0, #48	@ 0x30
 800e9f6:	d0fa      	beq.n	800e9ee <__gethex+0x12>
 800e9f8:	eba9 0303 	sub.w	r3, r9, r3
 800e9fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800ea00:	f7ff ffd6 	bl	800e9b0 <__hexdig_fun>
 800ea04:	4605      	mov	r5, r0
 800ea06:	2800      	cmp	r0, #0
 800ea08:	d168      	bne.n	800eadc <__gethex+0x100>
 800ea0a:	49a0      	ldr	r1, [pc, #640]	@ (800ec8c <__gethex+0x2b0>)
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	4648      	mov	r0, r9
 800ea10:	f7ff ff10 	bl	800e834 <strncmp>
 800ea14:	4607      	mov	r7, r0
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d167      	bne.n	800eaea <__gethex+0x10e>
 800ea1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ea1e:	4626      	mov	r6, r4
 800ea20:	f7ff ffc6 	bl	800e9b0 <__hexdig_fun>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	d062      	beq.n	800eaee <__gethex+0x112>
 800ea28:	4623      	mov	r3, r4
 800ea2a:	7818      	ldrb	r0, [r3, #0]
 800ea2c:	2830      	cmp	r0, #48	@ 0x30
 800ea2e:	4699      	mov	r9, r3
 800ea30:	f103 0301 	add.w	r3, r3, #1
 800ea34:	d0f9      	beq.n	800ea2a <__gethex+0x4e>
 800ea36:	f7ff ffbb 	bl	800e9b0 <__hexdig_fun>
 800ea3a:	fab0 f580 	clz	r5, r0
 800ea3e:	096d      	lsrs	r5, r5, #5
 800ea40:	f04f 0b01 	mov.w	fp, #1
 800ea44:	464a      	mov	r2, r9
 800ea46:	4616      	mov	r6, r2
 800ea48:	3201      	adds	r2, #1
 800ea4a:	7830      	ldrb	r0, [r6, #0]
 800ea4c:	f7ff ffb0 	bl	800e9b0 <__hexdig_fun>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	d1f8      	bne.n	800ea46 <__gethex+0x6a>
 800ea54:	498d      	ldr	r1, [pc, #564]	@ (800ec8c <__gethex+0x2b0>)
 800ea56:	2201      	movs	r2, #1
 800ea58:	4630      	mov	r0, r6
 800ea5a:	f7ff feeb 	bl	800e834 <strncmp>
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	d13f      	bne.n	800eae2 <__gethex+0x106>
 800ea62:	b944      	cbnz	r4, 800ea76 <__gethex+0x9a>
 800ea64:	1c74      	adds	r4, r6, #1
 800ea66:	4622      	mov	r2, r4
 800ea68:	4616      	mov	r6, r2
 800ea6a:	3201      	adds	r2, #1
 800ea6c:	7830      	ldrb	r0, [r6, #0]
 800ea6e:	f7ff ff9f 	bl	800e9b0 <__hexdig_fun>
 800ea72:	2800      	cmp	r0, #0
 800ea74:	d1f8      	bne.n	800ea68 <__gethex+0x8c>
 800ea76:	1ba4      	subs	r4, r4, r6
 800ea78:	00a7      	lsls	r7, r4, #2
 800ea7a:	7833      	ldrb	r3, [r6, #0]
 800ea7c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ea80:	2b50      	cmp	r3, #80	@ 0x50
 800ea82:	d13e      	bne.n	800eb02 <__gethex+0x126>
 800ea84:	7873      	ldrb	r3, [r6, #1]
 800ea86:	2b2b      	cmp	r3, #43	@ 0x2b
 800ea88:	d033      	beq.n	800eaf2 <__gethex+0x116>
 800ea8a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ea8c:	d034      	beq.n	800eaf8 <__gethex+0x11c>
 800ea8e:	1c71      	adds	r1, r6, #1
 800ea90:	2400      	movs	r4, #0
 800ea92:	7808      	ldrb	r0, [r1, #0]
 800ea94:	f7ff ff8c 	bl	800e9b0 <__hexdig_fun>
 800ea98:	1e43      	subs	r3, r0, #1
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	2b18      	cmp	r3, #24
 800ea9e:	d830      	bhi.n	800eb02 <__gethex+0x126>
 800eaa0:	f1a0 0210 	sub.w	r2, r0, #16
 800eaa4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eaa8:	f7ff ff82 	bl	800e9b0 <__hexdig_fun>
 800eaac:	f100 3cff 	add.w	ip, r0, #4294967295
 800eab0:	fa5f fc8c 	uxtb.w	ip, ip
 800eab4:	f1bc 0f18 	cmp.w	ip, #24
 800eab8:	f04f 030a 	mov.w	r3, #10
 800eabc:	d91e      	bls.n	800eafc <__gethex+0x120>
 800eabe:	b104      	cbz	r4, 800eac2 <__gethex+0xe6>
 800eac0:	4252      	negs	r2, r2
 800eac2:	4417      	add	r7, r2
 800eac4:	f8ca 1000 	str.w	r1, [sl]
 800eac8:	b1ed      	cbz	r5, 800eb06 <__gethex+0x12a>
 800eaca:	f1bb 0f00 	cmp.w	fp, #0
 800eace:	bf0c      	ite	eq
 800ead0:	2506      	moveq	r5, #6
 800ead2:	2500      	movne	r5, #0
 800ead4:	4628      	mov	r0, r5
 800ead6:	b005      	add	sp, #20
 800ead8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eadc:	2500      	movs	r5, #0
 800eade:	462c      	mov	r4, r5
 800eae0:	e7b0      	b.n	800ea44 <__gethex+0x68>
 800eae2:	2c00      	cmp	r4, #0
 800eae4:	d1c7      	bne.n	800ea76 <__gethex+0x9a>
 800eae6:	4627      	mov	r7, r4
 800eae8:	e7c7      	b.n	800ea7a <__gethex+0x9e>
 800eaea:	464e      	mov	r6, r9
 800eaec:	462f      	mov	r7, r5
 800eaee:	2501      	movs	r5, #1
 800eaf0:	e7c3      	b.n	800ea7a <__gethex+0x9e>
 800eaf2:	2400      	movs	r4, #0
 800eaf4:	1cb1      	adds	r1, r6, #2
 800eaf6:	e7cc      	b.n	800ea92 <__gethex+0xb6>
 800eaf8:	2401      	movs	r4, #1
 800eafa:	e7fb      	b.n	800eaf4 <__gethex+0x118>
 800eafc:	fb03 0002 	mla	r0, r3, r2, r0
 800eb00:	e7ce      	b.n	800eaa0 <__gethex+0xc4>
 800eb02:	4631      	mov	r1, r6
 800eb04:	e7de      	b.n	800eac4 <__gethex+0xe8>
 800eb06:	eba6 0309 	sub.w	r3, r6, r9
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	4629      	mov	r1, r5
 800eb0e:	2b07      	cmp	r3, #7
 800eb10:	dc0a      	bgt.n	800eb28 <__gethex+0x14c>
 800eb12:	9801      	ldr	r0, [sp, #4]
 800eb14:	f7fd ff6c 	bl	800c9f0 <_Balloc>
 800eb18:	4604      	mov	r4, r0
 800eb1a:	b940      	cbnz	r0, 800eb2e <__gethex+0x152>
 800eb1c:	4b5c      	ldr	r3, [pc, #368]	@ (800ec90 <__gethex+0x2b4>)
 800eb1e:	4602      	mov	r2, r0
 800eb20:	21e4      	movs	r1, #228	@ 0xe4
 800eb22:	485c      	ldr	r0, [pc, #368]	@ (800ec94 <__gethex+0x2b8>)
 800eb24:	f7ff fec0 	bl	800e8a8 <__assert_func>
 800eb28:	3101      	adds	r1, #1
 800eb2a:	105b      	asrs	r3, r3, #1
 800eb2c:	e7ef      	b.n	800eb0e <__gethex+0x132>
 800eb2e:	f100 0a14 	add.w	sl, r0, #20
 800eb32:	2300      	movs	r3, #0
 800eb34:	4655      	mov	r5, sl
 800eb36:	469b      	mov	fp, r3
 800eb38:	45b1      	cmp	r9, r6
 800eb3a:	d337      	bcc.n	800ebac <__gethex+0x1d0>
 800eb3c:	f845 bb04 	str.w	fp, [r5], #4
 800eb40:	eba5 050a 	sub.w	r5, r5, sl
 800eb44:	10ad      	asrs	r5, r5, #2
 800eb46:	6125      	str	r5, [r4, #16]
 800eb48:	4658      	mov	r0, fp
 800eb4a:	f7fe f843 	bl	800cbd4 <__hi0bits>
 800eb4e:	016d      	lsls	r5, r5, #5
 800eb50:	f8d8 6000 	ldr.w	r6, [r8]
 800eb54:	1a2d      	subs	r5, r5, r0
 800eb56:	42b5      	cmp	r5, r6
 800eb58:	dd54      	ble.n	800ec04 <__gethex+0x228>
 800eb5a:	1bad      	subs	r5, r5, r6
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	4620      	mov	r0, r4
 800eb60:	f7fe fbcf 	bl	800d302 <__any_on>
 800eb64:	4681      	mov	r9, r0
 800eb66:	b178      	cbz	r0, 800eb88 <__gethex+0x1ac>
 800eb68:	1e6b      	subs	r3, r5, #1
 800eb6a:	1159      	asrs	r1, r3, #5
 800eb6c:	f003 021f 	and.w	r2, r3, #31
 800eb70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800eb74:	f04f 0901 	mov.w	r9, #1
 800eb78:	fa09 f202 	lsl.w	r2, r9, r2
 800eb7c:	420a      	tst	r2, r1
 800eb7e:	d003      	beq.n	800eb88 <__gethex+0x1ac>
 800eb80:	454b      	cmp	r3, r9
 800eb82:	dc36      	bgt.n	800ebf2 <__gethex+0x216>
 800eb84:	f04f 0902 	mov.w	r9, #2
 800eb88:	4629      	mov	r1, r5
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f7ff febe 	bl	800e90c <rshift>
 800eb90:	442f      	add	r7, r5
 800eb92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb96:	42bb      	cmp	r3, r7
 800eb98:	da42      	bge.n	800ec20 <__gethex+0x244>
 800eb9a:	9801      	ldr	r0, [sp, #4]
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	f7fd ff67 	bl	800ca70 <_Bfree>
 800eba2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eba4:	2300      	movs	r3, #0
 800eba6:	6013      	str	r3, [r2, #0]
 800eba8:	25a3      	movs	r5, #163	@ 0xa3
 800ebaa:	e793      	b.n	800ead4 <__gethex+0xf8>
 800ebac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ebb0:	2a2e      	cmp	r2, #46	@ 0x2e
 800ebb2:	d012      	beq.n	800ebda <__gethex+0x1fe>
 800ebb4:	2b20      	cmp	r3, #32
 800ebb6:	d104      	bne.n	800ebc2 <__gethex+0x1e6>
 800ebb8:	f845 bb04 	str.w	fp, [r5], #4
 800ebbc:	f04f 0b00 	mov.w	fp, #0
 800ebc0:	465b      	mov	r3, fp
 800ebc2:	7830      	ldrb	r0, [r6, #0]
 800ebc4:	9303      	str	r3, [sp, #12]
 800ebc6:	f7ff fef3 	bl	800e9b0 <__hexdig_fun>
 800ebca:	9b03      	ldr	r3, [sp, #12]
 800ebcc:	f000 000f 	and.w	r0, r0, #15
 800ebd0:	4098      	lsls	r0, r3
 800ebd2:	ea4b 0b00 	orr.w	fp, fp, r0
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	e7ae      	b.n	800eb38 <__gethex+0x15c>
 800ebda:	45b1      	cmp	r9, r6
 800ebdc:	d8ea      	bhi.n	800ebb4 <__gethex+0x1d8>
 800ebde:	492b      	ldr	r1, [pc, #172]	@ (800ec8c <__gethex+0x2b0>)
 800ebe0:	9303      	str	r3, [sp, #12]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	f7ff fe25 	bl	800e834 <strncmp>
 800ebea:	9b03      	ldr	r3, [sp, #12]
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d1e1      	bne.n	800ebb4 <__gethex+0x1d8>
 800ebf0:	e7a2      	b.n	800eb38 <__gethex+0x15c>
 800ebf2:	1ea9      	subs	r1, r5, #2
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	f7fe fb84 	bl	800d302 <__any_on>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d0c2      	beq.n	800eb84 <__gethex+0x1a8>
 800ebfe:	f04f 0903 	mov.w	r9, #3
 800ec02:	e7c1      	b.n	800eb88 <__gethex+0x1ac>
 800ec04:	da09      	bge.n	800ec1a <__gethex+0x23e>
 800ec06:	1b75      	subs	r5, r6, r5
 800ec08:	4621      	mov	r1, r4
 800ec0a:	9801      	ldr	r0, [sp, #4]
 800ec0c:	462a      	mov	r2, r5
 800ec0e:	f7fe f93f 	bl	800ce90 <__lshift>
 800ec12:	1b7f      	subs	r7, r7, r5
 800ec14:	4604      	mov	r4, r0
 800ec16:	f100 0a14 	add.w	sl, r0, #20
 800ec1a:	f04f 0900 	mov.w	r9, #0
 800ec1e:	e7b8      	b.n	800eb92 <__gethex+0x1b6>
 800ec20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ec24:	42bd      	cmp	r5, r7
 800ec26:	dd6f      	ble.n	800ed08 <__gethex+0x32c>
 800ec28:	1bed      	subs	r5, r5, r7
 800ec2a:	42ae      	cmp	r6, r5
 800ec2c:	dc34      	bgt.n	800ec98 <__gethex+0x2bc>
 800ec2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec32:	2b02      	cmp	r3, #2
 800ec34:	d022      	beq.n	800ec7c <__gethex+0x2a0>
 800ec36:	2b03      	cmp	r3, #3
 800ec38:	d024      	beq.n	800ec84 <__gethex+0x2a8>
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d115      	bne.n	800ec6a <__gethex+0x28e>
 800ec3e:	42ae      	cmp	r6, r5
 800ec40:	d113      	bne.n	800ec6a <__gethex+0x28e>
 800ec42:	2e01      	cmp	r6, #1
 800ec44:	d10b      	bne.n	800ec5e <__gethex+0x282>
 800ec46:	9a02      	ldr	r2, [sp, #8]
 800ec48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ec4c:	6013      	str	r3, [r2, #0]
 800ec4e:	2301      	movs	r3, #1
 800ec50:	6123      	str	r3, [r4, #16]
 800ec52:	f8ca 3000 	str.w	r3, [sl]
 800ec56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec58:	2562      	movs	r5, #98	@ 0x62
 800ec5a:	601c      	str	r4, [r3, #0]
 800ec5c:	e73a      	b.n	800ead4 <__gethex+0xf8>
 800ec5e:	1e71      	subs	r1, r6, #1
 800ec60:	4620      	mov	r0, r4
 800ec62:	f7fe fb4e 	bl	800d302 <__any_on>
 800ec66:	2800      	cmp	r0, #0
 800ec68:	d1ed      	bne.n	800ec46 <__gethex+0x26a>
 800ec6a:	9801      	ldr	r0, [sp, #4]
 800ec6c:	4621      	mov	r1, r4
 800ec6e:	f7fd feff 	bl	800ca70 <_Bfree>
 800ec72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec74:	2300      	movs	r3, #0
 800ec76:	6013      	str	r3, [r2, #0]
 800ec78:	2550      	movs	r5, #80	@ 0x50
 800ec7a:	e72b      	b.n	800ead4 <__gethex+0xf8>
 800ec7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1f3      	bne.n	800ec6a <__gethex+0x28e>
 800ec82:	e7e0      	b.n	800ec46 <__gethex+0x26a>
 800ec84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d1dd      	bne.n	800ec46 <__gethex+0x26a>
 800ec8a:	e7ee      	b.n	800ec6a <__gethex+0x28e>
 800ec8c:	08011e83 	.word	0x08011e83
 800ec90:	08011e19 	.word	0x08011e19
 800ec94:	08011eda 	.word	0x08011eda
 800ec98:	1e6f      	subs	r7, r5, #1
 800ec9a:	f1b9 0f00 	cmp.w	r9, #0
 800ec9e:	d130      	bne.n	800ed02 <__gethex+0x326>
 800eca0:	b127      	cbz	r7, 800ecac <__gethex+0x2d0>
 800eca2:	4639      	mov	r1, r7
 800eca4:	4620      	mov	r0, r4
 800eca6:	f7fe fb2c 	bl	800d302 <__any_on>
 800ecaa:	4681      	mov	r9, r0
 800ecac:	117a      	asrs	r2, r7, #5
 800ecae:	2301      	movs	r3, #1
 800ecb0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ecb4:	f007 071f 	and.w	r7, r7, #31
 800ecb8:	40bb      	lsls	r3, r7
 800ecba:	4213      	tst	r3, r2
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	bf18      	it	ne
 800ecc2:	f049 0902 	orrne.w	r9, r9, #2
 800ecc6:	f7ff fe21 	bl	800e90c <rshift>
 800ecca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ecce:	1b76      	subs	r6, r6, r5
 800ecd0:	2502      	movs	r5, #2
 800ecd2:	f1b9 0f00 	cmp.w	r9, #0
 800ecd6:	d047      	beq.n	800ed68 <__gethex+0x38c>
 800ecd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ecdc:	2b02      	cmp	r3, #2
 800ecde:	d015      	beq.n	800ed0c <__gethex+0x330>
 800ece0:	2b03      	cmp	r3, #3
 800ece2:	d017      	beq.n	800ed14 <__gethex+0x338>
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d109      	bne.n	800ecfc <__gethex+0x320>
 800ece8:	f019 0f02 	tst.w	r9, #2
 800ecec:	d006      	beq.n	800ecfc <__gethex+0x320>
 800ecee:	f8da 3000 	ldr.w	r3, [sl]
 800ecf2:	ea49 0903 	orr.w	r9, r9, r3
 800ecf6:	f019 0f01 	tst.w	r9, #1
 800ecfa:	d10e      	bne.n	800ed1a <__gethex+0x33e>
 800ecfc:	f045 0510 	orr.w	r5, r5, #16
 800ed00:	e032      	b.n	800ed68 <__gethex+0x38c>
 800ed02:	f04f 0901 	mov.w	r9, #1
 800ed06:	e7d1      	b.n	800ecac <__gethex+0x2d0>
 800ed08:	2501      	movs	r5, #1
 800ed0a:	e7e2      	b.n	800ecd2 <__gethex+0x2f6>
 800ed0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed0e:	f1c3 0301 	rsb	r3, r3, #1
 800ed12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ed14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d0f0      	beq.n	800ecfc <__gethex+0x320>
 800ed1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ed1e:	f104 0314 	add.w	r3, r4, #20
 800ed22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ed26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ed2a:	f04f 0c00 	mov.w	ip, #0
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed34:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ed38:	d01b      	beq.n	800ed72 <__gethex+0x396>
 800ed3a:	3201      	adds	r2, #1
 800ed3c:	6002      	str	r2, [r0, #0]
 800ed3e:	2d02      	cmp	r5, #2
 800ed40:	f104 0314 	add.w	r3, r4, #20
 800ed44:	d13c      	bne.n	800edc0 <__gethex+0x3e4>
 800ed46:	f8d8 2000 	ldr.w	r2, [r8]
 800ed4a:	3a01      	subs	r2, #1
 800ed4c:	42b2      	cmp	r2, r6
 800ed4e:	d109      	bne.n	800ed64 <__gethex+0x388>
 800ed50:	1171      	asrs	r1, r6, #5
 800ed52:	2201      	movs	r2, #1
 800ed54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ed58:	f006 061f 	and.w	r6, r6, #31
 800ed5c:	fa02 f606 	lsl.w	r6, r2, r6
 800ed60:	421e      	tst	r6, r3
 800ed62:	d13a      	bne.n	800edda <__gethex+0x3fe>
 800ed64:	f045 0520 	orr.w	r5, r5, #32
 800ed68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed6a:	601c      	str	r4, [r3, #0]
 800ed6c:	9b02      	ldr	r3, [sp, #8]
 800ed6e:	601f      	str	r7, [r3, #0]
 800ed70:	e6b0      	b.n	800ead4 <__gethex+0xf8>
 800ed72:	4299      	cmp	r1, r3
 800ed74:	f843 cc04 	str.w	ip, [r3, #-4]
 800ed78:	d8d9      	bhi.n	800ed2e <__gethex+0x352>
 800ed7a:	68a3      	ldr	r3, [r4, #8]
 800ed7c:	459b      	cmp	fp, r3
 800ed7e:	db17      	blt.n	800edb0 <__gethex+0x3d4>
 800ed80:	6861      	ldr	r1, [r4, #4]
 800ed82:	9801      	ldr	r0, [sp, #4]
 800ed84:	3101      	adds	r1, #1
 800ed86:	f7fd fe33 	bl	800c9f0 <_Balloc>
 800ed8a:	4681      	mov	r9, r0
 800ed8c:	b918      	cbnz	r0, 800ed96 <__gethex+0x3ba>
 800ed8e:	4b1a      	ldr	r3, [pc, #104]	@ (800edf8 <__gethex+0x41c>)
 800ed90:	4602      	mov	r2, r0
 800ed92:	2184      	movs	r1, #132	@ 0x84
 800ed94:	e6c5      	b.n	800eb22 <__gethex+0x146>
 800ed96:	6922      	ldr	r2, [r4, #16]
 800ed98:	3202      	adds	r2, #2
 800ed9a:	f104 010c 	add.w	r1, r4, #12
 800ed9e:	0092      	lsls	r2, r2, #2
 800eda0:	300c      	adds	r0, #12
 800eda2:	f7ff fd69 	bl	800e878 <memcpy>
 800eda6:	4621      	mov	r1, r4
 800eda8:	9801      	ldr	r0, [sp, #4]
 800edaa:	f7fd fe61 	bl	800ca70 <_Bfree>
 800edae:	464c      	mov	r4, r9
 800edb0:	6923      	ldr	r3, [r4, #16]
 800edb2:	1c5a      	adds	r2, r3, #1
 800edb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800edb8:	6122      	str	r2, [r4, #16]
 800edba:	2201      	movs	r2, #1
 800edbc:	615a      	str	r2, [r3, #20]
 800edbe:	e7be      	b.n	800ed3e <__gethex+0x362>
 800edc0:	6922      	ldr	r2, [r4, #16]
 800edc2:	455a      	cmp	r2, fp
 800edc4:	dd0b      	ble.n	800edde <__gethex+0x402>
 800edc6:	2101      	movs	r1, #1
 800edc8:	4620      	mov	r0, r4
 800edca:	f7ff fd9f 	bl	800e90c <rshift>
 800edce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800edd2:	3701      	adds	r7, #1
 800edd4:	42bb      	cmp	r3, r7
 800edd6:	f6ff aee0 	blt.w	800eb9a <__gethex+0x1be>
 800edda:	2501      	movs	r5, #1
 800eddc:	e7c2      	b.n	800ed64 <__gethex+0x388>
 800edde:	f016 061f 	ands.w	r6, r6, #31
 800ede2:	d0fa      	beq.n	800edda <__gethex+0x3fe>
 800ede4:	4453      	add	r3, sl
 800ede6:	f1c6 0620 	rsb	r6, r6, #32
 800edea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800edee:	f7fd fef1 	bl	800cbd4 <__hi0bits>
 800edf2:	42b0      	cmp	r0, r6
 800edf4:	dbe7      	blt.n	800edc6 <__gethex+0x3ea>
 800edf6:	e7f0      	b.n	800edda <__gethex+0x3fe>
 800edf8:	08011e19 	.word	0x08011e19

0800edfc <L_shift>:
 800edfc:	f1c2 0208 	rsb	r2, r2, #8
 800ee00:	0092      	lsls	r2, r2, #2
 800ee02:	b570      	push	{r4, r5, r6, lr}
 800ee04:	f1c2 0620 	rsb	r6, r2, #32
 800ee08:	6843      	ldr	r3, [r0, #4]
 800ee0a:	6804      	ldr	r4, [r0, #0]
 800ee0c:	fa03 f506 	lsl.w	r5, r3, r6
 800ee10:	432c      	orrs	r4, r5
 800ee12:	40d3      	lsrs	r3, r2
 800ee14:	6004      	str	r4, [r0, #0]
 800ee16:	f840 3f04 	str.w	r3, [r0, #4]!
 800ee1a:	4288      	cmp	r0, r1
 800ee1c:	d3f4      	bcc.n	800ee08 <L_shift+0xc>
 800ee1e:	bd70      	pop	{r4, r5, r6, pc}

0800ee20 <__match>:
 800ee20:	b530      	push	{r4, r5, lr}
 800ee22:	6803      	ldr	r3, [r0, #0]
 800ee24:	3301      	adds	r3, #1
 800ee26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee2a:	b914      	cbnz	r4, 800ee32 <__match+0x12>
 800ee2c:	6003      	str	r3, [r0, #0]
 800ee2e:	2001      	movs	r0, #1
 800ee30:	bd30      	pop	{r4, r5, pc}
 800ee32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ee3a:	2d19      	cmp	r5, #25
 800ee3c:	bf98      	it	ls
 800ee3e:	3220      	addls	r2, #32
 800ee40:	42a2      	cmp	r2, r4
 800ee42:	d0f0      	beq.n	800ee26 <__match+0x6>
 800ee44:	2000      	movs	r0, #0
 800ee46:	e7f3      	b.n	800ee30 <__match+0x10>

0800ee48 <__hexnan>:
 800ee48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee4c:	680b      	ldr	r3, [r1, #0]
 800ee4e:	6801      	ldr	r1, [r0, #0]
 800ee50:	115e      	asrs	r6, r3, #5
 800ee52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ee56:	f013 031f 	ands.w	r3, r3, #31
 800ee5a:	b087      	sub	sp, #28
 800ee5c:	bf18      	it	ne
 800ee5e:	3604      	addne	r6, #4
 800ee60:	2500      	movs	r5, #0
 800ee62:	1f37      	subs	r7, r6, #4
 800ee64:	4682      	mov	sl, r0
 800ee66:	4690      	mov	r8, r2
 800ee68:	9301      	str	r3, [sp, #4]
 800ee6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ee6e:	46b9      	mov	r9, r7
 800ee70:	463c      	mov	r4, r7
 800ee72:	9502      	str	r5, [sp, #8]
 800ee74:	46ab      	mov	fp, r5
 800ee76:	784a      	ldrb	r2, [r1, #1]
 800ee78:	1c4b      	adds	r3, r1, #1
 800ee7a:	9303      	str	r3, [sp, #12]
 800ee7c:	b342      	cbz	r2, 800eed0 <__hexnan+0x88>
 800ee7e:	4610      	mov	r0, r2
 800ee80:	9105      	str	r1, [sp, #20]
 800ee82:	9204      	str	r2, [sp, #16]
 800ee84:	f7ff fd94 	bl	800e9b0 <__hexdig_fun>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	d151      	bne.n	800ef30 <__hexnan+0xe8>
 800ee8c:	9a04      	ldr	r2, [sp, #16]
 800ee8e:	9905      	ldr	r1, [sp, #20]
 800ee90:	2a20      	cmp	r2, #32
 800ee92:	d818      	bhi.n	800eec6 <__hexnan+0x7e>
 800ee94:	9b02      	ldr	r3, [sp, #8]
 800ee96:	459b      	cmp	fp, r3
 800ee98:	dd13      	ble.n	800eec2 <__hexnan+0x7a>
 800ee9a:	454c      	cmp	r4, r9
 800ee9c:	d206      	bcs.n	800eeac <__hexnan+0x64>
 800ee9e:	2d07      	cmp	r5, #7
 800eea0:	dc04      	bgt.n	800eeac <__hexnan+0x64>
 800eea2:	462a      	mov	r2, r5
 800eea4:	4649      	mov	r1, r9
 800eea6:	4620      	mov	r0, r4
 800eea8:	f7ff ffa8 	bl	800edfc <L_shift>
 800eeac:	4544      	cmp	r4, r8
 800eeae:	d952      	bls.n	800ef56 <__hexnan+0x10e>
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	f1a4 0904 	sub.w	r9, r4, #4
 800eeb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800eeba:	f8cd b008 	str.w	fp, [sp, #8]
 800eebe:	464c      	mov	r4, r9
 800eec0:	461d      	mov	r5, r3
 800eec2:	9903      	ldr	r1, [sp, #12]
 800eec4:	e7d7      	b.n	800ee76 <__hexnan+0x2e>
 800eec6:	2a29      	cmp	r2, #41	@ 0x29
 800eec8:	d157      	bne.n	800ef7a <__hexnan+0x132>
 800eeca:	3102      	adds	r1, #2
 800eecc:	f8ca 1000 	str.w	r1, [sl]
 800eed0:	f1bb 0f00 	cmp.w	fp, #0
 800eed4:	d051      	beq.n	800ef7a <__hexnan+0x132>
 800eed6:	454c      	cmp	r4, r9
 800eed8:	d206      	bcs.n	800eee8 <__hexnan+0xa0>
 800eeda:	2d07      	cmp	r5, #7
 800eedc:	dc04      	bgt.n	800eee8 <__hexnan+0xa0>
 800eede:	462a      	mov	r2, r5
 800eee0:	4649      	mov	r1, r9
 800eee2:	4620      	mov	r0, r4
 800eee4:	f7ff ff8a 	bl	800edfc <L_shift>
 800eee8:	4544      	cmp	r4, r8
 800eeea:	d936      	bls.n	800ef5a <__hexnan+0x112>
 800eeec:	f1a8 0204 	sub.w	r2, r8, #4
 800eef0:	4623      	mov	r3, r4
 800eef2:	f853 1b04 	ldr.w	r1, [r3], #4
 800eef6:	f842 1f04 	str.w	r1, [r2, #4]!
 800eefa:	429f      	cmp	r7, r3
 800eefc:	d2f9      	bcs.n	800eef2 <__hexnan+0xaa>
 800eefe:	1b3b      	subs	r3, r7, r4
 800ef00:	f023 0303 	bic.w	r3, r3, #3
 800ef04:	3304      	adds	r3, #4
 800ef06:	3401      	adds	r4, #1
 800ef08:	3e03      	subs	r6, #3
 800ef0a:	42b4      	cmp	r4, r6
 800ef0c:	bf88      	it	hi
 800ef0e:	2304      	movhi	r3, #4
 800ef10:	4443      	add	r3, r8
 800ef12:	2200      	movs	r2, #0
 800ef14:	f843 2b04 	str.w	r2, [r3], #4
 800ef18:	429f      	cmp	r7, r3
 800ef1a:	d2fb      	bcs.n	800ef14 <__hexnan+0xcc>
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	b91b      	cbnz	r3, 800ef28 <__hexnan+0xe0>
 800ef20:	4547      	cmp	r7, r8
 800ef22:	d128      	bne.n	800ef76 <__hexnan+0x12e>
 800ef24:	2301      	movs	r3, #1
 800ef26:	603b      	str	r3, [r7, #0]
 800ef28:	2005      	movs	r0, #5
 800ef2a:	b007      	add	sp, #28
 800ef2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef30:	3501      	adds	r5, #1
 800ef32:	2d08      	cmp	r5, #8
 800ef34:	f10b 0b01 	add.w	fp, fp, #1
 800ef38:	dd06      	ble.n	800ef48 <__hexnan+0x100>
 800ef3a:	4544      	cmp	r4, r8
 800ef3c:	d9c1      	bls.n	800eec2 <__hexnan+0x7a>
 800ef3e:	2300      	movs	r3, #0
 800ef40:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef44:	2501      	movs	r5, #1
 800ef46:	3c04      	subs	r4, #4
 800ef48:	6822      	ldr	r2, [r4, #0]
 800ef4a:	f000 000f 	and.w	r0, r0, #15
 800ef4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ef52:	6020      	str	r0, [r4, #0]
 800ef54:	e7b5      	b.n	800eec2 <__hexnan+0x7a>
 800ef56:	2508      	movs	r5, #8
 800ef58:	e7b3      	b.n	800eec2 <__hexnan+0x7a>
 800ef5a:	9b01      	ldr	r3, [sp, #4]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d0dd      	beq.n	800ef1c <__hexnan+0xd4>
 800ef60:	f1c3 0320 	rsb	r3, r3, #32
 800ef64:	f04f 32ff 	mov.w	r2, #4294967295
 800ef68:	40da      	lsrs	r2, r3
 800ef6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ef6e:	4013      	ands	r3, r2
 800ef70:	f846 3c04 	str.w	r3, [r6, #-4]
 800ef74:	e7d2      	b.n	800ef1c <__hexnan+0xd4>
 800ef76:	3f04      	subs	r7, #4
 800ef78:	e7d0      	b.n	800ef1c <__hexnan+0xd4>
 800ef7a:	2004      	movs	r0, #4
 800ef7c:	e7d5      	b.n	800ef2a <__hexnan+0xe2>

0800ef7e <__ascii_mbtowc>:
 800ef7e:	b082      	sub	sp, #8
 800ef80:	b901      	cbnz	r1, 800ef84 <__ascii_mbtowc+0x6>
 800ef82:	a901      	add	r1, sp, #4
 800ef84:	b142      	cbz	r2, 800ef98 <__ascii_mbtowc+0x1a>
 800ef86:	b14b      	cbz	r3, 800ef9c <__ascii_mbtowc+0x1e>
 800ef88:	7813      	ldrb	r3, [r2, #0]
 800ef8a:	600b      	str	r3, [r1, #0]
 800ef8c:	7812      	ldrb	r2, [r2, #0]
 800ef8e:	1e10      	subs	r0, r2, #0
 800ef90:	bf18      	it	ne
 800ef92:	2001      	movne	r0, #1
 800ef94:	b002      	add	sp, #8
 800ef96:	4770      	bx	lr
 800ef98:	4610      	mov	r0, r2
 800ef9a:	e7fb      	b.n	800ef94 <__ascii_mbtowc+0x16>
 800ef9c:	f06f 0001 	mvn.w	r0, #1
 800efa0:	e7f8      	b.n	800ef94 <__ascii_mbtowc+0x16>

0800efa2 <_realloc_r>:
 800efa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa6:	4607      	mov	r7, r0
 800efa8:	4614      	mov	r4, r2
 800efaa:	460d      	mov	r5, r1
 800efac:	b921      	cbnz	r1, 800efb8 <_realloc_r+0x16>
 800efae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efb2:	4611      	mov	r1, r2
 800efb4:	f7fd bc90 	b.w	800c8d8 <_malloc_r>
 800efb8:	b92a      	cbnz	r2, 800efc6 <_realloc_r+0x24>
 800efba:	f7fd fc19 	bl	800c7f0 <_free_r>
 800efbe:	4625      	mov	r5, r4
 800efc0:	4628      	mov	r0, r5
 800efc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc6:	f000 f8c4 	bl	800f152 <_malloc_usable_size_r>
 800efca:	4284      	cmp	r4, r0
 800efcc:	4606      	mov	r6, r0
 800efce:	d802      	bhi.n	800efd6 <_realloc_r+0x34>
 800efd0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800efd4:	d8f4      	bhi.n	800efc0 <_realloc_r+0x1e>
 800efd6:	4621      	mov	r1, r4
 800efd8:	4638      	mov	r0, r7
 800efda:	f7fd fc7d 	bl	800c8d8 <_malloc_r>
 800efde:	4680      	mov	r8, r0
 800efe0:	b908      	cbnz	r0, 800efe6 <_realloc_r+0x44>
 800efe2:	4645      	mov	r5, r8
 800efe4:	e7ec      	b.n	800efc0 <_realloc_r+0x1e>
 800efe6:	42b4      	cmp	r4, r6
 800efe8:	4622      	mov	r2, r4
 800efea:	4629      	mov	r1, r5
 800efec:	bf28      	it	cs
 800efee:	4632      	movcs	r2, r6
 800eff0:	f7ff fc42 	bl	800e878 <memcpy>
 800eff4:	4629      	mov	r1, r5
 800eff6:	4638      	mov	r0, r7
 800eff8:	f7fd fbfa 	bl	800c7f0 <_free_r>
 800effc:	e7f1      	b.n	800efe2 <_realloc_r+0x40>

0800effe <__ascii_wctomb>:
 800effe:	4603      	mov	r3, r0
 800f000:	4608      	mov	r0, r1
 800f002:	b141      	cbz	r1, 800f016 <__ascii_wctomb+0x18>
 800f004:	2aff      	cmp	r2, #255	@ 0xff
 800f006:	d904      	bls.n	800f012 <__ascii_wctomb+0x14>
 800f008:	228a      	movs	r2, #138	@ 0x8a
 800f00a:	601a      	str	r2, [r3, #0]
 800f00c:	f04f 30ff 	mov.w	r0, #4294967295
 800f010:	4770      	bx	lr
 800f012:	700a      	strb	r2, [r1, #0]
 800f014:	2001      	movs	r0, #1
 800f016:	4770      	bx	lr

0800f018 <fiprintf>:
 800f018:	b40e      	push	{r1, r2, r3}
 800f01a:	b503      	push	{r0, r1, lr}
 800f01c:	4601      	mov	r1, r0
 800f01e:	ab03      	add	r3, sp, #12
 800f020:	4805      	ldr	r0, [pc, #20]	@ (800f038 <fiprintf+0x20>)
 800f022:	f853 2b04 	ldr.w	r2, [r3], #4
 800f026:	6800      	ldr	r0, [r0, #0]
 800f028:	9301      	str	r3, [sp, #4]
 800f02a:	f7ff f991 	bl	800e350 <_vfiprintf_r>
 800f02e:	b002      	add	sp, #8
 800f030:	f85d eb04 	ldr.w	lr, [sp], #4
 800f034:	b003      	add	sp, #12
 800f036:	4770      	bx	lr
 800f038:	20000038 	.word	0x20000038

0800f03c <__swhatbuf_r>:
 800f03c:	b570      	push	{r4, r5, r6, lr}
 800f03e:	460c      	mov	r4, r1
 800f040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f044:	2900      	cmp	r1, #0
 800f046:	b096      	sub	sp, #88	@ 0x58
 800f048:	4615      	mov	r5, r2
 800f04a:	461e      	mov	r6, r3
 800f04c:	da0d      	bge.n	800f06a <__swhatbuf_r+0x2e>
 800f04e:	89a3      	ldrh	r3, [r4, #12]
 800f050:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f054:	f04f 0100 	mov.w	r1, #0
 800f058:	bf14      	ite	ne
 800f05a:	2340      	movne	r3, #64	@ 0x40
 800f05c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f060:	2000      	movs	r0, #0
 800f062:	6031      	str	r1, [r6, #0]
 800f064:	602b      	str	r3, [r5, #0]
 800f066:	b016      	add	sp, #88	@ 0x58
 800f068:	bd70      	pop	{r4, r5, r6, pc}
 800f06a:	466a      	mov	r2, sp
 800f06c:	f000 f848 	bl	800f100 <_fstat_r>
 800f070:	2800      	cmp	r0, #0
 800f072:	dbec      	blt.n	800f04e <__swhatbuf_r+0x12>
 800f074:	9901      	ldr	r1, [sp, #4]
 800f076:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f07a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f07e:	4259      	negs	r1, r3
 800f080:	4159      	adcs	r1, r3
 800f082:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f086:	e7eb      	b.n	800f060 <__swhatbuf_r+0x24>

0800f088 <__smakebuf_r>:
 800f088:	898b      	ldrh	r3, [r1, #12]
 800f08a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f08c:	079d      	lsls	r5, r3, #30
 800f08e:	4606      	mov	r6, r0
 800f090:	460c      	mov	r4, r1
 800f092:	d507      	bpl.n	800f0a4 <__smakebuf_r+0x1c>
 800f094:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f098:	6023      	str	r3, [r4, #0]
 800f09a:	6123      	str	r3, [r4, #16]
 800f09c:	2301      	movs	r3, #1
 800f09e:	6163      	str	r3, [r4, #20]
 800f0a0:	b003      	add	sp, #12
 800f0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0a4:	ab01      	add	r3, sp, #4
 800f0a6:	466a      	mov	r2, sp
 800f0a8:	f7ff ffc8 	bl	800f03c <__swhatbuf_r>
 800f0ac:	9f00      	ldr	r7, [sp, #0]
 800f0ae:	4605      	mov	r5, r0
 800f0b0:	4639      	mov	r1, r7
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	f7fd fc10 	bl	800c8d8 <_malloc_r>
 800f0b8:	b948      	cbnz	r0, 800f0ce <__smakebuf_r+0x46>
 800f0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0be:	059a      	lsls	r2, r3, #22
 800f0c0:	d4ee      	bmi.n	800f0a0 <__smakebuf_r+0x18>
 800f0c2:	f023 0303 	bic.w	r3, r3, #3
 800f0c6:	f043 0302 	orr.w	r3, r3, #2
 800f0ca:	81a3      	strh	r3, [r4, #12]
 800f0cc:	e7e2      	b.n	800f094 <__smakebuf_r+0xc>
 800f0ce:	89a3      	ldrh	r3, [r4, #12]
 800f0d0:	6020      	str	r0, [r4, #0]
 800f0d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0d6:	81a3      	strh	r3, [r4, #12]
 800f0d8:	9b01      	ldr	r3, [sp, #4]
 800f0da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f0de:	b15b      	cbz	r3, 800f0f8 <__smakebuf_r+0x70>
 800f0e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0e4:	4630      	mov	r0, r6
 800f0e6:	f000 f81d 	bl	800f124 <_isatty_r>
 800f0ea:	b128      	cbz	r0, 800f0f8 <__smakebuf_r+0x70>
 800f0ec:	89a3      	ldrh	r3, [r4, #12]
 800f0ee:	f023 0303 	bic.w	r3, r3, #3
 800f0f2:	f043 0301 	orr.w	r3, r3, #1
 800f0f6:	81a3      	strh	r3, [r4, #12]
 800f0f8:	89a3      	ldrh	r3, [r4, #12]
 800f0fa:	431d      	orrs	r5, r3
 800f0fc:	81a5      	strh	r5, [r4, #12]
 800f0fe:	e7cf      	b.n	800f0a0 <__smakebuf_r+0x18>

0800f100 <_fstat_r>:
 800f100:	b538      	push	{r3, r4, r5, lr}
 800f102:	4d07      	ldr	r5, [pc, #28]	@ (800f120 <_fstat_r+0x20>)
 800f104:	2300      	movs	r3, #0
 800f106:	4604      	mov	r4, r0
 800f108:	4608      	mov	r0, r1
 800f10a:	4611      	mov	r1, r2
 800f10c:	602b      	str	r3, [r5, #0]
 800f10e:	f7f7 fe93 	bl	8006e38 <_fstat>
 800f112:	1c43      	adds	r3, r0, #1
 800f114:	d102      	bne.n	800f11c <_fstat_r+0x1c>
 800f116:	682b      	ldr	r3, [r5, #0]
 800f118:	b103      	cbz	r3, 800f11c <_fstat_r+0x1c>
 800f11a:	6023      	str	r3, [r4, #0]
 800f11c:	bd38      	pop	{r3, r4, r5, pc}
 800f11e:	bf00      	nop
 800f120:	200008f0 	.word	0x200008f0

0800f124 <_isatty_r>:
 800f124:	b538      	push	{r3, r4, r5, lr}
 800f126:	4d06      	ldr	r5, [pc, #24]	@ (800f140 <_isatty_r+0x1c>)
 800f128:	2300      	movs	r3, #0
 800f12a:	4604      	mov	r4, r0
 800f12c:	4608      	mov	r0, r1
 800f12e:	602b      	str	r3, [r5, #0]
 800f130:	f7f7 fe92 	bl	8006e58 <_isatty>
 800f134:	1c43      	adds	r3, r0, #1
 800f136:	d102      	bne.n	800f13e <_isatty_r+0x1a>
 800f138:	682b      	ldr	r3, [r5, #0]
 800f13a:	b103      	cbz	r3, 800f13e <_isatty_r+0x1a>
 800f13c:	6023      	str	r3, [r4, #0]
 800f13e:	bd38      	pop	{r3, r4, r5, pc}
 800f140:	200008f0 	.word	0x200008f0

0800f144 <abort>:
 800f144:	b508      	push	{r3, lr}
 800f146:	2006      	movs	r0, #6
 800f148:	f000 f834 	bl	800f1b4 <raise>
 800f14c:	2001      	movs	r0, #1
 800f14e:	f7f7 fe3f 	bl	8006dd0 <_exit>

0800f152 <_malloc_usable_size_r>:
 800f152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f156:	1f18      	subs	r0, r3, #4
 800f158:	2b00      	cmp	r3, #0
 800f15a:	bfbc      	itt	lt
 800f15c:	580b      	ldrlt	r3, [r1, r0]
 800f15e:	18c0      	addlt	r0, r0, r3
 800f160:	4770      	bx	lr

0800f162 <_raise_r>:
 800f162:	291f      	cmp	r1, #31
 800f164:	b538      	push	{r3, r4, r5, lr}
 800f166:	4605      	mov	r5, r0
 800f168:	460c      	mov	r4, r1
 800f16a:	d904      	bls.n	800f176 <_raise_r+0x14>
 800f16c:	2316      	movs	r3, #22
 800f16e:	6003      	str	r3, [r0, #0]
 800f170:	f04f 30ff 	mov.w	r0, #4294967295
 800f174:	bd38      	pop	{r3, r4, r5, pc}
 800f176:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f178:	b112      	cbz	r2, 800f180 <_raise_r+0x1e>
 800f17a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f17e:	b94b      	cbnz	r3, 800f194 <_raise_r+0x32>
 800f180:	4628      	mov	r0, r5
 800f182:	f000 f831 	bl	800f1e8 <_getpid_r>
 800f186:	4622      	mov	r2, r4
 800f188:	4601      	mov	r1, r0
 800f18a:	4628      	mov	r0, r5
 800f18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f190:	f000 b818 	b.w	800f1c4 <_kill_r>
 800f194:	2b01      	cmp	r3, #1
 800f196:	d00a      	beq.n	800f1ae <_raise_r+0x4c>
 800f198:	1c59      	adds	r1, r3, #1
 800f19a:	d103      	bne.n	800f1a4 <_raise_r+0x42>
 800f19c:	2316      	movs	r3, #22
 800f19e:	6003      	str	r3, [r0, #0]
 800f1a0:	2001      	movs	r0, #1
 800f1a2:	e7e7      	b.n	800f174 <_raise_r+0x12>
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f1aa:	4620      	mov	r0, r4
 800f1ac:	4798      	blx	r3
 800f1ae:	2000      	movs	r0, #0
 800f1b0:	e7e0      	b.n	800f174 <_raise_r+0x12>
	...

0800f1b4 <raise>:
 800f1b4:	4b02      	ldr	r3, [pc, #8]	@ (800f1c0 <raise+0xc>)
 800f1b6:	4601      	mov	r1, r0
 800f1b8:	6818      	ldr	r0, [r3, #0]
 800f1ba:	f7ff bfd2 	b.w	800f162 <_raise_r>
 800f1be:	bf00      	nop
 800f1c0:	20000038 	.word	0x20000038

0800f1c4 <_kill_r>:
 800f1c4:	b538      	push	{r3, r4, r5, lr}
 800f1c6:	4d07      	ldr	r5, [pc, #28]	@ (800f1e4 <_kill_r+0x20>)
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	4608      	mov	r0, r1
 800f1ce:	4611      	mov	r1, r2
 800f1d0:	602b      	str	r3, [r5, #0]
 800f1d2:	f7f7 fded 	bl	8006db0 <_kill>
 800f1d6:	1c43      	adds	r3, r0, #1
 800f1d8:	d102      	bne.n	800f1e0 <_kill_r+0x1c>
 800f1da:	682b      	ldr	r3, [r5, #0]
 800f1dc:	b103      	cbz	r3, 800f1e0 <_kill_r+0x1c>
 800f1de:	6023      	str	r3, [r4, #0]
 800f1e0:	bd38      	pop	{r3, r4, r5, pc}
 800f1e2:	bf00      	nop
 800f1e4:	200008f0 	.word	0x200008f0

0800f1e8 <_getpid_r>:
 800f1e8:	f7f7 bdda 	b.w	8006da0 <_getpid>

0800f1ec <asin>:
 800f1ec:	b538      	push	{r3, r4, r5, lr}
 800f1ee:	ed2d 8b02 	vpush	{d8}
 800f1f2:	ec55 4b10 	vmov	r4, r5, d0
 800f1f6:	f000 fac3 	bl	800f780 <__ieee754_asin>
 800f1fa:	4622      	mov	r2, r4
 800f1fc:	462b      	mov	r3, r5
 800f1fe:	4620      	mov	r0, r4
 800f200:	4629      	mov	r1, r5
 800f202:	eeb0 8a40 	vmov.f32	s16, s0
 800f206:	eef0 8a60 	vmov.f32	s17, s1
 800f20a:	f7f1 fc97 	bl	8000b3c <__aeabi_dcmpun>
 800f20e:	b9a8      	cbnz	r0, 800f23c <asin+0x50>
 800f210:	ec45 4b10 	vmov	d0, r4, r5
 800f214:	f000 f8bc 	bl	800f390 <fabs>
 800f218:	4b0c      	ldr	r3, [pc, #48]	@ (800f24c <asin+0x60>)
 800f21a:	ec51 0b10 	vmov	r0, r1, d0
 800f21e:	2200      	movs	r2, #0
 800f220:	f7f1 fc82 	bl	8000b28 <__aeabi_dcmpgt>
 800f224:	b150      	cbz	r0, 800f23c <asin+0x50>
 800f226:	f7fc fc57 	bl	800bad8 <__errno>
 800f22a:	ecbd 8b02 	vpop	{d8}
 800f22e:	2321      	movs	r3, #33	@ 0x21
 800f230:	6003      	str	r3, [r0, #0]
 800f232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f236:	4806      	ldr	r0, [pc, #24]	@ (800f250 <asin+0x64>)
 800f238:	f7ff bb2e 	b.w	800e898 <nan>
 800f23c:	eeb0 0a48 	vmov.f32	s0, s16
 800f240:	eef0 0a68 	vmov.f32	s1, s17
 800f244:	ecbd 8b02 	vpop	{d8}
 800f248:	bd38      	pop	{r3, r4, r5, pc}
 800f24a:	bf00      	nop
 800f24c:	3ff00000 	.word	0x3ff00000
 800f250:	08011ed9 	.word	0x08011ed9

0800f254 <atan2>:
 800f254:	f000 bc98 	b.w	800fb88 <__ieee754_atan2>

0800f258 <pow>:
 800f258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25a:	ed2d 8b02 	vpush	{d8}
 800f25e:	eeb0 8a40 	vmov.f32	s16, s0
 800f262:	eef0 8a60 	vmov.f32	s17, s1
 800f266:	ec55 4b11 	vmov	r4, r5, d1
 800f26a:	f000 fd55 	bl	800fd18 <__ieee754_pow>
 800f26e:	4622      	mov	r2, r4
 800f270:	462b      	mov	r3, r5
 800f272:	4620      	mov	r0, r4
 800f274:	4629      	mov	r1, r5
 800f276:	ec57 6b10 	vmov	r6, r7, d0
 800f27a:	f7f1 fc5f 	bl	8000b3c <__aeabi_dcmpun>
 800f27e:	2800      	cmp	r0, #0
 800f280:	d13b      	bne.n	800f2fa <pow+0xa2>
 800f282:	ec51 0b18 	vmov	r0, r1, d8
 800f286:	2200      	movs	r2, #0
 800f288:	2300      	movs	r3, #0
 800f28a:	f7f1 fc25 	bl	8000ad8 <__aeabi_dcmpeq>
 800f28e:	b1b8      	cbz	r0, 800f2c0 <pow+0x68>
 800f290:	2200      	movs	r2, #0
 800f292:	2300      	movs	r3, #0
 800f294:	4620      	mov	r0, r4
 800f296:	4629      	mov	r1, r5
 800f298:	f7f1 fc1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	d146      	bne.n	800f32e <pow+0xd6>
 800f2a0:	ec45 4b10 	vmov	d0, r4, r5
 800f2a4:	f000 f986 	bl	800f5b4 <finite>
 800f2a8:	b338      	cbz	r0, 800f2fa <pow+0xa2>
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	4629      	mov	r1, r5
 800f2b2:	f7f1 fc1b 	bl	8000aec <__aeabi_dcmplt>
 800f2b6:	b300      	cbz	r0, 800f2fa <pow+0xa2>
 800f2b8:	f7fc fc0e 	bl	800bad8 <__errno>
 800f2bc:	2322      	movs	r3, #34	@ 0x22
 800f2be:	e01b      	b.n	800f2f8 <pow+0xa0>
 800f2c0:	ec47 6b10 	vmov	d0, r6, r7
 800f2c4:	f000 f976 	bl	800f5b4 <finite>
 800f2c8:	b9e0      	cbnz	r0, 800f304 <pow+0xac>
 800f2ca:	eeb0 0a48 	vmov.f32	s0, s16
 800f2ce:	eef0 0a68 	vmov.f32	s1, s17
 800f2d2:	f000 f96f 	bl	800f5b4 <finite>
 800f2d6:	b1a8      	cbz	r0, 800f304 <pow+0xac>
 800f2d8:	ec45 4b10 	vmov	d0, r4, r5
 800f2dc:	f000 f96a 	bl	800f5b4 <finite>
 800f2e0:	b180      	cbz	r0, 800f304 <pow+0xac>
 800f2e2:	4632      	mov	r2, r6
 800f2e4:	463b      	mov	r3, r7
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	4639      	mov	r1, r7
 800f2ea:	f7f1 fc27 	bl	8000b3c <__aeabi_dcmpun>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	d0e2      	beq.n	800f2b8 <pow+0x60>
 800f2f2:	f7fc fbf1 	bl	800bad8 <__errno>
 800f2f6:	2321      	movs	r3, #33	@ 0x21
 800f2f8:	6003      	str	r3, [r0, #0]
 800f2fa:	ecbd 8b02 	vpop	{d8}
 800f2fe:	ec47 6b10 	vmov	d0, r6, r7
 800f302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f304:	2200      	movs	r2, #0
 800f306:	2300      	movs	r3, #0
 800f308:	4630      	mov	r0, r6
 800f30a:	4639      	mov	r1, r7
 800f30c:	f7f1 fbe4 	bl	8000ad8 <__aeabi_dcmpeq>
 800f310:	2800      	cmp	r0, #0
 800f312:	d0f2      	beq.n	800f2fa <pow+0xa2>
 800f314:	eeb0 0a48 	vmov.f32	s0, s16
 800f318:	eef0 0a68 	vmov.f32	s1, s17
 800f31c:	f000 f94a 	bl	800f5b4 <finite>
 800f320:	2800      	cmp	r0, #0
 800f322:	d0ea      	beq.n	800f2fa <pow+0xa2>
 800f324:	ec45 4b10 	vmov	d0, r4, r5
 800f328:	f000 f944 	bl	800f5b4 <finite>
 800f32c:	e7c3      	b.n	800f2b6 <pow+0x5e>
 800f32e:	4f01      	ldr	r7, [pc, #4]	@ (800f334 <pow+0xdc>)
 800f330:	2600      	movs	r6, #0
 800f332:	e7e2      	b.n	800f2fa <pow+0xa2>
 800f334:	3ff00000 	.word	0x3ff00000

0800f338 <sqrt>:
 800f338:	b538      	push	{r3, r4, r5, lr}
 800f33a:	ed2d 8b02 	vpush	{d8}
 800f33e:	ec55 4b10 	vmov	r4, r5, d0
 800f342:	f000 f943 	bl	800f5cc <__ieee754_sqrt>
 800f346:	4622      	mov	r2, r4
 800f348:	462b      	mov	r3, r5
 800f34a:	4620      	mov	r0, r4
 800f34c:	4629      	mov	r1, r5
 800f34e:	eeb0 8a40 	vmov.f32	s16, s0
 800f352:	eef0 8a60 	vmov.f32	s17, s1
 800f356:	f7f1 fbf1 	bl	8000b3c <__aeabi_dcmpun>
 800f35a:	b990      	cbnz	r0, 800f382 <sqrt+0x4a>
 800f35c:	2200      	movs	r2, #0
 800f35e:	2300      	movs	r3, #0
 800f360:	4620      	mov	r0, r4
 800f362:	4629      	mov	r1, r5
 800f364:	f7f1 fbc2 	bl	8000aec <__aeabi_dcmplt>
 800f368:	b158      	cbz	r0, 800f382 <sqrt+0x4a>
 800f36a:	f7fc fbb5 	bl	800bad8 <__errno>
 800f36e:	2321      	movs	r3, #33	@ 0x21
 800f370:	6003      	str	r3, [r0, #0]
 800f372:	2200      	movs	r2, #0
 800f374:	2300      	movs	r3, #0
 800f376:	4610      	mov	r0, r2
 800f378:	4619      	mov	r1, r3
 800f37a:	f7f1 fa6f 	bl	800085c <__aeabi_ddiv>
 800f37e:	ec41 0b18 	vmov	d8, r0, r1
 800f382:	eeb0 0a48 	vmov.f32	s0, s16
 800f386:	eef0 0a68 	vmov.f32	s1, s17
 800f38a:	ecbd 8b02 	vpop	{d8}
 800f38e:	bd38      	pop	{r3, r4, r5, pc}

0800f390 <fabs>:
 800f390:	ec51 0b10 	vmov	r0, r1, d0
 800f394:	4602      	mov	r2, r0
 800f396:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f39a:	ec43 2b10 	vmov	d0, r2, r3
 800f39e:	4770      	bx	lr

0800f3a0 <asinf>:
 800f3a0:	b508      	push	{r3, lr}
 800f3a2:	ed2d 8b02 	vpush	{d8}
 800f3a6:	eeb0 8a40 	vmov.f32	s16, s0
 800f3aa:	f001 fd19 	bl	8010de0 <__ieee754_asinf>
 800f3ae:	eeb4 8a48 	vcmp.f32	s16, s16
 800f3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b6:	eef0 8a40 	vmov.f32	s17, s0
 800f3ba:	d615      	bvs.n	800f3e8 <asinf+0x48>
 800f3bc:	eeb0 0a48 	vmov.f32	s0, s16
 800f3c0:	f000 f87e 	bl	800f4c0 <fabsf>
 800f3c4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f3c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3d0:	dd0a      	ble.n	800f3e8 <asinf+0x48>
 800f3d2:	f7fc fb81 	bl	800bad8 <__errno>
 800f3d6:	ecbd 8b02 	vpop	{d8}
 800f3da:	2321      	movs	r3, #33	@ 0x21
 800f3dc:	6003      	str	r3, [r0, #0]
 800f3de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f3e2:	4804      	ldr	r0, [pc, #16]	@ (800f3f4 <asinf+0x54>)
 800f3e4:	f7fc bba6 	b.w	800bb34 <nanf>
 800f3e8:	eeb0 0a68 	vmov.f32	s0, s17
 800f3ec:	ecbd 8b02 	vpop	{d8}
 800f3f0:	bd08      	pop	{r3, pc}
 800f3f2:	bf00      	nop
 800f3f4:	08011ed9 	.word	0x08011ed9

0800f3f8 <atan2f>:
 800f3f8:	f001 bdd6 	b.w	8010fa8 <__ieee754_atan2f>

0800f3fc <sqrtf>:
 800f3fc:	b508      	push	{r3, lr}
 800f3fe:	ed2d 8b02 	vpush	{d8}
 800f402:	eeb0 8a40 	vmov.f32	s16, s0
 800f406:	f000 f9b7 	bl	800f778 <__ieee754_sqrtf>
 800f40a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f412:	d60c      	bvs.n	800f42e <sqrtf+0x32>
 800f414:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f434 <sqrtf+0x38>
 800f418:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f420:	d505      	bpl.n	800f42e <sqrtf+0x32>
 800f422:	f7fc fb59 	bl	800bad8 <__errno>
 800f426:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f42a:	2321      	movs	r3, #33	@ 0x21
 800f42c:	6003      	str	r3, [r0, #0]
 800f42e:	ecbd 8b02 	vpop	{d8}
 800f432:	bd08      	pop	{r3, pc}
 800f434:	00000000 	.word	0x00000000

0800f438 <cosf>:
 800f438:	ee10 3a10 	vmov	r3, s0
 800f43c:	b507      	push	{r0, r1, r2, lr}
 800f43e:	4a1e      	ldr	r2, [pc, #120]	@ (800f4b8 <cosf+0x80>)
 800f440:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f444:	4293      	cmp	r3, r2
 800f446:	d806      	bhi.n	800f456 <cosf+0x1e>
 800f448:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f4bc <cosf+0x84>
 800f44c:	b003      	add	sp, #12
 800f44e:	f85d eb04 	ldr.w	lr, [sp], #4
 800f452:	f001 bb45 	b.w	8010ae0 <__kernel_cosf>
 800f456:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f45a:	d304      	bcc.n	800f466 <cosf+0x2e>
 800f45c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f460:	b003      	add	sp, #12
 800f462:	f85d fb04 	ldr.w	pc, [sp], #4
 800f466:	4668      	mov	r0, sp
 800f468:	f001 fe3e 	bl	80110e8 <__ieee754_rem_pio2f>
 800f46c:	f000 0003 	and.w	r0, r0, #3
 800f470:	2801      	cmp	r0, #1
 800f472:	d009      	beq.n	800f488 <cosf+0x50>
 800f474:	2802      	cmp	r0, #2
 800f476:	d010      	beq.n	800f49a <cosf+0x62>
 800f478:	b9b0      	cbnz	r0, 800f4a8 <cosf+0x70>
 800f47a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f47e:	ed9d 0a00 	vldr	s0, [sp]
 800f482:	f001 fb2d 	bl	8010ae0 <__kernel_cosf>
 800f486:	e7eb      	b.n	800f460 <cosf+0x28>
 800f488:	eddd 0a01 	vldr	s1, [sp, #4]
 800f48c:	ed9d 0a00 	vldr	s0, [sp]
 800f490:	f001 fb7e 	bl	8010b90 <__kernel_sinf>
 800f494:	eeb1 0a40 	vneg.f32	s0, s0
 800f498:	e7e2      	b.n	800f460 <cosf+0x28>
 800f49a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f49e:	ed9d 0a00 	vldr	s0, [sp]
 800f4a2:	f001 fb1d 	bl	8010ae0 <__kernel_cosf>
 800f4a6:	e7f5      	b.n	800f494 <cosf+0x5c>
 800f4a8:	eddd 0a01 	vldr	s1, [sp, #4]
 800f4ac:	ed9d 0a00 	vldr	s0, [sp]
 800f4b0:	2001      	movs	r0, #1
 800f4b2:	f001 fb6d 	bl	8010b90 <__kernel_sinf>
 800f4b6:	e7d3      	b.n	800f460 <cosf+0x28>
 800f4b8:	3f490fd8 	.word	0x3f490fd8
 800f4bc:	00000000 	.word	0x00000000

0800f4c0 <fabsf>:
 800f4c0:	ee10 3a10 	vmov	r3, s0
 800f4c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f4c8:	ee00 3a10 	vmov	s0, r3
 800f4cc:	4770      	bx	lr
	...

0800f4d0 <sinf>:
 800f4d0:	ee10 3a10 	vmov	r3, s0
 800f4d4:	b507      	push	{r0, r1, r2, lr}
 800f4d6:	4a1f      	ldr	r2, [pc, #124]	@ (800f554 <sinf+0x84>)
 800f4d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d807      	bhi.n	800f4f0 <sinf+0x20>
 800f4e0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f558 <sinf+0x88>
 800f4e4:	2000      	movs	r0, #0
 800f4e6:	b003      	add	sp, #12
 800f4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4ec:	f001 bb50 	b.w	8010b90 <__kernel_sinf>
 800f4f0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f4f4:	d304      	bcc.n	800f500 <sinf+0x30>
 800f4f6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f4fa:	b003      	add	sp, #12
 800f4fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f500:	4668      	mov	r0, sp
 800f502:	f001 fdf1 	bl	80110e8 <__ieee754_rem_pio2f>
 800f506:	f000 0003 	and.w	r0, r0, #3
 800f50a:	2801      	cmp	r0, #1
 800f50c:	d00a      	beq.n	800f524 <sinf+0x54>
 800f50e:	2802      	cmp	r0, #2
 800f510:	d00f      	beq.n	800f532 <sinf+0x62>
 800f512:	b9c0      	cbnz	r0, 800f546 <sinf+0x76>
 800f514:	eddd 0a01 	vldr	s1, [sp, #4]
 800f518:	ed9d 0a00 	vldr	s0, [sp]
 800f51c:	2001      	movs	r0, #1
 800f51e:	f001 fb37 	bl	8010b90 <__kernel_sinf>
 800f522:	e7ea      	b.n	800f4fa <sinf+0x2a>
 800f524:	eddd 0a01 	vldr	s1, [sp, #4]
 800f528:	ed9d 0a00 	vldr	s0, [sp]
 800f52c:	f001 fad8 	bl	8010ae0 <__kernel_cosf>
 800f530:	e7e3      	b.n	800f4fa <sinf+0x2a>
 800f532:	eddd 0a01 	vldr	s1, [sp, #4]
 800f536:	ed9d 0a00 	vldr	s0, [sp]
 800f53a:	2001      	movs	r0, #1
 800f53c:	f001 fb28 	bl	8010b90 <__kernel_sinf>
 800f540:	eeb1 0a40 	vneg.f32	s0, s0
 800f544:	e7d9      	b.n	800f4fa <sinf+0x2a>
 800f546:	eddd 0a01 	vldr	s1, [sp, #4]
 800f54a:	ed9d 0a00 	vldr	s0, [sp]
 800f54e:	f001 fac7 	bl	8010ae0 <__kernel_cosf>
 800f552:	e7f5      	b.n	800f540 <sinf+0x70>
 800f554:	3f490fd8 	.word	0x3f490fd8
 800f558:	00000000 	.word	0x00000000

0800f55c <tanf>:
 800f55c:	ee10 3a10 	vmov	r3, s0
 800f560:	b507      	push	{r0, r1, r2, lr}
 800f562:	4a12      	ldr	r2, [pc, #72]	@ (800f5ac <tanf+0x50>)
 800f564:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f568:	4293      	cmp	r3, r2
 800f56a:	d807      	bhi.n	800f57c <tanf+0x20>
 800f56c:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800f5b0 <tanf+0x54>
 800f570:	2001      	movs	r0, #1
 800f572:	b003      	add	sp, #12
 800f574:	f85d eb04 	ldr.w	lr, [sp], #4
 800f578:	f001 bb52 	b.w	8010c20 <__kernel_tanf>
 800f57c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f580:	d304      	bcc.n	800f58c <tanf+0x30>
 800f582:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f586:	b003      	add	sp, #12
 800f588:	f85d fb04 	ldr.w	pc, [sp], #4
 800f58c:	4668      	mov	r0, sp
 800f58e:	f001 fdab 	bl	80110e8 <__ieee754_rem_pio2f>
 800f592:	0040      	lsls	r0, r0, #1
 800f594:	f000 0002 	and.w	r0, r0, #2
 800f598:	eddd 0a01 	vldr	s1, [sp, #4]
 800f59c:	ed9d 0a00 	vldr	s0, [sp]
 800f5a0:	f1c0 0001 	rsb	r0, r0, #1
 800f5a4:	f001 fb3c 	bl	8010c20 <__kernel_tanf>
 800f5a8:	e7ed      	b.n	800f586 <tanf+0x2a>
 800f5aa:	bf00      	nop
 800f5ac:	3f490fda 	.word	0x3f490fda
 800f5b0:	00000000 	.word	0x00000000

0800f5b4 <finite>:
 800f5b4:	b082      	sub	sp, #8
 800f5b6:	ed8d 0b00 	vstr	d0, [sp]
 800f5ba:	9801      	ldr	r0, [sp, #4]
 800f5bc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f5c0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f5c4:	0fc0      	lsrs	r0, r0, #31
 800f5c6:	b002      	add	sp, #8
 800f5c8:	4770      	bx	lr
	...

0800f5cc <__ieee754_sqrt>:
 800f5cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d0:	4a66      	ldr	r2, [pc, #408]	@ (800f76c <__ieee754_sqrt+0x1a0>)
 800f5d2:	ec55 4b10 	vmov	r4, r5, d0
 800f5d6:	43aa      	bics	r2, r5
 800f5d8:	462b      	mov	r3, r5
 800f5da:	4621      	mov	r1, r4
 800f5dc:	d110      	bne.n	800f600 <__ieee754_sqrt+0x34>
 800f5de:	4622      	mov	r2, r4
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	4629      	mov	r1, r5
 800f5e4:	f7f1 f810 	bl	8000608 <__aeabi_dmul>
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	4629      	mov	r1, r5
 800f5f0:	f7f0 fe54 	bl	800029c <__adddf3>
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	460d      	mov	r5, r1
 800f5f8:	ec45 4b10 	vmov	d0, r4, r5
 800f5fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f600:	2d00      	cmp	r5, #0
 800f602:	dc0e      	bgt.n	800f622 <__ieee754_sqrt+0x56>
 800f604:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f608:	4322      	orrs	r2, r4
 800f60a:	d0f5      	beq.n	800f5f8 <__ieee754_sqrt+0x2c>
 800f60c:	b19d      	cbz	r5, 800f636 <__ieee754_sqrt+0x6a>
 800f60e:	4622      	mov	r2, r4
 800f610:	4620      	mov	r0, r4
 800f612:	4629      	mov	r1, r5
 800f614:	f7f0 fe40 	bl	8000298 <__aeabi_dsub>
 800f618:	4602      	mov	r2, r0
 800f61a:	460b      	mov	r3, r1
 800f61c:	f7f1 f91e 	bl	800085c <__aeabi_ddiv>
 800f620:	e7e8      	b.n	800f5f4 <__ieee754_sqrt+0x28>
 800f622:	152a      	asrs	r2, r5, #20
 800f624:	d115      	bne.n	800f652 <__ieee754_sqrt+0x86>
 800f626:	2000      	movs	r0, #0
 800f628:	e009      	b.n	800f63e <__ieee754_sqrt+0x72>
 800f62a:	0acb      	lsrs	r3, r1, #11
 800f62c:	3a15      	subs	r2, #21
 800f62e:	0549      	lsls	r1, r1, #21
 800f630:	2b00      	cmp	r3, #0
 800f632:	d0fa      	beq.n	800f62a <__ieee754_sqrt+0x5e>
 800f634:	e7f7      	b.n	800f626 <__ieee754_sqrt+0x5a>
 800f636:	462a      	mov	r2, r5
 800f638:	e7fa      	b.n	800f630 <__ieee754_sqrt+0x64>
 800f63a:	005b      	lsls	r3, r3, #1
 800f63c:	3001      	adds	r0, #1
 800f63e:	02dc      	lsls	r4, r3, #11
 800f640:	d5fb      	bpl.n	800f63a <__ieee754_sqrt+0x6e>
 800f642:	1e44      	subs	r4, r0, #1
 800f644:	1b12      	subs	r2, r2, r4
 800f646:	f1c0 0420 	rsb	r4, r0, #32
 800f64a:	fa21 f404 	lsr.w	r4, r1, r4
 800f64e:	4323      	orrs	r3, r4
 800f650:	4081      	lsls	r1, r0
 800f652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f656:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800f65a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f65e:	07d2      	lsls	r2, r2, #31
 800f660:	bf5c      	itt	pl
 800f662:	005b      	lslpl	r3, r3, #1
 800f664:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f668:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f66c:	bf58      	it	pl
 800f66e:	0049      	lslpl	r1, r1, #1
 800f670:	2600      	movs	r6, #0
 800f672:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f676:	107f      	asrs	r7, r7, #1
 800f678:	0049      	lsls	r1, r1, #1
 800f67a:	2016      	movs	r0, #22
 800f67c:	4632      	mov	r2, r6
 800f67e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f682:	1915      	adds	r5, r2, r4
 800f684:	429d      	cmp	r5, r3
 800f686:	bfde      	ittt	le
 800f688:	192a      	addle	r2, r5, r4
 800f68a:	1b5b      	suble	r3, r3, r5
 800f68c:	1936      	addle	r6, r6, r4
 800f68e:	0fcd      	lsrs	r5, r1, #31
 800f690:	3801      	subs	r0, #1
 800f692:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800f696:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f69a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f69e:	d1f0      	bne.n	800f682 <__ieee754_sqrt+0xb6>
 800f6a0:	4605      	mov	r5, r0
 800f6a2:	2420      	movs	r4, #32
 800f6a4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	eb0c 0e00 	add.w	lr, ip, r0
 800f6ae:	dc02      	bgt.n	800f6b6 <__ieee754_sqrt+0xea>
 800f6b0:	d113      	bne.n	800f6da <__ieee754_sqrt+0x10e>
 800f6b2:	458e      	cmp	lr, r1
 800f6b4:	d811      	bhi.n	800f6da <__ieee754_sqrt+0x10e>
 800f6b6:	f1be 0f00 	cmp.w	lr, #0
 800f6ba:	eb0e 000c 	add.w	r0, lr, ip
 800f6be:	da3f      	bge.n	800f740 <__ieee754_sqrt+0x174>
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	db3d      	blt.n	800f740 <__ieee754_sqrt+0x174>
 800f6c4:	f102 0801 	add.w	r8, r2, #1
 800f6c8:	1a9b      	subs	r3, r3, r2
 800f6ca:	458e      	cmp	lr, r1
 800f6cc:	bf88      	it	hi
 800f6ce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f6d2:	eba1 010e 	sub.w	r1, r1, lr
 800f6d6:	4465      	add	r5, ip
 800f6d8:	4642      	mov	r2, r8
 800f6da:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f6de:	3c01      	subs	r4, #1
 800f6e0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f6e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f6e8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f6ec:	d1dc      	bne.n	800f6a8 <__ieee754_sqrt+0xdc>
 800f6ee:	4319      	orrs	r1, r3
 800f6f0:	d01b      	beq.n	800f72a <__ieee754_sqrt+0x15e>
 800f6f2:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800f770 <__ieee754_sqrt+0x1a4>
 800f6f6:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800f774 <__ieee754_sqrt+0x1a8>
 800f6fa:	e9da 0100 	ldrd	r0, r1, [sl]
 800f6fe:	e9db 2300 	ldrd	r2, r3, [fp]
 800f702:	f7f0 fdc9 	bl	8000298 <__aeabi_dsub>
 800f706:	e9da 8900 	ldrd	r8, r9, [sl]
 800f70a:	4602      	mov	r2, r0
 800f70c:	460b      	mov	r3, r1
 800f70e:	4640      	mov	r0, r8
 800f710:	4649      	mov	r1, r9
 800f712:	f7f1 f9f5 	bl	8000b00 <__aeabi_dcmple>
 800f716:	b140      	cbz	r0, 800f72a <__ieee754_sqrt+0x15e>
 800f718:	f1b5 3fff 	cmp.w	r5, #4294967295
 800f71c:	e9da 0100 	ldrd	r0, r1, [sl]
 800f720:	e9db 2300 	ldrd	r2, r3, [fp]
 800f724:	d10e      	bne.n	800f744 <__ieee754_sqrt+0x178>
 800f726:	3601      	adds	r6, #1
 800f728:	4625      	mov	r5, r4
 800f72a:	1073      	asrs	r3, r6, #1
 800f72c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800f730:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800f734:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800f738:	086b      	lsrs	r3, r5, #1
 800f73a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800f73e:	e759      	b.n	800f5f4 <__ieee754_sqrt+0x28>
 800f740:	4690      	mov	r8, r2
 800f742:	e7c1      	b.n	800f6c8 <__ieee754_sqrt+0xfc>
 800f744:	f7f0 fdaa 	bl	800029c <__adddf3>
 800f748:	e9da 8900 	ldrd	r8, r9, [sl]
 800f74c:	4602      	mov	r2, r0
 800f74e:	460b      	mov	r3, r1
 800f750:	4640      	mov	r0, r8
 800f752:	4649      	mov	r1, r9
 800f754:	f7f1 f9ca 	bl	8000aec <__aeabi_dcmplt>
 800f758:	b120      	cbz	r0, 800f764 <__ieee754_sqrt+0x198>
 800f75a:	1cab      	adds	r3, r5, #2
 800f75c:	bf08      	it	eq
 800f75e:	3601      	addeq	r6, #1
 800f760:	3502      	adds	r5, #2
 800f762:	e7e2      	b.n	800f72a <__ieee754_sqrt+0x15e>
 800f764:	1c6b      	adds	r3, r5, #1
 800f766:	f023 0501 	bic.w	r5, r3, #1
 800f76a:	e7de      	b.n	800f72a <__ieee754_sqrt+0x15e>
 800f76c:	7ff00000 	.word	0x7ff00000
 800f770:	08012198 	.word	0x08012198
 800f774:	08012190 	.word	0x08012190

0800f778 <__ieee754_sqrtf>:
 800f778:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f77c:	4770      	bx	lr
	...

0800f780 <__ieee754_asin>:
 800f780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f784:	ec55 4b10 	vmov	r4, r5, d0
 800f788:	4bc7      	ldr	r3, [pc, #796]	@ (800faa8 <__ieee754_asin+0x328>)
 800f78a:	b087      	sub	sp, #28
 800f78c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f790:	429e      	cmp	r6, r3
 800f792:	9501      	str	r5, [sp, #4]
 800f794:	d92d      	bls.n	800f7f2 <__ieee754_asin+0x72>
 800f796:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800f79a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800f79e:	4326      	orrs	r6, r4
 800f7a0:	d116      	bne.n	800f7d0 <__ieee754_asin+0x50>
 800f7a2:	a3a7      	add	r3, pc, #668	@ (adr r3, 800fa40 <__ieee754_asin+0x2c0>)
 800f7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	4629      	mov	r1, r5
 800f7ac:	f7f0 ff2c 	bl	8000608 <__aeabi_dmul>
 800f7b0:	a3a5      	add	r3, pc, #660	@ (adr r3, 800fa48 <__ieee754_asin+0x2c8>)
 800f7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b6:	4606      	mov	r6, r0
 800f7b8:	460f      	mov	r7, r1
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	4629      	mov	r1, r5
 800f7be:	f7f0 ff23 	bl	8000608 <__aeabi_dmul>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	4630      	mov	r0, r6
 800f7c8:	4639      	mov	r1, r7
 800f7ca:	f7f0 fd67 	bl	800029c <__adddf3>
 800f7ce:	e009      	b.n	800f7e4 <__ieee754_asin+0x64>
 800f7d0:	4622      	mov	r2, r4
 800f7d2:	462b      	mov	r3, r5
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	4629      	mov	r1, r5
 800f7d8:	f7f0 fd5e 	bl	8000298 <__aeabi_dsub>
 800f7dc:	4602      	mov	r2, r0
 800f7de:	460b      	mov	r3, r1
 800f7e0:	f7f1 f83c 	bl	800085c <__aeabi_ddiv>
 800f7e4:	4604      	mov	r4, r0
 800f7e6:	460d      	mov	r5, r1
 800f7e8:	ec45 4b10 	vmov	d0, r4, r5
 800f7ec:	b007      	add	sp, #28
 800f7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f2:	4bae      	ldr	r3, [pc, #696]	@ (800faac <__ieee754_asin+0x32c>)
 800f7f4:	429e      	cmp	r6, r3
 800f7f6:	d810      	bhi.n	800f81a <__ieee754_asin+0x9a>
 800f7f8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800f7fc:	f080 80ad 	bcs.w	800f95a <__ieee754_asin+0x1da>
 800f800:	a393      	add	r3, pc, #588	@ (adr r3, 800fa50 <__ieee754_asin+0x2d0>)
 800f802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f806:	4620      	mov	r0, r4
 800f808:	4629      	mov	r1, r5
 800f80a:	f7f0 fd47 	bl	800029c <__adddf3>
 800f80e:	4ba8      	ldr	r3, [pc, #672]	@ (800fab0 <__ieee754_asin+0x330>)
 800f810:	2200      	movs	r2, #0
 800f812:	f7f1 f989 	bl	8000b28 <__aeabi_dcmpgt>
 800f816:	2800      	cmp	r0, #0
 800f818:	d1e6      	bne.n	800f7e8 <__ieee754_asin+0x68>
 800f81a:	ec45 4b10 	vmov	d0, r4, r5
 800f81e:	f7ff fdb7 	bl	800f390 <fabs>
 800f822:	49a3      	ldr	r1, [pc, #652]	@ (800fab0 <__ieee754_asin+0x330>)
 800f824:	ec53 2b10 	vmov	r2, r3, d0
 800f828:	2000      	movs	r0, #0
 800f82a:	f7f0 fd35 	bl	8000298 <__aeabi_dsub>
 800f82e:	4ba1      	ldr	r3, [pc, #644]	@ (800fab4 <__ieee754_asin+0x334>)
 800f830:	2200      	movs	r2, #0
 800f832:	f7f0 fee9 	bl	8000608 <__aeabi_dmul>
 800f836:	a388      	add	r3, pc, #544	@ (adr r3, 800fa58 <__ieee754_asin+0x2d8>)
 800f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83c:	4604      	mov	r4, r0
 800f83e:	460d      	mov	r5, r1
 800f840:	f7f0 fee2 	bl	8000608 <__aeabi_dmul>
 800f844:	a386      	add	r3, pc, #536	@ (adr r3, 800fa60 <__ieee754_asin+0x2e0>)
 800f846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84a:	f7f0 fd27 	bl	800029c <__adddf3>
 800f84e:	4622      	mov	r2, r4
 800f850:	462b      	mov	r3, r5
 800f852:	f7f0 fed9 	bl	8000608 <__aeabi_dmul>
 800f856:	a384      	add	r3, pc, #528	@ (adr r3, 800fa68 <__ieee754_asin+0x2e8>)
 800f858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85c:	f7f0 fd1c 	bl	8000298 <__aeabi_dsub>
 800f860:	4622      	mov	r2, r4
 800f862:	462b      	mov	r3, r5
 800f864:	f7f0 fed0 	bl	8000608 <__aeabi_dmul>
 800f868:	a381      	add	r3, pc, #516	@ (adr r3, 800fa70 <__ieee754_asin+0x2f0>)
 800f86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86e:	f7f0 fd15 	bl	800029c <__adddf3>
 800f872:	4622      	mov	r2, r4
 800f874:	462b      	mov	r3, r5
 800f876:	f7f0 fec7 	bl	8000608 <__aeabi_dmul>
 800f87a:	a37f      	add	r3, pc, #508	@ (adr r3, 800fa78 <__ieee754_asin+0x2f8>)
 800f87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f880:	f7f0 fd0a 	bl	8000298 <__aeabi_dsub>
 800f884:	4622      	mov	r2, r4
 800f886:	462b      	mov	r3, r5
 800f888:	f7f0 febe 	bl	8000608 <__aeabi_dmul>
 800f88c:	a37c      	add	r3, pc, #496	@ (adr r3, 800fa80 <__ieee754_asin+0x300>)
 800f88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f892:	f7f0 fd03 	bl	800029c <__adddf3>
 800f896:	4622      	mov	r2, r4
 800f898:	462b      	mov	r3, r5
 800f89a:	f7f0 feb5 	bl	8000608 <__aeabi_dmul>
 800f89e:	a37a      	add	r3, pc, #488	@ (adr r3, 800fa88 <__ieee754_asin+0x308>)
 800f8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	4629      	mov	r1, r5
 800f8ac:	f7f0 feac 	bl	8000608 <__aeabi_dmul>
 800f8b0:	a377      	add	r3, pc, #476	@ (adr r3, 800fa90 <__ieee754_asin+0x310>)
 800f8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b6:	f7f0 fcef 	bl	8000298 <__aeabi_dsub>
 800f8ba:	4622      	mov	r2, r4
 800f8bc:	462b      	mov	r3, r5
 800f8be:	f7f0 fea3 	bl	8000608 <__aeabi_dmul>
 800f8c2:	a375      	add	r3, pc, #468	@ (adr r3, 800fa98 <__ieee754_asin+0x318>)
 800f8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c8:	f7f0 fce8 	bl	800029c <__adddf3>
 800f8cc:	4622      	mov	r2, r4
 800f8ce:	462b      	mov	r3, r5
 800f8d0:	f7f0 fe9a 	bl	8000608 <__aeabi_dmul>
 800f8d4:	a372      	add	r3, pc, #456	@ (adr r3, 800faa0 <__ieee754_asin+0x320>)
 800f8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8da:	f7f0 fcdd 	bl	8000298 <__aeabi_dsub>
 800f8de:	4622      	mov	r2, r4
 800f8e0:	462b      	mov	r3, r5
 800f8e2:	f7f0 fe91 	bl	8000608 <__aeabi_dmul>
 800f8e6:	4b72      	ldr	r3, [pc, #456]	@ (800fab0 <__ieee754_asin+0x330>)
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f7f0 fcd7 	bl	800029c <__adddf3>
 800f8ee:	ec45 4b10 	vmov	d0, r4, r5
 800f8f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f8f6:	f7ff fe69 	bl	800f5cc <__ieee754_sqrt>
 800f8fa:	4b6f      	ldr	r3, [pc, #444]	@ (800fab8 <__ieee754_asin+0x338>)
 800f8fc:	429e      	cmp	r6, r3
 800f8fe:	ec5b ab10 	vmov	sl, fp, d0
 800f902:	f240 80db 	bls.w	800fabc <__ieee754_asin+0x33c>
 800f906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f90a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f90e:	f7f0 ffa5 	bl	800085c <__aeabi_ddiv>
 800f912:	4652      	mov	r2, sl
 800f914:	465b      	mov	r3, fp
 800f916:	f7f0 fe77 	bl	8000608 <__aeabi_dmul>
 800f91a:	4652      	mov	r2, sl
 800f91c:	465b      	mov	r3, fp
 800f91e:	f7f0 fcbd 	bl	800029c <__adddf3>
 800f922:	4602      	mov	r2, r0
 800f924:	460b      	mov	r3, r1
 800f926:	f7f0 fcb9 	bl	800029c <__adddf3>
 800f92a:	a347      	add	r3, pc, #284	@ (adr r3, 800fa48 <__ieee754_asin+0x2c8>)
 800f92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f930:	f7f0 fcb2 	bl	8000298 <__aeabi_dsub>
 800f934:	4602      	mov	r2, r0
 800f936:	460b      	mov	r3, r1
 800f938:	a141      	add	r1, pc, #260	@ (adr r1, 800fa40 <__ieee754_asin+0x2c0>)
 800f93a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f93e:	f7f0 fcab 	bl	8000298 <__aeabi_dsub>
 800f942:	9b01      	ldr	r3, [sp, #4]
 800f944:	2b00      	cmp	r3, #0
 800f946:	bfdc      	itt	le
 800f948:	4602      	movle	r2, r0
 800f94a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800f94e:	4604      	mov	r4, r0
 800f950:	460d      	mov	r5, r1
 800f952:	bfdc      	itt	le
 800f954:	4614      	movle	r4, r2
 800f956:	461d      	movle	r5, r3
 800f958:	e746      	b.n	800f7e8 <__ieee754_asin+0x68>
 800f95a:	4622      	mov	r2, r4
 800f95c:	462b      	mov	r3, r5
 800f95e:	4620      	mov	r0, r4
 800f960:	4629      	mov	r1, r5
 800f962:	f7f0 fe51 	bl	8000608 <__aeabi_dmul>
 800f966:	a33c      	add	r3, pc, #240	@ (adr r3, 800fa58 <__ieee754_asin+0x2d8>)
 800f968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96c:	4606      	mov	r6, r0
 800f96e:	460f      	mov	r7, r1
 800f970:	f7f0 fe4a 	bl	8000608 <__aeabi_dmul>
 800f974:	a33a      	add	r3, pc, #232	@ (adr r3, 800fa60 <__ieee754_asin+0x2e0>)
 800f976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97a:	f7f0 fc8f 	bl	800029c <__adddf3>
 800f97e:	4632      	mov	r2, r6
 800f980:	463b      	mov	r3, r7
 800f982:	f7f0 fe41 	bl	8000608 <__aeabi_dmul>
 800f986:	a338      	add	r3, pc, #224	@ (adr r3, 800fa68 <__ieee754_asin+0x2e8>)
 800f988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f98c:	f7f0 fc84 	bl	8000298 <__aeabi_dsub>
 800f990:	4632      	mov	r2, r6
 800f992:	463b      	mov	r3, r7
 800f994:	f7f0 fe38 	bl	8000608 <__aeabi_dmul>
 800f998:	a335      	add	r3, pc, #212	@ (adr r3, 800fa70 <__ieee754_asin+0x2f0>)
 800f99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f99e:	f7f0 fc7d 	bl	800029c <__adddf3>
 800f9a2:	4632      	mov	r2, r6
 800f9a4:	463b      	mov	r3, r7
 800f9a6:	f7f0 fe2f 	bl	8000608 <__aeabi_dmul>
 800f9aa:	a333      	add	r3, pc, #204	@ (adr r3, 800fa78 <__ieee754_asin+0x2f8>)
 800f9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b0:	f7f0 fc72 	bl	8000298 <__aeabi_dsub>
 800f9b4:	4632      	mov	r2, r6
 800f9b6:	463b      	mov	r3, r7
 800f9b8:	f7f0 fe26 	bl	8000608 <__aeabi_dmul>
 800f9bc:	a330      	add	r3, pc, #192	@ (adr r3, 800fa80 <__ieee754_asin+0x300>)
 800f9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c2:	f7f0 fc6b 	bl	800029c <__adddf3>
 800f9c6:	4632      	mov	r2, r6
 800f9c8:	463b      	mov	r3, r7
 800f9ca:	f7f0 fe1d 	bl	8000608 <__aeabi_dmul>
 800f9ce:	a32e      	add	r3, pc, #184	@ (adr r3, 800fa88 <__ieee754_asin+0x308>)
 800f9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d4:	4680      	mov	r8, r0
 800f9d6:	4689      	mov	r9, r1
 800f9d8:	4630      	mov	r0, r6
 800f9da:	4639      	mov	r1, r7
 800f9dc:	f7f0 fe14 	bl	8000608 <__aeabi_dmul>
 800f9e0:	a32b      	add	r3, pc, #172	@ (adr r3, 800fa90 <__ieee754_asin+0x310>)
 800f9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e6:	f7f0 fc57 	bl	8000298 <__aeabi_dsub>
 800f9ea:	4632      	mov	r2, r6
 800f9ec:	463b      	mov	r3, r7
 800f9ee:	f7f0 fe0b 	bl	8000608 <__aeabi_dmul>
 800f9f2:	a329      	add	r3, pc, #164	@ (adr r3, 800fa98 <__ieee754_asin+0x318>)
 800f9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f8:	f7f0 fc50 	bl	800029c <__adddf3>
 800f9fc:	4632      	mov	r2, r6
 800f9fe:	463b      	mov	r3, r7
 800fa00:	f7f0 fe02 	bl	8000608 <__aeabi_dmul>
 800fa04:	a326      	add	r3, pc, #152	@ (adr r3, 800faa0 <__ieee754_asin+0x320>)
 800fa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0a:	f7f0 fc45 	bl	8000298 <__aeabi_dsub>
 800fa0e:	4632      	mov	r2, r6
 800fa10:	463b      	mov	r3, r7
 800fa12:	f7f0 fdf9 	bl	8000608 <__aeabi_dmul>
 800fa16:	4b26      	ldr	r3, [pc, #152]	@ (800fab0 <__ieee754_asin+0x330>)
 800fa18:	2200      	movs	r2, #0
 800fa1a:	f7f0 fc3f 	bl	800029c <__adddf3>
 800fa1e:	4602      	mov	r2, r0
 800fa20:	460b      	mov	r3, r1
 800fa22:	4640      	mov	r0, r8
 800fa24:	4649      	mov	r1, r9
 800fa26:	f7f0 ff19 	bl	800085c <__aeabi_ddiv>
 800fa2a:	4622      	mov	r2, r4
 800fa2c:	462b      	mov	r3, r5
 800fa2e:	f7f0 fdeb 	bl	8000608 <__aeabi_dmul>
 800fa32:	4602      	mov	r2, r0
 800fa34:	460b      	mov	r3, r1
 800fa36:	4620      	mov	r0, r4
 800fa38:	4629      	mov	r1, r5
 800fa3a:	e6c6      	b.n	800f7ca <__ieee754_asin+0x4a>
 800fa3c:	f3af 8000 	nop.w
 800fa40:	54442d18 	.word	0x54442d18
 800fa44:	3ff921fb 	.word	0x3ff921fb
 800fa48:	33145c07 	.word	0x33145c07
 800fa4c:	3c91a626 	.word	0x3c91a626
 800fa50:	8800759c 	.word	0x8800759c
 800fa54:	7e37e43c 	.word	0x7e37e43c
 800fa58:	0dfdf709 	.word	0x0dfdf709
 800fa5c:	3f023de1 	.word	0x3f023de1
 800fa60:	7501b288 	.word	0x7501b288
 800fa64:	3f49efe0 	.word	0x3f49efe0
 800fa68:	b5688f3b 	.word	0xb5688f3b
 800fa6c:	3fa48228 	.word	0x3fa48228
 800fa70:	0e884455 	.word	0x0e884455
 800fa74:	3fc9c155 	.word	0x3fc9c155
 800fa78:	03eb6f7d 	.word	0x03eb6f7d
 800fa7c:	3fd4d612 	.word	0x3fd4d612
 800fa80:	55555555 	.word	0x55555555
 800fa84:	3fc55555 	.word	0x3fc55555
 800fa88:	b12e9282 	.word	0xb12e9282
 800fa8c:	3fb3b8c5 	.word	0x3fb3b8c5
 800fa90:	1b8d0159 	.word	0x1b8d0159
 800fa94:	3fe6066c 	.word	0x3fe6066c
 800fa98:	9c598ac8 	.word	0x9c598ac8
 800fa9c:	40002ae5 	.word	0x40002ae5
 800faa0:	1c8a2d4b 	.word	0x1c8a2d4b
 800faa4:	40033a27 	.word	0x40033a27
 800faa8:	3fefffff 	.word	0x3fefffff
 800faac:	3fdfffff 	.word	0x3fdfffff
 800fab0:	3ff00000 	.word	0x3ff00000
 800fab4:	3fe00000 	.word	0x3fe00000
 800fab8:	3fef3332 	.word	0x3fef3332
 800fabc:	4652      	mov	r2, sl
 800fabe:	465b      	mov	r3, fp
 800fac0:	4650      	mov	r0, sl
 800fac2:	4659      	mov	r1, fp
 800fac4:	f7f0 fbea 	bl	800029c <__adddf3>
 800fac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800facc:	4606      	mov	r6, r0
 800face:	460f      	mov	r7, r1
 800fad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fad4:	f7f0 fec2 	bl	800085c <__aeabi_ddiv>
 800fad8:	4602      	mov	r2, r0
 800fada:	460b      	mov	r3, r1
 800fadc:	4630      	mov	r0, r6
 800fade:	4639      	mov	r1, r7
 800fae0:	f7f0 fd92 	bl	8000608 <__aeabi_dmul>
 800fae4:	f04f 0800 	mov.w	r8, #0
 800fae8:	4606      	mov	r6, r0
 800faea:	460f      	mov	r7, r1
 800faec:	4642      	mov	r2, r8
 800faee:	465b      	mov	r3, fp
 800faf0:	4640      	mov	r0, r8
 800faf2:	4659      	mov	r1, fp
 800faf4:	f7f0 fd88 	bl	8000608 <__aeabi_dmul>
 800faf8:	4602      	mov	r2, r0
 800fafa:	460b      	mov	r3, r1
 800fafc:	4620      	mov	r0, r4
 800fafe:	4629      	mov	r1, r5
 800fb00:	f7f0 fbca 	bl	8000298 <__aeabi_dsub>
 800fb04:	4642      	mov	r2, r8
 800fb06:	4604      	mov	r4, r0
 800fb08:	460d      	mov	r5, r1
 800fb0a:	465b      	mov	r3, fp
 800fb0c:	4650      	mov	r0, sl
 800fb0e:	4659      	mov	r1, fp
 800fb10:	f7f0 fbc4 	bl	800029c <__adddf3>
 800fb14:	4602      	mov	r2, r0
 800fb16:	460b      	mov	r3, r1
 800fb18:	4620      	mov	r0, r4
 800fb1a:	4629      	mov	r1, r5
 800fb1c:	f7f0 fe9e 	bl	800085c <__aeabi_ddiv>
 800fb20:	4602      	mov	r2, r0
 800fb22:	460b      	mov	r3, r1
 800fb24:	f7f0 fbba 	bl	800029c <__adddf3>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	a112      	add	r1, pc, #72	@ (adr r1, 800fb78 <__ieee754_asin+0x3f8>)
 800fb2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb32:	f7f0 fbb1 	bl	8000298 <__aeabi_dsub>
 800fb36:	4602      	mov	r2, r0
 800fb38:	460b      	mov	r3, r1
 800fb3a:	4630      	mov	r0, r6
 800fb3c:	4639      	mov	r1, r7
 800fb3e:	f7f0 fbab 	bl	8000298 <__aeabi_dsub>
 800fb42:	4642      	mov	r2, r8
 800fb44:	4604      	mov	r4, r0
 800fb46:	460d      	mov	r5, r1
 800fb48:	465b      	mov	r3, fp
 800fb4a:	4640      	mov	r0, r8
 800fb4c:	4659      	mov	r1, fp
 800fb4e:	f7f0 fba5 	bl	800029c <__adddf3>
 800fb52:	4602      	mov	r2, r0
 800fb54:	460b      	mov	r3, r1
 800fb56:	a10a      	add	r1, pc, #40	@ (adr r1, 800fb80 <__ieee754_asin+0x400>)
 800fb58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb5c:	f7f0 fb9c 	bl	8000298 <__aeabi_dsub>
 800fb60:	4602      	mov	r2, r0
 800fb62:	460b      	mov	r3, r1
 800fb64:	4620      	mov	r0, r4
 800fb66:	4629      	mov	r1, r5
 800fb68:	f7f0 fb96 	bl	8000298 <__aeabi_dsub>
 800fb6c:	4602      	mov	r2, r0
 800fb6e:	460b      	mov	r3, r1
 800fb70:	a103      	add	r1, pc, #12	@ (adr r1, 800fb80 <__ieee754_asin+0x400>)
 800fb72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb76:	e6e2      	b.n	800f93e <__ieee754_asin+0x1be>
 800fb78:	33145c07 	.word	0x33145c07
 800fb7c:	3c91a626 	.word	0x3c91a626
 800fb80:	54442d18 	.word	0x54442d18
 800fb84:	3fe921fb 	.word	0x3fe921fb

0800fb88 <__ieee754_atan2>:
 800fb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb8c:	ec57 6b11 	vmov	r6, r7, d1
 800fb90:	4273      	negs	r3, r6
 800fb92:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800fd10 <__ieee754_atan2+0x188>
 800fb96:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800fb9a:	4333      	orrs	r3, r6
 800fb9c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fba0:	4543      	cmp	r3, r8
 800fba2:	ec51 0b10 	vmov	r0, r1, d0
 800fba6:	4635      	mov	r5, r6
 800fba8:	d809      	bhi.n	800fbbe <__ieee754_atan2+0x36>
 800fbaa:	4244      	negs	r4, r0
 800fbac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fbb0:	4304      	orrs	r4, r0
 800fbb2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fbb6:	4544      	cmp	r4, r8
 800fbb8:	468e      	mov	lr, r1
 800fbba:	4681      	mov	r9, r0
 800fbbc:	d907      	bls.n	800fbce <__ieee754_atan2+0x46>
 800fbbe:	4632      	mov	r2, r6
 800fbc0:	463b      	mov	r3, r7
 800fbc2:	f7f0 fb6b 	bl	800029c <__adddf3>
 800fbc6:	ec41 0b10 	vmov	d0, r0, r1
 800fbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbce:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800fbd2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800fbd6:	4334      	orrs	r4, r6
 800fbd8:	d103      	bne.n	800fbe2 <__ieee754_atan2+0x5a>
 800fbda:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbde:	f000 bde7 	b.w	80107b0 <atan>
 800fbe2:	17bc      	asrs	r4, r7, #30
 800fbe4:	f004 0402 	and.w	r4, r4, #2
 800fbe8:	ea53 0909 	orrs.w	r9, r3, r9
 800fbec:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fbf0:	d107      	bne.n	800fc02 <__ieee754_atan2+0x7a>
 800fbf2:	2c02      	cmp	r4, #2
 800fbf4:	d05f      	beq.n	800fcb6 <__ieee754_atan2+0x12e>
 800fbf6:	2c03      	cmp	r4, #3
 800fbf8:	d1e5      	bne.n	800fbc6 <__ieee754_atan2+0x3e>
 800fbfa:	a143      	add	r1, pc, #268	@ (adr r1, 800fd08 <__ieee754_atan2+0x180>)
 800fbfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc00:	e7e1      	b.n	800fbc6 <__ieee754_atan2+0x3e>
 800fc02:	4315      	orrs	r5, r2
 800fc04:	d106      	bne.n	800fc14 <__ieee754_atan2+0x8c>
 800fc06:	f1be 0f00 	cmp.w	lr, #0
 800fc0a:	db5f      	blt.n	800fccc <__ieee754_atan2+0x144>
 800fc0c:	a136      	add	r1, pc, #216	@ (adr r1, 800fce8 <__ieee754_atan2+0x160>)
 800fc0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc12:	e7d8      	b.n	800fbc6 <__ieee754_atan2+0x3e>
 800fc14:	4542      	cmp	r2, r8
 800fc16:	d10f      	bne.n	800fc38 <__ieee754_atan2+0xb0>
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	f104 34ff 	add.w	r4, r4, #4294967295
 800fc1e:	d107      	bne.n	800fc30 <__ieee754_atan2+0xa8>
 800fc20:	2c02      	cmp	r4, #2
 800fc22:	d84c      	bhi.n	800fcbe <__ieee754_atan2+0x136>
 800fc24:	4b36      	ldr	r3, [pc, #216]	@ (800fd00 <__ieee754_atan2+0x178>)
 800fc26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fc2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc2e:	e7ca      	b.n	800fbc6 <__ieee754_atan2+0x3e>
 800fc30:	2c02      	cmp	r4, #2
 800fc32:	d848      	bhi.n	800fcc6 <__ieee754_atan2+0x13e>
 800fc34:	4b33      	ldr	r3, [pc, #204]	@ (800fd04 <__ieee754_atan2+0x17c>)
 800fc36:	e7f6      	b.n	800fc26 <__ieee754_atan2+0x9e>
 800fc38:	4543      	cmp	r3, r8
 800fc3a:	d0e4      	beq.n	800fc06 <__ieee754_atan2+0x7e>
 800fc3c:	1a9b      	subs	r3, r3, r2
 800fc3e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800fc42:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fc46:	da1e      	bge.n	800fc86 <__ieee754_atan2+0xfe>
 800fc48:	2f00      	cmp	r7, #0
 800fc4a:	da01      	bge.n	800fc50 <__ieee754_atan2+0xc8>
 800fc4c:	323c      	adds	r2, #60	@ 0x3c
 800fc4e:	db1e      	blt.n	800fc8e <__ieee754_atan2+0x106>
 800fc50:	4632      	mov	r2, r6
 800fc52:	463b      	mov	r3, r7
 800fc54:	f7f0 fe02 	bl	800085c <__aeabi_ddiv>
 800fc58:	ec41 0b10 	vmov	d0, r0, r1
 800fc5c:	f7ff fb98 	bl	800f390 <fabs>
 800fc60:	f000 fda6 	bl	80107b0 <atan>
 800fc64:	ec51 0b10 	vmov	r0, r1, d0
 800fc68:	2c01      	cmp	r4, #1
 800fc6a:	d013      	beq.n	800fc94 <__ieee754_atan2+0x10c>
 800fc6c:	2c02      	cmp	r4, #2
 800fc6e:	d015      	beq.n	800fc9c <__ieee754_atan2+0x114>
 800fc70:	2c00      	cmp	r4, #0
 800fc72:	d0a8      	beq.n	800fbc6 <__ieee754_atan2+0x3e>
 800fc74:	a318      	add	r3, pc, #96	@ (adr r3, 800fcd8 <__ieee754_atan2+0x150>)
 800fc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7a:	f7f0 fb0d 	bl	8000298 <__aeabi_dsub>
 800fc7e:	a318      	add	r3, pc, #96	@ (adr r3, 800fce0 <__ieee754_atan2+0x158>)
 800fc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc84:	e014      	b.n	800fcb0 <__ieee754_atan2+0x128>
 800fc86:	a118      	add	r1, pc, #96	@ (adr r1, 800fce8 <__ieee754_atan2+0x160>)
 800fc88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc8c:	e7ec      	b.n	800fc68 <__ieee754_atan2+0xe0>
 800fc8e:	2000      	movs	r0, #0
 800fc90:	2100      	movs	r1, #0
 800fc92:	e7e9      	b.n	800fc68 <__ieee754_atan2+0xe0>
 800fc94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fc98:	4619      	mov	r1, r3
 800fc9a:	e794      	b.n	800fbc6 <__ieee754_atan2+0x3e>
 800fc9c:	a30e      	add	r3, pc, #56	@ (adr r3, 800fcd8 <__ieee754_atan2+0x150>)
 800fc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca2:	f7f0 faf9 	bl	8000298 <__aeabi_dsub>
 800fca6:	4602      	mov	r2, r0
 800fca8:	460b      	mov	r3, r1
 800fcaa:	a10d      	add	r1, pc, #52	@ (adr r1, 800fce0 <__ieee754_atan2+0x158>)
 800fcac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcb0:	f7f0 faf2 	bl	8000298 <__aeabi_dsub>
 800fcb4:	e787      	b.n	800fbc6 <__ieee754_atan2+0x3e>
 800fcb6:	a10a      	add	r1, pc, #40	@ (adr r1, 800fce0 <__ieee754_atan2+0x158>)
 800fcb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcbc:	e783      	b.n	800fbc6 <__ieee754_atan2+0x3e>
 800fcbe:	a10c      	add	r1, pc, #48	@ (adr r1, 800fcf0 <__ieee754_atan2+0x168>)
 800fcc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcc4:	e77f      	b.n	800fbc6 <__ieee754_atan2+0x3e>
 800fcc6:	2000      	movs	r0, #0
 800fcc8:	2100      	movs	r1, #0
 800fcca:	e77c      	b.n	800fbc6 <__ieee754_atan2+0x3e>
 800fccc:	a10a      	add	r1, pc, #40	@ (adr r1, 800fcf8 <__ieee754_atan2+0x170>)
 800fcce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcd2:	e778      	b.n	800fbc6 <__ieee754_atan2+0x3e>
 800fcd4:	f3af 8000 	nop.w
 800fcd8:	33145c07 	.word	0x33145c07
 800fcdc:	3ca1a626 	.word	0x3ca1a626
 800fce0:	54442d18 	.word	0x54442d18
 800fce4:	400921fb 	.word	0x400921fb
 800fce8:	54442d18 	.word	0x54442d18
 800fcec:	3ff921fb 	.word	0x3ff921fb
 800fcf0:	54442d18 	.word	0x54442d18
 800fcf4:	3fe921fb 	.word	0x3fe921fb
 800fcf8:	54442d18 	.word	0x54442d18
 800fcfc:	bff921fb 	.word	0xbff921fb
 800fd00:	080121b8 	.word	0x080121b8
 800fd04:	080121a0 	.word	0x080121a0
 800fd08:	54442d18 	.word	0x54442d18
 800fd0c:	c00921fb 	.word	0xc00921fb
 800fd10:	7ff00000 	.word	0x7ff00000
 800fd14:	00000000 	.word	0x00000000

0800fd18 <__ieee754_pow>:
 800fd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd1c:	b091      	sub	sp, #68	@ 0x44
 800fd1e:	ed8d 1b00 	vstr	d1, [sp]
 800fd22:	e9dd 1900 	ldrd	r1, r9, [sp]
 800fd26:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800fd2a:	ea5a 0001 	orrs.w	r0, sl, r1
 800fd2e:	ec57 6b10 	vmov	r6, r7, d0
 800fd32:	d113      	bne.n	800fd5c <__ieee754_pow+0x44>
 800fd34:	19b3      	adds	r3, r6, r6
 800fd36:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800fd3a:	4152      	adcs	r2, r2
 800fd3c:	4298      	cmp	r0, r3
 800fd3e:	4b9a      	ldr	r3, [pc, #616]	@ (800ffa8 <__ieee754_pow+0x290>)
 800fd40:	4193      	sbcs	r3, r2
 800fd42:	f080 84ee 	bcs.w	8010722 <__ieee754_pow+0xa0a>
 800fd46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	4639      	mov	r1, r7
 800fd4e:	f7f0 faa5 	bl	800029c <__adddf3>
 800fd52:	ec41 0b10 	vmov	d0, r0, r1
 800fd56:	b011      	add	sp, #68	@ 0x44
 800fd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd5c:	4a93      	ldr	r2, [pc, #588]	@ (800ffac <__ieee754_pow+0x294>)
 800fd5e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800fd62:	4295      	cmp	r5, r2
 800fd64:	46b8      	mov	r8, r7
 800fd66:	4633      	mov	r3, r6
 800fd68:	d80a      	bhi.n	800fd80 <__ieee754_pow+0x68>
 800fd6a:	d104      	bne.n	800fd76 <__ieee754_pow+0x5e>
 800fd6c:	2e00      	cmp	r6, #0
 800fd6e:	d1ea      	bne.n	800fd46 <__ieee754_pow+0x2e>
 800fd70:	45aa      	cmp	sl, r5
 800fd72:	d8e8      	bhi.n	800fd46 <__ieee754_pow+0x2e>
 800fd74:	e001      	b.n	800fd7a <__ieee754_pow+0x62>
 800fd76:	4592      	cmp	sl, r2
 800fd78:	d802      	bhi.n	800fd80 <__ieee754_pow+0x68>
 800fd7a:	4592      	cmp	sl, r2
 800fd7c:	d10f      	bne.n	800fd9e <__ieee754_pow+0x86>
 800fd7e:	b171      	cbz	r1, 800fd9e <__ieee754_pow+0x86>
 800fd80:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800fd84:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800fd88:	ea58 0803 	orrs.w	r8, r8, r3
 800fd8c:	d1db      	bne.n	800fd46 <__ieee754_pow+0x2e>
 800fd8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fd92:	18db      	adds	r3, r3, r3
 800fd94:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800fd98:	4152      	adcs	r2, r2
 800fd9a:	4598      	cmp	r8, r3
 800fd9c:	e7cf      	b.n	800fd3e <__ieee754_pow+0x26>
 800fd9e:	f1b8 0f00 	cmp.w	r8, #0
 800fda2:	46ab      	mov	fp, r5
 800fda4:	da43      	bge.n	800fe2e <__ieee754_pow+0x116>
 800fda6:	4a82      	ldr	r2, [pc, #520]	@ (800ffb0 <__ieee754_pow+0x298>)
 800fda8:	4592      	cmp	sl, r2
 800fdaa:	d856      	bhi.n	800fe5a <__ieee754_pow+0x142>
 800fdac:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800fdb0:	4592      	cmp	sl, r2
 800fdb2:	f240 84c5 	bls.w	8010740 <__ieee754_pow+0xa28>
 800fdb6:	ea4f 522a 	mov.w	r2, sl, asr #20
 800fdba:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fdbe:	2a14      	cmp	r2, #20
 800fdc0:	dd18      	ble.n	800fdf4 <__ieee754_pow+0xdc>
 800fdc2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800fdc6:	fa21 f402 	lsr.w	r4, r1, r2
 800fdca:	fa04 f202 	lsl.w	r2, r4, r2
 800fdce:	428a      	cmp	r2, r1
 800fdd0:	f040 84b6 	bne.w	8010740 <__ieee754_pow+0xa28>
 800fdd4:	f004 0401 	and.w	r4, r4, #1
 800fdd8:	f1c4 0402 	rsb	r4, r4, #2
 800fddc:	2900      	cmp	r1, #0
 800fdde:	d159      	bne.n	800fe94 <__ieee754_pow+0x17c>
 800fde0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800fde4:	d148      	bne.n	800fe78 <__ieee754_pow+0x160>
 800fde6:	4632      	mov	r2, r6
 800fde8:	463b      	mov	r3, r7
 800fdea:	4630      	mov	r0, r6
 800fdec:	4639      	mov	r1, r7
 800fdee:	f7f0 fc0b 	bl	8000608 <__aeabi_dmul>
 800fdf2:	e7ae      	b.n	800fd52 <__ieee754_pow+0x3a>
 800fdf4:	2900      	cmp	r1, #0
 800fdf6:	d14c      	bne.n	800fe92 <__ieee754_pow+0x17a>
 800fdf8:	f1c2 0214 	rsb	r2, r2, #20
 800fdfc:	fa4a f402 	asr.w	r4, sl, r2
 800fe00:	fa04 f202 	lsl.w	r2, r4, r2
 800fe04:	4552      	cmp	r2, sl
 800fe06:	f040 8498 	bne.w	801073a <__ieee754_pow+0xa22>
 800fe0a:	f004 0401 	and.w	r4, r4, #1
 800fe0e:	f1c4 0402 	rsb	r4, r4, #2
 800fe12:	4a68      	ldr	r2, [pc, #416]	@ (800ffb4 <__ieee754_pow+0x29c>)
 800fe14:	4592      	cmp	sl, r2
 800fe16:	d1e3      	bne.n	800fde0 <__ieee754_pow+0xc8>
 800fe18:	f1b9 0f00 	cmp.w	r9, #0
 800fe1c:	f280 8489 	bge.w	8010732 <__ieee754_pow+0xa1a>
 800fe20:	4964      	ldr	r1, [pc, #400]	@ (800ffb4 <__ieee754_pow+0x29c>)
 800fe22:	4632      	mov	r2, r6
 800fe24:	463b      	mov	r3, r7
 800fe26:	2000      	movs	r0, #0
 800fe28:	f7f0 fd18 	bl	800085c <__aeabi_ddiv>
 800fe2c:	e791      	b.n	800fd52 <__ieee754_pow+0x3a>
 800fe2e:	2400      	movs	r4, #0
 800fe30:	bb81      	cbnz	r1, 800fe94 <__ieee754_pow+0x17c>
 800fe32:	4a5e      	ldr	r2, [pc, #376]	@ (800ffac <__ieee754_pow+0x294>)
 800fe34:	4592      	cmp	sl, r2
 800fe36:	d1ec      	bne.n	800fe12 <__ieee754_pow+0xfa>
 800fe38:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800fe3c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800fe40:	431a      	orrs	r2, r3
 800fe42:	f000 846e 	beq.w	8010722 <__ieee754_pow+0xa0a>
 800fe46:	4b5c      	ldr	r3, [pc, #368]	@ (800ffb8 <__ieee754_pow+0x2a0>)
 800fe48:	429d      	cmp	r5, r3
 800fe4a:	d908      	bls.n	800fe5e <__ieee754_pow+0x146>
 800fe4c:	f1b9 0f00 	cmp.w	r9, #0
 800fe50:	f280 846b 	bge.w	801072a <__ieee754_pow+0xa12>
 800fe54:	2000      	movs	r0, #0
 800fe56:	2100      	movs	r1, #0
 800fe58:	e77b      	b.n	800fd52 <__ieee754_pow+0x3a>
 800fe5a:	2402      	movs	r4, #2
 800fe5c:	e7e8      	b.n	800fe30 <__ieee754_pow+0x118>
 800fe5e:	f1b9 0f00 	cmp.w	r9, #0
 800fe62:	f04f 0000 	mov.w	r0, #0
 800fe66:	f04f 0100 	mov.w	r1, #0
 800fe6a:	f6bf af72 	bge.w	800fd52 <__ieee754_pow+0x3a>
 800fe6e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fe72:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fe76:	e76c      	b.n	800fd52 <__ieee754_pow+0x3a>
 800fe78:	4a50      	ldr	r2, [pc, #320]	@ (800ffbc <__ieee754_pow+0x2a4>)
 800fe7a:	4591      	cmp	r9, r2
 800fe7c:	d10a      	bne.n	800fe94 <__ieee754_pow+0x17c>
 800fe7e:	f1b8 0f00 	cmp.w	r8, #0
 800fe82:	db07      	blt.n	800fe94 <__ieee754_pow+0x17c>
 800fe84:	ec47 6b10 	vmov	d0, r6, r7
 800fe88:	b011      	add	sp, #68	@ 0x44
 800fe8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe8e:	f7ff bb9d 	b.w	800f5cc <__ieee754_sqrt>
 800fe92:	2400      	movs	r4, #0
 800fe94:	ec47 6b10 	vmov	d0, r6, r7
 800fe98:	9302      	str	r3, [sp, #8]
 800fe9a:	f7ff fa79 	bl	800f390 <fabs>
 800fe9e:	9b02      	ldr	r3, [sp, #8]
 800fea0:	ec51 0b10 	vmov	r0, r1, d0
 800fea4:	bb43      	cbnz	r3, 800fef8 <__ieee754_pow+0x1e0>
 800fea6:	4b43      	ldr	r3, [pc, #268]	@ (800ffb4 <__ieee754_pow+0x29c>)
 800fea8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800feac:	429a      	cmp	r2, r3
 800feae:	d000      	beq.n	800feb2 <__ieee754_pow+0x19a>
 800feb0:	bb15      	cbnz	r5, 800fef8 <__ieee754_pow+0x1e0>
 800feb2:	f1b9 0f00 	cmp.w	r9, #0
 800feb6:	da05      	bge.n	800fec4 <__ieee754_pow+0x1ac>
 800feb8:	4602      	mov	r2, r0
 800feba:	460b      	mov	r3, r1
 800febc:	2000      	movs	r0, #0
 800febe:	493d      	ldr	r1, [pc, #244]	@ (800ffb4 <__ieee754_pow+0x29c>)
 800fec0:	f7f0 fccc 	bl	800085c <__aeabi_ddiv>
 800fec4:	f1b8 0f00 	cmp.w	r8, #0
 800fec8:	f6bf af43 	bge.w	800fd52 <__ieee754_pow+0x3a>
 800fecc:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800fed0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800fed4:	4325      	orrs	r5, r4
 800fed6:	d108      	bne.n	800feea <__ieee754_pow+0x1d2>
 800fed8:	4602      	mov	r2, r0
 800feda:	460b      	mov	r3, r1
 800fedc:	4610      	mov	r0, r2
 800fede:	4619      	mov	r1, r3
 800fee0:	f7f0 f9da 	bl	8000298 <__aeabi_dsub>
 800fee4:	4602      	mov	r2, r0
 800fee6:	460b      	mov	r3, r1
 800fee8:	e79e      	b.n	800fe28 <__ieee754_pow+0x110>
 800feea:	2c01      	cmp	r4, #1
 800feec:	f47f af31 	bne.w	800fd52 <__ieee754_pow+0x3a>
 800fef0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fef4:	4619      	mov	r1, r3
 800fef6:	e72c      	b.n	800fd52 <__ieee754_pow+0x3a>
 800fef8:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800fefc:	3b01      	subs	r3, #1
 800fefe:	ea53 0204 	orrs.w	r2, r3, r4
 800ff02:	d102      	bne.n	800ff0a <__ieee754_pow+0x1f2>
 800ff04:	4632      	mov	r2, r6
 800ff06:	463b      	mov	r3, r7
 800ff08:	e7e8      	b.n	800fedc <__ieee754_pow+0x1c4>
 800ff0a:	3c01      	subs	r4, #1
 800ff0c:	431c      	orrs	r4, r3
 800ff0e:	d016      	beq.n	800ff3e <__ieee754_pow+0x226>
 800ff10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ff98 <__ieee754_pow+0x280>
 800ff14:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ff18:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff1c:	f240 8110 	bls.w	8010140 <__ieee754_pow+0x428>
 800ff20:	4b27      	ldr	r3, [pc, #156]	@ (800ffc0 <__ieee754_pow+0x2a8>)
 800ff22:	459a      	cmp	sl, r3
 800ff24:	4b24      	ldr	r3, [pc, #144]	@ (800ffb8 <__ieee754_pow+0x2a0>)
 800ff26:	d916      	bls.n	800ff56 <__ieee754_pow+0x23e>
 800ff28:	429d      	cmp	r5, r3
 800ff2a:	d80b      	bhi.n	800ff44 <__ieee754_pow+0x22c>
 800ff2c:	f1b9 0f00 	cmp.w	r9, #0
 800ff30:	da0b      	bge.n	800ff4a <__ieee754_pow+0x232>
 800ff32:	2000      	movs	r0, #0
 800ff34:	b011      	add	sp, #68	@ 0x44
 800ff36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff3a:	f001 bb89 	b.w	8011650 <__math_oflow>
 800ff3e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800ffa0 <__ieee754_pow+0x288>
 800ff42:	e7e7      	b.n	800ff14 <__ieee754_pow+0x1fc>
 800ff44:	f1b9 0f00 	cmp.w	r9, #0
 800ff48:	dcf3      	bgt.n	800ff32 <__ieee754_pow+0x21a>
 800ff4a:	2000      	movs	r0, #0
 800ff4c:	b011      	add	sp, #68	@ 0x44
 800ff4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff52:	f001 bb75 	b.w	8011640 <__math_uflow>
 800ff56:	429d      	cmp	r5, r3
 800ff58:	d20c      	bcs.n	800ff74 <__ieee754_pow+0x25c>
 800ff5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	2300      	movs	r3, #0
 800ff62:	f7f0 fdc3 	bl	8000aec <__aeabi_dcmplt>
 800ff66:	3800      	subs	r0, #0
 800ff68:	bf18      	it	ne
 800ff6a:	2001      	movne	r0, #1
 800ff6c:	f1b9 0f00 	cmp.w	r9, #0
 800ff70:	daec      	bge.n	800ff4c <__ieee754_pow+0x234>
 800ff72:	e7df      	b.n	800ff34 <__ieee754_pow+0x21c>
 800ff74:	4b0f      	ldr	r3, [pc, #60]	@ (800ffb4 <__ieee754_pow+0x29c>)
 800ff76:	429d      	cmp	r5, r3
 800ff78:	f04f 0200 	mov.w	r2, #0
 800ff7c:	d922      	bls.n	800ffc4 <__ieee754_pow+0x2ac>
 800ff7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff82:	2300      	movs	r3, #0
 800ff84:	f7f0 fdb2 	bl	8000aec <__aeabi_dcmplt>
 800ff88:	3800      	subs	r0, #0
 800ff8a:	bf18      	it	ne
 800ff8c:	2001      	movne	r0, #1
 800ff8e:	f1b9 0f00 	cmp.w	r9, #0
 800ff92:	dccf      	bgt.n	800ff34 <__ieee754_pow+0x21c>
 800ff94:	e7da      	b.n	800ff4c <__ieee754_pow+0x234>
 800ff96:	bf00      	nop
 800ff98:	00000000 	.word	0x00000000
 800ff9c:	3ff00000 	.word	0x3ff00000
 800ffa0:	00000000 	.word	0x00000000
 800ffa4:	bff00000 	.word	0xbff00000
 800ffa8:	fff00000 	.word	0xfff00000
 800ffac:	7ff00000 	.word	0x7ff00000
 800ffb0:	433fffff 	.word	0x433fffff
 800ffb4:	3ff00000 	.word	0x3ff00000
 800ffb8:	3fefffff 	.word	0x3fefffff
 800ffbc:	3fe00000 	.word	0x3fe00000
 800ffc0:	43f00000 	.word	0x43f00000
 800ffc4:	4b5a      	ldr	r3, [pc, #360]	@ (8010130 <__ieee754_pow+0x418>)
 800ffc6:	f7f0 f967 	bl	8000298 <__aeabi_dsub>
 800ffca:	a351      	add	r3, pc, #324	@ (adr r3, 8010110 <__ieee754_pow+0x3f8>)
 800ffcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd0:	4604      	mov	r4, r0
 800ffd2:	460d      	mov	r5, r1
 800ffd4:	f7f0 fb18 	bl	8000608 <__aeabi_dmul>
 800ffd8:	a34f      	add	r3, pc, #316	@ (adr r3, 8010118 <__ieee754_pow+0x400>)
 800ffda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffde:	4606      	mov	r6, r0
 800ffe0:	460f      	mov	r7, r1
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	4629      	mov	r1, r5
 800ffe6:	f7f0 fb0f 	bl	8000608 <__aeabi_dmul>
 800ffea:	4b52      	ldr	r3, [pc, #328]	@ (8010134 <__ieee754_pow+0x41c>)
 800ffec:	4682      	mov	sl, r0
 800ffee:	468b      	mov	fp, r1
 800fff0:	2200      	movs	r2, #0
 800fff2:	4620      	mov	r0, r4
 800fff4:	4629      	mov	r1, r5
 800fff6:	f7f0 fb07 	bl	8000608 <__aeabi_dmul>
 800fffa:	4602      	mov	r2, r0
 800fffc:	460b      	mov	r3, r1
 800fffe:	a148      	add	r1, pc, #288	@ (adr r1, 8010120 <__ieee754_pow+0x408>)
 8010000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010004:	f7f0 f948 	bl	8000298 <__aeabi_dsub>
 8010008:	4622      	mov	r2, r4
 801000a:	462b      	mov	r3, r5
 801000c:	f7f0 fafc 	bl	8000608 <__aeabi_dmul>
 8010010:	4602      	mov	r2, r0
 8010012:	460b      	mov	r3, r1
 8010014:	2000      	movs	r0, #0
 8010016:	4948      	ldr	r1, [pc, #288]	@ (8010138 <__ieee754_pow+0x420>)
 8010018:	f7f0 f93e 	bl	8000298 <__aeabi_dsub>
 801001c:	4622      	mov	r2, r4
 801001e:	4680      	mov	r8, r0
 8010020:	4689      	mov	r9, r1
 8010022:	462b      	mov	r3, r5
 8010024:	4620      	mov	r0, r4
 8010026:	4629      	mov	r1, r5
 8010028:	f7f0 faee 	bl	8000608 <__aeabi_dmul>
 801002c:	4602      	mov	r2, r0
 801002e:	460b      	mov	r3, r1
 8010030:	4640      	mov	r0, r8
 8010032:	4649      	mov	r1, r9
 8010034:	f7f0 fae8 	bl	8000608 <__aeabi_dmul>
 8010038:	a33b      	add	r3, pc, #236	@ (adr r3, 8010128 <__ieee754_pow+0x410>)
 801003a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003e:	f7f0 fae3 	bl	8000608 <__aeabi_dmul>
 8010042:	4602      	mov	r2, r0
 8010044:	460b      	mov	r3, r1
 8010046:	4650      	mov	r0, sl
 8010048:	4659      	mov	r1, fp
 801004a:	f7f0 f925 	bl	8000298 <__aeabi_dsub>
 801004e:	4602      	mov	r2, r0
 8010050:	460b      	mov	r3, r1
 8010052:	4680      	mov	r8, r0
 8010054:	4689      	mov	r9, r1
 8010056:	4630      	mov	r0, r6
 8010058:	4639      	mov	r1, r7
 801005a:	f7f0 f91f 	bl	800029c <__adddf3>
 801005e:	2400      	movs	r4, #0
 8010060:	4632      	mov	r2, r6
 8010062:	463b      	mov	r3, r7
 8010064:	4620      	mov	r0, r4
 8010066:	460d      	mov	r5, r1
 8010068:	f7f0 f916 	bl	8000298 <__aeabi_dsub>
 801006c:	4602      	mov	r2, r0
 801006e:	460b      	mov	r3, r1
 8010070:	4640      	mov	r0, r8
 8010072:	4649      	mov	r1, r9
 8010074:	f7f0 f910 	bl	8000298 <__aeabi_dsub>
 8010078:	e9dd 2300 	ldrd	r2, r3, [sp]
 801007c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010080:	2300      	movs	r3, #0
 8010082:	9304      	str	r3, [sp, #16]
 8010084:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010088:	4606      	mov	r6, r0
 801008a:	460f      	mov	r7, r1
 801008c:	465b      	mov	r3, fp
 801008e:	4652      	mov	r2, sl
 8010090:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010094:	f7f0 f900 	bl	8000298 <__aeabi_dsub>
 8010098:	4622      	mov	r2, r4
 801009a:	462b      	mov	r3, r5
 801009c:	f7f0 fab4 	bl	8000608 <__aeabi_dmul>
 80100a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100a4:	4680      	mov	r8, r0
 80100a6:	4689      	mov	r9, r1
 80100a8:	4630      	mov	r0, r6
 80100aa:	4639      	mov	r1, r7
 80100ac:	f7f0 faac 	bl	8000608 <__aeabi_dmul>
 80100b0:	4602      	mov	r2, r0
 80100b2:	460b      	mov	r3, r1
 80100b4:	4640      	mov	r0, r8
 80100b6:	4649      	mov	r1, r9
 80100b8:	f7f0 f8f0 	bl	800029c <__adddf3>
 80100bc:	465b      	mov	r3, fp
 80100be:	4606      	mov	r6, r0
 80100c0:	460f      	mov	r7, r1
 80100c2:	4652      	mov	r2, sl
 80100c4:	4620      	mov	r0, r4
 80100c6:	4629      	mov	r1, r5
 80100c8:	f7f0 fa9e 	bl	8000608 <__aeabi_dmul>
 80100cc:	460b      	mov	r3, r1
 80100ce:	4602      	mov	r2, r0
 80100d0:	4680      	mov	r8, r0
 80100d2:	4689      	mov	r9, r1
 80100d4:	4630      	mov	r0, r6
 80100d6:	4639      	mov	r1, r7
 80100d8:	f7f0 f8e0 	bl	800029c <__adddf3>
 80100dc:	4b17      	ldr	r3, [pc, #92]	@ (801013c <__ieee754_pow+0x424>)
 80100de:	4299      	cmp	r1, r3
 80100e0:	4604      	mov	r4, r0
 80100e2:	460d      	mov	r5, r1
 80100e4:	468b      	mov	fp, r1
 80100e6:	f340 820b 	ble.w	8010500 <__ieee754_pow+0x7e8>
 80100ea:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80100ee:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80100f2:	4303      	orrs	r3, r0
 80100f4:	f000 81ea 	beq.w	80104cc <__ieee754_pow+0x7b4>
 80100f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100fc:	2200      	movs	r2, #0
 80100fe:	2300      	movs	r3, #0
 8010100:	f7f0 fcf4 	bl	8000aec <__aeabi_dcmplt>
 8010104:	3800      	subs	r0, #0
 8010106:	bf18      	it	ne
 8010108:	2001      	movne	r0, #1
 801010a:	e713      	b.n	800ff34 <__ieee754_pow+0x21c>
 801010c:	f3af 8000 	nop.w
 8010110:	60000000 	.word	0x60000000
 8010114:	3ff71547 	.word	0x3ff71547
 8010118:	f85ddf44 	.word	0xf85ddf44
 801011c:	3e54ae0b 	.word	0x3e54ae0b
 8010120:	55555555 	.word	0x55555555
 8010124:	3fd55555 	.word	0x3fd55555
 8010128:	652b82fe 	.word	0x652b82fe
 801012c:	3ff71547 	.word	0x3ff71547
 8010130:	3ff00000 	.word	0x3ff00000
 8010134:	3fd00000 	.word	0x3fd00000
 8010138:	3fe00000 	.word	0x3fe00000
 801013c:	408fffff 	.word	0x408fffff
 8010140:	4bd5      	ldr	r3, [pc, #852]	@ (8010498 <__ieee754_pow+0x780>)
 8010142:	ea08 0303 	and.w	r3, r8, r3
 8010146:	2200      	movs	r2, #0
 8010148:	b92b      	cbnz	r3, 8010156 <__ieee754_pow+0x43e>
 801014a:	4bd4      	ldr	r3, [pc, #848]	@ (801049c <__ieee754_pow+0x784>)
 801014c:	f7f0 fa5c 	bl	8000608 <__aeabi_dmul>
 8010150:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8010154:	468b      	mov	fp, r1
 8010156:	ea4f 532b 	mov.w	r3, fp, asr #20
 801015a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801015e:	4413      	add	r3, r2
 8010160:	930a      	str	r3, [sp, #40]	@ 0x28
 8010162:	4bcf      	ldr	r3, [pc, #828]	@ (80104a0 <__ieee754_pow+0x788>)
 8010164:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8010168:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801016c:	459b      	cmp	fp, r3
 801016e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010172:	dd08      	ble.n	8010186 <__ieee754_pow+0x46e>
 8010174:	4bcb      	ldr	r3, [pc, #812]	@ (80104a4 <__ieee754_pow+0x78c>)
 8010176:	459b      	cmp	fp, r3
 8010178:	f340 81a5 	ble.w	80104c6 <__ieee754_pow+0x7ae>
 801017c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801017e:	3301      	adds	r3, #1
 8010180:	930a      	str	r3, [sp, #40]	@ 0x28
 8010182:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8010186:	f04f 0a00 	mov.w	sl, #0
 801018a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801018e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010190:	4bc5      	ldr	r3, [pc, #788]	@ (80104a8 <__ieee754_pow+0x790>)
 8010192:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010196:	ed93 7b00 	vldr	d7, [r3]
 801019a:	4629      	mov	r1, r5
 801019c:	ec53 2b17 	vmov	r2, r3, d7
 80101a0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80101a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80101a8:	f7f0 f876 	bl	8000298 <__aeabi_dsub>
 80101ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80101b0:	4606      	mov	r6, r0
 80101b2:	460f      	mov	r7, r1
 80101b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101b8:	f7f0 f870 	bl	800029c <__adddf3>
 80101bc:	4602      	mov	r2, r0
 80101be:	460b      	mov	r3, r1
 80101c0:	2000      	movs	r0, #0
 80101c2:	49ba      	ldr	r1, [pc, #744]	@ (80104ac <__ieee754_pow+0x794>)
 80101c4:	f7f0 fb4a 	bl	800085c <__aeabi_ddiv>
 80101c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	4630      	mov	r0, r6
 80101d2:	4639      	mov	r1, r7
 80101d4:	f7f0 fa18 	bl	8000608 <__aeabi_dmul>
 80101d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101dc:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80101e0:	106d      	asrs	r5, r5, #1
 80101e2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80101e6:	f04f 0b00 	mov.w	fp, #0
 80101ea:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80101ee:	4661      	mov	r1, ip
 80101f0:	2200      	movs	r2, #0
 80101f2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80101f6:	4658      	mov	r0, fp
 80101f8:	46e1      	mov	r9, ip
 80101fa:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80101fe:	4614      	mov	r4, r2
 8010200:	461d      	mov	r5, r3
 8010202:	f7f0 fa01 	bl	8000608 <__aeabi_dmul>
 8010206:	4602      	mov	r2, r0
 8010208:	460b      	mov	r3, r1
 801020a:	4630      	mov	r0, r6
 801020c:	4639      	mov	r1, r7
 801020e:	f7f0 f843 	bl	8000298 <__aeabi_dsub>
 8010212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010216:	4606      	mov	r6, r0
 8010218:	460f      	mov	r7, r1
 801021a:	4620      	mov	r0, r4
 801021c:	4629      	mov	r1, r5
 801021e:	f7f0 f83b 	bl	8000298 <__aeabi_dsub>
 8010222:	4602      	mov	r2, r0
 8010224:	460b      	mov	r3, r1
 8010226:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801022a:	f7f0 f835 	bl	8000298 <__aeabi_dsub>
 801022e:	465a      	mov	r2, fp
 8010230:	464b      	mov	r3, r9
 8010232:	f7f0 f9e9 	bl	8000608 <__aeabi_dmul>
 8010236:	4602      	mov	r2, r0
 8010238:	460b      	mov	r3, r1
 801023a:	4630      	mov	r0, r6
 801023c:	4639      	mov	r1, r7
 801023e:	f7f0 f82b 	bl	8000298 <__aeabi_dsub>
 8010242:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010246:	f7f0 f9df 	bl	8000608 <__aeabi_dmul>
 801024a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801024e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010252:	4610      	mov	r0, r2
 8010254:	4619      	mov	r1, r3
 8010256:	f7f0 f9d7 	bl	8000608 <__aeabi_dmul>
 801025a:	a37d      	add	r3, pc, #500	@ (adr r3, 8010450 <__ieee754_pow+0x738>)
 801025c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010260:	4604      	mov	r4, r0
 8010262:	460d      	mov	r5, r1
 8010264:	f7f0 f9d0 	bl	8000608 <__aeabi_dmul>
 8010268:	a37b      	add	r3, pc, #492	@ (adr r3, 8010458 <__ieee754_pow+0x740>)
 801026a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801026e:	f7f0 f815 	bl	800029c <__adddf3>
 8010272:	4622      	mov	r2, r4
 8010274:	462b      	mov	r3, r5
 8010276:	f7f0 f9c7 	bl	8000608 <__aeabi_dmul>
 801027a:	a379      	add	r3, pc, #484	@ (adr r3, 8010460 <__ieee754_pow+0x748>)
 801027c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010280:	f7f0 f80c 	bl	800029c <__adddf3>
 8010284:	4622      	mov	r2, r4
 8010286:	462b      	mov	r3, r5
 8010288:	f7f0 f9be 	bl	8000608 <__aeabi_dmul>
 801028c:	a376      	add	r3, pc, #472	@ (adr r3, 8010468 <__ieee754_pow+0x750>)
 801028e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010292:	f7f0 f803 	bl	800029c <__adddf3>
 8010296:	4622      	mov	r2, r4
 8010298:	462b      	mov	r3, r5
 801029a:	f7f0 f9b5 	bl	8000608 <__aeabi_dmul>
 801029e:	a374      	add	r3, pc, #464	@ (adr r3, 8010470 <__ieee754_pow+0x758>)
 80102a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a4:	f7ef fffa 	bl	800029c <__adddf3>
 80102a8:	4622      	mov	r2, r4
 80102aa:	462b      	mov	r3, r5
 80102ac:	f7f0 f9ac 	bl	8000608 <__aeabi_dmul>
 80102b0:	a371      	add	r3, pc, #452	@ (adr r3, 8010478 <__ieee754_pow+0x760>)
 80102b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b6:	f7ef fff1 	bl	800029c <__adddf3>
 80102ba:	4622      	mov	r2, r4
 80102bc:	4606      	mov	r6, r0
 80102be:	460f      	mov	r7, r1
 80102c0:	462b      	mov	r3, r5
 80102c2:	4620      	mov	r0, r4
 80102c4:	4629      	mov	r1, r5
 80102c6:	f7f0 f99f 	bl	8000608 <__aeabi_dmul>
 80102ca:	4602      	mov	r2, r0
 80102cc:	460b      	mov	r3, r1
 80102ce:	4630      	mov	r0, r6
 80102d0:	4639      	mov	r1, r7
 80102d2:	f7f0 f999 	bl	8000608 <__aeabi_dmul>
 80102d6:	465a      	mov	r2, fp
 80102d8:	4604      	mov	r4, r0
 80102da:	460d      	mov	r5, r1
 80102dc:	464b      	mov	r3, r9
 80102de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102e2:	f7ef ffdb 	bl	800029c <__adddf3>
 80102e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80102ea:	f7f0 f98d 	bl	8000608 <__aeabi_dmul>
 80102ee:	4622      	mov	r2, r4
 80102f0:	462b      	mov	r3, r5
 80102f2:	f7ef ffd3 	bl	800029c <__adddf3>
 80102f6:	465a      	mov	r2, fp
 80102f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80102fc:	464b      	mov	r3, r9
 80102fe:	4658      	mov	r0, fp
 8010300:	4649      	mov	r1, r9
 8010302:	f7f0 f981 	bl	8000608 <__aeabi_dmul>
 8010306:	4b6a      	ldr	r3, [pc, #424]	@ (80104b0 <__ieee754_pow+0x798>)
 8010308:	2200      	movs	r2, #0
 801030a:	4606      	mov	r6, r0
 801030c:	460f      	mov	r7, r1
 801030e:	f7ef ffc5 	bl	800029c <__adddf3>
 8010312:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010316:	f7ef ffc1 	bl	800029c <__adddf3>
 801031a:	46d8      	mov	r8, fp
 801031c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8010320:	460d      	mov	r5, r1
 8010322:	465a      	mov	r2, fp
 8010324:	460b      	mov	r3, r1
 8010326:	4640      	mov	r0, r8
 8010328:	4649      	mov	r1, r9
 801032a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801032e:	f7f0 f96b 	bl	8000608 <__aeabi_dmul>
 8010332:	465c      	mov	r4, fp
 8010334:	4680      	mov	r8, r0
 8010336:	4689      	mov	r9, r1
 8010338:	4b5d      	ldr	r3, [pc, #372]	@ (80104b0 <__ieee754_pow+0x798>)
 801033a:	2200      	movs	r2, #0
 801033c:	4620      	mov	r0, r4
 801033e:	4629      	mov	r1, r5
 8010340:	f7ef ffaa 	bl	8000298 <__aeabi_dsub>
 8010344:	4632      	mov	r2, r6
 8010346:	463b      	mov	r3, r7
 8010348:	f7ef ffa6 	bl	8000298 <__aeabi_dsub>
 801034c:	4602      	mov	r2, r0
 801034e:	460b      	mov	r3, r1
 8010350:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010354:	f7ef ffa0 	bl	8000298 <__aeabi_dsub>
 8010358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801035c:	f7f0 f954 	bl	8000608 <__aeabi_dmul>
 8010360:	4622      	mov	r2, r4
 8010362:	4606      	mov	r6, r0
 8010364:	460f      	mov	r7, r1
 8010366:	462b      	mov	r3, r5
 8010368:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801036c:	f7f0 f94c 	bl	8000608 <__aeabi_dmul>
 8010370:	4602      	mov	r2, r0
 8010372:	460b      	mov	r3, r1
 8010374:	4630      	mov	r0, r6
 8010376:	4639      	mov	r1, r7
 8010378:	f7ef ff90 	bl	800029c <__adddf3>
 801037c:	4606      	mov	r6, r0
 801037e:	460f      	mov	r7, r1
 8010380:	4602      	mov	r2, r0
 8010382:	460b      	mov	r3, r1
 8010384:	4640      	mov	r0, r8
 8010386:	4649      	mov	r1, r9
 8010388:	f7ef ff88 	bl	800029c <__adddf3>
 801038c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8010390:	a33b      	add	r3, pc, #236	@ (adr r3, 8010480 <__ieee754_pow+0x768>)
 8010392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010396:	4658      	mov	r0, fp
 8010398:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801039c:	460d      	mov	r5, r1
 801039e:	f7f0 f933 	bl	8000608 <__aeabi_dmul>
 80103a2:	465c      	mov	r4, fp
 80103a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103a8:	4642      	mov	r2, r8
 80103aa:	464b      	mov	r3, r9
 80103ac:	4620      	mov	r0, r4
 80103ae:	4629      	mov	r1, r5
 80103b0:	f7ef ff72 	bl	8000298 <__aeabi_dsub>
 80103b4:	4602      	mov	r2, r0
 80103b6:	460b      	mov	r3, r1
 80103b8:	4630      	mov	r0, r6
 80103ba:	4639      	mov	r1, r7
 80103bc:	f7ef ff6c 	bl	8000298 <__aeabi_dsub>
 80103c0:	a331      	add	r3, pc, #196	@ (adr r3, 8010488 <__ieee754_pow+0x770>)
 80103c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c6:	f7f0 f91f 	bl	8000608 <__aeabi_dmul>
 80103ca:	a331      	add	r3, pc, #196	@ (adr r3, 8010490 <__ieee754_pow+0x778>)
 80103cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d0:	4606      	mov	r6, r0
 80103d2:	460f      	mov	r7, r1
 80103d4:	4620      	mov	r0, r4
 80103d6:	4629      	mov	r1, r5
 80103d8:	f7f0 f916 	bl	8000608 <__aeabi_dmul>
 80103dc:	4602      	mov	r2, r0
 80103de:	460b      	mov	r3, r1
 80103e0:	4630      	mov	r0, r6
 80103e2:	4639      	mov	r1, r7
 80103e4:	f7ef ff5a 	bl	800029c <__adddf3>
 80103e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80103ea:	4b32      	ldr	r3, [pc, #200]	@ (80104b4 <__ieee754_pow+0x79c>)
 80103ec:	4413      	add	r3, r2
 80103ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f2:	f7ef ff53 	bl	800029c <__adddf3>
 80103f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80103fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80103fc:	f7f0 f89a 	bl	8000534 <__aeabi_i2d>
 8010400:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010402:	4b2d      	ldr	r3, [pc, #180]	@ (80104b8 <__ieee754_pow+0x7a0>)
 8010404:	4413      	add	r3, r2
 8010406:	e9d3 8900 	ldrd	r8, r9, [r3]
 801040a:	4606      	mov	r6, r0
 801040c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010410:	460f      	mov	r7, r1
 8010412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010416:	f7ef ff41 	bl	800029c <__adddf3>
 801041a:	4642      	mov	r2, r8
 801041c:	464b      	mov	r3, r9
 801041e:	f7ef ff3d 	bl	800029c <__adddf3>
 8010422:	4632      	mov	r2, r6
 8010424:	463b      	mov	r3, r7
 8010426:	f7ef ff39 	bl	800029c <__adddf3>
 801042a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801042e:	4632      	mov	r2, r6
 8010430:	463b      	mov	r3, r7
 8010432:	4658      	mov	r0, fp
 8010434:	460d      	mov	r5, r1
 8010436:	f7ef ff2f 	bl	8000298 <__aeabi_dsub>
 801043a:	4642      	mov	r2, r8
 801043c:	464b      	mov	r3, r9
 801043e:	f7ef ff2b 	bl	8000298 <__aeabi_dsub>
 8010442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010446:	f7ef ff27 	bl	8000298 <__aeabi_dsub>
 801044a:	465c      	mov	r4, fp
 801044c:	e036      	b.n	80104bc <__ieee754_pow+0x7a4>
 801044e:	bf00      	nop
 8010450:	4a454eef 	.word	0x4a454eef
 8010454:	3fca7e28 	.word	0x3fca7e28
 8010458:	93c9db65 	.word	0x93c9db65
 801045c:	3fcd864a 	.word	0x3fcd864a
 8010460:	a91d4101 	.word	0xa91d4101
 8010464:	3fd17460 	.word	0x3fd17460
 8010468:	518f264d 	.word	0x518f264d
 801046c:	3fd55555 	.word	0x3fd55555
 8010470:	db6fabff 	.word	0xdb6fabff
 8010474:	3fdb6db6 	.word	0x3fdb6db6
 8010478:	33333303 	.word	0x33333303
 801047c:	3fe33333 	.word	0x3fe33333
 8010480:	e0000000 	.word	0xe0000000
 8010484:	3feec709 	.word	0x3feec709
 8010488:	dc3a03fd 	.word	0xdc3a03fd
 801048c:	3feec709 	.word	0x3feec709
 8010490:	145b01f5 	.word	0x145b01f5
 8010494:	be3e2fe0 	.word	0xbe3e2fe0
 8010498:	7ff00000 	.word	0x7ff00000
 801049c:	43400000 	.word	0x43400000
 80104a0:	0003988e 	.word	0x0003988e
 80104a4:	000bb679 	.word	0x000bb679
 80104a8:	080121f0 	.word	0x080121f0
 80104ac:	3ff00000 	.word	0x3ff00000
 80104b0:	40080000 	.word	0x40080000
 80104b4:	080121d0 	.word	0x080121d0
 80104b8:	080121e0 	.word	0x080121e0
 80104bc:	4602      	mov	r2, r0
 80104be:	460b      	mov	r3, r1
 80104c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104c4:	e5d6      	b.n	8010074 <__ieee754_pow+0x35c>
 80104c6:	f04f 0a01 	mov.w	sl, #1
 80104ca:	e65e      	b.n	801018a <__ieee754_pow+0x472>
 80104cc:	a3b5      	add	r3, pc, #724	@ (adr r3, 80107a4 <__ieee754_pow+0xa8c>)
 80104ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d2:	4630      	mov	r0, r6
 80104d4:	4639      	mov	r1, r7
 80104d6:	f7ef fee1 	bl	800029c <__adddf3>
 80104da:	4642      	mov	r2, r8
 80104dc:	e9cd 0100 	strd	r0, r1, [sp]
 80104e0:	464b      	mov	r3, r9
 80104e2:	4620      	mov	r0, r4
 80104e4:	4629      	mov	r1, r5
 80104e6:	f7ef fed7 	bl	8000298 <__aeabi_dsub>
 80104ea:	4602      	mov	r2, r0
 80104ec:	460b      	mov	r3, r1
 80104ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104f2:	f7f0 fb19 	bl	8000b28 <__aeabi_dcmpgt>
 80104f6:	2800      	cmp	r0, #0
 80104f8:	f47f adfe 	bne.w	80100f8 <__ieee754_pow+0x3e0>
 80104fc:	4ba2      	ldr	r3, [pc, #648]	@ (8010788 <__ieee754_pow+0xa70>)
 80104fe:	e022      	b.n	8010546 <__ieee754_pow+0x82e>
 8010500:	4ca2      	ldr	r4, [pc, #648]	@ (801078c <__ieee754_pow+0xa74>)
 8010502:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010506:	42a3      	cmp	r3, r4
 8010508:	d919      	bls.n	801053e <__ieee754_pow+0x826>
 801050a:	4ba1      	ldr	r3, [pc, #644]	@ (8010790 <__ieee754_pow+0xa78>)
 801050c:	440b      	add	r3, r1
 801050e:	4303      	orrs	r3, r0
 8010510:	d009      	beq.n	8010526 <__ieee754_pow+0x80e>
 8010512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010516:	2200      	movs	r2, #0
 8010518:	2300      	movs	r3, #0
 801051a:	f7f0 fae7 	bl	8000aec <__aeabi_dcmplt>
 801051e:	3800      	subs	r0, #0
 8010520:	bf18      	it	ne
 8010522:	2001      	movne	r0, #1
 8010524:	e512      	b.n	800ff4c <__ieee754_pow+0x234>
 8010526:	4642      	mov	r2, r8
 8010528:	464b      	mov	r3, r9
 801052a:	f7ef feb5 	bl	8000298 <__aeabi_dsub>
 801052e:	4632      	mov	r2, r6
 8010530:	463b      	mov	r3, r7
 8010532:	f7f0 faef 	bl	8000b14 <__aeabi_dcmpge>
 8010536:	2800      	cmp	r0, #0
 8010538:	d1eb      	bne.n	8010512 <__ieee754_pow+0x7fa>
 801053a:	4b96      	ldr	r3, [pc, #600]	@ (8010794 <__ieee754_pow+0xa7c>)
 801053c:	e003      	b.n	8010546 <__ieee754_pow+0x82e>
 801053e:	4a96      	ldr	r2, [pc, #600]	@ (8010798 <__ieee754_pow+0xa80>)
 8010540:	4293      	cmp	r3, r2
 8010542:	f240 80e7 	bls.w	8010714 <__ieee754_pow+0x9fc>
 8010546:	151b      	asrs	r3, r3, #20
 8010548:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801054c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8010550:	fa4a fa03 	asr.w	sl, sl, r3
 8010554:	44da      	add	sl, fp
 8010556:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801055a:	4890      	ldr	r0, [pc, #576]	@ (801079c <__ieee754_pow+0xa84>)
 801055c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010560:	4108      	asrs	r0, r1
 8010562:	ea00 030a 	and.w	r3, r0, sl
 8010566:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801056a:	f1c1 0114 	rsb	r1, r1, #20
 801056e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8010572:	fa4a fa01 	asr.w	sl, sl, r1
 8010576:	f1bb 0f00 	cmp.w	fp, #0
 801057a:	4640      	mov	r0, r8
 801057c:	4649      	mov	r1, r9
 801057e:	f04f 0200 	mov.w	r2, #0
 8010582:	bfb8      	it	lt
 8010584:	f1ca 0a00 	rsblt	sl, sl, #0
 8010588:	f7ef fe86 	bl	8000298 <__aeabi_dsub>
 801058c:	4680      	mov	r8, r0
 801058e:	4689      	mov	r9, r1
 8010590:	4632      	mov	r2, r6
 8010592:	463b      	mov	r3, r7
 8010594:	4640      	mov	r0, r8
 8010596:	4649      	mov	r1, r9
 8010598:	f7ef fe80 	bl	800029c <__adddf3>
 801059c:	2400      	movs	r4, #0
 801059e:	a36a      	add	r3, pc, #424	@ (adr r3, 8010748 <__ieee754_pow+0xa30>)
 80105a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a4:	4620      	mov	r0, r4
 80105a6:	460d      	mov	r5, r1
 80105a8:	f7f0 f82e 	bl	8000608 <__aeabi_dmul>
 80105ac:	4642      	mov	r2, r8
 80105ae:	e9cd 0100 	strd	r0, r1, [sp]
 80105b2:	464b      	mov	r3, r9
 80105b4:	4620      	mov	r0, r4
 80105b6:	4629      	mov	r1, r5
 80105b8:	f7ef fe6e 	bl	8000298 <__aeabi_dsub>
 80105bc:	4602      	mov	r2, r0
 80105be:	460b      	mov	r3, r1
 80105c0:	4630      	mov	r0, r6
 80105c2:	4639      	mov	r1, r7
 80105c4:	f7ef fe68 	bl	8000298 <__aeabi_dsub>
 80105c8:	a361      	add	r3, pc, #388	@ (adr r3, 8010750 <__ieee754_pow+0xa38>)
 80105ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ce:	f7f0 f81b 	bl	8000608 <__aeabi_dmul>
 80105d2:	a361      	add	r3, pc, #388	@ (adr r3, 8010758 <__ieee754_pow+0xa40>)
 80105d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d8:	4680      	mov	r8, r0
 80105da:	4689      	mov	r9, r1
 80105dc:	4620      	mov	r0, r4
 80105de:	4629      	mov	r1, r5
 80105e0:	f7f0 f812 	bl	8000608 <__aeabi_dmul>
 80105e4:	4602      	mov	r2, r0
 80105e6:	460b      	mov	r3, r1
 80105e8:	4640      	mov	r0, r8
 80105ea:	4649      	mov	r1, r9
 80105ec:	f7ef fe56 	bl	800029c <__adddf3>
 80105f0:	4604      	mov	r4, r0
 80105f2:	460d      	mov	r5, r1
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105fc:	f7ef fe4e 	bl	800029c <__adddf3>
 8010600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010604:	4680      	mov	r8, r0
 8010606:	4689      	mov	r9, r1
 8010608:	f7ef fe46 	bl	8000298 <__aeabi_dsub>
 801060c:	4602      	mov	r2, r0
 801060e:	460b      	mov	r3, r1
 8010610:	4620      	mov	r0, r4
 8010612:	4629      	mov	r1, r5
 8010614:	f7ef fe40 	bl	8000298 <__aeabi_dsub>
 8010618:	4642      	mov	r2, r8
 801061a:	4606      	mov	r6, r0
 801061c:	460f      	mov	r7, r1
 801061e:	464b      	mov	r3, r9
 8010620:	4640      	mov	r0, r8
 8010622:	4649      	mov	r1, r9
 8010624:	f7ef fff0 	bl	8000608 <__aeabi_dmul>
 8010628:	a34d      	add	r3, pc, #308	@ (adr r3, 8010760 <__ieee754_pow+0xa48>)
 801062a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062e:	4604      	mov	r4, r0
 8010630:	460d      	mov	r5, r1
 8010632:	f7ef ffe9 	bl	8000608 <__aeabi_dmul>
 8010636:	a34c      	add	r3, pc, #304	@ (adr r3, 8010768 <__ieee754_pow+0xa50>)
 8010638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063c:	f7ef fe2c 	bl	8000298 <__aeabi_dsub>
 8010640:	4622      	mov	r2, r4
 8010642:	462b      	mov	r3, r5
 8010644:	f7ef ffe0 	bl	8000608 <__aeabi_dmul>
 8010648:	a349      	add	r3, pc, #292	@ (adr r3, 8010770 <__ieee754_pow+0xa58>)
 801064a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801064e:	f7ef fe25 	bl	800029c <__adddf3>
 8010652:	4622      	mov	r2, r4
 8010654:	462b      	mov	r3, r5
 8010656:	f7ef ffd7 	bl	8000608 <__aeabi_dmul>
 801065a:	a347      	add	r3, pc, #284	@ (adr r3, 8010778 <__ieee754_pow+0xa60>)
 801065c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010660:	f7ef fe1a 	bl	8000298 <__aeabi_dsub>
 8010664:	4622      	mov	r2, r4
 8010666:	462b      	mov	r3, r5
 8010668:	f7ef ffce 	bl	8000608 <__aeabi_dmul>
 801066c:	a344      	add	r3, pc, #272	@ (adr r3, 8010780 <__ieee754_pow+0xa68>)
 801066e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010672:	f7ef fe13 	bl	800029c <__adddf3>
 8010676:	4622      	mov	r2, r4
 8010678:	462b      	mov	r3, r5
 801067a:	f7ef ffc5 	bl	8000608 <__aeabi_dmul>
 801067e:	4602      	mov	r2, r0
 8010680:	460b      	mov	r3, r1
 8010682:	4640      	mov	r0, r8
 8010684:	4649      	mov	r1, r9
 8010686:	f7ef fe07 	bl	8000298 <__aeabi_dsub>
 801068a:	4604      	mov	r4, r0
 801068c:	460d      	mov	r5, r1
 801068e:	4602      	mov	r2, r0
 8010690:	460b      	mov	r3, r1
 8010692:	4640      	mov	r0, r8
 8010694:	4649      	mov	r1, r9
 8010696:	f7ef ffb7 	bl	8000608 <__aeabi_dmul>
 801069a:	2200      	movs	r2, #0
 801069c:	e9cd 0100 	strd	r0, r1, [sp]
 80106a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80106a4:	4620      	mov	r0, r4
 80106a6:	4629      	mov	r1, r5
 80106a8:	f7ef fdf6 	bl	8000298 <__aeabi_dsub>
 80106ac:	4602      	mov	r2, r0
 80106ae:	460b      	mov	r3, r1
 80106b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106b4:	f7f0 f8d2 	bl	800085c <__aeabi_ddiv>
 80106b8:	4632      	mov	r2, r6
 80106ba:	4604      	mov	r4, r0
 80106bc:	460d      	mov	r5, r1
 80106be:	463b      	mov	r3, r7
 80106c0:	4640      	mov	r0, r8
 80106c2:	4649      	mov	r1, r9
 80106c4:	f7ef ffa0 	bl	8000608 <__aeabi_dmul>
 80106c8:	4632      	mov	r2, r6
 80106ca:	463b      	mov	r3, r7
 80106cc:	f7ef fde6 	bl	800029c <__adddf3>
 80106d0:	4602      	mov	r2, r0
 80106d2:	460b      	mov	r3, r1
 80106d4:	4620      	mov	r0, r4
 80106d6:	4629      	mov	r1, r5
 80106d8:	f7ef fdde 	bl	8000298 <__aeabi_dsub>
 80106dc:	4642      	mov	r2, r8
 80106de:	464b      	mov	r3, r9
 80106e0:	f7ef fdda 	bl	8000298 <__aeabi_dsub>
 80106e4:	460b      	mov	r3, r1
 80106e6:	4602      	mov	r2, r0
 80106e8:	492d      	ldr	r1, [pc, #180]	@ (80107a0 <__ieee754_pow+0xa88>)
 80106ea:	2000      	movs	r0, #0
 80106ec:	f7ef fdd4 	bl	8000298 <__aeabi_dsub>
 80106f0:	ec41 0b10 	vmov	d0, r0, r1
 80106f4:	ee10 3a90 	vmov	r3, s1
 80106f8:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80106fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010700:	da0b      	bge.n	801071a <__ieee754_pow+0xa02>
 8010702:	4650      	mov	r0, sl
 8010704:	f000 fef4 	bl	80114f0 <scalbn>
 8010708:	ec51 0b10 	vmov	r0, r1, d0
 801070c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010710:	f7ff bb6d 	b.w	800fdee <__ieee754_pow+0xd6>
 8010714:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010718:	e73a      	b.n	8010590 <__ieee754_pow+0x878>
 801071a:	ec51 0b10 	vmov	r0, r1, d0
 801071e:	4619      	mov	r1, r3
 8010720:	e7f4      	b.n	801070c <__ieee754_pow+0x9f4>
 8010722:	491f      	ldr	r1, [pc, #124]	@ (80107a0 <__ieee754_pow+0xa88>)
 8010724:	2000      	movs	r0, #0
 8010726:	f7ff bb14 	b.w	800fd52 <__ieee754_pow+0x3a>
 801072a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801072e:	f7ff bb10 	b.w	800fd52 <__ieee754_pow+0x3a>
 8010732:	4630      	mov	r0, r6
 8010734:	4639      	mov	r1, r7
 8010736:	f7ff bb0c 	b.w	800fd52 <__ieee754_pow+0x3a>
 801073a:	460c      	mov	r4, r1
 801073c:	f7ff bb69 	b.w	800fe12 <__ieee754_pow+0xfa>
 8010740:	2400      	movs	r4, #0
 8010742:	f7ff bb4b 	b.w	800fddc <__ieee754_pow+0xc4>
 8010746:	bf00      	nop
 8010748:	00000000 	.word	0x00000000
 801074c:	3fe62e43 	.word	0x3fe62e43
 8010750:	fefa39ef 	.word	0xfefa39ef
 8010754:	3fe62e42 	.word	0x3fe62e42
 8010758:	0ca86c39 	.word	0x0ca86c39
 801075c:	be205c61 	.word	0xbe205c61
 8010760:	72bea4d0 	.word	0x72bea4d0
 8010764:	3e663769 	.word	0x3e663769
 8010768:	c5d26bf1 	.word	0xc5d26bf1
 801076c:	3ebbbd41 	.word	0x3ebbbd41
 8010770:	af25de2c 	.word	0xaf25de2c
 8010774:	3f11566a 	.word	0x3f11566a
 8010778:	16bebd93 	.word	0x16bebd93
 801077c:	3f66c16c 	.word	0x3f66c16c
 8010780:	5555553e 	.word	0x5555553e
 8010784:	3fc55555 	.word	0x3fc55555
 8010788:	40900000 	.word	0x40900000
 801078c:	4090cbff 	.word	0x4090cbff
 8010790:	3f6f3400 	.word	0x3f6f3400
 8010794:	4090cc00 	.word	0x4090cc00
 8010798:	3fe00000 	.word	0x3fe00000
 801079c:	fff00000 	.word	0xfff00000
 80107a0:	3ff00000 	.word	0x3ff00000
 80107a4:	652b82fe 	.word	0x652b82fe
 80107a8:	3c971547 	.word	0x3c971547
 80107ac:	00000000 	.word	0x00000000

080107b0 <atan>:
 80107b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b4:	ec55 4b10 	vmov	r4, r5, d0
 80107b8:	4bbf      	ldr	r3, [pc, #764]	@ (8010ab8 <atan+0x308>)
 80107ba:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80107be:	429e      	cmp	r6, r3
 80107c0:	46ab      	mov	fp, r5
 80107c2:	d918      	bls.n	80107f6 <atan+0x46>
 80107c4:	4bbd      	ldr	r3, [pc, #756]	@ (8010abc <atan+0x30c>)
 80107c6:	429e      	cmp	r6, r3
 80107c8:	d801      	bhi.n	80107ce <atan+0x1e>
 80107ca:	d109      	bne.n	80107e0 <atan+0x30>
 80107cc:	b144      	cbz	r4, 80107e0 <atan+0x30>
 80107ce:	4622      	mov	r2, r4
 80107d0:	462b      	mov	r3, r5
 80107d2:	4620      	mov	r0, r4
 80107d4:	4629      	mov	r1, r5
 80107d6:	f7ef fd61 	bl	800029c <__adddf3>
 80107da:	4604      	mov	r4, r0
 80107dc:	460d      	mov	r5, r1
 80107de:	e006      	b.n	80107ee <atan+0x3e>
 80107e0:	f1bb 0f00 	cmp.w	fp, #0
 80107e4:	f340 812b 	ble.w	8010a3e <atan+0x28e>
 80107e8:	a597      	add	r5, pc, #604	@ (adr r5, 8010a48 <atan+0x298>)
 80107ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80107ee:	ec45 4b10 	vmov	d0, r4, r5
 80107f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f6:	4bb2      	ldr	r3, [pc, #712]	@ (8010ac0 <atan+0x310>)
 80107f8:	429e      	cmp	r6, r3
 80107fa:	d813      	bhi.n	8010824 <atan+0x74>
 80107fc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010800:	429e      	cmp	r6, r3
 8010802:	d80c      	bhi.n	801081e <atan+0x6e>
 8010804:	a392      	add	r3, pc, #584	@ (adr r3, 8010a50 <atan+0x2a0>)
 8010806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080a:	4620      	mov	r0, r4
 801080c:	4629      	mov	r1, r5
 801080e:	f7ef fd45 	bl	800029c <__adddf3>
 8010812:	4bac      	ldr	r3, [pc, #688]	@ (8010ac4 <atan+0x314>)
 8010814:	2200      	movs	r2, #0
 8010816:	f7f0 f987 	bl	8000b28 <__aeabi_dcmpgt>
 801081a:	2800      	cmp	r0, #0
 801081c:	d1e7      	bne.n	80107ee <atan+0x3e>
 801081e:	f04f 3aff 	mov.w	sl, #4294967295
 8010822:	e029      	b.n	8010878 <atan+0xc8>
 8010824:	f7fe fdb4 	bl	800f390 <fabs>
 8010828:	4ba7      	ldr	r3, [pc, #668]	@ (8010ac8 <atan+0x318>)
 801082a:	429e      	cmp	r6, r3
 801082c:	ec55 4b10 	vmov	r4, r5, d0
 8010830:	f200 80bc 	bhi.w	80109ac <atan+0x1fc>
 8010834:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010838:	429e      	cmp	r6, r3
 801083a:	f200 809e 	bhi.w	801097a <atan+0x1ca>
 801083e:	4622      	mov	r2, r4
 8010840:	462b      	mov	r3, r5
 8010842:	4620      	mov	r0, r4
 8010844:	4629      	mov	r1, r5
 8010846:	f7ef fd29 	bl	800029c <__adddf3>
 801084a:	4b9e      	ldr	r3, [pc, #632]	@ (8010ac4 <atan+0x314>)
 801084c:	2200      	movs	r2, #0
 801084e:	f7ef fd23 	bl	8000298 <__aeabi_dsub>
 8010852:	2200      	movs	r2, #0
 8010854:	4606      	mov	r6, r0
 8010856:	460f      	mov	r7, r1
 8010858:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801085c:	4620      	mov	r0, r4
 801085e:	4629      	mov	r1, r5
 8010860:	f7ef fd1c 	bl	800029c <__adddf3>
 8010864:	4602      	mov	r2, r0
 8010866:	460b      	mov	r3, r1
 8010868:	4630      	mov	r0, r6
 801086a:	4639      	mov	r1, r7
 801086c:	f7ef fff6 	bl	800085c <__aeabi_ddiv>
 8010870:	f04f 0a00 	mov.w	sl, #0
 8010874:	4604      	mov	r4, r0
 8010876:	460d      	mov	r5, r1
 8010878:	4622      	mov	r2, r4
 801087a:	462b      	mov	r3, r5
 801087c:	4620      	mov	r0, r4
 801087e:	4629      	mov	r1, r5
 8010880:	f7ef fec2 	bl	8000608 <__aeabi_dmul>
 8010884:	4602      	mov	r2, r0
 8010886:	460b      	mov	r3, r1
 8010888:	4680      	mov	r8, r0
 801088a:	4689      	mov	r9, r1
 801088c:	f7ef febc 	bl	8000608 <__aeabi_dmul>
 8010890:	a371      	add	r3, pc, #452	@ (adr r3, 8010a58 <atan+0x2a8>)
 8010892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010896:	4606      	mov	r6, r0
 8010898:	460f      	mov	r7, r1
 801089a:	f7ef feb5 	bl	8000608 <__aeabi_dmul>
 801089e:	a370      	add	r3, pc, #448	@ (adr r3, 8010a60 <atan+0x2b0>)
 80108a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a4:	f7ef fcfa 	bl	800029c <__adddf3>
 80108a8:	4632      	mov	r2, r6
 80108aa:	463b      	mov	r3, r7
 80108ac:	f7ef feac 	bl	8000608 <__aeabi_dmul>
 80108b0:	a36d      	add	r3, pc, #436	@ (adr r3, 8010a68 <atan+0x2b8>)
 80108b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b6:	f7ef fcf1 	bl	800029c <__adddf3>
 80108ba:	4632      	mov	r2, r6
 80108bc:	463b      	mov	r3, r7
 80108be:	f7ef fea3 	bl	8000608 <__aeabi_dmul>
 80108c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8010a70 <atan+0x2c0>)
 80108c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c8:	f7ef fce8 	bl	800029c <__adddf3>
 80108cc:	4632      	mov	r2, r6
 80108ce:	463b      	mov	r3, r7
 80108d0:	f7ef fe9a 	bl	8000608 <__aeabi_dmul>
 80108d4:	a368      	add	r3, pc, #416	@ (adr r3, 8010a78 <atan+0x2c8>)
 80108d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108da:	f7ef fcdf 	bl	800029c <__adddf3>
 80108de:	4632      	mov	r2, r6
 80108e0:	463b      	mov	r3, r7
 80108e2:	f7ef fe91 	bl	8000608 <__aeabi_dmul>
 80108e6:	a366      	add	r3, pc, #408	@ (adr r3, 8010a80 <atan+0x2d0>)
 80108e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ec:	f7ef fcd6 	bl	800029c <__adddf3>
 80108f0:	4642      	mov	r2, r8
 80108f2:	464b      	mov	r3, r9
 80108f4:	f7ef fe88 	bl	8000608 <__aeabi_dmul>
 80108f8:	a363      	add	r3, pc, #396	@ (adr r3, 8010a88 <atan+0x2d8>)
 80108fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fe:	4680      	mov	r8, r0
 8010900:	4689      	mov	r9, r1
 8010902:	4630      	mov	r0, r6
 8010904:	4639      	mov	r1, r7
 8010906:	f7ef fe7f 	bl	8000608 <__aeabi_dmul>
 801090a:	a361      	add	r3, pc, #388	@ (adr r3, 8010a90 <atan+0x2e0>)
 801090c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010910:	f7ef fcc2 	bl	8000298 <__aeabi_dsub>
 8010914:	4632      	mov	r2, r6
 8010916:	463b      	mov	r3, r7
 8010918:	f7ef fe76 	bl	8000608 <__aeabi_dmul>
 801091c:	a35e      	add	r3, pc, #376	@ (adr r3, 8010a98 <atan+0x2e8>)
 801091e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010922:	f7ef fcb9 	bl	8000298 <__aeabi_dsub>
 8010926:	4632      	mov	r2, r6
 8010928:	463b      	mov	r3, r7
 801092a:	f7ef fe6d 	bl	8000608 <__aeabi_dmul>
 801092e:	a35c      	add	r3, pc, #368	@ (adr r3, 8010aa0 <atan+0x2f0>)
 8010930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010934:	f7ef fcb0 	bl	8000298 <__aeabi_dsub>
 8010938:	4632      	mov	r2, r6
 801093a:	463b      	mov	r3, r7
 801093c:	f7ef fe64 	bl	8000608 <__aeabi_dmul>
 8010940:	a359      	add	r3, pc, #356	@ (adr r3, 8010aa8 <atan+0x2f8>)
 8010942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010946:	f7ef fca7 	bl	8000298 <__aeabi_dsub>
 801094a:	4632      	mov	r2, r6
 801094c:	463b      	mov	r3, r7
 801094e:	f7ef fe5b 	bl	8000608 <__aeabi_dmul>
 8010952:	4602      	mov	r2, r0
 8010954:	460b      	mov	r3, r1
 8010956:	4640      	mov	r0, r8
 8010958:	4649      	mov	r1, r9
 801095a:	f7ef fc9f 	bl	800029c <__adddf3>
 801095e:	4622      	mov	r2, r4
 8010960:	462b      	mov	r3, r5
 8010962:	f7ef fe51 	bl	8000608 <__aeabi_dmul>
 8010966:	f1ba 3fff 	cmp.w	sl, #4294967295
 801096a:	4602      	mov	r2, r0
 801096c:	460b      	mov	r3, r1
 801096e:	d148      	bne.n	8010a02 <atan+0x252>
 8010970:	4620      	mov	r0, r4
 8010972:	4629      	mov	r1, r5
 8010974:	f7ef fc90 	bl	8000298 <__aeabi_dsub>
 8010978:	e72f      	b.n	80107da <atan+0x2a>
 801097a:	4b52      	ldr	r3, [pc, #328]	@ (8010ac4 <atan+0x314>)
 801097c:	2200      	movs	r2, #0
 801097e:	4620      	mov	r0, r4
 8010980:	4629      	mov	r1, r5
 8010982:	f7ef fc89 	bl	8000298 <__aeabi_dsub>
 8010986:	4b4f      	ldr	r3, [pc, #316]	@ (8010ac4 <atan+0x314>)
 8010988:	4606      	mov	r6, r0
 801098a:	460f      	mov	r7, r1
 801098c:	2200      	movs	r2, #0
 801098e:	4620      	mov	r0, r4
 8010990:	4629      	mov	r1, r5
 8010992:	f7ef fc83 	bl	800029c <__adddf3>
 8010996:	4602      	mov	r2, r0
 8010998:	460b      	mov	r3, r1
 801099a:	4630      	mov	r0, r6
 801099c:	4639      	mov	r1, r7
 801099e:	f7ef ff5d 	bl	800085c <__aeabi_ddiv>
 80109a2:	f04f 0a01 	mov.w	sl, #1
 80109a6:	4604      	mov	r4, r0
 80109a8:	460d      	mov	r5, r1
 80109aa:	e765      	b.n	8010878 <atan+0xc8>
 80109ac:	4b47      	ldr	r3, [pc, #284]	@ (8010acc <atan+0x31c>)
 80109ae:	429e      	cmp	r6, r3
 80109b0:	d21c      	bcs.n	80109ec <atan+0x23c>
 80109b2:	4b47      	ldr	r3, [pc, #284]	@ (8010ad0 <atan+0x320>)
 80109b4:	2200      	movs	r2, #0
 80109b6:	4620      	mov	r0, r4
 80109b8:	4629      	mov	r1, r5
 80109ba:	f7ef fc6d 	bl	8000298 <__aeabi_dsub>
 80109be:	4b44      	ldr	r3, [pc, #272]	@ (8010ad0 <atan+0x320>)
 80109c0:	4606      	mov	r6, r0
 80109c2:	460f      	mov	r7, r1
 80109c4:	2200      	movs	r2, #0
 80109c6:	4620      	mov	r0, r4
 80109c8:	4629      	mov	r1, r5
 80109ca:	f7ef fe1d 	bl	8000608 <__aeabi_dmul>
 80109ce:	4b3d      	ldr	r3, [pc, #244]	@ (8010ac4 <atan+0x314>)
 80109d0:	2200      	movs	r2, #0
 80109d2:	f7ef fc63 	bl	800029c <__adddf3>
 80109d6:	4602      	mov	r2, r0
 80109d8:	460b      	mov	r3, r1
 80109da:	4630      	mov	r0, r6
 80109dc:	4639      	mov	r1, r7
 80109de:	f7ef ff3d 	bl	800085c <__aeabi_ddiv>
 80109e2:	f04f 0a02 	mov.w	sl, #2
 80109e6:	4604      	mov	r4, r0
 80109e8:	460d      	mov	r5, r1
 80109ea:	e745      	b.n	8010878 <atan+0xc8>
 80109ec:	4622      	mov	r2, r4
 80109ee:	462b      	mov	r3, r5
 80109f0:	4938      	ldr	r1, [pc, #224]	@ (8010ad4 <atan+0x324>)
 80109f2:	2000      	movs	r0, #0
 80109f4:	f7ef ff32 	bl	800085c <__aeabi_ddiv>
 80109f8:	f04f 0a03 	mov.w	sl, #3
 80109fc:	4604      	mov	r4, r0
 80109fe:	460d      	mov	r5, r1
 8010a00:	e73a      	b.n	8010878 <atan+0xc8>
 8010a02:	4b35      	ldr	r3, [pc, #212]	@ (8010ad8 <atan+0x328>)
 8010a04:	4e35      	ldr	r6, [pc, #212]	@ (8010adc <atan+0x32c>)
 8010a06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a0e:	f7ef fc43 	bl	8000298 <__aeabi_dsub>
 8010a12:	4622      	mov	r2, r4
 8010a14:	462b      	mov	r3, r5
 8010a16:	f7ef fc3f 	bl	8000298 <__aeabi_dsub>
 8010a1a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010a1e:	4602      	mov	r2, r0
 8010a20:	460b      	mov	r3, r1
 8010a22:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010a26:	f7ef fc37 	bl	8000298 <__aeabi_dsub>
 8010a2a:	f1bb 0f00 	cmp.w	fp, #0
 8010a2e:	4604      	mov	r4, r0
 8010a30:	460d      	mov	r5, r1
 8010a32:	f6bf aedc 	bge.w	80107ee <atan+0x3e>
 8010a36:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010a3a:	461d      	mov	r5, r3
 8010a3c:	e6d7      	b.n	80107ee <atan+0x3e>
 8010a3e:	a51c      	add	r5, pc, #112	@ (adr r5, 8010ab0 <atan+0x300>)
 8010a40:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010a44:	e6d3      	b.n	80107ee <atan+0x3e>
 8010a46:	bf00      	nop
 8010a48:	54442d18 	.word	0x54442d18
 8010a4c:	3ff921fb 	.word	0x3ff921fb
 8010a50:	8800759c 	.word	0x8800759c
 8010a54:	7e37e43c 	.word	0x7e37e43c
 8010a58:	e322da11 	.word	0xe322da11
 8010a5c:	3f90ad3a 	.word	0x3f90ad3a
 8010a60:	24760deb 	.word	0x24760deb
 8010a64:	3fa97b4b 	.word	0x3fa97b4b
 8010a68:	a0d03d51 	.word	0xa0d03d51
 8010a6c:	3fb10d66 	.word	0x3fb10d66
 8010a70:	c54c206e 	.word	0xc54c206e
 8010a74:	3fb745cd 	.word	0x3fb745cd
 8010a78:	920083ff 	.word	0x920083ff
 8010a7c:	3fc24924 	.word	0x3fc24924
 8010a80:	5555550d 	.word	0x5555550d
 8010a84:	3fd55555 	.word	0x3fd55555
 8010a88:	2c6a6c2f 	.word	0x2c6a6c2f
 8010a8c:	bfa2b444 	.word	0xbfa2b444
 8010a90:	52defd9a 	.word	0x52defd9a
 8010a94:	3fadde2d 	.word	0x3fadde2d
 8010a98:	af749a6d 	.word	0xaf749a6d
 8010a9c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010aa0:	fe231671 	.word	0xfe231671
 8010aa4:	3fbc71c6 	.word	0x3fbc71c6
 8010aa8:	9998ebc4 	.word	0x9998ebc4
 8010aac:	3fc99999 	.word	0x3fc99999
 8010ab0:	54442d18 	.word	0x54442d18
 8010ab4:	bff921fb 	.word	0xbff921fb
 8010ab8:	440fffff 	.word	0x440fffff
 8010abc:	7ff00000 	.word	0x7ff00000
 8010ac0:	3fdbffff 	.word	0x3fdbffff
 8010ac4:	3ff00000 	.word	0x3ff00000
 8010ac8:	3ff2ffff 	.word	0x3ff2ffff
 8010acc:	40038000 	.word	0x40038000
 8010ad0:	3ff80000 	.word	0x3ff80000
 8010ad4:	bff00000 	.word	0xbff00000
 8010ad8:	08012200 	.word	0x08012200
 8010adc:	08012220 	.word	0x08012220

08010ae0 <__kernel_cosf>:
 8010ae0:	ee10 3a10 	vmov	r3, s0
 8010ae4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010ae8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010aec:	eef0 6a40 	vmov.f32	s13, s0
 8010af0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010af4:	d204      	bcs.n	8010b00 <__kernel_cosf+0x20>
 8010af6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8010afa:	ee17 2a90 	vmov	r2, s15
 8010afe:	b342      	cbz	r2, 8010b52 <__kernel_cosf+0x72>
 8010b00:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010b04:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8010b70 <__kernel_cosf+0x90>
 8010b08:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8010b74 <__kernel_cosf+0x94>
 8010b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8010b78 <__kernel_cosf+0x98>)
 8010b0e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010b12:	4293      	cmp	r3, r2
 8010b14:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010b7c <__kernel_cosf+0x9c>
 8010b18:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010b1c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8010b80 <__kernel_cosf+0xa0>
 8010b20:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010b24:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8010b84 <__kernel_cosf+0xa4>
 8010b28:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010b2c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8010b88 <__kernel_cosf+0xa8>
 8010b30:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010b34:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8010b38:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010b3c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010b40:	eee7 0a06 	vfma.f32	s1, s14, s12
 8010b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b48:	d804      	bhi.n	8010b54 <__kernel_cosf+0x74>
 8010b4a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010b4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010b52:	4770      	bx	lr
 8010b54:	4a0d      	ldr	r2, [pc, #52]	@ (8010b8c <__kernel_cosf+0xac>)
 8010b56:	4293      	cmp	r3, r2
 8010b58:	bf9a      	itte	ls
 8010b5a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8010b5e:	ee07 3a10 	vmovls	s14, r3
 8010b62:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8010b66:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010b6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b6e:	e7ec      	b.n	8010b4a <__kernel_cosf+0x6a>
 8010b70:	ad47d74e 	.word	0xad47d74e
 8010b74:	310f74f6 	.word	0x310f74f6
 8010b78:	3e999999 	.word	0x3e999999
 8010b7c:	b493f27c 	.word	0xb493f27c
 8010b80:	37d00d01 	.word	0x37d00d01
 8010b84:	bab60b61 	.word	0xbab60b61
 8010b88:	3d2aaaab 	.word	0x3d2aaaab
 8010b8c:	3f480000 	.word	0x3f480000

08010b90 <__kernel_sinf>:
 8010b90:	ee10 3a10 	vmov	r3, s0
 8010b94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010b98:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010b9c:	d204      	bcs.n	8010ba8 <__kernel_sinf+0x18>
 8010b9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010ba2:	ee17 3a90 	vmov	r3, s15
 8010ba6:	b35b      	cbz	r3, 8010c00 <__kernel_sinf+0x70>
 8010ba8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010bac:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010c04 <__kernel_sinf+0x74>
 8010bb0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8010c08 <__kernel_sinf+0x78>
 8010bb4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010bb8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8010c0c <__kernel_sinf+0x7c>
 8010bbc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010bc0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8010c10 <__kernel_sinf+0x80>
 8010bc4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010bc8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8010c14 <__kernel_sinf+0x84>
 8010bcc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010bd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010bd4:	b930      	cbnz	r0, 8010be4 <__kernel_sinf+0x54>
 8010bd6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8010c18 <__kernel_sinf+0x88>
 8010bda:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010bde:	eea6 0a26 	vfma.f32	s0, s12, s13
 8010be2:	4770      	bx	lr
 8010be4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010be8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010bec:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010bf0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8010bf4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8010c1c <__kernel_sinf+0x8c>
 8010bf8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010bfc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	2f2ec9d3 	.word	0x2f2ec9d3
 8010c08:	b2d72f34 	.word	0xb2d72f34
 8010c0c:	3638ef1b 	.word	0x3638ef1b
 8010c10:	b9500d01 	.word	0xb9500d01
 8010c14:	3c088889 	.word	0x3c088889
 8010c18:	be2aaaab 	.word	0xbe2aaaab
 8010c1c:	3e2aaaab 	.word	0x3e2aaaab

08010c20 <__kernel_tanf>:
 8010c20:	b508      	push	{r3, lr}
 8010c22:	ee10 3a10 	vmov	r3, s0
 8010c26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010c2a:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 8010c2e:	eef0 7a40 	vmov.f32	s15, s0
 8010c32:	d217      	bcs.n	8010c64 <__kernel_tanf+0x44>
 8010c34:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8010c38:	ee17 1a10 	vmov	r1, s14
 8010c3c:	bb41      	cbnz	r1, 8010c90 <__kernel_tanf+0x70>
 8010c3e:	1c43      	adds	r3, r0, #1
 8010c40:	4313      	orrs	r3, r2
 8010c42:	d108      	bne.n	8010c56 <__kernel_tanf+0x36>
 8010c44:	f7fe fc3c 	bl	800f4c0 <fabsf>
 8010c48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010c4c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010c50:	eeb0 0a67 	vmov.f32	s0, s15
 8010c54:	bd08      	pop	{r3, pc}
 8010c56:	2801      	cmp	r0, #1
 8010c58:	d0fa      	beq.n	8010c50 <__kernel_tanf+0x30>
 8010c5a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010c5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010c62:	e7f5      	b.n	8010c50 <__kernel_tanf+0x30>
 8010c64:	494c      	ldr	r1, [pc, #304]	@ (8010d98 <__kernel_tanf+0x178>)
 8010c66:	428a      	cmp	r2, r1
 8010c68:	d312      	bcc.n	8010c90 <__kernel_tanf+0x70>
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8010d9c <__kernel_tanf+0x17c>
 8010c70:	bfb8      	it	lt
 8010c72:	eef1 7a40 	vneglt.f32	s15, s0
 8010c76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c7a:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8010da0 <__kernel_tanf+0x180>
 8010c7e:	bfb8      	it	lt
 8010c80:	eef1 0a60 	vneglt.f32	s1, s1
 8010c84:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010c88:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8010da4 <__kernel_tanf+0x184>
 8010c8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010c90:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8010c94:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8010da8 <__kernel_tanf+0x188>
 8010c98:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8010dac <__kernel_tanf+0x18c>
 8010c9c:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8010db0 <__kernel_tanf+0x190>
 8010ca0:	493d      	ldr	r1, [pc, #244]	@ (8010d98 <__kernel_tanf+0x178>)
 8010ca2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010ca6:	428a      	cmp	r2, r1
 8010ca8:	eea7 6a25 	vfma.f32	s12, s14, s11
 8010cac:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8010db4 <__kernel_tanf+0x194>
 8010cb0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8010cb4:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8010db8 <__kernel_tanf+0x198>
 8010cb8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010cbc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8010dbc <__kernel_tanf+0x19c>
 8010cc0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8010cc4:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8010dc0 <__kernel_tanf+0x1a0>
 8010cc8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010ccc:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8010dc4 <__kernel_tanf+0x1a4>
 8010cd0:	eee7 5a05 	vfma.f32	s11, s14, s10
 8010cd4:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8010dc8 <__kernel_tanf+0x1a8>
 8010cd8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8010cdc:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8010dcc <__kernel_tanf+0x1ac>
 8010ce0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8010ce4:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8010dd0 <__kernel_tanf+0x1b0>
 8010ce8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8010cec:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8010dd4 <__kernel_tanf+0x1b4>
 8010cf0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8010cf4:	eeb0 7a46 	vmov.f32	s14, s12
 8010cf8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010cfc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8010d00:	eeb0 6a60 	vmov.f32	s12, s1
 8010d04:	eea7 6a05 	vfma.f32	s12, s14, s10
 8010d08:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8010dd8 <__kernel_tanf+0x1b8>
 8010d0c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8010d10:	eee5 0a07 	vfma.f32	s1, s10, s14
 8010d14:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8010d18:	d31d      	bcc.n	8010d56 <__kernel_tanf+0x136>
 8010d1a:	ee07 0a10 	vmov	s14, r0
 8010d1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010d22:	ee26 5a06 	vmul.f32	s10, s12, s12
 8010d26:	ee36 6a07 	vadd.f32	s12, s12, s14
 8010d2a:	179b      	asrs	r3, r3, #30
 8010d2c:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8010d30:	f003 0302 	and.w	r3, r3, #2
 8010d34:	f1c3 0301 	rsb	r3, r3, #1
 8010d38:	ee06 3a90 	vmov	s13, r3
 8010d3c:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8010d40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010d44:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010d48:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010d4c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8010d50:	ee66 7a87 	vmul.f32	s15, s13, s14
 8010d54:	e77c      	b.n	8010c50 <__kernel_tanf+0x30>
 8010d56:	2801      	cmp	r0, #1
 8010d58:	d01b      	beq.n	8010d92 <__kernel_tanf+0x172>
 8010d5a:	4b20      	ldr	r3, [pc, #128]	@ (8010ddc <__kernel_tanf+0x1bc>)
 8010d5c:	ee16 2a10 	vmov	r2, s12
 8010d60:	401a      	ands	r2, r3
 8010d62:	ee05 2a90 	vmov	s11, r2
 8010d66:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8010d6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010d6e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010d72:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8010d76:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8010d7a:	ee16 2a90 	vmov	r2, s13
 8010d7e:	4013      	ands	r3, r2
 8010d80:	ee07 3a90 	vmov	s15, r3
 8010d84:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010d88:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8010d8c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010d90:	e75e      	b.n	8010c50 <__kernel_tanf+0x30>
 8010d92:	eef0 7a46 	vmov.f32	s15, s12
 8010d96:	e75b      	b.n	8010c50 <__kernel_tanf+0x30>
 8010d98:	3f2ca140 	.word	0x3f2ca140
 8010d9c:	3f490fda 	.word	0x3f490fda
 8010da0:	33222168 	.word	0x33222168
 8010da4:	00000000 	.word	0x00000000
 8010da8:	b79bae5f 	.word	0xb79bae5f
 8010dac:	38a3f445 	.word	0x38a3f445
 8010db0:	37d95384 	.word	0x37d95384
 8010db4:	3a1a26c8 	.word	0x3a1a26c8
 8010db8:	3b6b6916 	.word	0x3b6b6916
 8010dbc:	3cb327a4 	.word	0x3cb327a4
 8010dc0:	3e088889 	.word	0x3e088889
 8010dc4:	3895c07a 	.word	0x3895c07a
 8010dc8:	398137b9 	.word	0x398137b9
 8010dcc:	3abede48 	.word	0x3abede48
 8010dd0:	3c11371f 	.word	0x3c11371f
 8010dd4:	3d5d0dd1 	.word	0x3d5d0dd1
 8010dd8:	3eaaaaab 	.word	0x3eaaaaab
 8010ddc:	fffff000 	.word	0xfffff000

08010de0 <__ieee754_asinf>:
 8010de0:	b538      	push	{r3, r4, r5, lr}
 8010de2:	ee10 5a10 	vmov	r5, s0
 8010de6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010dea:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8010dee:	ed2d 8b04 	vpush	{d8-d9}
 8010df2:	d10c      	bne.n	8010e0e <__ieee754_asinf+0x2e>
 8010df4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010f68 <__ieee754_asinf+0x188>
 8010df8:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8010f6c <__ieee754_asinf+0x18c>
 8010dfc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010e00:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010e04:	eeb0 0a67 	vmov.f32	s0, s15
 8010e08:	ecbd 8b04 	vpop	{d8-d9}
 8010e0c:	bd38      	pop	{r3, r4, r5, pc}
 8010e0e:	d904      	bls.n	8010e1a <__ieee754_asinf+0x3a>
 8010e10:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010e14:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010e18:	e7f6      	b.n	8010e08 <__ieee754_asinf+0x28>
 8010e1a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010e1e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010e22:	d20b      	bcs.n	8010e3c <__ieee754_asinf+0x5c>
 8010e24:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8010e28:	d252      	bcs.n	8010ed0 <__ieee754_asinf+0xf0>
 8010e2a:	eddf 7a51 	vldr	s15, [pc, #324]	@ 8010f70 <__ieee754_asinf+0x190>
 8010e2e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010e32:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e3a:	dce5      	bgt.n	8010e08 <__ieee754_asinf+0x28>
 8010e3c:	f7fe fb40 	bl	800f4c0 <fabsf>
 8010e40:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8010e44:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010e48:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010e4c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010f74 <__ieee754_asinf+0x194>
 8010e50:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8010f78 <__ieee754_asinf+0x198>
 8010e54:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 8010f7c <__ieee754_asinf+0x19c>
 8010e58:	eea8 7a27 	vfma.f32	s14, s16, s15
 8010e5c:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8010f80 <__ieee754_asinf+0x1a0>
 8010e60:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010e64:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8010f84 <__ieee754_asinf+0x1a4>
 8010e68:	eea7 7a88 	vfma.f32	s14, s15, s16
 8010e6c:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8010f88 <__ieee754_asinf+0x1a8>
 8010e70:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010e74:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8010f8c <__ieee754_asinf+0x1ac>
 8010e78:	eea7 9a88 	vfma.f32	s18, s15, s16
 8010e7c:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8010f90 <__ieee754_asinf+0x1b0>
 8010e80:	eee8 7a07 	vfma.f32	s15, s16, s14
 8010e84:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8010f94 <__ieee754_asinf+0x1b4>
 8010e88:	eea7 7a88 	vfma.f32	s14, s15, s16
 8010e8c:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8010f98 <__ieee754_asinf+0x1b8>
 8010e90:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010e94:	eeb0 0a48 	vmov.f32	s0, s16
 8010e98:	eee7 8a88 	vfma.f32	s17, s15, s16
 8010e9c:	f7fe fc6c 	bl	800f778 <__ieee754_sqrtf>
 8010ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8010f9c <__ieee754_asinf+0x1bc>)
 8010ea2:	ee29 9a08 	vmul.f32	s18, s18, s16
 8010ea6:	429c      	cmp	r4, r3
 8010ea8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8010eac:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010eb0:	d93d      	bls.n	8010f2e <__ieee754_asinf+0x14e>
 8010eb2:	eea0 0a06 	vfma.f32	s0, s0, s12
 8010eb6:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8010fa0 <__ieee754_asinf+0x1c0>
 8010eba:	eee0 7a26 	vfma.f32	s15, s0, s13
 8010ebe:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8010f6c <__ieee754_asinf+0x18c>
 8010ec2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010ec6:	2d00      	cmp	r5, #0
 8010ec8:	bfd8      	it	le
 8010eca:	eeb1 0a40 	vnegle.f32	s0, s0
 8010ece:	e79b      	b.n	8010e08 <__ieee754_asinf+0x28>
 8010ed0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010ed4:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8010f78 <__ieee754_asinf+0x198>
 8010ed8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8010f74 <__ieee754_asinf+0x194>
 8010edc:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8010f8c <__ieee754_asinf+0x1ac>
 8010ee0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010ee4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8010f80 <__ieee754_asinf+0x1a0>
 8010ee8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010eec:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8010f84 <__ieee754_asinf+0x1a4>
 8010ef0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010ef4:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8010f88 <__ieee754_asinf+0x1a8>
 8010ef8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010efc:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8010f7c <__ieee754_asinf+0x19c>
 8010f00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010f04:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8010f90 <__ieee754_asinf+0x1b0>
 8010f08:	eee7 6a86 	vfma.f32	s13, s15, s12
 8010f0c:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8010f94 <__ieee754_asinf+0x1b4>
 8010f10:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010f14:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8010f98 <__ieee754_asinf+0x1b8>
 8010f18:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f20:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8010f24:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8010f28:	eea0 0a27 	vfma.f32	s0, s0, s15
 8010f2c:	e76c      	b.n	8010e08 <__ieee754_asinf+0x28>
 8010f2e:	ee10 3a10 	vmov	r3, s0
 8010f32:	f36f 030b 	bfc	r3, #0, #12
 8010f36:	ee07 3a10 	vmov	s14, r3
 8010f3a:	eea7 8a47 	vfms.f32	s16, s14, s14
 8010f3e:	ee70 5a00 	vadd.f32	s11, s0, s0
 8010f42:	ee30 0a07 	vadd.f32	s0, s0, s14
 8010f46:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010f68 <__ieee754_asinf+0x188>
 8010f4a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8010f4e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8010fa4 <__ieee754_asinf+0x1c4>
 8010f52:	eee5 7a66 	vfms.f32	s15, s10, s13
 8010f56:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8010f5a:	eeb0 6a40 	vmov.f32	s12, s0
 8010f5e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010f62:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010f66:	e7ac      	b.n	8010ec2 <__ieee754_asinf+0xe2>
 8010f68:	b33bbd2e 	.word	0xb33bbd2e
 8010f6c:	3fc90fdb 	.word	0x3fc90fdb
 8010f70:	7149f2ca 	.word	0x7149f2ca
 8010f74:	3a4f7f04 	.word	0x3a4f7f04
 8010f78:	3811ef08 	.word	0x3811ef08
 8010f7c:	3e2aaaab 	.word	0x3e2aaaab
 8010f80:	bd241146 	.word	0xbd241146
 8010f84:	3e4e0aa8 	.word	0x3e4e0aa8
 8010f88:	bea6b090 	.word	0xbea6b090
 8010f8c:	3d9dc62e 	.word	0x3d9dc62e
 8010f90:	bf303361 	.word	0xbf303361
 8010f94:	4001572d 	.word	0x4001572d
 8010f98:	c019d139 	.word	0xc019d139
 8010f9c:	3f799999 	.word	0x3f799999
 8010fa0:	333bbd2e 	.word	0x333bbd2e
 8010fa4:	3f490fdb 	.word	0x3f490fdb

08010fa8 <__ieee754_atan2f>:
 8010fa8:	ee10 2a90 	vmov	r2, s1
 8010fac:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8010fb0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010fb4:	b510      	push	{r4, lr}
 8010fb6:	eef0 7a40 	vmov.f32	s15, s0
 8010fba:	d806      	bhi.n	8010fca <__ieee754_atan2f+0x22>
 8010fbc:	ee10 0a10 	vmov	r0, s0
 8010fc0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010fc4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010fc8:	d904      	bls.n	8010fd4 <__ieee754_atan2f+0x2c>
 8010fca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010fce:	eeb0 0a67 	vmov.f32	s0, s15
 8010fd2:	bd10      	pop	{r4, pc}
 8010fd4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8010fd8:	d103      	bne.n	8010fe2 <__ieee754_atan2f+0x3a>
 8010fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fde:	f000 b9b3 	b.w	8011348 <atanf>
 8010fe2:	1794      	asrs	r4, r2, #30
 8010fe4:	f004 0402 	and.w	r4, r4, #2
 8010fe8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010fec:	b943      	cbnz	r3, 8011000 <__ieee754_atan2f+0x58>
 8010fee:	2c02      	cmp	r4, #2
 8010ff0:	d05e      	beq.n	80110b0 <__ieee754_atan2f+0x108>
 8010ff2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80110c4 <__ieee754_atan2f+0x11c>
 8010ff6:	2c03      	cmp	r4, #3
 8010ff8:	bf08      	it	eq
 8010ffa:	eef0 7a47 	vmoveq.f32	s15, s14
 8010ffe:	e7e6      	b.n	8010fce <__ieee754_atan2f+0x26>
 8011000:	b941      	cbnz	r1, 8011014 <__ieee754_atan2f+0x6c>
 8011002:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80110c8 <__ieee754_atan2f+0x120>
 8011006:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80110cc <__ieee754_atan2f+0x124>
 801100a:	2800      	cmp	r0, #0
 801100c:	bfa8      	it	ge
 801100e:	eef0 7a47 	vmovge.f32	s15, s14
 8011012:	e7dc      	b.n	8010fce <__ieee754_atan2f+0x26>
 8011014:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011018:	d110      	bne.n	801103c <__ieee754_atan2f+0x94>
 801101a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801101e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011022:	d107      	bne.n	8011034 <__ieee754_atan2f+0x8c>
 8011024:	2c02      	cmp	r4, #2
 8011026:	d846      	bhi.n	80110b6 <__ieee754_atan2f+0x10e>
 8011028:	4b29      	ldr	r3, [pc, #164]	@ (80110d0 <__ieee754_atan2f+0x128>)
 801102a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801102e:	edd3 7a00 	vldr	s15, [r3]
 8011032:	e7cc      	b.n	8010fce <__ieee754_atan2f+0x26>
 8011034:	2c02      	cmp	r4, #2
 8011036:	d841      	bhi.n	80110bc <__ieee754_atan2f+0x114>
 8011038:	4b26      	ldr	r3, [pc, #152]	@ (80110d4 <__ieee754_atan2f+0x12c>)
 801103a:	e7f6      	b.n	801102a <__ieee754_atan2f+0x82>
 801103c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011040:	d0df      	beq.n	8011002 <__ieee754_atan2f+0x5a>
 8011042:	1a5b      	subs	r3, r3, r1
 8011044:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8011048:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801104c:	da1a      	bge.n	8011084 <__ieee754_atan2f+0xdc>
 801104e:	2a00      	cmp	r2, #0
 8011050:	da01      	bge.n	8011056 <__ieee754_atan2f+0xae>
 8011052:	313c      	adds	r1, #60	@ 0x3c
 8011054:	db19      	blt.n	801108a <__ieee754_atan2f+0xe2>
 8011056:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801105a:	f7fe fa31 	bl	800f4c0 <fabsf>
 801105e:	f000 f973 	bl	8011348 <atanf>
 8011062:	eef0 7a40 	vmov.f32	s15, s0
 8011066:	2c01      	cmp	r4, #1
 8011068:	d012      	beq.n	8011090 <__ieee754_atan2f+0xe8>
 801106a:	2c02      	cmp	r4, #2
 801106c:	d017      	beq.n	801109e <__ieee754_atan2f+0xf6>
 801106e:	2c00      	cmp	r4, #0
 8011070:	d0ad      	beq.n	8010fce <__ieee754_atan2f+0x26>
 8011072:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80110d8 <__ieee754_atan2f+0x130>
 8011076:	ee77 7a87 	vadd.f32	s15, s15, s14
 801107a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80110dc <__ieee754_atan2f+0x134>
 801107e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011082:	e7a4      	b.n	8010fce <__ieee754_atan2f+0x26>
 8011084:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80110cc <__ieee754_atan2f+0x124>
 8011088:	e7ed      	b.n	8011066 <__ieee754_atan2f+0xbe>
 801108a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80110e0 <__ieee754_atan2f+0x138>
 801108e:	e7ea      	b.n	8011066 <__ieee754_atan2f+0xbe>
 8011090:	ee17 3a90 	vmov	r3, s15
 8011094:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011098:	ee07 3a90 	vmov	s15, r3
 801109c:	e797      	b.n	8010fce <__ieee754_atan2f+0x26>
 801109e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80110d8 <__ieee754_atan2f+0x130>
 80110a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80110a6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80110dc <__ieee754_atan2f+0x134>
 80110aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110ae:	e78e      	b.n	8010fce <__ieee754_atan2f+0x26>
 80110b0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80110dc <__ieee754_atan2f+0x134>
 80110b4:	e78b      	b.n	8010fce <__ieee754_atan2f+0x26>
 80110b6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80110e4 <__ieee754_atan2f+0x13c>
 80110ba:	e788      	b.n	8010fce <__ieee754_atan2f+0x26>
 80110bc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80110e0 <__ieee754_atan2f+0x138>
 80110c0:	e785      	b.n	8010fce <__ieee754_atan2f+0x26>
 80110c2:	bf00      	nop
 80110c4:	c0490fdb 	.word	0xc0490fdb
 80110c8:	bfc90fdb 	.word	0xbfc90fdb
 80110cc:	3fc90fdb 	.word	0x3fc90fdb
 80110d0:	0801224c 	.word	0x0801224c
 80110d4:	08012240 	.word	0x08012240
 80110d8:	33bbbd2e 	.word	0x33bbbd2e
 80110dc:	40490fdb 	.word	0x40490fdb
 80110e0:	00000000 	.word	0x00000000
 80110e4:	3f490fdb 	.word	0x3f490fdb

080110e8 <__ieee754_rem_pio2f>:
 80110e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ea:	ee10 6a10 	vmov	r6, s0
 80110ee:	4b88      	ldr	r3, [pc, #544]	@ (8011310 <__ieee754_rem_pio2f+0x228>)
 80110f0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80110f4:	429d      	cmp	r5, r3
 80110f6:	b087      	sub	sp, #28
 80110f8:	4604      	mov	r4, r0
 80110fa:	d805      	bhi.n	8011108 <__ieee754_rem_pio2f+0x20>
 80110fc:	2300      	movs	r3, #0
 80110fe:	ed80 0a00 	vstr	s0, [r0]
 8011102:	6043      	str	r3, [r0, #4]
 8011104:	2000      	movs	r0, #0
 8011106:	e022      	b.n	801114e <__ieee754_rem_pio2f+0x66>
 8011108:	4b82      	ldr	r3, [pc, #520]	@ (8011314 <__ieee754_rem_pio2f+0x22c>)
 801110a:	429d      	cmp	r5, r3
 801110c:	d83a      	bhi.n	8011184 <__ieee754_rem_pio2f+0x9c>
 801110e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011112:	2e00      	cmp	r6, #0
 8011114:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011318 <__ieee754_rem_pio2f+0x230>
 8011118:	4a80      	ldr	r2, [pc, #512]	@ (801131c <__ieee754_rem_pio2f+0x234>)
 801111a:	f023 030f 	bic.w	r3, r3, #15
 801111e:	dd18      	ble.n	8011152 <__ieee754_rem_pio2f+0x6a>
 8011120:	4293      	cmp	r3, r2
 8011122:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011126:	bf09      	itett	eq
 8011128:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011320 <__ieee754_rem_pio2f+0x238>
 801112c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011324 <__ieee754_rem_pio2f+0x23c>
 8011130:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011328 <__ieee754_rem_pio2f+0x240>
 8011134:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011138:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801113c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011140:	ed80 7a00 	vstr	s14, [r0]
 8011144:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011148:	edc0 7a01 	vstr	s15, [r0, #4]
 801114c:	2001      	movs	r0, #1
 801114e:	b007      	add	sp, #28
 8011150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011152:	4293      	cmp	r3, r2
 8011154:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011158:	bf09      	itett	eq
 801115a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011320 <__ieee754_rem_pio2f+0x238>
 801115e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011324 <__ieee754_rem_pio2f+0x23c>
 8011162:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011328 <__ieee754_rem_pio2f+0x240>
 8011166:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801116a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801116e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011172:	ed80 7a00 	vstr	s14, [r0]
 8011176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801117a:	edc0 7a01 	vstr	s15, [r0, #4]
 801117e:	f04f 30ff 	mov.w	r0, #4294967295
 8011182:	e7e4      	b.n	801114e <__ieee754_rem_pio2f+0x66>
 8011184:	4b69      	ldr	r3, [pc, #420]	@ (801132c <__ieee754_rem_pio2f+0x244>)
 8011186:	429d      	cmp	r5, r3
 8011188:	d873      	bhi.n	8011272 <__ieee754_rem_pio2f+0x18a>
 801118a:	f7fe f999 	bl	800f4c0 <fabsf>
 801118e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011330 <__ieee754_rem_pio2f+0x248>
 8011192:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011196:	eee0 7a07 	vfma.f32	s15, s0, s14
 801119a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801119e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80111a2:	ee17 0a90 	vmov	r0, s15
 80111a6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011318 <__ieee754_rem_pio2f+0x230>
 80111aa:	eea7 0a67 	vfms.f32	s0, s14, s15
 80111ae:	281f      	cmp	r0, #31
 80111b0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011324 <__ieee754_rem_pio2f+0x23c>
 80111b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111b8:	eeb1 6a47 	vneg.f32	s12, s14
 80111bc:	ee70 6a67 	vsub.f32	s13, s0, s15
 80111c0:	ee16 1a90 	vmov	r1, s13
 80111c4:	dc09      	bgt.n	80111da <__ieee754_rem_pio2f+0xf2>
 80111c6:	4a5b      	ldr	r2, [pc, #364]	@ (8011334 <__ieee754_rem_pio2f+0x24c>)
 80111c8:	1e47      	subs	r7, r0, #1
 80111ca:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80111ce:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80111d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80111d6:	4293      	cmp	r3, r2
 80111d8:	d107      	bne.n	80111ea <__ieee754_rem_pio2f+0x102>
 80111da:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80111de:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80111e2:	2a08      	cmp	r2, #8
 80111e4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80111e8:	dc14      	bgt.n	8011214 <__ieee754_rem_pio2f+0x12c>
 80111ea:	6021      	str	r1, [r4, #0]
 80111ec:	ed94 7a00 	vldr	s14, [r4]
 80111f0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80111f4:	2e00      	cmp	r6, #0
 80111f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80111fa:	ed84 0a01 	vstr	s0, [r4, #4]
 80111fe:	daa6      	bge.n	801114e <__ieee754_rem_pio2f+0x66>
 8011200:	eeb1 7a47 	vneg.f32	s14, s14
 8011204:	eeb1 0a40 	vneg.f32	s0, s0
 8011208:	ed84 7a00 	vstr	s14, [r4]
 801120c:	ed84 0a01 	vstr	s0, [r4, #4]
 8011210:	4240      	negs	r0, r0
 8011212:	e79c      	b.n	801114e <__ieee754_rem_pio2f+0x66>
 8011214:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011320 <__ieee754_rem_pio2f+0x238>
 8011218:	eef0 6a40 	vmov.f32	s13, s0
 801121c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011220:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011224:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011228:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011328 <__ieee754_rem_pio2f+0x240>
 801122c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011230:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011234:	ee15 2a90 	vmov	r2, s11
 8011238:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801123c:	1a5b      	subs	r3, r3, r1
 801123e:	2b19      	cmp	r3, #25
 8011240:	dc04      	bgt.n	801124c <__ieee754_rem_pio2f+0x164>
 8011242:	edc4 5a00 	vstr	s11, [r4]
 8011246:	eeb0 0a66 	vmov.f32	s0, s13
 801124a:	e7cf      	b.n	80111ec <__ieee754_rem_pio2f+0x104>
 801124c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011338 <__ieee754_rem_pio2f+0x250>
 8011250:	eeb0 0a66 	vmov.f32	s0, s13
 8011254:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011258:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801125c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801133c <__ieee754_rem_pio2f+0x254>
 8011260:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011264:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011268:	ee30 7a67 	vsub.f32	s14, s0, s15
 801126c:	ed84 7a00 	vstr	s14, [r4]
 8011270:	e7bc      	b.n	80111ec <__ieee754_rem_pio2f+0x104>
 8011272:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8011276:	d306      	bcc.n	8011286 <__ieee754_rem_pio2f+0x19e>
 8011278:	ee70 7a40 	vsub.f32	s15, s0, s0
 801127c:	edc0 7a01 	vstr	s15, [r0, #4]
 8011280:	edc0 7a00 	vstr	s15, [r0]
 8011284:	e73e      	b.n	8011104 <__ieee754_rem_pio2f+0x1c>
 8011286:	15ea      	asrs	r2, r5, #23
 8011288:	3a86      	subs	r2, #134	@ 0x86
 801128a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801128e:	ee07 3a90 	vmov	s15, r3
 8011292:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011296:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011340 <__ieee754_rem_pio2f+0x258>
 801129a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801129e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80112a2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80112a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80112aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80112ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80112b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80112b6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80112ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80112be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80112c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c6:	edcd 7a05 	vstr	s15, [sp, #20]
 80112ca:	d11e      	bne.n	801130a <__ieee754_rem_pio2f+0x222>
 80112cc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80112d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d4:	bf0c      	ite	eq
 80112d6:	2301      	moveq	r3, #1
 80112d8:	2302      	movne	r3, #2
 80112da:	491a      	ldr	r1, [pc, #104]	@ (8011344 <__ieee754_rem_pio2f+0x25c>)
 80112dc:	9101      	str	r1, [sp, #4]
 80112de:	2102      	movs	r1, #2
 80112e0:	9100      	str	r1, [sp, #0]
 80112e2:	a803      	add	r0, sp, #12
 80112e4:	4621      	mov	r1, r4
 80112e6:	f000 f9bb 	bl	8011660 <__kernel_rem_pio2f>
 80112ea:	2e00      	cmp	r6, #0
 80112ec:	f6bf af2f 	bge.w	801114e <__ieee754_rem_pio2f+0x66>
 80112f0:	edd4 7a00 	vldr	s15, [r4]
 80112f4:	eef1 7a67 	vneg.f32	s15, s15
 80112f8:	edc4 7a00 	vstr	s15, [r4]
 80112fc:	edd4 7a01 	vldr	s15, [r4, #4]
 8011300:	eef1 7a67 	vneg.f32	s15, s15
 8011304:	edc4 7a01 	vstr	s15, [r4, #4]
 8011308:	e782      	b.n	8011210 <__ieee754_rem_pio2f+0x128>
 801130a:	2303      	movs	r3, #3
 801130c:	e7e5      	b.n	80112da <__ieee754_rem_pio2f+0x1f2>
 801130e:	bf00      	nop
 8011310:	3f490fd8 	.word	0x3f490fd8
 8011314:	4016cbe3 	.word	0x4016cbe3
 8011318:	3fc90f80 	.word	0x3fc90f80
 801131c:	3fc90fd0 	.word	0x3fc90fd0
 8011320:	37354400 	.word	0x37354400
 8011324:	37354443 	.word	0x37354443
 8011328:	2e85a308 	.word	0x2e85a308
 801132c:	43490f80 	.word	0x43490f80
 8011330:	3f22f984 	.word	0x3f22f984
 8011334:	08012258 	.word	0x08012258
 8011338:	2e85a300 	.word	0x2e85a300
 801133c:	248d3132 	.word	0x248d3132
 8011340:	43800000 	.word	0x43800000
 8011344:	080122d8 	.word	0x080122d8

08011348 <atanf>:
 8011348:	b538      	push	{r3, r4, r5, lr}
 801134a:	ee10 5a10 	vmov	r5, s0
 801134e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011352:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8011356:	eef0 7a40 	vmov.f32	s15, s0
 801135a:	d310      	bcc.n	801137e <atanf+0x36>
 801135c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8011360:	d904      	bls.n	801136c <atanf+0x24>
 8011362:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011366:	eeb0 0a67 	vmov.f32	s0, s15
 801136a:	bd38      	pop	{r3, r4, r5, pc}
 801136c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80114a4 <atanf+0x15c>
 8011370:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80114a8 <atanf+0x160>
 8011374:	2d00      	cmp	r5, #0
 8011376:	bfc8      	it	gt
 8011378:	eef0 7a47 	vmovgt.f32	s15, s14
 801137c:	e7f3      	b.n	8011366 <atanf+0x1e>
 801137e:	4b4b      	ldr	r3, [pc, #300]	@ (80114ac <atanf+0x164>)
 8011380:	429c      	cmp	r4, r3
 8011382:	d810      	bhi.n	80113a6 <atanf+0x5e>
 8011384:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011388:	d20a      	bcs.n	80113a0 <atanf+0x58>
 801138a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80114b0 <atanf+0x168>
 801138e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011396:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801139e:	dce2      	bgt.n	8011366 <atanf+0x1e>
 80113a0:	f04f 33ff 	mov.w	r3, #4294967295
 80113a4:	e013      	b.n	80113ce <atanf+0x86>
 80113a6:	f7fe f88b 	bl	800f4c0 <fabsf>
 80113aa:	4b42      	ldr	r3, [pc, #264]	@ (80114b4 <atanf+0x16c>)
 80113ac:	429c      	cmp	r4, r3
 80113ae:	d84f      	bhi.n	8011450 <atanf+0x108>
 80113b0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80113b4:	429c      	cmp	r4, r3
 80113b6:	d841      	bhi.n	801143c <atanf+0xf4>
 80113b8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80113bc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80113c0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80113c4:	2300      	movs	r3, #0
 80113c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80113ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80113ce:	1c5a      	adds	r2, r3, #1
 80113d0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80113d4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80114b8 <atanf+0x170>
 80113d8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80114bc <atanf+0x174>
 80113dc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80114c0 <atanf+0x178>
 80113e0:	ee66 6a06 	vmul.f32	s13, s12, s12
 80113e4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80113e8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80114c4 <atanf+0x17c>
 80113ec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80113f0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80114c8 <atanf+0x180>
 80113f4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80113f8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80114cc <atanf+0x184>
 80113fc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011400:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80114d0 <atanf+0x188>
 8011404:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011408:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80114d4 <atanf+0x18c>
 801140c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011410:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80114d8 <atanf+0x190>
 8011414:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011418:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80114dc <atanf+0x194>
 801141c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011420:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80114e0 <atanf+0x198>
 8011424:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011428:	ee27 7a26 	vmul.f32	s14, s14, s13
 801142c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011430:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011434:	d121      	bne.n	801147a <atanf+0x132>
 8011436:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801143a:	e794      	b.n	8011366 <atanf+0x1e>
 801143c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011440:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011444:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011448:	2301      	movs	r3, #1
 801144a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801144e:	e7be      	b.n	80113ce <atanf+0x86>
 8011450:	4b24      	ldr	r3, [pc, #144]	@ (80114e4 <atanf+0x19c>)
 8011452:	429c      	cmp	r4, r3
 8011454:	d80b      	bhi.n	801146e <atanf+0x126>
 8011456:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801145a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801145e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011462:	2302      	movs	r3, #2
 8011464:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801146c:	e7af      	b.n	80113ce <atanf+0x86>
 801146e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011472:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011476:	2303      	movs	r3, #3
 8011478:	e7a9      	b.n	80113ce <atanf+0x86>
 801147a:	4a1b      	ldr	r2, [pc, #108]	@ (80114e8 <atanf+0x1a0>)
 801147c:	491b      	ldr	r1, [pc, #108]	@ (80114ec <atanf+0x1a4>)
 801147e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011482:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011486:	edd3 6a00 	vldr	s13, [r3]
 801148a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801148e:	2d00      	cmp	r5, #0
 8011490:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011494:	edd2 7a00 	vldr	s15, [r2]
 8011498:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801149c:	bfb8      	it	lt
 801149e:	eef1 7a67 	vneglt.f32	s15, s15
 80114a2:	e760      	b.n	8011366 <atanf+0x1e>
 80114a4:	bfc90fdb 	.word	0xbfc90fdb
 80114a8:	3fc90fdb 	.word	0x3fc90fdb
 80114ac:	3edfffff 	.word	0x3edfffff
 80114b0:	7149f2ca 	.word	0x7149f2ca
 80114b4:	3f97ffff 	.word	0x3f97ffff
 80114b8:	3c8569d7 	.word	0x3c8569d7
 80114bc:	3d4bda59 	.word	0x3d4bda59
 80114c0:	bd6ef16b 	.word	0xbd6ef16b
 80114c4:	3d886b35 	.word	0x3d886b35
 80114c8:	3dba2e6e 	.word	0x3dba2e6e
 80114cc:	3e124925 	.word	0x3e124925
 80114d0:	3eaaaaab 	.word	0x3eaaaaab
 80114d4:	bd15a221 	.word	0xbd15a221
 80114d8:	bd9d8795 	.word	0xbd9d8795
 80114dc:	bde38e38 	.word	0xbde38e38
 80114e0:	be4ccccd 	.word	0xbe4ccccd
 80114e4:	401bffff 	.word	0x401bffff
 80114e8:	08012600 	.word	0x08012600
 80114ec:	080125f0 	.word	0x080125f0

080114f0 <scalbn>:
 80114f0:	b570      	push	{r4, r5, r6, lr}
 80114f2:	ec55 4b10 	vmov	r4, r5, d0
 80114f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80114fa:	4606      	mov	r6, r0
 80114fc:	462b      	mov	r3, r5
 80114fe:	b991      	cbnz	r1, 8011526 <scalbn+0x36>
 8011500:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011504:	4323      	orrs	r3, r4
 8011506:	d03b      	beq.n	8011580 <scalbn+0x90>
 8011508:	4b33      	ldr	r3, [pc, #204]	@ (80115d8 <scalbn+0xe8>)
 801150a:	4620      	mov	r0, r4
 801150c:	4629      	mov	r1, r5
 801150e:	2200      	movs	r2, #0
 8011510:	f7ef f87a 	bl	8000608 <__aeabi_dmul>
 8011514:	4b31      	ldr	r3, [pc, #196]	@ (80115dc <scalbn+0xec>)
 8011516:	429e      	cmp	r6, r3
 8011518:	4604      	mov	r4, r0
 801151a:	460d      	mov	r5, r1
 801151c:	da0f      	bge.n	801153e <scalbn+0x4e>
 801151e:	a326      	add	r3, pc, #152	@ (adr r3, 80115b8 <scalbn+0xc8>)
 8011520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011524:	e01e      	b.n	8011564 <scalbn+0x74>
 8011526:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801152a:	4291      	cmp	r1, r2
 801152c:	d10b      	bne.n	8011546 <scalbn+0x56>
 801152e:	4622      	mov	r2, r4
 8011530:	4620      	mov	r0, r4
 8011532:	4629      	mov	r1, r5
 8011534:	f7ee feb2 	bl	800029c <__adddf3>
 8011538:	4604      	mov	r4, r0
 801153a:	460d      	mov	r5, r1
 801153c:	e020      	b.n	8011580 <scalbn+0x90>
 801153e:	460b      	mov	r3, r1
 8011540:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011544:	3936      	subs	r1, #54	@ 0x36
 8011546:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801154a:	4296      	cmp	r6, r2
 801154c:	dd0d      	ble.n	801156a <scalbn+0x7a>
 801154e:	2d00      	cmp	r5, #0
 8011550:	a11b      	add	r1, pc, #108	@ (adr r1, 80115c0 <scalbn+0xd0>)
 8011552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011556:	da02      	bge.n	801155e <scalbn+0x6e>
 8011558:	a11b      	add	r1, pc, #108	@ (adr r1, 80115c8 <scalbn+0xd8>)
 801155a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801155e:	a318      	add	r3, pc, #96	@ (adr r3, 80115c0 <scalbn+0xd0>)
 8011560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011564:	f7ef f850 	bl	8000608 <__aeabi_dmul>
 8011568:	e7e6      	b.n	8011538 <scalbn+0x48>
 801156a:	1872      	adds	r2, r6, r1
 801156c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011570:	428a      	cmp	r2, r1
 8011572:	dcec      	bgt.n	801154e <scalbn+0x5e>
 8011574:	2a00      	cmp	r2, #0
 8011576:	dd06      	ble.n	8011586 <scalbn+0x96>
 8011578:	f36f 531e 	bfc	r3, #20, #11
 801157c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011580:	ec45 4b10 	vmov	d0, r4, r5
 8011584:	bd70      	pop	{r4, r5, r6, pc}
 8011586:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801158a:	da08      	bge.n	801159e <scalbn+0xae>
 801158c:	2d00      	cmp	r5, #0
 801158e:	a10a      	add	r1, pc, #40	@ (adr r1, 80115b8 <scalbn+0xc8>)
 8011590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011594:	dac3      	bge.n	801151e <scalbn+0x2e>
 8011596:	a10e      	add	r1, pc, #56	@ (adr r1, 80115d0 <scalbn+0xe0>)
 8011598:	e9d1 0100 	ldrd	r0, r1, [r1]
 801159c:	e7bf      	b.n	801151e <scalbn+0x2e>
 801159e:	3236      	adds	r2, #54	@ 0x36
 80115a0:	f36f 531e 	bfc	r3, #20, #11
 80115a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80115a8:	4620      	mov	r0, r4
 80115aa:	4b0d      	ldr	r3, [pc, #52]	@ (80115e0 <scalbn+0xf0>)
 80115ac:	4629      	mov	r1, r5
 80115ae:	2200      	movs	r2, #0
 80115b0:	e7d8      	b.n	8011564 <scalbn+0x74>
 80115b2:	bf00      	nop
 80115b4:	f3af 8000 	nop.w
 80115b8:	c2f8f359 	.word	0xc2f8f359
 80115bc:	01a56e1f 	.word	0x01a56e1f
 80115c0:	8800759c 	.word	0x8800759c
 80115c4:	7e37e43c 	.word	0x7e37e43c
 80115c8:	8800759c 	.word	0x8800759c
 80115cc:	fe37e43c 	.word	0xfe37e43c
 80115d0:	c2f8f359 	.word	0xc2f8f359
 80115d4:	81a56e1f 	.word	0x81a56e1f
 80115d8:	43500000 	.word	0x43500000
 80115dc:	ffff3cb0 	.word	0xffff3cb0
 80115e0:	3c900000 	.word	0x3c900000

080115e4 <with_errno>:
 80115e4:	b510      	push	{r4, lr}
 80115e6:	ed2d 8b02 	vpush	{d8}
 80115ea:	eeb0 8a40 	vmov.f32	s16, s0
 80115ee:	eef0 8a60 	vmov.f32	s17, s1
 80115f2:	4604      	mov	r4, r0
 80115f4:	f7fa fa70 	bl	800bad8 <__errno>
 80115f8:	eeb0 0a48 	vmov.f32	s0, s16
 80115fc:	eef0 0a68 	vmov.f32	s1, s17
 8011600:	ecbd 8b02 	vpop	{d8}
 8011604:	6004      	str	r4, [r0, #0]
 8011606:	bd10      	pop	{r4, pc}

08011608 <xflow>:
 8011608:	4603      	mov	r3, r0
 801160a:	b507      	push	{r0, r1, r2, lr}
 801160c:	ec51 0b10 	vmov	r0, r1, d0
 8011610:	b183      	cbz	r3, 8011634 <xflow+0x2c>
 8011612:	4602      	mov	r2, r0
 8011614:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011618:	e9cd 2300 	strd	r2, r3, [sp]
 801161c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011620:	f7ee fff2 	bl	8000608 <__aeabi_dmul>
 8011624:	ec41 0b10 	vmov	d0, r0, r1
 8011628:	2022      	movs	r0, #34	@ 0x22
 801162a:	b003      	add	sp, #12
 801162c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011630:	f7ff bfd8 	b.w	80115e4 <with_errno>
 8011634:	4602      	mov	r2, r0
 8011636:	460b      	mov	r3, r1
 8011638:	e7ee      	b.n	8011618 <xflow+0x10>
 801163a:	0000      	movs	r0, r0
 801163c:	0000      	movs	r0, r0
	...

08011640 <__math_uflow>:
 8011640:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011648 <__math_uflow+0x8>
 8011644:	f7ff bfe0 	b.w	8011608 <xflow>
 8011648:	00000000 	.word	0x00000000
 801164c:	10000000 	.word	0x10000000

08011650 <__math_oflow>:
 8011650:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011658 <__math_oflow+0x8>
 8011654:	f7ff bfd8 	b.w	8011608 <xflow>
 8011658:	00000000 	.word	0x00000000
 801165c:	70000000 	.word	0x70000000

08011660 <__kernel_rem_pio2f>:
 8011660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011664:	ed2d 8b04 	vpush	{d8-d9}
 8011668:	b0d9      	sub	sp, #356	@ 0x164
 801166a:	4690      	mov	r8, r2
 801166c:	9001      	str	r0, [sp, #4]
 801166e:	4ab6      	ldr	r2, [pc, #728]	@ (8011948 <__kernel_rem_pio2f+0x2e8>)
 8011670:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8011672:	f118 0f04 	cmn.w	r8, #4
 8011676:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801167a:	460f      	mov	r7, r1
 801167c:	f103 3bff 	add.w	fp, r3, #4294967295
 8011680:	db26      	blt.n	80116d0 <__kernel_rem_pio2f+0x70>
 8011682:	f1b8 0203 	subs.w	r2, r8, #3
 8011686:	bf48      	it	mi
 8011688:	f108 0204 	addmi.w	r2, r8, #4
 801168c:	10d2      	asrs	r2, r2, #3
 801168e:	1c55      	adds	r5, r2, #1
 8011690:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011692:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8011958 <__kernel_rem_pio2f+0x2f8>
 8011696:	00e8      	lsls	r0, r5, #3
 8011698:	eba2 060b 	sub.w	r6, r2, fp
 801169c:	9002      	str	r0, [sp, #8]
 801169e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80116a2:	eb0a 0c0b 	add.w	ip, sl, fp
 80116a6:	ac1c      	add	r4, sp, #112	@ 0x70
 80116a8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80116ac:	2000      	movs	r0, #0
 80116ae:	4560      	cmp	r0, ip
 80116b0:	dd10      	ble.n	80116d4 <__kernel_rem_pio2f+0x74>
 80116b2:	a91c      	add	r1, sp, #112	@ 0x70
 80116b4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80116b8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80116bc:	2600      	movs	r6, #0
 80116be:	4556      	cmp	r6, sl
 80116c0:	dc24      	bgt.n	801170c <__kernel_rem_pio2f+0xac>
 80116c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80116c6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8011958 <__kernel_rem_pio2f+0x2f8>
 80116ca:	4684      	mov	ip, r0
 80116cc:	2400      	movs	r4, #0
 80116ce:	e016      	b.n	80116fe <__kernel_rem_pio2f+0x9e>
 80116d0:	2200      	movs	r2, #0
 80116d2:	e7dc      	b.n	801168e <__kernel_rem_pio2f+0x2e>
 80116d4:	42c6      	cmn	r6, r0
 80116d6:	bf5d      	ittte	pl
 80116d8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80116dc:	ee07 1a90 	vmovpl	s15, r1
 80116e0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80116e4:	eef0 7a47 	vmovmi.f32	s15, s14
 80116e8:	ece4 7a01 	vstmia	r4!, {s15}
 80116ec:	3001      	adds	r0, #1
 80116ee:	e7de      	b.n	80116ae <__kernel_rem_pio2f+0x4e>
 80116f0:	ecfe 6a01 	vldmia	lr!, {s13}
 80116f4:	ed3c 7a01 	vldmdb	ip!, {s14}
 80116f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80116fc:	3401      	adds	r4, #1
 80116fe:	455c      	cmp	r4, fp
 8011700:	ddf6      	ble.n	80116f0 <__kernel_rem_pio2f+0x90>
 8011702:	ece9 7a01 	vstmia	r9!, {s15}
 8011706:	3601      	adds	r6, #1
 8011708:	3004      	adds	r0, #4
 801170a:	e7d8      	b.n	80116be <__kernel_rem_pio2f+0x5e>
 801170c:	a908      	add	r1, sp, #32
 801170e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011712:	9104      	str	r1, [sp, #16]
 8011714:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011716:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8011954 <__kernel_rem_pio2f+0x2f4>
 801171a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8011950 <__kernel_rem_pio2f+0x2f0>
 801171e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011722:	9203      	str	r2, [sp, #12]
 8011724:	4654      	mov	r4, sl
 8011726:	00a2      	lsls	r2, r4, #2
 8011728:	9205      	str	r2, [sp, #20]
 801172a:	aa58      	add	r2, sp, #352	@ 0x160
 801172c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011730:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8011734:	a944      	add	r1, sp, #272	@ 0x110
 8011736:	aa08      	add	r2, sp, #32
 8011738:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801173c:	4694      	mov	ip, r2
 801173e:	4626      	mov	r6, r4
 8011740:	2e00      	cmp	r6, #0
 8011742:	dc4c      	bgt.n	80117de <__kernel_rem_pio2f+0x17e>
 8011744:	4628      	mov	r0, r5
 8011746:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801174a:	f000 f9f1 	bl	8011b30 <scalbnf>
 801174e:	eeb0 8a40 	vmov.f32	s16, s0
 8011752:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8011756:	ee28 0a00 	vmul.f32	s0, s16, s0
 801175a:	f000 fa4f 	bl	8011bfc <floorf>
 801175e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8011762:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011766:	2d00      	cmp	r5, #0
 8011768:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801176c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011770:	ee17 9a90 	vmov	r9, s15
 8011774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011778:	ee38 8a67 	vsub.f32	s16, s16, s15
 801177c:	dd41      	ble.n	8011802 <__kernel_rem_pio2f+0x1a2>
 801177e:	f104 3cff 	add.w	ip, r4, #4294967295
 8011782:	a908      	add	r1, sp, #32
 8011784:	f1c5 0e08 	rsb	lr, r5, #8
 8011788:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801178c:	fa46 f00e 	asr.w	r0, r6, lr
 8011790:	4481      	add	r9, r0
 8011792:	fa00 f00e 	lsl.w	r0, r0, lr
 8011796:	1a36      	subs	r6, r6, r0
 8011798:	f1c5 0007 	rsb	r0, r5, #7
 801179c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80117a0:	4106      	asrs	r6, r0
 80117a2:	2e00      	cmp	r6, #0
 80117a4:	dd3c      	ble.n	8011820 <__kernel_rem_pio2f+0x1c0>
 80117a6:	f04f 0e00 	mov.w	lr, #0
 80117aa:	f109 0901 	add.w	r9, r9, #1
 80117ae:	4670      	mov	r0, lr
 80117b0:	4574      	cmp	r4, lr
 80117b2:	dc68      	bgt.n	8011886 <__kernel_rem_pio2f+0x226>
 80117b4:	2d00      	cmp	r5, #0
 80117b6:	dd03      	ble.n	80117c0 <__kernel_rem_pio2f+0x160>
 80117b8:	2d01      	cmp	r5, #1
 80117ba:	d074      	beq.n	80118a6 <__kernel_rem_pio2f+0x246>
 80117bc:	2d02      	cmp	r5, #2
 80117be:	d07d      	beq.n	80118bc <__kernel_rem_pio2f+0x25c>
 80117c0:	2e02      	cmp	r6, #2
 80117c2:	d12d      	bne.n	8011820 <__kernel_rem_pio2f+0x1c0>
 80117c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80117c8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80117cc:	b340      	cbz	r0, 8011820 <__kernel_rem_pio2f+0x1c0>
 80117ce:	4628      	mov	r0, r5
 80117d0:	9306      	str	r3, [sp, #24]
 80117d2:	f000 f9ad 	bl	8011b30 <scalbnf>
 80117d6:	9b06      	ldr	r3, [sp, #24]
 80117d8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80117dc:	e020      	b.n	8011820 <__kernel_rem_pio2f+0x1c0>
 80117de:	ee60 7a28 	vmul.f32	s15, s0, s17
 80117e2:	3e01      	subs	r6, #1
 80117e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117ec:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80117f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80117f4:	ecac 0a01 	vstmia	ip!, {s0}
 80117f8:	ed30 0a01 	vldmdb	r0!, {s0}
 80117fc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011800:	e79e      	b.n	8011740 <__kernel_rem_pio2f+0xe0>
 8011802:	d105      	bne.n	8011810 <__kernel_rem_pio2f+0x1b0>
 8011804:	1e60      	subs	r0, r4, #1
 8011806:	a908      	add	r1, sp, #32
 8011808:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801180c:	11f6      	asrs	r6, r6, #7
 801180e:	e7c8      	b.n	80117a2 <__kernel_rem_pio2f+0x142>
 8011810:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011814:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801181c:	da31      	bge.n	8011882 <__kernel_rem_pio2f+0x222>
 801181e:	2600      	movs	r6, #0
 8011820:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011828:	f040 8098 	bne.w	801195c <__kernel_rem_pio2f+0x2fc>
 801182c:	1e60      	subs	r0, r4, #1
 801182e:	2200      	movs	r2, #0
 8011830:	4550      	cmp	r0, sl
 8011832:	da4b      	bge.n	80118cc <__kernel_rem_pio2f+0x26c>
 8011834:	2a00      	cmp	r2, #0
 8011836:	d065      	beq.n	8011904 <__kernel_rem_pio2f+0x2a4>
 8011838:	3c01      	subs	r4, #1
 801183a:	ab08      	add	r3, sp, #32
 801183c:	3d08      	subs	r5, #8
 801183e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d0f8      	beq.n	8011838 <__kernel_rem_pio2f+0x1d8>
 8011846:	4628      	mov	r0, r5
 8011848:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801184c:	f000 f970 	bl	8011b30 <scalbnf>
 8011850:	1c63      	adds	r3, r4, #1
 8011852:	aa44      	add	r2, sp, #272	@ 0x110
 8011854:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8011954 <__kernel_rem_pio2f+0x2f4>
 8011858:	0099      	lsls	r1, r3, #2
 801185a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801185e:	4623      	mov	r3, r4
 8011860:	2b00      	cmp	r3, #0
 8011862:	f280 80a9 	bge.w	80119b8 <__kernel_rem_pio2f+0x358>
 8011866:	4623      	mov	r3, r4
 8011868:	2b00      	cmp	r3, #0
 801186a:	f2c0 80c7 	blt.w	80119fc <__kernel_rem_pio2f+0x39c>
 801186e:	aa44      	add	r2, sp, #272	@ 0x110
 8011870:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8011874:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801194c <__kernel_rem_pio2f+0x2ec>
 8011878:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8011958 <__kernel_rem_pio2f+0x2f8>
 801187c:	2000      	movs	r0, #0
 801187e:	1ae2      	subs	r2, r4, r3
 8011880:	e0b1      	b.n	80119e6 <__kernel_rem_pio2f+0x386>
 8011882:	2602      	movs	r6, #2
 8011884:	e78f      	b.n	80117a6 <__kernel_rem_pio2f+0x146>
 8011886:	f852 1b04 	ldr.w	r1, [r2], #4
 801188a:	b948      	cbnz	r0, 80118a0 <__kernel_rem_pio2f+0x240>
 801188c:	b121      	cbz	r1, 8011898 <__kernel_rem_pio2f+0x238>
 801188e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8011892:	f842 1c04 	str.w	r1, [r2, #-4]
 8011896:	2101      	movs	r1, #1
 8011898:	f10e 0e01 	add.w	lr, lr, #1
 801189c:	4608      	mov	r0, r1
 801189e:	e787      	b.n	80117b0 <__kernel_rem_pio2f+0x150>
 80118a0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80118a4:	e7f5      	b.n	8011892 <__kernel_rem_pio2f+0x232>
 80118a6:	f104 3cff 	add.w	ip, r4, #4294967295
 80118aa:	aa08      	add	r2, sp, #32
 80118ac:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80118b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80118b4:	a908      	add	r1, sp, #32
 80118b6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80118ba:	e781      	b.n	80117c0 <__kernel_rem_pio2f+0x160>
 80118bc:	f104 3cff 	add.w	ip, r4, #4294967295
 80118c0:	aa08      	add	r2, sp, #32
 80118c2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80118c6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80118ca:	e7f3      	b.n	80118b4 <__kernel_rem_pio2f+0x254>
 80118cc:	a908      	add	r1, sp, #32
 80118ce:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80118d2:	3801      	subs	r0, #1
 80118d4:	430a      	orrs	r2, r1
 80118d6:	e7ab      	b.n	8011830 <__kernel_rem_pio2f+0x1d0>
 80118d8:	3201      	adds	r2, #1
 80118da:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80118de:	2e00      	cmp	r6, #0
 80118e0:	d0fa      	beq.n	80118d8 <__kernel_rem_pio2f+0x278>
 80118e2:	9905      	ldr	r1, [sp, #20]
 80118e4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80118e8:	eb0d 0001 	add.w	r0, sp, r1
 80118ec:	18e6      	adds	r6, r4, r3
 80118ee:	a91c      	add	r1, sp, #112	@ 0x70
 80118f0:	f104 0c01 	add.w	ip, r4, #1
 80118f4:	384c      	subs	r0, #76	@ 0x4c
 80118f6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80118fa:	4422      	add	r2, r4
 80118fc:	4562      	cmp	r2, ip
 80118fe:	da04      	bge.n	801190a <__kernel_rem_pio2f+0x2aa>
 8011900:	4614      	mov	r4, r2
 8011902:	e710      	b.n	8011726 <__kernel_rem_pio2f+0xc6>
 8011904:	9804      	ldr	r0, [sp, #16]
 8011906:	2201      	movs	r2, #1
 8011908:	e7e7      	b.n	80118da <__kernel_rem_pio2f+0x27a>
 801190a:	9903      	ldr	r1, [sp, #12]
 801190c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011910:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8011914:	9105      	str	r1, [sp, #20]
 8011916:	ee07 1a90 	vmov	s15, r1
 801191a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801191e:	2400      	movs	r4, #0
 8011920:	ece6 7a01 	vstmia	r6!, {s15}
 8011924:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8011958 <__kernel_rem_pio2f+0x2f8>
 8011928:	46b1      	mov	r9, r6
 801192a:	455c      	cmp	r4, fp
 801192c:	dd04      	ble.n	8011938 <__kernel_rem_pio2f+0x2d8>
 801192e:	ece0 7a01 	vstmia	r0!, {s15}
 8011932:	f10c 0c01 	add.w	ip, ip, #1
 8011936:	e7e1      	b.n	80118fc <__kernel_rem_pio2f+0x29c>
 8011938:	ecfe 6a01 	vldmia	lr!, {s13}
 801193c:	ed39 7a01 	vldmdb	r9!, {s14}
 8011940:	3401      	adds	r4, #1
 8011942:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011946:	e7f0      	b.n	801192a <__kernel_rem_pio2f+0x2ca>
 8011948:	0801263c 	.word	0x0801263c
 801194c:	08012610 	.word	0x08012610
 8011950:	43800000 	.word	0x43800000
 8011954:	3b800000 	.word	0x3b800000
 8011958:	00000000 	.word	0x00000000
 801195c:	9b02      	ldr	r3, [sp, #8]
 801195e:	eeb0 0a48 	vmov.f32	s0, s16
 8011962:	eba3 0008 	sub.w	r0, r3, r8
 8011966:	f000 f8e3 	bl	8011b30 <scalbnf>
 801196a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8011950 <__kernel_rem_pio2f+0x2f0>
 801196e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011976:	db19      	blt.n	80119ac <__kernel_rem_pio2f+0x34c>
 8011978:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8011954 <__kernel_rem_pio2f+0x2f4>
 801197c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011980:	aa08      	add	r2, sp, #32
 8011982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011986:	3508      	adds	r5, #8
 8011988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801198c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011994:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011998:	ee10 3a10 	vmov	r3, s0
 801199c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80119a0:	ee17 3a90 	vmov	r3, s15
 80119a4:	3401      	adds	r4, #1
 80119a6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80119aa:	e74c      	b.n	8011846 <__kernel_rem_pio2f+0x1e6>
 80119ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80119b0:	aa08      	add	r2, sp, #32
 80119b2:	ee10 3a10 	vmov	r3, s0
 80119b6:	e7f6      	b.n	80119a6 <__kernel_rem_pio2f+0x346>
 80119b8:	a808      	add	r0, sp, #32
 80119ba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80119be:	9001      	str	r0, [sp, #4]
 80119c0:	ee07 0a90 	vmov	s15, r0
 80119c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119c8:	3b01      	subs	r3, #1
 80119ca:	ee67 7a80 	vmul.f32	s15, s15, s0
 80119ce:	ee20 0a07 	vmul.f32	s0, s0, s14
 80119d2:	ed62 7a01 	vstmdb	r2!, {s15}
 80119d6:	e743      	b.n	8011860 <__kernel_rem_pio2f+0x200>
 80119d8:	ecfc 6a01 	vldmia	ip!, {s13}
 80119dc:	ecb5 7a01 	vldmia	r5!, {s14}
 80119e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80119e4:	3001      	adds	r0, #1
 80119e6:	4550      	cmp	r0, sl
 80119e8:	dc01      	bgt.n	80119ee <__kernel_rem_pio2f+0x38e>
 80119ea:	4290      	cmp	r0, r2
 80119ec:	ddf4      	ble.n	80119d8 <__kernel_rem_pio2f+0x378>
 80119ee:	a858      	add	r0, sp, #352	@ 0x160
 80119f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80119f4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80119f8:	3b01      	subs	r3, #1
 80119fa:	e735      	b.n	8011868 <__kernel_rem_pio2f+0x208>
 80119fc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80119fe:	2b02      	cmp	r3, #2
 8011a00:	dc09      	bgt.n	8011a16 <__kernel_rem_pio2f+0x3b6>
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	dc27      	bgt.n	8011a56 <__kernel_rem_pio2f+0x3f6>
 8011a06:	d040      	beq.n	8011a8a <__kernel_rem_pio2f+0x42a>
 8011a08:	f009 0007 	and.w	r0, r9, #7
 8011a0c:	b059      	add	sp, #356	@ 0x164
 8011a0e:	ecbd 8b04 	vpop	{d8-d9}
 8011a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a16:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8011a18:	2b03      	cmp	r3, #3
 8011a1a:	d1f5      	bne.n	8011a08 <__kernel_rem_pio2f+0x3a8>
 8011a1c:	aa30      	add	r2, sp, #192	@ 0xc0
 8011a1e:	1f0b      	subs	r3, r1, #4
 8011a20:	4413      	add	r3, r2
 8011a22:	461a      	mov	r2, r3
 8011a24:	4620      	mov	r0, r4
 8011a26:	2800      	cmp	r0, #0
 8011a28:	dc50      	bgt.n	8011acc <__kernel_rem_pio2f+0x46c>
 8011a2a:	4622      	mov	r2, r4
 8011a2c:	2a01      	cmp	r2, #1
 8011a2e:	dc5d      	bgt.n	8011aec <__kernel_rem_pio2f+0x48c>
 8011a30:	ab30      	add	r3, sp, #192	@ 0xc0
 8011a32:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8011958 <__kernel_rem_pio2f+0x2f8>
 8011a36:	440b      	add	r3, r1
 8011a38:	2c01      	cmp	r4, #1
 8011a3a:	dc67      	bgt.n	8011b0c <__kernel_rem_pio2f+0x4ac>
 8011a3c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011a40:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8011a44:	2e00      	cmp	r6, #0
 8011a46:	d167      	bne.n	8011b18 <__kernel_rem_pio2f+0x4b8>
 8011a48:	edc7 6a00 	vstr	s13, [r7]
 8011a4c:	ed87 7a01 	vstr	s14, [r7, #4]
 8011a50:	edc7 7a02 	vstr	s15, [r7, #8]
 8011a54:	e7d8      	b.n	8011a08 <__kernel_rem_pio2f+0x3a8>
 8011a56:	ab30      	add	r3, sp, #192	@ 0xc0
 8011a58:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8011958 <__kernel_rem_pio2f+0x2f8>
 8011a5c:	440b      	add	r3, r1
 8011a5e:	4622      	mov	r2, r4
 8011a60:	2a00      	cmp	r2, #0
 8011a62:	da24      	bge.n	8011aae <__kernel_rem_pio2f+0x44e>
 8011a64:	b34e      	cbz	r6, 8011aba <__kernel_rem_pio2f+0x45a>
 8011a66:	eef1 7a47 	vneg.f32	s15, s14
 8011a6a:	edc7 7a00 	vstr	s15, [r7]
 8011a6e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8011a72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a76:	aa31      	add	r2, sp, #196	@ 0xc4
 8011a78:	2301      	movs	r3, #1
 8011a7a:	429c      	cmp	r4, r3
 8011a7c:	da20      	bge.n	8011ac0 <__kernel_rem_pio2f+0x460>
 8011a7e:	b10e      	cbz	r6, 8011a84 <__kernel_rem_pio2f+0x424>
 8011a80:	eef1 7a67 	vneg.f32	s15, s15
 8011a84:	edc7 7a01 	vstr	s15, [r7, #4]
 8011a88:	e7be      	b.n	8011a08 <__kernel_rem_pio2f+0x3a8>
 8011a8a:	ab30      	add	r3, sp, #192	@ 0xc0
 8011a8c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8011958 <__kernel_rem_pio2f+0x2f8>
 8011a90:	440b      	add	r3, r1
 8011a92:	2c00      	cmp	r4, #0
 8011a94:	da05      	bge.n	8011aa2 <__kernel_rem_pio2f+0x442>
 8011a96:	b10e      	cbz	r6, 8011a9c <__kernel_rem_pio2f+0x43c>
 8011a98:	eef1 7a67 	vneg.f32	s15, s15
 8011a9c:	edc7 7a00 	vstr	s15, [r7]
 8011aa0:	e7b2      	b.n	8011a08 <__kernel_rem_pio2f+0x3a8>
 8011aa2:	ed33 7a01 	vldmdb	r3!, {s14}
 8011aa6:	3c01      	subs	r4, #1
 8011aa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011aac:	e7f1      	b.n	8011a92 <__kernel_rem_pio2f+0x432>
 8011aae:	ed73 7a01 	vldmdb	r3!, {s15}
 8011ab2:	3a01      	subs	r2, #1
 8011ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011ab8:	e7d2      	b.n	8011a60 <__kernel_rem_pio2f+0x400>
 8011aba:	eef0 7a47 	vmov.f32	s15, s14
 8011abe:	e7d4      	b.n	8011a6a <__kernel_rem_pio2f+0x40a>
 8011ac0:	ecb2 7a01 	vldmia	r2!, {s14}
 8011ac4:	3301      	adds	r3, #1
 8011ac6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011aca:	e7d6      	b.n	8011a7a <__kernel_rem_pio2f+0x41a>
 8011acc:	ed72 7a01 	vldmdb	r2!, {s15}
 8011ad0:	edd2 6a01 	vldr	s13, [r2, #4]
 8011ad4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011ad8:	3801      	subs	r0, #1
 8011ada:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ade:	ed82 7a00 	vstr	s14, [r2]
 8011ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ae6:	edc2 7a01 	vstr	s15, [r2, #4]
 8011aea:	e79c      	b.n	8011a26 <__kernel_rem_pio2f+0x3c6>
 8011aec:	ed73 7a01 	vldmdb	r3!, {s15}
 8011af0:	edd3 6a01 	vldr	s13, [r3, #4]
 8011af4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011af8:	3a01      	subs	r2, #1
 8011afa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011afe:	ed83 7a00 	vstr	s14, [r3]
 8011b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b06:	edc3 7a01 	vstr	s15, [r3, #4]
 8011b0a:	e78f      	b.n	8011a2c <__kernel_rem_pio2f+0x3cc>
 8011b0c:	ed33 7a01 	vldmdb	r3!, {s14}
 8011b10:	3c01      	subs	r4, #1
 8011b12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b16:	e78f      	b.n	8011a38 <__kernel_rem_pio2f+0x3d8>
 8011b18:	eef1 6a66 	vneg.f32	s13, s13
 8011b1c:	eeb1 7a47 	vneg.f32	s14, s14
 8011b20:	edc7 6a00 	vstr	s13, [r7]
 8011b24:	ed87 7a01 	vstr	s14, [r7, #4]
 8011b28:	eef1 7a67 	vneg.f32	s15, s15
 8011b2c:	e790      	b.n	8011a50 <__kernel_rem_pio2f+0x3f0>
 8011b2e:	bf00      	nop

08011b30 <scalbnf>:
 8011b30:	ee10 3a10 	vmov	r3, s0
 8011b34:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011b38:	d02b      	beq.n	8011b92 <scalbnf+0x62>
 8011b3a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011b3e:	d302      	bcc.n	8011b46 <scalbnf+0x16>
 8011b40:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011b44:	4770      	bx	lr
 8011b46:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011b4a:	d123      	bne.n	8011b94 <scalbnf+0x64>
 8011b4c:	4b24      	ldr	r3, [pc, #144]	@ (8011be0 <scalbnf+0xb0>)
 8011b4e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011be4 <scalbnf+0xb4>
 8011b52:	4298      	cmp	r0, r3
 8011b54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011b58:	db17      	blt.n	8011b8a <scalbnf+0x5a>
 8011b5a:	ee10 3a10 	vmov	r3, s0
 8011b5e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011b62:	3a19      	subs	r2, #25
 8011b64:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011b68:	4288      	cmp	r0, r1
 8011b6a:	dd15      	ble.n	8011b98 <scalbnf+0x68>
 8011b6c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011be8 <scalbnf+0xb8>
 8011b70:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011bec <scalbnf+0xbc>
 8011b74:	ee10 3a10 	vmov	r3, s0
 8011b78:	eeb0 7a67 	vmov.f32	s14, s15
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	bfb8      	it	lt
 8011b80:	eef0 7a66 	vmovlt.f32	s15, s13
 8011b84:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011b88:	4770      	bx	lr
 8011b8a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011bf0 <scalbnf+0xc0>
 8011b8e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011b92:	4770      	bx	lr
 8011b94:	0dd2      	lsrs	r2, r2, #23
 8011b96:	e7e5      	b.n	8011b64 <scalbnf+0x34>
 8011b98:	4410      	add	r0, r2
 8011b9a:	28fe      	cmp	r0, #254	@ 0xfe
 8011b9c:	dce6      	bgt.n	8011b6c <scalbnf+0x3c>
 8011b9e:	2800      	cmp	r0, #0
 8011ba0:	dd06      	ble.n	8011bb0 <scalbnf+0x80>
 8011ba2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011ba6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011baa:	ee00 3a10 	vmov	s0, r3
 8011bae:	4770      	bx	lr
 8011bb0:	f110 0f16 	cmn.w	r0, #22
 8011bb4:	da09      	bge.n	8011bca <scalbnf+0x9a>
 8011bb6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011bf0 <scalbnf+0xc0>
 8011bba:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011bf4 <scalbnf+0xc4>
 8011bbe:	ee10 3a10 	vmov	r3, s0
 8011bc2:	eeb0 7a67 	vmov.f32	s14, s15
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	e7d9      	b.n	8011b7e <scalbnf+0x4e>
 8011bca:	3019      	adds	r0, #25
 8011bcc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011bd0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011bd4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011bf8 <scalbnf+0xc8>
 8011bd8:	ee07 3a90 	vmov	s15, r3
 8011bdc:	e7d7      	b.n	8011b8e <scalbnf+0x5e>
 8011bde:	bf00      	nop
 8011be0:	ffff3cb0 	.word	0xffff3cb0
 8011be4:	4c000000 	.word	0x4c000000
 8011be8:	7149f2ca 	.word	0x7149f2ca
 8011bec:	f149f2ca 	.word	0xf149f2ca
 8011bf0:	0da24260 	.word	0x0da24260
 8011bf4:	8da24260 	.word	0x8da24260
 8011bf8:	33000000 	.word	0x33000000

08011bfc <floorf>:
 8011bfc:	ee10 3a10 	vmov	r3, s0
 8011c00:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011c04:	3a7f      	subs	r2, #127	@ 0x7f
 8011c06:	2a16      	cmp	r2, #22
 8011c08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011c0c:	dc2b      	bgt.n	8011c66 <floorf+0x6a>
 8011c0e:	2a00      	cmp	r2, #0
 8011c10:	da12      	bge.n	8011c38 <floorf+0x3c>
 8011c12:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011c78 <floorf+0x7c>
 8011c16:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011c1a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c22:	dd06      	ble.n	8011c32 <floorf+0x36>
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	da24      	bge.n	8011c72 <floorf+0x76>
 8011c28:	2900      	cmp	r1, #0
 8011c2a:	4b14      	ldr	r3, [pc, #80]	@ (8011c7c <floorf+0x80>)
 8011c2c:	bf08      	it	eq
 8011c2e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8011c32:	ee00 3a10 	vmov	s0, r3
 8011c36:	4770      	bx	lr
 8011c38:	4911      	ldr	r1, [pc, #68]	@ (8011c80 <floorf+0x84>)
 8011c3a:	4111      	asrs	r1, r2
 8011c3c:	420b      	tst	r3, r1
 8011c3e:	d0fa      	beq.n	8011c36 <floorf+0x3a>
 8011c40:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011c78 <floorf+0x7c>
 8011c44:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011c48:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c50:	ddef      	ble.n	8011c32 <floorf+0x36>
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	bfbe      	ittt	lt
 8011c56:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8011c5a:	fa40 f202 	asrlt.w	r2, r0, r2
 8011c5e:	189b      	addlt	r3, r3, r2
 8011c60:	ea23 0301 	bic.w	r3, r3, r1
 8011c64:	e7e5      	b.n	8011c32 <floorf+0x36>
 8011c66:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011c6a:	d3e4      	bcc.n	8011c36 <floorf+0x3a>
 8011c6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011c70:	4770      	bx	lr
 8011c72:	2300      	movs	r3, #0
 8011c74:	e7dd      	b.n	8011c32 <floorf+0x36>
 8011c76:	bf00      	nop
 8011c78:	7149f2ca 	.word	0x7149f2ca
 8011c7c:	bf800000 	.word	0xbf800000
 8011c80:	007fffff 	.word	0x007fffff

08011c84 <_init>:
 8011c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c86:	bf00      	nop
 8011c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c8a:	bc08      	pop	{r3}
 8011c8c:	469e      	mov	lr, r3
 8011c8e:	4770      	bx	lr

08011c90 <_fini>:
 8011c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c92:	bf00      	nop
 8011c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c96:	bc08      	pop	{r3}
 8011c98:	469e      	mov	lr, r3
 8011c9a:	4770      	bx	lr
